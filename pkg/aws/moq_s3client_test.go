// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package aws

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/s3"
	"sync"
)

var (
	locks3ClientMockAbortMultipartUpload                          sync.RWMutex
	locks3ClientMockAbortMultipartUploadRequest                   sync.RWMutex
	locks3ClientMockAbortMultipartUploadWithContext               sync.RWMutex
	locks3ClientMockCompleteMultipartUpload                       sync.RWMutex
	locks3ClientMockCompleteMultipartUploadRequest                sync.RWMutex
	locks3ClientMockCompleteMultipartUploadWithContext            sync.RWMutex
	locks3ClientMockCopyObject                                    sync.RWMutex
	locks3ClientMockCopyObjectRequest                             sync.RWMutex
	locks3ClientMockCopyObjectWithContext                         sync.RWMutex
	locks3ClientMockCreateBucket                                  sync.RWMutex
	locks3ClientMockCreateBucketRequest                           sync.RWMutex
	locks3ClientMockCreateBucketWithContext                       sync.RWMutex
	locks3ClientMockCreateMultipartUpload                         sync.RWMutex
	locks3ClientMockCreateMultipartUploadRequest                  sync.RWMutex
	locks3ClientMockCreateMultipartUploadWithContext              sync.RWMutex
	locks3ClientMockDeleteBucket                                  sync.RWMutex
	locks3ClientMockDeleteBucketAnalyticsConfiguration            sync.RWMutex
	locks3ClientMockDeleteBucketAnalyticsConfigurationRequest     sync.RWMutex
	locks3ClientMockDeleteBucketAnalyticsConfigurationWithContext sync.RWMutex
	locks3ClientMockDeleteBucketCors                              sync.RWMutex
	locks3ClientMockDeleteBucketCorsRequest                       sync.RWMutex
	locks3ClientMockDeleteBucketCorsWithContext                   sync.RWMutex
	locks3ClientMockDeleteBucketEncryption                        sync.RWMutex
	locks3ClientMockDeleteBucketEncryptionRequest                 sync.RWMutex
	locks3ClientMockDeleteBucketEncryptionWithContext             sync.RWMutex
	locks3ClientMockDeleteBucketInventoryConfiguration            sync.RWMutex
	locks3ClientMockDeleteBucketInventoryConfigurationRequest     sync.RWMutex
	locks3ClientMockDeleteBucketInventoryConfigurationWithContext sync.RWMutex
	locks3ClientMockDeleteBucketLifecycle                         sync.RWMutex
	locks3ClientMockDeleteBucketLifecycleRequest                  sync.RWMutex
	locks3ClientMockDeleteBucketLifecycleWithContext              sync.RWMutex
	locks3ClientMockDeleteBucketMetricsConfiguration              sync.RWMutex
	locks3ClientMockDeleteBucketMetricsConfigurationRequest       sync.RWMutex
	locks3ClientMockDeleteBucketMetricsConfigurationWithContext   sync.RWMutex
	locks3ClientMockDeleteBucketPolicy                            sync.RWMutex
	locks3ClientMockDeleteBucketPolicyRequest                     sync.RWMutex
	locks3ClientMockDeleteBucketPolicyWithContext                 sync.RWMutex
	locks3ClientMockDeleteBucketReplication                       sync.RWMutex
	locks3ClientMockDeleteBucketReplicationRequest                sync.RWMutex
	locks3ClientMockDeleteBucketReplicationWithContext            sync.RWMutex
	locks3ClientMockDeleteBucketRequest                           sync.RWMutex
	locks3ClientMockDeleteBucketTagging                           sync.RWMutex
	locks3ClientMockDeleteBucketTaggingRequest                    sync.RWMutex
	locks3ClientMockDeleteBucketTaggingWithContext                sync.RWMutex
	locks3ClientMockDeleteBucketWebsite                           sync.RWMutex
	locks3ClientMockDeleteBucketWebsiteRequest                    sync.RWMutex
	locks3ClientMockDeleteBucketWebsiteWithContext                sync.RWMutex
	locks3ClientMockDeleteBucketWithContext                       sync.RWMutex
	locks3ClientMockDeleteObject                                  sync.RWMutex
	locks3ClientMockDeleteObjectRequest                           sync.RWMutex
	locks3ClientMockDeleteObjectTagging                           sync.RWMutex
	locks3ClientMockDeleteObjectTaggingRequest                    sync.RWMutex
	locks3ClientMockDeleteObjectTaggingWithContext                sync.RWMutex
	locks3ClientMockDeleteObjectWithContext                       sync.RWMutex
	locks3ClientMockDeleteObjects                                 sync.RWMutex
	locks3ClientMockDeleteObjectsRequest                          sync.RWMutex
	locks3ClientMockDeleteObjectsWithContext                      sync.RWMutex
	locks3ClientMockDeletePublicAccessBlock                       sync.RWMutex
	locks3ClientMockDeletePublicAccessBlockRequest                sync.RWMutex
	locks3ClientMockDeletePublicAccessBlockWithContext            sync.RWMutex
	locks3ClientMockGetBucketAccelerateConfiguration              sync.RWMutex
	locks3ClientMockGetBucketAccelerateConfigurationRequest       sync.RWMutex
	locks3ClientMockGetBucketAccelerateConfigurationWithContext   sync.RWMutex
	locks3ClientMockGetBucketAcl                                  sync.RWMutex
	locks3ClientMockGetBucketAclRequest                           sync.RWMutex
	locks3ClientMockGetBucketAclWithContext                       sync.RWMutex
	locks3ClientMockGetBucketAnalyticsConfiguration               sync.RWMutex
	locks3ClientMockGetBucketAnalyticsConfigurationRequest        sync.RWMutex
	locks3ClientMockGetBucketAnalyticsConfigurationWithContext    sync.RWMutex
	locks3ClientMockGetBucketCors                                 sync.RWMutex
	locks3ClientMockGetBucketCorsRequest                          sync.RWMutex
	locks3ClientMockGetBucketCorsWithContext                      sync.RWMutex
	locks3ClientMockGetBucketEncryption                           sync.RWMutex
	locks3ClientMockGetBucketEncryptionRequest                    sync.RWMutex
	locks3ClientMockGetBucketEncryptionWithContext                sync.RWMutex
	locks3ClientMockGetBucketInventoryConfiguration               sync.RWMutex
	locks3ClientMockGetBucketInventoryConfigurationRequest        sync.RWMutex
	locks3ClientMockGetBucketInventoryConfigurationWithContext    sync.RWMutex
	locks3ClientMockGetBucketLifecycle                            sync.RWMutex
	locks3ClientMockGetBucketLifecycleConfiguration               sync.RWMutex
	locks3ClientMockGetBucketLifecycleConfigurationRequest        sync.RWMutex
	locks3ClientMockGetBucketLifecycleConfigurationWithContext    sync.RWMutex
	locks3ClientMockGetBucketLifecycleRequest                     sync.RWMutex
	locks3ClientMockGetBucketLifecycleWithContext                 sync.RWMutex
	locks3ClientMockGetBucketLocation                             sync.RWMutex
	locks3ClientMockGetBucketLocationRequest                      sync.RWMutex
	locks3ClientMockGetBucketLocationWithContext                  sync.RWMutex
	locks3ClientMockGetBucketLogging                              sync.RWMutex
	locks3ClientMockGetBucketLoggingRequest                       sync.RWMutex
	locks3ClientMockGetBucketLoggingWithContext                   sync.RWMutex
	locks3ClientMockGetBucketMetricsConfiguration                 sync.RWMutex
	locks3ClientMockGetBucketMetricsConfigurationRequest          sync.RWMutex
	locks3ClientMockGetBucketMetricsConfigurationWithContext      sync.RWMutex
	locks3ClientMockGetBucketNotification                         sync.RWMutex
	locks3ClientMockGetBucketNotificationConfiguration            sync.RWMutex
	locks3ClientMockGetBucketNotificationConfigurationRequest     sync.RWMutex
	locks3ClientMockGetBucketNotificationConfigurationWithContext sync.RWMutex
	locks3ClientMockGetBucketNotificationRequest                  sync.RWMutex
	locks3ClientMockGetBucketNotificationWithContext              sync.RWMutex
	locks3ClientMockGetBucketPolicy                               sync.RWMutex
	locks3ClientMockGetBucketPolicyRequest                        sync.RWMutex
	locks3ClientMockGetBucketPolicyStatus                         sync.RWMutex
	locks3ClientMockGetBucketPolicyStatusRequest                  sync.RWMutex
	locks3ClientMockGetBucketPolicyStatusWithContext              sync.RWMutex
	locks3ClientMockGetBucketPolicyWithContext                    sync.RWMutex
	locks3ClientMockGetBucketReplication                          sync.RWMutex
	locks3ClientMockGetBucketReplicationRequest                   sync.RWMutex
	locks3ClientMockGetBucketReplicationWithContext               sync.RWMutex
	locks3ClientMockGetBucketRequestPayment                       sync.RWMutex
	locks3ClientMockGetBucketRequestPaymentRequest                sync.RWMutex
	locks3ClientMockGetBucketRequestPaymentWithContext            sync.RWMutex
	locks3ClientMockGetBucketTagging                              sync.RWMutex
	locks3ClientMockGetBucketTaggingRequest                       sync.RWMutex
	locks3ClientMockGetBucketTaggingWithContext                   sync.RWMutex
	locks3ClientMockGetBucketVersioning                           sync.RWMutex
	locks3ClientMockGetBucketVersioningRequest                    sync.RWMutex
	locks3ClientMockGetBucketVersioningWithContext                sync.RWMutex
	locks3ClientMockGetBucketWebsite                              sync.RWMutex
	locks3ClientMockGetBucketWebsiteRequest                       sync.RWMutex
	locks3ClientMockGetBucketWebsiteWithContext                   sync.RWMutex
	locks3ClientMockGetObject                                     sync.RWMutex
	locks3ClientMockGetObjectAcl                                  sync.RWMutex
	locks3ClientMockGetObjectAclRequest                           sync.RWMutex
	locks3ClientMockGetObjectAclWithContext                       sync.RWMutex
	locks3ClientMockGetObjectLegalHold                            sync.RWMutex
	locks3ClientMockGetObjectLegalHoldRequest                     sync.RWMutex
	locks3ClientMockGetObjectLegalHoldWithContext                 sync.RWMutex
	locks3ClientMockGetObjectLockConfiguration                    sync.RWMutex
	locks3ClientMockGetObjectLockConfigurationRequest             sync.RWMutex
	locks3ClientMockGetObjectLockConfigurationWithContext         sync.RWMutex
	locks3ClientMockGetObjectRequest                              sync.RWMutex
	locks3ClientMockGetObjectRetention                            sync.RWMutex
	locks3ClientMockGetObjectRetentionRequest                     sync.RWMutex
	locks3ClientMockGetObjectRetentionWithContext                 sync.RWMutex
	locks3ClientMockGetObjectTagging                              sync.RWMutex
	locks3ClientMockGetObjectTaggingRequest                       sync.RWMutex
	locks3ClientMockGetObjectTaggingWithContext                   sync.RWMutex
	locks3ClientMockGetObjectTorrent                              sync.RWMutex
	locks3ClientMockGetObjectTorrentRequest                       sync.RWMutex
	locks3ClientMockGetObjectTorrentWithContext                   sync.RWMutex
	locks3ClientMockGetObjectWithContext                          sync.RWMutex
	locks3ClientMockGetPublicAccessBlock                          sync.RWMutex
	locks3ClientMockGetPublicAccessBlockRequest                   sync.RWMutex
	locks3ClientMockGetPublicAccessBlockWithContext               sync.RWMutex
	locks3ClientMockHeadBucket                                    sync.RWMutex
	locks3ClientMockHeadBucketRequest                             sync.RWMutex
	locks3ClientMockHeadBucketWithContext                         sync.RWMutex
	locks3ClientMockHeadObject                                    sync.RWMutex
	locks3ClientMockHeadObjectRequest                             sync.RWMutex
	locks3ClientMockHeadObjectWithContext                         sync.RWMutex
	locks3ClientMockListBucketAnalyticsConfigurations             sync.RWMutex
	locks3ClientMockListBucketAnalyticsConfigurationsRequest      sync.RWMutex
	locks3ClientMockListBucketAnalyticsConfigurationsWithContext  sync.RWMutex
	locks3ClientMockListBucketInventoryConfigurations             sync.RWMutex
	locks3ClientMockListBucketInventoryConfigurationsRequest      sync.RWMutex
	locks3ClientMockListBucketInventoryConfigurationsWithContext  sync.RWMutex
	locks3ClientMockListBucketMetricsConfigurations               sync.RWMutex
	locks3ClientMockListBucketMetricsConfigurationsRequest        sync.RWMutex
	locks3ClientMockListBucketMetricsConfigurationsWithContext    sync.RWMutex
	locks3ClientMockListBuckets                                   sync.RWMutex
	locks3ClientMockListBucketsRequest                            sync.RWMutex
	locks3ClientMockListBucketsWithContext                        sync.RWMutex
	locks3ClientMockListMultipartUploads                          sync.RWMutex
	locks3ClientMockListMultipartUploadsPages                     sync.RWMutex
	locks3ClientMockListMultipartUploadsPagesWithContext          sync.RWMutex
	locks3ClientMockListMultipartUploadsRequest                   sync.RWMutex
	locks3ClientMockListMultipartUploadsWithContext               sync.RWMutex
	locks3ClientMockListObjectVersions                            sync.RWMutex
	locks3ClientMockListObjectVersionsPages                       sync.RWMutex
	locks3ClientMockListObjectVersionsPagesWithContext            sync.RWMutex
	locks3ClientMockListObjectVersionsRequest                     sync.RWMutex
	locks3ClientMockListObjectVersionsWithContext                 sync.RWMutex
	locks3ClientMockListObjects                                   sync.RWMutex
	locks3ClientMockListObjectsPages                              sync.RWMutex
	locks3ClientMockListObjectsPagesWithContext                   sync.RWMutex
	locks3ClientMockListObjectsRequest                            sync.RWMutex
	locks3ClientMockListObjectsV2                                 sync.RWMutex
	locks3ClientMockListObjectsV2Pages                            sync.RWMutex
	locks3ClientMockListObjectsV2PagesWithContext                 sync.RWMutex
	locks3ClientMockListObjectsV2Request                          sync.RWMutex
	locks3ClientMockListObjectsV2WithContext                      sync.RWMutex
	locks3ClientMockListObjectsWithContext                        sync.RWMutex
	locks3ClientMockListParts                                     sync.RWMutex
	locks3ClientMockListPartsPages                                sync.RWMutex
	locks3ClientMockListPartsPagesWithContext                     sync.RWMutex
	locks3ClientMockListPartsRequest                              sync.RWMutex
	locks3ClientMockListPartsWithContext                          sync.RWMutex
	locks3ClientMockPutBucketAccelerateConfiguration              sync.RWMutex
	locks3ClientMockPutBucketAccelerateConfigurationRequest       sync.RWMutex
	locks3ClientMockPutBucketAccelerateConfigurationWithContext   sync.RWMutex
	locks3ClientMockPutBucketAcl                                  sync.RWMutex
	locks3ClientMockPutBucketAclRequest                           sync.RWMutex
	locks3ClientMockPutBucketAclWithContext                       sync.RWMutex
	locks3ClientMockPutBucketAnalyticsConfiguration               sync.RWMutex
	locks3ClientMockPutBucketAnalyticsConfigurationRequest        sync.RWMutex
	locks3ClientMockPutBucketAnalyticsConfigurationWithContext    sync.RWMutex
	locks3ClientMockPutBucketCors                                 sync.RWMutex
	locks3ClientMockPutBucketCorsRequest                          sync.RWMutex
	locks3ClientMockPutBucketCorsWithContext                      sync.RWMutex
	locks3ClientMockPutBucketEncryption                           sync.RWMutex
	locks3ClientMockPutBucketEncryptionRequest                    sync.RWMutex
	locks3ClientMockPutBucketEncryptionWithContext                sync.RWMutex
	locks3ClientMockPutBucketInventoryConfiguration               sync.RWMutex
	locks3ClientMockPutBucketInventoryConfigurationRequest        sync.RWMutex
	locks3ClientMockPutBucketInventoryConfigurationWithContext    sync.RWMutex
	locks3ClientMockPutBucketLifecycle                            sync.RWMutex
	locks3ClientMockPutBucketLifecycleConfiguration               sync.RWMutex
	locks3ClientMockPutBucketLifecycleConfigurationRequest        sync.RWMutex
	locks3ClientMockPutBucketLifecycleConfigurationWithContext    sync.RWMutex
	locks3ClientMockPutBucketLifecycleRequest                     sync.RWMutex
	locks3ClientMockPutBucketLifecycleWithContext                 sync.RWMutex
	locks3ClientMockPutBucketLogging                              sync.RWMutex
	locks3ClientMockPutBucketLoggingRequest                       sync.RWMutex
	locks3ClientMockPutBucketLoggingWithContext                   sync.RWMutex
	locks3ClientMockPutBucketMetricsConfiguration                 sync.RWMutex
	locks3ClientMockPutBucketMetricsConfigurationRequest          sync.RWMutex
	locks3ClientMockPutBucketMetricsConfigurationWithContext      sync.RWMutex
	locks3ClientMockPutBucketNotification                         sync.RWMutex
	locks3ClientMockPutBucketNotificationConfiguration            sync.RWMutex
	locks3ClientMockPutBucketNotificationConfigurationRequest     sync.RWMutex
	locks3ClientMockPutBucketNotificationConfigurationWithContext sync.RWMutex
	locks3ClientMockPutBucketNotificationRequest                  sync.RWMutex
	locks3ClientMockPutBucketNotificationWithContext              sync.RWMutex
	locks3ClientMockPutBucketPolicy                               sync.RWMutex
	locks3ClientMockPutBucketPolicyRequest                        sync.RWMutex
	locks3ClientMockPutBucketPolicyWithContext                    sync.RWMutex
	locks3ClientMockPutBucketReplication                          sync.RWMutex
	locks3ClientMockPutBucketReplicationRequest                   sync.RWMutex
	locks3ClientMockPutBucketReplicationWithContext               sync.RWMutex
	locks3ClientMockPutBucketRequestPayment                       sync.RWMutex
	locks3ClientMockPutBucketRequestPaymentRequest                sync.RWMutex
	locks3ClientMockPutBucketRequestPaymentWithContext            sync.RWMutex
	locks3ClientMockPutBucketTagging                              sync.RWMutex
	locks3ClientMockPutBucketTaggingRequest                       sync.RWMutex
	locks3ClientMockPutBucketTaggingWithContext                   sync.RWMutex
	locks3ClientMockPutBucketVersioning                           sync.RWMutex
	locks3ClientMockPutBucketVersioningRequest                    sync.RWMutex
	locks3ClientMockPutBucketVersioningWithContext                sync.RWMutex
	locks3ClientMockPutBucketWebsite                              sync.RWMutex
	locks3ClientMockPutBucketWebsiteRequest                       sync.RWMutex
	locks3ClientMockPutBucketWebsiteWithContext                   sync.RWMutex
	locks3ClientMockPutObject                                     sync.RWMutex
	locks3ClientMockPutObjectAcl                                  sync.RWMutex
	locks3ClientMockPutObjectAclRequest                           sync.RWMutex
	locks3ClientMockPutObjectAclWithContext                       sync.RWMutex
	locks3ClientMockPutObjectLegalHold                            sync.RWMutex
	locks3ClientMockPutObjectLegalHoldRequest                     sync.RWMutex
	locks3ClientMockPutObjectLegalHoldWithContext                 sync.RWMutex
	locks3ClientMockPutObjectLockConfiguration                    sync.RWMutex
	locks3ClientMockPutObjectLockConfigurationRequest             sync.RWMutex
	locks3ClientMockPutObjectLockConfigurationWithContext         sync.RWMutex
	locks3ClientMockPutObjectRequest                              sync.RWMutex
	locks3ClientMockPutObjectRetention                            sync.RWMutex
	locks3ClientMockPutObjectRetentionRequest                     sync.RWMutex
	locks3ClientMockPutObjectRetentionWithContext                 sync.RWMutex
	locks3ClientMockPutObjectTagging                              sync.RWMutex
	locks3ClientMockPutObjectTaggingRequest                       sync.RWMutex
	locks3ClientMockPutObjectTaggingWithContext                   sync.RWMutex
	locks3ClientMockPutObjectWithContext                          sync.RWMutex
	locks3ClientMockPutPublicAccessBlock                          sync.RWMutex
	locks3ClientMockPutPublicAccessBlockRequest                   sync.RWMutex
	locks3ClientMockPutPublicAccessBlockWithContext               sync.RWMutex
	locks3ClientMockRestoreObject                                 sync.RWMutex
	locks3ClientMockRestoreObjectRequest                          sync.RWMutex
	locks3ClientMockRestoreObjectWithContext                      sync.RWMutex
	locks3ClientMockSelectObjectContent                           sync.RWMutex
	locks3ClientMockSelectObjectContentRequest                    sync.RWMutex
	locks3ClientMockSelectObjectContentWithContext                sync.RWMutex
	locks3ClientMockUploadPart                                    sync.RWMutex
	locks3ClientMockUploadPartCopy                                sync.RWMutex
	locks3ClientMockUploadPartCopyRequest                         sync.RWMutex
	locks3ClientMockUploadPartCopyWithContext                     sync.RWMutex
	locks3ClientMockUploadPartRequest                             sync.RWMutex
	locks3ClientMockUploadPartWithContext                         sync.RWMutex
	locks3ClientMockWaitUntilBucketExists                         sync.RWMutex
	locks3ClientMockWaitUntilBucketExistsWithContext              sync.RWMutex
	locks3ClientMockWaitUntilBucketNotExists                      sync.RWMutex
	locks3ClientMockWaitUntilBucketNotExistsWithContext           sync.RWMutex
	locks3ClientMockWaitUntilObjectExists                         sync.RWMutex
	locks3ClientMockWaitUntilObjectExistsWithContext              sync.RWMutex
	locks3ClientMockWaitUntilObjectNotExists                      sync.RWMutex
	locks3ClientMockWaitUntilObjectNotExistsWithContext           sync.RWMutex
)

// Ensure, that s3ClientMock does implement s3Client.
// If this is not the case, regenerate this file with moq.
var _ s3Client = &s3ClientMock{}

// s3ClientMock is a mock implementation of s3Client.
//
//     func TestSomethingThatUsess3Client(t *testing.T) {
//
//         // make and configure a mocked s3Client
//         mockeds3Client := &s3ClientMock{
//             AbortMultipartUploadFunc: func(in1 *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error) {
// 	               panic("mock out the AbortMultipartUpload method")
//             },
//             AbortMultipartUploadRequestFunc: func(in1 *s3.AbortMultipartUploadInput) (*request.Request, *s3.AbortMultipartUploadOutput) {
// 	               panic("mock out the AbortMultipartUploadRequest method")
//             },
//             AbortMultipartUploadWithContextFunc: func(in1 context.Context, in2 *s3.AbortMultipartUploadInput, in3 ...request.Option) (*s3.AbortMultipartUploadOutput, error) {
// 	               panic("mock out the AbortMultipartUploadWithContext method")
//             },
//             CompleteMultipartUploadFunc: func(in1 *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error) {
// 	               panic("mock out the CompleteMultipartUpload method")
//             },
//             CompleteMultipartUploadRequestFunc: func(in1 *s3.CompleteMultipartUploadInput) (*request.Request, *s3.CompleteMultipartUploadOutput) {
// 	               panic("mock out the CompleteMultipartUploadRequest method")
//             },
//             CompleteMultipartUploadWithContextFunc: func(in1 context.Context, in2 *s3.CompleteMultipartUploadInput, in3 ...request.Option) (*s3.CompleteMultipartUploadOutput, error) {
// 	               panic("mock out the CompleteMultipartUploadWithContext method")
//             },
//             CopyObjectFunc: func(in1 *s3.CopyObjectInput) (*s3.CopyObjectOutput, error) {
// 	               panic("mock out the CopyObject method")
//             },
//             CopyObjectRequestFunc: func(in1 *s3.CopyObjectInput) (*request.Request, *s3.CopyObjectOutput) {
// 	               panic("mock out the CopyObjectRequest method")
//             },
//             CopyObjectWithContextFunc: func(in1 context.Context, in2 *s3.CopyObjectInput, in3 ...request.Option) (*s3.CopyObjectOutput, error) {
// 	               panic("mock out the CopyObjectWithContext method")
//             },
//             CreateBucketFunc: func(in1 *s3.CreateBucketInput) (*s3.CreateBucketOutput, error) {
// 	               panic("mock out the CreateBucket method")
//             },
//             CreateBucketRequestFunc: func(in1 *s3.CreateBucketInput) (*request.Request, *s3.CreateBucketOutput) {
// 	               panic("mock out the CreateBucketRequest method")
//             },
//             CreateBucketWithContextFunc: func(in1 context.Context, in2 *s3.CreateBucketInput, in3 ...request.Option) (*s3.CreateBucketOutput, error) {
// 	               panic("mock out the CreateBucketWithContext method")
//             },
//             CreateMultipartUploadFunc: func(in1 *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error) {
// 	               panic("mock out the CreateMultipartUpload method")
//             },
//             CreateMultipartUploadRequestFunc: func(in1 *s3.CreateMultipartUploadInput) (*request.Request, *s3.CreateMultipartUploadOutput) {
// 	               panic("mock out the CreateMultipartUploadRequest method")
//             },
//             CreateMultipartUploadWithContextFunc: func(in1 context.Context, in2 *s3.CreateMultipartUploadInput, in3 ...request.Option) (*s3.CreateMultipartUploadOutput, error) {
// 	               panic("mock out the CreateMultipartUploadWithContext method")
//             },
//             DeleteBucketFunc: func(in1 *s3.DeleteBucketInput) (*s3.DeleteBucketOutput, error) {
// 	               panic("mock out the DeleteBucket method")
//             },
//             DeleteBucketAnalyticsConfigurationFunc: func(in1 *s3.DeleteBucketAnalyticsConfigurationInput) (*s3.DeleteBucketAnalyticsConfigurationOutput, error) {
// 	               panic("mock out the DeleteBucketAnalyticsConfiguration method")
//             },
//             DeleteBucketAnalyticsConfigurationRequestFunc: func(in1 *s3.DeleteBucketAnalyticsConfigurationInput) (*request.Request, *s3.DeleteBucketAnalyticsConfigurationOutput) {
// 	               panic("mock out the DeleteBucketAnalyticsConfigurationRequest method")
//             },
//             DeleteBucketAnalyticsConfigurationWithContextFunc: func(in1 context.Context, in2 *s3.DeleteBucketAnalyticsConfigurationInput, in3 ...request.Option) (*s3.DeleteBucketAnalyticsConfigurationOutput, error) {
// 	               panic("mock out the DeleteBucketAnalyticsConfigurationWithContext method")
//             },
//             DeleteBucketCorsFunc: func(in1 *s3.DeleteBucketCorsInput) (*s3.DeleteBucketCorsOutput, error) {
// 	               panic("mock out the DeleteBucketCors method")
//             },
//             DeleteBucketCorsRequestFunc: func(in1 *s3.DeleteBucketCorsInput) (*request.Request, *s3.DeleteBucketCorsOutput) {
// 	               panic("mock out the DeleteBucketCorsRequest method")
//             },
//             DeleteBucketCorsWithContextFunc: func(in1 context.Context, in2 *s3.DeleteBucketCorsInput, in3 ...request.Option) (*s3.DeleteBucketCorsOutput, error) {
// 	               panic("mock out the DeleteBucketCorsWithContext method")
//             },
//             DeleteBucketEncryptionFunc: func(in1 *s3.DeleteBucketEncryptionInput) (*s3.DeleteBucketEncryptionOutput, error) {
// 	               panic("mock out the DeleteBucketEncryption method")
//             },
//             DeleteBucketEncryptionRequestFunc: func(in1 *s3.DeleteBucketEncryptionInput) (*request.Request, *s3.DeleteBucketEncryptionOutput) {
// 	               panic("mock out the DeleteBucketEncryptionRequest method")
//             },
//             DeleteBucketEncryptionWithContextFunc: func(in1 context.Context, in2 *s3.DeleteBucketEncryptionInput, in3 ...request.Option) (*s3.DeleteBucketEncryptionOutput, error) {
// 	               panic("mock out the DeleteBucketEncryptionWithContext method")
//             },
//             DeleteBucketInventoryConfigurationFunc: func(in1 *s3.DeleteBucketInventoryConfigurationInput) (*s3.DeleteBucketInventoryConfigurationOutput, error) {
// 	               panic("mock out the DeleteBucketInventoryConfiguration method")
//             },
//             DeleteBucketInventoryConfigurationRequestFunc: func(in1 *s3.DeleteBucketInventoryConfigurationInput) (*request.Request, *s3.DeleteBucketInventoryConfigurationOutput) {
// 	               panic("mock out the DeleteBucketInventoryConfigurationRequest method")
//             },
//             DeleteBucketInventoryConfigurationWithContextFunc: func(in1 context.Context, in2 *s3.DeleteBucketInventoryConfigurationInput, in3 ...request.Option) (*s3.DeleteBucketInventoryConfigurationOutput, error) {
// 	               panic("mock out the DeleteBucketInventoryConfigurationWithContext method")
//             },
//             DeleteBucketLifecycleFunc: func(in1 *s3.DeleteBucketLifecycleInput) (*s3.DeleteBucketLifecycleOutput, error) {
// 	               panic("mock out the DeleteBucketLifecycle method")
//             },
//             DeleteBucketLifecycleRequestFunc: func(in1 *s3.DeleteBucketLifecycleInput) (*request.Request, *s3.DeleteBucketLifecycleOutput) {
// 	               panic("mock out the DeleteBucketLifecycleRequest method")
//             },
//             DeleteBucketLifecycleWithContextFunc: func(in1 context.Context, in2 *s3.DeleteBucketLifecycleInput, in3 ...request.Option) (*s3.DeleteBucketLifecycleOutput, error) {
// 	               panic("mock out the DeleteBucketLifecycleWithContext method")
//             },
//             DeleteBucketMetricsConfigurationFunc: func(in1 *s3.DeleteBucketMetricsConfigurationInput) (*s3.DeleteBucketMetricsConfigurationOutput, error) {
// 	               panic("mock out the DeleteBucketMetricsConfiguration method")
//             },
//             DeleteBucketMetricsConfigurationRequestFunc: func(in1 *s3.DeleteBucketMetricsConfigurationInput) (*request.Request, *s3.DeleteBucketMetricsConfigurationOutput) {
// 	               panic("mock out the DeleteBucketMetricsConfigurationRequest method")
//             },
//             DeleteBucketMetricsConfigurationWithContextFunc: func(in1 context.Context, in2 *s3.DeleteBucketMetricsConfigurationInput, in3 ...request.Option) (*s3.DeleteBucketMetricsConfigurationOutput, error) {
// 	               panic("mock out the DeleteBucketMetricsConfigurationWithContext method")
//             },
//             DeleteBucketPolicyFunc: func(in1 *s3.DeleteBucketPolicyInput) (*s3.DeleteBucketPolicyOutput, error) {
// 	               panic("mock out the DeleteBucketPolicy method")
//             },
//             DeleteBucketPolicyRequestFunc: func(in1 *s3.DeleteBucketPolicyInput) (*request.Request, *s3.DeleteBucketPolicyOutput) {
// 	               panic("mock out the DeleteBucketPolicyRequest method")
//             },
//             DeleteBucketPolicyWithContextFunc: func(in1 context.Context, in2 *s3.DeleteBucketPolicyInput, in3 ...request.Option) (*s3.DeleteBucketPolicyOutput, error) {
// 	               panic("mock out the DeleteBucketPolicyWithContext method")
//             },
//             DeleteBucketReplicationFunc: func(in1 *s3.DeleteBucketReplicationInput) (*s3.DeleteBucketReplicationOutput, error) {
// 	               panic("mock out the DeleteBucketReplication method")
//             },
//             DeleteBucketReplicationRequestFunc: func(in1 *s3.DeleteBucketReplicationInput) (*request.Request, *s3.DeleteBucketReplicationOutput) {
// 	               panic("mock out the DeleteBucketReplicationRequest method")
//             },
//             DeleteBucketReplicationWithContextFunc: func(in1 context.Context, in2 *s3.DeleteBucketReplicationInput, in3 ...request.Option) (*s3.DeleteBucketReplicationOutput, error) {
// 	               panic("mock out the DeleteBucketReplicationWithContext method")
//             },
//             DeleteBucketRequestFunc: func(in1 *s3.DeleteBucketInput) (*request.Request, *s3.DeleteBucketOutput) {
// 	               panic("mock out the DeleteBucketRequest method")
//             },
//             DeleteBucketTaggingFunc: func(in1 *s3.DeleteBucketTaggingInput) (*s3.DeleteBucketTaggingOutput, error) {
// 	               panic("mock out the DeleteBucketTagging method")
//             },
//             DeleteBucketTaggingRequestFunc: func(in1 *s3.DeleteBucketTaggingInput) (*request.Request, *s3.DeleteBucketTaggingOutput) {
// 	               panic("mock out the DeleteBucketTaggingRequest method")
//             },
//             DeleteBucketTaggingWithContextFunc: func(in1 context.Context, in2 *s3.DeleteBucketTaggingInput, in3 ...request.Option) (*s3.DeleteBucketTaggingOutput, error) {
// 	               panic("mock out the DeleteBucketTaggingWithContext method")
//             },
//             DeleteBucketWebsiteFunc: func(in1 *s3.DeleteBucketWebsiteInput) (*s3.DeleteBucketWebsiteOutput, error) {
// 	               panic("mock out the DeleteBucketWebsite method")
//             },
//             DeleteBucketWebsiteRequestFunc: func(in1 *s3.DeleteBucketWebsiteInput) (*request.Request, *s3.DeleteBucketWebsiteOutput) {
// 	               panic("mock out the DeleteBucketWebsiteRequest method")
//             },
//             DeleteBucketWebsiteWithContextFunc: func(in1 context.Context, in2 *s3.DeleteBucketWebsiteInput, in3 ...request.Option) (*s3.DeleteBucketWebsiteOutput, error) {
// 	               panic("mock out the DeleteBucketWebsiteWithContext method")
//             },
//             DeleteBucketWithContextFunc: func(in1 context.Context, in2 *s3.DeleteBucketInput, in3 ...request.Option) (*s3.DeleteBucketOutput, error) {
// 	               panic("mock out the DeleteBucketWithContext method")
//             },
//             DeleteObjectFunc: func(in1 *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error) {
// 	               panic("mock out the DeleteObject method")
//             },
//             DeleteObjectRequestFunc: func(in1 *s3.DeleteObjectInput) (*request.Request, *s3.DeleteObjectOutput) {
// 	               panic("mock out the DeleteObjectRequest method")
//             },
//             DeleteObjectTaggingFunc: func(in1 *s3.DeleteObjectTaggingInput) (*s3.DeleteObjectTaggingOutput, error) {
// 	               panic("mock out the DeleteObjectTagging method")
//             },
//             DeleteObjectTaggingRequestFunc: func(in1 *s3.DeleteObjectTaggingInput) (*request.Request, *s3.DeleteObjectTaggingOutput) {
// 	               panic("mock out the DeleteObjectTaggingRequest method")
//             },
//             DeleteObjectTaggingWithContextFunc: func(in1 context.Context, in2 *s3.DeleteObjectTaggingInput, in3 ...request.Option) (*s3.DeleteObjectTaggingOutput, error) {
// 	               panic("mock out the DeleteObjectTaggingWithContext method")
//             },
//             DeleteObjectWithContextFunc: func(in1 context.Context, in2 *s3.DeleteObjectInput, in3 ...request.Option) (*s3.DeleteObjectOutput, error) {
// 	               panic("mock out the DeleteObjectWithContext method")
//             },
//             DeleteObjectsFunc: func(in1 *s3.DeleteObjectsInput) (*s3.DeleteObjectsOutput, error) {
// 	               panic("mock out the DeleteObjects method")
//             },
//             DeleteObjectsRequestFunc: func(in1 *s3.DeleteObjectsInput) (*request.Request, *s3.DeleteObjectsOutput) {
// 	               panic("mock out the DeleteObjectsRequest method")
//             },
//             DeleteObjectsWithContextFunc: func(in1 context.Context, in2 *s3.DeleteObjectsInput, in3 ...request.Option) (*s3.DeleteObjectsOutput, error) {
// 	               panic("mock out the DeleteObjectsWithContext method")
//             },
//             DeletePublicAccessBlockFunc: func(in1 *s3.DeletePublicAccessBlockInput) (*s3.DeletePublicAccessBlockOutput, error) {
// 	               panic("mock out the DeletePublicAccessBlock method")
//             },
//             DeletePublicAccessBlockRequestFunc: func(in1 *s3.DeletePublicAccessBlockInput) (*request.Request, *s3.DeletePublicAccessBlockOutput) {
// 	               panic("mock out the DeletePublicAccessBlockRequest method")
//             },
//             DeletePublicAccessBlockWithContextFunc: func(in1 context.Context, in2 *s3.DeletePublicAccessBlockInput, in3 ...request.Option) (*s3.DeletePublicAccessBlockOutput, error) {
// 	               panic("mock out the DeletePublicAccessBlockWithContext method")
//             },
//             GetBucketAccelerateConfigurationFunc: func(in1 *s3.GetBucketAccelerateConfigurationInput) (*s3.GetBucketAccelerateConfigurationOutput, error) {
// 	               panic("mock out the GetBucketAccelerateConfiguration method")
//             },
//             GetBucketAccelerateConfigurationRequestFunc: func(in1 *s3.GetBucketAccelerateConfigurationInput) (*request.Request, *s3.GetBucketAccelerateConfigurationOutput) {
// 	               panic("mock out the GetBucketAccelerateConfigurationRequest method")
//             },
//             GetBucketAccelerateConfigurationWithContextFunc: func(in1 context.Context, in2 *s3.GetBucketAccelerateConfigurationInput, in3 ...request.Option) (*s3.GetBucketAccelerateConfigurationOutput, error) {
// 	               panic("mock out the GetBucketAccelerateConfigurationWithContext method")
//             },
//             GetBucketAclFunc: func(in1 *s3.GetBucketAclInput) (*s3.GetBucketAclOutput, error) {
// 	               panic("mock out the GetBucketAcl method")
//             },
//             GetBucketAclRequestFunc: func(in1 *s3.GetBucketAclInput) (*request.Request, *s3.GetBucketAclOutput) {
// 	               panic("mock out the GetBucketAclRequest method")
//             },
//             GetBucketAclWithContextFunc: func(in1 context.Context, in2 *s3.GetBucketAclInput, in3 ...request.Option) (*s3.GetBucketAclOutput, error) {
// 	               panic("mock out the GetBucketAclWithContext method")
//             },
//             GetBucketAnalyticsConfigurationFunc: func(in1 *s3.GetBucketAnalyticsConfigurationInput) (*s3.GetBucketAnalyticsConfigurationOutput, error) {
// 	               panic("mock out the GetBucketAnalyticsConfiguration method")
//             },
//             GetBucketAnalyticsConfigurationRequestFunc: func(in1 *s3.GetBucketAnalyticsConfigurationInput) (*request.Request, *s3.GetBucketAnalyticsConfigurationOutput) {
// 	               panic("mock out the GetBucketAnalyticsConfigurationRequest method")
//             },
//             GetBucketAnalyticsConfigurationWithContextFunc: func(in1 context.Context, in2 *s3.GetBucketAnalyticsConfigurationInput, in3 ...request.Option) (*s3.GetBucketAnalyticsConfigurationOutput, error) {
// 	               panic("mock out the GetBucketAnalyticsConfigurationWithContext method")
//             },
//             GetBucketCorsFunc: func(in1 *s3.GetBucketCorsInput) (*s3.GetBucketCorsOutput, error) {
// 	               panic("mock out the GetBucketCors method")
//             },
//             GetBucketCorsRequestFunc: func(in1 *s3.GetBucketCorsInput) (*request.Request, *s3.GetBucketCorsOutput) {
// 	               panic("mock out the GetBucketCorsRequest method")
//             },
//             GetBucketCorsWithContextFunc: func(in1 context.Context, in2 *s3.GetBucketCorsInput, in3 ...request.Option) (*s3.GetBucketCorsOutput, error) {
// 	               panic("mock out the GetBucketCorsWithContext method")
//             },
//             GetBucketEncryptionFunc: func(in1 *s3.GetBucketEncryptionInput) (*s3.GetBucketEncryptionOutput, error) {
// 	               panic("mock out the GetBucketEncryption method")
//             },
//             GetBucketEncryptionRequestFunc: func(in1 *s3.GetBucketEncryptionInput) (*request.Request, *s3.GetBucketEncryptionOutput) {
// 	               panic("mock out the GetBucketEncryptionRequest method")
//             },
//             GetBucketEncryptionWithContextFunc: func(in1 context.Context, in2 *s3.GetBucketEncryptionInput, in3 ...request.Option) (*s3.GetBucketEncryptionOutput, error) {
// 	               panic("mock out the GetBucketEncryptionWithContext method")
//             },
//             GetBucketInventoryConfigurationFunc: func(in1 *s3.GetBucketInventoryConfigurationInput) (*s3.GetBucketInventoryConfigurationOutput, error) {
// 	               panic("mock out the GetBucketInventoryConfiguration method")
//             },
//             GetBucketInventoryConfigurationRequestFunc: func(in1 *s3.GetBucketInventoryConfigurationInput) (*request.Request, *s3.GetBucketInventoryConfigurationOutput) {
// 	               panic("mock out the GetBucketInventoryConfigurationRequest method")
//             },
//             GetBucketInventoryConfigurationWithContextFunc: func(in1 context.Context, in2 *s3.GetBucketInventoryConfigurationInput, in3 ...request.Option) (*s3.GetBucketInventoryConfigurationOutput, error) {
// 	               panic("mock out the GetBucketInventoryConfigurationWithContext method")
//             },
//             GetBucketLifecycleFunc: func(in1 *s3.GetBucketLifecycleInput) (*s3.GetBucketLifecycleOutput, error) {
// 	               panic("mock out the GetBucketLifecycle method")
//             },
//             GetBucketLifecycleConfigurationFunc: func(in1 *s3.GetBucketLifecycleConfigurationInput) (*s3.GetBucketLifecycleConfigurationOutput, error) {
// 	               panic("mock out the GetBucketLifecycleConfiguration method")
//             },
//             GetBucketLifecycleConfigurationRequestFunc: func(in1 *s3.GetBucketLifecycleConfigurationInput) (*request.Request, *s3.GetBucketLifecycleConfigurationOutput) {
// 	               panic("mock out the GetBucketLifecycleConfigurationRequest method")
//             },
//             GetBucketLifecycleConfigurationWithContextFunc: func(in1 context.Context, in2 *s3.GetBucketLifecycleConfigurationInput, in3 ...request.Option) (*s3.GetBucketLifecycleConfigurationOutput, error) {
// 	               panic("mock out the GetBucketLifecycleConfigurationWithContext method")
//             },
//             GetBucketLifecycleRequestFunc: func(in1 *s3.GetBucketLifecycleInput) (*request.Request, *s3.GetBucketLifecycleOutput) {
// 	               panic("mock out the GetBucketLifecycleRequest method")
//             },
//             GetBucketLifecycleWithContextFunc: func(in1 context.Context, in2 *s3.GetBucketLifecycleInput, in3 ...request.Option) (*s3.GetBucketLifecycleOutput, error) {
// 	               panic("mock out the GetBucketLifecycleWithContext method")
//             },
//             GetBucketLocationFunc: func(in1 *s3.GetBucketLocationInput) (*s3.GetBucketLocationOutput, error) {
// 	               panic("mock out the GetBucketLocation method")
//             },
//             GetBucketLocationRequestFunc: func(in1 *s3.GetBucketLocationInput) (*request.Request, *s3.GetBucketLocationOutput) {
// 	               panic("mock out the GetBucketLocationRequest method")
//             },
//             GetBucketLocationWithContextFunc: func(in1 context.Context, in2 *s3.GetBucketLocationInput, in3 ...request.Option) (*s3.GetBucketLocationOutput, error) {
// 	               panic("mock out the GetBucketLocationWithContext method")
//             },
//             GetBucketLoggingFunc: func(in1 *s3.GetBucketLoggingInput) (*s3.GetBucketLoggingOutput, error) {
// 	               panic("mock out the GetBucketLogging method")
//             },
//             GetBucketLoggingRequestFunc: func(in1 *s3.GetBucketLoggingInput) (*request.Request, *s3.GetBucketLoggingOutput) {
// 	               panic("mock out the GetBucketLoggingRequest method")
//             },
//             GetBucketLoggingWithContextFunc: func(in1 context.Context, in2 *s3.GetBucketLoggingInput, in3 ...request.Option) (*s3.GetBucketLoggingOutput, error) {
// 	               panic("mock out the GetBucketLoggingWithContext method")
//             },
//             GetBucketMetricsConfigurationFunc: func(in1 *s3.GetBucketMetricsConfigurationInput) (*s3.GetBucketMetricsConfigurationOutput, error) {
// 	               panic("mock out the GetBucketMetricsConfiguration method")
//             },
//             GetBucketMetricsConfigurationRequestFunc: func(in1 *s3.GetBucketMetricsConfigurationInput) (*request.Request, *s3.GetBucketMetricsConfigurationOutput) {
// 	               panic("mock out the GetBucketMetricsConfigurationRequest method")
//             },
//             GetBucketMetricsConfigurationWithContextFunc: func(in1 context.Context, in2 *s3.GetBucketMetricsConfigurationInput, in3 ...request.Option) (*s3.GetBucketMetricsConfigurationOutput, error) {
// 	               panic("mock out the GetBucketMetricsConfigurationWithContext method")
//             },
//             GetBucketNotificationFunc: func(in1 *s3.GetBucketNotificationConfigurationRequest) (*s3.NotificationConfigurationDeprecated, error) {
// 	               panic("mock out the GetBucketNotification method")
//             },
//             GetBucketNotificationConfigurationFunc: func(in1 *s3.GetBucketNotificationConfigurationRequest) (*s3.NotificationConfiguration, error) {
// 	               panic("mock out the GetBucketNotificationConfiguration method")
//             },
//             GetBucketNotificationConfigurationRequestFunc: func(in1 *s3.GetBucketNotificationConfigurationRequest) (*request.Request, *s3.NotificationConfiguration) {
// 	               panic("mock out the GetBucketNotificationConfigurationRequest method")
//             },
//             GetBucketNotificationConfigurationWithContextFunc: func(in1 context.Context, in2 *s3.GetBucketNotificationConfigurationRequest, in3 ...request.Option) (*s3.NotificationConfiguration, error) {
// 	               panic("mock out the GetBucketNotificationConfigurationWithContext method")
//             },
//             GetBucketNotificationRequestFunc: func(in1 *s3.GetBucketNotificationConfigurationRequest) (*request.Request, *s3.NotificationConfigurationDeprecated) {
// 	               panic("mock out the GetBucketNotificationRequest method")
//             },
//             GetBucketNotificationWithContextFunc: func(in1 context.Context, in2 *s3.GetBucketNotificationConfigurationRequest, in3 ...request.Option) (*s3.NotificationConfigurationDeprecated, error) {
// 	               panic("mock out the GetBucketNotificationWithContext method")
//             },
//             GetBucketPolicyFunc: func(in1 *s3.GetBucketPolicyInput) (*s3.GetBucketPolicyOutput, error) {
// 	               panic("mock out the GetBucketPolicy method")
//             },
//             GetBucketPolicyRequestFunc: func(in1 *s3.GetBucketPolicyInput) (*request.Request, *s3.GetBucketPolicyOutput) {
// 	               panic("mock out the GetBucketPolicyRequest method")
//             },
//             GetBucketPolicyStatusFunc: func(in1 *s3.GetBucketPolicyStatusInput) (*s3.GetBucketPolicyStatusOutput, error) {
// 	               panic("mock out the GetBucketPolicyStatus method")
//             },
//             GetBucketPolicyStatusRequestFunc: func(in1 *s3.GetBucketPolicyStatusInput) (*request.Request, *s3.GetBucketPolicyStatusOutput) {
// 	               panic("mock out the GetBucketPolicyStatusRequest method")
//             },
//             GetBucketPolicyStatusWithContextFunc: func(in1 context.Context, in2 *s3.GetBucketPolicyStatusInput, in3 ...request.Option) (*s3.GetBucketPolicyStatusOutput, error) {
// 	               panic("mock out the GetBucketPolicyStatusWithContext method")
//             },
//             GetBucketPolicyWithContextFunc: func(in1 context.Context, in2 *s3.GetBucketPolicyInput, in3 ...request.Option) (*s3.GetBucketPolicyOutput, error) {
// 	               panic("mock out the GetBucketPolicyWithContext method")
//             },
//             GetBucketReplicationFunc: func(in1 *s3.GetBucketReplicationInput) (*s3.GetBucketReplicationOutput, error) {
// 	               panic("mock out the GetBucketReplication method")
//             },
//             GetBucketReplicationRequestFunc: func(in1 *s3.GetBucketReplicationInput) (*request.Request, *s3.GetBucketReplicationOutput) {
// 	               panic("mock out the GetBucketReplicationRequest method")
//             },
//             GetBucketReplicationWithContextFunc: func(in1 context.Context, in2 *s3.GetBucketReplicationInput, in3 ...request.Option) (*s3.GetBucketReplicationOutput, error) {
// 	               panic("mock out the GetBucketReplicationWithContext method")
//             },
//             GetBucketRequestPaymentFunc: func(in1 *s3.GetBucketRequestPaymentInput) (*s3.GetBucketRequestPaymentOutput, error) {
// 	               panic("mock out the GetBucketRequestPayment method")
//             },
//             GetBucketRequestPaymentRequestFunc: func(in1 *s3.GetBucketRequestPaymentInput) (*request.Request, *s3.GetBucketRequestPaymentOutput) {
// 	               panic("mock out the GetBucketRequestPaymentRequest method")
//             },
//             GetBucketRequestPaymentWithContextFunc: func(in1 context.Context, in2 *s3.GetBucketRequestPaymentInput, in3 ...request.Option) (*s3.GetBucketRequestPaymentOutput, error) {
// 	               panic("mock out the GetBucketRequestPaymentWithContext method")
//             },
//             GetBucketTaggingFunc: func(in1 *s3.GetBucketTaggingInput) (*s3.GetBucketTaggingOutput, error) {
// 	               panic("mock out the GetBucketTagging method")
//             },
//             GetBucketTaggingRequestFunc: func(in1 *s3.GetBucketTaggingInput) (*request.Request, *s3.GetBucketTaggingOutput) {
// 	               panic("mock out the GetBucketTaggingRequest method")
//             },
//             GetBucketTaggingWithContextFunc: func(in1 context.Context, in2 *s3.GetBucketTaggingInput, in3 ...request.Option) (*s3.GetBucketTaggingOutput, error) {
// 	               panic("mock out the GetBucketTaggingWithContext method")
//             },
//             GetBucketVersioningFunc: func(in1 *s3.GetBucketVersioningInput) (*s3.GetBucketVersioningOutput, error) {
// 	               panic("mock out the GetBucketVersioning method")
//             },
//             GetBucketVersioningRequestFunc: func(in1 *s3.GetBucketVersioningInput) (*request.Request, *s3.GetBucketVersioningOutput) {
// 	               panic("mock out the GetBucketVersioningRequest method")
//             },
//             GetBucketVersioningWithContextFunc: func(in1 context.Context, in2 *s3.GetBucketVersioningInput, in3 ...request.Option) (*s3.GetBucketVersioningOutput, error) {
// 	               panic("mock out the GetBucketVersioningWithContext method")
//             },
//             GetBucketWebsiteFunc: func(in1 *s3.GetBucketWebsiteInput) (*s3.GetBucketWebsiteOutput, error) {
// 	               panic("mock out the GetBucketWebsite method")
//             },
//             GetBucketWebsiteRequestFunc: func(in1 *s3.GetBucketWebsiteInput) (*request.Request, *s3.GetBucketWebsiteOutput) {
// 	               panic("mock out the GetBucketWebsiteRequest method")
//             },
//             GetBucketWebsiteWithContextFunc: func(in1 context.Context, in2 *s3.GetBucketWebsiteInput, in3 ...request.Option) (*s3.GetBucketWebsiteOutput, error) {
// 	               panic("mock out the GetBucketWebsiteWithContext method")
//             },
//             GetObjectFunc: func(in1 *s3.GetObjectInput) (*s3.GetObjectOutput, error) {
// 	               panic("mock out the GetObject method")
//             },
//             GetObjectAclFunc: func(in1 *s3.GetObjectAclInput) (*s3.GetObjectAclOutput, error) {
// 	               panic("mock out the GetObjectAcl method")
//             },
//             GetObjectAclRequestFunc: func(in1 *s3.GetObjectAclInput) (*request.Request, *s3.GetObjectAclOutput) {
// 	               panic("mock out the GetObjectAclRequest method")
//             },
//             GetObjectAclWithContextFunc: func(in1 context.Context, in2 *s3.GetObjectAclInput, in3 ...request.Option) (*s3.GetObjectAclOutput, error) {
// 	               panic("mock out the GetObjectAclWithContext method")
//             },
//             GetObjectLegalHoldFunc: func(in1 *s3.GetObjectLegalHoldInput) (*s3.GetObjectLegalHoldOutput, error) {
// 	               panic("mock out the GetObjectLegalHold method")
//             },
//             GetObjectLegalHoldRequestFunc: func(in1 *s3.GetObjectLegalHoldInput) (*request.Request, *s3.GetObjectLegalHoldOutput) {
// 	               panic("mock out the GetObjectLegalHoldRequest method")
//             },
//             GetObjectLegalHoldWithContextFunc: func(in1 context.Context, in2 *s3.GetObjectLegalHoldInput, in3 ...request.Option) (*s3.GetObjectLegalHoldOutput, error) {
// 	               panic("mock out the GetObjectLegalHoldWithContext method")
//             },
//             GetObjectLockConfigurationFunc: func(in1 *s3.GetObjectLockConfigurationInput) (*s3.GetObjectLockConfigurationOutput, error) {
// 	               panic("mock out the GetObjectLockConfiguration method")
//             },
//             GetObjectLockConfigurationRequestFunc: func(in1 *s3.GetObjectLockConfigurationInput) (*request.Request, *s3.GetObjectLockConfigurationOutput) {
// 	               panic("mock out the GetObjectLockConfigurationRequest method")
//             },
//             GetObjectLockConfigurationWithContextFunc: func(in1 context.Context, in2 *s3.GetObjectLockConfigurationInput, in3 ...request.Option) (*s3.GetObjectLockConfigurationOutput, error) {
// 	               panic("mock out the GetObjectLockConfigurationWithContext method")
//             },
//             GetObjectRequestFunc: func(in1 *s3.GetObjectInput) (*request.Request, *s3.GetObjectOutput) {
// 	               panic("mock out the GetObjectRequest method")
//             },
//             GetObjectRetentionFunc: func(in1 *s3.GetObjectRetentionInput) (*s3.GetObjectRetentionOutput, error) {
// 	               panic("mock out the GetObjectRetention method")
//             },
//             GetObjectRetentionRequestFunc: func(in1 *s3.GetObjectRetentionInput) (*request.Request, *s3.GetObjectRetentionOutput) {
// 	               panic("mock out the GetObjectRetentionRequest method")
//             },
//             GetObjectRetentionWithContextFunc: func(in1 context.Context, in2 *s3.GetObjectRetentionInput, in3 ...request.Option) (*s3.GetObjectRetentionOutput, error) {
// 	               panic("mock out the GetObjectRetentionWithContext method")
//             },
//             GetObjectTaggingFunc: func(in1 *s3.GetObjectTaggingInput) (*s3.GetObjectTaggingOutput, error) {
// 	               panic("mock out the GetObjectTagging method")
//             },
//             GetObjectTaggingRequestFunc: func(in1 *s3.GetObjectTaggingInput) (*request.Request, *s3.GetObjectTaggingOutput) {
// 	               panic("mock out the GetObjectTaggingRequest method")
//             },
//             GetObjectTaggingWithContextFunc: func(in1 context.Context, in2 *s3.GetObjectTaggingInput, in3 ...request.Option) (*s3.GetObjectTaggingOutput, error) {
// 	               panic("mock out the GetObjectTaggingWithContext method")
//             },
//             GetObjectTorrentFunc: func(in1 *s3.GetObjectTorrentInput) (*s3.GetObjectTorrentOutput, error) {
// 	               panic("mock out the GetObjectTorrent method")
//             },
//             GetObjectTorrentRequestFunc: func(in1 *s3.GetObjectTorrentInput) (*request.Request, *s3.GetObjectTorrentOutput) {
// 	               panic("mock out the GetObjectTorrentRequest method")
//             },
//             GetObjectTorrentWithContextFunc: func(in1 context.Context, in2 *s3.GetObjectTorrentInput, in3 ...request.Option) (*s3.GetObjectTorrentOutput, error) {
// 	               panic("mock out the GetObjectTorrentWithContext method")
//             },
//             GetObjectWithContextFunc: func(in1 context.Context, in2 *s3.GetObjectInput, in3 ...request.Option) (*s3.GetObjectOutput, error) {
// 	               panic("mock out the GetObjectWithContext method")
//             },
//             GetPublicAccessBlockFunc: func(in1 *s3.GetPublicAccessBlockInput) (*s3.GetPublicAccessBlockOutput, error) {
// 	               panic("mock out the GetPublicAccessBlock method")
//             },
//             GetPublicAccessBlockRequestFunc: func(in1 *s3.GetPublicAccessBlockInput) (*request.Request, *s3.GetPublicAccessBlockOutput) {
// 	               panic("mock out the GetPublicAccessBlockRequest method")
//             },
//             GetPublicAccessBlockWithContextFunc: func(in1 context.Context, in2 *s3.GetPublicAccessBlockInput, in3 ...request.Option) (*s3.GetPublicAccessBlockOutput, error) {
// 	               panic("mock out the GetPublicAccessBlockWithContext method")
//             },
//             HeadBucketFunc: func(in1 *s3.HeadBucketInput) (*s3.HeadBucketOutput, error) {
// 	               panic("mock out the HeadBucket method")
//             },
//             HeadBucketRequestFunc: func(in1 *s3.HeadBucketInput) (*request.Request, *s3.HeadBucketOutput) {
// 	               panic("mock out the HeadBucketRequest method")
//             },
//             HeadBucketWithContextFunc: func(in1 context.Context, in2 *s3.HeadBucketInput, in3 ...request.Option) (*s3.HeadBucketOutput, error) {
// 	               panic("mock out the HeadBucketWithContext method")
//             },
//             HeadObjectFunc: func(in1 *s3.HeadObjectInput) (*s3.HeadObjectOutput, error) {
// 	               panic("mock out the HeadObject method")
//             },
//             HeadObjectRequestFunc: func(in1 *s3.HeadObjectInput) (*request.Request, *s3.HeadObjectOutput) {
// 	               panic("mock out the HeadObjectRequest method")
//             },
//             HeadObjectWithContextFunc: func(in1 context.Context, in2 *s3.HeadObjectInput, in3 ...request.Option) (*s3.HeadObjectOutput, error) {
// 	               panic("mock out the HeadObjectWithContext method")
//             },
//             ListBucketAnalyticsConfigurationsFunc: func(in1 *s3.ListBucketAnalyticsConfigurationsInput) (*s3.ListBucketAnalyticsConfigurationsOutput, error) {
// 	               panic("mock out the ListBucketAnalyticsConfigurations method")
//             },
//             ListBucketAnalyticsConfigurationsRequestFunc: func(in1 *s3.ListBucketAnalyticsConfigurationsInput) (*request.Request, *s3.ListBucketAnalyticsConfigurationsOutput) {
// 	               panic("mock out the ListBucketAnalyticsConfigurationsRequest method")
//             },
//             ListBucketAnalyticsConfigurationsWithContextFunc: func(in1 context.Context, in2 *s3.ListBucketAnalyticsConfigurationsInput, in3 ...request.Option) (*s3.ListBucketAnalyticsConfigurationsOutput, error) {
// 	               panic("mock out the ListBucketAnalyticsConfigurationsWithContext method")
//             },
//             ListBucketInventoryConfigurationsFunc: func(in1 *s3.ListBucketInventoryConfigurationsInput) (*s3.ListBucketInventoryConfigurationsOutput, error) {
// 	               panic("mock out the ListBucketInventoryConfigurations method")
//             },
//             ListBucketInventoryConfigurationsRequestFunc: func(in1 *s3.ListBucketInventoryConfigurationsInput) (*request.Request, *s3.ListBucketInventoryConfigurationsOutput) {
// 	               panic("mock out the ListBucketInventoryConfigurationsRequest method")
//             },
//             ListBucketInventoryConfigurationsWithContextFunc: func(in1 context.Context, in2 *s3.ListBucketInventoryConfigurationsInput, in3 ...request.Option) (*s3.ListBucketInventoryConfigurationsOutput, error) {
// 	               panic("mock out the ListBucketInventoryConfigurationsWithContext method")
//             },
//             ListBucketMetricsConfigurationsFunc: func(in1 *s3.ListBucketMetricsConfigurationsInput) (*s3.ListBucketMetricsConfigurationsOutput, error) {
// 	               panic("mock out the ListBucketMetricsConfigurations method")
//             },
//             ListBucketMetricsConfigurationsRequestFunc: func(in1 *s3.ListBucketMetricsConfigurationsInput) (*request.Request, *s3.ListBucketMetricsConfigurationsOutput) {
// 	               panic("mock out the ListBucketMetricsConfigurationsRequest method")
//             },
//             ListBucketMetricsConfigurationsWithContextFunc: func(in1 context.Context, in2 *s3.ListBucketMetricsConfigurationsInput, in3 ...request.Option) (*s3.ListBucketMetricsConfigurationsOutput, error) {
// 	               panic("mock out the ListBucketMetricsConfigurationsWithContext method")
//             },
//             ListBucketsFunc: func(in1 *s3.ListBucketsInput) (*s3.ListBucketsOutput, error) {
// 	               panic("mock out the ListBuckets method")
//             },
//             ListBucketsRequestFunc: func(in1 *s3.ListBucketsInput) (*request.Request, *s3.ListBucketsOutput) {
// 	               panic("mock out the ListBucketsRequest method")
//             },
//             ListBucketsWithContextFunc: func(in1 context.Context, in2 *s3.ListBucketsInput, in3 ...request.Option) (*s3.ListBucketsOutput, error) {
// 	               panic("mock out the ListBucketsWithContext method")
//             },
//             ListMultipartUploadsFunc: func(in1 *s3.ListMultipartUploadsInput) (*s3.ListMultipartUploadsOutput, error) {
// 	               panic("mock out the ListMultipartUploads method")
//             },
//             ListMultipartUploadsPagesFunc: func(in1 *s3.ListMultipartUploadsInput, in2 func(*s3.ListMultipartUploadsOutput, bool) bool) error {
// 	               panic("mock out the ListMultipartUploadsPages method")
//             },
//             ListMultipartUploadsPagesWithContextFunc: func(in1 context.Context, in2 *s3.ListMultipartUploadsInput, in3 func(*s3.ListMultipartUploadsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListMultipartUploadsPagesWithContext method")
//             },
//             ListMultipartUploadsRequestFunc: func(in1 *s3.ListMultipartUploadsInput) (*request.Request, *s3.ListMultipartUploadsOutput) {
// 	               panic("mock out the ListMultipartUploadsRequest method")
//             },
//             ListMultipartUploadsWithContextFunc: func(in1 context.Context, in2 *s3.ListMultipartUploadsInput, in3 ...request.Option) (*s3.ListMultipartUploadsOutput, error) {
// 	               panic("mock out the ListMultipartUploadsWithContext method")
//             },
//             ListObjectVersionsFunc: func(in1 *s3.ListObjectVersionsInput) (*s3.ListObjectVersionsOutput, error) {
// 	               panic("mock out the ListObjectVersions method")
//             },
//             ListObjectVersionsPagesFunc: func(in1 *s3.ListObjectVersionsInput, in2 func(*s3.ListObjectVersionsOutput, bool) bool) error {
// 	               panic("mock out the ListObjectVersionsPages method")
//             },
//             ListObjectVersionsPagesWithContextFunc: func(in1 context.Context, in2 *s3.ListObjectVersionsInput, in3 func(*s3.ListObjectVersionsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListObjectVersionsPagesWithContext method")
//             },
//             ListObjectVersionsRequestFunc: func(in1 *s3.ListObjectVersionsInput) (*request.Request, *s3.ListObjectVersionsOutput) {
// 	               panic("mock out the ListObjectVersionsRequest method")
//             },
//             ListObjectVersionsWithContextFunc: func(in1 context.Context, in2 *s3.ListObjectVersionsInput, in3 ...request.Option) (*s3.ListObjectVersionsOutput, error) {
// 	               panic("mock out the ListObjectVersionsWithContext method")
//             },
//             ListObjectsFunc: func(in1 *s3.ListObjectsInput) (*s3.ListObjectsOutput, error) {
// 	               panic("mock out the ListObjects method")
//             },
//             ListObjectsPagesFunc: func(in1 *s3.ListObjectsInput, in2 func(*s3.ListObjectsOutput, bool) bool) error {
// 	               panic("mock out the ListObjectsPages method")
//             },
//             ListObjectsPagesWithContextFunc: func(in1 context.Context, in2 *s3.ListObjectsInput, in3 func(*s3.ListObjectsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListObjectsPagesWithContext method")
//             },
//             ListObjectsRequestFunc: func(in1 *s3.ListObjectsInput) (*request.Request, *s3.ListObjectsOutput) {
// 	               panic("mock out the ListObjectsRequest method")
//             },
//             ListObjectsV2Func: func(in1 *s3.ListObjectsV2Input) (*s3.ListObjectsV2Output, error) {
// 	               panic("mock out the ListObjectsV2 method")
//             },
//             ListObjectsV2PagesFunc: func(in1 *s3.ListObjectsV2Input, in2 func(*s3.ListObjectsV2Output, bool) bool) error {
// 	               panic("mock out the ListObjectsV2Pages method")
//             },
//             ListObjectsV2PagesWithContextFunc: func(in1 context.Context, in2 *s3.ListObjectsV2Input, in3 func(*s3.ListObjectsV2Output, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListObjectsV2PagesWithContext method")
//             },
//             ListObjectsV2RequestFunc: func(in1 *s3.ListObjectsV2Input) (*request.Request, *s3.ListObjectsV2Output) {
// 	               panic("mock out the ListObjectsV2Request method")
//             },
//             ListObjectsV2WithContextFunc: func(in1 context.Context, in2 *s3.ListObjectsV2Input, in3 ...request.Option) (*s3.ListObjectsV2Output, error) {
// 	               panic("mock out the ListObjectsV2WithContext method")
//             },
//             ListObjectsWithContextFunc: func(in1 context.Context, in2 *s3.ListObjectsInput, in3 ...request.Option) (*s3.ListObjectsOutput, error) {
// 	               panic("mock out the ListObjectsWithContext method")
//             },
//             ListPartsFunc: func(in1 *s3.ListPartsInput) (*s3.ListPartsOutput, error) {
// 	               panic("mock out the ListParts method")
//             },
//             ListPartsPagesFunc: func(in1 *s3.ListPartsInput, in2 func(*s3.ListPartsOutput, bool) bool) error {
// 	               panic("mock out the ListPartsPages method")
//             },
//             ListPartsPagesWithContextFunc: func(in1 context.Context, in2 *s3.ListPartsInput, in3 func(*s3.ListPartsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListPartsPagesWithContext method")
//             },
//             ListPartsRequestFunc: func(in1 *s3.ListPartsInput) (*request.Request, *s3.ListPartsOutput) {
// 	               panic("mock out the ListPartsRequest method")
//             },
//             ListPartsWithContextFunc: func(in1 context.Context, in2 *s3.ListPartsInput, in3 ...request.Option) (*s3.ListPartsOutput, error) {
// 	               panic("mock out the ListPartsWithContext method")
//             },
//             PutBucketAccelerateConfigurationFunc: func(in1 *s3.PutBucketAccelerateConfigurationInput) (*s3.PutBucketAccelerateConfigurationOutput, error) {
// 	               panic("mock out the PutBucketAccelerateConfiguration method")
//             },
//             PutBucketAccelerateConfigurationRequestFunc: func(in1 *s3.PutBucketAccelerateConfigurationInput) (*request.Request, *s3.PutBucketAccelerateConfigurationOutput) {
// 	               panic("mock out the PutBucketAccelerateConfigurationRequest method")
//             },
//             PutBucketAccelerateConfigurationWithContextFunc: func(in1 context.Context, in2 *s3.PutBucketAccelerateConfigurationInput, in3 ...request.Option) (*s3.PutBucketAccelerateConfigurationOutput, error) {
// 	               panic("mock out the PutBucketAccelerateConfigurationWithContext method")
//             },
//             PutBucketAclFunc: func(in1 *s3.PutBucketAclInput) (*s3.PutBucketAclOutput, error) {
// 	               panic("mock out the PutBucketAcl method")
//             },
//             PutBucketAclRequestFunc: func(in1 *s3.PutBucketAclInput) (*request.Request, *s3.PutBucketAclOutput) {
// 	               panic("mock out the PutBucketAclRequest method")
//             },
//             PutBucketAclWithContextFunc: func(in1 context.Context, in2 *s3.PutBucketAclInput, in3 ...request.Option) (*s3.PutBucketAclOutput, error) {
// 	               panic("mock out the PutBucketAclWithContext method")
//             },
//             PutBucketAnalyticsConfigurationFunc: func(in1 *s3.PutBucketAnalyticsConfigurationInput) (*s3.PutBucketAnalyticsConfigurationOutput, error) {
// 	               panic("mock out the PutBucketAnalyticsConfiguration method")
//             },
//             PutBucketAnalyticsConfigurationRequestFunc: func(in1 *s3.PutBucketAnalyticsConfigurationInput) (*request.Request, *s3.PutBucketAnalyticsConfigurationOutput) {
// 	               panic("mock out the PutBucketAnalyticsConfigurationRequest method")
//             },
//             PutBucketAnalyticsConfigurationWithContextFunc: func(in1 context.Context, in2 *s3.PutBucketAnalyticsConfigurationInput, in3 ...request.Option) (*s3.PutBucketAnalyticsConfigurationOutput, error) {
// 	               panic("mock out the PutBucketAnalyticsConfigurationWithContext method")
//             },
//             PutBucketCorsFunc: func(in1 *s3.PutBucketCorsInput) (*s3.PutBucketCorsOutput, error) {
// 	               panic("mock out the PutBucketCors method")
//             },
//             PutBucketCorsRequestFunc: func(in1 *s3.PutBucketCorsInput) (*request.Request, *s3.PutBucketCorsOutput) {
// 	               panic("mock out the PutBucketCorsRequest method")
//             },
//             PutBucketCorsWithContextFunc: func(in1 context.Context, in2 *s3.PutBucketCorsInput, in3 ...request.Option) (*s3.PutBucketCorsOutput, error) {
// 	               panic("mock out the PutBucketCorsWithContext method")
//             },
//             PutBucketEncryptionFunc: func(in1 *s3.PutBucketEncryptionInput) (*s3.PutBucketEncryptionOutput, error) {
// 	               panic("mock out the PutBucketEncryption method")
//             },
//             PutBucketEncryptionRequestFunc: func(in1 *s3.PutBucketEncryptionInput) (*request.Request, *s3.PutBucketEncryptionOutput) {
// 	               panic("mock out the PutBucketEncryptionRequest method")
//             },
//             PutBucketEncryptionWithContextFunc: func(in1 context.Context, in2 *s3.PutBucketEncryptionInput, in3 ...request.Option) (*s3.PutBucketEncryptionOutput, error) {
// 	               panic("mock out the PutBucketEncryptionWithContext method")
//             },
//             PutBucketInventoryConfigurationFunc: func(in1 *s3.PutBucketInventoryConfigurationInput) (*s3.PutBucketInventoryConfigurationOutput, error) {
// 	               panic("mock out the PutBucketInventoryConfiguration method")
//             },
//             PutBucketInventoryConfigurationRequestFunc: func(in1 *s3.PutBucketInventoryConfigurationInput) (*request.Request, *s3.PutBucketInventoryConfigurationOutput) {
// 	               panic("mock out the PutBucketInventoryConfigurationRequest method")
//             },
//             PutBucketInventoryConfigurationWithContextFunc: func(in1 context.Context, in2 *s3.PutBucketInventoryConfigurationInput, in3 ...request.Option) (*s3.PutBucketInventoryConfigurationOutput, error) {
// 	               panic("mock out the PutBucketInventoryConfigurationWithContext method")
//             },
//             PutBucketLifecycleFunc: func(in1 *s3.PutBucketLifecycleInput) (*s3.PutBucketLifecycleOutput, error) {
// 	               panic("mock out the PutBucketLifecycle method")
//             },
//             PutBucketLifecycleConfigurationFunc: func(in1 *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error) {
// 	               panic("mock out the PutBucketLifecycleConfiguration method")
//             },
//             PutBucketLifecycleConfigurationRequestFunc: func(in1 *s3.PutBucketLifecycleConfigurationInput) (*request.Request, *s3.PutBucketLifecycleConfigurationOutput) {
// 	               panic("mock out the PutBucketLifecycleConfigurationRequest method")
//             },
//             PutBucketLifecycleConfigurationWithContextFunc: func(in1 context.Context, in2 *s3.PutBucketLifecycleConfigurationInput, in3 ...request.Option) (*s3.PutBucketLifecycleConfigurationOutput, error) {
// 	               panic("mock out the PutBucketLifecycleConfigurationWithContext method")
//             },
//             PutBucketLifecycleRequestFunc: func(in1 *s3.PutBucketLifecycleInput) (*request.Request, *s3.PutBucketLifecycleOutput) {
// 	               panic("mock out the PutBucketLifecycleRequest method")
//             },
//             PutBucketLifecycleWithContextFunc: func(in1 context.Context, in2 *s3.PutBucketLifecycleInput, in3 ...request.Option) (*s3.PutBucketLifecycleOutput, error) {
// 	               panic("mock out the PutBucketLifecycleWithContext method")
//             },
//             PutBucketLoggingFunc: func(in1 *s3.PutBucketLoggingInput) (*s3.PutBucketLoggingOutput, error) {
// 	               panic("mock out the PutBucketLogging method")
//             },
//             PutBucketLoggingRequestFunc: func(in1 *s3.PutBucketLoggingInput) (*request.Request, *s3.PutBucketLoggingOutput) {
// 	               panic("mock out the PutBucketLoggingRequest method")
//             },
//             PutBucketLoggingWithContextFunc: func(in1 context.Context, in2 *s3.PutBucketLoggingInput, in3 ...request.Option) (*s3.PutBucketLoggingOutput, error) {
// 	               panic("mock out the PutBucketLoggingWithContext method")
//             },
//             PutBucketMetricsConfigurationFunc: func(in1 *s3.PutBucketMetricsConfigurationInput) (*s3.PutBucketMetricsConfigurationOutput, error) {
// 	               panic("mock out the PutBucketMetricsConfiguration method")
//             },
//             PutBucketMetricsConfigurationRequestFunc: func(in1 *s3.PutBucketMetricsConfigurationInput) (*request.Request, *s3.PutBucketMetricsConfigurationOutput) {
// 	               panic("mock out the PutBucketMetricsConfigurationRequest method")
//             },
//             PutBucketMetricsConfigurationWithContextFunc: func(in1 context.Context, in2 *s3.PutBucketMetricsConfigurationInput, in3 ...request.Option) (*s3.PutBucketMetricsConfigurationOutput, error) {
// 	               panic("mock out the PutBucketMetricsConfigurationWithContext method")
//             },
//             PutBucketNotificationFunc: func(in1 *s3.PutBucketNotificationInput) (*s3.PutBucketNotificationOutput, error) {
// 	               panic("mock out the PutBucketNotification method")
//             },
//             PutBucketNotificationConfigurationFunc: func(in1 *s3.PutBucketNotificationConfigurationInput) (*s3.PutBucketNotificationConfigurationOutput, error) {
// 	               panic("mock out the PutBucketNotificationConfiguration method")
//             },
//             PutBucketNotificationConfigurationRequestFunc: func(in1 *s3.PutBucketNotificationConfigurationInput) (*request.Request, *s3.PutBucketNotificationConfigurationOutput) {
// 	               panic("mock out the PutBucketNotificationConfigurationRequest method")
//             },
//             PutBucketNotificationConfigurationWithContextFunc: func(in1 context.Context, in2 *s3.PutBucketNotificationConfigurationInput, in3 ...request.Option) (*s3.PutBucketNotificationConfigurationOutput, error) {
// 	               panic("mock out the PutBucketNotificationConfigurationWithContext method")
//             },
//             PutBucketNotificationRequestFunc: func(in1 *s3.PutBucketNotificationInput) (*request.Request, *s3.PutBucketNotificationOutput) {
// 	               panic("mock out the PutBucketNotificationRequest method")
//             },
//             PutBucketNotificationWithContextFunc: func(in1 context.Context, in2 *s3.PutBucketNotificationInput, in3 ...request.Option) (*s3.PutBucketNotificationOutput, error) {
// 	               panic("mock out the PutBucketNotificationWithContext method")
//             },
//             PutBucketPolicyFunc: func(in1 *s3.PutBucketPolicyInput) (*s3.PutBucketPolicyOutput, error) {
// 	               panic("mock out the PutBucketPolicy method")
//             },
//             PutBucketPolicyRequestFunc: func(in1 *s3.PutBucketPolicyInput) (*request.Request, *s3.PutBucketPolicyOutput) {
// 	               panic("mock out the PutBucketPolicyRequest method")
//             },
//             PutBucketPolicyWithContextFunc: func(in1 context.Context, in2 *s3.PutBucketPolicyInput, in3 ...request.Option) (*s3.PutBucketPolicyOutput, error) {
// 	               panic("mock out the PutBucketPolicyWithContext method")
//             },
//             PutBucketReplicationFunc: func(in1 *s3.PutBucketReplicationInput) (*s3.PutBucketReplicationOutput, error) {
// 	               panic("mock out the PutBucketReplication method")
//             },
//             PutBucketReplicationRequestFunc: func(in1 *s3.PutBucketReplicationInput) (*request.Request, *s3.PutBucketReplicationOutput) {
// 	               panic("mock out the PutBucketReplicationRequest method")
//             },
//             PutBucketReplicationWithContextFunc: func(in1 context.Context, in2 *s3.PutBucketReplicationInput, in3 ...request.Option) (*s3.PutBucketReplicationOutput, error) {
// 	               panic("mock out the PutBucketReplicationWithContext method")
//             },
//             PutBucketRequestPaymentFunc: func(in1 *s3.PutBucketRequestPaymentInput) (*s3.PutBucketRequestPaymentOutput, error) {
// 	               panic("mock out the PutBucketRequestPayment method")
//             },
//             PutBucketRequestPaymentRequestFunc: func(in1 *s3.PutBucketRequestPaymentInput) (*request.Request, *s3.PutBucketRequestPaymentOutput) {
// 	               panic("mock out the PutBucketRequestPaymentRequest method")
//             },
//             PutBucketRequestPaymentWithContextFunc: func(in1 context.Context, in2 *s3.PutBucketRequestPaymentInput, in3 ...request.Option) (*s3.PutBucketRequestPaymentOutput, error) {
// 	               panic("mock out the PutBucketRequestPaymentWithContext method")
//             },
//             PutBucketTaggingFunc: func(in1 *s3.PutBucketTaggingInput) (*s3.PutBucketTaggingOutput, error) {
// 	               panic("mock out the PutBucketTagging method")
//             },
//             PutBucketTaggingRequestFunc: func(in1 *s3.PutBucketTaggingInput) (*request.Request, *s3.PutBucketTaggingOutput) {
// 	               panic("mock out the PutBucketTaggingRequest method")
//             },
//             PutBucketTaggingWithContextFunc: func(in1 context.Context, in2 *s3.PutBucketTaggingInput, in3 ...request.Option) (*s3.PutBucketTaggingOutput, error) {
// 	               panic("mock out the PutBucketTaggingWithContext method")
//             },
//             PutBucketVersioningFunc: func(in1 *s3.PutBucketVersioningInput) (*s3.PutBucketVersioningOutput, error) {
// 	               panic("mock out the PutBucketVersioning method")
//             },
//             PutBucketVersioningRequestFunc: func(in1 *s3.PutBucketVersioningInput) (*request.Request, *s3.PutBucketVersioningOutput) {
// 	               panic("mock out the PutBucketVersioningRequest method")
//             },
//             PutBucketVersioningWithContextFunc: func(in1 context.Context, in2 *s3.PutBucketVersioningInput, in3 ...request.Option) (*s3.PutBucketVersioningOutput, error) {
// 	               panic("mock out the PutBucketVersioningWithContext method")
//             },
//             PutBucketWebsiteFunc: func(in1 *s3.PutBucketWebsiteInput) (*s3.PutBucketWebsiteOutput, error) {
// 	               panic("mock out the PutBucketWebsite method")
//             },
//             PutBucketWebsiteRequestFunc: func(in1 *s3.PutBucketWebsiteInput) (*request.Request, *s3.PutBucketWebsiteOutput) {
// 	               panic("mock out the PutBucketWebsiteRequest method")
//             },
//             PutBucketWebsiteWithContextFunc: func(in1 context.Context, in2 *s3.PutBucketWebsiteInput, in3 ...request.Option) (*s3.PutBucketWebsiteOutput, error) {
// 	               panic("mock out the PutBucketWebsiteWithContext method")
//             },
//             PutObjectFunc: func(in1 *s3.PutObjectInput) (*s3.PutObjectOutput, error) {
// 	               panic("mock out the PutObject method")
//             },
//             PutObjectAclFunc: func(in1 *s3.PutObjectAclInput) (*s3.PutObjectAclOutput, error) {
// 	               panic("mock out the PutObjectAcl method")
//             },
//             PutObjectAclRequestFunc: func(in1 *s3.PutObjectAclInput) (*request.Request, *s3.PutObjectAclOutput) {
// 	               panic("mock out the PutObjectAclRequest method")
//             },
//             PutObjectAclWithContextFunc: func(in1 context.Context, in2 *s3.PutObjectAclInput, in3 ...request.Option) (*s3.PutObjectAclOutput, error) {
// 	               panic("mock out the PutObjectAclWithContext method")
//             },
//             PutObjectLegalHoldFunc: func(in1 *s3.PutObjectLegalHoldInput) (*s3.PutObjectLegalHoldOutput, error) {
// 	               panic("mock out the PutObjectLegalHold method")
//             },
//             PutObjectLegalHoldRequestFunc: func(in1 *s3.PutObjectLegalHoldInput) (*request.Request, *s3.PutObjectLegalHoldOutput) {
// 	               panic("mock out the PutObjectLegalHoldRequest method")
//             },
//             PutObjectLegalHoldWithContextFunc: func(in1 context.Context, in2 *s3.PutObjectLegalHoldInput, in3 ...request.Option) (*s3.PutObjectLegalHoldOutput, error) {
// 	               panic("mock out the PutObjectLegalHoldWithContext method")
//             },
//             PutObjectLockConfigurationFunc: func(in1 *s3.PutObjectLockConfigurationInput) (*s3.PutObjectLockConfigurationOutput, error) {
// 	               panic("mock out the PutObjectLockConfiguration method")
//             },
//             PutObjectLockConfigurationRequestFunc: func(in1 *s3.PutObjectLockConfigurationInput) (*request.Request, *s3.PutObjectLockConfigurationOutput) {
// 	               panic("mock out the PutObjectLockConfigurationRequest method")
//             },
//             PutObjectLockConfigurationWithContextFunc: func(in1 context.Context, in2 *s3.PutObjectLockConfigurationInput, in3 ...request.Option) (*s3.PutObjectLockConfigurationOutput, error) {
// 	               panic("mock out the PutObjectLockConfigurationWithContext method")
//             },
//             PutObjectRequestFunc: func(in1 *s3.PutObjectInput) (*request.Request, *s3.PutObjectOutput) {
// 	               panic("mock out the PutObjectRequest method")
//             },
//             PutObjectRetentionFunc: func(in1 *s3.PutObjectRetentionInput) (*s3.PutObjectRetentionOutput, error) {
// 	               panic("mock out the PutObjectRetention method")
//             },
//             PutObjectRetentionRequestFunc: func(in1 *s3.PutObjectRetentionInput) (*request.Request, *s3.PutObjectRetentionOutput) {
// 	               panic("mock out the PutObjectRetentionRequest method")
//             },
//             PutObjectRetentionWithContextFunc: func(in1 context.Context, in2 *s3.PutObjectRetentionInput, in3 ...request.Option) (*s3.PutObjectRetentionOutput, error) {
// 	               panic("mock out the PutObjectRetentionWithContext method")
//             },
//             PutObjectTaggingFunc: func(in1 *s3.PutObjectTaggingInput) (*s3.PutObjectTaggingOutput, error) {
// 	               panic("mock out the PutObjectTagging method")
//             },
//             PutObjectTaggingRequestFunc: func(in1 *s3.PutObjectTaggingInput) (*request.Request, *s3.PutObjectTaggingOutput) {
// 	               panic("mock out the PutObjectTaggingRequest method")
//             },
//             PutObjectTaggingWithContextFunc: func(in1 context.Context, in2 *s3.PutObjectTaggingInput, in3 ...request.Option) (*s3.PutObjectTaggingOutput, error) {
// 	               panic("mock out the PutObjectTaggingWithContext method")
//             },
//             PutObjectWithContextFunc: func(in1 context.Context, in2 *s3.PutObjectInput, in3 ...request.Option) (*s3.PutObjectOutput, error) {
// 	               panic("mock out the PutObjectWithContext method")
//             },
//             PutPublicAccessBlockFunc: func(in1 *s3.PutPublicAccessBlockInput) (*s3.PutPublicAccessBlockOutput, error) {
// 	               panic("mock out the PutPublicAccessBlock method")
//             },
//             PutPublicAccessBlockRequestFunc: func(in1 *s3.PutPublicAccessBlockInput) (*request.Request, *s3.PutPublicAccessBlockOutput) {
// 	               panic("mock out the PutPublicAccessBlockRequest method")
//             },
//             PutPublicAccessBlockWithContextFunc: func(in1 context.Context, in2 *s3.PutPublicAccessBlockInput, in3 ...request.Option) (*s3.PutPublicAccessBlockOutput, error) {
// 	               panic("mock out the PutPublicAccessBlockWithContext method")
//             },
//             RestoreObjectFunc: func(in1 *s3.RestoreObjectInput) (*s3.RestoreObjectOutput, error) {
// 	               panic("mock out the RestoreObject method")
//             },
//             RestoreObjectRequestFunc: func(in1 *s3.RestoreObjectInput) (*request.Request, *s3.RestoreObjectOutput) {
// 	               panic("mock out the RestoreObjectRequest method")
//             },
//             RestoreObjectWithContextFunc: func(in1 context.Context, in2 *s3.RestoreObjectInput, in3 ...request.Option) (*s3.RestoreObjectOutput, error) {
// 	               panic("mock out the RestoreObjectWithContext method")
//             },
//             SelectObjectContentFunc: func(in1 *s3.SelectObjectContentInput) (*s3.SelectObjectContentOutput, error) {
// 	               panic("mock out the SelectObjectContent method")
//             },
//             SelectObjectContentRequestFunc: func(in1 *s3.SelectObjectContentInput) (*request.Request, *s3.SelectObjectContentOutput) {
// 	               panic("mock out the SelectObjectContentRequest method")
//             },
//             SelectObjectContentWithContextFunc: func(in1 context.Context, in2 *s3.SelectObjectContentInput, in3 ...request.Option) (*s3.SelectObjectContentOutput, error) {
// 	               panic("mock out the SelectObjectContentWithContext method")
//             },
//             UploadPartFunc: func(in1 *s3.UploadPartInput) (*s3.UploadPartOutput, error) {
// 	               panic("mock out the UploadPart method")
//             },
//             UploadPartCopyFunc: func(in1 *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error) {
// 	               panic("mock out the UploadPartCopy method")
//             },
//             UploadPartCopyRequestFunc: func(in1 *s3.UploadPartCopyInput) (*request.Request, *s3.UploadPartCopyOutput) {
// 	               panic("mock out the UploadPartCopyRequest method")
//             },
//             UploadPartCopyWithContextFunc: func(in1 context.Context, in2 *s3.UploadPartCopyInput, in3 ...request.Option) (*s3.UploadPartCopyOutput, error) {
// 	               panic("mock out the UploadPartCopyWithContext method")
//             },
//             UploadPartRequestFunc: func(in1 *s3.UploadPartInput) (*request.Request, *s3.UploadPartOutput) {
// 	               panic("mock out the UploadPartRequest method")
//             },
//             UploadPartWithContextFunc: func(in1 context.Context, in2 *s3.UploadPartInput, in3 ...request.Option) (*s3.UploadPartOutput, error) {
// 	               panic("mock out the UploadPartWithContext method")
//             },
//             WaitUntilBucketExistsFunc: func(in1 *s3.HeadBucketInput) error {
// 	               panic("mock out the WaitUntilBucketExists method")
//             },
//             WaitUntilBucketExistsWithContextFunc: func(in1 context.Context, in2 *s3.HeadBucketInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilBucketExistsWithContext method")
//             },
//             WaitUntilBucketNotExistsFunc: func(in1 *s3.HeadBucketInput) error {
// 	               panic("mock out the WaitUntilBucketNotExists method")
//             },
//             WaitUntilBucketNotExistsWithContextFunc: func(in1 context.Context, in2 *s3.HeadBucketInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilBucketNotExistsWithContext method")
//             },
//             WaitUntilObjectExistsFunc: func(in1 *s3.HeadObjectInput) error {
// 	               panic("mock out the WaitUntilObjectExists method")
//             },
//             WaitUntilObjectExistsWithContextFunc: func(in1 context.Context, in2 *s3.HeadObjectInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilObjectExistsWithContext method")
//             },
//             WaitUntilObjectNotExistsFunc: func(in1 *s3.HeadObjectInput) error {
// 	               panic("mock out the WaitUntilObjectNotExists method")
//             },
//             WaitUntilObjectNotExistsWithContextFunc: func(in1 context.Context, in2 *s3.HeadObjectInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilObjectNotExistsWithContext method")
//             },
//         }
//
//         // use mockeds3Client in code that requires s3Client
//         // and then make assertions.
//
//     }
type s3ClientMock struct {
	// AbortMultipartUploadFunc mocks the AbortMultipartUpload method.
	AbortMultipartUploadFunc func(in1 *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error)

	// AbortMultipartUploadRequestFunc mocks the AbortMultipartUploadRequest method.
	AbortMultipartUploadRequestFunc func(in1 *s3.AbortMultipartUploadInput) (*request.Request, *s3.AbortMultipartUploadOutput)

	// AbortMultipartUploadWithContextFunc mocks the AbortMultipartUploadWithContext method.
	AbortMultipartUploadWithContextFunc func(in1 context.Context, in2 *s3.AbortMultipartUploadInput, in3 ...request.Option) (*s3.AbortMultipartUploadOutput, error)

	// CompleteMultipartUploadFunc mocks the CompleteMultipartUpload method.
	CompleteMultipartUploadFunc func(in1 *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error)

	// CompleteMultipartUploadRequestFunc mocks the CompleteMultipartUploadRequest method.
	CompleteMultipartUploadRequestFunc func(in1 *s3.CompleteMultipartUploadInput) (*request.Request, *s3.CompleteMultipartUploadOutput)

	// CompleteMultipartUploadWithContextFunc mocks the CompleteMultipartUploadWithContext method.
	CompleteMultipartUploadWithContextFunc func(in1 context.Context, in2 *s3.CompleteMultipartUploadInput, in3 ...request.Option) (*s3.CompleteMultipartUploadOutput, error)

	// CopyObjectFunc mocks the CopyObject method.
	CopyObjectFunc func(in1 *s3.CopyObjectInput) (*s3.CopyObjectOutput, error)

	// CopyObjectRequestFunc mocks the CopyObjectRequest method.
	CopyObjectRequestFunc func(in1 *s3.CopyObjectInput) (*request.Request, *s3.CopyObjectOutput)

	// CopyObjectWithContextFunc mocks the CopyObjectWithContext method.
	CopyObjectWithContextFunc func(in1 context.Context, in2 *s3.CopyObjectInput, in3 ...request.Option) (*s3.CopyObjectOutput, error)

	// CreateBucketFunc mocks the CreateBucket method.
	CreateBucketFunc func(in1 *s3.CreateBucketInput) (*s3.CreateBucketOutput, error)

	// CreateBucketRequestFunc mocks the CreateBucketRequest method.
	CreateBucketRequestFunc func(in1 *s3.CreateBucketInput) (*request.Request, *s3.CreateBucketOutput)

	// CreateBucketWithContextFunc mocks the CreateBucketWithContext method.
	CreateBucketWithContextFunc func(in1 context.Context, in2 *s3.CreateBucketInput, in3 ...request.Option) (*s3.CreateBucketOutput, error)

	// CreateMultipartUploadFunc mocks the CreateMultipartUpload method.
	CreateMultipartUploadFunc func(in1 *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error)

	// CreateMultipartUploadRequestFunc mocks the CreateMultipartUploadRequest method.
	CreateMultipartUploadRequestFunc func(in1 *s3.CreateMultipartUploadInput) (*request.Request, *s3.CreateMultipartUploadOutput)

	// CreateMultipartUploadWithContextFunc mocks the CreateMultipartUploadWithContext method.
	CreateMultipartUploadWithContextFunc func(in1 context.Context, in2 *s3.CreateMultipartUploadInput, in3 ...request.Option) (*s3.CreateMultipartUploadOutput, error)

	// DeleteBucketFunc mocks the DeleteBucket method.
	DeleteBucketFunc func(in1 *s3.DeleteBucketInput) (*s3.DeleteBucketOutput, error)

	// DeleteBucketAnalyticsConfigurationFunc mocks the DeleteBucketAnalyticsConfiguration method.
	DeleteBucketAnalyticsConfigurationFunc func(in1 *s3.DeleteBucketAnalyticsConfigurationInput) (*s3.DeleteBucketAnalyticsConfigurationOutput, error)

	// DeleteBucketAnalyticsConfigurationRequestFunc mocks the DeleteBucketAnalyticsConfigurationRequest method.
	DeleteBucketAnalyticsConfigurationRequestFunc func(in1 *s3.DeleteBucketAnalyticsConfigurationInput) (*request.Request, *s3.DeleteBucketAnalyticsConfigurationOutput)

	// DeleteBucketAnalyticsConfigurationWithContextFunc mocks the DeleteBucketAnalyticsConfigurationWithContext method.
	DeleteBucketAnalyticsConfigurationWithContextFunc func(in1 context.Context, in2 *s3.DeleteBucketAnalyticsConfigurationInput, in3 ...request.Option) (*s3.DeleteBucketAnalyticsConfigurationOutput, error)

	// DeleteBucketCorsFunc mocks the DeleteBucketCors method.
	DeleteBucketCorsFunc func(in1 *s3.DeleteBucketCorsInput) (*s3.DeleteBucketCorsOutput, error)

	// DeleteBucketCorsRequestFunc mocks the DeleteBucketCorsRequest method.
	DeleteBucketCorsRequestFunc func(in1 *s3.DeleteBucketCorsInput) (*request.Request, *s3.DeleteBucketCorsOutput)

	// DeleteBucketCorsWithContextFunc mocks the DeleteBucketCorsWithContext method.
	DeleteBucketCorsWithContextFunc func(in1 context.Context, in2 *s3.DeleteBucketCorsInput, in3 ...request.Option) (*s3.DeleteBucketCorsOutput, error)

	// DeleteBucketEncryptionFunc mocks the DeleteBucketEncryption method.
	DeleteBucketEncryptionFunc func(in1 *s3.DeleteBucketEncryptionInput) (*s3.DeleteBucketEncryptionOutput, error)

	// DeleteBucketEncryptionRequestFunc mocks the DeleteBucketEncryptionRequest method.
	DeleteBucketEncryptionRequestFunc func(in1 *s3.DeleteBucketEncryptionInput) (*request.Request, *s3.DeleteBucketEncryptionOutput)

	// DeleteBucketEncryptionWithContextFunc mocks the DeleteBucketEncryptionWithContext method.
	DeleteBucketEncryptionWithContextFunc func(in1 context.Context, in2 *s3.DeleteBucketEncryptionInput, in3 ...request.Option) (*s3.DeleteBucketEncryptionOutput, error)

	// DeleteBucketInventoryConfigurationFunc mocks the DeleteBucketInventoryConfiguration method.
	DeleteBucketInventoryConfigurationFunc func(in1 *s3.DeleteBucketInventoryConfigurationInput) (*s3.DeleteBucketInventoryConfigurationOutput, error)

	// DeleteBucketInventoryConfigurationRequestFunc mocks the DeleteBucketInventoryConfigurationRequest method.
	DeleteBucketInventoryConfigurationRequestFunc func(in1 *s3.DeleteBucketInventoryConfigurationInput) (*request.Request, *s3.DeleteBucketInventoryConfigurationOutput)

	// DeleteBucketInventoryConfigurationWithContextFunc mocks the DeleteBucketInventoryConfigurationWithContext method.
	DeleteBucketInventoryConfigurationWithContextFunc func(in1 context.Context, in2 *s3.DeleteBucketInventoryConfigurationInput, in3 ...request.Option) (*s3.DeleteBucketInventoryConfigurationOutput, error)

	// DeleteBucketLifecycleFunc mocks the DeleteBucketLifecycle method.
	DeleteBucketLifecycleFunc func(in1 *s3.DeleteBucketLifecycleInput) (*s3.DeleteBucketLifecycleOutput, error)

	// DeleteBucketLifecycleRequestFunc mocks the DeleteBucketLifecycleRequest method.
	DeleteBucketLifecycleRequestFunc func(in1 *s3.DeleteBucketLifecycleInput) (*request.Request, *s3.DeleteBucketLifecycleOutput)

	// DeleteBucketLifecycleWithContextFunc mocks the DeleteBucketLifecycleWithContext method.
	DeleteBucketLifecycleWithContextFunc func(in1 context.Context, in2 *s3.DeleteBucketLifecycleInput, in3 ...request.Option) (*s3.DeleteBucketLifecycleOutput, error)

	// DeleteBucketMetricsConfigurationFunc mocks the DeleteBucketMetricsConfiguration method.
	DeleteBucketMetricsConfigurationFunc func(in1 *s3.DeleteBucketMetricsConfigurationInput) (*s3.DeleteBucketMetricsConfigurationOutput, error)

	// DeleteBucketMetricsConfigurationRequestFunc mocks the DeleteBucketMetricsConfigurationRequest method.
	DeleteBucketMetricsConfigurationRequestFunc func(in1 *s3.DeleteBucketMetricsConfigurationInput) (*request.Request, *s3.DeleteBucketMetricsConfigurationOutput)

	// DeleteBucketMetricsConfigurationWithContextFunc mocks the DeleteBucketMetricsConfigurationWithContext method.
	DeleteBucketMetricsConfigurationWithContextFunc func(in1 context.Context, in2 *s3.DeleteBucketMetricsConfigurationInput, in3 ...request.Option) (*s3.DeleteBucketMetricsConfigurationOutput, error)

	// DeleteBucketPolicyFunc mocks the DeleteBucketPolicy method.
	DeleteBucketPolicyFunc func(in1 *s3.DeleteBucketPolicyInput) (*s3.DeleteBucketPolicyOutput, error)

	// DeleteBucketPolicyRequestFunc mocks the DeleteBucketPolicyRequest method.
	DeleteBucketPolicyRequestFunc func(in1 *s3.DeleteBucketPolicyInput) (*request.Request, *s3.DeleteBucketPolicyOutput)

	// DeleteBucketPolicyWithContextFunc mocks the DeleteBucketPolicyWithContext method.
	DeleteBucketPolicyWithContextFunc func(in1 context.Context, in2 *s3.DeleteBucketPolicyInput, in3 ...request.Option) (*s3.DeleteBucketPolicyOutput, error)

	// DeleteBucketReplicationFunc mocks the DeleteBucketReplication method.
	DeleteBucketReplicationFunc func(in1 *s3.DeleteBucketReplicationInput) (*s3.DeleteBucketReplicationOutput, error)

	// DeleteBucketReplicationRequestFunc mocks the DeleteBucketReplicationRequest method.
	DeleteBucketReplicationRequestFunc func(in1 *s3.DeleteBucketReplicationInput) (*request.Request, *s3.DeleteBucketReplicationOutput)

	// DeleteBucketReplicationWithContextFunc mocks the DeleteBucketReplicationWithContext method.
	DeleteBucketReplicationWithContextFunc func(in1 context.Context, in2 *s3.DeleteBucketReplicationInput, in3 ...request.Option) (*s3.DeleteBucketReplicationOutput, error)

	// DeleteBucketRequestFunc mocks the DeleteBucketRequest method.
	DeleteBucketRequestFunc func(in1 *s3.DeleteBucketInput) (*request.Request, *s3.DeleteBucketOutput)

	// DeleteBucketTaggingFunc mocks the DeleteBucketTagging method.
	DeleteBucketTaggingFunc func(in1 *s3.DeleteBucketTaggingInput) (*s3.DeleteBucketTaggingOutput, error)

	// DeleteBucketTaggingRequestFunc mocks the DeleteBucketTaggingRequest method.
	DeleteBucketTaggingRequestFunc func(in1 *s3.DeleteBucketTaggingInput) (*request.Request, *s3.DeleteBucketTaggingOutput)

	// DeleteBucketTaggingWithContextFunc mocks the DeleteBucketTaggingWithContext method.
	DeleteBucketTaggingWithContextFunc func(in1 context.Context, in2 *s3.DeleteBucketTaggingInput, in3 ...request.Option) (*s3.DeleteBucketTaggingOutput, error)

	// DeleteBucketWebsiteFunc mocks the DeleteBucketWebsite method.
	DeleteBucketWebsiteFunc func(in1 *s3.DeleteBucketWebsiteInput) (*s3.DeleteBucketWebsiteOutput, error)

	// DeleteBucketWebsiteRequestFunc mocks the DeleteBucketWebsiteRequest method.
	DeleteBucketWebsiteRequestFunc func(in1 *s3.DeleteBucketWebsiteInput) (*request.Request, *s3.DeleteBucketWebsiteOutput)

	// DeleteBucketWebsiteWithContextFunc mocks the DeleteBucketWebsiteWithContext method.
	DeleteBucketWebsiteWithContextFunc func(in1 context.Context, in2 *s3.DeleteBucketWebsiteInput, in3 ...request.Option) (*s3.DeleteBucketWebsiteOutput, error)

	// DeleteBucketWithContextFunc mocks the DeleteBucketWithContext method.
	DeleteBucketWithContextFunc func(in1 context.Context, in2 *s3.DeleteBucketInput, in3 ...request.Option) (*s3.DeleteBucketOutput, error)

	// DeleteObjectFunc mocks the DeleteObject method.
	DeleteObjectFunc func(in1 *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error)

	// DeleteObjectRequestFunc mocks the DeleteObjectRequest method.
	DeleteObjectRequestFunc func(in1 *s3.DeleteObjectInput) (*request.Request, *s3.DeleteObjectOutput)

	// DeleteObjectTaggingFunc mocks the DeleteObjectTagging method.
	DeleteObjectTaggingFunc func(in1 *s3.DeleteObjectTaggingInput) (*s3.DeleteObjectTaggingOutput, error)

	// DeleteObjectTaggingRequestFunc mocks the DeleteObjectTaggingRequest method.
	DeleteObjectTaggingRequestFunc func(in1 *s3.DeleteObjectTaggingInput) (*request.Request, *s3.DeleteObjectTaggingOutput)

	// DeleteObjectTaggingWithContextFunc mocks the DeleteObjectTaggingWithContext method.
	DeleteObjectTaggingWithContextFunc func(in1 context.Context, in2 *s3.DeleteObjectTaggingInput, in3 ...request.Option) (*s3.DeleteObjectTaggingOutput, error)

	// DeleteObjectWithContextFunc mocks the DeleteObjectWithContext method.
	DeleteObjectWithContextFunc func(in1 context.Context, in2 *s3.DeleteObjectInput, in3 ...request.Option) (*s3.DeleteObjectOutput, error)

	// DeleteObjectsFunc mocks the DeleteObjects method.
	DeleteObjectsFunc func(in1 *s3.DeleteObjectsInput) (*s3.DeleteObjectsOutput, error)

	// DeleteObjectsRequestFunc mocks the DeleteObjectsRequest method.
	DeleteObjectsRequestFunc func(in1 *s3.DeleteObjectsInput) (*request.Request, *s3.DeleteObjectsOutput)

	// DeleteObjectsWithContextFunc mocks the DeleteObjectsWithContext method.
	DeleteObjectsWithContextFunc func(in1 context.Context, in2 *s3.DeleteObjectsInput, in3 ...request.Option) (*s3.DeleteObjectsOutput, error)

	// DeletePublicAccessBlockFunc mocks the DeletePublicAccessBlock method.
	DeletePublicAccessBlockFunc func(in1 *s3.DeletePublicAccessBlockInput) (*s3.DeletePublicAccessBlockOutput, error)

	// DeletePublicAccessBlockRequestFunc mocks the DeletePublicAccessBlockRequest method.
	DeletePublicAccessBlockRequestFunc func(in1 *s3.DeletePublicAccessBlockInput) (*request.Request, *s3.DeletePublicAccessBlockOutput)

	// DeletePublicAccessBlockWithContextFunc mocks the DeletePublicAccessBlockWithContext method.
	DeletePublicAccessBlockWithContextFunc func(in1 context.Context, in2 *s3.DeletePublicAccessBlockInput, in3 ...request.Option) (*s3.DeletePublicAccessBlockOutput, error)

	// GetBucketAccelerateConfigurationFunc mocks the GetBucketAccelerateConfiguration method.
	GetBucketAccelerateConfigurationFunc func(in1 *s3.GetBucketAccelerateConfigurationInput) (*s3.GetBucketAccelerateConfigurationOutput, error)

	// GetBucketAccelerateConfigurationRequestFunc mocks the GetBucketAccelerateConfigurationRequest method.
	GetBucketAccelerateConfigurationRequestFunc func(in1 *s3.GetBucketAccelerateConfigurationInput) (*request.Request, *s3.GetBucketAccelerateConfigurationOutput)

	// GetBucketAccelerateConfigurationWithContextFunc mocks the GetBucketAccelerateConfigurationWithContext method.
	GetBucketAccelerateConfigurationWithContextFunc func(in1 context.Context, in2 *s3.GetBucketAccelerateConfigurationInput, in3 ...request.Option) (*s3.GetBucketAccelerateConfigurationOutput, error)

	// GetBucketAclFunc mocks the GetBucketAcl method.
	GetBucketAclFunc func(in1 *s3.GetBucketAclInput) (*s3.GetBucketAclOutput, error)

	// GetBucketAclRequestFunc mocks the GetBucketAclRequest method.
	GetBucketAclRequestFunc func(in1 *s3.GetBucketAclInput) (*request.Request, *s3.GetBucketAclOutput)

	// GetBucketAclWithContextFunc mocks the GetBucketAclWithContext method.
	GetBucketAclWithContextFunc func(in1 context.Context, in2 *s3.GetBucketAclInput, in3 ...request.Option) (*s3.GetBucketAclOutput, error)

	// GetBucketAnalyticsConfigurationFunc mocks the GetBucketAnalyticsConfiguration method.
	GetBucketAnalyticsConfigurationFunc func(in1 *s3.GetBucketAnalyticsConfigurationInput) (*s3.GetBucketAnalyticsConfigurationOutput, error)

	// GetBucketAnalyticsConfigurationRequestFunc mocks the GetBucketAnalyticsConfigurationRequest method.
	GetBucketAnalyticsConfigurationRequestFunc func(in1 *s3.GetBucketAnalyticsConfigurationInput) (*request.Request, *s3.GetBucketAnalyticsConfigurationOutput)

	// GetBucketAnalyticsConfigurationWithContextFunc mocks the GetBucketAnalyticsConfigurationWithContext method.
	GetBucketAnalyticsConfigurationWithContextFunc func(in1 context.Context, in2 *s3.GetBucketAnalyticsConfigurationInput, in3 ...request.Option) (*s3.GetBucketAnalyticsConfigurationOutput, error)

	// GetBucketCorsFunc mocks the GetBucketCors method.
	GetBucketCorsFunc func(in1 *s3.GetBucketCorsInput) (*s3.GetBucketCorsOutput, error)

	// GetBucketCorsRequestFunc mocks the GetBucketCorsRequest method.
	GetBucketCorsRequestFunc func(in1 *s3.GetBucketCorsInput) (*request.Request, *s3.GetBucketCorsOutput)

	// GetBucketCorsWithContextFunc mocks the GetBucketCorsWithContext method.
	GetBucketCorsWithContextFunc func(in1 context.Context, in2 *s3.GetBucketCorsInput, in3 ...request.Option) (*s3.GetBucketCorsOutput, error)

	// GetBucketEncryptionFunc mocks the GetBucketEncryption method.
	GetBucketEncryptionFunc func(in1 *s3.GetBucketEncryptionInput) (*s3.GetBucketEncryptionOutput, error)

	// GetBucketEncryptionRequestFunc mocks the GetBucketEncryptionRequest method.
	GetBucketEncryptionRequestFunc func(in1 *s3.GetBucketEncryptionInput) (*request.Request, *s3.GetBucketEncryptionOutput)

	// GetBucketEncryptionWithContextFunc mocks the GetBucketEncryptionWithContext method.
	GetBucketEncryptionWithContextFunc func(in1 context.Context, in2 *s3.GetBucketEncryptionInput, in3 ...request.Option) (*s3.GetBucketEncryptionOutput, error)

	// GetBucketInventoryConfigurationFunc mocks the GetBucketInventoryConfiguration method.
	GetBucketInventoryConfigurationFunc func(in1 *s3.GetBucketInventoryConfigurationInput) (*s3.GetBucketInventoryConfigurationOutput, error)

	// GetBucketInventoryConfigurationRequestFunc mocks the GetBucketInventoryConfigurationRequest method.
	GetBucketInventoryConfigurationRequestFunc func(in1 *s3.GetBucketInventoryConfigurationInput) (*request.Request, *s3.GetBucketInventoryConfigurationOutput)

	// GetBucketInventoryConfigurationWithContextFunc mocks the GetBucketInventoryConfigurationWithContext method.
	GetBucketInventoryConfigurationWithContextFunc func(in1 context.Context, in2 *s3.GetBucketInventoryConfigurationInput, in3 ...request.Option) (*s3.GetBucketInventoryConfigurationOutput, error)

	// GetBucketLifecycleFunc mocks the GetBucketLifecycle method.
	GetBucketLifecycleFunc func(in1 *s3.GetBucketLifecycleInput) (*s3.GetBucketLifecycleOutput, error)

	// GetBucketLifecycleConfigurationFunc mocks the GetBucketLifecycleConfiguration method.
	GetBucketLifecycleConfigurationFunc func(in1 *s3.GetBucketLifecycleConfigurationInput) (*s3.GetBucketLifecycleConfigurationOutput, error)

	// GetBucketLifecycleConfigurationRequestFunc mocks the GetBucketLifecycleConfigurationRequest method.
	GetBucketLifecycleConfigurationRequestFunc func(in1 *s3.GetBucketLifecycleConfigurationInput) (*request.Request, *s3.GetBucketLifecycleConfigurationOutput)

	// GetBucketLifecycleConfigurationWithContextFunc mocks the GetBucketLifecycleConfigurationWithContext method.
	GetBucketLifecycleConfigurationWithContextFunc func(in1 context.Context, in2 *s3.GetBucketLifecycleConfigurationInput, in3 ...request.Option) (*s3.GetBucketLifecycleConfigurationOutput, error)

	// GetBucketLifecycleRequestFunc mocks the GetBucketLifecycleRequest method.
	GetBucketLifecycleRequestFunc func(in1 *s3.GetBucketLifecycleInput) (*request.Request, *s3.GetBucketLifecycleOutput)

	// GetBucketLifecycleWithContextFunc mocks the GetBucketLifecycleWithContext method.
	GetBucketLifecycleWithContextFunc func(in1 context.Context, in2 *s3.GetBucketLifecycleInput, in3 ...request.Option) (*s3.GetBucketLifecycleOutput, error)

	// GetBucketLocationFunc mocks the GetBucketLocation method.
	GetBucketLocationFunc func(in1 *s3.GetBucketLocationInput) (*s3.GetBucketLocationOutput, error)

	// GetBucketLocationRequestFunc mocks the GetBucketLocationRequest method.
	GetBucketLocationRequestFunc func(in1 *s3.GetBucketLocationInput) (*request.Request, *s3.GetBucketLocationOutput)

	// GetBucketLocationWithContextFunc mocks the GetBucketLocationWithContext method.
	GetBucketLocationWithContextFunc func(in1 context.Context, in2 *s3.GetBucketLocationInput, in3 ...request.Option) (*s3.GetBucketLocationOutput, error)

	// GetBucketLoggingFunc mocks the GetBucketLogging method.
	GetBucketLoggingFunc func(in1 *s3.GetBucketLoggingInput) (*s3.GetBucketLoggingOutput, error)

	// GetBucketLoggingRequestFunc mocks the GetBucketLoggingRequest method.
	GetBucketLoggingRequestFunc func(in1 *s3.GetBucketLoggingInput) (*request.Request, *s3.GetBucketLoggingOutput)

	// GetBucketLoggingWithContextFunc mocks the GetBucketLoggingWithContext method.
	GetBucketLoggingWithContextFunc func(in1 context.Context, in2 *s3.GetBucketLoggingInput, in3 ...request.Option) (*s3.GetBucketLoggingOutput, error)

	// GetBucketMetricsConfigurationFunc mocks the GetBucketMetricsConfiguration method.
	GetBucketMetricsConfigurationFunc func(in1 *s3.GetBucketMetricsConfigurationInput) (*s3.GetBucketMetricsConfigurationOutput, error)

	// GetBucketMetricsConfigurationRequestFunc mocks the GetBucketMetricsConfigurationRequest method.
	GetBucketMetricsConfigurationRequestFunc func(in1 *s3.GetBucketMetricsConfigurationInput) (*request.Request, *s3.GetBucketMetricsConfigurationOutput)

	// GetBucketMetricsConfigurationWithContextFunc mocks the GetBucketMetricsConfigurationWithContext method.
	GetBucketMetricsConfigurationWithContextFunc func(in1 context.Context, in2 *s3.GetBucketMetricsConfigurationInput, in3 ...request.Option) (*s3.GetBucketMetricsConfigurationOutput, error)

	// GetBucketNotificationFunc mocks the GetBucketNotification method.
	GetBucketNotificationFunc func(in1 *s3.GetBucketNotificationConfigurationRequest) (*s3.NotificationConfigurationDeprecated, error)

	// GetBucketNotificationConfigurationFunc mocks the GetBucketNotificationConfiguration method.
	GetBucketNotificationConfigurationFunc func(in1 *s3.GetBucketNotificationConfigurationRequest) (*s3.NotificationConfiguration, error)

	// GetBucketNotificationConfigurationRequestFunc mocks the GetBucketNotificationConfigurationRequest method.
	GetBucketNotificationConfigurationRequestFunc func(in1 *s3.GetBucketNotificationConfigurationRequest) (*request.Request, *s3.NotificationConfiguration)

	// GetBucketNotificationConfigurationWithContextFunc mocks the GetBucketNotificationConfigurationWithContext method.
	GetBucketNotificationConfigurationWithContextFunc func(in1 context.Context, in2 *s3.GetBucketNotificationConfigurationRequest, in3 ...request.Option) (*s3.NotificationConfiguration, error)

	// GetBucketNotificationRequestFunc mocks the GetBucketNotificationRequest method.
	GetBucketNotificationRequestFunc func(in1 *s3.GetBucketNotificationConfigurationRequest) (*request.Request, *s3.NotificationConfigurationDeprecated)

	// GetBucketNotificationWithContextFunc mocks the GetBucketNotificationWithContext method.
	GetBucketNotificationWithContextFunc func(in1 context.Context, in2 *s3.GetBucketNotificationConfigurationRequest, in3 ...request.Option) (*s3.NotificationConfigurationDeprecated, error)

	// GetBucketPolicyFunc mocks the GetBucketPolicy method.
	GetBucketPolicyFunc func(in1 *s3.GetBucketPolicyInput) (*s3.GetBucketPolicyOutput, error)

	// GetBucketPolicyRequestFunc mocks the GetBucketPolicyRequest method.
	GetBucketPolicyRequestFunc func(in1 *s3.GetBucketPolicyInput) (*request.Request, *s3.GetBucketPolicyOutput)

	// GetBucketPolicyStatusFunc mocks the GetBucketPolicyStatus method.
	GetBucketPolicyStatusFunc func(in1 *s3.GetBucketPolicyStatusInput) (*s3.GetBucketPolicyStatusOutput, error)

	// GetBucketPolicyStatusRequestFunc mocks the GetBucketPolicyStatusRequest method.
	GetBucketPolicyStatusRequestFunc func(in1 *s3.GetBucketPolicyStatusInput) (*request.Request, *s3.GetBucketPolicyStatusOutput)

	// GetBucketPolicyStatusWithContextFunc mocks the GetBucketPolicyStatusWithContext method.
	GetBucketPolicyStatusWithContextFunc func(in1 context.Context, in2 *s3.GetBucketPolicyStatusInput, in3 ...request.Option) (*s3.GetBucketPolicyStatusOutput, error)

	// GetBucketPolicyWithContextFunc mocks the GetBucketPolicyWithContext method.
	GetBucketPolicyWithContextFunc func(in1 context.Context, in2 *s3.GetBucketPolicyInput, in3 ...request.Option) (*s3.GetBucketPolicyOutput, error)

	// GetBucketReplicationFunc mocks the GetBucketReplication method.
	GetBucketReplicationFunc func(in1 *s3.GetBucketReplicationInput) (*s3.GetBucketReplicationOutput, error)

	// GetBucketReplicationRequestFunc mocks the GetBucketReplicationRequest method.
	GetBucketReplicationRequestFunc func(in1 *s3.GetBucketReplicationInput) (*request.Request, *s3.GetBucketReplicationOutput)

	// GetBucketReplicationWithContextFunc mocks the GetBucketReplicationWithContext method.
	GetBucketReplicationWithContextFunc func(in1 context.Context, in2 *s3.GetBucketReplicationInput, in3 ...request.Option) (*s3.GetBucketReplicationOutput, error)

	// GetBucketRequestPaymentFunc mocks the GetBucketRequestPayment method.
	GetBucketRequestPaymentFunc func(in1 *s3.GetBucketRequestPaymentInput) (*s3.GetBucketRequestPaymentOutput, error)

	// GetBucketRequestPaymentRequestFunc mocks the GetBucketRequestPaymentRequest method.
	GetBucketRequestPaymentRequestFunc func(in1 *s3.GetBucketRequestPaymentInput) (*request.Request, *s3.GetBucketRequestPaymentOutput)

	// GetBucketRequestPaymentWithContextFunc mocks the GetBucketRequestPaymentWithContext method.
	GetBucketRequestPaymentWithContextFunc func(in1 context.Context, in2 *s3.GetBucketRequestPaymentInput, in3 ...request.Option) (*s3.GetBucketRequestPaymentOutput, error)

	// GetBucketTaggingFunc mocks the GetBucketTagging method.
	GetBucketTaggingFunc func(in1 *s3.GetBucketTaggingInput) (*s3.GetBucketTaggingOutput, error)

	// GetBucketTaggingRequestFunc mocks the GetBucketTaggingRequest method.
	GetBucketTaggingRequestFunc func(in1 *s3.GetBucketTaggingInput) (*request.Request, *s3.GetBucketTaggingOutput)

	// GetBucketTaggingWithContextFunc mocks the GetBucketTaggingWithContext method.
	GetBucketTaggingWithContextFunc func(in1 context.Context, in2 *s3.GetBucketTaggingInput, in3 ...request.Option) (*s3.GetBucketTaggingOutput, error)

	// GetBucketVersioningFunc mocks the GetBucketVersioning method.
	GetBucketVersioningFunc func(in1 *s3.GetBucketVersioningInput) (*s3.GetBucketVersioningOutput, error)

	// GetBucketVersioningRequestFunc mocks the GetBucketVersioningRequest method.
	GetBucketVersioningRequestFunc func(in1 *s3.GetBucketVersioningInput) (*request.Request, *s3.GetBucketVersioningOutput)

	// GetBucketVersioningWithContextFunc mocks the GetBucketVersioningWithContext method.
	GetBucketVersioningWithContextFunc func(in1 context.Context, in2 *s3.GetBucketVersioningInput, in3 ...request.Option) (*s3.GetBucketVersioningOutput, error)

	// GetBucketWebsiteFunc mocks the GetBucketWebsite method.
	GetBucketWebsiteFunc func(in1 *s3.GetBucketWebsiteInput) (*s3.GetBucketWebsiteOutput, error)

	// GetBucketWebsiteRequestFunc mocks the GetBucketWebsiteRequest method.
	GetBucketWebsiteRequestFunc func(in1 *s3.GetBucketWebsiteInput) (*request.Request, *s3.GetBucketWebsiteOutput)

	// GetBucketWebsiteWithContextFunc mocks the GetBucketWebsiteWithContext method.
	GetBucketWebsiteWithContextFunc func(in1 context.Context, in2 *s3.GetBucketWebsiteInput, in3 ...request.Option) (*s3.GetBucketWebsiteOutput, error)

	// GetObjectFunc mocks the GetObject method.
	GetObjectFunc func(in1 *s3.GetObjectInput) (*s3.GetObjectOutput, error)

	// GetObjectAclFunc mocks the GetObjectAcl method.
	GetObjectAclFunc func(in1 *s3.GetObjectAclInput) (*s3.GetObjectAclOutput, error)

	// GetObjectAclRequestFunc mocks the GetObjectAclRequest method.
	GetObjectAclRequestFunc func(in1 *s3.GetObjectAclInput) (*request.Request, *s3.GetObjectAclOutput)

	// GetObjectAclWithContextFunc mocks the GetObjectAclWithContext method.
	GetObjectAclWithContextFunc func(in1 context.Context, in2 *s3.GetObjectAclInput, in3 ...request.Option) (*s3.GetObjectAclOutput, error)

	// GetObjectLegalHoldFunc mocks the GetObjectLegalHold method.
	GetObjectLegalHoldFunc func(in1 *s3.GetObjectLegalHoldInput) (*s3.GetObjectLegalHoldOutput, error)

	// GetObjectLegalHoldRequestFunc mocks the GetObjectLegalHoldRequest method.
	GetObjectLegalHoldRequestFunc func(in1 *s3.GetObjectLegalHoldInput) (*request.Request, *s3.GetObjectLegalHoldOutput)

	// GetObjectLegalHoldWithContextFunc mocks the GetObjectLegalHoldWithContext method.
	GetObjectLegalHoldWithContextFunc func(in1 context.Context, in2 *s3.GetObjectLegalHoldInput, in3 ...request.Option) (*s3.GetObjectLegalHoldOutput, error)

	// GetObjectLockConfigurationFunc mocks the GetObjectLockConfiguration method.
	GetObjectLockConfigurationFunc func(in1 *s3.GetObjectLockConfigurationInput) (*s3.GetObjectLockConfigurationOutput, error)

	// GetObjectLockConfigurationRequestFunc mocks the GetObjectLockConfigurationRequest method.
	GetObjectLockConfigurationRequestFunc func(in1 *s3.GetObjectLockConfigurationInput) (*request.Request, *s3.GetObjectLockConfigurationOutput)

	// GetObjectLockConfigurationWithContextFunc mocks the GetObjectLockConfigurationWithContext method.
	GetObjectLockConfigurationWithContextFunc func(in1 context.Context, in2 *s3.GetObjectLockConfigurationInput, in3 ...request.Option) (*s3.GetObjectLockConfigurationOutput, error)

	// GetObjectRequestFunc mocks the GetObjectRequest method.
	GetObjectRequestFunc func(in1 *s3.GetObjectInput) (*request.Request, *s3.GetObjectOutput)

	// GetObjectRetentionFunc mocks the GetObjectRetention method.
	GetObjectRetentionFunc func(in1 *s3.GetObjectRetentionInput) (*s3.GetObjectRetentionOutput, error)

	// GetObjectRetentionRequestFunc mocks the GetObjectRetentionRequest method.
	GetObjectRetentionRequestFunc func(in1 *s3.GetObjectRetentionInput) (*request.Request, *s3.GetObjectRetentionOutput)

	// GetObjectRetentionWithContextFunc mocks the GetObjectRetentionWithContext method.
	GetObjectRetentionWithContextFunc func(in1 context.Context, in2 *s3.GetObjectRetentionInput, in3 ...request.Option) (*s3.GetObjectRetentionOutput, error)

	// GetObjectTaggingFunc mocks the GetObjectTagging method.
	GetObjectTaggingFunc func(in1 *s3.GetObjectTaggingInput) (*s3.GetObjectTaggingOutput, error)

	// GetObjectTaggingRequestFunc mocks the GetObjectTaggingRequest method.
	GetObjectTaggingRequestFunc func(in1 *s3.GetObjectTaggingInput) (*request.Request, *s3.GetObjectTaggingOutput)

	// GetObjectTaggingWithContextFunc mocks the GetObjectTaggingWithContext method.
	GetObjectTaggingWithContextFunc func(in1 context.Context, in2 *s3.GetObjectTaggingInput, in3 ...request.Option) (*s3.GetObjectTaggingOutput, error)

	// GetObjectTorrentFunc mocks the GetObjectTorrent method.
	GetObjectTorrentFunc func(in1 *s3.GetObjectTorrentInput) (*s3.GetObjectTorrentOutput, error)

	// GetObjectTorrentRequestFunc mocks the GetObjectTorrentRequest method.
	GetObjectTorrentRequestFunc func(in1 *s3.GetObjectTorrentInput) (*request.Request, *s3.GetObjectTorrentOutput)

	// GetObjectTorrentWithContextFunc mocks the GetObjectTorrentWithContext method.
	GetObjectTorrentWithContextFunc func(in1 context.Context, in2 *s3.GetObjectTorrentInput, in3 ...request.Option) (*s3.GetObjectTorrentOutput, error)

	// GetObjectWithContextFunc mocks the GetObjectWithContext method.
	GetObjectWithContextFunc func(in1 context.Context, in2 *s3.GetObjectInput, in3 ...request.Option) (*s3.GetObjectOutput, error)

	// GetPublicAccessBlockFunc mocks the GetPublicAccessBlock method.
	GetPublicAccessBlockFunc func(in1 *s3.GetPublicAccessBlockInput) (*s3.GetPublicAccessBlockOutput, error)

	// GetPublicAccessBlockRequestFunc mocks the GetPublicAccessBlockRequest method.
	GetPublicAccessBlockRequestFunc func(in1 *s3.GetPublicAccessBlockInput) (*request.Request, *s3.GetPublicAccessBlockOutput)

	// GetPublicAccessBlockWithContextFunc mocks the GetPublicAccessBlockWithContext method.
	GetPublicAccessBlockWithContextFunc func(in1 context.Context, in2 *s3.GetPublicAccessBlockInput, in3 ...request.Option) (*s3.GetPublicAccessBlockOutput, error)

	// HeadBucketFunc mocks the HeadBucket method.
	HeadBucketFunc func(in1 *s3.HeadBucketInput) (*s3.HeadBucketOutput, error)

	// HeadBucketRequestFunc mocks the HeadBucketRequest method.
	HeadBucketRequestFunc func(in1 *s3.HeadBucketInput) (*request.Request, *s3.HeadBucketOutput)

	// HeadBucketWithContextFunc mocks the HeadBucketWithContext method.
	HeadBucketWithContextFunc func(in1 context.Context, in2 *s3.HeadBucketInput, in3 ...request.Option) (*s3.HeadBucketOutput, error)

	// HeadObjectFunc mocks the HeadObject method.
	HeadObjectFunc func(in1 *s3.HeadObjectInput) (*s3.HeadObjectOutput, error)

	// HeadObjectRequestFunc mocks the HeadObjectRequest method.
	HeadObjectRequestFunc func(in1 *s3.HeadObjectInput) (*request.Request, *s3.HeadObjectOutput)

	// HeadObjectWithContextFunc mocks the HeadObjectWithContext method.
	HeadObjectWithContextFunc func(in1 context.Context, in2 *s3.HeadObjectInput, in3 ...request.Option) (*s3.HeadObjectOutput, error)

	// ListBucketAnalyticsConfigurationsFunc mocks the ListBucketAnalyticsConfigurations method.
	ListBucketAnalyticsConfigurationsFunc func(in1 *s3.ListBucketAnalyticsConfigurationsInput) (*s3.ListBucketAnalyticsConfigurationsOutput, error)

	// ListBucketAnalyticsConfigurationsRequestFunc mocks the ListBucketAnalyticsConfigurationsRequest method.
	ListBucketAnalyticsConfigurationsRequestFunc func(in1 *s3.ListBucketAnalyticsConfigurationsInput) (*request.Request, *s3.ListBucketAnalyticsConfigurationsOutput)

	// ListBucketAnalyticsConfigurationsWithContextFunc mocks the ListBucketAnalyticsConfigurationsWithContext method.
	ListBucketAnalyticsConfigurationsWithContextFunc func(in1 context.Context, in2 *s3.ListBucketAnalyticsConfigurationsInput, in3 ...request.Option) (*s3.ListBucketAnalyticsConfigurationsOutput, error)

	// ListBucketInventoryConfigurationsFunc mocks the ListBucketInventoryConfigurations method.
	ListBucketInventoryConfigurationsFunc func(in1 *s3.ListBucketInventoryConfigurationsInput) (*s3.ListBucketInventoryConfigurationsOutput, error)

	// ListBucketInventoryConfigurationsRequestFunc mocks the ListBucketInventoryConfigurationsRequest method.
	ListBucketInventoryConfigurationsRequestFunc func(in1 *s3.ListBucketInventoryConfigurationsInput) (*request.Request, *s3.ListBucketInventoryConfigurationsOutput)

	// ListBucketInventoryConfigurationsWithContextFunc mocks the ListBucketInventoryConfigurationsWithContext method.
	ListBucketInventoryConfigurationsWithContextFunc func(in1 context.Context, in2 *s3.ListBucketInventoryConfigurationsInput, in3 ...request.Option) (*s3.ListBucketInventoryConfigurationsOutput, error)

	// ListBucketMetricsConfigurationsFunc mocks the ListBucketMetricsConfigurations method.
	ListBucketMetricsConfigurationsFunc func(in1 *s3.ListBucketMetricsConfigurationsInput) (*s3.ListBucketMetricsConfigurationsOutput, error)

	// ListBucketMetricsConfigurationsRequestFunc mocks the ListBucketMetricsConfigurationsRequest method.
	ListBucketMetricsConfigurationsRequestFunc func(in1 *s3.ListBucketMetricsConfigurationsInput) (*request.Request, *s3.ListBucketMetricsConfigurationsOutput)

	// ListBucketMetricsConfigurationsWithContextFunc mocks the ListBucketMetricsConfigurationsWithContext method.
	ListBucketMetricsConfigurationsWithContextFunc func(in1 context.Context, in2 *s3.ListBucketMetricsConfigurationsInput, in3 ...request.Option) (*s3.ListBucketMetricsConfigurationsOutput, error)

	// ListBucketsFunc mocks the ListBuckets method.
	ListBucketsFunc func(in1 *s3.ListBucketsInput) (*s3.ListBucketsOutput, error)

	// ListBucketsRequestFunc mocks the ListBucketsRequest method.
	ListBucketsRequestFunc func(in1 *s3.ListBucketsInput) (*request.Request, *s3.ListBucketsOutput)

	// ListBucketsWithContextFunc mocks the ListBucketsWithContext method.
	ListBucketsWithContextFunc func(in1 context.Context, in2 *s3.ListBucketsInput, in3 ...request.Option) (*s3.ListBucketsOutput, error)

	// ListMultipartUploadsFunc mocks the ListMultipartUploads method.
	ListMultipartUploadsFunc func(in1 *s3.ListMultipartUploadsInput) (*s3.ListMultipartUploadsOutput, error)

	// ListMultipartUploadsPagesFunc mocks the ListMultipartUploadsPages method.
	ListMultipartUploadsPagesFunc func(in1 *s3.ListMultipartUploadsInput, in2 func(*s3.ListMultipartUploadsOutput, bool) bool) error

	// ListMultipartUploadsPagesWithContextFunc mocks the ListMultipartUploadsPagesWithContext method.
	ListMultipartUploadsPagesWithContextFunc func(in1 context.Context, in2 *s3.ListMultipartUploadsInput, in3 func(*s3.ListMultipartUploadsOutput, bool) bool, in4 ...request.Option) error

	// ListMultipartUploadsRequestFunc mocks the ListMultipartUploadsRequest method.
	ListMultipartUploadsRequestFunc func(in1 *s3.ListMultipartUploadsInput) (*request.Request, *s3.ListMultipartUploadsOutput)

	// ListMultipartUploadsWithContextFunc mocks the ListMultipartUploadsWithContext method.
	ListMultipartUploadsWithContextFunc func(in1 context.Context, in2 *s3.ListMultipartUploadsInput, in3 ...request.Option) (*s3.ListMultipartUploadsOutput, error)

	// ListObjectVersionsFunc mocks the ListObjectVersions method.
	ListObjectVersionsFunc func(in1 *s3.ListObjectVersionsInput) (*s3.ListObjectVersionsOutput, error)

	// ListObjectVersionsPagesFunc mocks the ListObjectVersionsPages method.
	ListObjectVersionsPagesFunc func(in1 *s3.ListObjectVersionsInput, in2 func(*s3.ListObjectVersionsOutput, bool) bool) error

	// ListObjectVersionsPagesWithContextFunc mocks the ListObjectVersionsPagesWithContext method.
	ListObjectVersionsPagesWithContextFunc func(in1 context.Context, in2 *s3.ListObjectVersionsInput, in3 func(*s3.ListObjectVersionsOutput, bool) bool, in4 ...request.Option) error

	// ListObjectVersionsRequestFunc mocks the ListObjectVersionsRequest method.
	ListObjectVersionsRequestFunc func(in1 *s3.ListObjectVersionsInput) (*request.Request, *s3.ListObjectVersionsOutput)

	// ListObjectVersionsWithContextFunc mocks the ListObjectVersionsWithContext method.
	ListObjectVersionsWithContextFunc func(in1 context.Context, in2 *s3.ListObjectVersionsInput, in3 ...request.Option) (*s3.ListObjectVersionsOutput, error)

	// ListObjectsFunc mocks the ListObjects method.
	ListObjectsFunc func(in1 *s3.ListObjectsInput) (*s3.ListObjectsOutput, error)

	// ListObjectsPagesFunc mocks the ListObjectsPages method.
	ListObjectsPagesFunc func(in1 *s3.ListObjectsInput, in2 func(*s3.ListObjectsOutput, bool) bool) error

	// ListObjectsPagesWithContextFunc mocks the ListObjectsPagesWithContext method.
	ListObjectsPagesWithContextFunc func(in1 context.Context, in2 *s3.ListObjectsInput, in3 func(*s3.ListObjectsOutput, bool) bool, in4 ...request.Option) error

	// ListObjectsRequestFunc mocks the ListObjectsRequest method.
	ListObjectsRequestFunc func(in1 *s3.ListObjectsInput) (*request.Request, *s3.ListObjectsOutput)

	// ListObjectsV2Func mocks the ListObjectsV2 method.
	ListObjectsV2Func func(in1 *s3.ListObjectsV2Input) (*s3.ListObjectsV2Output, error)

	// ListObjectsV2PagesFunc mocks the ListObjectsV2Pages method.
	ListObjectsV2PagesFunc func(in1 *s3.ListObjectsV2Input, in2 func(*s3.ListObjectsV2Output, bool) bool) error

	// ListObjectsV2PagesWithContextFunc mocks the ListObjectsV2PagesWithContext method.
	ListObjectsV2PagesWithContextFunc func(in1 context.Context, in2 *s3.ListObjectsV2Input, in3 func(*s3.ListObjectsV2Output, bool) bool, in4 ...request.Option) error

	// ListObjectsV2RequestFunc mocks the ListObjectsV2Request method.
	ListObjectsV2RequestFunc func(in1 *s3.ListObjectsV2Input) (*request.Request, *s3.ListObjectsV2Output)

	// ListObjectsV2WithContextFunc mocks the ListObjectsV2WithContext method.
	ListObjectsV2WithContextFunc func(in1 context.Context, in2 *s3.ListObjectsV2Input, in3 ...request.Option) (*s3.ListObjectsV2Output, error)

	// ListObjectsWithContextFunc mocks the ListObjectsWithContext method.
	ListObjectsWithContextFunc func(in1 context.Context, in2 *s3.ListObjectsInput, in3 ...request.Option) (*s3.ListObjectsOutput, error)

	// ListPartsFunc mocks the ListParts method.
	ListPartsFunc func(in1 *s3.ListPartsInput) (*s3.ListPartsOutput, error)

	// ListPartsPagesFunc mocks the ListPartsPages method.
	ListPartsPagesFunc func(in1 *s3.ListPartsInput, in2 func(*s3.ListPartsOutput, bool) bool) error

	// ListPartsPagesWithContextFunc mocks the ListPartsPagesWithContext method.
	ListPartsPagesWithContextFunc func(in1 context.Context, in2 *s3.ListPartsInput, in3 func(*s3.ListPartsOutput, bool) bool, in4 ...request.Option) error

	// ListPartsRequestFunc mocks the ListPartsRequest method.
	ListPartsRequestFunc func(in1 *s3.ListPartsInput) (*request.Request, *s3.ListPartsOutput)

	// ListPartsWithContextFunc mocks the ListPartsWithContext method.
	ListPartsWithContextFunc func(in1 context.Context, in2 *s3.ListPartsInput, in3 ...request.Option) (*s3.ListPartsOutput, error)

	// PutBucketAccelerateConfigurationFunc mocks the PutBucketAccelerateConfiguration method.
	PutBucketAccelerateConfigurationFunc func(in1 *s3.PutBucketAccelerateConfigurationInput) (*s3.PutBucketAccelerateConfigurationOutput, error)

	// PutBucketAccelerateConfigurationRequestFunc mocks the PutBucketAccelerateConfigurationRequest method.
	PutBucketAccelerateConfigurationRequestFunc func(in1 *s3.PutBucketAccelerateConfigurationInput) (*request.Request, *s3.PutBucketAccelerateConfigurationOutput)

	// PutBucketAccelerateConfigurationWithContextFunc mocks the PutBucketAccelerateConfigurationWithContext method.
	PutBucketAccelerateConfigurationWithContextFunc func(in1 context.Context, in2 *s3.PutBucketAccelerateConfigurationInput, in3 ...request.Option) (*s3.PutBucketAccelerateConfigurationOutput, error)

	// PutBucketAclFunc mocks the PutBucketAcl method.
	PutBucketAclFunc func(in1 *s3.PutBucketAclInput) (*s3.PutBucketAclOutput, error)

	// PutBucketAclRequestFunc mocks the PutBucketAclRequest method.
	PutBucketAclRequestFunc func(in1 *s3.PutBucketAclInput) (*request.Request, *s3.PutBucketAclOutput)

	// PutBucketAclWithContextFunc mocks the PutBucketAclWithContext method.
	PutBucketAclWithContextFunc func(in1 context.Context, in2 *s3.PutBucketAclInput, in3 ...request.Option) (*s3.PutBucketAclOutput, error)

	// PutBucketAnalyticsConfigurationFunc mocks the PutBucketAnalyticsConfiguration method.
	PutBucketAnalyticsConfigurationFunc func(in1 *s3.PutBucketAnalyticsConfigurationInput) (*s3.PutBucketAnalyticsConfigurationOutput, error)

	// PutBucketAnalyticsConfigurationRequestFunc mocks the PutBucketAnalyticsConfigurationRequest method.
	PutBucketAnalyticsConfigurationRequestFunc func(in1 *s3.PutBucketAnalyticsConfigurationInput) (*request.Request, *s3.PutBucketAnalyticsConfigurationOutput)

	// PutBucketAnalyticsConfigurationWithContextFunc mocks the PutBucketAnalyticsConfigurationWithContext method.
	PutBucketAnalyticsConfigurationWithContextFunc func(in1 context.Context, in2 *s3.PutBucketAnalyticsConfigurationInput, in3 ...request.Option) (*s3.PutBucketAnalyticsConfigurationOutput, error)

	// PutBucketCorsFunc mocks the PutBucketCors method.
	PutBucketCorsFunc func(in1 *s3.PutBucketCorsInput) (*s3.PutBucketCorsOutput, error)

	// PutBucketCorsRequestFunc mocks the PutBucketCorsRequest method.
	PutBucketCorsRequestFunc func(in1 *s3.PutBucketCorsInput) (*request.Request, *s3.PutBucketCorsOutput)

	// PutBucketCorsWithContextFunc mocks the PutBucketCorsWithContext method.
	PutBucketCorsWithContextFunc func(in1 context.Context, in2 *s3.PutBucketCorsInput, in3 ...request.Option) (*s3.PutBucketCorsOutput, error)

	// PutBucketEncryptionFunc mocks the PutBucketEncryption method.
	PutBucketEncryptionFunc func(in1 *s3.PutBucketEncryptionInput) (*s3.PutBucketEncryptionOutput, error)

	// PutBucketEncryptionRequestFunc mocks the PutBucketEncryptionRequest method.
	PutBucketEncryptionRequestFunc func(in1 *s3.PutBucketEncryptionInput) (*request.Request, *s3.PutBucketEncryptionOutput)

	// PutBucketEncryptionWithContextFunc mocks the PutBucketEncryptionWithContext method.
	PutBucketEncryptionWithContextFunc func(in1 context.Context, in2 *s3.PutBucketEncryptionInput, in3 ...request.Option) (*s3.PutBucketEncryptionOutput, error)

	// PutBucketInventoryConfigurationFunc mocks the PutBucketInventoryConfiguration method.
	PutBucketInventoryConfigurationFunc func(in1 *s3.PutBucketInventoryConfigurationInput) (*s3.PutBucketInventoryConfigurationOutput, error)

	// PutBucketInventoryConfigurationRequestFunc mocks the PutBucketInventoryConfigurationRequest method.
	PutBucketInventoryConfigurationRequestFunc func(in1 *s3.PutBucketInventoryConfigurationInput) (*request.Request, *s3.PutBucketInventoryConfigurationOutput)

	// PutBucketInventoryConfigurationWithContextFunc mocks the PutBucketInventoryConfigurationWithContext method.
	PutBucketInventoryConfigurationWithContextFunc func(in1 context.Context, in2 *s3.PutBucketInventoryConfigurationInput, in3 ...request.Option) (*s3.PutBucketInventoryConfigurationOutput, error)

	// PutBucketLifecycleFunc mocks the PutBucketLifecycle method.
	PutBucketLifecycleFunc func(in1 *s3.PutBucketLifecycleInput) (*s3.PutBucketLifecycleOutput, error)

	// PutBucketLifecycleConfigurationFunc mocks the PutBucketLifecycleConfiguration method.
	PutBucketLifecycleConfigurationFunc func(in1 *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error)

	// PutBucketLifecycleConfigurationRequestFunc mocks the PutBucketLifecycleConfigurationRequest method.
	PutBucketLifecycleConfigurationRequestFunc func(in1 *s3.PutBucketLifecycleConfigurationInput) (*request.Request, *s3.PutBucketLifecycleConfigurationOutput)

	// PutBucketLifecycleConfigurationWithContextFunc mocks the PutBucketLifecycleConfigurationWithContext method.
	PutBucketLifecycleConfigurationWithContextFunc func(in1 context.Context, in2 *s3.PutBucketLifecycleConfigurationInput, in3 ...request.Option) (*s3.PutBucketLifecycleConfigurationOutput, error)

	// PutBucketLifecycleRequestFunc mocks the PutBucketLifecycleRequest method.
	PutBucketLifecycleRequestFunc func(in1 *s3.PutBucketLifecycleInput) (*request.Request, *s3.PutBucketLifecycleOutput)

	// PutBucketLifecycleWithContextFunc mocks the PutBucketLifecycleWithContext method.
	PutBucketLifecycleWithContextFunc func(in1 context.Context, in2 *s3.PutBucketLifecycleInput, in3 ...request.Option) (*s3.PutBucketLifecycleOutput, error)

	// PutBucketLoggingFunc mocks the PutBucketLogging method.
	PutBucketLoggingFunc func(in1 *s3.PutBucketLoggingInput) (*s3.PutBucketLoggingOutput, error)

	// PutBucketLoggingRequestFunc mocks the PutBucketLoggingRequest method.
	PutBucketLoggingRequestFunc func(in1 *s3.PutBucketLoggingInput) (*request.Request, *s3.PutBucketLoggingOutput)

	// PutBucketLoggingWithContextFunc mocks the PutBucketLoggingWithContext method.
	PutBucketLoggingWithContextFunc func(in1 context.Context, in2 *s3.PutBucketLoggingInput, in3 ...request.Option) (*s3.PutBucketLoggingOutput, error)

	// PutBucketMetricsConfigurationFunc mocks the PutBucketMetricsConfiguration method.
	PutBucketMetricsConfigurationFunc func(in1 *s3.PutBucketMetricsConfigurationInput) (*s3.PutBucketMetricsConfigurationOutput, error)

	// PutBucketMetricsConfigurationRequestFunc mocks the PutBucketMetricsConfigurationRequest method.
	PutBucketMetricsConfigurationRequestFunc func(in1 *s3.PutBucketMetricsConfigurationInput) (*request.Request, *s3.PutBucketMetricsConfigurationOutput)

	// PutBucketMetricsConfigurationWithContextFunc mocks the PutBucketMetricsConfigurationWithContext method.
	PutBucketMetricsConfigurationWithContextFunc func(in1 context.Context, in2 *s3.PutBucketMetricsConfigurationInput, in3 ...request.Option) (*s3.PutBucketMetricsConfigurationOutput, error)

	// PutBucketNotificationFunc mocks the PutBucketNotification method.
	PutBucketNotificationFunc func(in1 *s3.PutBucketNotificationInput) (*s3.PutBucketNotificationOutput, error)

	// PutBucketNotificationConfigurationFunc mocks the PutBucketNotificationConfiguration method.
	PutBucketNotificationConfigurationFunc func(in1 *s3.PutBucketNotificationConfigurationInput) (*s3.PutBucketNotificationConfigurationOutput, error)

	// PutBucketNotificationConfigurationRequestFunc mocks the PutBucketNotificationConfigurationRequest method.
	PutBucketNotificationConfigurationRequestFunc func(in1 *s3.PutBucketNotificationConfigurationInput) (*request.Request, *s3.PutBucketNotificationConfigurationOutput)

	// PutBucketNotificationConfigurationWithContextFunc mocks the PutBucketNotificationConfigurationWithContext method.
	PutBucketNotificationConfigurationWithContextFunc func(in1 context.Context, in2 *s3.PutBucketNotificationConfigurationInput, in3 ...request.Option) (*s3.PutBucketNotificationConfigurationOutput, error)

	// PutBucketNotificationRequestFunc mocks the PutBucketNotificationRequest method.
	PutBucketNotificationRequestFunc func(in1 *s3.PutBucketNotificationInput) (*request.Request, *s3.PutBucketNotificationOutput)

	// PutBucketNotificationWithContextFunc mocks the PutBucketNotificationWithContext method.
	PutBucketNotificationWithContextFunc func(in1 context.Context, in2 *s3.PutBucketNotificationInput, in3 ...request.Option) (*s3.PutBucketNotificationOutput, error)

	// PutBucketPolicyFunc mocks the PutBucketPolicy method.
	PutBucketPolicyFunc func(in1 *s3.PutBucketPolicyInput) (*s3.PutBucketPolicyOutput, error)

	// PutBucketPolicyRequestFunc mocks the PutBucketPolicyRequest method.
	PutBucketPolicyRequestFunc func(in1 *s3.PutBucketPolicyInput) (*request.Request, *s3.PutBucketPolicyOutput)

	// PutBucketPolicyWithContextFunc mocks the PutBucketPolicyWithContext method.
	PutBucketPolicyWithContextFunc func(in1 context.Context, in2 *s3.PutBucketPolicyInput, in3 ...request.Option) (*s3.PutBucketPolicyOutput, error)

	// PutBucketReplicationFunc mocks the PutBucketReplication method.
	PutBucketReplicationFunc func(in1 *s3.PutBucketReplicationInput) (*s3.PutBucketReplicationOutput, error)

	// PutBucketReplicationRequestFunc mocks the PutBucketReplicationRequest method.
	PutBucketReplicationRequestFunc func(in1 *s3.PutBucketReplicationInput) (*request.Request, *s3.PutBucketReplicationOutput)

	// PutBucketReplicationWithContextFunc mocks the PutBucketReplicationWithContext method.
	PutBucketReplicationWithContextFunc func(in1 context.Context, in2 *s3.PutBucketReplicationInput, in3 ...request.Option) (*s3.PutBucketReplicationOutput, error)

	// PutBucketRequestPaymentFunc mocks the PutBucketRequestPayment method.
	PutBucketRequestPaymentFunc func(in1 *s3.PutBucketRequestPaymentInput) (*s3.PutBucketRequestPaymentOutput, error)

	// PutBucketRequestPaymentRequestFunc mocks the PutBucketRequestPaymentRequest method.
	PutBucketRequestPaymentRequestFunc func(in1 *s3.PutBucketRequestPaymentInput) (*request.Request, *s3.PutBucketRequestPaymentOutput)

	// PutBucketRequestPaymentWithContextFunc mocks the PutBucketRequestPaymentWithContext method.
	PutBucketRequestPaymentWithContextFunc func(in1 context.Context, in2 *s3.PutBucketRequestPaymentInput, in3 ...request.Option) (*s3.PutBucketRequestPaymentOutput, error)

	// PutBucketTaggingFunc mocks the PutBucketTagging method.
	PutBucketTaggingFunc func(in1 *s3.PutBucketTaggingInput) (*s3.PutBucketTaggingOutput, error)

	// PutBucketTaggingRequestFunc mocks the PutBucketTaggingRequest method.
	PutBucketTaggingRequestFunc func(in1 *s3.PutBucketTaggingInput) (*request.Request, *s3.PutBucketTaggingOutput)

	// PutBucketTaggingWithContextFunc mocks the PutBucketTaggingWithContext method.
	PutBucketTaggingWithContextFunc func(in1 context.Context, in2 *s3.PutBucketTaggingInput, in3 ...request.Option) (*s3.PutBucketTaggingOutput, error)

	// PutBucketVersioningFunc mocks the PutBucketVersioning method.
	PutBucketVersioningFunc func(in1 *s3.PutBucketVersioningInput) (*s3.PutBucketVersioningOutput, error)

	// PutBucketVersioningRequestFunc mocks the PutBucketVersioningRequest method.
	PutBucketVersioningRequestFunc func(in1 *s3.PutBucketVersioningInput) (*request.Request, *s3.PutBucketVersioningOutput)

	// PutBucketVersioningWithContextFunc mocks the PutBucketVersioningWithContext method.
	PutBucketVersioningWithContextFunc func(in1 context.Context, in2 *s3.PutBucketVersioningInput, in3 ...request.Option) (*s3.PutBucketVersioningOutput, error)

	// PutBucketWebsiteFunc mocks the PutBucketWebsite method.
	PutBucketWebsiteFunc func(in1 *s3.PutBucketWebsiteInput) (*s3.PutBucketWebsiteOutput, error)

	// PutBucketWebsiteRequestFunc mocks the PutBucketWebsiteRequest method.
	PutBucketWebsiteRequestFunc func(in1 *s3.PutBucketWebsiteInput) (*request.Request, *s3.PutBucketWebsiteOutput)

	// PutBucketWebsiteWithContextFunc mocks the PutBucketWebsiteWithContext method.
	PutBucketWebsiteWithContextFunc func(in1 context.Context, in2 *s3.PutBucketWebsiteInput, in3 ...request.Option) (*s3.PutBucketWebsiteOutput, error)

	// PutObjectFunc mocks the PutObject method.
	PutObjectFunc func(in1 *s3.PutObjectInput) (*s3.PutObjectOutput, error)

	// PutObjectAclFunc mocks the PutObjectAcl method.
	PutObjectAclFunc func(in1 *s3.PutObjectAclInput) (*s3.PutObjectAclOutput, error)

	// PutObjectAclRequestFunc mocks the PutObjectAclRequest method.
	PutObjectAclRequestFunc func(in1 *s3.PutObjectAclInput) (*request.Request, *s3.PutObjectAclOutput)

	// PutObjectAclWithContextFunc mocks the PutObjectAclWithContext method.
	PutObjectAclWithContextFunc func(in1 context.Context, in2 *s3.PutObjectAclInput, in3 ...request.Option) (*s3.PutObjectAclOutput, error)

	// PutObjectLegalHoldFunc mocks the PutObjectLegalHold method.
	PutObjectLegalHoldFunc func(in1 *s3.PutObjectLegalHoldInput) (*s3.PutObjectLegalHoldOutput, error)

	// PutObjectLegalHoldRequestFunc mocks the PutObjectLegalHoldRequest method.
	PutObjectLegalHoldRequestFunc func(in1 *s3.PutObjectLegalHoldInput) (*request.Request, *s3.PutObjectLegalHoldOutput)

	// PutObjectLegalHoldWithContextFunc mocks the PutObjectLegalHoldWithContext method.
	PutObjectLegalHoldWithContextFunc func(in1 context.Context, in2 *s3.PutObjectLegalHoldInput, in3 ...request.Option) (*s3.PutObjectLegalHoldOutput, error)

	// PutObjectLockConfigurationFunc mocks the PutObjectLockConfiguration method.
	PutObjectLockConfigurationFunc func(in1 *s3.PutObjectLockConfigurationInput) (*s3.PutObjectLockConfigurationOutput, error)

	// PutObjectLockConfigurationRequestFunc mocks the PutObjectLockConfigurationRequest method.
	PutObjectLockConfigurationRequestFunc func(in1 *s3.PutObjectLockConfigurationInput) (*request.Request, *s3.PutObjectLockConfigurationOutput)

	// PutObjectLockConfigurationWithContextFunc mocks the PutObjectLockConfigurationWithContext method.
	PutObjectLockConfigurationWithContextFunc func(in1 context.Context, in2 *s3.PutObjectLockConfigurationInput, in3 ...request.Option) (*s3.PutObjectLockConfigurationOutput, error)

	// PutObjectRequestFunc mocks the PutObjectRequest method.
	PutObjectRequestFunc func(in1 *s3.PutObjectInput) (*request.Request, *s3.PutObjectOutput)

	// PutObjectRetentionFunc mocks the PutObjectRetention method.
	PutObjectRetentionFunc func(in1 *s3.PutObjectRetentionInput) (*s3.PutObjectRetentionOutput, error)

	// PutObjectRetentionRequestFunc mocks the PutObjectRetentionRequest method.
	PutObjectRetentionRequestFunc func(in1 *s3.PutObjectRetentionInput) (*request.Request, *s3.PutObjectRetentionOutput)

	// PutObjectRetentionWithContextFunc mocks the PutObjectRetentionWithContext method.
	PutObjectRetentionWithContextFunc func(in1 context.Context, in2 *s3.PutObjectRetentionInput, in3 ...request.Option) (*s3.PutObjectRetentionOutput, error)

	// PutObjectTaggingFunc mocks the PutObjectTagging method.
	PutObjectTaggingFunc func(in1 *s3.PutObjectTaggingInput) (*s3.PutObjectTaggingOutput, error)

	// PutObjectTaggingRequestFunc mocks the PutObjectTaggingRequest method.
	PutObjectTaggingRequestFunc func(in1 *s3.PutObjectTaggingInput) (*request.Request, *s3.PutObjectTaggingOutput)

	// PutObjectTaggingWithContextFunc mocks the PutObjectTaggingWithContext method.
	PutObjectTaggingWithContextFunc func(in1 context.Context, in2 *s3.PutObjectTaggingInput, in3 ...request.Option) (*s3.PutObjectTaggingOutput, error)

	// PutObjectWithContextFunc mocks the PutObjectWithContext method.
	PutObjectWithContextFunc func(in1 context.Context, in2 *s3.PutObjectInput, in3 ...request.Option) (*s3.PutObjectOutput, error)

	// PutPublicAccessBlockFunc mocks the PutPublicAccessBlock method.
	PutPublicAccessBlockFunc func(in1 *s3.PutPublicAccessBlockInput) (*s3.PutPublicAccessBlockOutput, error)

	// PutPublicAccessBlockRequestFunc mocks the PutPublicAccessBlockRequest method.
	PutPublicAccessBlockRequestFunc func(in1 *s3.PutPublicAccessBlockInput) (*request.Request, *s3.PutPublicAccessBlockOutput)

	// PutPublicAccessBlockWithContextFunc mocks the PutPublicAccessBlockWithContext method.
	PutPublicAccessBlockWithContextFunc func(in1 context.Context, in2 *s3.PutPublicAccessBlockInput, in3 ...request.Option) (*s3.PutPublicAccessBlockOutput, error)

	// RestoreObjectFunc mocks the RestoreObject method.
	RestoreObjectFunc func(in1 *s3.RestoreObjectInput) (*s3.RestoreObjectOutput, error)

	// RestoreObjectRequestFunc mocks the RestoreObjectRequest method.
	RestoreObjectRequestFunc func(in1 *s3.RestoreObjectInput) (*request.Request, *s3.RestoreObjectOutput)

	// RestoreObjectWithContextFunc mocks the RestoreObjectWithContext method.
	RestoreObjectWithContextFunc func(in1 context.Context, in2 *s3.RestoreObjectInput, in3 ...request.Option) (*s3.RestoreObjectOutput, error)

	// SelectObjectContentFunc mocks the SelectObjectContent method.
	SelectObjectContentFunc func(in1 *s3.SelectObjectContentInput) (*s3.SelectObjectContentOutput, error)

	// SelectObjectContentRequestFunc mocks the SelectObjectContentRequest method.
	SelectObjectContentRequestFunc func(in1 *s3.SelectObjectContentInput) (*request.Request, *s3.SelectObjectContentOutput)

	// SelectObjectContentWithContextFunc mocks the SelectObjectContentWithContext method.
	SelectObjectContentWithContextFunc func(in1 context.Context, in2 *s3.SelectObjectContentInput, in3 ...request.Option) (*s3.SelectObjectContentOutput, error)

	// UploadPartFunc mocks the UploadPart method.
	UploadPartFunc func(in1 *s3.UploadPartInput) (*s3.UploadPartOutput, error)

	// UploadPartCopyFunc mocks the UploadPartCopy method.
	UploadPartCopyFunc func(in1 *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error)

	// UploadPartCopyRequestFunc mocks the UploadPartCopyRequest method.
	UploadPartCopyRequestFunc func(in1 *s3.UploadPartCopyInput) (*request.Request, *s3.UploadPartCopyOutput)

	// UploadPartCopyWithContextFunc mocks the UploadPartCopyWithContext method.
	UploadPartCopyWithContextFunc func(in1 context.Context, in2 *s3.UploadPartCopyInput, in3 ...request.Option) (*s3.UploadPartCopyOutput, error)

	// UploadPartRequestFunc mocks the UploadPartRequest method.
	UploadPartRequestFunc func(in1 *s3.UploadPartInput) (*request.Request, *s3.UploadPartOutput)

	// UploadPartWithContextFunc mocks the UploadPartWithContext method.
	UploadPartWithContextFunc func(in1 context.Context, in2 *s3.UploadPartInput, in3 ...request.Option) (*s3.UploadPartOutput, error)

	// WaitUntilBucketExistsFunc mocks the WaitUntilBucketExists method.
	WaitUntilBucketExistsFunc func(in1 *s3.HeadBucketInput) error

	// WaitUntilBucketExistsWithContextFunc mocks the WaitUntilBucketExistsWithContext method.
	WaitUntilBucketExistsWithContextFunc func(in1 context.Context, in2 *s3.HeadBucketInput, in3 ...request.WaiterOption) error

	// WaitUntilBucketNotExistsFunc mocks the WaitUntilBucketNotExists method.
	WaitUntilBucketNotExistsFunc func(in1 *s3.HeadBucketInput) error

	// WaitUntilBucketNotExistsWithContextFunc mocks the WaitUntilBucketNotExistsWithContext method.
	WaitUntilBucketNotExistsWithContextFunc func(in1 context.Context, in2 *s3.HeadBucketInput, in3 ...request.WaiterOption) error

	// WaitUntilObjectExistsFunc mocks the WaitUntilObjectExists method.
	WaitUntilObjectExistsFunc func(in1 *s3.HeadObjectInput) error

	// WaitUntilObjectExistsWithContextFunc mocks the WaitUntilObjectExistsWithContext method.
	WaitUntilObjectExistsWithContextFunc func(in1 context.Context, in2 *s3.HeadObjectInput, in3 ...request.WaiterOption) error

	// WaitUntilObjectNotExistsFunc mocks the WaitUntilObjectNotExists method.
	WaitUntilObjectNotExistsFunc func(in1 *s3.HeadObjectInput) error

	// WaitUntilObjectNotExistsWithContextFunc mocks the WaitUntilObjectNotExistsWithContext method.
	WaitUntilObjectNotExistsWithContextFunc func(in1 context.Context, in2 *s3.HeadObjectInput, in3 ...request.WaiterOption) error

	// calls tracks calls to the methods.
	calls struct {
		// AbortMultipartUpload holds details about calls to the AbortMultipartUpload method.
		AbortMultipartUpload []struct {
			// In1 is the in1 argument value.
			In1 *s3.AbortMultipartUploadInput
		}
		// AbortMultipartUploadRequest holds details about calls to the AbortMultipartUploadRequest method.
		AbortMultipartUploadRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.AbortMultipartUploadInput
		}
		// AbortMultipartUploadWithContext holds details about calls to the AbortMultipartUploadWithContext method.
		AbortMultipartUploadWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.AbortMultipartUploadInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CompleteMultipartUpload holds details about calls to the CompleteMultipartUpload method.
		CompleteMultipartUpload []struct {
			// In1 is the in1 argument value.
			In1 *s3.CompleteMultipartUploadInput
		}
		// CompleteMultipartUploadRequest holds details about calls to the CompleteMultipartUploadRequest method.
		CompleteMultipartUploadRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.CompleteMultipartUploadInput
		}
		// CompleteMultipartUploadWithContext holds details about calls to the CompleteMultipartUploadWithContext method.
		CompleteMultipartUploadWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.CompleteMultipartUploadInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CopyObject holds details about calls to the CopyObject method.
		CopyObject []struct {
			// In1 is the in1 argument value.
			In1 *s3.CopyObjectInput
		}
		// CopyObjectRequest holds details about calls to the CopyObjectRequest method.
		CopyObjectRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.CopyObjectInput
		}
		// CopyObjectWithContext holds details about calls to the CopyObjectWithContext method.
		CopyObjectWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.CopyObjectInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateBucket holds details about calls to the CreateBucket method.
		CreateBucket []struct {
			// In1 is the in1 argument value.
			In1 *s3.CreateBucketInput
		}
		// CreateBucketRequest holds details about calls to the CreateBucketRequest method.
		CreateBucketRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.CreateBucketInput
		}
		// CreateBucketWithContext holds details about calls to the CreateBucketWithContext method.
		CreateBucketWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.CreateBucketInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateMultipartUpload holds details about calls to the CreateMultipartUpload method.
		CreateMultipartUpload []struct {
			// In1 is the in1 argument value.
			In1 *s3.CreateMultipartUploadInput
		}
		// CreateMultipartUploadRequest holds details about calls to the CreateMultipartUploadRequest method.
		CreateMultipartUploadRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.CreateMultipartUploadInput
		}
		// CreateMultipartUploadWithContext holds details about calls to the CreateMultipartUploadWithContext method.
		CreateMultipartUploadWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.CreateMultipartUploadInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteBucket holds details about calls to the DeleteBucket method.
		DeleteBucket []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteBucketInput
		}
		// DeleteBucketAnalyticsConfiguration holds details about calls to the DeleteBucketAnalyticsConfiguration method.
		DeleteBucketAnalyticsConfiguration []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteBucketAnalyticsConfigurationInput
		}
		// DeleteBucketAnalyticsConfigurationRequest holds details about calls to the DeleteBucketAnalyticsConfigurationRequest method.
		DeleteBucketAnalyticsConfigurationRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteBucketAnalyticsConfigurationInput
		}
		// DeleteBucketAnalyticsConfigurationWithContext holds details about calls to the DeleteBucketAnalyticsConfigurationWithContext method.
		DeleteBucketAnalyticsConfigurationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.DeleteBucketAnalyticsConfigurationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteBucketCors holds details about calls to the DeleteBucketCors method.
		DeleteBucketCors []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteBucketCorsInput
		}
		// DeleteBucketCorsRequest holds details about calls to the DeleteBucketCorsRequest method.
		DeleteBucketCorsRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteBucketCorsInput
		}
		// DeleteBucketCorsWithContext holds details about calls to the DeleteBucketCorsWithContext method.
		DeleteBucketCorsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.DeleteBucketCorsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteBucketEncryption holds details about calls to the DeleteBucketEncryption method.
		DeleteBucketEncryption []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteBucketEncryptionInput
		}
		// DeleteBucketEncryptionRequest holds details about calls to the DeleteBucketEncryptionRequest method.
		DeleteBucketEncryptionRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteBucketEncryptionInput
		}
		// DeleteBucketEncryptionWithContext holds details about calls to the DeleteBucketEncryptionWithContext method.
		DeleteBucketEncryptionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.DeleteBucketEncryptionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteBucketInventoryConfiguration holds details about calls to the DeleteBucketInventoryConfiguration method.
		DeleteBucketInventoryConfiguration []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteBucketInventoryConfigurationInput
		}
		// DeleteBucketInventoryConfigurationRequest holds details about calls to the DeleteBucketInventoryConfigurationRequest method.
		DeleteBucketInventoryConfigurationRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteBucketInventoryConfigurationInput
		}
		// DeleteBucketInventoryConfigurationWithContext holds details about calls to the DeleteBucketInventoryConfigurationWithContext method.
		DeleteBucketInventoryConfigurationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.DeleteBucketInventoryConfigurationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteBucketLifecycle holds details about calls to the DeleteBucketLifecycle method.
		DeleteBucketLifecycle []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteBucketLifecycleInput
		}
		// DeleteBucketLifecycleRequest holds details about calls to the DeleteBucketLifecycleRequest method.
		DeleteBucketLifecycleRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteBucketLifecycleInput
		}
		// DeleteBucketLifecycleWithContext holds details about calls to the DeleteBucketLifecycleWithContext method.
		DeleteBucketLifecycleWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.DeleteBucketLifecycleInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteBucketMetricsConfiguration holds details about calls to the DeleteBucketMetricsConfiguration method.
		DeleteBucketMetricsConfiguration []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteBucketMetricsConfigurationInput
		}
		// DeleteBucketMetricsConfigurationRequest holds details about calls to the DeleteBucketMetricsConfigurationRequest method.
		DeleteBucketMetricsConfigurationRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteBucketMetricsConfigurationInput
		}
		// DeleteBucketMetricsConfigurationWithContext holds details about calls to the DeleteBucketMetricsConfigurationWithContext method.
		DeleteBucketMetricsConfigurationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.DeleteBucketMetricsConfigurationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteBucketPolicy holds details about calls to the DeleteBucketPolicy method.
		DeleteBucketPolicy []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteBucketPolicyInput
		}
		// DeleteBucketPolicyRequest holds details about calls to the DeleteBucketPolicyRequest method.
		DeleteBucketPolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteBucketPolicyInput
		}
		// DeleteBucketPolicyWithContext holds details about calls to the DeleteBucketPolicyWithContext method.
		DeleteBucketPolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.DeleteBucketPolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteBucketReplication holds details about calls to the DeleteBucketReplication method.
		DeleteBucketReplication []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteBucketReplicationInput
		}
		// DeleteBucketReplicationRequest holds details about calls to the DeleteBucketReplicationRequest method.
		DeleteBucketReplicationRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteBucketReplicationInput
		}
		// DeleteBucketReplicationWithContext holds details about calls to the DeleteBucketReplicationWithContext method.
		DeleteBucketReplicationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.DeleteBucketReplicationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteBucketRequest holds details about calls to the DeleteBucketRequest method.
		DeleteBucketRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteBucketInput
		}
		// DeleteBucketTagging holds details about calls to the DeleteBucketTagging method.
		DeleteBucketTagging []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteBucketTaggingInput
		}
		// DeleteBucketTaggingRequest holds details about calls to the DeleteBucketTaggingRequest method.
		DeleteBucketTaggingRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteBucketTaggingInput
		}
		// DeleteBucketTaggingWithContext holds details about calls to the DeleteBucketTaggingWithContext method.
		DeleteBucketTaggingWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.DeleteBucketTaggingInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteBucketWebsite holds details about calls to the DeleteBucketWebsite method.
		DeleteBucketWebsite []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteBucketWebsiteInput
		}
		// DeleteBucketWebsiteRequest holds details about calls to the DeleteBucketWebsiteRequest method.
		DeleteBucketWebsiteRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteBucketWebsiteInput
		}
		// DeleteBucketWebsiteWithContext holds details about calls to the DeleteBucketWebsiteWithContext method.
		DeleteBucketWebsiteWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.DeleteBucketWebsiteInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteBucketWithContext holds details about calls to the DeleteBucketWithContext method.
		DeleteBucketWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.DeleteBucketInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteObject holds details about calls to the DeleteObject method.
		DeleteObject []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteObjectInput
		}
		// DeleteObjectRequest holds details about calls to the DeleteObjectRequest method.
		DeleteObjectRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteObjectInput
		}
		// DeleteObjectTagging holds details about calls to the DeleteObjectTagging method.
		DeleteObjectTagging []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteObjectTaggingInput
		}
		// DeleteObjectTaggingRequest holds details about calls to the DeleteObjectTaggingRequest method.
		DeleteObjectTaggingRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteObjectTaggingInput
		}
		// DeleteObjectTaggingWithContext holds details about calls to the DeleteObjectTaggingWithContext method.
		DeleteObjectTaggingWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.DeleteObjectTaggingInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteObjectWithContext holds details about calls to the DeleteObjectWithContext method.
		DeleteObjectWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.DeleteObjectInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteObjects holds details about calls to the DeleteObjects method.
		DeleteObjects []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteObjectsInput
		}
		// DeleteObjectsRequest holds details about calls to the DeleteObjectsRequest method.
		DeleteObjectsRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeleteObjectsInput
		}
		// DeleteObjectsWithContext holds details about calls to the DeleteObjectsWithContext method.
		DeleteObjectsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.DeleteObjectsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeletePublicAccessBlock holds details about calls to the DeletePublicAccessBlock method.
		DeletePublicAccessBlock []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeletePublicAccessBlockInput
		}
		// DeletePublicAccessBlockRequest holds details about calls to the DeletePublicAccessBlockRequest method.
		DeletePublicAccessBlockRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.DeletePublicAccessBlockInput
		}
		// DeletePublicAccessBlockWithContext holds details about calls to the DeletePublicAccessBlockWithContext method.
		DeletePublicAccessBlockWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.DeletePublicAccessBlockInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetBucketAccelerateConfiguration holds details about calls to the GetBucketAccelerateConfiguration method.
		GetBucketAccelerateConfiguration []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketAccelerateConfigurationInput
		}
		// GetBucketAccelerateConfigurationRequest holds details about calls to the GetBucketAccelerateConfigurationRequest method.
		GetBucketAccelerateConfigurationRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketAccelerateConfigurationInput
		}
		// GetBucketAccelerateConfigurationWithContext holds details about calls to the GetBucketAccelerateConfigurationWithContext method.
		GetBucketAccelerateConfigurationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetBucketAccelerateConfigurationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetBucketAcl holds details about calls to the GetBucketAcl method.
		GetBucketAcl []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketAclInput
		}
		// GetBucketAclRequest holds details about calls to the GetBucketAclRequest method.
		GetBucketAclRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketAclInput
		}
		// GetBucketAclWithContext holds details about calls to the GetBucketAclWithContext method.
		GetBucketAclWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetBucketAclInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetBucketAnalyticsConfiguration holds details about calls to the GetBucketAnalyticsConfiguration method.
		GetBucketAnalyticsConfiguration []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketAnalyticsConfigurationInput
		}
		// GetBucketAnalyticsConfigurationRequest holds details about calls to the GetBucketAnalyticsConfigurationRequest method.
		GetBucketAnalyticsConfigurationRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketAnalyticsConfigurationInput
		}
		// GetBucketAnalyticsConfigurationWithContext holds details about calls to the GetBucketAnalyticsConfigurationWithContext method.
		GetBucketAnalyticsConfigurationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetBucketAnalyticsConfigurationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetBucketCors holds details about calls to the GetBucketCors method.
		GetBucketCors []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketCorsInput
		}
		// GetBucketCorsRequest holds details about calls to the GetBucketCorsRequest method.
		GetBucketCorsRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketCorsInput
		}
		// GetBucketCorsWithContext holds details about calls to the GetBucketCorsWithContext method.
		GetBucketCorsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetBucketCorsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetBucketEncryption holds details about calls to the GetBucketEncryption method.
		GetBucketEncryption []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketEncryptionInput
		}
		// GetBucketEncryptionRequest holds details about calls to the GetBucketEncryptionRequest method.
		GetBucketEncryptionRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketEncryptionInput
		}
		// GetBucketEncryptionWithContext holds details about calls to the GetBucketEncryptionWithContext method.
		GetBucketEncryptionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetBucketEncryptionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetBucketInventoryConfiguration holds details about calls to the GetBucketInventoryConfiguration method.
		GetBucketInventoryConfiguration []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketInventoryConfigurationInput
		}
		// GetBucketInventoryConfigurationRequest holds details about calls to the GetBucketInventoryConfigurationRequest method.
		GetBucketInventoryConfigurationRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketInventoryConfigurationInput
		}
		// GetBucketInventoryConfigurationWithContext holds details about calls to the GetBucketInventoryConfigurationWithContext method.
		GetBucketInventoryConfigurationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetBucketInventoryConfigurationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetBucketLifecycle holds details about calls to the GetBucketLifecycle method.
		GetBucketLifecycle []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketLifecycleInput
		}
		// GetBucketLifecycleConfiguration holds details about calls to the GetBucketLifecycleConfiguration method.
		GetBucketLifecycleConfiguration []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketLifecycleConfigurationInput
		}
		// GetBucketLifecycleConfigurationRequest holds details about calls to the GetBucketLifecycleConfigurationRequest method.
		GetBucketLifecycleConfigurationRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketLifecycleConfigurationInput
		}
		// GetBucketLifecycleConfigurationWithContext holds details about calls to the GetBucketLifecycleConfigurationWithContext method.
		GetBucketLifecycleConfigurationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetBucketLifecycleConfigurationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetBucketLifecycleRequest holds details about calls to the GetBucketLifecycleRequest method.
		GetBucketLifecycleRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketLifecycleInput
		}
		// GetBucketLifecycleWithContext holds details about calls to the GetBucketLifecycleWithContext method.
		GetBucketLifecycleWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetBucketLifecycleInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetBucketLocation holds details about calls to the GetBucketLocation method.
		GetBucketLocation []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketLocationInput
		}
		// GetBucketLocationRequest holds details about calls to the GetBucketLocationRequest method.
		GetBucketLocationRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketLocationInput
		}
		// GetBucketLocationWithContext holds details about calls to the GetBucketLocationWithContext method.
		GetBucketLocationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetBucketLocationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetBucketLogging holds details about calls to the GetBucketLogging method.
		GetBucketLogging []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketLoggingInput
		}
		// GetBucketLoggingRequest holds details about calls to the GetBucketLoggingRequest method.
		GetBucketLoggingRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketLoggingInput
		}
		// GetBucketLoggingWithContext holds details about calls to the GetBucketLoggingWithContext method.
		GetBucketLoggingWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetBucketLoggingInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetBucketMetricsConfiguration holds details about calls to the GetBucketMetricsConfiguration method.
		GetBucketMetricsConfiguration []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketMetricsConfigurationInput
		}
		// GetBucketMetricsConfigurationRequest holds details about calls to the GetBucketMetricsConfigurationRequest method.
		GetBucketMetricsConfigurationRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketMetricsConfigurationInput
		}
		// GetBucketMetricsConfigurationWithContext holds details about calls to the GetBucketMetricsConfigurationWithContext method.
		GetBucketMetricsConfigurationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetBucketMetricsConfigurationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetBucketNotification holds details about calls to the GetBucketNotification method.
		GetBucketNotification []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketNotificationConfigurationRequest
		}
		// GetBucketNotificationConfiguration holds details about calls to the GetBucketNotificationConfiguration method.
		GetBucketNotificationConfiguration []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketNotificationConfigurationRequest
		}
		// GetBucketNotificationConfigurationRequest holds details about calls to the GetBucketNotificationConfigurationRequest method.
		GetBucketNotificationConfigurationRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketNotificationConfigurationRequest
		}
		// GetBucketNotificationConfigurationWithContext holds details about calls to the GetBucketNotificationConfigurationWithContext method.
		GetBucketNotificationConfigurationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetBucketNotificationConfigurationRequest
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetBucketNotificationRequest holds details about calls to the GetBucketNotificationRequest method.
		GetBucketNotificationRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketNotificationConfigurationRequest
		}
		// GetBucketNotificationWithContext holds details about calls to the GetBucketNotificationWithContext method.
		GetBucketNotificationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetBucketNotificationConfigurationRequest
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetBucketPolicy holds details about calls to the GetBucketPolicy method.
		GetBucketPolicy []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketPolicyInput
		}
		// GetBucketPolicyRequest holds details about calls to the GetBucketPolicyRequest method.
		GetBucketPolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketPolicyInput
		}
		// GetBucketPolicyStatus holds details about calls to the GetBucketPolicyStatus method.
		GetBucketPolicyStatus []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketPolicyStatusInput
		}
		// GetBucketPolicyStatusRequest holds details about calls to the GetBucketPolicyStatusRequest method.
		GetBucketPolicyStatusRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketPolicyStatusInput
		}
		// GetBucketPolicyStatusWithContext holds details about calls to the GetBucketPolicyStatusWithContext method.
		GetBucketPolicyStatusWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetBucketPolicyStatusInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetBucketPolicyWithContext holds details about calls to the GetBucketPolicyWithContext method.
		GetBucketPolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetBucketPolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetBucketReplication holds details about calls to the GetBucketReplication method.
		GetBucketReplication []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketReplicationInput
		}
		// GetBucketReplicationRequest holds details about calls to the GetBucketReplicationRequest method.
		GetBucketReplicationRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketReplicationInput
		}
		// GetBucketReplicationWithContext holds details about calls to the GetBucketReplicationWithContext method.
		GetBucketReplicationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetBucketReplicationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetBucketRequestPayment holds details about calls to the GetBucketRequestPayment method.
		GetBucketRequestPayment []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketRequestPaymentInput
		}
		// GetBucketRequestPaymentRequest holds details about calls to the GetBucketRequestPaymentRequest method.
		GetBucketRequestPaymentRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketRequestPaymentInput
		}
		// GetBucketRequestPaymentWithContext holds details about calls to the GetBucketRequestPaymentWithContext method.
		GetBucketRequestPaymentWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetBucketRequestPaymentInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetBucketTagging holds details about calls to the GetBucketTagging method.
		GetBucketTagging []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketTaggingInput
		}
		// GetBucketTaggingRequest holds details about calls to the GetBucketTaggingRequest method.
		GetBucketTaggingRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketTaggingInput
		}
		// GetBucketTaggingWithContext holds details about calls to the GetBucketTaggingWithContext method.
		GetBucketTaggingWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetBucketTaggingInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetBucketVersioning holds details about calls to the GetBucketVersioning method.
		GetBucketVersioning []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketVersioningInput
		}
		// GetBucketVersioningRequest holds details about calls to the GetBucketVersioningRequest method.
		GetBucketVersioningRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketVersioningInput
		}
		// GetBucketVersioningWithContext holds details about calls to the GetBucketVersioningWithContext method.
		GetBucketVersioningWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetBucketVersioningInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetBucketWebsite holds details about calls to the GetBucketWebsite method.
		GetBucketWebsite []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketWebsiteInput
		}
		// GetBucketWebsiteRequest holds details about calls to the GetBucketWebsiteRequest method.
		GetBucketWebsiteRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetBucketWebsiteInput
		}
		// GetBucketWebsiteWithContext holds details about calls to the GetBucketWebsiteWithContext method.
		GetBucketWebsiteWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetBucketWebsiteInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetObject holds details about calls to the GetObject method.
		GetObject []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetObjectInput
		}
		// GetObjectAcl holds details about calls to the GetObjectAcl method.
		GetObjectAcl []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetObjectAclInput
		}
		// GetObjectAclRequest holds details about calls to the GetObjectAclRequest method.
		GetObjectAclRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetObjectAclInput
		}
		// GetObjectAclWithContext holds details about calls to the GetObjectAclWithContext method.
		GetObjectAclWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetObjectAclInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetObjectLegalHold holds details about calls to the GetObjectLegalHold method.
		GetObjectLegalHold []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetObjectLegalHoldInput
		}
		// GetObjectLegalHoldRequest holds details about calls to the GetObjectLegalHoldRequest method.
		GetObjectLegalHoldRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetObjectLegalHoldInput
		}
		// GetObjectLegalHoldWithContext holds details about calls to the GetObjectLegalHoldWithContext method.
		GetObjectLegalHoldWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetObjectLegalHoldInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetObjectLockConfiguration holds details about calls to the GetObjectLockConfiguration method.
		GetObjectLockConfiguration []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetObjectLockConfigurationInput
		}
		// GetObjectLockConfigurationRequest holds details about calls to the GetObjectLockConfigurationRequest method.
		GetObjectLockConfigurationRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetObjectLockConfigurationInput
		}
		// GetObjectLockConfigurationWithContext holds details about calls to the GetObjectLockConfigurationWithContext method.
		GetObjectLockConfigurationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetObjectLockConfigurationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetObjectRequest holds details about calls to the GetObjectRequest method.
		GetObjectRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetObjectInput
		}
		// GetObjectRetention holds details about calls to the GetObjectRetention method.
		GetObjectRetention []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetObjectRetentionInput
		}
		// GetObjectRetentionRequest holds details about calls to the GetObjectRetentionRequest method.
		GetObjectRetentionRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetObjectRetentionInput
		}
		// GetObjectRetentionWithContext holds details about calls to the GetObjectRetentionWithContext method.
		GetObjectRetentionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetObjectRetentionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetObjectTagging holds details about calls to the GetObjectTagging method.
		GetObjectTagging []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetObjectTaggingInput
		}
		// GetObjectTaggingRequest holds details about calls to the GetObjectTaggingRequest method.
		GetObjectTaggingRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetObjectTaggingInput
		}
		// GetObjectTaggingWithContext holds details about calls to the GetObjectTaggingWithContext method.
		GetObjectTaggingWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetObjectTaggingInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetObjectTorrent holds details about calls to the GetObjectTorrent method.
		GetObjectTorrent []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetObjectTorrentInput
		}
		// GetObjectTorrentRequest holds details about calls to the GetObjectTorrentRequest method.
		GetObjectTorrentRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetObjectTorrentInput
		}
		// GetObjectTorrentWithContext holds details about calls to the GetObjectTorrentWithContext method.
		GetObjectTorrentWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetObjectTorrentInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetObjectWithContext holds details about calls to the GetObjectWithContext method.
		GetObjectWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetObjectInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetPublicAccessBlock holds details about calls to the GetPublicAccessBlock method.
		GetPublicAccessBlock []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetPublicAccessBlockInput
		}
		// GetPublicAccessBlockRequest holds details about calls to the GetPublicAccessBlockRequest method.
		GetPublicAccessBlockRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.GetPublicAccessBlockInput
		}
		// GetPublicAccessBlockWithContext holds details about calls to the GetPublicAccessBlockWithContext method.
		GetPublicAccessBlockWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.GetPublicAccessBlockInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// HeadBucket holds details about calls to the HeadBucket method.
		HeadBucket []struct {
			// In1 is the in1 argument value.
			In1 *s3.HeadBucketInput
		}
		// HeadBucketRequest holds details about calls to the HeadBucketRequest method.
		HeadBucketRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.HeadBucketInput
		}
		// HeadBucketWithContext holds details about calls to the HeadBucketWithContext method.
		HeadBucketWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.HeadBucketInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// HeadObject holds details about calls to the HeadObject method.
		HeadObject []struct {
			// In1 is the in1 argument value.
			In1 *s3.HeadObjectInput
		}
		// HeadObjectRequest holds details about calls to the HeadObjectRequest method.
		HeadObjectRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.HeadObjectInput
		}
		// HeadObjectWithContext holds details about calls to the HeadObjectWithContext method.
		HeadObjectWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.HeadObjectInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListBucketAnalyticsConfigurations holds details about calls to the ListBucketAnalyticsConfigurations method.
		ListBucketAnalyticsConfigurations []struct {
			// In1 is the in1 argument value.
			In1 *s3.ListBucketAnalyticsConfigurationsInput
		}
		// ListBucketAnalyticsConfigurationsRequest holds details about calls to the ListBucketAnalyticsConfigurationsRequest method.
		ListBucketAnalyticsConfigurationsRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.ListBucketAnalyticsConfigurationsInput
		}
		// ListBucketAnalyticsConfigurationsWithContext holds details about calls to the ListBucketAnalyticsConfigurationsWithContext method.
		ListBucketAnalyticsConfigurationsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.ListBucketAnalyticsConfigurationsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListBucketInventoryConfigurations holds details about calls to the ListBucketInventoryConfigurations method.
		ListBucketInventoryConfigurations []struct {
			// In1 is the in1 argument value.
			In1 *s3.ListBucketInventoryConfigurationsInput
		}
		// ListBucketInventoryConfigurationsRequest holds details about calls to the ListBucketInventoryConfigurationsRequest method.
		ListBucketInventoryConfigurationsRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.ListBucketInventoryConfigurationsInput
		}
		// ListBucketInventoryConfigurationsWithContext holds details about calls to the ListBucketInventoryConfigurationsWithContext method.
		ListBucketInventoryConfigurationsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.ListBucketInventoryConfigurationsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListBucketMetricsConfigurations holds details about calls to the ListBucketMetricsConfigurations method.
		ListBucketMetricsConfigurations []struct {
			// In1 is the in1 argument value.
			In1 *s3.ListBucketMetricsConfigurationsInput
		}
		// ListBucketMetricsConfigurationsRequest holds details about calls to the ListBucketMetricsConfigurationsRequest method.
		ListBucketMetricsConfigurationsRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.ListBucketMetricsConfigurationsInput
		}
		// ListBucketMetricsConfigurationsWithContext holds details about calls to the ListBucketMetricsConfigurationsWithContext method.
		ListBucketMetricsConfigurationsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.ListBucketMetricsConfigurationsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListBuckets holds details about calls to the ListBuckets method.
		ListBuckets []struct {
			// In1 is the in1 argument value.
			In1 *s3.ListBucketsInput
		}
		// ListBucketsRequest holds details about calls to the ListBucketsRequest method.
		ListBucketsRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.ListBucketsInput
		}
		// ListBucketsWithContext holds details about calls to the ListBucketsWithContext method.
		ListBucketsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.ListBucketsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListMultipartUploads holds details about calls to the ListMultipartUploads method.
		ListMultipartUploads []struct {
			// In1 is the in1 argument value.
			In1 *s3.ListMultipartUploadsInput
		}
		// ListMultipartUploadsPages holds details about calls to the ListMultipartUploadsPages method.
		ListMultipartUploadsPages []struct {
			// In1 is the in1 argument value.
			In1 *s3.ListMultipartUploadsInput
			// In2 is the in2 argument value.
			In2 func(*s3.ListMultipartUploadsOutput, bool) bool
		}
		// ListMultipartUploadsPagesWithContext holds details about calls to the ListMultipartUploadsPagesWithContext method.
		ListMultipartUploadsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.ListMultipartUploadsInput
			// In3 is the in3 argument value.
			In3 func(*s3.ListMultipartUploadsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListMultipartUploadsRequest holds details about calls to the ListMultipartUploadsRequest method.
		ListMultipartUploadsRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.ListMultipartUploadsInput
		}
		// ListMultipartUploadsWithContext holds details about calls to the ListMultipartUploadsWithContext method.
		ListMultipartUploadsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.ListMultipartUploadsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListObjectVersions holds details about calls to the ListObjectVersions method.
		ListObjectVersions []struct {
			// In1 is the in1 argument value.
			In1 *s3.ListObjectVersionsInput
		}
		// ListObjectVersionsPages holds details about calls to the ListObjectVersionsPages method.
		ListObjectVersionsPages []struct {
			// In1 is the in1 argument value.
			In1 *s3.ListObjectVersionsInput
			// In2 is the in2 argument value.
			In2 func(*s3.ListObjectVersionsOutput, bool) bool
		}
		// ListObjectVersionsPagesWithContext holds details about calls to the ListObjectVersionsPagesWithContext method.
		ListObjectVersionsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.ListObjectVersionsInput
			// In3 is the in3 argument value.
			In3 func(*s3.ListObjectVersionsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListObjectVersionsRequest holds details about calls to the ListObjectVersionsRequest method.
		ListObjectVersionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.ListObjectVersionsInput
		}
		// ListObjectVersionsWithContext holds details about calls to the ListObjectVersionsWithContext method.
		ListObjectVersionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.ListObjectVersionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListObjects holds details about calls to the ListObjects method.
		ListObjects []struct {
			// In1 is the in1 argument value.
			In1 *s3.ListObjectsInput
		}
		// ListObjectsPages holds details about calls to the ListObjectsPages method.
		ListObjectsPages []struct {
			// In1 is the in1 argument value.
			In1 *s3.ListObjectsInput
			// In2 is the in2 argument value.
			In2 func(*s3.ListObjectsOutput, bool) bool
		}
		// ListObjectsPagesWithContext holds details about calls to the ListObjectsPagesWithContext method.
		ListObjectsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.ListObjectsInput
			// In3 is the in3 argument value.
			In3 func(*s3.ListObjectsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListObjectsRequest holds details about calls to the ListObjectsRequest method.
		ListObjectsRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.ListObjectsInput
		}
		// ListObjectsV2 holds details about calls to the ListObjectsV2 method.
		ListObjectsV2 []struct {
			// In1 is the in1 argument value.
			In1 *s3.ListObjectsV2Input
		}
		// ListObjectsV2Pages holds details about calls to the ListObjectsV2Pages method.
		ListObjectsV2Pages []struct {
			// In1 is the in1 argument value.
			In1 *s3.ListObjectsV2Input
			// In2 is the in2 argument value.
			In2 func(*s3.ListObjectsV2Output, bool) bool
		}
		// ListObjectsV2PagesWithContext holds details about calls to the ListObjectsV2PagesWithContext method.
		ListObjectsV2PagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.ListObjectsV2Input
			// In3 is the in3 argument value.
			In3 func(*s3.ListObjectsV2Output, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListObjectsV2Request holds details about calls to the ListObjectsV2Request method.
		ListObjectsV2Request []struct {
			// In1 is the in1 argument value.
			In1 *s3.ListObjectsV2Input
		}
		// ListObjectsV2WithContext holds details about calls to the ListObjectsV2WithContext method.
		ListObjectsV2WithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.ListObjectsV2Input
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListObjectsWithContext holds details about calls to the ListObjectsWithContext method.
		ListObjectsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.ListObjectsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListParts holds details about calls to the ListParts method.
		ListParts []struct {
			// In1 is the in1 argument value.
			In1 *s3.ListPartsInput
		}
		// ListPartsPages holds details about calls to the ListPartsPages method.
		ListPartsPages []struct {
			// In1 is the in1 argument value.
			In1 *s3.ListPartsInput
			// In2 is the in2 argument value.
			In2 func(*s3.ListPartsOutput, bool) bool
		}
		// ListPartsPagesWithContext holds details about calls to the ListPartsPagesWithContext method.
		ListPartsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.ListPartsInput
			// In3 is the in3 argument value.
			In3 func(*s3.ListPartsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListPartsRequest holds details about calls to the ListPartsRequest method.
		ListPartsRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.ListPartsInput
		}
		// ListPartsWithContext holds details about calls to the ListPartsWithContext method.
		ListPartsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.ListPartsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutBucketAccelerateConfiguration holds details about calls to the PutBucketAccelerateConfiguration method.
		PutBucketAccelerateConfiguration []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketAccelerateConfigurationInput
		}
		// PutBucketAccelerateConfigurationRequest holds details about calls to the PutBucketAccelerateConfigurationRequest method.
		PutBucketAccelerateConfigurationRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketAccelerateConfigurationInput
		}
		// PutBucketAccelerateConfigurationWithContext holds details about calls to the PutBucketAccelerateConfigurationWithContext method.
		PutBucketAccelerateConfigurationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.PutBucketAccelerateConfigurationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutBucketAcl holds details about calls to the PutBucketAcl method.
		PutBucketAcl []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketAclInput
		}
		// PutBucketAclRequest holds details about calls to the PutBucketAclRequest method.
		PutBucketAclRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketAclInput
		}
		// PutBucketAclWithContext holds details about calls to the PutBucketAclWithContext method.
		PutBucketAclWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.PutBucketAclInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutBucketAnalyticsConfiguration holds details about calls to the PutBucketAnalyticsConfiguration method.
		PutBucketAnalyticsConfiguration []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketAnalyticsConfigurationInput
		}
		// PutBucketAnalyticsConfigurationRequest holds details about calls to the PutBucketAnalyticsConfigurationRequest method.
		PutBucketAnalyticsConfigurationRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketAnalyticsConfigurationInput
		}
		// PutBucketAnalyticsConfigurationWithContext holds details about calls to the PutBucketAnalyticsConfigurationWithContext method.
		PutBucketAnalyticsConfigurationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.PutBucketAnalyticsConfigurationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutBucketCors holds details about calls to the PutBucketCors method.
		PutBucketCors []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketCorsInput
		}
		// PutBucketCorsRequest holds details about calls to the PutBucketCorsRequest method.
		PutBucketCorsRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketCorsInput
		}
		// PutBucketCorsWithContext holds details about calls to the PutBucketCorsWithContext method.
		PutBucketCorsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.PutBucketCorsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutBucketEncryption holds details about calls to the PutBucketEncryption method.
		PutBucketEncryption []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketEncryptionInput
		}
		// PutBucketEncryptionRequest holds details about calls to the PutBucketEncryptionRequest method.
		PutBucketEncryptionRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketEncryptionInput
		}
		// PutBucketEncryptionWithContext holds details about calls to the PutBucketEncryptionWithContext method.
		PutBucketEncryptionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.PutBucketEncryptionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutBucketInventoryConfiguration holds details about calls to the PutBucketInventoryConfiguration method.
		PutBucketInventoryConfiguration []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketInventoryConfigurationInput
		}
		// PutBucketInventoryConfigurationRequest holds details about calls to the PutBucketInventoryConfigurationRequest method.
		PutBucketInventoryConfigurationRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketInventoryConfigurationInput
		}
		// PutBucketInventoryConfigurationWithContext holds details about calls to the PutBucketInventoryConfigurationWithContext method.
		PutBucketInventoryConfigurationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.PutBucketInventoryConfigurationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutBucketLifecycle holds details about calls to the PutBucketLifecycle method.
		PutBucketLifecycle []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketLifecycleInput
		}
		// PutBucketLifecycleConfiguration holds details about calls to the PutBucketLifecycleConfiguration method.
		PutBucketLifecycleConfiguration []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketLifecycleConfigurationInput
		}
		// PutBucketLifecycleConfigurationRequest holds details about calls to the PutBucketLifecycleConfigurationRequest method.
		PutBucketLifecycleConfigurationRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketLifecycleConfigurationInput
		}
		// PutBucketLifecycleConfigurationWithContext holds details about calls to the PutBucketLifecycleConfigurationWithContext method.
		PutBucketLifecycleConfigurationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.PutBucketLifecycleConfigurationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutBucketLifecycleRequest holds details about calls to the PutBucketLifecycleRequest method.
		PutBucketLifecycleRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketLifecycleInput
		}
		// PutBucketLifecycleWithContext holds details about calls to the PutBucketLifecycleWithContext method.
		PutBucketLifecycleWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.PutBucketLifecycleInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutBucketLogging holds details about calls to the PutBucketLogging method.
		PutBucketLogging []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketLoggingInput
		}
		// PutBucketLoggingRequest holds details about calls to the PutBucketLoggingRequest method.
		PutBucketLoggingRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketLoggingInput
		}
		// PutBucketLoggingWithContext holds details about calls to the PutBucketLoggingWithContext method.
		PutBucketLoggingWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.PutBucketLoggingInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutBucketMetricsConfiguration holds details about calls to the PutBucketMetricsConfiguration method.
		PutBucketMetricsConfiguration []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketMetricsConfigurationInput
		}
		// PutBucketMetricsConfigurationRequest holds details about calls to the PutBucketMetricsConfigurationRequest method.
		PutBucketMetricsConfigurationRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketMetricsConfigurationInput
		}
		// PutBucketMetricsConfigurationWithContext holds details about calls to the PutBucketMetricsConfigurationWithContext method.
		PutBucketMetricsConfigurationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.PutBucketMetricsConfigurationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutBucketNotification holds details about calls to the PutBucketNotification method.
		PutBucketNotification []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketNotificationInput
		}
		// PutBucketNotificationConfiguration holds details about calls to the PutBucketNotificationConfiguration method.
		PutBucketNotificationConfiguration []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketNotificationConfigurationInput
		}
		// PutBucketNotificationConfigurationRequest holds details about calls to the PutBucketNotificationConfigurationRequest method.
		PutBucketNotificationConfigurationRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketNotificationConfigurationInput
		}
		// PutBucketNotificationConfigurationWithContext holds details about calls to the PutBucketNotificationConfigurationWithContext method.
		PutBucketNotificationConfigurationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.PutBucketNotificationConfigurationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutBucketNotificationRequest holds details about calls to the PutBucketNotificationRequest method.
		PutBucketNotificationRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketNotificationInput
		}
		// PutBucketNotificationWithContext holds details about calls to the PutBucketNotificationWithContext method.
		PutBucketNotificationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.PutBucketNotificationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutBucketPolicy holds details about calls to the PutBucketPolicy method.
		PutBucketPolicy []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketPolicyInput
		}
		// PutBucketPolicyRequest holds details about calls to the PutBucketPolicyRequest method.
		PutBucketPolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketPolicyInput
		}
		// PutBucketPolicyWithContext holds details about calls to the PutBucketPolicyWithContext method.
		PutBucketPolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.PutBucketPolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutBucketReplication holds details about calls to the PutBucketReplication method.
		PutBucketReplication []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketReplicationInput
		}
		// PutBucketReplicationRequest holds details about calls to the PutBucketReplicationRequest method.
		PutBucketReplicationRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketReplicationInput
		}
		// PutBucketReplicationWithContext holds details about calls to the PutBucketReplicationWithContext method.
		PutBucketReplicationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.PutBucketReplicationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutBucketRequestPayment holds details about calls to the PutBucketRequestPayment method.
		PutBucketRequestPayment []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketRequestPaymentInput
		}
		// PutBucketRequestPaymentRequest holds details about calls to the PutBucketRequestPaymentRequest method.
		PutBucketRequestPaymentRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketRequestPaymentInput
		}
		// PutBucketRequestPaymentWithContext holds details about calls to the PutBucketRequestPaymentWithContext method.
		PutBucketRequestPaymentWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.PutBucketRequestPaymentInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutBucketTagging holds details about calls to the PutBucketTagging method.
		PutBucketTagging []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketTaggingInput
		}
		// PutBucketTaggingRequest holds details about calls to the PutBucketTaggingRequest method.
		PutBucketTaggingRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketTaggingInput
		}
		// PutBucketTaggingWithContext holds details about calls to the PutBucketTaggingWithContext method.
		PutBucketTaggingWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.PutBucketTaggingInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutBucketVersioning holds details about calls to the PutBucketVersioning method.
		PutBucketVersioning []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketVersioningInput
		}
		// PutBucketVersioningRequest holds details about calls to the PutBucketVersioningRequest method.
		PutBucketVersioningRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketVersioningInput
		}
		// PutBucketVersioningWithContext holds details about calls to the PutBucketVersioningWithContext method.
		PutBucketVersioningWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.PutBucketVersioningInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutBucketWebsite holds details about calls to the PutBucketWebsite method.
		PutBucketWebsite []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketWebsiteInput
		}
		// PutBucketWebsiteRequest holds details about calls to the PutBucketWebsiteRequest method.
		PutBucketWebsiteRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutBucketWebsiteInput
		}
		// PutBucketWebsiteWithContext holds details about calls to the PutBucketWebsiteWithContext method.
		PutBucketWebsiteWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.PutBucketWebsiteInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutObject holds details about calls to the PutObject method.
		PutObject []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutObjectInput
		}
		// PutObjectAcl holds details about calls to the PutObjectAcl method.
		PutObjectAcl []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutObjectAclInput
		}
		// PutObjectAclRequest holds details about calls to the PutObjectAclRequest method.
		PutObjectAclRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutObjectAclInput
		}
		// PutObjectAclWithContext holds details about calls to the PutObjectAclWithContext method.
		PutObjectAclWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.PutObjectAclInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutObjectLegalHold holds details about calls to the PutObjectLegalHold method.
		PutObjectLegalHold []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutObjectLegalHoldInput
		}
		// PutObjectLegalHoldRequest holds details about calls to the PutObjectLegalHoldRequest method.
		PutObjectLegalHoldRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutObjectLegalHoldInput
		}
		// PutObjectLegalHoldWithContext holds details about calls to the PutObjectLegalHoldWithContext method.
		PutObjectLegalHoldWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.PutObjectLegalHoldInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutObjectLockConfiguration holds details about calls to the PutObjectLockConfiguration method.
		PutObjectLockConfiguration []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutObjectLockConfigurationInput
		}
		// PutObjectLockConfigurationRequest holds details about calls to the PutObjectLockConfigurationRequest method.
		PutObjectLockConfigurationRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutObjectLockConfigurationInput
		}
		// PutObjectLockConfigurationWithContext holds details about calls to the PutObjectLockConfigurationWithContext method.
		PutObjectLockConfigurationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.PutObjectLockConfigurationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutObjectRequest holds details about calls to the PutObjectRequest method.
		PutObjectRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutObjectInput
		}
		// PutObjectRetention holds details about calls to the PutObjectRetention method.
		PutObjectRetention []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutObjectRetentionInput
		}
		// PutObjectRetentionRequest holds details about calls to the PutObjectRetentionRequest method.
		PutObjectRetentionRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutObjectRetentionInput
		}
		// PutObjectRetentionWithContext holds details about calls to the PutObjectRetentionWithContext method.
		PutObjectRetentionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.PutObjectRetentionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutObjectTagging holds details about calls to the PutObjectTagging method.
		PutObjectTagging []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutObjectTaggingInput
		}
		// PutObjectTaggingRequest holds details about calls to the PutObjectTaggingRequest method.
		PutObjectTaggingRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutObjectTaggingInput
		}
		// PutObjectTaggingWithContext holds details about calls to the PutObjectTaggingWithContext method.
		PutObjectTaggingWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.PutObjectTaggingInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutObjectWithContext holds details about calls to the PutObjectWithContext method.
		PutObjectWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.PutObjectInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PutPublicAccessBlock holds details about calls to the PutPublicAccessBlock method.
		PutPublicAccessBlock []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutPublicAccessBlockInput
		}
		// PutPublicAccessBlockRequest holds details about calls to the PutPublicAccessBlockRequest method.
		PutPublicAccessBlockRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.PutPublicAccessBlockInput
		}
		// PutPublicAccessBlockWithContext holds details about calls to the PutPublicAccessBlockWithContext method.
		PutPublicAccessBlockWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.PutPublicAccessBlockInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RestoreObject holds details about calls to the RestoreObject method.
		RestoreObject []struct {
			// In1 is the in1 argument value.
			In1 *s3.RestoreObjectInput
		}
		// RestoreObjectRequest holds details about calls to the RestoreObjectRequest method.
		RestoreObjectRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.RestoreObjectInput
		}
		// RestoreObjectWithContext holds details about calls to the RestoreObjectWithContext method.
		RestoreObjectWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.RestoreObjectInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// SelectObjectContent holds details about calls to the SelectObjectContent method.
		SelectObjectContent []struct {
			// In1 is the in1 argument value.
			In1 *s3.SelectObjectContentInput
		}
		// SelectObjectContentRequest holds details about calls to the SelectObjectContentRequest method.
		SelectObjectContentRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.SelectObjectContentInput
		}
		// SelectObjectContentWithContext holds details about calls to the SelectObjectContentWithContext method.
		SelectObjectContentWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.SelectObjectContentInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UploadPart holds details about calls to the UploadPart method.
		UploadPart []struct {
			// In1 is the in1 argument value.
			In1 *s3.UploadPartInput
		}
		// UploadPartCopy holds details about calls to the UploadPartCopy method.
		UploadPartCopy []struct {
			// In1 is the in1 argument value.
			In1 *s3.UploadPartCopyInput
		}
		// UploadPartCopyRequest holds details about calls to the UploadPartCopyRequest method.
		UploadPartCopyRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.UploadPartCopyInput
		}
		// UploadPartCopyWithContext holds details about calls to the UploadPartCopyWithContext method.
		UploadPartCopyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.UploadPartCopyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UploadPartRequest holds details about calls to the UploadPartRequest method.
		UploadPartRequest []struct {
			// In1 is the in1 argument value.
			In1 *s3.UploadPartInput
		}
		// UploadPartWithContext holds details about calls to the UploadPartWithContext method.
		UploadPartWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.UploadPartInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// WaitUntilBucketExists holds details about calls to the WaitUntilBucketExists method.
		WaitUntilBucketExists []struct {
			// In1 is the in1 argument value.
			In1 *s3.HeadBucketInput
		}
		// WaitUntilBucketExistsWithContext holds details about calls to the WaitUntilBucketExistsWithContext method.
		WaitUntilBucketExistsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.HeadBucketInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilBucketNotExists holds details about calls to the WaitUntilBucketNotExists method.
		WaitUntilBucketNotExists []struct {
			// In1 is the in1 argument value.
			In1 *s3.HeadBucketInput
		}
		// WaitUntilBucketNotExistsWithContext holds details about calls to the WaitUntilBucketNotExistsWithContext method.
		WaitUntilBucketNotExistsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.HeadBucketInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilObjectExists holds details about calls to the WaitUntilObjectExists method.
		WaitUntilObjectExists []struct {
			// In1 is the in1 argument value.
			In1 *s3.HeadObjectInput
		}
		// WaitUntilObjectExistsWithContext holds details about calls to the WaitUntilObjectExistsWithContext method.
		WaitUntilObjectExistsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.HeadObjectInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilObjectNotExists holds details about calls to the WaitUntilObjectNotExists method.
		WaitUntilObjectNotExists []struct {
			// In1 is the in1 argument value.
			In1 *s3.HeadObjectInput
		}
		// WaitUntilObjectNotExistsWithContext holds details about calls to the WaitUntilObjectNotExistsWithContext method.
		WaitUntilObjectNotExistsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *s3.HeadObjectInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
	}
}

// AbortMultipartUpload calls AbortMultipartUploadFunc.
func (mock *s3ClientMock) AbortMultipartUpload(in1 *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error) {
	if mock.AbortMultipartUploadFunc == nil {
		panic("s3ClientMock.AbortMultipartUploadFunc: method is nil but s3Client.AbortMultipartUpload was just called")
	}
	callInfo := struct {
		In1 *s3.AbortMultipartUploadInput
	}{
		In1: in1,
	}
	locks3ClientMockAbortMultipartUpload.Lock()
	mock.calls.AbortMultipartUpload = append(mock.calls.AbortMultipartUpload, callInfo)
	locks3ClientMockAbortMultipartUpload.Unlock()
	return mock.AbortMultipartUploadFunc(in1)
}

// AbortMultipartUploadCalls gets all the calls that were made to AbortMultipartUpload.
// Check the length with:
//     len(mockeds3Client.AbortMultipartUploadCalls())
func (mock *s3ClientMock) AbortMultipartUploadCalls() []struct {
	In1 *s3.AbortMultipartUploadInput
} {
	var calls []struct {
		In1 *s3.AbortMultipartUploadInput
	}
	locks3ClientMockAbortMultipartUpload.RLock()
	calls = mock.calls.AbortMultipartUpload
	locks3ClientMockAbortMultipartUpload.RUnlock()
	return calls
}

// AbortMultipartUploadRequest calls AbortMultipartUploadRequestFunc.
func (mock *s3ClientMock) AbortMultipartUploadRequest(in1 *s3.AbortMultipartUploadInput) (*request.Request, *s3.AbortMultipartUploadOutput) {
	if mock.AbortMultipartUploadRequestFunc == nil {
		panic("s3ClientMock.AbortMultipartUploadRequestFunc: method is nil but s3Client.AbortMultipartUploadRequest was just called")
	}
	callInfo := struct {
		In1 *s3.AbortMultipartUploadInput
	}{
		In1: in1,
	}
	locks3ClientMockAbortMultipartUploadRequest.Lock()
	mock.calls.AbortMultipartUploadRequest = append(mock.calls.AbortMultipartUploadRequest, callInfo)
	locks3ClientMockAbortMultipartUploadRequest.Unlock()
	return mock.AbortMultipartUploadRequestFunc(in1)
}

// AbortMultipartUploadRequestCalls gets all the calls that were made to AbortMultipartUploadRequest.
// Check the length with:
//     len(mockeds3Client.AbortMultipartUploadRequestCalls())
func (mock *s3ClientMock) AbortMultipartUploadRequestCalls() []struct {
	In1 *s3.AbortMultipartUploadInput
} {
	var calls []struct {
		In1 *s3.AbortMultipartUploadInput
	}
	locks3ClientMockAbortMultipartUploadRequest.RLock()
	calls = mock.calls.AbortMultipartUploadRequest
	locks3ClientMockAbortMultipartUploadRequest.RUnlock()
	return calls
}

// AbortMultipartUploadWithContext calls AbortMultipartUploadWithContextFunc.
func (mock *s3ClientMock) AbortMultipartUploadWithContext(in1 context.Context, in2 *s3.AbortMultipartUploadInput, in3 ...request.Option) (*s3.AbortMultipartUploadOutput, error) {
	if mock.AbortMultipartUploadWithContextFunc == nil {
		panic("s3ClientMock.AbortMultipartUploadWithContextFunc: method is nil but s3Client.AbortMultipartUploadWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.AbortMultipartUploadInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockAbortMultipartUploadWithContext.Lock()
	mock.calls.AbortMultipartUploadWithContext = append(mock.calls.AbortMultipartUploadWithContext, callInfo)
	locks3ClientMockAbortMultipartUploadWithContext.Unlock()
	return mock.AbortMultipartUploadWithContextFunc(in1, in2, in3...)
}

// AbortMultipartUploadWithContextCalls gets all the calls that were made to AbortMultipartUploadWithContext.
// Check the length with:
//     len(mockeds3Client.AbortMultipartUploadWithContextCalls())
func (mock *s3ClientMock) AbortMultipartUploadWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.AbortMultipartUploadInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.AbortMultipartUploadInput
		In3 []request.Option
	}
	locks3ClientMockAbortMultipartUploadWithContext.RLock()
	calls = mock.calls.AbortMultipartUploadWithContext
	locks3ClientMockAbortMultipartUploadWithContext.RUnlock()
	return calls
}

// CompleteMultipartUpload calls CompleteMultipartUploadFunc.
func (mock *s3ClientMock) CompleteMultipartUpload(in1 *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error) {
	if mock.CompleteMultipartUploadFunc == nil {
		panic("s3ClientMock.CompleteMultipartUploadFunc: method is nil but s3Client.CompleteMultipartUpload was just called")
	}
	callInfo := struct {
		In1 *s3.CompleteMultipartUploadInput
	}{
		In1: in1,
	}
	locks3ClientMockCompleteMultipartUpload.Lock()
	mock.calls.CompleteMultipartUpload = append(mock.calls.CompleteMultipartUpload, callInfo)
	locks3ClientMockCompleteMultipartUpload.Unlock()
	return mock.CompleteMultipartUploadFunc(in1)
}

// CompleteMultipartUploadCalls gets all the calls that were made to CompleteMultipartUpload.
// Check the length with:
//     len(mockeds3Client.CompleteMultipartUploadCalls())
func (mock *s3ClientMock) CompleteMultipartUploadCalls() []struct {
	In1 *s3.CompleteMultipartUploadInput
} {
	var calls []struct {
		In1 *s3.CompleteMultipartUploadInput
	}
	locks3ClientMockCompleteMultipartUpload.RLock()
	calls = mock.calls.CompleteMultipartUpload
	locks3ClientMockCompleteMultipartUpload.RUnlock()
	return calls
}

// CompleteMultipartUploadRequest calls CompleteMultipartUploadRequestFunc.
func (mock *s3ClientMock) CompleteMultipartUploadRequest(in1 *s3.CompleteMultipartUploadInput) (*request.Request, *s3.CompleteMultipartUploadOutput) {
	if mock.CompleteMultipartUploadRequestFunc == nil {
		panic("s3ClientMock.CompleteMultipartUploadRequestFunc: method is nil but s3Client.CompleteMultipartUploadRequest was just called")
	}
	callInfo := struct {
		In1 *s3.CompleteMultipartUploadInput
	}{
		In1: in1,
	}
	locks3ClientMockCompleteMultipartUploadRequest.Lock()
	mock.calls.CompleteMultipartUploadRequest = append(mock.calls.CompleteMultipartUploadRequest, callInfo)
	locks3ClientMockCompleteMultipartUploadRequest.Unlock()
	return mock.CompleteMultipartUploadRequestFunc(in1)
}

// CompleteMultipartUploadRequestCalls gets all the calls that were made to CompleteMultipartUploadRequest.
// Check the length with:
//     len(mockeds3Client.CompleteMultipartUploadRequestCalls())
func (mock *s3ClientMock) CompleteMultipartUploadRequestCalls() []struct {
	In1 *s3.CompleteMultipartUploadInput
} {
	var calls []struct {
		In1 *s3.CompleteMultipartUploadInput
	}
	locks3ClientMockCompleteMultipartUploadRequest.RLock()
	calls = mock.calls.CompleteMultipartUploadRequest
	locks3ClientMockCompleteMultipartUploadRequest.RUnlock()
	return calls
}

// CompleteMultipartUploadWithContext calls CompleteMultipartUploadWithContextFunc.
func (mock *s3ClientMock) CompleteMultipartUploadWithContext(in1 context.Context, in2 *s3.CompleteMultipartUploadInput, in3 ...request.Option) (*s3.CompleteMultipartUploadOutput, error) {
	if mock.CompleteMultipartUploadWithContextFunc == nil {
		panic("s3ClientMock.CompleteMultipartUploadWithContextFunc: method is nil but s3Client.CompleteMultipartUploadWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.CompleteMultipartUploadInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockCompleteMultipartUploadWithContext.Lock()
	mock.calls.CompleteMultipartUploadWithContext = append(mock.calls.CompleteMultipartUploadWithContext, callInfo)
	locks3ClientMockCompleteMultipartUploadWithContext.Unlock()
	return mock.CompleteMultipartUploadWithContextFunc(in1, in2, in3...)
}

// CompleteMultipartUploadWithContextCalls gets all the calls that were made to CompleteMultipartUploadWithContext.
// Check the length with:
//     len(mockeds3Client.CompleteMultipartUploadWithContextCalls())
func (mock *s3ClientMock) CompleteMultipartUploadWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.CompleteMultipartUploadInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.CompleteMultipartUploadInput
		In3 []request.Option
	}
	locks3ClientMockCompleteMultipartUploadWithContext.RLock()
	calls = mock.calls.CompleteMultipartUploadWithContext
	locks3ClientMockCompleteMultipartUploadWithContext.RUnlock()
	return calls
}

// CopyObject calls CopyObjectFunc.
func (mock *s3ClientMock) CopyObject(in1 *s3.CopyObjectInput) (*s3.CopyObjectOutput, error) {
	if mock.CopyObjectFunc == nil {
		panic("s3ClientMock.CopyObjectFunc: method is nil but s3Client.CopyObject was just called")
	}
	callInfo := struct {
		In1 *s3.CopyObjectInput
	}{
		In1: in1,
	}
	locks3ClientMockCopyObject.Lock()
	mock.calls.CopyObject = append(mock.calls.CopyObject, callInfo)
	locks3ClientMockCopyObject.Unlock()
	return mock.CopyObjectFunc(in1)
}

// CopyObjectCalls gets all the calls that were made to CopyObject.
// Check the length with:
//     len(mockeds3Client.CopyObjectCalls())
func (mock *s3ClientMock) CopyObjectCalls() []struct {
	In1 *s3.CopyObjectInput
} {
	var calls []struct {
		In1 *s3.CopyObjectInput
	}
	locks3ClientMockCopyObject.RLock()
	calls = mock.calls.CopyObject
	locks3ClientMockCopyObject.RUnlock()
	return calls
}

// CopyObjectRequest calls CopyObjectRequestFunc.
func (mock *s3ClientMock) CopyObjectRequest(in1 *s3.CopyObjectInput) (*request.Request, *s3.CopyObjectOutput) {
	if mock.CopyObjectRequestFunc == nil {
		panic("s3ClientMock.CopyObjectRequestFunc: method is nil but s3Client.CopyObjectRequest was just called")
	}
	callInfo := struct {
		In1 *s3.CopyObjectInput
	}{
		In1: in1,
	}
	locks3ClientMockCopyObjectRequest.Lock()
	mock.calls.CopyObjectRequest = append(mock.calls.CopyObjectRequest, callInfo)
	locks3ClientMockCopyObjectRequest.Unlock()
	return mock.CopyObjectRequestFunc(in1)
}

// CopyObjectRequestCalls gets all the calls that were made to CopyObjectRequest.
// Check the length with:
//     len(mockeds3Client.CopyObjectRequestCalls())
func (mock *s3ClientMock) CopyObjectRequestCalls() []struct {
	In1 *s3.CopyObjectInput
} {
	var calls []struct {
		In1 *s3.CopyObjectInput
	}
	locks3ClientMockCopyObjectRequest.RLock()
	calls = mock.calls.CopyObjectRequest
	locks3ClientMockCopyObjectRequest.RUnlock()
	return calls
}

// CopyObjectWithContext calls CopyObjectWithContextFunc.
func (mock *s3ClientMock) CopyObjectWithContext(in1 context.Context, in2 *s3.CopyObjectInput, in3 ...request.Option) (*s3.CopyObjectOutput, error) {
	if mock.CopyObjectWithContextFunc == nil {
		panic("s3ClientMock.CopyObjectWithContextFunc: method is nil but s3Client.CopyObjectWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.CopyObjectInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockCopyObjectWithContext.Lock()
	mock.calls.CopyObjectWithContext = append(mock.calls.CopyObjectWithContext, callInfo)
	locks3ClientMockCopyObjectWithContext.Unlock()
	return mock.CopyObjectWithContextFunc(in1, in2, in3...)
}

// CopyObjectWithContextCalls gets all the calls that were made to CopyObjectWithContext.
// Check the length with:
//     len(mockeds3Client.CopyObjectWithContextCalls())
func (mock *s3ClientMock) CopyObjectWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.CopyObjectInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.CopyObjectInput
		In3 []request.Option
	}
	locks3ClientMockCopyObjectWithContext.RLock()
	calls = mock.calls.CopyObjectWithContext
	locks3ClientMockCopyObjectWithContext.RUnlock()
	return calls
}

// CreateBucket calls CreateBucketFunc.
func (mock *s3ClientMock) CreateBucket(in1 *s3.CreateBucketInput) (*s3.CreateBucketOutput, error) {
	if mock.CreateBucketFunc == nil {
		panic("s3ClientMock.CreateBucketFunc: method is nil but s3Client.CreateBucket was just called")
	}
	callInfo := struct {
		In1 *s3.CreateBucketInput
	}{
		In1: in1,
	}
	locks3ClientMockCreateBucket.Lock()
	mock.calls.CreateBucket = append(mock.calls.CreateBucket, callInfo)
	locks3ClientMockCreateBucket.Unlock()
	return mock.CreateBucketFunc(in1)
}

// CreateBucketCalls gets all the calls that were made to CreateBucket.
// Check the length with:
//     len(mockeds3Client.CreateBucketCalls())
func (mock *s3ClientMock) CreateBucketCalls() []struct {
	In1 *s3.CreateBucketInput
} {
	var calls []struct {
		In1 *s3.CreateBucketInput
	}
	locks3ClientMockCreateBucket.RLock()
	calls = mock.calls.CreateBucket
	locks3ClientMockCreateBucket.RUnlock()
	return calls
}

// CreateBucketRequest calls CreateBucketRequestFunc.
func (mock *s3ClientMock) CreateBucketRequest(in1 *s3.CreateBucketInput) (*request.Request, *s3.CreateBucketOutput) {
	if mock.CreateBucketRequestFunc == nil {
		panic("s3ClientMock.CreateBucketRequestFunc: method is nil but s3Client.CreateBucketRequest was just called")
	}
	callInfo := struct {
		In1 *s3.CreateBucketInput
	}{
		In1: in1,
	}
	locks3ClientMockCreateBucketRequest.Lock()
	mock.calls.CreateBucketRequest = append(mock.calls.CreateBucketRequest, callInfo)
	locks3ClientMockCreateBucketRequest.Unlock()
	return mock.CreateBucketRequestFunc(in1)
}

// CreateBucketRequestCalls gets all the calls that were made to CreateBucketRequest.
// Check the length with:
//     len(mockeds3Client.CreateBucketRequestCalls())
func (mock *s3ClientMock) CreateBucketRequestCalls() []struct {
	In1 *s3.CreateBucketInput
} {
	var calls []struct {
		In1 *s3.CreateBucketInput
	}
	locks3ClientMockCreateBucketRequest.RLock()
	calls = mock.calls.CreateBucketRequest
	locks3ClientMockCreateBucketRequest.RUnlock()
	return calls
}

// CreateBucketWithContext calls CreateBucketWithContextFunc.
func (mock *s3ClientMock) CreateBucketWithContext(in1 context.Context, in2 *s3.CreateBucketInput, in3 ...request.Option) (*s3.CreateBucketOutput, error) {
	if mock.CreateBucketWithContextFunc == nil {
		panic("s3ClientMock.CreateBucketWithContextFunc: method is nil but s3Client.CreateBucketWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.CreateBucketInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockCreateBucketWithContext.Lock()
	mock.calls.CreateBucketWithContext = append(mock.calls.CreateBucketWithContext, callInfo)
	locks3ClientMockCreateBucketWithContext.Unlock()
	return mock.CreateBucketWithContextFunc(in1, in2, in3...)
}

// CreateBucketWithContextCalls gets all the calls that were made to CreateBucketWithContext.
// Check the length with:
//     len(mockeds3Client.CreateBucketWithContextCalls())
func (mock *s3ClientMock) CreateBucketWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.CreateBucketInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.CreateBucketInput
		In3 []request.Option
	}
	locks3ClientMockCreateBucketWithContext.RLock()
	calls = mock.calls.CreateBucketWithContext
	locks3ClientMockCreateBucketWithContext.RUnlock()
	return calls
}

// CreateMultipartUpload calls CreateMultipartUploadFunc.
func (mock *s3ClientMock) CreateMultipartUpload(in1 *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error) {
	if mock.CreateMultipartUploadFunc == nil {
		panic("s3ClientMock.CreateMultipartUploadFunc: method is nil but s3Client.CreateMultipartUpload was just called")
	}
	callInfo := struct {
		In1 *s3.CreateMultipartUploadInput
	}{
		In1: in1,
	}
	locks3ClientMockCreateMultipartUpload.Lock()
	mock.calls.CreateMultipartUpload = append(mock.calls.CreateMultipartUpload, callInfo)
	locks3ClientMockCreateMultipartUpload.Unlock()
	return mock.CreateMultipartUploadFunc(in1)
}

// CreateMultipartUploadCalls gets all the calls that were made to CreateMultipartUpload.
// Check the length with:
//     len(mockeds3Client.CreateMultipartUploadCalls())
func (mock *s3ClientMock) CreateMultipartUploadCalls() []struct {
	In1 *s3.CreateMultipartUploadInput
} {
	var calls []struct {
		In1 *s3.CreateMultipartUploadInput
	}
	locks3ClientMockCreateMultipartUpload.RLock()
	calls = mock.calls.CreateMultipartUpload
	locks3ClientMockCreateMultipartUpload.RUnlock()
	return calls
}

// CreateMultipartUploadRequest calls CreateMultipartUploadRequestFunc.
func (mock *s3ClientMock) CreateMultipartUploadRequest(in1 *s3.CreateMultipartUploadInput) (*request.Request, *s3.CreateMultipartUploadOutput) {
	if mock.CreateMultipartUploadRequestFunc == nil {
		panic("s3ClientMock.CreateMultipartUploadRequestFunc: method is nil but s3Client.CreateMultipartUploadRequest was just called")
	}
	callInfo := struct {
		In1 *s3.CreateMultipartUploadInput
	}{
		In1: in1,
	}
	locks3ClientMockCreateMultipartUploadRequest.Lock()
	mock.calls.CreateMultipartUploadRequest = append(mock.calls.CreateMultipartUploadRequest, callInfo)
	locks3ClientMockCreateMultipartUploadRequest.Unlock()
	return mock.CreateMultipartUploadRequestFunc(in1)
}

// CreateMultipartUploadRequestCalls gets all the calls that were made to CreateMultipartUploadRequest.
// Check the length with:
//     len(mockeds3Client.CreateMultipartUploadRequestCalls())
func (mock *s3ClientMock) CreateMultipartUploadRequestCalls() []struct {
	In1 *s3.CreateMultipartUploadInput
} {
	var calls []struct {
		In1 *s3.CreateMultipartUploadInput
	}
	locks3ClientMockCreateMultipartUploadRequest.RLock()
	calls = mock.calls.CreateMultipartUploadRequest
	locks3ClientMockCreateMultipartUploadRequest.RUnlock()
	return calls
}

// CreateMultipartUploadWithContext calls CreateMultipartUploadWithContextFunc.
func (mock *s3ClientMock) CreateMultipartUploadWithContext(in1 context.Context, in2 *s3.CreateMultipartUploadInput, in3 ...request.Option) (*s3.CreateMultipartUploadOutput, error) {
	if mock.CreateMultipartUploadWithContextFunc == nil {
		panic("s3ClientMock.CreateMultipartUploadWithContextFunc: method is nil but s3Client.CreateMultipartUploadWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.CreateMultipartUploadInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockCreateMultipartUploadWithContext.Lock()
	mock.calls.CreateMultipartUploadWithContext = append(mock.calls.CreateMultipartUploadWithContext, callInfo)
	locks3ClientMockCreateMultipartUploadWithContext.Unlock()
	return mock.CreateMultipartUploadWithContextFunc(in1, in2, in3...)
}

// CreateMultipartUploadWithContextCalls gets all the calls that were made to CreateMultipartUploadWithContext.
// Check the length with:
//     len(mockeds3Client.CreateMultipartUploadWithContextCalls())
func (mock *s3ClientMock) CreateMultipartUploadWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.CreateMultipartUploadInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.CreateMultipartUploadInput
		In3 []request.Option
	}
	locks3ClientMockCreateMultipartUploadWithContext.RLock()
	calls = mock.calls.CreateMultipartUploadWithContext
	locks3ClientMockCreateMultipartUploadWithContext.RUnlock()
	return calls
}

// DeleteBucket calls DeleteBucketFunc.
func (mock *s3ClientMock) DeleteBucket(in1 *s3.DeleteBucketInput) (*s3.DeleteBucketOutput, error) {
	if mock.DeleteBucketFunc == nil {
		panic("s3ClientMock.DeleteBucketFunc: method is nil but s3Client.DeleteBucket was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteBucketInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteBucket.Lock()
	mock.calls.DeleteBucket = append(mock.calls.DeleteBucket, callInfo)
	locks3ClientMockDeleteBucket.Unlock()
	return mock.DeleteBucketFunc(in1)
}

// DeleteBucketCalls gets all the calls that were made to DeleteBucket.
// Check the length with:
//     len(mockeds3Client.DeleteBucketCalls())
func (mock *s3ClientMock) DeleteBucketCalls() []struct {
	In1 *s3.DeleteBucketInput
} {
	var calls []struct {
		In1 *s3.DeleteBucketInput
	}
	locks3ClientMockDeleteBucket.RLock()
	calls = mock.calls.DeleteBucket
	locks3ClientMockDeleteBucket.RUnlock()
	return calls
}

// DeleteBucketAnalyticsConfiguration calls DeleteBucketAnalyticsConfigurationFunc.
func (mock *s3ClientMock) DeleteBucketAnalyticsConfiguration(in1 *s3.DeleteBucketAnalyticsConfigurationInput) (*s3.DeleteBucketAnalyticsConfigurationOutput, error) {
	if mock.DeleteBucketAnalyticsConfigurationFunc == nil {
		panic("s3ClientMock.DeleteBucketAnalyticsConfigurationFunc: method is nil but s3Client.DeleteBucketAnalyticsConfiguration was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteBucketAnalyticsConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteBucketAnalyticsConfiguration.Lock()
	mock.calls.DeleteBucketAnalyticsConfiguration = append(mock.calls.DeleteBucketAnalyticsConfiguration, callInfo)
	locks3ClientMockDeleteBucketAnalyticsConfiguration.Unlock()
	return mock.DeleteBucketAnalyticsConfigurationFunc(in1)
}

// DeleteBucketAnalyticsConfigurationCalls gets all the calls that were made to DeleteBucketAnalyticsConfiguration.
// Check the length with:
//     len(mockeds3Client.DeleteBucketAnalyticsConfigurationCalls())
func (mock *s3ClientMock) DeleteBucketAnalyticsConfigurationCalls() []struct {
	In1 *s3.DeleteBucketAnalyticsConfigurationInput
} {
	var calls []struct {
		In1 *s3.DeleteBucketAnalyticsConfigurationInput
	}
	locks3ClientMockDeleteBucketAnalyticsConfiguration.RLock()
	calls = mock.calls.DeleteBucketAnalyticsConfiguration
	locks3ClientMockDeleteBucketAnalyticsConfiguration.RUnlock()
	return calls
}

// DeleteBucketAnalyticsConfigurationRequest calls DeleteBucketAnalyticsConfigurationRequestFunc.
func (mock *s3ClientMock) DeleteBucketAnalyticsConfigurationRequest(in1 *s3.DeleteBucketAnalyticsConfigurationInput) (*request.Request, *s3.DeleteBucketAnalyticsConfigurationOutput) {
	if mock.DeleteBucketAnalyticsConfigurationRequestFunc == nil {
		panic("s3ClientMock.DeleteBucketAnalyticsConfigurationRequestFunc: method is nil but s3Client.DeleteBucketAnalyticsConfigurationRequest was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteBucketAnalyticsConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteBucketAnalyticsConfigurationRequest.Lock()
	mock.calls.DeleteBucketAnalyticsConfigurationRequest = append(mock.calls.DeleteBucketAnalyticsConfigurationRequest, callInfo)
	locks3ClientMockDeleteBucketAnalyticsConfigurationRequest.Unlock()
	return mock.DeleteBucketAnalyticsConfigurationRequestFunc(in1)
}

// DeleteBucketAnalyticsConfigurationRequestCalls gets all the calls that were made to DeleteBucketAnalyticsConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.DeleteBucketAnalyticsConfigurationRequestCalls())
func (mock *s3ClientMock) DeleteBucketAnalyticsConfigurationRequestCalls() []struct {
	In1 *s3.DeleteBucketAnalyticsConfigurationInput
} {
	var calls []struct {
		In1 *s3.DeleteBucketAnalyticsConfigurationInput
	}
	locks3ClientMockDeleteBucketAnalyticsConfigurationRequest.RLock()
	calls = mock.calls.DeleteBucketAnalyticsConfigurationRequest
	locks3ClientMockDeleteBucketAnalyticsConfigurationRequest.RUnlock()
	return calls
}

// DeleteBucketAnalyticsConfigurationWithContext calls DeleteBucketAnalyticsConfigurationWithContextFunc.
func (mock *s3ClientMock) DeleteBucketAnalyticsConfigurationWithContext(in1 context.Context, in2 *s3.DeleteBucketAnalyticsConfigurationInput, in3 ...request.Option) (*s3.DeleteBucketAnalyticsConfigurationOutput, error) {
	if mock.DeleteBucketAnalyticsConfigurationWithContextFunc == nil {
		panic("s3ClientMock.DeleteBucketAnalyticsConfigurationWithContextFunc: method is nil but s3Client.DeleteBucketAnalyticsConfigurationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.DeleteBucketAnalyticsConfigurationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockDeleteBucketAnalyticsConfigurationWithContext.Lock()
	mock.calls.DeleteBucketAnalyticsConfigurationWithContext = append(mock.calls.DeleteBucketAnalyticsConfigurationWithContext, callInfo)
	locks3ClientMockDeleteBucketAnalyticsConfigurationWithContext.Unlock()
	return mock.DeleteBucketAnalyticsConfigurationWithContextFunc(in1, in2, in3...)
}

// DeleteBucketAnalyticsConfigurationWithContextCalls gets all the calls that were made to DeleteBucketAnalyticsConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteBucketAnalyticsConfigurationWithContextCalls())
func (mock *s3ClientMock) DeleteBucketAnalyticsConfigurationWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.DeleteBucketAnalyticsConfigurationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.DeleteBucketAnalyticsConfigurationInput
		In3 []request.Option
	}
	locks3ClientMockDeleteBucketAnalyticsConfigurationWithContext.RLock()
	calls = mock.calls.DeleteBucketAnalyticsConfigurationWithContext
	locks3ClientMockDeleteBucketAnalyticsConfigurationWithContext.RUnlock()
	return calls
}

// DeleteBucketCors calls DeleteBucketCorsFunc.
func (mock *s3ClientMock) DeleteBucketCors(in1 *s3.DeleteBucketCorsInput) (*s3.DeleteBucketCorsOutput, error) {
	if mock.DeleteBucketCorsFunc == nil {
		panic("s3ClientMock.DeleteBucketCorsFunc: method is nil but s3Client.DeleteBucketCors was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteBucketCorsInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteBucketCors.Lock()
	mock.calls.DeleteBucketCors = append(mock.calls.DeleteBucketCors, callInfo)
	locks3ClientMockDeleteBucketCors.Unlock()
	return mock.DeleteBucketCorsFunc(in1)
}

// DeleteBucketCorsCalls gets all the calls that were made to DeleteBucketCors.
// Check the length with:
//     len(mockeds3Client.DeleteBucketCorsCalls())
func (mock *s3ClientMock) DeleteBucketCorsCalls() []struct {
	In1 *s3.DeleteBucketCorsInput
} {
	var calls []struct {
		In1 *s3.DeleteBucketCorsInput
	}
	locks3ClientMockDeleteBucketCors.RLock()
	calls = mock.calls.DeleteBucketCors
	locks3ClientMockDeleteBucketCors.RUnlock()
	return calls
}

// DeleteBucketCorsRequest calls DeleteBucketCorsRequestFunc.
func (mock *s3ClientMock) DeleteBucketCorsRequest(in1 *s3.DeleteBucketCorsInput) (*request.Request, *s3.DeleteBucketCorsOutput) {
	if mock.DeleteBucketCorsRequestFunc == nil {
		panic("s3ClientMock.DeleteBucketCorsRequestFunc: method is nil but s3Client.DeleteBucketCorsRequest was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteBucketCorsInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteBucketCorsRequest.Lock()
	mock.calls.DeleteBucketCorsRequest = append(mock.calls.DeleteBucketCorsRequest, callInfo)
	locks3ClientMockDeleteBucketCorsRequest.Unlock()
	return mock.DeleteBucketCorsRequestFunc(in1)
}

// DeleteBucketCorsRequestCalls gets all the calls that were made to DeleteBucketCorsRequest.
// Check the length with:
//     len(mockeds3Client.DeleteBucketCorsRequestCalls())
func (mock *s3ClientMock) DeleteBucketCorsRequestCalls() []struct {
	In1 *s3.DeleteBucketCorsInput
} {
	var calls []struct {
		In1 *s3.DeleteBucketCorsInput
	}
	locks3ClientMockDeleteBucketCorsRequest.RLock()
	calls = mock.calls.DeleteBucketCorsRequest
	locks3ClientMockDeleteBucketCorsRequest.RUnlock()
	return calls
}

// DeleteBucketCorsWithContext calls DeleteBucketCorsWithContextFunc.
func (mock *s3ClientMock) DeleteBucketCorsWithContext(in1 context.Context, in2 *s3.DeleteBucketCorsInput, in3 ...request.Option) (*s3.DeleteBucketCorsOutput, error) {
	if mock.DeleteBucketCorsWithContextFunc == nil {
		panic("s3ClientMock.DeleteBucketCorsWithContextFunc: method is nil but s3Client.DeleteBucketCorsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.DeleteBucketCorsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockDeleteBucketCorsWithContext.Lock()
	mock.calls.DeleteBucketCorsWithContext = append(mock.calls.DeleteBucketCorsWithContext, callInfo)
	locks3ClientMockDeleteBucketCorsWithContext.Unlock()
	return mock.DeleteBucketCorsWithContextFunc(in1, in2, in3...)
}

// DeleteBucketCorsWithContextCalls gets all the calls that were made to DeleteBucketCorsWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteBucketCorsWithContextCalls())
func (mock *s3ClientMock) DeleteBucketCorsWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.DeleteBucketCorsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.DeleteBucketCorsInput
		In3 []request.Option
	}
	locks3ClientMockDeleteBucketCorsWithContext.RLock()
	calls = mock.calls.DeleteBucketCorsWithContext
	locks3ClientMockDeleteBucketCorsWithContext.RUnlock()
	return calls
}

// DeleteBucketEncryption calls DeleteBucketEncryptionFunc.
func (mock *s3ClientMock) DeleteBucketEncryption(in1 *s3.DeleteBucketEncryptionInput) (*s3.DeleteBucketEncryptionOutput, error) {
	if mock.DeleteBucketEncryptionFunc == nil {
		panic("s3ClientMock.DeleteBucketEncryptionFunc: method is nil but s3Client.DeleteBucketEncryption was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteBucketEncryptionInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteBucketEncryption.Lock()
	mock.calls.DeleteBucketEncryption = append(mock.calls.DeleteBucketEncryption, callInfo)
	locks3ClientMockDeleteBucketEncryption.Unlock()
	return mock.DeleteBucketEncryptionFunc(in1)
}

// DeleteBucketEncryptionCalls gets all the calls that were made to DeleteBucketEncryption.
// Check the length with:
//     len(mockeds3Client.DeleteBucketEncryptionCalls())
func (mock *s3ClientMock) DeleteBucketEncryptionCalls() []struct {
	In1 *s3.DeleteBucketEncryptionInput
} {
	var calls []struct {
		In1 *s3.DeleteBucketEncryptionInput
	}
	locks3ClientMockDeleteBucketEncryption.RLock()
	calls = mock.calls.DeleteBucketEncryption
	locks3ClientMockDeleteBucketEncryption.RUnlock()
	return calls
}

// DeleteBucketEncryptionRequest calls DeleteBucketEncryptionRequestFunc.
func (mock *s3ClientMock) DeleteBucketEncryptionRequest(in1 *s3.DeleteBucketEncryptionInput) (*request.Request, *s3.DeleteBucketEncryptionOutput) {
	if mock.DeleteBucketEncryptionRequestFunc == nil {
		panic("s3ClientMock.DeleteBucketEncryptionRequestFunc: method is nil but s3Client.DeleteBucketEncryptionRequest was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteBucketEncryptionInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteBucketEncryptionRequest.Lock()
	mock.calls.DeleteBucketEncryptionRequest = append(mock.calls.DeleteBucketEncryptionRequest, callInfo)
	locks3ClientMockDeleteBucketEncryptionRequest.Unlock()
	return mock.DeleteBucketEncryptionRequestFunc(in1)
}

// DeleteBucketEncryptionRequestCalls gets all the calls that were made to DeleteBucketEncryptionRequest.
// Check the length with:
//     len(mockeds3Client.DeleteBucketEncryptionRequestCalls())
func (mock *s3ClientMock) DeleteBucketEncryptionRequestCalls() []struct {
	In1 *s3.DeleteBucketEncryptionInput
} {
	var calls []struct {
		In1 *s3.DeleteBucketEncryptionInput
	}
	locks3ClientMockDeleteBucketEncryptionRequest.RLock()
	calls = mock.calls.DeleteBucketEncryptionRequest
	locks3ClientMockDeleteBucketEncryptionRequest.RUnlock()
	return calls
}

// DeleteBucketEncryptionWithContext calls DeleteBucketEncryptionWithContextFunc.
func (mock *s3ClientMock) DeleteBucketEncryptionWithContext(in1 context.Context, in2 *s3.DeleteBucketEncryptionInput, in3 ...request.Option) (*s3.DeleteBucketEncryptionOutput, error) {
	if mock.DeleteBucketEncryptionWithContextFunc == nil {
		panic("s3ClientMock.DeleteBucketEncryptionWithContextFunc: method is nil but s3Client.DeleteBucketEncryptionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.DeleteBucketEncryptionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockDeleteBucketEncryptionWithContext.Lock()
	mock.calls.DeleteBucketEncryptionWithContext = append(mock.calls.DeleteBucketEncryptionWithContext, callInfo)
	locks3ClientMockDeleteBucketEncryptionWithContext.Unlock()
	return mock.DeleteBucketEncryptionWithContextFunc(in1, in2, in3...)
}

// DeleteBucketEncryptionWithContextCalls gets all the calls that were made to DeleteBucketEncryptionWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteBucketEncryptionWithContextCalls())
func (mock *s3ClientMock) DeleteBucketEncryptionWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.DeleteBucketEncryptionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.DeleteBucketEncryptionInput
		In3 []request.Option
	}
	locks3ClientMockDeleteBucketEncryptionWithContext.RLock()
	calls = mock.calls.DeleteBucketEncryptionWithContext
	locks3ClientMockDeleteBucketEncryptionWithContext.RUnlock()
	return calls
}

// DeleteBucketInventoryConfiguration calls DeleteBucketInventoryConfigurationFunc.
func (mock *s3ClientMock) DeleteBucketInventoryConfiguration(in1 *s3.DeleteBucketInventoryConfigurationInput) (*s3.DeleteBucketInventoryConfigurationOutput, error) {
	if mock.DeleteBucketInventoryConfigurationFunc == nil {
		panic("s3ClientMock.DeleteBucketInventoryConfigurationFunc: method is nil but s3Client.DeleteBucketInventoryConfiguration was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteBucketInventoryConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteBucketInventoryConfiguration.Lock()
	mock.calls.DeleteBucketInventoryConfiguration = append(mock.calls.DeleteBucketInventoryConfiguration, callInfo)
	locks3ClientMockDeleteBucketInventoryConfiguration.Unlock()
	return mock.DeleteBucketInventoryConfigurationFunc(in1)
}

// DeleteBucketInventoryConfigurationCalls gets all the calls that were made to DeleteBucketInventoryConfiguration.
// Check the length with:
//     len(mockeds3Client.DeleteBucketInventoryConfigurationCalls())
func (mock *s3ClientMock) DeleteBucketInventoryConfigurationCalls() []struct {
	In1 *s3.DeleteBucketInventoryConfigurationInput
} {
	var calls []struct {
		In1 *s3.DeleteBucketInventoryConfigurationInput
	}
	locks3ClientMockDeleteBucketInventoryConfiguration.RLock()
	calls = mock.calls.DeleteBucketInventoryConfiguration
	locks3ClientMockDeleteBucketInventoryConfiguration.RUnlock()
	return calls
}

// DeleteBucketInventoryConfigurationRequest calls DeleteBucketInventoryConfigurationRequestFunc.
func (mock *s3ClientMock) DeleteBucketInventoryConfigurationRequest(in1 *s3.DeleteBucketInventoryConfigurationInput) (*request.Request, *s3.DeleteBucketInventoryConfigurationOutput) {
	if mock.DeleteBucketInventoryConfigurationRequestFunc == nil {
		panic("s3ClientMock.DeleteBucketInventoryConfigurationRequestFunc: method is nil but s3Client.DeleteBucketInventoryConfigurationRequest was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteBucketInventoryConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteBucketInventoryConfigurationRequest.Lock()
	mock.calls.DeleteBucketInventoryConfigurationRequest = append(mock.calls.DeleteBucketInventoryConfigurationRequest, callInfo)
	locks3ClientMockDeleteBucketInventoryConfigurationRequest.Unlock()
	return mock.DeleteBucketInventoryConfigurationRequestFunc(in1)
}

// DeleteBucketInventoryConfigurationRequestCalls gets all the calls that were made to DeleteBucketInventoryConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.DeleteBucketInventoryConfigurationRequestCalls())
func (mock *s3ClientMock) DeleteBucketInventoryConfigurationRequestCalls() []struct {
	In1 *s3.DeleteBucketInventoryConfigurationInput
} {
	var calls []struct {
		In1 *s3.DeleteBucketInventoryConfigurationInput
	}
	locks3ClientMockDeleteBucketInventoryConfigurationRequest.RLock()
	calls = mock.calls.DeleteBucketInventoryConfigurationRequest
	locks3ClientMockDeleteBucketInventoryConfigurationRequest.RUnlock()
	return calls
}

// DeleteBucketInventoryConfigurationWithContext calls DeleteBucketInventoryConfigurationWithContextFunc.
func (mock *s3ClientMock) DeleteBucketInventoryConfigurationWithContext(in1 context.Context, in2 *s3.DeleteBucketInventoryConfigurationInput, in3 ...request.Option) (*s3.DeleteBucketInventoryConfigurationOutput, error) {
	if mock.DeleteBucketInventoryConfigurationWithContextFunc == nil {
		panic("s3ClientMock.DeleteBucketInventoryConfigurationWithContextFunc: method is nil but s3Client.DeleteBucketInventoryConfigurationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.DeleteBucketInventoryConfigurationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockDeleteBucketInventoryConfigurationWithContext.Lock()
	mock.calls.DeleteBucketInventoryConfigurationWithContext = append(mock.calls.DeleteBucketInventoryConfigurationWithContext, callInfo)
	locks3ClientMockDeleteBucketInventoryConfigurationWithContext.Unlock()
	return mock.DeleteBucketInventoryConfigurationWithContextFunc(in1, in2, in3...)
}

// DeleteBucketInventoryConfigurationWithContextCalls gets all the calls that were made to DeleteBucketInventoryConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteBucketInventoryConfigurationWithContextCalls())
func (mock *s3ClientMock) DeleteBucketInventoryConfigurationWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.DeleteBucketInventoryConfigurationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.DeleteBucketInventoryConfigurationInput
		In3 []request.Option
	}
	locks3ClientMockDeleteBucketInventoryConfigurationWithContext.RLock()
	calls = mock.calls.DeleteBucketInventoryConfigurationWithContext
	locks3ClientMockDeleteBucketInventoryConfigurationWithContext.RUnlock()
	return calls
}

// DeleteBucketLifecycle calls DeleteBucketLifecycleFunc.
func (mock *s3ClientMock) DeleteBucketLifecycle(in1 *s3.DeleteBucketLifecycleInput) (*s3.DeleteBucketLifecycleOutput, error) {
	if mock.DeleteBucketLifecycleFunc == nil {
		panic("s3ClientMock.DeleteBucketLifecycleFunc: method is nil but s3Client.DeleteBucketLifecycle was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteBucketLifecycleInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteBucketLifecycle.Lock()
	mock.calls.DeleteBucketLifecycle = append(mock.calls.DeleteBucketLifecycle, callInfo)
	locks3ClientMockDeleteBucketLifecycle.Unlock()
	return mock.DeleteBucketLifecycleFunc(in1)
}

// DeleteBucketLifecycleCalls gets all the calls that were made to DeleteBucketLifecycle.
// Check the length with:
//     len(mockeds3Client.DeleteBucketLifecycleCalls())
func (mock *s3ClientMock) DeleteBucketLifecycleCalls() []struct {
	In1 *s3.DeleteBucketLifecycleInput
} {
	var calls []struct {
		In1 *s3.DeleteBucketLifecycleInput
	}
	locks3ClientMockDeleteBucketLifecycle.RLock()
	calls = mock.calls.DeleteBucketLifecycle
	locks3ClientMockDeleteBucketLifecycle.RUnlock()
	return calls
}

// DeleteBucketLifecycleRequest calls DeleteBucketLifecycleRequestFunc.
func (mock *s3ClientMock) DeleteBucketLifecycleRequest(in1 *s3.DeleteBucketLifecycleInput) (*request.Request, *s3.DeleteBucketLifecycleOutput) {
	if mock.DeleteBucketLifecycleRequestFunc == nil {
		panic("s3ClientMock.DeleteBucketLifecycleRequestFunc: method is nil but s3Client.DeleteBucketLifecycleRequest was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteBucketLifecycleInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteBucketLifecycleRequest.Lock()
	mock.calls.DeleteBucketLifecycleRequest = append(mock.calls.DeleteBucketLifecycleRequest, callInfo)
	locks3ClientMockDeleteBucketLifecycleRequest.Unlock()
	return mock.DeleteBucketLifecycleRequestFunc(in1)
}

// DeleteBucketLifecycleRequestCalls gets all the calls that were made to DeleteBucketLifecycleRequest.
// Check the length with:
//     len(mockeds3Client.DeleteBucketLifecycleRequestCalls())
func (mock *s3ClientMock) DeleteBucketLifecycleRequestCalls() []struct {
	In1 *s3.DeleteBucketLifecycleInput
} {
	var calls []struct {
		In1 *s3.DeleteBucketLifecycleInput
	}
	locks3ClientMockDeleteBucketLifecycleRequest.RLock()
	calls = mock.calls.DeleteBucketLifecycleRequest
	locks3ClientMockDeleteBucketLifecycleRequest.RUnlock()
	return calls
}

// DeleteBucketLifecycleWithContext calls DeleteBucketLifecycleWithContextFunc.
func (mock *s3ClientMock) DeleteBucketLifecycleWithContext(in1 context.Context, in2 *s3.DeleteBucketLifecycleInput, in3 ...request.Option) (*s3.DeleteBucketLifecycleOutput, error) {
	if mock.DeleteBucketLifecycleWithContextFunc == nil {
		panic("s3ClientMock.DeleteBucketLifecycleWithContextFunc: method is nil but s3Client.DeleteBucketLifecycleWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.DeleteBucketLifecycleInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockDeleteBucketLifecycleWithContext.Lock()
	mock.calls.DeleteBucketLifecycleWithContext = append(mock.calls.DeleteBucketLifecycleWithContext, callInfo)
	locks3ClientMockDeleteBucketLifecycleWithContext.Unlock()
	return mock.DeleteBucketLifecycleWithContextFunc(in1, in2, in3...)
}

// DeleteBucketLifecycleWithContextCalls gets all the calls that were made to DeleteBucketLifecycleWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteBucketLifecycleWithContextCalls())
func (mock *s3ClientMock) DeleteBucketLifecycleWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.DeleteBucketLifecycleInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.DeleteBucketLifecycleInput
		In3 []request.Option
	}
	locks3ClientMockDeleteBucketLifecycleWithContext.RLock()
	calls = mock.calls.DeleteBucketLifecycleWithContext
	locks3ClientMockDeleteBucketLifecycleWithContext.RUnlock()
	return calls
}

// DeleteBucketMetricsConfiguration calls DeleteBucketMetricsConfigurationFunc.
func (mock *s3ClientMock) DeleteBucketMetricsConfiguration(in1 *s3.DeleteBucketMetricsConfigurationInput) (*s3.DeleteBucketMetricsConfigurationOutput, error) {
	if mock.DeleteBucketMetricsConfigurationFunc == nil {
		panic("s3ClientMock.DeleteBucketMetricsConfigurationFunc: method is nil but s3Client.DeleteBucketMetricsConfiguration was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteBucketMetricsConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteBucketMetricsConfiguration.Lock()
	mock.calls.DeleteBucketMetricsConfiguration = append(mock.calls.DeleteBucketMetricsConfiguration, callInfo)
	locks3ClientMockDeleteBucketMetricsConfiguration.Unlock()
	return mock.DeleteBucketMetricsConfigurationFunc(in1)
}

// DeleteBucketMetricsConfigurationCalls gets all the calls that were made to DeleteBucketMetricsConfiguration.
// Check the length with:
//     len(mockeds3Client.DeleteBucketMetricsConfigurationCalls())
func (mock *s3ClientMock) DeleteBucketMetricsConfigurationCalls() []struct {
	In1 *s3.DeleteBucketMetricsConfigurationInput
} {
	var calls []struct {
		In1 *s3.DeleteBucketMetricsConfigurationInput
	}
	locks3ClientMockDeleteBucketMetricsConfiguration.RLock()
	calls = mock.calls.DeleteBucketMetricsConfiguration
	locks3ClientMockDeleteBucketMetricsConfiguration.RUnlock()
	return calls
}

// DeleteBucketMetricsConfigurationRequest calls DeleteBucketMetricsConfigurationRequestFunc.
func (mock *s3ClientMock) DeleteBucketMetricsConfigurationRequest(in1 *s3.DeleteBucketMetricsConfigurationInput) (*request.Request, *s3.DeleteBucketMetricsConfigurationOutput) {
	if mock.DeleteBucketMetricsConfigurationRequestFunc == nil {
		panic("s3ClientMock.DeleteBucketMetricsConfigurationRequestFunc: method is nil but s3Client.DeleteBucketMetricsConfigurationRequest was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteBucketMetricsConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteBucketMetricsConfigurationRequest.Lock()
	mock.calls.DeleteBucketMetricsConfigurationRequest = append(mock.calls.DeleteBucketMetricsConfigurationRequest, callInfo)
	locks3ClientMockDeleteBucketMetricsConfigurationRequest.Unlock()
	return mock.DeleteBucketMetricsConfigurationRequestFunc(in1)
}

// DeleteBucketMetricsConfigurationRequestCalls gets all the calls that were made to DeleteBucketMetricsConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.DeleteBucketMetricsConfigurationRequestCalls())
func (mock *s3ClientMock) DeleteBucketMetricsConfigurationRequestCalls() []struct {
	In1 *s3.DeleteBucketMetricsConfigurationInput
} {
	var calls []struct {
		In1 *s3.DeleteBucketMetricsConfigurationInput
	}
	locks3ClientMockDeleteBucketMetricsConfigurationRequest.RLock()
	calls = mock.calls.DeleteBucketMetricsConfigurationRequest
	locks3ClientMockDeleteBucketMetricsConfigurationRequest.RUnlock()
	return calls
}

// DeleteBucketMetricsConfigurationWithContext calls DeleteBucketMetricsConfigurationWithContextFunc.
func (mock *s3ClientMock) DeleteBucketMetricsConfigurationWithContext(in1 context.Context, in2 *s3.DeleteBucketMetricsConfigurationInput, in3 ...request.Option) (*s3.DeleteBucketMetricsConfigurationOutput, error) {
	if mock.DeleteBucketMetricsConfigurationWithContextFunc == nil {
		panic("s3ClientMock.DeleteBucketMetricsConfigurationWithContextFunc: method is nil but s3Client.DeleteBucketMetricsConfigurationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.DeleteBucketMetricsConfigurationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockDeleteBucketMetricsConfigurationWithContext.Lock()
	mock.calls.DeleteBucketMetricsConfigurationWithContext = append(mock.calls.DeleteBucketMetricsConfigurationWithContext, callInfo)
	locks3ClientMockDeleteBucketMetricsConfigurationWithContext.Unlock()
	return mock.DeleteBucketMetricsConfigurationWithContextFunc(in1, in2, in3...)
}

// DeleteBucketMetricsConfigurationWithContextCalls gets all the calls that were made to DeleteBucketMetricsConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteBucketMetricsConfigurationWithContextCalls())
func (mock *s3ClientMock) DeleteBucketMetricsConfigurationWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.DeleteBucketMetricsConfigurationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.DeleteBucketMetricsConfigurationInput
		In3 []request.Option
	}
	locks3ClientMockDeleteBucketMetricsConfigurationWithContext.RLock()
	calls = mock.calls.DeleteBucketMetricsConfigurationWithContext
	locks3ClientMockDeleteBucketMetricsConfigurationWithContext.RUnlock()
	return calls
}

// DeleteBucketPolicy calls DeleteBucketPolicyFunc.
func (mock *s3ClientMock) DeleteBucketPolicy(in1 *s3.DeleteBucketPolicyInput) (*s3.DeleteBucketPolicyOutput, error) {
	if mock.DeleteBucketPolicyFunc == nil {
		panic("s3ClientMock.DeleteBucketPolicyFunc: method is nil but s3Client.DeleteBucketPolicy was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteBucketPolicyInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteBucketPolicy.Lock()
	mock.calls.DeleteBucketPolicy = append(mock.calls.DeleteBucketPolicy, callInfo)
	locks3ClientMockDeleteBucketPolicy.Unlock()
	return mock.DeleteBucketPolicyFunc(in1)
}

// DeleteBucketPolicyCalls gets all the calls that were made to DeleteBucketPolicy.
// Check the length with:
//     len(mockeds3Client.DeleteBucketPolicyCalls())
func (mock *s3ClientMock) DeleteBucketPolicyCalls() []struct {
	In1 *s3.DeleteBucketPolicyInput
} {
	var calls []struct {
		In1 *s3.DeleteBucketPolicyInput
	}
	locks3ClientMockDeleteBucketPolicy.RLock()
	calls = mock.calls.DeleteBucketPolicy
	locks3ClientMockDeleteBucketPolicy.RUnlock()
	return calls
}

// DeleteBucketPolicyRequest calls DeleteBucketPolicyRequestFunc.
func (mock *s3ClientMock) DeleteBucketPolicyRequest(in1 *s3.DeleteBucketPolicyInput) (*request.Request, *s3.DeleteBucketPolicyOutput) {
	if mock.DeleteBucketPolicyRequestFunc == nil {
		panic("s3ClientMock.DeleteBucketPolicyRequestFunc: method is nil but s3Client.DeleteBucketPolicyRequest was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteBucketPolicyInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteBucketPolicyRequest.Lock()
	mock.calls.DeleteBucketPolicyRequest = append(mock.calls.DeleteBucketPolicyRequest, callInfo)
	locks3ClientMockDeleteBucketPolicyRequest.Unlock()
	return mock.DeleteBucketPolicyRequestFunc(in1)
}

// DeleteBucketPolicyRequestCalls gets all the calls that were made to DeleteBucketPolicyRequest.
// Check the length with:
//     len(mockeds3Client.DeleteBucketPolicyRequestCalls())
func (mock *s3ClientMock) DeleteBucketPolicyRequestCalls() []struct {
	In1 *s3.DeleteBucketPolicyInput
} {
	var calls []struct {
		In1 *s3.DeleteBucketPolicyInput
	}
	locks3ClientMockDeleteBucketPolicyRequest.RLock()
	calls = mock.calls.DeleteBucketPolicyRequest
	locks3ClientMockDeleteBucketPolicyRequest.RUnlock()
	return calls
}

// DeleteBucketPolicyWithContext calls DeleteBucketPolicyWithContextFunc.
func (mock *s3ClientMock) DeleteBucketPolicyWithContext(in1 context.Context, in2 *s3.DeleteBucketPolicyInput, in3 ...request.Option) (*s3.DeleteBucketPolicyOutput, error) {
	if mock.DeleteBucketPolicyWithContextFunc == nil {
		panic("s3ClientMock.DeleteBucketPolicyWithContextFunc: method is nil but s3Client.DeleteBucketPolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.DeleteBucketPolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockDeleteBucketPolicyWithContext.Lock()
	mock.calls.DeleteBucketPolicyWithContext = append(mock.calls.DeleteBucketPolicyWithContext, callInfo)
	locks3ClientMockDeleteBucketPolicyWithContext.Unlock()
	return mock.DeleteBucketPolicyWithContextFunc(in1, in2, in3...)
}

// DeleteBucketPolicyWithContextCalls gets all the calls that were made to DeleteBucketPolicyWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteBucketPolicyWithContextCalls())
func (mock *s3ClientMock) DeleteBucketPolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.DeleteBucketPolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.DeleteBucketPolicyInput
		In3 []request.Option
	}
	locks3ClientMockDeleteBucketPolicyWithContext.RLock()
	calls = mock.calls.DeleteBucketPolicyWithContext
	locks3ClientMockDeleteBucketPolicyWithContext.RUnlock()
	return calls
}

// DeleteBucketReplication calls DeleteBucketReplicationFunc.
func (mock *s3ClientMock) DeleteBucketReplication(in1 *s3.DeleteBucketReplicationInput) (*s3.DeleteBucketReplicationOutput, error) {
	if mock.DeleteBucketReplicationFunc == nil {
		panic("s3ClientMock.DeleteBucketReplicationFunc: method is nil but s3Client.DeleteBucketReplication was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteBucketReplicationInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteBucketReplication.Lock()
	mock.calls.DeleteBucketReplication = append(mock.calls.DeleteBucketReplication, callInfo)
	locks3ClientMockDeleteBucketReplication.Unlock()
	return mock.DeleteBucketReplicationFunc(in1)
}

// DeleteBucketReplicationCalls gets all the calls that were made to DeleteBucketReplication.
// Check the length with:
//     len(mockeds3Client.DeleteBucketReplicationCalls())
func (mock *s3ClientMock) DeleteBucketReplicationCalls() []struct {
	In1 *s3.DeleteBucketReplicationInput
} {
	var calls []struct {
		In1 *s3.DeleteBucketReplicationInput
	}
	locks3ClientMockDeleteBucketReplication.RLock()
	calls = mock.calls.DeleteBucketReplication
	locks3ClientMockDeleteBucketReplication.RUnlock()
	return calls
}

// DeleteBucketReplicationRequest calls DeleteBucketReplicationRequestFunc.
func (mock *s3ClientMock) DeleteBucketReplicationRequest(in1 *s3.DeleteBucketReplicationInput) (*request.Request, *s3.DeleteBucketReplicationOutput) {
	if mock.DeleteBucketReplicationRequestFunc == nil {
		panic("s3ClientMock.DeleteBucketReplicationRequestFunc: method is nil but s3Client.DeleteBucketReplicationRequest was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteBucketReplicationInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteBucketReplicationRequest.Lock()
	mock.calls.DeleteBucketReplicationRequest = append(mock.calls.DeleteBucketReplicationRequest, callInfo)
	locks3ClientMockDeleteBucketReplicationRequest.Unlock()
	return mock.DeleteBucketReplicationRequestFunc(in1)
}

// DeleteBucketReplicationRequestCalls gets all the calls that were made to DeleteBucketReplicationRequest.
// Check the length with:
//     len(mockeds3Client.DeleteBucketReplicationRequestCalls())
func (mock *s3ClientMock) DeleteBucketReplicationRequestCalls() []struct {
	In1 *s3.DeleteBucketReplicationInput
} {
	var calls []struct {
		In1 *s3.DeleteBucketReplicationInput
	}
	locks3ClientMockDeleteBucketReplicationRequest.RLock()
	calls = mock.calls.DeleteBucketReplicationRequest
	locks3ClientMockDeleteBucketReplicationRequest.RUnlock()
	return calls
}

// DeleteBucketReplicationWithContext calls DeleteBucketReplicationWithContextFunc.
func (mock *s3ClientMock) DeleteBucketReplicationWithContext(in1 context.Context, in2 *s3.DeleteBucketReplicationInput, in3 ...request.Option) (*s3.DeleteBucketReplicationOutput, error) {
	if mock.DeleteBucketReplicationWithContextFunc == nil {
		panic("s3ClientMock.DeleteBucketReplicationWithContextFunc: method is nil but s3Client.DeleteBucketReplicationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.DeleteBucketReplicationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockDeleteBucketReplicationWithContext.Lock()
	mock.calls.DeleteBucketReplicationWithContext = append(mock.calls.DeleteBucketReplicationWithContext, callInfo)
	locks3ClientMockDeleteBucketReplicationWithContext.Unlock()
	return mock.DeleteBucketReplicationWithContextFunc(in1, in2, in3...)
}

// DeleteBucketReplicationWithContextCalls gets all the calls that were made to DeleteBucketReplicationWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteBucketReplicationWithContextCalls())
func (mock *s3ClientMock) DeleteBucketReplicationWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.DeleteBucketReplicationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.DeleteBucketReplicationInput
		In3 []request.Option
	}
	locks3ClientMockDeleteBucketReplicationWithContext.RLock()
	calls = mock.calls.DeleteBucketReplicationWithContext
	locks3ClientMockDeleteBucketReplicationWithContext.RUnlock()
	return calls
}

// DeleteBucketRequest calls DeleteBucketRequestFunc.
func (mock *s3ClientMock) DeleteBucketRequest(in1 *s3.DeleteBucketInput) (*request.Request, *s3.DeleteBucketOutput) {
	if mock.DeleteBucketRequestFunc == nil {
		panic("s3ClientMock.DeleteBucketRequestFunc: method is nil but s3Client.DeleteBucketRequest was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteBucketInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteBucketRequest.Lock()
	mock.calls.DeleteBucketRequest = append(mock.calls.DeleteBucketRequest, callInfo)
	locks3ClientMockDeleteBucketRequest.Unlock()
	return mock.DeleteBucketRequestFunc(in1)
}

// DeleteBucketRequestCalls gets all the calls that were made to DeleteBucketRequest.
// Check the length with:
//     len(mockeds3Client.DeleteBucketRequestCalls())
func (mock *s3ClientMock) DeleteBucketRequestCalls() []struct {
	In1 *s3.DeleteBucketInput
} {
	var calls []struct {
		In1 *s3.DeleteBucketInput
	}
	locks3ClientMockDeleteBucketRequest.RLock()
	calls = mock.calls.DeleteBucketRequest
	locks3ClientMockDeleteBucketRequest.RUnlock()
	return calls
}

// DeleteBucketTagging calls DeleteBucketTaggingFunc.
func (mock *s3ClientMock) DeleteBucketTagging(in1 *s3.DeleteBucketTaggingInput) (*s3.DeleteBucketTaggingOutput, error) {
	if mock.DeleteBucketTaggingFunc == nil {
		panic("s3ClientMock.DeleteBucketTaggingFunc: method is nil but s3Client.DeleteBucketTagging was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteBucketTaggingInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteBucketTagging.Lock()
	mock.calls.DeleteBucketTagging = append(mock.calls.DeleteBucketTagging, callInfo)
	locks3ClientMockDeleteBucketTagging.Unlock()
	return mock.DeleteBucketTaggingFunc(in1)
}

// DeleteBucketTaggingCalls gets all the calls that were made to DeleteBucketTagging.
// Check the length with:
//     len(mockeds3Client.DeleteBucketTaggingCalls())
func (mock *s3ClientMock) DeleteBucketTaggingCalls() []struct {
	In1 *s3.DeleteBucketTaggingInput
} {
	var calls []struct {
		In1 *s3.DeleteBucketTaggingInput
	}
	locks3ClientMockDeleteBucketTagging.RLock()
	calls = mock.calls.DeleteBucketTagging
	locks3ClientMockDeleteBucketTagging.RUnlock()
	return calls
}

// DeleteBucketTaggingRequest calls DeleteBucketTaggingRequestFunc.
func (mock *s3ClientMock) DeleteBucketTaggingRequest(in1 *s3.DeleteBucketTaggingInput) (*request.Request, *s3.DeleteBucketTaggingOutput) {
	if mock.DeleteBucketTaggingRequestFunc == nil {
		panic("s3ClientMock.DeleteBucketTaggingRequestFunc: method is nil but s3Client.DeleteBucketTaggingRequest was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteBucketTaggingInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteBucketTaggingRequest.Lock()
	mock.calls.DeleteBucketTaggingRequest = append(mock.calls.DeleteBucketTaggingRequest, callInfo)
	locks3ClientMockDeleteBucketTaggingRequest.Unlock()
	return mock.DeleteBucketTaggingRequestFunc(in1)
}

// DeleteBucketTaggingRequestCalls gets all the calls that were made to DeleteBucketTaggingRequest.
// Check the length with:
//     len(mockeds3Client.DeleteBucketTaggingRequestCalls())
func (mock *s3ClientMock) DeleteBucketTaggingRequestCalls() []struct {
	In1 *s3.DeleteBucketTaggingInput
} {
	var calls []struct {
		In1 *s3.DeleteBucketTaggingInput
	}
	locks3ClientMockDeleteBucketTaggingRequest.RLock()
	calls = mock.calls.DeleteBucketTaggingRequest
	locks3ClientMockDeleteBucketTaggingRequest.RUnlock()
	return calls
}

// DeleteBucketTaggingWithContext calls DeleteBucketTaggingWithContextFunc.
func (mock *s3ClientMock) DeleteBucketTaggingWithContext(in1 context.Context, in2 *s3.DeleteBucketTaggingInput, in3 ...request.Option) (*s3.DeleteBucketTaggingOutput, error) {
	if mock.DeleteBucketTaggingWithContextFunc == nil {
		panic("s3ClientMock.DeleteBucketTaggingWithContextFunc: method is nil but s3Client.DeleteBucketTaggingWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.DeleteBucketTaggingInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockDeleteBucketTaggingWithContext.Lock()
	mock.calls.DeleteBucketTaggingWithContext = append(mock.calls.DeleteBucketTaggingWithContext, callInfo)
	locks3ClientMockDeleteBucketTaggingWithContext.Unlock()
	return mock.DeleteBucketTaggingWithContextFunc(in1, in2, in3...)
}

// DeleteBucketTaggingWithContextCalls gets all the calls that were made to DeleteBucketTaggingWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteBucketTaggingWithContextCalls())
func (mock *s3ClientMock) DeleteBucketTaggingWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.DeleteBucketTaggingInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.DeleteBucketTaggingInput
		In3 []request.Option
	}
	locks3ClientMockDeleteBucketTaggingWithContext.RLock()
	calls = mock.calls.DeleteBucketTaggingWithContext
	locks3ClientMockDeleteBucketTaggingWithContext.RUnlock()
	return calls
}

// DeleteBucketWebsite calls DeleteBucketWebsiteFunc.
func (mock *s3ClientMock) DeleteBucketWebsite(in1 *s3.DeleteBucketWebsiteInput) (*s3.DeleteBucketWebsiteOutput, error) {
	if mock.DeleteBucketWebsiteFunc == nil {
		panic("s3ClientMock.DeleteBucketWebsiteFunc: method is nil but s3Client.DeleteBucketWebsite was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteBucketWebsiteInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteBucketWebsite.Lock()
	mock.calls.DeleteBucketWebsite = append(mock.calls.DeleteBucketWebsite, callInfo)
	locks3ClientMockDeleteBucketWebsite.Unlock()
	return mock.DeleteBucketWebsiteFunc(in1)
}

// DeleteBucketWebsiteCalls gets all the calls that were made to DeleteBucketWebsite.
// Check the length with:
//     len(mockeds3Client.DeleteBucketWebsiteCalls())
func (mock *s3ClientMock) DeleteBucketWebsiteCalls() []struct {
	In1 *s3.DeleteBucketWebsiteInput
} {
	var calls []struct {
		In1 *s3.DeleteBucketWebsiteInput
	}
	locks3ClientMockDeleteBucketWebsite.RLock()
	calls = mock.calls.DeleteBucketWebsite
	locks3ClientMockDeleteBucketWebsite.RUnlock()
	return calls
}

// DeleteBucketWebsiteRequest calls DeleteBucketWebsiteRequestFunc.
func (mock *s3ClientMock) DeleteBucketWebsiteRequest(in1 *s3.DeleteBucketWebsiteInput) (*request.Request, *s3.DeleteBucketWebsiteOutput) {
	if mock.DeleteBucketWebsiteRequestFunc == nil {
		panic("s3ClientMock.DeleteBucketWebsiteRequestFunc: method is nil but s3Client.DeleteBucketWebsiteRequest was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteBucketWebsiteInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteBucketWebsiteRequest.Lock()
	mock.calls.DeleteBucketWebsiteRequest = append(mock.calls.DeleteBucketWebsiteRequest, callInfo)
	locks3ClientMockDeleteBucketWebsiteRequest.Unlock()
	return mock.DeleteBucketWebsiteRequestFunc(in1)
}

// DeleteBucketWebsiteRequestCalls gets all the calls that were made to DeleteBucketWebsiteRequest.
// Check the length with:
//     len(mockeds3Client.DeleteBucketWebsiteRequestCalls())
func (mock *s3ClientMock) DeleteBucketWebsiteRequestCalls() []struct {
	In1 *s3.DeleteBucketWebsiteInput
} {
	var calls []struct {
		In1 *s3.DeleteBucketWebsiteInput
	}
	locks3ClientMockDeleteBucketWebsiteRequest.RLock()
	calls = mock.calls.DeleteBucketWebsiteRequest
	locks3ClientMockDeleteBucketWebsiteRequest.RUnlock()
	return calls
}

// DeleteBucketWebsiteWithContext calls DeleteBucketWebsiteWithContextFunc.
func (mock *s3ClientMock) DeleteBucketWebsiteWithContext(in1 context.Context, in2 *s3.DeleteBucketWebsiteInput, in3 ...request.Option) (*s3.DeleteBucketWebsiteOutput, error) {
	if mock.DeleteBucketWebsiteWithContextFunc == nil {
		panic("s3ClientMock.DeleteBucketWebsiteWithContextFunc: method is nil but s3Client.DeleteBucketWebsiteWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.DeleteBucketWebsiteInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockDeleteBucketWebsiteWithContext.Lock()
	mock.calls.DeleteBucketWebsiteWithContext = append(mock.calls.DeleteBucketWebsiteWithContext, callInfo)
	locks3ClientMockDeleteBucketWebsiteWithContext.Unlock()
	return mock.DeleteBucketWebsiteWithContextFunc(in1, in2, in3...)
}

// DeleteBucketWebsiteWithContextCalls gets all the calls that were made to DeleteBucketWebsiteWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteBucketWebsiteWithContextCalls())
func (mock *s3ClientMock) DeleteBucketWebsiteWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.DeleteBucketWebsiteInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.DeleteBucketWebsiteInput
		In3 []request.Option
	}
	locks3ClientMockDeleteBucketWebsiteWithContext.RLock()
	calls = mock.calls.DeleteBucketWebsiteWithContext
	locks3ClientMockDeleteBucketWebsiteWithContext.RUnlock()
	return calls
}

// DeleteBucketWithContext calls DeleteBucketWithContextFunc.
func (mock *s3ClientMock) DeleteBucketWithContext(in1 context.Context, in2 *s3.DeleteBucketInput, in3 ...request.Option) (*s3.DeleteBucketOutput, error) {
	if mock.DeleteBucketWithContextFunc == nil {
		panic("s3ClientMock.DeleteBucketWithContextFunc: method is nil but s3Client.DeleteBucketWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.DeleteBucketInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockDeleteBucketWithContext.Lock()
	mock.calls.DeleteBucketWithContext = append(mock.calls.DeleteBucketWithContext, callInfo)
	locks3ClientMockDeleteBucketWithContext.Unlock()
	return mock.DeleteBucketWithContextFunc(in1, in2, in3...)
}

// DeleteBucketWithContextCalls gets all the calls that were made to DeleteBucketWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteBucketWithContextCalls())
func (mock *s3ClientMock) DeleteBucketWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.DeleteBucketInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.DeleteBucketInput
		In3 []request.Option
	}
	locks3ClientMockDeleteBucketWithContext.RLock()
	calls = mock.calls.DeleteBucketWithContext
	locks3ClientMockDeleteBucketWithContext.RUnlock()
	return calls
}

// DeleteObject calls DeleteObjectFunc.
func (mock *s3ClientMock) DeleteObject(in1 *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error) {
	if mock.DeleteObjectFunc == nil {
		panic("s3ClientMock.DeleteObjectFunc: method is nil but s3Client.DeleteObject was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteObjectInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteObject.Lock()
	mock.calls.DeleteObject = append(mock.calls.DeleteObject, callInfo)
	locks3ClientMockDeleteObject.Unlock()
	return mock.DeleteObjectFunc(in1)
}

// DeleteObjectCalls gets all the calls that were made to DeleteObject.
// Check the length with:
//     len(mockeds3Client.DeleteObjectCalls())
func (mock *s3ClientMock) DeleteObjectCalls() []struct {
	In1 *s3.DeleteObjectInput
} {
	var calls []struct {
		In1 *s3.DeleteObjectInput
	}
	locks3ClientMockDeleteObject.RLock()
	calls = mock.calls.DeleteObject
	locks3ClientMockDeleteObject.RUnlock()
	return calls
}

// DeleteObjectRequest calls DeleteObjectRequestFunc.
func (mock *s3ClientMock) DeleteObjectRequest(in1 *s3.DeleteObjectInput) (*request.Request, *s3.DeleteObjectOutput) {
	if mock.DeleteObjectRequestFunc == nil {
		panic("s3ClientMock.DeleteObjectRequestFunc: method is nil but s3Client.DeleteObjectRequest was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteObjectInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteObjectRequest.Lock()
	mock.calls.DeleteObjectRequest = append(mock.calls.DeleteObjectRequest, callInfo)
	locks3ClientMockDeleteObjectRequest.Unlock()
	return mock.DeleteObjectRequestFunc(in1)
}

// DeleteObjectRequestCalls gets all the calls that were made to DeleteObjectRequest.
// Check the length with:
//     len(mockeds3Client.DeleteObjectRequestCalls())
func (mock *s3ClientMock) DeleteObjectRequestCalls() []struct {
	In1 *s3.DeleteObjectInput
} {
	var calls []struct {
		In1 *s3.DeleteObjectInput
	}
	locks3ClientMockDeleteObjectRequest.RLock()
	calls = mock.calls.DeleteObjectRequest
	locks3ClientMockDeleteObjectRequest.RUnlock()
	return calls
}

// DeleteObjectTagging calls DeleteObjectTaggingFunc.
func (mock *s3ClientMock) DeleteObjectTagging(in1 *s3.DeleteObjectTaggingInput) (*s3.DeleteObjectTaggingOutput, error) {
	if mock.DeleteObjectTaggingFunc == nil {
		panic("s3ClientMock.DeleteObjectTaggingFunc: method is nil but s3Client.DeleteObjectTagging was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteObjectTaggingInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteObjectTagging.Lock()
	mock.calls.DeleteObjectTagging = append(mock.calls.DeleteObjectTagging, callInfo)
	locks3ClientMockDeleteObjectTagging.Unlock()
	return mock.DeleteObjectTaggingFunc(in1)
}

// DeleteObjectTaggingCalls gets all the calls that were made to DeleteObjectTagging.
// Check the length with:
//     len(mockeds3Client.DeleteObjectTaggingCalls())
func (mock *s3ClientMock) DeleteObjectTaggingCalls() []struct {
	In1 *s3.DeleteObjectTaggingInput
} {
	var calls []struct {
		In1 *s3.DeleteObjectTaggingInput
	}
	locks3ClientMockDeleteObjectTagging.RLock()
	calls = mock.calls.DeleteObjectTagging
	locks3ClientMockDeleteObjectTagging.RUnlock()
	return calls
}

// DeleteObjectTaggingRequest calls DeleteObjectTaggingRequestFunc.
func (mock *s3ClientMock) DeleteObjectTaggingRequest(in1 *s3.DeleteObjectTaggingInput) (*request.Request, *s3.DeleteObjectTaggingOutput) {
	if mock.DeleteObjectTaggingRequestFunc == nil {
		panic("s3ClientMock.DeleteObjectTaggingRequestFunc: method is nil but s3Client.DeleteObjectTaggingRequest was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteObjectTaggingInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteObjectTaggingRequest.Lock()
	mock.calls.DeleteObjectTaggingRequest = append(mock.calls.DeleteObjectTaggingRequest, callInfo)
	locks3ClientMockDeleteObjectTaggingRequest.Unlock()
	return mock.DeleteObjectTaggingRequestFunc(in1)
}

// DeleteObjectTaggingRequestCalls gets all the calls that were made to DeleteObjectTaggingRequest.
// Check the length with:
//     len(mockeds3Client.DeleteObjectTaggingRequestCalls())
func (mock *s3ClientMock) DeleteObjectTaggingRequestCalls() []struct {
	In1 *s3.DeleteObjectTaggingInput
} {
	var calls []struct {
		In1 *s3.DeleteObjectTaggingInput
	}
	locks3ClientMockDeleteObjectTaggingRequest.RLock()
	calls = mock.calls.DeleteObjectTaggingRequest
	locks3ClientMockDeleteObjectTaggingRequest.RUnlock()
	return calls
}

// DeleteObjectTaggingWithContext calls DeleteObjectTaggingWithContextFunc.
func (mock *s3ClientMock) DeleteObjectTaggingWithContext(in1 context.Context, in2 *s3.DeleteObjectTaggingInput, in3 ...request.Option) (*s3.DeleteObjectTaggingOutput, error) {
	if mock.DeleteObjectTaggingWithContextFunc == nil {
		panic("s3ClientMock.DeleteObjectTaggingWithContextFunc: method is nil but s3Client.DeleteObjectTaggingWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.DeleteObjectTaggingInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockDeleteObjectTaggingWithContext.Lock()
	mock.calls.DeleteObjectTaggingWithContext = append(mock.calls.DeleteObjectTaggingWithContext, callInfo)
	locks3ClientMockDeleteObjectTaggingWithContext.Unlock()
	return mock.DeleteObjectTaggingWithContextFunc(in1, in2, in3...)
}

// DeleteObjectTaggingWithContextCalls gets all the calls that were made to DeleteObjectTaggingWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteObjectTaggingWithContextCalls())
func (mock *s3ClientMock) DeleteObjectTaggingWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.DeleteObjectTaggingInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.DeleteObjectTaggingInput
		In3 []request.Option
	}
	locks3ClientMockDeleteObjectTaggingWithContext.RLock()
	calls = mock.calls.DeleteObjectTaggingWithContext
	locks3ClientMockDeleteObjectTaggingWithContext.RUnlock()
	return calls
}

// DeleteObjectWithContext calls DeleteObjectWithContextFunc.
func (mock *s3ClientMock) DeleteObjectWithContext(in1 context.Context, in2 *s3.DeleteObjectInput, in3 ...request.Option) (*s3.DeleteObjectOutput, error) {
	if mock.DeleteObjectWithContextFunc == nil {
		panic("s3ClientMock.DeleteObjectWithContextFunc: method is nil but s3Client.DeleteObjectWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.DeleteObjectInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockDeleteObjectWithContext.Lock()
	mock.calls.DeleteObjectWithContext = append(mock.calls.DeleteObjectWithContext, callInfo)
	locks3ClientMockDeleteObjectWithContext.Unlock()
	return mock.DeleteObjectWithContextFunc(in1, in2, in3...)
}

// DeleteObjectWithContextCalls gets all the calls that were made to DeleteObjectWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteObjectWithContextCalls())
func (mock *s3ClientMock) DeleteObjectWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.DeleteObjectInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.DeleteObjectInput
		In3 []request.Option
	}
	locks3ClientMockDeleteObjectWithContext.RLock()
	calls = mock.calls.DeleteObjectWithContext
	locks3ClientMockDeleteObjectWithContext.RUnlock()
	return calls
}

// DeleteObjects calls DeleteObjectsFunc.
func (mock *s3ClientMock) DeleteObjects(in1 *s3.DeleteObjectsInput) (*s3.DeleteObjectsOutput, error) {
	if mock.DeleteObjectsFunc == nil {
		panic("s3ClientMock.DeleteObjectsFunc: method is nil but s3Client.DeleteObjects was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteObjectsInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteObjects.Lock()
	mock.calls.DeleteObjects = append(mock.calls.DeleteObjects, callInfo)
	locks3ClientMockDeleteObjects.Unlock()
	return mock.DeleteObjectsFunc(in1)
}

// DeleteObjectsCalls gets all the calls that were made to DeleteObjects.
// Check the length with:
//     len(mockeds3Client.DeleteObjectsCalls())
func (mock *s3ClientMock) DeleteObjectsCalls() []struct {
	In1 *s3.DeleteObjectsInput
} {
	var calls []struct {
		In1 *s3.DeleteObjectsInput
	}
	locks3ClientMockDeleteObjects.RLock()
	calls = mock.calls.DeleteObjects
	locks3ClientMockDeleteObjects.RUnlock()
	return calls
}

// DeleteObjectsRequest calls DeleteObjectsRequestFunc.
func (mock *s3ClientMock) DeleteObjectsRequest(in1 *s3.DeleteObjectsInput) (*request.Request, *s3.DeleteObjectsOutput) {
	if mock.DeleteObjectsRequestFunc == nil {
		panic("s3ClientMock.DeleteObjectsRequestFunc: method is nil but s3Client.DeleteObjectsRequest was just called")
	}
	callInfo := struct {
		In1 *s3.DeleteObjectsInput
	}{
		In1: in1,
	}
	locks3ClientMockDeleteObjectsRequest.Lock()
	mock.calls.DeleteObjectsRequest = append(mock.calls.DeleteObjectsRequest, callInfo)
	locks3ClientMockDeleteObjectsRequest.Unlock()
	return mock.DeleteObjectsRequestFunc(in1)
}

// DeleteObjectsRequestCalls gets all the calls that were made to DeleteObjectsRequest.
// Check the length with:
//     len(mockeds3Client.DeleteObjectsRequestCalls())
func (mock *s3ClientMock) DeleteObjectsRequestCalls() []struct {
	In1 *s3.DeleteObjectsInput
} {
	var calls []struct {
		In1 *s3.DeleteObjectsInput
	}
	locks3ClientMockDeleteObjectsRequest.RLock()
	calls = mock.calls.DeleteObjectsRequest
	locks3ClientMockDeleteObjectsRequest.RUnlock()
	return calls
}

// DeleteObjectsWithContext calls DeleteObjectsWithContextFunc.
func (mock *s3ClientMock) DeleteObjectsWithContext(in1 context.Context, in2 *s3.DeleteObjectsInput, in3 ...request.Option) (*s3.DeleteObjectsOutput, error) {
	if mock.DeleteObjectsWithContextFunc == nil {
		panic("s3ClientMock.DeleteObjectsWithContextFunc: method is nil but s3Client.DeleteObjectsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.DeleteObjectsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockDeleteObjectsWithContext.Lock()
	mock.calls.DeleteObjectsWithContext = append(mock.calls.DeleteObjectsWithContext, callInfo)
	locks3ClientMockDeleteObjectsWithContext.Unlock()
	return mock.DeleteObjectsWithContextFunc(in1, in2, in3...)
}

// DeleteObjectsWithContextCalls gets all the calls that were made to DeleteObjectsWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteObjectsWithContextCalls())
func (mock *s3ClientMock) DeleteObjectsWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.DeleteObjectsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.DeleteObjectsInput
		In3 []request.Option
	}
	locks3ClientMockDeleteObjectsWithContext.RLock()
	calls = mock.calls.DeleteObjectsWithContext
	locks3ClientMockDeleteObjectsWithContext.RUnlock()
	return calls
}

// DeletePublicAccessBlock calls DeletePublicAccessBlockFunc.
func (mock *s3ClientMock) DeletePublicAccessBlock(in1 *s3.DeletePublicAccessBlockInput) (*s3.DeletePublicAccessBlockOutput, error) {
	if mock.DeletePublicAccessBlockFunc == nil {
		panic("s3ClientMock.DeletePublicAccessBlockFunc: method is nil but s3Client.DeletePublicAccessBlock was just called")
	}
	callInfo := struct {
		In1 *s3.DeletePublicAccessBlockInput
	}{
		In1: in1,
	}
	locks3ClientMockDeletePublicAccessBlock.Lock()
	mock.calls.DeletePublicAccessBlock = append(mock.calls.DeletePublicAccessBlock, callInfo)
	locks3ClientMockDeletePublicAccessBlock.Unlock()
	return mock.DeletePublicAccessBlockFunc(in1)
}

// DeletePublicAccessBlockCalls gets all the calls that were made to DeletePublicAccessBlock.
// Check the length with:
//     len(mockeds3Client.DeletePublicAccessBlockCalls())
func (mock *s3ClientMock) DeletePublicAccessBlockCalls() []struct {
	In1 *s3.DeletePublicAccessBlockInput
} {
	var calls []struct {
		In1 *s3.DeletePublicAccessBlockInput
	}
	locks3ClientMockDeletePublicAccessBlock.RLock()
	calls = mock.calls.DeletePublicAccessBlock
	locks3ClientMockDeletePublicAccessBlock.RUnlock()
	return calls
}

// DeletePublicAccessBlockRequest calls DeletePublicAccessBlockRequestFunc.
func (mock *s3ClientMock) DeletePublicAccessBlockRequest(in1 *s3.DeletePublicAccessBlockInput) (*request.Request, *s3.DeletePublicAccessBlockOutput) {
	if mock.DeletePublicAccessBlockRequestFunc == nil {
		panic("s3ClientMock.DeletePublicAccessBlockRequestFunc: method is nil but s3Client.DeletePublicAccessBlockRequest was just called")
	}
	callInfo := struct {
		In1 *s3.DeletePublicAccessBlockInput
	}{
		In1: in1,
	}
	locks3ClientMockDeletePublicAccessBlockRequest.Lock()
	mock.calls.DeletePublicAccessBlockRequest = append(mock.calls.DeletePublicAccessBlockRequest, callInfo)
	locks3ClientMockDeletePublicAccessBlockRequest.Unlock()
	return mock.DeletePublicAccessBlockRequestFunc(in1)
}

// DeletePublicAccessBlockRequestCalls gets all the calls that were made to DeletePublicAccessBlockRequest.
// Check the length with:
//     len(mockeds3Client.DeletePublicAccessBlockRequestCalls())
func (mock *s3ClientMock) DeletePublicAccessBlockRequestCalls() []struct {
	In1 *s3.DeletePublicAccessBlockInput
} {
	var calls []struct {
		In1 *s3.DeletePublicAccessBlockInput
	}
	locks3ClientMockDeletePublicAccessBlockRequest.RLock()
	calls = mock.calls.DeletePublicAccessBlockRequest
	locks3ClientMockDeletePublicAccessBlockRequest.RUnlock()
	return calls
}

// DeletePublicAccessBlockWithContext calls DeletePublicAccessBlockWithContextFunc.
func (mock *s3ClientMock) DeletePublicAccessBlockWithContext(in1 context.Context, in2 *s3.DeletePublicAccessBlockInput, in3 ...request.Option) (*s3.DeletePublicAccessBlockOutput, error) {
	if mock.DeletePublicAccessBlockWithContextFunc == nil {
		panic("s3ClientMock.DeletePublicAccessBlockWithContextFunc: method is nil but s3Client.DeletePublicAccessBlockWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.DeletePublicAccessBlockInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockDeletePublicAccessBlockWithContext.Lock()
	mock.calls.DeletePublicAccessBlockWithContext = append(mock.calls.DeletePublicAccessBlockWithContext, callInfo)
	locks3ClientMockDeletePublicAccessBlockWithContext.Unlock()
	return mock.DeletePublicAccessBlockWithContextFunc(in1, in2, in3...)
}

// DeletePublicAccessBlockWithContextCalls gets all the calls that were made to DeletePublicAccessBlockWithContext.
// Check the length with:
//     len(mockeds3Client.DeletePublicAccessBlockWithContextCalls())
func (mock *s3ClientMock) DeletePublicAccessBlockWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.DeletePublicAccessBlockInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.DeletePublicAccessBlockInput
		In3 []request.Option
	}
	locks3ClientMockDeletePublicAccessBlockWithContext.RLock()
	calls = mock.calls.DeletePublicAccessBlockWithContext
	locks3ClientMockDeletePublicAccessBlockWithContext.RUnlock()
	return calls
}

// GetBucketAccelerateConfiguration calls GetBucketAccelerateConfigurationFunc.
func (mock *s3ClientMock) GetBucketAccelerateConfiguration(in1 *s3.GetBucketAccelerateConfigurationInput) (*s3.GetBucketAccelerateConfigurationOutput, error) {
	if mock.GetBucketAccelerateConfigurationFunc == nil {
		panic("s3ClientMock.GetBucketAccelerateConfigurationFunc: method is nil but s3Client.GetBucketAccelerateConfiguration was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketAccelerateConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketAccelerateConfiguration.Lock()
	mock.calls.GetBucketAccelerateConfiguration = append(mock.calls.GetBucketAccelerateConfiguration, callInfo)
	locks3ClientMockGetBucketAccelerateConfiguration.Unlock()
	return mock.GetBucketAccelerateConfigurationFunc(in1)
}

// GetBucketAccelerateConfigurationCalls gets all the calls that were made to GetBucketAccelerateConfiguration.
// Check the length with:
//     len(mockeds3Client.GetBucketAccelerateConfigurationCalls())
func (mock *s3ClientMock) GetBucketAccelerateConfigurationCalls() []struct {
	In1 *s3.GetBucketAccelerateConfigurationInput
} {
	var calls []struct {
		In1 *s3.GetBucketAccelerateConfigurationInput
	}
	locks3ClientMockGetBucketAccelerateConfiguration.RLock()
	calls = mock.calls.GetBucketAccelerateConfiguration
	locks3ClientMockGetBucketAccelerateConfiguration.RUnlock()
	return calls
}

// GetBucketAccelerateConfigurationRequest calls GetBucketAccelerateConfigurationRequestFunc.
func (mock *s3ClientMock) GetBucketAccelerateConfigurationRequest(in1 *s3.GetBucketAccelerateConfigurationInput) (*request.Request, *s3.GetBucketAccelerateConfigurationOutput) {
	if mock.GetBucketAccelerateConfigurationRequestFunc == nil {
		panic("s3ClientMock.GetBucketAccelerateConfigurationRequestFunc: method is nil but s3Client.GetBucketAccelerateConfigurationRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketAccelerateConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketAccelerateConfigurationRequest.Lock()
	mock.calls.GetBucketAccelerateConfigurationRequest = append(mock.calls.GetBucketAccelerateConfigurationRequest, callInfo)
	locks3ClientMockGetBucketAccelerateConfigurationRequest.Unlock()
	return mock.GetBucketAccelerateConfigurationRequestFunc(in1)
}

// GetBucketAccelerateConfigurationRequestCalls gets all the calls that were made to GetBucketAccelerateConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketAccelerateConfigurationRequestCalls())
func (mock *s3ClientMock) GetBucketAccelerateConfigurationRequestCalls() []struct {
	In1 *s3.GetBucketAccelerateConfigurationInput
} {
	var calls []struct {
		In1 *s3.GetBucketAccelerateConfigurationInput
	}
	locks3ClientMockGetBucketAccelerateConfigurationRequest.RLock()
	calls = mock.calls.GetBucketAccelerateConfigurationRequest
	locks3ClientMockGetBucketAccelerateConfigurationRequest.RUnlock()
	return calls
}

// GetBucketAccelerateConfigurationWithContext calls GetBucketAccelerateConfigurationWithContextFunc.
func (mock *s3ClientMock) GetBucketAccelerateConfigurationWithContext(in1 context.Context, in2 *s3.GetBucketAccelerateConfigurationInput, in3 ...request.Option) (*s3.GetBucketAccelerateConfigurationOutput, error) {
	if mock.GetBucketAccelerateConfigurationWithContextFunc == nil {
		panic("s3ClientMock.GetBucketAccelerateConfigurationWithContextFunc: method is nil but s3Client.GetBucketAccelerateConfigurationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetBucketAccelerateConfigurationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetBucketAccelerateConfigurationWithContext.Lock()
	mock.calls.GetBucketAccelerateConfigurationWithContext = append(mock.calls.GetBucketAccelerateConfigurationWithContext, callInfo)
	locks3ClientMockGetBucketAccelerateConfigurationWithContext.Unlock()
	return mock.GetBucketAccelerateConfigurationWithContextFunc(in1, in2, in3...)
}

// GetBucketAccelerateConfigurationWithContextCalls gets all the calls that were made to GetBucketAccelerateConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketAccelerateConfigurationWithContextCalls())
func (mock *s3ClientMock) GetBucketAccelerateConfigurationWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetBucketAccelerateConfigurationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetBucketAccelerateConfigurationInput
		In3 []request.Option
	}
	locks3ClientMockGetBucketAccelerateConfigurationWithContext.RLock()
	calls = mock.calls.GetBucketAccelerateConfigurationWithContext
	locks3ClientMockGetBucketAccelerateConfigurationWithContext.RUnlock()
	return calls
}

// GetBucketAcl calls GetBucketAclFunc.
func (mock *s3ClientMock) GetBucketAcl(in1 *s3.GetBucketAclInput) (*s3.GetBucketAclOutput, error) {
	if mock.GetBucketAclFunc == nil {
		panic("s3ClientMock.GetBucketAclFunc: method is nil but s3Client.GetBucketAcl was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketAclInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketAcl.Lock()
	mock.calls.GetBucketAcl = append(mock.calls.GetBucketAcl, callInfo)
	locks3ClientMockGetBucketAcl.Unlock()
	return mock.GetBucketAclFunc(in1)
}

// GetBucketAclCalls gets all the calls that were made to GetBucketAcl.
// Check the length with:
//     len(mockeds3Client.GetBucketAclCalls())
func (mock *s3ClientMock) GetBucketAclCalls() []struct {
	In1 *s3.GetBucketAclInput
} {
	var calls []struct {
		In1 *s3.GetBucketAclInput
	}
	locks3ClientMockGetBucketAcl.RLock()
	calls = mock.calls.GetBucketAcl
	locks3ClientMockGetBucketAcl.RUnlock()
	return calls
}

// GetBucketAclRequest calls GetBucketAclRequestFunc.
func (mock *s3ClientMock) GetBucketAclRequest(in1 *s3.GetBucketAclInput) (*request.Request, *s3.GetBucketAclOutput) {
	if mock.GetBucketAclRequestFunc == nil {
		panic("s3ClientMock.GetBucketAclRequestFunc: method is nil but s3Client.GetBucketAclRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketAclInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketAclRequest.Lock()
	mock.calls.GetBucketAclRequest = append(mock.calls.GetBucketAclRequest, callInfo)
	locks3ClientMockGetBucketAclRequest.Unlock()
	return mock.GetBucketAclRequestFunc(in1)
}

// GetBucketAclRequestCalls gets all the calls that were made to GetBucketAclRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketAclRequestCalls())
func (mock *s3ClientMock) GetBucketAclRequestCalls() []struct {
	In1 *s3.GetBucketAclInput
} {
	var calls []struct {
		In1 *s3.GetBucketAclInput
	}
	locks3ClientMockGetBucketAclRequest.RLock()
	calls = mock.calls.GetBucketAclRequest
	locks3ClientMockGetBucketAclRequest.RUnlock()
	return calls
}

// GetBucketAclWithContext calls GetBucketAclWithContextFunc.
func (mock *s3ClientMock) GetBucketAclWithContext(in1 context.Context, in2 *s3.GetBucketAclInput, in3 ...request.Option) (*s3.GetBucketAclOutput, error) {
	if mock.GetBucketAclWithContextFunc == nil {
		panic("s3ClientMock.GetBucketAclWithContextFunc: method is nil but s3Client.GetBucketAclWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetBucketAclInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetBucketAclWithContext.Lock()
	mock.calls.GetBucketAclWithContext = append(mock.calls.GetBucketAclWithContext, callInfo)
	locks3ClientMockGetBucketAclWithContext.Unlock()
	return mock.GetBucketAclWithContextFunc(in1, in2, in3...)
}

// GetBucketAclWithContextCalls gets all the calls that were made to GetBucketAclWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketAclWithContextCalls())
func (mock *s3ClientMock) GetBucketAclWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetBucketAclInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetBucketAclInput
		In3 []request.Option
	}
	locks3ClientMockGetBucketAclWithContext.RLock()
	calls = mock.calls.GetBucketAclWithContext
	locks3ClientMockGetBucketAclWithContext.RUnlock()
	return calls
}

// GetBucketAnalyticsConfiguration calls GetBucketAnalyticsConfigurationFunc.
func (mock *s3ClientMock) GetBucketAnalyticsConfiguration(in1 *s3.GetBucketAnalyticsConfigurationInput) (*s3.GetBucketAnalyticsConfigurationOutput, error) {
	if mock.GetBucketAnalyticsConfigurationFunc == nil {
		panic("s3ClientMock.GetBucketAnalyticsConfigurationFunc: method is nil but s3Client.GetBucketAnalyticsConfiguration was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketAnalyticsConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketAnalyticsConfiguration.Lock()
	mock.calls.GetBucketAnalyticsConfiguration = append(mock.calls.GetBucketAnalyticsConfiguration, callInfo)
	locks3ClientMockGetBucketAnalyticsConfiguration.Unlock()
	return mock.GetBucketAnalyticsConfigurationFunc(in1)
}

// GetBucketAnalyticsConfigurationCalls gets all the calls that were made to GetBucketAnalyticsConfiguration.
// Check the length with:
//     len(mockeds3Client.GetBucketAnalyticsConfigurationCalls())
func (mock *s3ClientMock) GetBucketAnalyticsConfigurationCalls() []struct {
	In1 *s3.GetBucketAnalyticsConfigurationInput
} {
	var calls []struct {
		In1 *s3.GetBucketAnalyticsConfigurationInput
	}
	locks3ClientMockGetBucketAnalyticsConfiguration.RLock()
	calls = mock.calls.GetBucketAnalyticsConfiguration
	locks3ClientMockGetBucketAnalyticsConfiguration.RUnlock()
	return calls
}

// GetBucketAnalyticsConfigurationRequest calls GetBucketAnalyticsConfigurationRequestFunc.
func (mock *s3ClientMock) GetBucketAnalyticsConfigurationRequest(in1 *s3.GetBucketAnalyticsConfigurationInput) (*request.Request, *s3.GetBucketAnalyticsConfigurationOutput) {
	if mock.GetBucketAnalyticsConfigurationRequestFunc == nil {
		panic("s3ClientMock.GetBucketAnalyticsConfigurationRequestFunc: method is nil but s3Client.GetBucketAnalyticsConfigurationRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketAnalyticsConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketAnalyticsConfigurationRequest.Lock()
	mock.calls.GetBucketAnalyticsConfigurationRequest = append(mock.calls.GetBucketAnalyticsConfigurationRequest, callInfo)
	locks3ClientMockGetBucketAnalyticsConfigurationRequest.Unlock()
	return mock.GetBucketAnalyticsConfigurationRequestFunc(in1)
}

// GetBucketAnalyticsConfigurationRequestCalls gets all the calls that were made to GetBucketAnalyticsConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketAnalyticsConfigurationRequestCalls())
func (mock *s3ClientMock) GetBucketAnalyticsConfigurationRequestCalls() []struct {
	In1 *s3.GetBucketAnalyticsConfigurationInput
} {
	var calls []struct {
		In1 *s3.GetBucketAnalyticsConfigurationInput
	}
	locks3ClientMockGetBucketAnalyticsConfigurationRequest.RLock()
	calls = mock.calls.GetBucketAnalyticsConfigurationRequest
	locks3ClientMockGetBucketAnalyticsConfigurationRequest.RUnlock()
	return calls
}

// GetBucketAnalyticsConfigurationWithContext calls GetBucketAnalyticsConfigurationWithContextFunc.
func (mock *s3ClientMock) GetBucketAnalyticsConfigurationWithContext(in1 context.Context, in2 *s3.GetBucketAnalyticsConfigurationInput, in3 ...request.Option) (*s3.GetBucketAnalyticsConfigurationOutput, error) {
	if mock.GetBucketAnalyticsConfigurationWithContextFunc == nil {
		panic("s3ClientMock.GetBucketAnalyticsConfigurationWithContextFunc: method is nil but s3Client.GetBucketAnalyticsConfigurationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetBucketAnalyticsConfigurationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetBucketAnalyticsConfigurationWithContext.Lock()
	mock.calls.GetBucketAnalyticsConfigurationWithContext = append(mock.calls.GetBucketAnalyticsConfigurationWithContext, callInfo)
	locks3ClientMockGetBucketAnalyticsConfigurationWithContext.Unlock()
	return mock.GetBucketAnalyticsConfigurationWithContextFunc(in1, in2, in3...)
}

// GetBucketAnalyticsConfigurationWithContextCalls gets all the calls that were made to GetBucketAnalyticsConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketAnalyticsConfigurationWithContextCalls())
func (mock *s3ClientMock) GetBucketAnalyticsConfigurationWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetBucketAnalyticsConfigurationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetBucketAnalyticsConfigurationInput
		In3 []request.Option
	}
	locks3ClientMockGetBucketAnalyticsConfigurationWithContext.RLock()
	calls = mock.calls.GetBucketAnalyticsConfigurationWithContext
	locks3ClientMockGetBucketAnalyticsConfigurationWithContext.RUnlock()
	return calls
}

// GetBucketCors calls GetBucketCorsFunc.
func (mock *s3ClientMock) GetBucketCors(in1 *s3.GetBucketCorsInput) (*s3.GetBucketCorsOutput, error) {
	if mock.GetBucketCorsFunc == nil {
		panic("s3ClientMock.GetBucketCorsFunc: method is nil but s3Client.GetBucketCors was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketCorsInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketCors.Lock()
	mock.calls.GetBucketCors = append(mock.calls.GetBucketCors, callInfo)
	locks3ClientMockGetBucketCors.Unlock()
	return mock.GetBucketCorsFunc(in1)
}

// GetBucketCorsCalls gets all the calls that were made to GetBucketCors.
// Check the length with:
//     len(mockeds3Client.GetBucketCorsCalls())
func (mock *s3ClientMock) GetBucketCorsCalls() []struct {
	In1 *s3.GetBucketCorsInput
} {
	var calls []struct {
		In1 *s3.GetBucketCorsInput
	}
	locks3ClientMockGetBucketCors.RLock()
	calls = mock.calls.GetBucketCors
	locks3ClientMockGetBucketCors.RUnlock()
	return calls
}

// GetBucketCorsRequest calls GetBucketCorsRequestFunc.
func (mock *s3ClientMock) GetBucketCorsRequest(in1 *s3.GetBucketCorsInput) (*request.Request, *s3.GetBucketCorsOutput) {
	if mock.GetBucketCorsRequestFunc == nil {
		panic("s3ClientMock.GetBucketCorsRequestFunc: method is nil but s3Client.GetBucketCorsRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketCorsInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketCorsRequest.Lock()
	mock.calls.GetBucketCorsRequest = append(mock.calls.GetBucketCorsRequest, callInfo)
	locks3ClientMockGetBucketCorsRequest.Unlock()
	return mock.GetBucketCorsRequestFunc(in1)
}

// GetBucketCorsRequestCalls gets all the calls that were made to GetBucketCorsRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketCorsRequestCalls())
func (mock *s3ClientMock) GetBucketCorsRequestCalls() []struct {
	In1 *s3.GetBucketCorsInput
} {
	var calls []struct {
		In1 *s3.GetBucketCorsInput
	}
	locks3ClientMockGetBucketCorsRequest.RLock()
	calls = mock.calls.GetBucketCorsRequest
	locks3ClientMockGetBucketCorsRequest.RUnlock()
	return calls
}

// GetBucketCorsWithContext calls GetBucketCorsWithContextFunc.
func (mock *s3ClientMock) GetBucketCorsWithContext(in1 context.Context, in2 *s3.GetBucketCorsInput, in3 ...request.Option) (*s3.GetBucketCorsOutput, error) {
	if mock.GetBucketCorsWithContextFunc == nil {
		panic("s3ClientMock.GetBucketCorsWithContextFunc: method is nil but s3Client.GetBucketCorsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetBucketCorsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetBucketCorsWithContext.Lock()
	mock.calls.GetBucketCorsWithContext = append(mock.calls.GetBucketCorsWithContext, callInfo)
	locks3ClientMockGetBucketCorsWithContext.Unlock()
	return mock.GetBucketCorsWithContextFunc(in1, in2, in3...)
}

// GetBucketCorsWithContextCalls gets all the calls that were made to GetBucketCorsWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketCorsWithContextCalls())
func (mock *s3ClientMock) GetBucketCorsWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetBucketCorsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetBucketCorsInput
		In3 []request.Option
	}
	locks3ClientMockGetBucketCorsWithContext.RLock()
	calls = mock.calls.GetBucketCorsWithContext
	locks3ClientMockGetBucketCorsWithContext.RUnlock()
	return calls
}

// GetBucketEncryption calls GetBucketEncryptionFunc.
func (mock *s3ClientMock) GetBucketEncryption(in1 *s3.GetBucketEncryptionInput) (*s3.GetBucketEncryptionOutput, error) {
	if mock.GetBucketEncryptionFunc == nil {
		panic("s3ClientMock.GetBucketEncryptionFunc: method is nil but s3Client.GetBucketEncryption was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketEncryptionInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketEncryption.Lock()
	mock.calls.GetBucketEncryption = append(mock.calls.GetBucketEncryption, callInfo)
	locks3ClientMockGetBucketEncryption.Unlock()
	return mock.GetBucketEncryptionFunc(in1)
}

// GetBucketEncryptionCalls gets all the calls that were made to GetBucketEncryption.
// Check the length with:
//     len(mockeds3Client.GetBucketEncryptionCalls())
func (mock *s3ClientMock) GetBucketEncryptionCalls() []struct {
	In1 *s3.GetBucketEncryptionInput
} {
	var calls []struct {
		In1 *s3.GetBucketEncryptionInput
	}
	locks3ClientMockGetBucketEncryption.RLock()
	calls = mock.calls.GetBucketEncryption
	locks3ClientMockGetBucketEncryption.RUnlock()
	return calls
}

// GetBucketEncryptionRequest calls GetBucketEncryptionRequestFunc.
func (mock *s3ClientMock) GetBucketEncryptionRequest(in1 *s3.GetBucketEncryptionInput) (*request.Request, *s3.GetBucketEncryptionOutput) {
	if mock.GetBucketEncryptionRequestFunc == nil {
		panic("s3ClientMock.GetBucketEncryptionRequestFunc: method is nil but s3Client.GetBucketEncryptionRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketEncryptionInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketEncryptionRequest.Lock()
	mock.calls.GetBucketEncryptionRequest = append(mock.calls.GetBucketEncryptionRequest, callInfo)
	locks3ClientMockGetBucketEncryptionRequest.Unlock()
	return mock.GetBucketEncryptionRequestFunc(in1)
}

// GetBucketEncryptionRequestCalls gets all the calls that were made to GetBucketEncryptionRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketEncryptionRequestCalls())
func (mock *s3ClientMock) GetBucketEncryptionRequestCalls() []struct {
	In1 *s3.GetBucketEncryptionInput
} {
	var calls []struct {
		In1 *s3.GetBucketEncryptionInput
	}
	locks3ClientMockGetBucketEncryptionRequest.RLock()
	calls = mock.calls.GetBucketEncryptionRequest
	locks3ClientMockGetBucketEncryptionRequest.RUnlock()
	return calls
}

// GetBucketEncryptionWithContext calls GetBucketEncryptionWithContextFunc.
func (mock *s3ClientMock) GetBucketEncryptionWithContext(in1 context.Context, in2 *s3.GetBucketEncryptionInput, in3 ...request.Option) (*s3.GetBucketEncryptionOutput, error) {
	if mock.GetBucketEncryptionWithContextFunc == nil {
		panic("s3ClientMock.GetBucketEncryptionWithContextFunc: method is nil but s3Client.GetBucketEncryptionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetBucketEncryptionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetBucketEncryptionWithContext.Lock()
	mock.calls.GetBucketEncryptionWithContext = append(mock.calls.GetBucketEncryptionWithContext, callInfo)
	locks3ClientMockGetBucketEncryptionWithContext.Unlock()
	return mock.GetBucketEncryptionWithContextFunc(in1, in2, in3...)
}

// GetBucketEncryptionWithContextCalls gets all the calls that were made to GetBucketEncryptionWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketEncryptionWithContextCalls())
func (mock *s3ClientMock) GetBucketEncryptionWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetBucketEncryptionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetBucketEncryptionInput
		In3 []request.Option
	}
	locks3ClientMockGetBucketEncryptionWithContext.RLock()
	calls = mock.calls.GetBucketEncryptionWithContext
	locks3ClientMockGetBucketEncryptionWithContext.RUnlock()
	return calls
}

// GetBucketInventoryConfiguration calls GetBucketInventoryConfigurationFunc.
func (mock *s3ClientMock) GetBucketInventoryConfiguration(in1 *s3.GetBucketInventoryConfigurationInput) (*s3.GetBucketInventoryConfigurationOutput, error) {
	if mock.GetBucketInventoryConfigurationFunc == nil {
		panic("s3ClientMock.GetBucketInventoryConfigurationFunc: method is nil but s3Client.GetBucketInventoryConfiguration was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketInventoryConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketInventoryConfiguration.Lock()
	mock.calls.GetBucketInventoryConfiguration = append(mock.calls.GetBucketInventoryConfiguration, callInfo)
	locks3ClientMockGetBucketInventoryConfiguration.Unlock()
	return mock.GetBucketInventoryConfigurationFunc(in1)
}

// GetBucketInventoryConfigurationCalls gets all the calls that were made to GetBucketInventoryConfiguration.
// Check the length with:
//     len(mockeds3Client.GetBucketInventoryConfigurationCalls())
func (mock *s3ClientMock) GetBucketInventoryConfigurationCalls() []struct {
	In1 *s3.GetBucketInventoryConfigurationInput
} {
	var calls []struct {
		In1 *s3.GetBucketInventoryConfigurationInput
	}
	locks3ClientMockGetBucketInventoryConfiguration.RLock()
	calls = mock.calls.GetBucketInventoryConfiguration
	locks3ClientMockGetBucketInventoryConfiguration.RUnlock()
	return calls
}

// GetBucketInventoryConfigurationRequest calls GetBucketInventoryConfigurationRequestFunc.
func (mock *s3ClientMock) GetBucketInventoryConfigurationRequest(in1 *s3.GetBucketInventoryConfigurationInput) (*request.Request, *s3.GetBucketInventoryConfigurationOutput) {
	if mock.GetBucketInventoryConfigurationRequestFunc == nil {
		panic("s3ClientMock.GetBucketInventoryConfigurationRequestFunc: method is nil but s3Client.GetBucketInventoryConfigurationRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketInventoryConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketInventoryConfigurationRequest.Lock()
	mock.calls.GetBucketInventoryConfigurationRequest = append(mock.calls.GetBucketInventoryConfigurationRequest, callInfo)
	locks3ClientMockGetBucketInventoryConfigurationRequest.Unlock()
	return mock.GetBucketInventoryConfigurationRequestFunc(in1)
}

// GetBucketInventoryConfigurationRequestCalls gets all the calls that were made to GetBucketInventoryConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketInventoryConfigurationRequestCalls())
func (mock *s3ClientMock) GetBucketInventoryConfigurationRequestCalls() []struct {
	In1 *s3.GetBucketInventoryConfigurationInput
} {
	var calls []struct {
		In1 *s3.GetBucketInventoryConfigurationInput
	}
	locks3ClientMockGetBucketInventoryConfigurationRequest.RLock()
	calls = mock.calls.GetBucketInventoryConfigurationRequest
	locks3ClientMockGetBucketInventoryConfigurationRequest.RUnlock()
	return calls
}

// GetBucketInventoryConfigurationWithContext calls GetBucketInventoryConfigurationWithContextFunc.
func (mock *s3ClientMock) GetBucketInventoryConfigurationWithContext(in1 context.Context, in2 *s3.GetBucketInventoryConfigurationInput, in3 ...request.Option) (*s3.GetBucketInventoryConfigurationOutput, error) {
	if mock.GetBucketInventoryConfigurationWithContextFunc == nil {
		panic("s3ClientMock.GetBucketInventoryConfigurationWithContextFunc: method is nil but s3Client.GetBucketInventoryConfigurationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetBucketInventoryConfigurationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetBucketInventoryConfigurationWithContext.Lock()
	mock.calls.GetBucketInventoryConfigurationWithContext = append(mock.calls.GetBucketInventoryConfigurationWithContext, callInfo)
	locks3ClientMockGetBucketInventoryConfigurationWithContext.Unlock()
	return mock.GetBucketInventoryConfigurationWithContextFunc(in1, in2, in3...)
}

// GetBucketInventoryConfigurationWithContextCalls gets all the calls that were made to GetBucketInventoryConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketInventoryConfigurationWithContextCalls())
func (mock *s3ClientMock) GetBucketInventoryConfigurationWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetBucketInventoryConfigurationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetBucketInventoryConfigurationInput
		In3 []request.Option
	}
	locks3ClientMockGetBucketInventoryConfigurationWithContext.RLock()
	calls = mock.calls.GetBucketInventoryConfigurationWithContext
	locks3ClientMockGetBucketInventoryConfigurationWithContext.RUnlock()
	return calls
}

// GetBucketLifecycle calls GetBucketLifecycleFunc.
func (mock *s3ClientMock) GetBucketLifecycle(in1 *s3.GetBucketLifecycleInput) (*s3.GetBucketLifecycleOutput, error) {
	if mock.GetBucketLifecycleFunc == nil {
		panic("s3ClientMock.GetBucketLifecycleFunc: method is nil but s3Client.GetBucketLifecycle was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketLifecycleInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketLifecycle.Lock()
	mock.calls.GetBucketLifecycle = append(mock.calls.GetBucketLifecycle, callInfo)
	locks3ClientMockGetBucketLifecycle.Unlock()
	return mock.GetBucketLifecycleFunc(in1)
}

// GetBucketLifecycleCalls gets all the calls that were made to GetBucketLifecycle.
// Check the length with:
//     len(mockeds3Client.GetBucketLifecycleCalls())
func (mock *s3ClientMock) GetBucketLifecycleCalls() []struct {
	In1 *s3.GetBucketLifecycleInput
} {
	var calls []struct {
		In1 *s3.GetBucketLifecycleInput
	}
	locks3ClientMockGetBucketLifecycle.RLock()
	calls = mock.calls.GetBucketLifecycle
	locks3ClientMockGetBucketLifecycle.RUnlock()
	return calls
}

// GetBucketLifecycleConfiguration calls GetBucketLifecycleConfigurationFunc.
func (mock *s3ClientMock) GetBucketLifecycleConfiguration(in1 *s3.GetBucketLifecycleConfigurationInput) (*s3.GetBucketLifecycleConfigurationOutput, error) {
	if mock.GetBucketLifecycleConfigurationFunc == nil {
		panic("s3ClientMock.GetBucketLifecycleConfigurationFunc: method is nil but s3Client.GetBucketLifecycleConfiguration was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketLifecycleConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketLifecycleConfiguration.Lock()
	mock.calls.GetBucketLifecycleConfiguration = append(mock.calls.GetBucketLifecycleConfiguration, callInfo)
	locks3ClientMockGetBucketLifecycleConfiguration.Unlock()
	return mock.GetBucketLifecycleConfigurationFunc(in1)
}

// GetBucketLifecycleConfigurationCalls gets all the calls that were made to GetBucketLifecycleConfiguration.
// Check the length with:
//     len(mockeds3Client.GetBucketLifecycleConfigurationCalls())
func (mock *s3ClientMock) GetBucketLifecycleConfigurationCalls() []struct {
	In1 *s3.GetBucketLifecycleConfigurationInput
} {
	var calls []struct {
		In1 *s3.GetBucketLifecycleConfigurationInput
	}
	locks3ClientMockGetBucketLifecycleConfiguration.RLock()
	calls = mock.calls.GetBucketLifecycleConfiguration
	locks3ClientMockGetBucketLifecycleConfiguration.RUnlock()
	return calls
}

// GetBucketLifecycleConfigurationRequest calls GetBucketLifecycleConfigurationRequestFunc.
func (mock *s3ClientMock) GetBucketLifecycleConfigurationRequest(in1 *s3.GetBucketLifecycleConfigurationInput) (*request.Request, *s3.GetBucketLifecycleConfigurationOutput) {
	if mock.GetBucketLifecycleConfigurationRequestFunc == nil {
		panic("s3ClientMock.GetBucketLifecycleConfigurationRequestFunc: method is nil but s3Client.GetBucketLifecycleConfigurationRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketLifecycleConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketLifecycleConfigurationRequest.Lock()
	mock.calls.GetBucketLifecycleConfigurationRequest = append(mock.calls.GetBucketLifecycleConfigurationRequest, callInfo)
	locks3ClientMockGetBucketLifecycleConfigurationRequest.Unlock()
	return mock.GetBucketLifecycleConfigurationRequestFunc(in1)
}

// GetBucketLifecycleConfigurationRequestCalls gets all the calls that were made to GetBucketLifecycleConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketLifecycleConfigurationRequestCalls())
func (mock *s3ClientMock) GetBucketLifecycleConfigurationRequestCalls() []struct {
	In1 *s3.GetBucketLifecycleConfigurationInput
} {
	var calls []struct {
		In1 *s3.GetBucketLifecycleConfigurationInput
	}
	locks3ClientMockGetBucketLifecycleConfigurationRequest.RLock()
	calls = mock.calls.GetBucketLifecycleConfigurationRequest
	locks3ClientMockGetBucketLifecycleConfigurationRequest.RUnlock()
	return calls
}

// GetBucketLifecycleConfigurationWithContext calls GetBucketLifecycleConfigurationWithContextFunc.
func (mock *s3ClientMock) GetBucketLifecycleConfigurationWithContext(in1 context.Context, in2 *s3.GetBucketLifecycleConfigurationInput, in3 ...request.Option) (*s3.GetBucketLifecycleConfigurationOutput, error) {
	if mock.GetBucketLifecycleConfigurationWithContextFunc == nil {
		panic("s3ClientMock.GetBucketLifecycleConfigurationWithContextFunc: method is nil but s3Client.GetBucketLifecycleConfigurationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetBucketLifecycleConfigurationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetBucketLifecycleConfigurationWithContext.Lock()
	mock.calls.GetBucketLifecycleConfigurationWithContext = append(mock.calls.GetBucketLifecycleConfigurationWithContext, callInfo)
	locks3ClientMockGetBucketLifecycleConfigurationWithContext.Unlock()
	return mock.GetBucketLifecycleConfigurationWithContextFunc(in1, in2, in3...)
}

// GetBucketLifecycleConfigurationWithContextCalls gets all the calls that were made to GetBucketLifecycleConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketLifecycleConfigurationWithContextCalls())
func (mock *s3ClientMock) GetBucketLifecycleConfigurationWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetBucketLifecycleConfigurationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetBucketLifecycleConfigurationInput
		In3 []request.Option
	}
	locks3ClientMockGetBucketLifecycleConfigurationWithContext.RLock()
	calls = mock.calls.GetBucketLifecycleConfigurationWithContext
	locks3ClientMockGetBucketLifecycleConfigurationWithContext.RUnlock()
	return calls
}

// GetBucketLifecycleRequest calls GetBucketLifecycleRequestFunc.
func (mock *s3ClientMock) GetBucketLifecycleRequest(in1 *s3.GetBucketLifecycleInput) (*request.Request, *s3.GetBucketLifecycleOutput) {
	if mock.GetBucketLifecycleRequestFunc == nil {
		panic("s3ClientMock.GetBucketLifecycleRequestFunc: method is nil but s3Client.GetBucketLifecycleRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketLifecycleInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketLifecycleRequest.Lock()
	mock.calls.GetBucketLifecycleRequest = append(mock.calls.GetBucketLifecycleRequest, callInfo)
	locks3ClientMockGetBucketLifecycleRequest.Unlock()
	return mock.GetBucketLifecycleRequestFunc(in1)
}

// GetBucketLifecycleRequestCalls gets all the calls that were made to GetBucketLifecycleRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketLifecycleRequestCalls())
func (mock *s3ClientMock) GetBucketLifecycleRequestCalls() []struct {
	In1 *s3.GetBucketLifecycleInput
} {
	var calls []struct {
		In1 *s3.GetBucketLifecycleInput
	}
	locks3ClientMockGetBucketLifecycleRequest.RLock()
	calls = mock.calls.GetBucketLifecycleRequest
	locks3ClientMockGetBucketLifecycleRequest.RUnlock()
	return calls
}

// GetBucketLifecycleWithContext calls GetBucketLifecycleWithContextFunc.
func (mock *s3ClientMock) GetBucketLifecycleWithContext(in1 context.Context, in2 *s3.GetBucketLifecycleInput, in3 ...request.Option) (*s3.GetBucketLifecycleOutput, error) {
	if mock.GetBucketLifecycleWithContextFunc == nil {
		panic("s3ClientMock.GetBucketLifecycleWithContextFunc: method is nil but s3Client.GetBucketLifecycleWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetBucketLifecycleInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetBucketLifecycleWithContext.Lock()
	mock.calls.GetBucketLifecycleWithContext = append(mock.calls.GetBucketLifecycleWithContext, callInfo)
	locks3ClientMockGetBucketLifecycleWithContext.Unlock()
	return mock.GetBucketLifecycleWithContextFunc(in1, in2, in3...)
}

// GetBucketLifecycleWithContextCalls gets all the calls that were made to GetBucketLifecycleWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketLifecycleWithContextCalls())
func (mock *s3ClientMock) GetBucketLifecycleWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetBucketLifecycleInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetBucketLifecycleInput
		In3 []request.Option
	}
	locks3ClientMockGetBucketLifecycleWithContext.RLock()
	calls = mock.calls.GetBucketLifecycleWithContext
	locks3ClientMockGetBucketLifecycleWithContext.RUnlock()
	return calls
}

// GetBucketLocation calls GetBucketLocationFunc.
func (mock *s3ClientMock) GetBucketLocation(in1 *s3.GetBucketLocationInput) (*s3.GetBucketLocationOutput, error) {
	if mock.GetBucketLocationFunc == nil {
		panic("s3ClientMock.GetBucketLocationFunc: method is nil but s3Client.GetBucketLocation was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketLocationInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketLocation.Lock()
	mock.calls.GetBucketLocation = append(mock.calls.GetBucketLocation, callInfo)
	locks3ClientMockGetBucketLocation.Unlock()
	return mock.GetBucketLocationFunc(in1)
}

// GetBucketLocationCalls gets all the calls that were made to GetBucketLocation.
// Check the length with:
//     len(mockeds3Client.GetBucketLocationCalls())
func (mock *s3ClientMock) GetBucketLocationCalls() []struct {
	In1 *s3.GetBucketLocationInput
} {
	var calls []struct {
		In1 *s3.GetBucketLocationInput
	}
	locks3ClientMockGetBucketLocation.RLock()
	calls = mock.calls.GetBucketLocation
	locks3ClientMockGetBucketLocation.RUnlock()
	return calls
}

// GetBucketLocationRequest calls GetBucketLocationRequestFunc.
func (mock *s3ClientMock) GetBucketLocationRequest(in1 *s3.GetBucketLocationInput) (*request.Request, *s3.GetBucketLocationOutput) {
	if mock.GetBucketLocationRequestFunc == nil {
		panic("s3ClientMock.GetBucketLocationRequestFunc: method is nil but s3Client.GetBucketLocationRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketLocationInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketLocationRequest.Lock()
	mock.calls.GetBucketLocationRequest = append(mock.calls.GetBucketLocationRequest, callInfo)
	locks3ClientMockGetBucketLocationRequest.Unlock()
	return mock.GetBucketLocationRequestFunc(in1)
}

// GetBucketLocationRequestCalls gets all the calls that were made to GetBucketLocationRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketLocationRequestCalls())
func (mock *s3ClientMock) GetBucketLocationRequestCalls() []struct {
	In1 *s3.GetBucketLocationInput
} {
	var calls []struct {
		In1 *s3.GetBucketLocationInput
	}
	locks3ClientMockGetBucketLocationRequest.RLock()
	calls = mock.calls.GetBucketLocationRequest
	locks3ClientMockGetBucketLocationRequest.RUnlock()
	return calls
}

// GetBucketLocationWithContext calls GetBucketLocationWithContextFunc.
func (mock *s3ClientMock) GetBucketLocationWithContext(in1 context.Context, in2 *s3.GetBucketLocationInput, in3 ...request.Option) (*s3.GetBucketLocationOutput, error) {
	if mock.GetBucketLocationWithContextFunc == nil {
		panic("s3ClientMock.GetBucketLocationWithContextFunc: method is nil but s3Client.GetBucketLocationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetBucketLocationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetBucketLocationWithContext.Lock()
	mock.calls.GetBucketLocationWithContext = append(mock.calls.GetBucketLocationWithContext, callInfo)
	locks3ClientMockGetBucketLocationWithContext.Unlock()
	return mock.GetBucketLocationWithContextFunc(in1, in2, in3...)
}

// GetBucketLocationWithContextCalls gets all the calls that were made to GetBucketLocationWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketLocationWithContextCalls())
func (mock *s3ClientMock) GetBucketLocationWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetBucketLocationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetBucketLocationInput
		In3 []request.Option
	}
	locks3ClientMockGetBucketLocationWithContext.RLock()
	calls = mock.calls.GetBucketLocationWithContext
	locks3ClientMockGetBucketLocationWithContext.RUnlock()
	return calls
}

// GetBucketLogging calls GetBucketLoggingFunc.
func (mock *s3ClientMock) GetBucketLogging(in1 *s3.GetBucketLoggingInput) (*s3.GetBucketLoggingOutput, error) {
	if mock.GetBucketLoggingFunc == nil {
		panic("s3ClientMock.GetBucketLoggingFunc: method is nil but s3Client.GetBucketLogging was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketLoggingInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketLogging.Lock()
	mock.calls.GetBucketLogging = append(mock.calls.GetBucketLogging, callInfo)
	locks3ClientMockGetBucketLogging.Unlock()
	return mock.GetBucketLoggingFunc(in1)
}

// GetBucketLoggingCalls gets all the calls that were made to GetBucketLogging.
// Check the length with:
//     len(mockeds3Client.GetBucketLoggingCalls())
func (mock *s3ClientMock) GetBucketLoggingCalls() []struct {
	In1 *s3.GetBucketLoggingInput
} {
	var calls []struct {
		In1 *s3.GetBucketLoggingInput
	}
	locks3ClientMockGetBucketLogging.RLock()
	calls = mock.calls.GetBucketLogging
	locks3ClientMockGetBucketLogging.RUnlock()
	return calls
}

// GetBucketLoggingRequest calls GetBucketLoggingRequestFunc.
func (mock *s3ClientMock) GetBucketLoggingRequest(in1 *s3.GetBucketLoggingInput) (*request.Request, *s3.GetBucketLoggingOutput) {
	if mock.GetBucketLoggingRequestFunc == nil {
		panic("s3ClientMock.GetBucketLoggingRequestFunc: method is nil but s3Client.GetBucketLoggingRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketLoggingInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketLoggingRequest.Lock()
	mock.calls.GetBucketLoggingRequest = append(mock.calls.GetBucketLoggingRequest, callInfo)
	locks3ClientMockGetBucketLoggingRequest.Unlock()
	return mock.GetBucketLoggingRequestFunc(in1)
}

// GetBucketLoggingRequestCalls gets all the calls that were made to GetBucketLoggingRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketLoggingRequestCalls())
func (mock *s3ClientMock) GetBucketLoggingRequestCalls() []struct {
	In1 *s3.GetBucketLoggingInput
} {
	var calls []struct {
		In1 *s3.GetBucketLoggingInput
	}
	locks3ClientMockGetBucketLoggingRequest.RLock()
	calls = mock.calls.GetBucketLoggingRequest
	locks3ClientMockGetBucketLoggingRequest.RUnlock()
	return calls
}

// GetBucketLoggingWithContext calls GetBucketLoggingWithContextFunc.
func (mock *s3ClientMock) GetBucketLoggingWithContext(in1 context.Context, in2 *s3.GetBucketLoggingInput, in3 ...request.Option) (*s3.GetBucketLoggingOutput, error) {
	if mock.GetBucketLoggingWithContextFunc == nil {
		panic("s3ClientMock.GetBucketLoggingWithContextFunc: method is nil but s3Client.GetBucketLoggingWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetBucketLoggingInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetBucketLoggingWithContext.Lock()
	mock.calls.GetBucketLoggingWithContext = append(mock.calls.GetBucketLoggingWithContext, callInfo)
	locks3ClientMockGetBucketLoggingWithContext.Unlock()
	return mock.GetBucketLoggingWithContextFunc(in1, in2, in3...)
}

// GetBucketLoggingWithContextCalls gets all the calls that were made to GetBucketLoggingWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketLoggingWithContextCalls())
func (mock *s3ClientMock) GetBucketLoggingWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetBucketLoggingInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetBucketLoggingInput
		In3 []request.Option
	}
	locks3ClientMockGetBucketLoggingWithContext.RLock()
	calls = mock.calls.GetBucketLoggingWithContext
	locks3ClientMockGetBucketLoggingWithContext.RUnlock()
	return calls
}

// GetBucketMetricsConfiguration calls GetBucketMetricsConfigurationFunc.
func (mock *s3ClientMock) GetBucketMetricsConfiguration(in1 *s3.GetBucketMetricsConfigurationInput) (*s3.GetBucketMetricsConfigurationOutput, error) {
	if mock.GetBucketMetricsConfigurationFunc == nil {
		panic("s3ClientMock.GetBucketMetricsConfigurationFunc: method is nil but s3Client.GetBucketMetricsConfiguration was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketMetricsConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketMetricsConfiguration.Lock()
	mock.calls.GetBucketMetricsConfiguration = append(mock.calls.GetBucketMetricsConfiguration, callInfo)
	locks3ClientMockGetBucketMetricsConfiguration.Unlock()
	return mock.GetBucketMetricsConfigurationFunc(in1)
}

// GetBucketMetricsConfigurationCalls gets all the calls that were made to GetBucketMetricsConfiguration.
// Check the length with:
//     len(mockeds3Client.GetBucketMetricsConfigurationCalls())
func (mock *s3ClientMock) GetBucketMetricsConfigurationCalls() []struct {
	In1 *s3.GetBucketMetricsConfigurationInput
} {
	var calls []struct {
		In1 *s3.GetBucketMetricsConfigurationInput
	}
	locks3ClientMockGetBucketMetricsConfiguration.RLock()
	calls = mock.calls.GetBucketMetricsConfiguration
	locks3ClientMockGetBucketMetricsConfiguration.RUnlock()
	return calls
}

// GetBucketMetricsConfigurationRequest calls GetBucketMetricsConfigurationRequestFunc.
func (mock *s3ClientMock) GetBucketMetricsConfigurationRequest(in1 *s3.GetBucketMetricsConfigurationInput) (*request.Request, *s3.GetBucketMetricsConfigurationOutput) {
	if mock.GetBucketMetricsConfigurationRequestFunc == nil {
		panic("s3ClientMock.GetBucketMetricsConfigurationRequestFunc: method is nil but s3Client.GetBucketMetricsConfigurationRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketMetricsConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketMetricsConfigurationRequest.Lock()
	mock.calls.GetBucketMetricsConfigurationRequest = append(mock.calls.GetBucketMetricsConfigurationRequest, callInfo)
	locks3ClientMockGetBucketMetricsConfigurationRequest.Unlock()
	return mock.GetBucketMetricsConfigurationRequestFunc(in1)
}

// GetBucketMetricsConfigurationRequestCalls gets all the calls that were made to GetBucketMetricsConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketMetricsConfigurationRequestCalls())
func (mock *s3ClientMock) GetBucketMetricsConfigurationRequestCalls() []struct {
	In1 *s3.GetBucketMetricsConfigurationInput
} {
	var calls []struct {
		In1 *s3.GetBucketMetricsConfigurationInput
	}
	locks3ClientMockGetBucketMetricsConfigurationRequest.RLock()
	calls = mock.calls.GetBucketMetricsConfigurationRequest
	locks3ClientMockGetBucketMetricsConfigurationRequest.RUnlock()
	return calls
}

// GetBucketMetricsConfigurationWithContext calls GetBucketMetricsConfigurationWithContextFunc.
func (mock *s3ClientMock) GetBucketMetricsConfigurationWithContext(in1 context.Context, in2 *s3.GetBucketMetricsConfigurationInput, in3 ...request.Option) (*s3.GetBucketMetricsConfigurationOutput, error) {
	if mock.GetBucketMetricsConfigurationWithContextFunc == nil {
		panic("s3ClientMock.GetBucketMetricsConfigurationWithContextFunc: method is nil but s3Client.GetBucketMetricsConfigurationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetBucketMetricsConfigurationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetBucketMetricsConfigurationWithContext.Lock()
	mock.calls.GetBucketMetricsConfigurationWithContext = append(mock.calls.GetBucketMetricsConfigurationWithContext, callInfo)
	locks3ClientMockGetBucketMetricsConfigurationWithContext.Unlock()
	return mock.GetBucketMetricsConfigurationWithContextFunc(in1, in2, in3...)
}

// GetBucketMetricsConfigurationWithContextCalls gets all the calls that were made to GetBucketMetricsConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketMetricsConfigurationWithContextCalls())
func (mock *s3ClientMock) GetBucketMetricsConfigurationWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetBucketMetricsConfigurationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetBucketMetricsConfigurationInput
		In3 []request.Option
	}
	locks3ClientMockGetBucketMetricsConfigurationWithContext.RLock()
	calls = mock.calls.GetBucketMetricsConfigurationWithContext
	locks3ClientMockGetBucketMetricsConfigurationWithContext.RUnlock()
	return calls
}

// GetBucketNotification calls GetBucketNotificationFunc.
func (mock *s3ClientMock) GetBucketNotification(in1 *s3.GetBucketNotificationConfigurationRequest) (*s3.NotificationConfigurationDeprecated, error) {
	if mock.GetBucketNotificationFunc == nil {
		panic("s3ClientMock.GetBucketNotificationFunc: method is nil but s3Client.GetBucketNotification was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketNotificationConfigurationRequest
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketNotification.Lock()
	mock.calls.GetBucketNotification = append(mock.calls.GetBucketNotification, callInfo)
	locks3ClientMockGetBucketNotification.Unlock()
	return mock.GetBucketNotificationFunc(in1)
}

// GetBucketNotificationCalls gets all the calls that were made to GetBucketNotification.
// Check the length with:
//     len(mockeds3Client.GetBucketNotificationCalls())
func (mock *s3ClientMock) GetBucketNotificationCalls() []struct {
	In1 *s3.GetBucketNotificationConfigurationRequest
} {
	var calls []struct {
		In1 *s3.GetBucketNotificationConfigurationRequest
	}
	locks3ClientMockGetBucketNotification.RLock()
	calls = mock.calls.GetBucketNotification
	locks3ClientMockGetBucketNotification.RUnlock()
	return calls
}

// GetBucketNotificationConfiguration calls GetBucketNotificationConfigurationFunc.
func (mock *s3ClientMock) GetBucketNotificationConfiguration(in1 *s3.GetBucketNotificationConfigurationRequest) (*s3.NotificationConfiguration, error) {
	if mock.GetBucketNotificationConfigurationFunc == nil {
		panic("s3ClientMock.GetBucketNotificationConfigurationFunc: method is nil but s3Client.GetBucketNotificationConfiguration was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketNotificationConfigurationRequest
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketNotificationConfiguration.Lock()
	mock.calls.GetBucketNotificationConfiguration = append(mock.calls.GetBucketNotificationConfiguration, callInfo)
	locks3ClientMockGetBucketNotificationConfiguration.Unlock()
	return mock.GetBucketNotificationConfigurationFunc(in1)
}

// GetBucketNotificationConfigurationCalls gets all the calls that were made to GetBucketNotificationConfiguration.
// Check the length with:
//     len(mockeds3Client.GetBucketNotificationConfigurationCalls())
func (mock *s3ClientMock) GetBucketNotificationConfigurationCalls() []struct {
	In1 *s3.GetBucketNotificationConfigurationRequest
} {
	var calls []struct {
		In1 *s3.GetBucketNotificationConfigurationRequest
	}
	locks3ClientMockGetBucketNotificationConfiguration.RLock()
	calls = mock.calls.GetBucketNotificationConfiguration
	locks3ClientMockGetBucketNotificationConfiguration.RUnlock()
	return calls
}

// GetBucketNotificationConfigurationRequest calls GetBucketNotificationConfigurationRequestFunc.
func (mock *s3ClientMock) GetBucketNotificationConfigurationRequest(in1 *s3.GetBucketNotificationConfigurationRequest) (*request.Request, *s3.NotificationConfiguration) {
	if mock.GetBucketNotificationConfigurationRequestFunc == nil {
		panic("s3ClientMock.GetBucketNotificationConfigurationRequestFunc: method is nil but s3Client.GetBucketNotificationConfigurationRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketNotificationConfigurationRequest
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketNotificationConfigurationRequest.Lock()
	mock.calls.GetBucketNotificationConfigurationRequest = append(mock.calls.GetBucketNotificationConfigurationRequest, callInfo)
	locks3ClientMockGetBucketNotificationConfigurationRequest.Unlock()
	return mock.GetBucketNotificationConfigurationRequestFunc(in1)
}

// GetBucketNotificationConfigurationRequestCalls gets all the calls that were made to GetBucketNotificationConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketNotificationConfigurationRequestCalls())
func (mock *s3ClientMock) GetBucketNotificationConfigurationRequestCalls() []struct {
	In1 *s3.GetBucketNotificationConfigurationRequest
} {
	var calls []struct {
		In1 *s3.GetBucketNotificationConfigurationRequest
	}
	locks3ClientMockGetBucketNotificationConfigurationRequest.RLock()
	calls = mock.calls.GetBucketNotificationConfigurationRequest
	locks3ClientMockGetBucketNotificationConfigurationRequest.RUnlock()
	return calls
}

// GetBucketNotificationConfigurationWithContext calls GetBucketNotificationConfigurationWithContextFunc.
func (mock *s3ClientMock) GetBucketNotificationConfigurationWithContext(in1 context.Context, in2 *s3.GetBucketNotificationConfigurationRequest, in3 ...request.Option) (*s3.NotificationConfiguration, error) {
	if mock.GetBucketNotificationConfigurationWithContextFunc == nil {
		panic("s3ClientMock.GetBucketNotificationConfigurationWithContextFunc: method is nil but s3Client.GetBucketNotificationConfigurationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetBucketNotificationConfigurationRequest
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetBucketNotificationConfigurationWithContext.Lock()
	mock.calls.GetBucketNotificationConfigurationWithContext = append(mock.calls.GetBucketNotificationConfigurationWithContext, callInfo)
	locks3ClientMockGetBucketNotificationConfigurationWithContext.Unlock()
	return mock.GetBucketNotificationConfigurationWithContextFunc(in1, in2, in3...)
}

// GetBucketNotificationConfigurationWithContextCalls gets all the calls that were made to GetBucketNotificationConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketNotificationConfigurationWithContextCalls())
func (mock *s3ClientMock) GetBucketNotificationConfigurationWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetBucketNotificationConfigurationRequest
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetBucketNotificationConfigurationRequest
		In3 []request.Option
	}
	locks3ClientMockGetBucketNotificationConfigurationWithContext.RLock()
	calls = mock.calls.GetBucketNotificationConfigurationWithContext
	locks3ClientMockGetBucketNotificationConfigurationWithContext.RUnlock()
	return calls
}

// GetBucketNotificationRequest calls GetBucketNotificationRequestFunc.
func (mock *s3ClientMock) GetBucketNotificationRequest(in1 *s3.GetBucketNotificationConfigurationRequest) (*request.Request, *s3.NotificationConfigurationDeprecated) {
	if mock.GetBucketNotificationRequestFunc == nil {
		panic("s3ClientMock.GetBucketNotificationRequestFunc: method is nil but s3Client.GetBucketNotificationRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketNotificationConfigurationRequest
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketNotificationRequest.Lock()
	mock.calls.GetBucketNotificationRequest = append(mock.calls.GetBucketNotificationRequest, callInfo)
	locks3ClientMockGetBucketNotificationRequest.Unlock()
	return mock.GetBucketNotificationRequestFunc(in1)
}

// GetBucketNotificationRequestCalls gets all the calls that were made to GetBucketNotificationRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketNotificationRequestCalls())
func (mock *s3ClientMock) GetBucketNotificationRequestCalls() []struct {
	In1 *s3.GetBucketNotificationConfigurationRequest
} {
	var calls []struct {
		In1 *s3.GetBucketNotificationConfigurationRequest
	}
	locks3ClientMockGetBucketNotificationRequest.RLock()
	calls = mock.calls.GetBucketNotificationRequest
	locks3ClientMockGetBucketNotificationRequest.RUnlock()
	return calls
}

// GetBucketNotificationWithContext calls GetBucketNotificationWithContextFunc.
func (mock *s3ClientMock) GetBucketNotificationWithContext(in1 context.Context, in2 *s3.GetBucketNotificationConfigurationRequest, in3 ...request.Option) (*s3.NotificationConfigurationDeprecated, error) {
	if mock.GetBucketNotificationWithContextFunc == nil {
		panic("s3ClientMock.GetBucketNotificationWithContextFunc: method is nil but s3Client.GetBucketNotificationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetBucketNotificationConfigurationRequest
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetBucketNotificationWithContext.Lock()
	mock.calls.GetBucketNotificationWithContext = append(mock.calls.GetBucketNotificationWithContext, callInfo)
	locks3ClientMockGetBucketNotificationWithContext.Unlock()
	return mock.GetBucketNotificationWithContextFunc(in1, in2, in3...)
}

// GetBucketNotificationWithContextCalls gets all the calls that were made to GetBucketNotificationWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketNotificationWithContextCalls())
func (mock *s3ClientMock) GetBucketNotificationWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetBucketNotificationConfigurationRequest
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetBucketNotificationConfigurationRequest
		In3 []request.Option
	}
	locks3ClientMockGetBucketNotificationWithContext.RLock()
	calls = mock.calls.GetBucketNotificationWithContext
	locks3ClientMockGetBucketNotificationWithContext.RUnlock()
	return calls
}

// GetBucketPolicy calls GetBucketPolicyFunc.
func (mock *s3ClientMock) GetBucketPolicy(in1 *s3.GetBucketPolicyInput) (*s3.GetBucketPolicyOutput, error) {
	if mock.GetBucketPolicyFunc == nil {
		panic("s3ClientMock.GetBucketPolicyFunc: method is nil but s3Client.GetBucketPolicy was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketPolicyInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketPolicy.Lock()
	mock.calls.GetBucketPolicy = append(mock.calls.GetBucketPolicy, callInfo)
	locks3ClientMockGetBucketPolicy.Unlock()
	return mock.GetBucketPolicyFunc(in1)
}

// GetBucketPolicyCalls gets all the calls that were made to GetBucketPolicy.
// Check the length with:
//     len(mockeds3Client.GetBucketPolicyCalls())
func (mock *s3ClientMock) GetBucketPolicyCalls() []struct {
	In1 *s3.GetBucketPolicyInput
} {
	var calls []struct {
		In1 *s3.GetBucketPolicyInput
	}
	locks3ClientMockGetBucketPolicy.RLock()
	calls = mock.calls.GetBucketPolicy
	locks3ClientMockGetBucketPolicy.RUnlock()
	return calls
}

// GetBucketPolicyRequest calls GetBucketPolicyRequestFunc.
func (mock *s3ClientMock) GetBucketPolicyRequest(in1 *s3.GetBucketPolicyInput) (*request.Request, *s3.GetBucketPolicyOutput) {
	if mock.GetBucketPolicyRequestFunc == nil {
		panic("s3ClientMock.GetBucketPolicyRequestFunc: method is nil but s3Client.GetBucketPolicyRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketPolicyInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketPolicyRequest.Lock()
	mock.calls.GetBucketPolicyRequest = append(mock.calls.GetBucketPolicyRequest, callInfo)
	locks3ClientMockGetBucketPolicyRequest.Unlock()
	return mock.GetBucketPolicyRequestFunc(in1)
}

// GetBucketPolicyRequestCalls gets all the calls that were made to GetBucketPolicyRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketPolicyRequestCalls())
func (mock *s3ClientMock) GetBucketPolicyRequestCalls() []struct {
	In1 *s3.GetBucketPolicyInput
} {
	var calls []struct {
		In1 *s3.GetBucketPolicyInput
	}
	locks3ClientMockGetBucketPolicyRequest.RLock()
	calls = mock.calls.GetBucketPolicyRequest
	locks3ClientMockGetBucketPolicyRequest.RUnlock()
	return calls
}

// GetBucketPolicyStatus calls GetBucketPolicyStatusFunc.
func (mock *s3ClientMock) GetBucketPolicyStatus(in1 *s3.GetBucketPolicyStatusInput) (*s3.GetBucketPolicyStatusOutput, error) {
	if mock.GetBucketPolicyStatusFunc == nil {
		panic("s3ClientMock.GetBucketPolicyStatusFunc: method is nil but s3Client.GetBucketPolicyStatus was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketPolicyStatusInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketPolicyStatus.Lock()
	mock.calls.GetBucketPolicyStatus = append(mock.calls.GetBucketPolicyStatus, callInfo)
	locks3ClientMockGetBucketPolicyStatus.Unlock()
	return mock.GetBucketPolicyStatusFunc(in1)
}

// GetBucketPolicyStatusCalls gets all the calls that were made to GetBucketPolicyStatus.
// Check the length with:
//     len(mockeds3Client.GetBucketPolicyStatusCalls())
func (mock *s3ClientMock) GetBucketPolicyStatusCalls() []struct {
	In1 *s3.GetBucketPolicyStatusInput
} {
	var calls []struct {
		In1 *s3.GetBucketPolicyStatusInput
	}
	locks3ClientMockGetBucketPolicyStatus.RLock()
	calls = mock.calls.GetBucketPolicyStatus
	locks3ClientMockGetBucketPolicyStatus.RUnlock()
	return calls
}

// GetBucketPolicyStatusRequest calls GetBucketPolicyStatusRequestFunc.
func (mock *s3ClientMock) GetBucketPolicyStatusRequest(in1 *s3.GetBucketPolicyStatusInput) (*request.Request, *s3.GetBucketPolicyStatusOutput) {
	if mock.GetBucketPolicyStatusRequestFunc == nil {
		panic("s3ClientMock.GetBucketPolicyStatusRequestFunc: method is nil but s3Client.GetBucketPolicyStatusRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketPolicyStatusInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketPolicyStatusRequest.Lock()
	mock.calls.GetBucketPolicyStatusRequest = append(mock.calls.GetBucketPolicyStatusRequest, callInfo)
	locks3ClientMockGetBucketPolicyStatusRequest.Unlock()
	return mock.GetBucketPolicyStatusRequestFunc(in1)
}

// GetBucketPolicyStatusRequestCalls gets all the calls that were made to GetBucketPolicyStatusRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketPolicyStatusRequestCalls())
func (mock *s3ClientMock) GetBucketPolicyStatusRequestCalls() []struct {
	In1 *s3.GetBucketPolicyStatusInput
} {
	var calls []struct {
		In1 *s3.GetBucketPolicyStatusInput
	}
	locks3ClientMockGetBucketPolicyStatusRequest.RLock()
	calls = mock.calls.GetBucketPolicyStatusRequest
	locks3ClientMockGetBucketPolicyStatusRequest.RUnlock()
	return calls
}

// GetBucketPolicyStatusWithContext calls GetBucketPolicyStatusWithContextFunc.
func (mock *s3ClientMock) GetBucketPolicyStatusWithContext(in1 context.Context, in2 *s3.GetBucketPolicyStatusInput, in3 ...request.Option) (*s3.GetBucketPolicyStatusOutput, error) {
	if mock.GetBucketPolicyStatusWithContextFunc == nil {
		panic("s3ClientMock.GetBucketPolicyStatusWithContextFunc: method is nil but s3Client.GetBucketPolicyStatusWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetBucketPolicyStatusInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetBucketPolicyStatusWithContext.Lock()
	mock.calls.GetBucketPolicyStatusWithContext = append(mock.calls.GetBucketPolicyStatusWithContext, callInfo)
	locks3ClientMockGetBucketPolicyStatusWithContext.Unlock()
	return mock.GetBucketPolicyStatusWithContextFunc(in1, in2, in3...)
}

// GetBucketPolicyStatusWithContextCalls gets all the calls that were made to GetBucketPolicyStatusWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketPolicyStatusWithContextCalls())
func (mock *s3ClientMock) GetBucketPolicyStatusWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetBucketPolicyStatusInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetBucketPolicyStatusInput
		In3 []request.Option
	}
	locks3ClientMockGetBucketPolicyStatusWithContext.RLock()
	calls = mock.calls.GetBucketPolicyStatusWithContext
	locks3ClientMockGetBucketPolicyStatusWithContext.RUnlock()
	return calls
}

// GetBucketPolicyWithContext calls GetBucketPolicyWithContextFunc.
func (mock *s3ClientMock) GetBucketPolicyWithContext(in1 context.Context, in2 *s3.GetBucketPolicyInput, in3 ...request.Option) (*s3.GetBucketPolicyOutput, error) {
	if mock.GetBucketPolicyWithContextFunc == nil {
		panic("s3ClientMock.GetBucketPolicyWithContextFunc: method is nil but s3Client.GetBucketPolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetBucketPolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetBucketPolicyWithContext.Lock()
	mock.calls.GetBucketPolicyWithContext = append(mock.calls.GetBucketPolicyWithContext, callInfo)
	locks3ClientMockGetBucketPolicyWithContext.Unlock()
	return mock.GetBucketPolicyWithContextFunc(in1, in2, in3...)
}

// GetBucketPolicyWithContextCalls gets all the calls that were made to GetBucketPolicyWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketPolicyWithContextCalls())
func (mock *s3ClientMock) GetBucketPolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetBucketPolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetBucketPolicyInput
		In3 []request.Option
	}
	locks3ClientMockGetBucketPolicyWithContext.RLock()
	calls = mock.calls.GetBucketPolicyWithContext
	locks3ClientMockGetBucketPolicyWithContext.RUnlock()
	return calls
}

// GetBucketReplication calls GetBucketReplicationFunc.
func (mock *s3ClientMock) GetBucketReplication(in1 *s3.GetBucketReplicationInput) (*s3.GetBucketReplicationOutput, error) {
	if mock.GetBucketReplicationFunc == nil {
		panic("s3ClientMock.GetBucketReplicationFunc: method is nil but s3Client.GetBucketReplication was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketReplicationInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketReplication.Lock()
	mock.calls.GetBucketReplication = append(mock.calls.GetBucketReplication, callInfo)
	locks3ClientMockGetBucketReplication.Unlock()
	return mock.GetBucketReplicationFunc(in1)
}

// GetBucketReplicationCalls gets all the calls that were made to GetBucketReplication.
// Check the length with:
//     len(mockeds3Client.GetBucketReplicationCalls())
func (mock *s3ClientMock) GetBucketReplicationCalls() []struct {
	In1 *s3.GetBucketReplicationInput
} {
	var calls []struct {
		In1 *s3.GetBucketReplicationInput
	}
	locks3ClientMockGetBucketReplication.RLock()
	calls = mock.calls.GetBucketReplication
	locks3ClientMockGetBucketReplication.RUnlock()
	return calls
}

// GetBucketReplicationRequest calls GetBucketReplicationRequestFunc.
func (mock *s3ClientMock) GetBucketReplicationRequest(in1 *s3.GetBucketReplicationInput) (*request.Request, *s3.GetBucketReplicationOutput) {
	if mock.GetBucketReplicationRequestFunc == nil {
		panic("s3ClientMock.GetBucketReplicationRequestFunc: method is nil but s3Client.GetBucketReplicationRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketReplicationInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketReplicationRequest.Lock()
	mock.calls.GetBucketReplicationRequest = append(mock.calls.GetBucketReplicationRequest, callInfo)
	locks3ClientMockGetBucketReplicationRequest.Unlock()
	return mock.GetBucketReplicationRequestFunc(in1)
}

// GetBucketReplicationRequestCalls gets all the calls that were made to GetBucketReplicationRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketReplicationRequestCalls())
func (mock *s3ClientMock) GetBucketReplicationRequestCalls() []struct {
	In1 *s3.GetBucketReplicationInput
} {
	var calls []struct {
		In1 *s3.GetBucketReplicationInput
	}
	locks3ClientMockGetBucketReplicationRequest.RLock()
	calls = mock.calls.GetBucketReplicationRequest
	locks3ClientMockGetBucketReplicationRequest.RUnlock()
	return calls
}

// GetBucketReplicationWithContext calls GetBucketReplicationWithContextFunc.
func (mock *s3ClientMock) GetBucketReplicationWithContext(in1 context.Context, in2 *s3.GetBucketReplicationInput, in3 ...request.Option) (*s3.GetBucketReplicationOutput, error) {
	if mock.GetBucketReplicationWithContextFunc == nil {
		panic("s3ClientMock.GetBucketReplicationWithContextFunc: method is nil but s3Client.GetBucketReplicationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetBucketReplicationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetBucketReplicationWithContext.Lock()
	mock.calls.GetBucketReplicationWithContext = append(mock.calls.GetBucketReplicationWithContext, callInfo)
	locks3ClientMockGetBucketReplicationWithContext.Unlock()
	return mock.GetBucketReplicationWithContextFunc(in1, in2, in3...)
}

// GetBucketReplicationWithContextCalls gets all the calls that were made to GetBucketReplicationWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketReplicationWithContextCalls())
func (mock *s3ClientMock) GetBucketReplicationWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetBucketReplicationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetBucketReplicationInput
		In3 []request.Option
	}
	locks3ClientMockGetBucketReplicationWithContext.RLock()
	calls = mock.calls.GetBucketReplicationWithContext
	locks3ClientMockGetBucketReplicationWithContext.RUnlock()
	return calls
}

// GetBucketRequestPayment calls GetBucketRequestPaymentFunc.
func (mock *s3ClientMock) GetBucketRequestPayment(in1 *s3.GetBucketRequestPaymentInput) (*s3.GetBucketRequestPaymentOutput, error) {
	if mock.GetBucketRequestPaymentFunc == nil {
		panic("s3ClientMock.GetBucketRequestPaymentFunc: method is nil but s3Client.GetBucketRequestPayment was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketRequestPaymentInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketRequestPayment.Lock()
	mock.calls.GetBucketRequestPayment = append(mock.calls.GetBucketRequestPayment, callInfo)
	locks3ClientMockGetBucketRequestPayment.Unlock()
	return mock.GetBucketRequestPaymentFunc(in1)
}

// GetBucketRequestPaymentCalls gets all the calls that were made to GetBucketRequestPayment.
// Check the length with:
//     len(mockeds3Client.GetBucketRequestPaymentCalls())
func (mock *s3ClientMock) GetBucketRequestPaymentCalls() []struct {
	In1 *s3.GetBucketRequestPaymentInput
} {
	var calls []struct {
		In1 *s3.GetBucketRequestPaymentInput
	}
	locks3ClientMockGetBucketRequestPayment.RLock()
	calls = mock.calls.GetBucketRequestPayment
	locks3ClientMockGetBucketRequestPayment.RUnlock()
	return calls
}

// GetBucketRequestPaymentRequest calls GetBucketRequestPaymentRequestFunc.
func (mock *s3ClientMock) GetBucketRequestPaymentRequest(in1 *s3.GetBucketRequestPaymentInput) (*request.Request, *s3.GetBucketRequestPaymentOutput) {
	if mock.GetBucketRequestPaymentRequestFunc == nil {
		panic("s3ClientMock.GetBucketRequestPaymentRequestFunc: method is nil but s3Client.GetBucketRequestPaymentRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketRequestPaymentInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketRequestPaymentRequest.Lock()
	mock.calls.GetBucketRequestPaymentRequest = append(mock.calls.GetBucketRequestPaymentRequest, callInfo)
	locks3ClientMockGetBucketRequestPaymentRequest.Unlock()
	return mock.GetBucketRequestPaymentRequestFunc(in1)
}

// GetBucketRequestPaymentRequestCalls gets all the calls that were made to GetBucketRequestPaymentRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketRequestPaymentRequestCalls())
func (mock *s3ClientMock) GetBucketRequestPaymentRequestCalls() []struct {
	In1 *s3.GetBucketRequestPaymentInput
} {
	var calls []struct {
		In1 *s3.GetBucketRequestPaymentInput
	}
	locks3ClientMockGetBucketRequestPaymentRequest.RLock()
	calls = mock.calls.GetBucketRequestPaymentRequest
	locks3ClientMockGetBucketRequestPaymentRequest.RUnlock()
	return calls
}

// GetBucketRequestPaymentWithContext calls GetBucketRequestPaymentWithContextFunc.
func (mock *s3ClientMock) GetBucketRequestPaymentWithContext(in1 context.Context, in2 *s3.GetBucketRequestPaymentInput, in3 ...request.Option) (*s3.GetBucketRequestPaymentOutput, error) {
	if mock.GetBucketRequestPaymentWithContextFunc == nil {
		panic("s3ClientMock.GetBucketRequestPaymentWithContextFunc: method is nil but s3Client.GetBucketRequestPaymentWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetBucketRequestPaymentInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetBucketRequestPaymentWithContext.Lock()
	mock.calls.GetBucketRequestPaymentWithContext = append(mock.calls.GetBucketRequestPaymentWithContext, callInfo)
	locks3ClientMockGetBucketRequestPaymentWithContext.Unlock()
	return mock.GetBucketRequestPaymentWithContextFunc(in1, in2, in3...)
}

// GetBucketRequestPaymentWithContextCalls gets all the calls that were made to GetBucketRequestPaymentWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketRequestPaymentWithContextCalls())
func (mock *s3ClientMock) GetBucketRequestPaymentWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetBucketRequestPaymentInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetBucketRequestPaymentInput
		In3 []request.Option
	}
	locks3ClientMockGetBucketRequestPaymentWithContext.RLock()
	calls = mock.calls.GetBucketRequestPaymentWithContext
	locks3ClientMockGetBucketRequestPaymentWithContext.RUnlock()
	return calls
}

// GetBucketTagging calls GetBucketTaggingFunc.
func (mock *s3ClientMock) GetBucketTagging(in1 *s3.GetBucketTaggingInput) (*s3.GetBucketTaggingOutput, error) {
	if mock.GetBucketTaggingFunc == nil {
		panic("s3ClientMock.GetBucketTaggingFunc: method is nil but s3Client.GetBucketTagging was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketTaggingInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketTagging.Lock()
	mock.calls.GetBucketTagging = append(mock.calls.GetBucketTagging, callInfo)
	locks3ClientMockGetBucketTagging.Unlock()
	return mock.GetBucketTaggingFunc(in1)
}

// GetBucketTaggingCalls gets all the calls that were made to GetBucketTagging.
// Check the length with:
//     len(mockeds3Client.GetBucketTaggingCalls())
func (mock *s3ClientMock) GetBucketTaggingCalls() []struct {
	In1 *s3.GetBucketTaggingInput
} {
	var calls []struct {
		In1 *s3.GetBucketTaggingInput
	}
	locks3ClientMockGetBucketTagging.RLock()
	calls = mock.calls.GetBucketTagging
	locks3ClientMockGetBucketTagging.RUnlock()
	return calls
}

// GetBucketTaggingRequest calls GetBucketTaggingRequestFunc.
func (mock *s3ClientMock) GetBucketTaggingRequest(in1 *s3.GetBucketTaggingInput) (*request.Request, *s3.GetBucketTaggingOutput) {
	if mock.GetBucketTaggingRequestFunc == nil {
		panic("s3ClientMock.GetBucketTaggingRequestFunc: method is nil but s3Client.GetBucketTaggingRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketTaggingInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketTaggingRequest.Lock()
	mock.calls.GetBucketTaggingRequest = append(mock.calls.GetBucketTaggingRequest, callInfo)
	locks3ClientMockGetBucketTaggingRequest.Unlock()
	return mock.GetBucketTaggingRequestFunc(in1)
}

// GetBucketTaggingRequestCalls gets all the calls that were made to GetBucketTaggingRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketTaggingRequestCalls())
func (mock *s3ClientMock) GetBucketTaggingRequestCalls() []struct {
	In1 *s3.GetBucketTaggingInput
} {
	var calls []struct {
		In1 *s3.GetBucketTaggingInput
	}
	locks3ClientMockGetBucketTaggingRequest.RLock()
	calls = mock.calls.GetBucketTaggingRequest
	locks3ClientMockGetBucketTaggingRequest.RUnlock()
	return calls
}

// GetBucketTaggingWithContext calls GetBucketTaggingWithContextFunc.
func (mock *s3ClientMock) GetBucketTaggingWithContext(in1 context.Context, in2 *s3.GetBucketTaggingInput, in3 ...request.Option) (*s3.GetBucketTaggingOutput, error) {
	if mock.GetBucketTaggingWithContextFunc == nil {
		panic("s3ClientMock.GetBucketTaggingWithContextFunc: method is nil but s3Client.GetBucketTaggingWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetBucketTaggingInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetBucketTaggingWithContext.Lock()
	mock.calls.GetBucketTaggingWithContext = append(mock.calls.GetBucketTaggingWithContext, callInfo)
	locks3ClientMockGetBucketTaggingWithContext.Unlock()
	return mock.GetBucketTaggingWithContextFunc(in1, in2, in3...)
}

// GetBucketTaggingWithContextCalls gets all the calls that were made to GetBucketTaggingWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketTaggingWithContextCalls())
func (mock *s3ClientMock) GetBucketTaggingWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetBucketTaggingInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetBucketTaggingInput
		In3 []request.Option
	}
	locks3ClientMockGetBucketTaggingWithContext.RLock()
	calls = mock.calls.GetBucketTaggingWithContext
	locks3ClientMockGetBucketTaggingWithContext.RUnlock()
	return calls
}

// GetBucketVersioning calls GetBucketVersioningFunc.
func (mock *s3ClientMock) GetBucketVersioning(in1 *s3.GetBucketVersioningInput) (*s3.GetBucketVersioningOutput, error) {
	if mock.GetBucketVersioningFunc == nil {
		panic("s3ClientMock.GetBucketVersioningFunc: method is nil but s3Client.GetBucketVersioning was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketVersioningInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketVersioning.Lock()
	mock.calls.GetBucketVersioning = append(mock.calls.GetBucketVersioning, callInfo)
	locks3ClientMockGetBucketVersioning.Unlock()
	return mock.GetBucketVersioningFunc(in1)
}

// GetBucketVersioningCalls gets all the calls that were made to GetBucketVersioning.
// Check the length with:
//     len(mockeds3Client.GetBucketVersioningCalls())
func (mock *s3ClientMock) GetBucketVersioningCalls() []struct {
	In1 *s3.GetBucketVersioningInput
} {
	var calls []struct {
		In1 *s3.GetBucketVersioningInput
	}
	locks3ClientMockGetBucketVersioning.RLock()
	calls = mock.calls.GetBucketVersioning
	locks3ClientMockGetBucketVersioning.RUnlock()
	return calls
}

// GetBucketVersioningRequest calls GetBucketVersioningRequestFunc.
func (mock *s3ClientMock) GetBucketVersioningRequest(in1 *s3.GetBucketVersioningInput) (*request.Request, *s3.GetBucketVersioningOutput) {
	if mock.GetBucketVersioningRequestFunc == nil {
		panic("s3ClientMock.GetBucketVersioningRequestFunc: method is nil but s3Client.GetBucketVersioningRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketVersioningInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketVersioningRequest.Lock()
	mock.calls.GetBucketVersioningRequest = append(mock.calls.GetBucketVersioningRequest, callInfo)
	locks3ClientMockGetBucketVersioningRequest.Unlock()
	return mock.GetBucketVersioningRequestFunc(in1)
}

// GetBucketVersioningRequestCalls gets all the calls that were made to GetBucketVersioningRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketVersioningRequestCalls())
func (mock *s3ClientMock) GetBucketVersioningRequestCalls() []struct {
	In1 *s3.GetBucketVersioningInput
} {
	var calls []struct {
		In1 *s3.GetBucketVersioningInput
	}
	locks3ClientMockGetBucketVersioningRequest.RLock()
	calls = mock.calls.GetBucketVersioningRequest
	locks3ClientMockGetBucketVersioningRequest.RUnlock()
	return calls
}

// GetBucketVersioningWithContext calls GetBucketVersioningWithContextFunc.
func (mock *s3ClientMock) GetBucketVersioningWithContext(in1 context.Context, in2 *s3.GetBucketVersioningInput, in3 ...request.Option) (*s3.GetBucketVersioningOutput, error) {
	if mock.GetBucketVersioningWithContextFunc == nil {
		panic("s3ClientMock.GetBucketVersioningWithContextFunc: method is nil but s3Client.GetBucketVersioningWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetBucketVersioningInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetBucketVersioningWithContext.Lock()
	mock.calls.GetBucketVersioningWithContext = append(mock.calls.GetBucketVersioningWithContext, callInfo)
	locks3ClientMockGetBucketVersioningWithContext.Unlock()
	return mock.GetBucketVersioningWithContextFunc(in1, in2, in3...)
}

// GetBucketVersioningWithContextCalls gets all the calls that were made to GetBucketVersioningWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketVersioningWithContextCalls())
func (mock *s3ClientMock) GetBucketVersioningWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetBucketVersioningInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetBucketVersioningInput
		In3 []request.Option
	}
	locks3ClientMockGetBucketVersioningWithContext.RLock()
	calls = mock.calls.GetBucketVersioningWithContext
	locks3ClientMockGetBucketVersioningWithContext.RUnlock()
	return calls
}

// GetBucketWebsite calls GetBucketWebsiteFunc.
func (mock *s3ClientMock) GetBucketWebsite(in1 *s3.GetBucketWebsiteInput) (*s3.GetBucketWebsiteOutput, error) {
	if mock.GetBucketWebsiteFunc == nil {
		panic("s3ClientMock.GetBucketWebsiteFunc: method is nil but s3Client.GetBucketWebsite was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketWebsiteInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketWebsite.Lock()
	mock.calls.GetBucketWebsite = append(mock.calls.GetBucketWebsite, callInfo)
	locks3ClientMockGetBucketWebsite.Unlock()
	return mock.GetBucketWebsiteFunc(in1)
}

// GetBucketWebsiteCalls gets all the calls that were made to GetBucketWebsite.
// Check the length with:
//     len(mockeds3Client.GetBucketWebsiteCalls())
func (mock *s3ClientMock) GetBucketWebsiteCalls() []struct {
	In1 *s3.GetBucketWebsiteInput
} {
	var calls []struct {
		In1 *s3.GetBucketWebsiteInput
	}
	locks3ClientMockGetBucketWebsite.RLock()
	calls = mock.calls.GetBucketWebsite
	locks3ClientMockGetBucketWebsite.RUnlock()
	return calls
}

// GetBucketWebsiteRequest calls GetBucketWebsiteRequestFunc.
func (mock *s3ClientMock) GetBucketWebsiteRequest(in1 *s3.GetBucketWebsiteInput) (*request.Request, *s3.GetBucketWebsiteOutput) {
	if mock.GetBucketWebsiteRequestFunc == nil {
		panic("s3ClientMock.GetBucketWebsiteRequestFunc: method is nil but s3Client.GetBucketWebsiteRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetBucketWebsiteInput
	}{
		In1: in1,
	}
	locks3ClientMockGetBucketWebsiteRequest.Lock()
	mock.calls.GetBucketWebsiteRequest = append(mock.calls.GetBucketWebsiteRequest, callInfo)
	locks3ClientMockGetBucketWebsiteRequest.Unlock()
	return mock.GetBucketWebsiteRequestFunc(in1)
}

// GetBucketWebsiteRequestCalls gets all the calls that were made to GetBucketWebsiteRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketWebsiteRequestCalls())
func (mock *s3ClientMock) GetBucketWebsiteRequestCalls() []struct {
	In1 *s3.GetBucketWebsiteInput
} {
	var calls []struct {
		In1 *s3.GetBucketWebsiteInput
	}
	locks3ClientMockGetBucketWebsiteRequest.RLock()
	calls = mock.calls.GetBucketWebsiteRequest
	locks3ClientMockGetBucketWebsiteRequest.RUnlock()
	return calls
}

// GetBucketWebsiteWithContext calls GetBucketWebsiteWithContextFunc.
func (mock *s3ClientMock) GetBucketWebsiteWithContext(in1 context.Context, in2 *s3.GetBucketWebsiteInput, in3 ...request.Option) (*s3.GetBucketWebsiteOutput, error) {
	if mock.GetBucketWebsiteWithContextFunc == nil {
		panic("s3ClientMock.GetBucketWebsiteWithContextFunc: method is nil but s3Client.GetBucketWebsiteWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetBucketWebsiteInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetBucketWebsiteWithContext.Lock()
	mock.calls.GetBucketWebsiteWithContext = append(mock.calls.GetBucketWebsiteWithContext, callInfo)
	locks3ClientMockGetBucketWebsiteWithContext.Unlock()
	return mock.GetBucketWebsiteWithContextFunc(in1, in2, in3...)
}

// GetBucketWebsiteWithContextCalls gets all the calls that were made to GetBucketWebsiteWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketWebsiteWithContextCalls())
func (mock *s3ClientMock) GetBucketWebsiteWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetBucketWebsiteInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetBucketWebsiteInput
		In3 []request.Option
	}
	locks3ClientMockGetBucketWebsiteWithContext.RLock()
	calls = mock.calls.GetBucketWebsiteWithContext
	locks3ClientMockGetBucketWebsiteWithContext.RUnlock()
	return calls
}

// GetObject calls GetObjectFunc.
func (mock *s3ClientMock) GetObject(in1 *s3.GetObjectInput) (*s3.GetObjectOutput, error) {
	if mock.GetObjectFunc == nil {
		panic("s3ClientMock.GetObjectFunc: method is nil but s3Client.GetObject was just called")
	}
	callInfo := struct {
		In1 *s3.GetObjectInput
	}{
		In1: in1,
	}
	locks3ClientMockGetObject.Lock()
	mock.calls.GetObject = append(mock.calls.GetObject, callInfo)
	locks3ClientMockGetObject.Unlock()
	return mock.GetObjectFunc(in1)
}

// GetObjectCalls gets all the calls that were made to GetObject.
// Check the length with:
//     len(mockeds3Client.GetObjectCalls())
func (mock *s3ClientMock) GetObjectCalls() []struct {
	In1 *s3.GetObjectInput
} {
	var calls []struct {
		In1 *s3.GetObjectInput
	}
	locks3ClientMockGetObject.RLock()
	calls = mock.calls.GetObject
	locks3ClientMockGetObject.RUnlock()
	return calls
}

// GetObjectAcl calls GetObjectAclFunc.
func (mock *s3ClientMock) GetObjectAcl(in1 *s3.GetObjectAclInput) (*s3.GetObjectAclOutput, error) {
	if mock.GetObjectAclFunc == nil {
		panic("s3ClientMock.GetObjectAclFunc: method is nil but s3Client.GetObjectAcl was just called")
	}
	callInfo := struct {
		In1 *s3.GetObjectAclInput
	}{
		In1: in1,
	}
	locks3ClientMockGetObjectAcl.Lock()
	mock.calls.GetObjectAcl = append(mock.calls.GetObjectAcl, callInfo)
	locks3ClientMockGetObjectAcl.Unlock()
	return mock.GetObjectAclFunc(in1)
}

// GetObjectAclCalls gets all the calls that were made to GetObjectAcl.
// Check the length with:
//     len(mockeds3Client.GetObjectAclCalls())
func (mock *s3ClientMock) GetObjectAclCalls() []struct {
	In1 *s3.GetObjectAclInput
} {
	var calls []struct {
		In1 *s3.GetObjectAclInput
	}
	locks3ClientMockGetObjectAcl.RLock()
	calls = mock.calls.GetObjectAcl
	locks3ClientMockGetObjectAcl.RUnlock()
	return calls
}

// GetObjectAclRequest calls GetObjectAclRequestFunc.
func (mock *s3ClientMock) GetObjectAclRequest(in1 *s3.GetObjectAclInput) (*request.Request, *s3.GetObjectAclOutput) {
	if mock.GetObjectAclRequestFunc == nil {
		panic("s3ClientMock.GetObjectAclRequestFunc: method is nil but s3Client.GetObjectAclRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetObjectAclInput
	}{
		In1: in1,
	}
	locks3ClientMockGetObjectAclRequest.Lock()
	mock.calls.GetObjectAclRequest = append(mock.calls.GetObjectAclRequest, callInfo)
	locks3ClientMockGetObjectAclRequest.Unlock()
	return mock.GetObjectAclRequestFunc(in1)
}

// GetObjectAclRequestCalls gets all the calls that were made to GetObjectAclRequest.
// Check the length with:
//     len(mockeds3Client.GetObjectAclRequestCalls())
func (mock *s3ClientMock) GetObjectAclRequestCalls() []struct {
	In1 *s3.GetObjectAclInput
} {
	var calls []struct {
		In1 *s3.GetObjectAclInput
	}
	locks3ClientMockGetObjectAclRequest.RLock()
	calls = mock.calls.GetObjectAclRequest
	locks3ClientMockGetObjectAclRequest.RUnlock()
	return calls
}

// GetObjectAclWithContext calls GetObjectAclWithContextFunc.
func (mock *s3ClientMock) GetObjectAclWithContext(in1 context.Context, in2 *s3.GetObjectAclInput, in3 ...request.Option) (*s3.GetObjectAclOutput, error) {
	if mock.GetObjectAclWithContextFunc == nil {
		panic("s3ClientMock.GetObjectAclWithContextFunc: method is nil but s3Client.GetObjectAclWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetObjectAclInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetObjectAclWithContext.Lock()
	mock.calls.GetObjectAclWithContext = append(mock.calls.GetObjectAclWithContext, callInfo)
	locks3ClientMockGetObjectAclWithContext.Unlock()
	return mock.GetObjectAclWithContextFunc(in1, in2, in3...)
}

// GetObjectAclWithContextCalls gets all the calls that were made to GetObjectAclWithContext.
// Check the length with:
//     len(mockeds3Client.GetObjectAclWithContextCalls())
func (mock *s3ClientMock) GetObjectAclWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetObjectAclInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetObjectAclInput
		In3 []request.Option
	}
	locks3ClientMockGetObjectAclWithContext.RLock()
	calls = mock.calls.GetObjectAclWithContext
	locks3ClientMockGetObjectAclWithContext.RUnlock()
	return calls
}

// GetObjectLegalHold calls GetObjectLegalHoldFunc.
func (mock *s3ClientMock) GetObjectLegalHold(in1 *s3.GetObjectLegalHoldInput) (*s3.GetObjectLegalHoldOutput, error) {
	if mock.GetObjectLegalHoldFunc == nil {
		panic("s3ClientMock.GetObjectLegalHoldFunc: method is nil but s3Client.GetObjectLegalHold was just called")
	}
	callInfo := struct {
		In1 *s3.GetObjectLegalHoldInput
	}{
		In1: in1,
	}
	locks3ClientMockGetObjectLegalHold.Lock()
	mock.calls.GetObjectLegalHold = append(mock.calls.GetObjectLegalHold, callInfo)
	locks3ClientMockGetObjectLegalHold.Unlock()
	return mock.GetObjectLegalHoldFunc(in1)
}

// GetObjectLegalHoldCalls gets all the calls that were made to GetObjectLegalHold.
// Check the length with:
//     len(mockeds3Client.GetObjectLegalHoldCalls())
func (mock *s3ClientMock) GetObjectLegalHoldCalls() []struct {
	In1 *s3.GetObjectLegalHoldInput
} {
	var calls []struct {
		In1 *s3.GetObjectLegalHoldInput
	}
	locks3ClientMockGetObjectLegalHold.RLock()
	calls = mock.calls.GetObjectLegalHold
	locks3ClientMockGetObjectLegalHold.RUnlock()
	return calls
}

// GetObjectLegalHoldRequest calls GetObjectLegalHoldRequestFunc.
func (mock *s3ClientMock) GetObjectLegalHoldRequest(in1 *s3.GetObjectLegalHoldInput) (*request.Request, *s3.GetObjectLegalHoldOutput) {
	if mock.GetObjectLegalHoldRequestFunc == nil {
		panic("s3ClientMock.GetObjectLegalHoldRequestFunc: method is nil but s3Client.GetObjectLegalHoldRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetObjectLegalHoldInput
	}{
		In1: in1,
	}
	locks3ClientMockGetObjectLegalHoldRequest.Lock()
	mock.calls.GetObjectLegalHoldRequest = append(mock.calls.GetObjectLegalHoldRequest, callInfo)
	locks3ClientMockGetObjectLegalHoldRequest.Unlock()
	return mock.GetObjectLegalHoldRequestFunc(in1)
}

// GetObjectLegalHoldRequestCalls gets all the calls that were made to GetObjectLegalHoldRequest.
// Check the length with:
//     len(mockeds3Client.GetObjectLegalHoldRequestCalls())
func (mock *s3ClientMock) GetObjectLegalHoldRequestCalls() []struct {
	In1 *s3.GetObjectLegalHoldInput
} {
	var calls []struct {
		In1 *s3.GetObjectLegalHoldInput
	}
	locks3ClientMockGetObjectLegalHoldRequest.RLock()
	calls = mock.calls.GetObjectLegalHoldRequest
	locks3ClientMockGetObjectLegalHoldRequest.RUnlock()
	return calls
}

// GetObjectLegalHoldWithContext calls GetObjectLegalHoldWithContextFunc.
func (mock *s3ClientMock) GetObjectLegalHoldWithContext(in1 context.Context, in2 *s3.GetObjectLegalHoldInput, in3 ...request.Option) (*s3.GetObjectLegalHoldOutput, error) {
	if mock.GetObjectLegalHoldWithContextFunc == nil {
		panic("s3ClientMock.GetObjectLegalHoldWithContextFunc: method is nil but s3Client.GetObjectLegalHoldWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetObjectLegalHoldInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetObjectLegalHoldWithContext.Lock()
	mock.calls.GetObjectLegalHoldWithContext = append(mock.calls.GetObjectLegalHoldWithContext, callInfo)
	locks3ClientMockGetObjectLegalHoldWithContext.Unlock()
	return mock.GetObjectLegalHoldWithContextFunc(in1, in2, in3...)
}

// GetObjectLegalHoldWithContextCalls gets all the calls that were made to GetObjectLegalHoldWithContext.
// Check the length with:
//     len(mockeds3Client.GetObjectLegalHoldWithContextCalls())
func (mock *s3ClientMock) GetObjectLegalHoldWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetObjectLegalHoldInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetObjectLegalHoldInput
		In3 []request.Option
	}
	locks3ClientMockGetObjectLegalHoldWithContext.RLock()
	calls = mock.calls.GetObjectLegalHoldWithContext
	locks3ClientMockGetObjectLegalHoldWithContext.RUnlock()
	return calls
}

// GetObjectLockConfiguration calls GetObjectLockConfigurationFunc.
func (mock *s3ClientMock) GetObjectLockConfiguration(in1 *s3.GetObjectLockConfigurationInput) (*s3.GetObjectLockConfigurationOutput, error) {
	if mock.GetObjectLockConfigurationFunc == nil {
		panic("s3ClientMock.GetObjectLockConfigurationFunc: method is nil but s3Client.GetObjectLockConfiguration was just called")
	}
	callInfo := struct {
		In1 *s3.GetObjectLockConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockGetObjectLockConfiguration.Lock()
	mock.calls.GetObjectLockConfiguration = append(mock.calls.GetObjectLockConfiguration, callInfo)
	locks3ClientMockGetObjectLockConfiguration.Unlock()
	return mock.GetObjectLockConfigurationFunc(in1)
}

// GetObjectLockConfigurationCalls gets all the calls that were made to GetObjectLockConfiguration.
// Check the length with:
//     len(mockeds3Client.GetObjectLockConfigurationCalls())
func (mock *s3ClientMock) GetObjectLockConfigurationCalls() []struct {
	In1 *s3.GetObjectLockConfigurationInput
} {
	var calls []struct {
		In1 *s3.GetObjectLockConfigurationInput
	}
	locks3ClientMockGetObjectLockConfiguration.RLock()
	calls = mock.calls.GetObjectLockConfiguration
	locks3ClientMockGetObjectLockConfiguration.RUnlock()
	return calls
}

// GetObjectLockConfigurationRequest calls GetObjectLockConfigurationRequestFunc.
func (mock *s3ClientMock) GetObjectLockConfigurationRequest(in1 *s3.GetObjectLockConfigurationInput) (*request.Request, *s3.GetObjectLockConfigurationOutput) {
	if mock.GetObjectLockConfigurationRequestFunc == nil {
		panic("s3ClientMock.GetObjectLockConfigurationRequestFunc: method is nil but s3Client.GetObjectLockConfigurationRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetObjectLockConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockGetObjectLockConfigurationRequest.Lock()
	mock.calls.GetObjectLockConfigurationRequest = append(mock.calls.GetObjectLockConfigurationRequest, callInfo)
	locks3ClientMockGetObjectLockConfigurationRequest.Unlock()
	return mock.GetObjectLockConfigurationRequestFunc(in1)
}

// GetObjectLockConfigurationRequestCalls gets all the calls that were made to GetObjectLockConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.GetObjectLockConfigurationRequestCalls())
func (mock *s3ClientMock) GetObjectLockConfigurationRequestCalls() []struct {
	In1 *s3.GetObjectLockConfigurationInput
} {
	var calls []struct {
		In1 *s3.GetObjectLockConfigurationInput
	}
	locks3ClientMockGetObjectLockConfigurationRequest.RLock()
	calls = mock.calls.GetObjectLockConfigurationRequest
	locks3ClientMockGetObjectLockConfigurationRequest.RUnlock()
	return calls
}

// GetObjectLockConfigurationWithContext calls GetObjectLockConfigurationWithContextFunc.
func (mock *s3ClientMock) GetObjectLockConfigurationWithContext(in1 context.Context, in2 *s3.GetObjectLockConfigurationInput, in3 ...request.Option) (*s3.GetObjectLockConfigurationOutput, error) {
	if mock.GetObjectLockConfigurationWithContextFunc == nil {
		panic("s3ClientMock.GetObjectLockConfigurationWithContextFunc: method is nil but s3Client.GetObjectLockConfigurationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetObjectLockConfigurationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetObjectLockConfigurationWithContext.Lock()
	mock.calls.GetObjectLockConfigurationWithContext = append(mock.calls.GetObjectLockConfigurationWithContext, callInfo)
	locks3ClientMockGetObjectLockConfigurationWithContext.Unlock()
	return mock.GetObjectLockConfigurationWithContextFunc(in1, in2, in3...)
}

// GetObjectLockConfigurationWithContextCalls gets all the calls that were made to GetObjectLockConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.GetObjectLockConfigurationWithContextCalls())
func (mock *s3ClientMock) GetObjectLockConfigurationWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetObjectLockConfigurationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetObjectLockConfigurationInput
		In3 []request.Option
	}
	locks3ClientMockGetObjectLockConfigurationWithContext.RLock()
	calls = mock.calls.GetObjectLockConfigurationWithContext
	locks3ClientMockGetObjectLockConfigurationWithContext.RUnlock()
	return calls
}

// GetObjectRequest calls GetObjectRequestFunc.
func (mock *s3ClientMock) GetObjectRequest(in1 *s3.GetObjectInput) (*request.Request, *s3.GetObjectOutput) {
	if mock.GetObjectRequestFunc == nil {
		panic("s3ClientMock.GetObjectRequestFunc: method is nil but s3Client.GetObjectRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetObjectInput
	}{
		In1: in1,
	}
	locks3ClientMockGetObjectRequest.Lock()
	mock.calls.GetObjectRequest = append(mock.calls.GetObjectRequest, callInfo)
	locks3ClientMockGetObjectRequest.Unlock()
	return mock.GetObjectRequestFunc(in1)
}

// GetObjectRequestCalls gets all the calls that were made to GetObjectRequest.
// Check the length with:
//     len(mockeds3Client.GetObjectRequestCalls())
func (mock *s3ClientMock) GetObjectRequestCalls() []struct {
	In1 *s3.GetObjectInput
} {
	var calls []struct {
		In1 *s3.GetObjectInput
	}
	locks3ClientMockGetObjectRequest.RLock()
	calls = mock.calls.GetObjectRequest
	locks3ClientMockGetObjectRequest.RUnlock()
	return calls
}

// GetObjectRetention calls GetObjectRetentionFunc.
func (mock *s3ClientMock) GetObjectRetention(in1 *s3.GetObjectRetentionInput) (*s3.GetObjectRetentionOutput, error) {
	if mock.GetObjectRetentionFunc == nil {
		panic("s3ClientMock.GetObjectRetentionFunc: method is nil but s3Client.GetObjectRetention was just called")
	}
	callInfo := struct {
		In1 *s3.GetObjectRetentionInput
	}{
		In1: in1,
	}
	locks3ClientMockGetObjectRetention.Lock()
	mock.calls.GetObjectRetention = append(mock.calls.GetObjectRetention, callInfo)
	locks3ClientMockGetObjectRetention.Unlock()
	return mock.GetObjectRetentionFunc(in1)
}

// GetObjectRetentionCalls gets all the calls that were made to GetObjectRetention.
// Check the length with:
//     len(mockeds3Client.GetObjectRetentionCalls())
func (mock *s3ClientMock) GetObjectRetentionCalls() []struct {
	In1 *s3.GetObjectRetentionInput
} {
	var calls []struct {
		In1 *s3.GetObjectRetentionInput
	}
	locks3ClientMockGetObjectRetention.RLock()
	calls = mock.calls.GetObjectRetention
	locks3ClientMockGetObjectRetention.RUnlock()
	return calls
}

// GetObjectRetentionRequest calls GetObjectRetentionRequestFunc.
func (mock *s3ClientMock) GetObjectRetentionRequest(in1 *s3.GetObjectRetentionInput) (*request.Request, *s3.GetObjectRetentionOutput) {
	if mock.GetObjectRetentionRequestFunc == nil {
		panic("s3ClientMock.GetObjectRetentionRequestFunc: method is nil but s3Client.GetObjectRetentionRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetObjectRetentionInput
	}{
		In1: in1,
	}
	locks3ClientMockGetObjectRetentionRequest.Lock()
	mock.calls.GetObjectRetentionRequest = append(mock.calls.GetObjectRetentionRequest, callInfo)
	locks3ClientMockGetObjectRetentionRequest.Unlock()
	return mock.GetObjectRetentionRequestFunc(in1)
}

// GetObjectRetentionRequestCalls gets all the calls that were made to GetObjectRetentionRequest.
// Check the length with:
//     len(mockeds3Client.GetObjectRetentionRequestCalls())
func (mock *s3ClientMock) GetObjectRetentionRequestCalls() []struct {
	In1 *s3.GetObjectRetentionInput
} {
	var calls []struct {
		In1 *s3.GetObjectRetentionInput
	}
	locks3ClientMockGetObjectRetentionRequest.RLock()
	calls = mock.calls.GetObjectRetentionRequest
	locks3ClientMockGetObjectRetentionRequest.RUnlock()
	return calls
}

// GetObjectRetentionWithContext calls GetObjectRetentionWithContextFunc.
func (mock *s3ClientMock) GetObjectRetentionWithContext(in1 context.Context, in2 *s3.GetObjectRetentionInput, in3 ...request.Option) (*s3.GetObjectRetentionOutput, error) {
	if mock.GetObjectRetentionWithContextFunc == nil {
		panic("s3ClientMock.GetObjectRetentionWithContextFunc: method is nil but s3Client.GetObjectRetentionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetObjectRetentionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetObjectRetentionWithContext.Lock()
	mock.calls.GetObjectRetentionWithContext = append(mock.calls.GetObjectRetentionWithContext, callInfo)
	locks3ClientMockGetObjectRetentionWithContext.Unlock()
	return mock.GetObjectRetentionWithContextFunc(in1, in2, in3...)
}

// GetObjectRetentionWithContextCalls gets all the calls that were made to GetObjectRetentionWithContext.
// Check the length with:
//     len(mockeds3Client.GetObjectRetentionWithContextCalls())
func (mock *s3ClientMock) GetObjectRetentionWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetObjectRetentionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetObjectRetentionInput
		In3 []request.Option
	}
	locks3ClientMockGetObjectRetentionWithContext.RLock()
	calls = mock.calls.GetObjectRetentionWithContext
	locks3ClientMockGetObjectRetentionWithContext.RUnlock()
	return calls
}

// GetObjectTagging calls GetObjectTaggingFunc.
func (mock *s3ClientMock) GetObjectTagging(in1 *s3.GetObjectTaggingInput) (*s3.GetObjectTaggingOutput, error) {
	if mock.GetObjectTaggingFunc == nil {
		panic("s3ClientMock.GetObjectTaggingFunc: method is nil but s3Client.GetObjectTagging was just called")
	}
	callInfo := struct {
		In1 *s3.GetObjectTaggingInput
	}{
		In1: in1,
	}
	locks3ClientMockGetObjectTagging.Lock()
	mock.calls.GetObjectTagging = append(mock.calls.GetObjectTagging, callInfo)
	locks3ClientMockGetObjectTagging.Unlock()
	return mock.GetObjectTaggingFunc(in1)
}

// GetObjectTaggingCalls gets all the calls that were made to GetObjectTagging.
// Check the length with:
//     len(mockeds3Client.GetObjectTaggingCalls())
func (mock *s3ClientMock) GetObjectTaggingCalls() []struct {
	In1 *s3.GetObjectTaggingInput
} {
	var calls []struct {
		In1 *s3.GetObjectTaggingInput
	}
	locks3ClientMockGetObjectTagging.RLock()
	calls = mock.calls.GetObjectTagging
	locks3ClientMockGetObjectTagging.RUnlock()
	return calls
}

// GetObjectTaggingRequest calls GetObjectTaggingRequestFunc.
func (mock *s3ClientMock) GetObjectTaggingRequest(in1 *s3.GetObjectTaggingInput) (*request.Request, *s3.GetObjectTaggingOutput) {
	if mock.GetObjectTaggingRequestFunc == nil {
		panic("s3ClientMock.GetObjectTaggingRequestFunc: method is nil but s3Client.GetObjectTaggingRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetObjectTaggingInput
	}{
		In1: in1,
	}
	locks3ClientMockGetObjectTaggingRequest.Lock()
	mock.calls.GetObjectTaggingRequest = append(mock.calls.GetObjectTaggingRequest, callInfo)
	locks3ClientMockGetObjectTaggingRequest.Unlock()
	return mock.GetObjectTaggingRequestFunc(in1)
}

// GetObjectTaggingRequestCalls gets all the calls that were made to GetObjectTaggingRequest.
// Check the length with:
//     len(mockeds3Client.GetObjectTaggingRequestCalls())
func (mock *s3ClientMock) GetObjectTaggingRequestCalls() []struct {
	In1 *s3.GetObjectTaggingInput
} {
	var calls []struct {
		In1 *s3.GetObjectTaggingInput
	}
	locks3ClientMockGetObjectTaggingRequest.RLock()
	calls = mock.calls.GetObjectTaggingRequest
	locks3ClientMockGetObjectTaggingRequest.RUnlock()
	return calls
}

// GetObjectTaggingWithContext calls GetObjectTaggingWithContextFunc.
func (mock *s3ClientMock) GetObjectTaggingWithContext(in1 context.Context, in2 *s3.GetObjectTaggingInput, in3 ...request.Option) (*s3.GetObjectTaggingOutput, error) {
	if mock.GetObjectTaggingWithContextFunc == nil {
		panic("s3ClientMock.GetObjectTaggingWithContextFunc: method is nil but s3Client.GetObjectTaggingWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetObjectTaggingInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetObjectTaggingWithContext.Lock()
	mock.calls.GetObjectTaggingWithContext = append(mock.calls.GetObjectTaggingWithContext, callInfo)
	locks3ClientMockGetObjectTaggingWithContext.Unlock()
	return mock.GetObjectTaggingWithContextFunc(in1, in2, in3...)
}

// GetObjectTaggingWithContextCalls gets all the calls that were made to GetObjectTaggingWithContext.
// Check the length with:
//     len(mockeds3Client.GetObjectTaggingWithContextCalls())
func (mock *s3ClientMock) GetObjectTaggingWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetObjectTaggingInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetObjectTaggingInput
		In3 []request.Option
	}
	locks3ClientMockGetObjectTaggingWithContext.RLock()
	calls = mock.calls.GetObjectTaggingWithContext
	locks3ClientMockGetObjectTaggingWithContext.RUnlock()
	return calls
}

// GetObjectTorrent calls GetObjectTorrentFunc.
func (mock *s3ClientMock) GetObjectTorrent(in1 *s3.GetObjectTorrentInput) (*s3.GetObjectTorrentOutput, error) {
	if mock.GetObjectTorrentFunc == nil {
		panic("s3ClientMock.GetObjectTorrentFunc: method is nil but s3Client.GetObjectTorrent was just called")
	}
	callInfo := struct {
		In1 *s3.GetObjectTorrentInput
	}{
		In1: in1,
	}
	locks3ClientMockGetObjectTorrent.Lock()
	mock.calls.GetObjectTorrent = append(mock.calls.GetObjectTorrent, callInfo)
	locks3ClientMockGetObjectTorrent.Unlock()
	return mock.GetObjectTorrentFunc(in1)
}

// GetObjectTorrentCalls gets all the calls that were made to GetObjectTorrent.
// Check the length with:
//     len(mockeds3Client.GetObjectTorrentCalls())
func (mock *s3ClientMock) GetObjectTorrentCalls() []struct {
	In1 *s3.GetObjectTorrentInput
} {
	var calls []struct {
		In1 *s3.GetObjectTorrentInput
	}
	locks3ClientMockGetObjectTorrent.RLock()
	calls = mock.calls.GetObjectTorrent
	locks3ClientMockGetObjectTorrent.RUnlock()
	return calls
}

// GetObjectTorrentRequest calls GetObjectTorrentRequestFunc.
func (mock *s3ClientMock) GetObjectTorrentRequest(in1 *s3.GetObjectTorrentInput) (*request.Request, *s3.GetObjectTorrentOutput) {
	if mock.GetObjectTorrentRequestFunc == nil {
		panic("s3ClientMock.GetObjectTorrentRequestFunc: method is nil but s3Client.GetObjectTorrentRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetObjectTorrentInput
	}{
		In1: in1,
	}
	locks3ClientMockGetObjectTorrentRequest.Lock()
	mock.calls.GetObjectTorrentRequest = append(mock.calls.GetObjectTorrentRequest, callInfo)
	locks3ClientMockGetObjectTorrentRequest.Unlock()
	return mock.GetObjectTorrentRequestFunc(in1)
}

// GetObjectTorrentRequestCalls gets all the calls that were made to GetObjectTorrentRequest.
// Check the length with:
//     len(mockeds3Client.GetObjectTorrentRequestCalls())
func (mock *s3ClientMock) GetObjectTorrentRequestCalls() []struct {
	In1 *s3.GetObjectTorrentInput
} {
	var calls []struct {
		In1 *s3.GetObjectTorrentInput
	}
	locks3ClientMockGetObjectTorrentRequest.RLock()
	calls = mock.calls.GetObjectTorrentRequest
	locks3ClientMockGetObjectTorrentRequest.RUnlock()
	return calls
}

// GetObjectTorrentWithContext calls GetObjectTorrentWithContextFunc.
func (mock *s3ClientMock) GetObjectTorrentWithContext(in1 context.Context, in2 *s3.GetObjectTorrentInput, in3 ...request.Option) (*s3.GetObjectTorrentOutput, error) {
	if mock.GetObjectTorrentWithContextFunc == nil {
		panic("s3ClientMock.GetObjectTorrentWithContextFunc: method is nil but s3Client.GetObjectTorrentWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetObjectTorrentInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetObjectTorrentWithContext.Lock()
	mock.calls.GetObjectTorrentWithContext = append(mock.calls.GetObjectTorrentWithContext, callInfo)
	locks3ClientMockGetObjectTorrentWithContext.Unlock()
	return mock.GetObjectTorrentWithContextFunc(in1, in2, in3...)
}

// GetObjectTorrentWithContextCalls gets all the calls that were made to GetObjectTorrentWithContext.
// Check the length with:
//     len(mockeds3Client.GetObjectTorrentWithContextCalls())
func (mock *s3ClientMock) GetObjectTorrentWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetObjectTorrentInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetObjectTorrentInput
		In3 []request.Option
	}
	locks3ClientMockGetObjectTorrentWithContext.RLock()
	calls = mock.calls.GetObjectTorrentWithContext
	locks3ClientMockGetObjectTorrentWithContext.RUnlock()
	return calls
}

// GetObjectWithContext calls GetObjectWithContextFunc.
func (mock *s3ClientMock) GetObjectWithContext(in1 context.Context, in2 *s3.GetObjectInput, in3 ...request.Option) (*s3.GetObjectOutput, error) {
	if mock.GetObjectWithContextFunc == nil {
		panic("s3ClientMock.GetObjectWithContextFunc: method is nil but s3Client.GetObjectWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetObjectInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetObjectWithContext.Lock()
	mock.calls.GetObjectWithContext = append(mock.calls.GetObjectWithContext, callInfo)
	locks3ClientMockGetObjectWithContext.Unlock()
	return mock.GetObjectWithContextFunc(in1, in2, in3...)
}

// GetObjectWithContextCalls gets all the calls that were made to GetObjectWithContext.
// Check the length with:
//     len(mockeds3Client.GetObjectWithContextCalls())
func (mock *s3ClientMock) GetObjectWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetObjectInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetObjectInput
		In3 []request.Option
	}
	locks3ClientMockGetObjectWithContext.RLock()
	calls = mock.calls.GetObjectWithContext
	locks3ClientMockGetObjectWithContext.RUnlock()
	return calls
}

// GetPublicAccessBlock calls GetPublicAccessBlockFunc.
func (mock *s3ClientMock) GetPublicAccessBlock(in1 *s3.GetPublicAccessBlockInput) (*s3.GetPublicAccessBlockOutput, error) {
	if mock.GetPublicAccessBlockFunc == nil {
		panic("s3ClientMock.GetPublicAccessBlockFunc: method is nil but s3Client.GetPublicAccessBlock was just called")
	}
	callInfo := struct {
		In1 *s3.GetPublicAccessBlockInput
	}{
		In1: in1,
	}
	locks3ClientMockGetPublicAccessBlock.Lock()
	mock.calls.GetPublicAccessBlock = append(mock.calls.GetPublicAccessBlock, callInfo)
	locks3ClientMockGetPublicAccessBlock.Unlock()
	return mock.GetPublicAccessBlockFunc(in1)
}

// GetPublicAccessBlockCalls gets all the calls that were made to GetPublicAccessBlock.
// Check the length with:
//     len(mockeds3Client.GetPublicAccessBlockCalls())
func (mock *s3ClientMock) GetPublicAccessBlockCalls() []struct {
	In1 *s3.GetPublicAccessBlockInput
} {
	var calls []struct {
		In1 *s3.GetPublicAccessBlockInput
	}
	locks3ClientMockGetPublicAccessBlock.RLock()
	calls = mock.calls.GetPublicAccessBlock
	locks3ClientMockGetPublicAccessBlock.RUnlock()
	return calls
}

// GetPublicAccessBlockRequest calls GetPublicAccessBlockRequestFunc.
func (mock *s3ClientMock) GetPublicAccessBlockRequest(in1 *s3.GetPublicAccessBlockInput) (*request.Request, *s3.GetPublicAccessBlockOutput) {
	if mock.GetPublicAccessBlockRequestFunc == nil {
		panic("s3ClientMock.GetPublicAccessBlockRequestFunc: method is nil but s3Client.GetPublicAccessBlockRequest was just called")
	}
	callInfo := struct {
		In1 *s3.GetPublicAccessBlockInput
	}{
		In1: in1,
	}
	locks3ClientMockGetPublicAccessBlockRequest.Lock()
	mock.calls.GetPublicAccessBlockRequest = append(mock.calls.GetPublicAccessBlockRequest, callInfo)
	locks3ClientMockGetPublicAccessBlockRequest.Unlock()
	return mock.GetPublicAccessBlockRequestFunc(in1)
}

// GetPublicAccessBlockRequestCalls gets all the calls that were made to GetPublicAccessBlockRequest.
// Check the length with:
//     len(mockeds3Client.GetPublicAccessBlockRequestCalls())
func (mock *s3ClientMock) GetPublicAccessBlockRequestCalls() []struct {
	In1 *s3.GetPublicAccessBlockInput
} {
	var calls []struct {
		In1 *s3.GetPublicAccessBlockInput
	}
	locks3ClientMockGetPublicAccessBlockRequest.RLock()
	calls = mock.calls.GetPublicAccessBlockRequest
	locks3ClientMockGetPublicAccessBlockRequest.RUnlock()
	return calls
}

// GetPublicAccessBlockWithContext calls GetPublicAccessBlockWithContextFunc.
func (mock *s3ClientMock) GetPublicAccessBlockWithContext(in1 context.Context, in2 *s3.GetPublicAccessBlockInput, in3 ...request.Option) (*s3.GetPublicAccessBlockOutput, error) {
	if mock.GetPublicAccessBlockWithContextFunc == nil {
		panic("s3ClientMock.GetPublicAccessBlockWithContextFunc: method is nil but s3Client.GetPublicAccessBlockWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.GetPublicAccessBlockInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockGetPublicAccessBlockWithContext.Lock()
	mock.calls.GetPublicAccessBlockWithContext = append(mock.calls.GetPublicAccessBlockWithContext, callInfo)
	locks3ClientMockGetPublicAccessBlockWithContext.Unlock()
	return mock.GetPublicAccessBlockWithContextFunc(in1, in2, in3...)
}

// GetPublicAccessBlockWithContextCalls gets all the calls that were made to GetPublicAccessBlockWithContext.
// Check the length with:
//     len(mockeds3Client.GetPublicAccessBlockWithContextCalls())
func (mock *s3ClientMock) GetPublicAccessBlockWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.GetPublicAccessBlockInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.GetPublicAccessBlockInput
		In3 []request.Option
	}
	locks3ClientMockGetPublicAccessBlockWithContext.RLock()
	calls = mock.calls.GetPublicAccessBlockWithContext
	locks3ClientMockGetPublicAccessBlockWithContext.RUnlock()
	return calls
}

// HeadBucket calls HeadBucketFunc.
func (mock *s3ClientMock) HeadBucket(in1 *s3.HeadBucketInput) (*s3.HeadBucketOutput, error) {
	if mock.HeadBucketFunc == nil {
		panic("s3ClientMock.HeadBucketFunc: method is nil but s3Client.HeadBucket was just called")
	}
	callInfo := struct {
		In1 *s3.HeadBucketInput
	}{
		In1: in1,
	}
	locks3ClientMockHeadBucket.Lock()
	mock.calls.HeadBucket = append(mock.calls.HeadBucket, callInfo)
	locks3ClientMockHeadBucket.Unlock()
	return mock.HeadBucketFunc(in1)
}

// HeadBucketCalls gets all the calls that were made to HeadBucket.
// Check the length with:
//     len(mockeds3Client.HeadBucketCalls())
func (mock *s3ClientMock) HeadBucketCalls() []struct {
	In1 *s3.HeadBucketInput
} {
	var calls []struct {
		In1 *s3.HeadBucketInput
	}
	locks3ClientMockHeadBucket.RLock()
	calls = mock.calls.HeadBucket
	locks3ClientMockHeadBucket.RUnlock()
	return calls
}

// HeadBucketRequest calls HeadBucketRequestFunc.
func (mock *s3ClientMock) HeadBucketRequest(in1 *s3.HeadBucketInput) (*request.Request, *s3.HeadBucketOutput) {
	if mock.HeadBucketRequestFunc == nil {
		panic("s3ClientMock.HeadBucketRequestFunc: method is nil but s3Client.HeadBucketRequest was just called")
	}
	callInfo := struct {
		In1 *s3.HeadBucketInput
	}{
		In1: in1,
	}
	locks3ClientMockHeadBucketRequest.Lock()
	mock.calls.HeadBucketRequest = append(mock.calls.HeadBucketRequest, callInfo)
	locks3ClientMockHeadBucketRequest.Unlock()
	return mock.HeadBucketRequestFunc(in1)
}

// HeadBucketRequestCalls gets all the calls that were made to HeadBucketRequest.
// Check the length with:
//     len(mockeds3Client.HeadBucketRequestCalls())
func (mock *s3ClientMock) HeadBucketRequestCalls() []struct {
	In1 *s3.HeadBucketInput
} {
	var calls []struct {
		In1 *s3.HeadBucketInput
	}
	locks3ClientMockHeadBucketRequest.RLock()
	calls = mock.calls.HeadBucketRequest
	locks3ClientMockHeadBucketRequest.RUnlock()
	return calls
}

// HeadBucketWithContext calls HeadBucketWithContextFunc.
func (mock *s3ClientMock) HeadBucketWithContext(in1 context.Context, in2 *s3.HeadBucketInput, in3 ...request.Option) (*s3.HeadBucketOutput, error) {
	if mock.HeadBucketWithContextFunc == nil {
		panic("s3ClientMock.HeadBucketWithContextFunc: method is nil but s3Client.HeadBucketWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.HeadBucketInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockHeadBucketWithContext.Lock()
	mock.calls.HeadBucketWithContext = append(mock.calls.HeadBucketWithContext, callInfo)
	locks3ClientMockHeadBucketWithContext.Unlock()
	return mock.HeadBucketWithContextFunc(in1, in2, in3...)
}

// HeadBucketWithContextCalls gets all the calls that were made to HeadBucketWithContext.
// Check the length with:
//     len(mockeds3Client.HeadBucketWithContextCalls())
func (mock *s3ClientMock) HeadBucketWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.HeadBucketInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.HeadBucketInput
		In3 []request.Option
	}
	locks3ClientMockHeadBucketWithContext.RLock()
	calls = mock.calls.HeadBucketWithContext
	locks3ClientMockHeadBucketWithContext.RUnlock()
	return calls
}

// HeadObject calls HeadObjectFunc.
func (mock *s3ClientMock) HeadObject(in1 *s3.HeadObjectInput) (*s3.HeadObjectOutput, error) {
	if mock.HeadObjectFunc == nil {
		panic("s3ClientMock.HeadObjectFunc: method is nil but s3Client.HeadObject was just called")
	}
	callInfo := struct {
		In1 *s3.HeadObjectInput
	}{
		In1: in1,
	}
	locks3ClientMockHeadObject.Lock()
	mock.calls.HeadObject = append(mock.calls.HeadObject, callInfo)
	locks3ClientMockHeadObject.Unlock()
	return mock.HeadObjectFunc(in1)
}

// HeadObjectCalls gets all the calls that were made to HeadObject.
// Check the length with:
//     len(mockeds3Client.HeadObjectCalls())
func (mock *s3ClientMock) HeadObjectCalls() []struct {
	In1 *s3.HeadObjectInput
} {
	var calls []struct {
		In1 *s3.HeadObjectInput
	}
	locks3ClientMockHeadObject.RLock()
	calls = mock.calls.HeadObject
	locks3ClientMockHeadObject.RUnlock()
	return calls
}

// HeadObjectRequest calls HeadObjectRequestFunc.
func (mock *s3ClientMock) HeadObjectRequest(in1 *s3.HeadObjectInput) (*request.Request, *s3.HeadObjectOutput) {
	if mock.HeadObjectRequestFunc == nil {
		panic("s3ClientMock.HeadObjectRequestFunc: method is nil but s3Client.HeadObjectRequest was just called")
	}
	callInfo := struct {
		In1 *s3.HeadObjectInput
	}{
		In1: in1,
	}
	locks3ClientMockHeadObjectRequest.Lock()
	mock.calls.HeadObjectRequest = append(mock.calls.HeadObjectRequest, callInfo)
	locks3ClientMockHeadObjectRequest.Unlock()
	return mock.HeadObjectRequestFunc(in1)
}

// HeadObjectRequestCalls gets all the calls that were made to HeadObjectRequest.
// Check the length with:
//     len(mockeds3Client.HeadObjectRequestCalls())
func (mock *s3ClientMock) HeadObjectRequestCalls() []struct {
	In1 *s3.HeadObjectInput
} {
	var calls []struct {
		In1 *s3.HeadObjectInput
	}
	locks3ClientMockHeadObjectRequest.RLock()
	calls = mock.calls.HeadObjectRequest
	locks3ClientMockHeadObjectRequest.RUnlock()
	return calls
}

// HeadObjectWithContext calls HeadObjectWithContextFunc.
func (mock *s3ClientMock) HeadObjectWithContext(in1 context.Context, in2 *s3.HeadObjectInput, in3 ...request.Option) (*s3.HeadObjectOutput, error) {
	if mock.HeadObjectWithContextFunc == nil {
		panic("s3ClientMock.HeadObjectWithContextFunc: method is nil but s3Client.HeadObjectWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.HeadObjectInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockHeadObjectWithContext.Lock()
	mock.calls.HeadObjectWithContext = append(mock.calls.HeadObjectWithContext, callInfo)
	locks3ClientMockHeadObjectWithContext.Unlock()
	return mock.HeadObjectWithContextFunc(in1, in2, in3...)
}

// HeadObjectWithContextCalls gets all the calls that were made to HeadObjectWithContext.
// Check the length with:
//     len(mockeds3Client.HeadObjectWithContextCalls())
func (mock *s3ClientMock) HeadObjectWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.HeadObjectInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.HeadObjectInput
		In3 []request.Option
	}
	locks3ClientMockHeadObjectWithContext.RLock()
	calls = mock.calls.HeadObjectWithContext
	locks3ClientMockHeadObjectWithContext.RUnlock()
	return calls
}

// ListBucketAnalyticsConfigurations calls ListBucketAnalyticsConfigurationsFunc.
func (mock *s3ClientMock) ListBucketAnalyticsConfigurations(in1 *s3.ListBucketAnalyticsConfigurationsInput) (*s3.ListBucketAnalyticsConfigurationsOutput, error) {
	if mock.ListBucketAnalyticsConfigurationsFunc == nil {
		panic("s3ClientMock.ListBucketAnalyticsConfigurationsFunc: method is nil but s3Client.ListBucketAnalyticsConfigurations was just called")
	}
	callInfo := struct {
		In1 *s3.ListBucketAnalyticsConfigurationsInput
	}{
		In1: in1,
	}
	locks3ClientMockListBucketAnalyticsConfigurations.Lock()
	mock.calls.ListBucketAnalyticsConfigurations = append(mock.calls.ListBucketAnalyticsConfigurations, callInfo)
	locks3ClientMockListBucketAnalyticsConfigurations.Unlock()
	return mock.ListBucketAnalyticsConfigurationsFunc(in1)
}

// ListBucketAnalyticsConfigurationsCalls gets all the calls that were made to ListBucketAnalyticsConfigurations.
// Check the length with:
//     len(mockeds3Client.ListBucketAnalyticsConfigurationsCalls())
func (mock *s3ClientMock) ListBucketAnalyticsConfigurationsCalls() []struct {
	In1 *s3.ListBucketAnalyticsConfigurationsInput
} {
	var calls []struct {
		In1 *s3.ListBucketAnalyticsConfigurationsInput
	}
	locks3ClientMockListBucketAnalyticsConfigurations.RLock()
	calls = mock.calls.ListBucketAnalyticsConfigurations
	locks3ClientMockListBucketAnalyticsConfigurations.RUnlock()
	return calls
}

// ListBucketAnalyticsConfigurationsRequest calls ListBucketAnalyticsConfigurationsRequestFunc.
func (mock *s3ClientMock) ListBucketAnalyticsConfigurationsRequest(in1 *s3.ListBucketAnalyticsConfigurationsInput) (*request.Request, *s3.ListBucketAnalyticsConfigurationsOutput) {
	if mock.ListBucketAnalyticsConfigurationsRequestFunc == nil {
		panic("s3ClientMock.ListBucketAnalyticsConfigurationsRequestFunc: method is nil but s3Client.ListBucketAnalyticsConfigurationsRequest was just called")
	}
	callInfo := struct {
		In1 *s3.ListBucketAnalyticsConfigurationsInput
	}{
		In1: in1,
	}
	locks3ClientMockListBucketAnalyticsConfigurationsRequest.Lock()
	mock.calls.ListBucketAnalyticsConfigurationsRequest = append(mock.calls.ListBucketAnalyticsConfigurationsRequest, callInfo)
	locks3ClientMockListBucketAnalyticsConfigurationsRequest.Unlock()
	return mock.ListBucketAnalyticsConfigurationsRequestFunc(in1)
}

// ListBucketAnalyticsConfigurationsRequestCalls gets all the calls that were made to ListBucketAnalyticsConfigurationsRequest.
// Check the length with:
//     len(mockeds3Client.ListBucketAnalyticsConfigurationsRequestCalls())
func (mock *s3ClientMock) ListBucketAnalyticsConfigurationsRequestCalls() []struct {
	In1 *s3.ListBucketAnalyticsConfigurationsInput
} {
	var calls []struct {
		In1 *s3.ListBucketAnalyticsConfigurationsInput
	}
	locks3ClientMockListBucketAnalyticsConfigurationsRequest.RLock()
	calls = mock.calls.ListBucketAnalyticsConfigurationsRequest
	locks3ClientMockListBucketAnalyticsConfigurationsRequest.RUnlock()
	return calls
}

// ListBucketAnalyticsConfigurationsWithContext calls ListBucketAnalyticsConfigurationsWithContextFunc.
func (mock *s3ClientMock) ListBucketAnalyticsConfigurationsWithContext(in1 context.Context, in2 *s3.ListBucketAnalyticsConfigurationsInput, in3 ...request.Option) (*s3.ListBucketAnalyticsConfigurationsOutput, error) {
	if mock.ListBucketAnalyticsConfigurationsWithContextFunc == nil {
		panic("s3ClientMock.ListBucketAnalyticsConfigurationsWithContextFunc: method is nil but s3Client.ListBucketAnalyticsConfigurationsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.ListBucketAnalyticsConfigurationsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockListBucketAnalyticsConfigurationsWithContext.Lock()
	mock.calls.ListBucketAnalyticsConfigurationsWithContext = append(mock.calls.ListBucketAnalyticsConfigurationsWithContext, callInfo)
	locks3ClientMockListBucketAnalyticsConfigurationsWithContext.Unlock()
	return mock.ListBucketAnalyticsConfigurationsWithContextFunc(in1, in2, in3...)
}

// ListBucketAnalyticsConfigurationsWithContextCalls gets all the calls that were made to ListBucketAnalyticsConfigurationsWithContext.
// Check the length with:
//     len(mockeds3Client.ListBucketAnalyticsConfigurationsWithContextCalls())
func (mock *s3ClientMock) ListBucketAnalyticsConfigurationsWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.ListBucketAnalyticsConfigurationsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.ListBucketAnalyticsConfigurationsInput
		In3 []request.Option
	}
	locks3ClientMockListBucketAnalyticsConfigurationsWithContext.RLock()
	calls = mock.calls.ListBucketAnalyticsConfigurationsWithContext
	locks3ClientMockListBucketAnalyticsConfigurationsWithContext.RUnlock()
	return calls
}

// ListBucketInventoryConfigurations calls ListBucketInventoryConfigurationsFunc.
func (mock *s3ClientMock) ListBucketInventoryConfigurations(in1 *s3.ListBucketInventoryConfigurationsInput) (*s3.ListBucketInventoryConfigurationsOutput, error) {
	if mock.ListBucketInventoryConfigurationsFunc == nil {
		panic("s3ClientMock.ListBucketInventoryConfigurationsFunc: method is nil but s3Client.ListBucketInventoryConfigurations was just called")
	}
	callInfo := struct {
		In1 *s3.ListBucketInventoryConfigurationsInput
	}{
		In1: in1,
	}
	locks3ClientMockListBucketInventoryConfigurations.Lock()
	mock.calls.ListBucketInventoryConfigurations = append(mock.calls.ListBucketInventoryConfigurations, callInfo)
	locks3ClientMockListBucketInventoryConfigurations.Unlock()
	return mock.ListBucketInventoryConfigurationsFunc(in1)
}

// ListBucketInventoryConfigurationsCalls gets all the calls that were made to ListBucketInventoryConfigurations.
// Check the length with:
//     len(mockeds3Client.ListBucketInventoryConfigurationsCalls())
func (mock *s3ClientMock) ListBucketInventoryConfigurationsCalls() []struct {
	In1 *s3.ListBucketInventoryConfigurationsInput
} {
	var calls []struct {
		In1 *s3.ListBucketInventoryConfigurationsInput
	}
	locks3ClientMockListBucketInventoryConfigurations.RLock()
	calls = mock.calls.ListBucketInventoryConfigurations
	locks3ClientMockListBucketInventoryConfigurations.RUnlock()
	return calls
}

// ListBucketInventoryConfigurationsRequest calls ListBucketInventoryConfigurationsRequestFunc.
func (mock *s3ClientMock) ListBucketInventoryConfigurationsRequest(in1 *s3.ListBucketInventoryConfigurationsInput) (*request.Request, *s3.ListBucketInventoryConfigurationsOutput) {
	if mock.ListBucketInventoryConfigurationsRequestFunc == nil {
		panic("s3ClientMock.ListBucketInventoryConfigurationsRequestFunc: method is nil but s3Client.ListBucketInventoryConfigurationsRequest was just called")
	}
	callInfo := struct {
		In1 *s3.ListBucketInventoryConfigurationsInput
	}{
		In1: in1,
	}
	locks3ClientMockListBucketInventoryConfigurationsRequest.Lock()
	mock.calls.ListBucketInventoryConfigurationsRequest = append(mock.calls.ListBucketInventoryConfigurationsRequest, callInfo)
	locks3ClientMockListBucketInventoryConfigurationsRequest.Unlock()
	return mock.ListBucketInventoryConfigurationsRequestFunc(in1)
}

// ListBucketInventoryConfigurationsRequestCalls gets all the calls that were made to ListBucketInventoryConfigurationsRequest.
// Check the length with:
//     len(mockeds3Client.ListBucketInventoryConfigurationsRequestCalls())
func (mock *s3ClientMock) ListBucketInventoryConfigurationsRequestCalls() []struct {
	In1 *s3.ListBucketInventoryConfigurationsInput
} {
	var calls []struct {
		In1 *s3.ListBucketInventoryConfigurationsInput
	}
	locks3ClientMockListBucketInventoryConfigurationsRequest.RLock()
	calls = mock.calls.ListBucketInventoryConfigurationsRequest
	locks3ClientMockListBucketInventoryConfigurationsRequest.RUnlock()
	return calls
}

// ListBucketInventoryConfigurationsWithContext calls ListBucketInventoryConfigurationsWithContextFunc.
func (mock *s3ClientMock) ListBucketInventoryConfigurationsWithContext(in1 context.Context, in2 *s3.ListBucketInventoryConfigurationsInput, in3 ...request.Option) (*s3.ListBucketInventoryConfigurationsOutput, error) {
	if mock.ListBucketInventoryConfigurationsWithContextFunc == nil {
		panic("s3ClientMock.ListBucketInventoryConfigurationsWithContextFunc: method is nil but s3Client.ListBucketInventoryConfigurationsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.ListBucketInventoryConfigurationsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockListBucketInventoryConfigurationsWithContext.Lock()
	mock.calls.ListBucketInventoryConfigurationsWithContext = append(mock.calls.ListBucketInventoryConfigurationsWithContext, callInfo)
	locks3ClientMockListBucketInventoryConfigurationsWithContext.Unlock()
	return mock.ListBucketInventoryConfigurationsWithContextFunc(in1, in2, in3...)
}

// ListBucketInventoryConfigurationsWithContextCalls gets all the calls that were made to ListBucketInventoryConfigurationsWithContext.
// Check the length with:
//     len(mockeds3Client.ListBucketInventoryConfigurationsWithContextCalls())
func (mock *s3ClientMock) ListBucketInventoryConfigurationsWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.ListBucketInventoryConfigurationsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.ListBucketInventoryConfigurationsInput
		In3 []request.Option
	}
	locks3ClientMockListBucketInventoryConfigurationsWithContext.RLock()
	calls = mock.calls.ListBucketInventoryConfigurationsWithContext
	locks3ClientMockListBucketInventoryConfigurationsWithContext.RUnlock()
	return calls
}

// ListBucketMetricsConfigurations calls ListBucketMetricsConfigurationsFunc.
func (mock *s3ClientMock) ListBucketMetricsConfigurations(in1 *s3.ListBucketMetricsConfigurationsInput) (*s3.ListBucketMetricsConfigurationsOutput, error) {
	if mock.ListBucketMetricsConfigurationsFunc == nil {
		panic("s3ClientMock.ListBucketMetricsConfigurationsFunc: method is nil but s3Client.ListBucketMetricsConfigurations was just called")
	}
	callInfo := struct {
		In1 *s3.ListBucketMetricsConfigurationsInput
	}{
		In1: in1,
	}
	locks3ClientMockListBucketMetricsConfigurations.Lock()
	mock.calls.ListBucketMetricsConfigurations = append(mock.calls.ListBucketMetricsConfigurations, callInfo)
	locks3ClientMockListBucketMetricsConfigurations.Unlock()
	return mock.ListBucketMetricsConfigurationsFunc(in1)
}

// ListBucketMetricsConfigurationsCalls gets all the calls that were made to ListBucketMetricsConfigurations.
// Check the length with:
//     len(mockeds3Client.ListBucketMetricsConfigurationsCalls())
func (mock *s3ClientMock) ListBucketMetricsConfigurationsCalls() []struct {
	In1 *s3.ListBucketMetricsConfigurationsInput
} {
	var calls []struct {
		In1 *s3.ListBucketMetricsConfigurationsInput
	}
	locks3ClientMockListBucketMetricsConfigurations.RLock()
	calls = mock.calls.ListBucketMetricsConfigurations
	locks3ClientMockListBucketMetricsConfigurations.RUnlock()
	return calls
}

// ListBucketMetricsConfigurationsRequest calls ListBucketMetricsConfigurationsRequestFunc.
func (mock *s3ClientMock) ListBucketMetricsConfigurationsRequest(in1 *s3.ListBucketMetricsConfigurationsInput) (*request.Request, *s3.ListBucketMetricsConfigurationsOutput) {
	if mock.ListBucketMetricsConfigurationsRequestFunc == nil {
		panic("s3ClientMock.ListBucketMetricsConfigurationsRequestFunc: method is nil but s3Client.ListBucketMetricsConfigurationsRequest was just called")
	}
	callInfo := struct {
		In1 *s3.ListBucketMetricsConfigurationsInput
	}{
		In1: in1,
	}
	locks3ClientMockListBucketMetricsConfigurationsRequest.Lock()
	mock.calls.ListBucketMetricsConfigurationsRequest = append(mock.calls.ListBucketMetricsConfigurationsRequest, callInfo)
	locks3ClientMockListBucketMetricsConfigurationsRequest.Unlock()
	return mock.ListBucketMetricsConfigurationsRequestFunc(in1)
}

// ListBucketMetricsConfigurationsRequestCalls gets all the calls that were made to ListBucketMetricsConfigurationsRequest.
// Check the length with:
//     len(mockeds3Client.ListBucketMetricsConfigurationsRequestCalls())
func (mock *s3ClientMock) ListBucketMetricsConfigurationsRequestCalls() []struct {
	In1 *s3.ListBucketMetricsConfigurationsInput
} {
	var calls []struct {
		In1 *s3.ListBucketMetricsConfigurationsInput
	}
	locks3ClientMockListBucketMetricsConfigurationsRequest.RLock()
	calls = mock.calls.ListBucketMetricsConfigurationsRequest
	locks3ClientMockListBucketMetricsConfigurationsRequest.RUnlock()
	return calls
}

// ListBucketMetricsConfigurationsWithContext calls ListBucketMetricsConfigurationsWithContextFunc.
func (mock *s3ClientMock) ListBucketMetricsConfigurationsWithContext(in1 context.Context, in2 *s3.ListBucketMetricsConfigurationsInput, in3 ...request.Option) (*s3.ListBucketMetricsConfigurationsOutput, error) {
	if mock.ListBucketMetricsConfigurationsWithContextFunc == nil {
		panic("s3ClientMock.ListBucketMetricsConfigurationsWithContextFunc: method is nil but s3Client.ListBucketMetricsConfigurationsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.ListBucketMetricsConfigurationsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockListBucketMetricsConfigurationsWithContext.Lock()
	mock.calls.ListBucketMetricsConfigurationsWithContext = append(mock.calls.ListBucketMetricsConfigurationsWithContext, callInfo)
	locks3ClientMockListBucketMetricsConfigurationsWithContext.Unlock()
	return mock.ListBucketMetricsConfigurationsWithContextFunc(in1, in2, in3...)
}

// ListBucketMetricsConfigurationsWithContextCalls gets all the calls that were made to ListBucketMetricsConfigurationsWithContext.
// Check the length with:
//     len(mockeds3Client.ListBucketMetricsConfigurationsWithContextCalls())
func (mock *s3ClientMock) ListBucketMetricsConfigurationsWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.ListBucketMetricsConfigurationsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.ListBucketMetricsConfigurationsInput
		In3 []request.Option
	}
	locks3ClientMockListBucketMetricsConfigurationsWithContext.RLock()
	calls = mock.calls.ListBucketMetricsConfigurationsWithContext
	locks3ClientMockListBucketMetricsConfigurationsWithContext.RUnlock()
	return calls
}

// ListBuckets calls ListBucketsFunc.
func (mock *s3ClientMock) ListBuckets(in1 *s3.ListBucketsInput) (*s3.ListBucketsOutput, error) {
	if mock.ListBucketsFunc == nil {
		panic("s3ClientMock.ListBucketsFunc: method is nil but s3Client.ListBuckets was just called")
	}
	callInfo := struct {
		In1 *s3.ListBucketsInput
	}{
		In1: in1,
	}
	locks3ClientMockListBuckets.Lock()
	mock.calls.ListBuckets = append(mock.calls.ListBuckets, callInfo)
	locks3ClientMockListBuckets.Unlock()
	return mock.ListBucketsFunc(in1)
}

// ListBucketsCalls gets all the calls that were made to ListBuckets.
// Check the length with:
//     len(mockeds3Client.ListBucketsCalls())
func (mock *s3ClientMock) ListBucketsCalls() []struct {
	In1 *s3.ListBucketsInput
} {
	var calls []struct {
		In1 *s3.ListBucketsInput
	}
	locks3ClientMockListBuckets.RLock()
	calls = mock.calls.ListBuckets
	locks3ClientMockListBuckets.RUnlock()
	return calls
}

// ListBucketsRequest calls ListBucketsRequestFunc.
func (mock *s3ClientMock) ListBucketsRequest(in1 *s3.ListBucketsInput) (*request.Request, *s3.ListBucketsOutput) {
	if mock.ListBucketsRequestFunc == nil {
		panic("s3ClientMock.ListBucketsRequestFunc: method is nil but s3Client.ListBucketsRequest was just called")
	}
	callInfo := struct {
		In1 *s3.ListBucketsInput
	}{
		In1: in1,
	}
	locks3ClientMockListBucketsRequest.Lock()
	mock.calls.ListBucketsRequest = append(mock.calls.ListBucketsRequest, callInfo)
	locks3ClientMockListBucketsRequest.Unlock()
	return mock.ListBucketsRequestFunc(in1)
}

// ListBucketsRequestCalls gets all the calls that were made to ListBucketsRequest.
// Check the length with:
//     len(mockeds3Client.ListBucketsRequestCalls())
func (mock *s3ClientMock) ListBucketsRequestCalls() []struct {
	In1 *s3.ListBucketsInput
} {
	var calls []struct {
		In1 *s3.ListBucketsInput
	}
	locks3ClientMockListBucketsRequest.RLock()
	calls = mock.calls.ListBucketsRequest
	locks3ClientMockListBucketsRequest.RUnlock()
	return calls
}

// ListBucketsWithContext calls ListBucketsWithContextFunc.
func (mock *s3ClientMock) ListBucketsWithContext(in1 context.Context, in2 *s3.ListBucketsInput, in3 ...request.Option) (*s3.ListBucketsOutput, error) {
	if mock.ListBucketsWithContextFunc == nil {
		panic("s3ClientMock.ListBucketsWithContextFunc: method is nil but s3Client.ListBucketsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.ListBucketsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockListBucketsWithContext.Lock()
	mock.calls.ListBucketsWithContext = append(mock.calls.ListBucketsWithContext, callInfo)
	locks3ClientMockListBucketsWithContext.Unlock()
	return mock.ListBucketsWithContextFunc(in1, in2, in3...)
}

// ListBucketsWithContextCalls gets all the calls that were made to ListBucketsWithContext.
// Check the length with:
//     len(mockeds3Client.ListBucketsWithContextCalls())
func (mock *s3ClientMock) ListBucketsWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.ListBucketsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.ListBucketsInput
		In3 []request.Option
	}
	locks3ClientMockListBucketsWithContext.RLock()
	calls = mock.calls.ListBucketsWithContext
	locks3ClientMockListBucketsWithContext.RUnlock()
	return calls
}

// ListMultipartUploads calls ListMultipartUploadsFunc.
func (mock *s3ClientMock) ListMultipartUploads(in1 *s3.ListMultipartUploadsInput) (*s3.ListMultipartUploadsOutput, error) {
	if mock.ListMultipartUploadsFunc == nil {
		panic("s3ClientMock.ListMultipartUploadsFunc: method is nil but s3Client.ListMultipartUploads was just called")
	}
	callInfo := struct {
		In1 *s3.ListMultipartUploadsInput
	}{
		In1: in1,
	}
	locks3ClientMockListMultipartUploads.Lock()
	mock.calls.ListMultipartUploads = append(mock.calls.ListMultipartUploads, callInfo)
	locks3ClientMockListMultipartUploads.Unlock()
	return mock.ListMultipartUploadsFunc(in1)
}

// ListMultipartUploadsCalls gets all the calls that were made to ListMultipartUploads.
// Check the length with:
//     len(mockeds3Client.ListMultipartUploadsCalls())
func (mock *s3ClientMock) ListMultipartUploadsCalls() []struct {
	In1 *s3.ListMultipartUploadsInput
} {
	var calls []struct {
		In1 *s3.ListMultipartUploadsInput
	}
	locks3ClientMockListMultipartUploads.RLock()
	calls = mock.calls.ListMultipartUploads
	locks3ClientMockListMultipartUploads.RUnlock()
	return calls
}

// ListMultipartUploadsPages calls ListMultipartUploadsPagesFunc.
func (mock *s3ClientMock) ListMultipartUploadsPages(in1 *s3.ListMultipartUploadsInput, in2 func(*s3.ListMultipartUploadsOutput, bool) bool) error {
	if mock.ListMultipartUploadsPagesFunc == nil {
		panic("s3ClientMock.ListMultipartUploadsPagesFunc: method is nil but s3Client.ListMultipartUploadsPages was just called")
	}
	callInfo := struct {
		In1 *s3.ListMultipartUploadsInput
		In2 func(*s3.ListMultipartUploadsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	locks3ClientMockListMultipartUploadsPages.Lock()
	mock.calls.ListMultipartUploadsPages = append(mock.calls.ListMultipartUploadsPages, callInfo)
	locks3ClientMockListMultipartUploadsPages.Unlock()
	return mock.ListMultipartUploadsPagesFunc(in1, in2)
}

// ListMultipartUploadsPagesCalls gets all the calls that were made to ListMultipartUploadsPages.
// Check the length with:
//     len(mockeds3Client.ListMultipartUploadsPagesCalls())
func (mock *s3ClientMock) ListMultipartUploadsPagesCalls() []struct {
	In1 *s3.ListMultipartUploadsInput
	In2 func(*s3.ListMultipartUploadsOutput, bool) bool
} {
	var calls []struct {
		In1 *s3.ListMultipartUploadsInput
		In2 func(*s3.ListMultipartUploadsOutput, bool) bool
	}
	locks3ClientMockListMultipartUploadsPages.RLock()
	calls = mock.calls.ListMultipartUploadsPages
	locks3ClientMockListMultipartUploadsPages.RUnlock()
	return calls
}

// ListMultipartUploadsPagesWithContext calls ListMultipartUploadsPagesWithContextFunc.
func (mock *s3ClientMock) ListMultipartUploadsPagesWithContext(in1 context.Context, in2 *s3.ListMultipartUploadsInput, in3 func(*s3.ListMultipartUploadsOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListMultipartUploadsPagesWithContextFunc == nil {
		panic("s3ClientMock.ListMultipartUploadsPagesWithContextFunc: method is nil but s3Client.ListMultipartUploadsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.ListMultipartUploadsInput
		In3 func(*s3.ListMultipartUploadsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	locks3ClientMockListMultipartUploadsPagesWithContext.Lock()
	mock.calls.ListMultipartUploadsPagesWithContext = append(mock.calls.ListMultipartUploadsPagesWithContext, callInfo)
	locks3ClientMockListMultipartUploadsPagesWithContext.Unlock()
	return mock.ListMultipartUploadsPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListMultipartUploadsPagesWithContextCalls gets all the calls that were made to ListMultipartUploadsPagesWithContext.
// Check the length with:
//     len(mockeds3Client.ListMultipartUploadsPagesWithContextCalls())
func (mock *s3ClientMock) ListMultipartUploadsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.ListMultipartUploadsInput
	In3 func(*s3.ListMultipartUploadsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.ListMultipartUploadsInput
		In3 func(*s3.ListMultipartUploadsOutput, bool) bool
		In4 []request.Option
	}
	locks3ClientMockListMultipartUploadsPagesWithContext.RLock()
	calls = mock.calls.ListMultipartUploadsPagesWithContext
	locks3ClientMockListMultipartUploadsPagesWithContext.RUnlock()
	return calls
}

// ListMultipartUploadsRequest calls ListMultipartUploadsRequestFunc.
func (mock *s3ClientMock) ListMultipartUploadsRequest(in1 *s3.ListMultipartUploadsInput) (*request.Request, *s3.ListMultipartUploadsOutput) {
	if mock.ListMultipartUploadsRequestFunc == nil {
		panic("s3ClientMock.ListMultipartUploadsRequestFunc: method is nil but s3Client.ListMultipartUploadsRequest was just called")
	}
	callInfo := struct {
		In1 *s3.ListMultipartUploadsInput
	}{
		In1: in1,
	}
	locks3ClientMockListMultipartUploadsRequest.Lock()
	mock.calls.ListMultipartUploadsRequest = append(mock.calls.ListMultipartUploadsRequest, callInfo)
	locks3ClientMockListMultipartUploadsRequest.Unlock()
	return mock.ListMultipartUploadsRequestFunc(in1)
}

// ListMultipartUploadsRequestCalls gets all the calls that were made to ListMultipartUploadsRequest.
// Check the length with:
//     len(mockeds3Client.ListMultipartUploadsRequestCalls())
func (mock *s3ClientMock) ListMultipartUploadsRequestCalls() []struct {
	In1 *s3.ListMultipartUploadsInput
} {
	var calls []struct {
		In1 *s3.ListMultipartUploadsInput
	}
	locks3ClientMockListMultipartUploadsRequest.RLock()
	calls = mock.calls.ListMultipartUploadsRequest
	locks3ClientMockListMultipartUploadsRequest.RUnlock()
	return calls
}

// ListMultipartUploadsWithContext calls ListMultipartUploadsWithContextFunc.
func (mock *s3ClientMock) ListMultipartUploadsWithContext(in1 context.Context, in2 *s3.ListMultipartUploadsInput, in3 ...request.Option) (*s3.ListMultipartUploadsOutput, error) {
	if mock.ListMultipartUploadsWithContextFunc == nil {
		panic("s3ClientMock.ListMultipartUploadsWithContextFunc: method is nil but s3Client.ListMultipartUploadsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.ListMultipartUploadsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockListMultipartUploadsWithContext.Lock()
	mock.calls.ListMultipartUploadsWithContext = append(mock.calls.ListMultipartUploadsWithContext, callInfo)
	locks3ClientMockListMultipartUploadsWithContext.Unlock()
	return mock.ListMultipartUploadsWithContextFunc(in1, in2, in3...)
}

// ListMultipartUploadsWithContextCalls gets all the calls that were made to ListMultipartUploadsWithContext.
// Check the length with:
//     len(mockeds3Client.ListMultipartUploadsWithContextCalls())
func (mock *s3ClientMock) ListMultipartUploadsWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.ListMultipartUploadsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.ListMultipartUploadsInput
		In3 []request.Option
	}
	locks3ClientMockListMultipartUploadsWithContext.RLock()
	calls = mock.calls.ListMultipartUploadsWithContext
	locks3ClientMockListMultipartUploadsWithContext.RUnlock()
	return calls
}

// ListObjectVersions calls ListObjectVersionsFunc.
func (mock *s3ClientMock) ListObjectVersions(in1 *s3.ListObjectVersionsInput) (*s3.ListObjectVersionsOutput, error) {
	if mock.ListObjectVersionsFunc == nil {
		panic("s3ClientMock.ListObjectVersionsFunc: method is nil but s3Client.ListObjectVersions was just called")
	}
	callInfo := struct {
		In1 *s3.ListObjectVersionsInput
	}{
		In1: in1,
	}
	locks3ClientMockListObjectVersions.Lock()
	mock.calls.ListObjectVersions = append(mock.calls.ListObjectVersions, callInfo)
	locks3ClientMockListObjectVersions.Unlock()
	return mock.ListObjectVersionsFunc(in1)
}

// ListObjectVersionsCalls gets all the calls that were made to ListObjectVersions.
// Check the length with:
//     len(mockeds3Client.ListObjectVersionsCalls())
func (mock *s3ClientMock) ListObjectVersionsCalls() []struct {
	In1 *s3.ListObjectVersionsInput
} {
	var calls []struct {
		In1 *s3.ListObjectVersionsInput
	}
	locks3ClientMockListObjectVersions.RLock()
	calls = mock.calls.ListObjectVersions
	locks3ClientMockListObjectVersions.RUnlock()
	return calls
}

// ListObjectVersionsPages calls ListObjectVersionsPagesFunc.
func (mock *s3ClientMock) ListObjectVersionsPages(in1 *s3.ListObjectVersionsInput, in2 func(*s3.ListObjectVersionsOutput, bool) bool) error {
	if mock.ListObjectVersionsPagesFunc == nil {
		panic("s3ClientMock.ListObjectVersionsPagesFunc: method is nil but s3Client.ListObjectVersionsPages was just called")
	}
	callInfo := struct {
		In1 *s3.ListObjectVersionsInput
		In2 func(*s3.ListObjectVersionsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	locks3ClientMockListObjectVersionsPages.Lock()
	mock.calls.ListObjectVersionsPages = append(mock.calls.ListObjectVersionsPages, callInfo)
	locks3ClientMockListObjectVersionsPages.Unlock()
	return mock.ListObjectVersionsPagesFunc(in1, in2)
}

// ListObjectVersionsPagesCalls gets all the calls that were made to ListObjectVersionsPages.
// Check the length with:
//     len(mockeds3Client.ListObjectVersionsPagesCalls())
func (mock *s3ClientMock) ListObjectVersionsPagesCalls() []struct {
	In1 *s3.ListObjectVersionsInput
	In2 func(*s3.ListObjectVersionsOutput, bool) bool
} {
	var calls []struct {
		In1 *s3.ListObjectVersionsInput
		In2 func(*s3.ListObjectVersionsOutput, bool) bool
	}
	locks3ClientMockListObjectVersionsPages.RLock()
	calls = mock.calls.ListObjectVersionsPages
	locks3ClientMockListObjectVersionsPages.RUnlock()
	return calls
}

// ListObjectVersionsPagesWithContext calls ListObjectVersionsPagesWithContextFunc.
func (mock *s3ClientMock) ListObjectVersionsPagesWithContext(in1 context.Context, in2 *s3.ListObjectVersionsInput, in3 func(*s3.ListObjectVersionsOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListObjectVersionsPagesWithContextFunc == nil {
		panic("s3ClientMock.ListObjectVersionsPagesWithContextFunc: method is nil but s3Client.ListObjectVersionsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.ListObjectVersionsInput
		In3 func(*s3.ListObjectVersionsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	locks3ClientMockListObjectVersionsPagesWithContext.Lock()
	mock.calls.ListObjectVersionsPagesWithContext = append(mock.calls.ListObjectVersionsPagesWithContext, callInfo)
	locks3ClientMockListObjectVersionsPagesWithContext.Unlock()
	return mock.ListObjectVersionsPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListObjectVersionsPagesWithContextCalls gets all the calls that were made to ListObjectVersionsPagesWithContext.
// Check the length with:
//     len(mockeds3Client.ListObjectVersionsPagesWithContextCalls())
func (mock *s3ClientMock) ListObjectVersionsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.ListObjectVersionsInput
	In3 func(*s3.ListObjectVersionsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.ListObjectVersionsInput
		In3 func(*s3.ListObjectVersionsOutput, bool) bool
		In4 []request.Option
	}
	locks3ClientMockListObjectVersionsPagesWithContext.RLock()
	calls = mock.calls.ListObjectVersionsPagesWithContext
	locks3ClientMockListObjectVersionsPagesWithContext.RUnlock()
	return calls
}

// ListObjectVersionsRequest calls ListObjectVersionsRequestFunc.
func (mock *s3ClientMock) ListObjectVersionsRequest(in1 *s3.ListObjectVersionsInput) (*request.Request, *s3.ListObjectVersionsOutput) {
	if mock.ListObjectVersionsRequestFunc == nil {
		panic("s3ClientMock.ListObjectVersionsRequestFunc: method is nil but s3Client.ListObjectVersionsRequest was just called")
	}
	callInfo := struct {
		In1 *s3.ListObjectVersionsInput
	}{
		In1: in1,
	}
	locks3ClientMockListObjectVersionsRequest.Lock()
	mock.calls.ListObjectVersionsRequest = append(mock.calls.ListObjectVersionsRequest, callInfo)
	locks3ClientMockListObjectVersionsRequest.Unlock()
	return mock.ListObjectVersionsRequestFunc(in1)
}

// ListObjectVersionsRequestCalls gets all the calls that were made to ListObjectVersionsRequest.
// Check the length with:
//     len(mockeds3Client.ListObjectVersionsRequestCalls())
func (mock *s3ClientMock) ListObjectVersionsRequestCalls() []struct {
	In1 *s3.ListObjectVersionsInput
} {
	var calls []struct {
		In1 *s3.ListObjectVersionsInput
	}
	locks3ClientMockListObjectVersionsRequest.RLock()
	calls = mock.calls.ListObjectVersionsRequest
	locks3ClientMockListObjectVersionsRequest.RUnlock()
	return calls
}

// ListObjectVersionsWithContext calls ListObjectVersionsWithContextFunc.
func (mock *s3ClientMock) ListObjectVersionsWithContext(in1 context.Context, in2 *s3.ListObjectVersionsInput, in3 ...request.Option) (*s3.ListObjectVersionsOutput, error) {
	if mock.ListObjectVersionsWithContextFunc == nil {
		panic("s3ClientMock.ListObjectVersionsWithContextFunc: method is nil but s3Client.ListObjectVersionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.ListObjectVersionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockListObjectVersionsWithContext.Lock()
	mock.calls.ListObjectVersionsWithContext = append(mock.calls.ListObjectVersionsWithContext, callInfo)
	locks3ClientMockListObjectVersionsWithContext.Unlock()
	return mock.ListObjectVersionsWithContextFunc(in1, in2, in3...)
}

// ListObjectVersionsWithContextCalls gets all the calls that were made to ListObjectVersionsWithContext.
// Check the length with:
//     len(mockeds3Client.ListObjectVersionsWithContextCalls())
func (mock *s3ClientMock) ListObjectVersionsWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.ListObjectVersionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.ListObjectVersionsInput
		In3 []request.Option
	}
	locks3ClientMockListObjectVersionsWithContext.RLock()
	calls = mock.calls.ListObjectVersionsWithContext
	locks3ClientMockListObjectVersionsWithContext.RUnlock()
	return calls
}

// ListObjects calls ListObjectsFunc.
func (mock *s3ClientMock) ListObjects(in1 *s3.ListObjectsInput) (*s3.ListObjectsOutput, error) {
	if mock.ListObjectsFunc == nil {
		panic("s3ClientMock.ListObjectsFunc: method is nil but s3Client.ListObjects was just called")
	}
	callInfo := struct {
		In1 *s3.ListObjectsInput
	}{
		In1: in1,
	}
	locks3ClientMockListObjects.Lock()
	mock.calls.ListObjects = append(mock.calls.ListObjects, callInfo)
	locks3ClientMockListObjects.Unlock()
	return mock.ListObjectsFunc(in1)
}

// ListObjectsCalls gets all the calls that were made to ListObjects.
// Check the length with:
//     len(mockeds3Client.ListObjectsCalls())
func (mock *s3ClientMock) ListObjectsCalls() []struct {
	In1 *s3.ListObjectsInput
} {
	var calls []struct {
		In1 *s3.ListObjectsInput
	}
	locks3ClientMockListObjects.RLock()
	calls = mock.calls.ListObjects
	locks3ClientMockListObjects.RUnlock()
	return calls
}

// ListObjectsPages calls ListObjectsPagesFunc.
func (mock *s3ClientMock) ListObjectsPages(in1 *s3.ListObjectsInput, in2 func(*s3.ListObjectsOutput, bool) bool) error {
	if mock.ListObjectsPagesFunc == nil {
		panic("s3ClientMock.ListObjectsPagesFunc: method is nil but s3Client.ListObjectsPages was just called")
	}
	callInfo := struct {
		In1 *s3.ListObjectsInput
		In2 func(*s3.ListObjectsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	locks3ClientMockListObjectsPages.Lock()
	mock.calls.ListObjectsPages = append(mock.calls.ListObjectsPages, callInfo)
	locks3ClientMockListObjectsPages.Unlock()
	return mock.ListObjectsPagesFunc(in1, in2)
}

// ListObjectsPagesCalls gets all the calls that were made to ListObjectsPages.
// Check the length with:
//     len(mockeds3Client.ListObjectsPagesCalls())
func (mock *s3ClientMock) ListObjectsPagesCalls() []struct {
	In1 *s3.ListObjectsInput
	In2 func(*s3.ListObjectsOutput, bool) bool
} {
	var calls []struct {
		In1 *s3.ListObjectsInput
		In2 func(*s3.ListObjectsOutput, bool) bool
	}
	locks3ClientMockListObjectsPages.RLock()
	calls = mock.calls.ListObjectsPages
	locks3ClientMockListObjectsPages.RUnlock()
	return calls
}

// ListObjectsPagesWithContext calls ListObjectsPagesWithContextFunc.
func (mock *s3ClientMock) ListObjectsPagesWithContext(in1 context.Context, in2 *s3.ListObjectsInput, in3 func(*s3.ListObjectsOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListObjectsPagesWithContextFunc == nil {
		panic("s3ClientMock.ListObjectsPagesWithContextFunc: method is nil but s3Client.ListObjectsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.ListObjectsInput
		In3 func(*s3.ListObjectsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	locks3ClientMockListObjectsPagesWithContext.Lock()
	mock.calls.ListObjectsPagesWithContext = append(mock.calls.ListObjectsPagesWithContext, callInfo)
	locks3ClientMockListObjectsPagesWithContext.Unlock()
	return mock.ListObjectsPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListObjectsPagesWithContextCalls gets all the calls that were made to ListObjectsPagesWithContext.
// Check the length with:
//     len(mockeds3Client.ListObjectsPagesWithContextCalls())
func (mock *s3ClientMock) ListObjectsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.ListObjectsInput
	In3 func(*s3.ListObjectsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.ListObjectsInput
		In3 func(*s3.ListObjectsOutput, bool) bool
		In4 []request.Option
	}
	locks3ClientMockListObjectsPagesWithContext.RLock()
	calls = mock.calls.ListObjectsPagesWithContext
	locks3ClientMockListObjectsPagesWithContext.RUnlock()
	return calls
}

// ListObjectsRequest calls ListObjectsRequestFunc.
func (mock *s3ClientMock) ListObjectsRequest(in1 *s3.ListObjectsInput) (*request.Request, *s3.ListObjectsOutput) {
	if mock.ListObjectsRequestFunc == nil {
		panic("s3ClientMock.ListObjectsRequestFunc: method is nil but s3Client.ListObjectsRequest was just called")
	}
	callInfo := struct {
		In1 *s3.ListObjectsInput
	}{
		In1: in1,
	}
	locks3ClientMockListObjectsRequest.Lock()
	mock.calls.ListObjectsRequest = append(mock.calls.ListObjectsRequest, callInfo)
	locks3ClientMockListObjectsRequest.Unlock()
	return mock.ListObjectsRequestFunc(in1)
}

// ListObjectsRequestCalls gets all the calls that were made to ListObjectsRequest.
// Check the length with:
//     len(mockeds3Client.ListObjectsRequestCalls())
func (mock *s3ClientMock) ListObjectsRequestCalls() []struct {
	In1 *s3.ListObjectsInput
} {
	var calls []struct {
		In1 *s3.ListObjectsInput
	}
	locks3ClientMockListObjectsRequest.RLock()
	calls = mock.calls.ListObjectsRequest
	locks3ClientMockListObjectsRequest.RUnlock()
	return calls
}

// ListObjectsV2 calls ListObjectsV2Func.
func (mock *s3ClientMock) ListObjectsV2(in1 *s3.ListObjectsV2Input) (*s3.ListObjectsV2Output, error) {
	if mock.ListObjectsV2Func == nil {
		panic("s3ClientMock.ListObjectsV2Func: method is nil but s3Client.ListObjectsV2 was just called")
	}
	callInfo := struct {
		In1 *s3.ListObjectsV2Input
	}{
		In1: in1,
	}
	locks3ClientMockListObjectsV2.Lock()
	mock.calls.ListObjectsV2 = append(mock.calls.ListObjectsV2, callInfo)
	locks3ClientMockListObjectsV2.Unlock()
	return mock.ListObjectsV2Func(in1)
}

// ListObjectsV2Calls gets all the calls that were made to ListObjectsV2.
// Check the length with:
//     len(mockeds3Client.ListObjectsV2Calls())
func (mock *s3ClientMock) ListObjectsV2Calls() []struct {
	In1 *s3.ListObjectsV2Input
} {
	var calls []struct {
		In1 *s3.ListObjectsV2Input
	}
	locks3ClientMockListObjectsV2.RLock()
	calls = mock.calls.ListObjectsV2
	locks3ClientMockListObjectsV2.RUnlock()
	return calls
}

// ListObjectsV2Pages calls ListObjectsV2PagesFunc.
func (mock *s3ClientMock) ListObjectsV2Pages(in1 *s3.ListObjectsV2Input, in2 func(*s3.ListObjectsV2Output, bool) bool) error {
	if mock.ListObjectsV2PagesFunc == nil {
		panic("s3ClientMock.ListObjectsV2PagesFunc: method is nil but s3Client.ListObjectsV2Pages was just called")
	}
	callInfo := struct {
		In1 *s3.ListObjectsV2Input
		In2 func(*s3.ListObjectsV2Output, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	locks3ClientMockListObjectsV2Pages.Lock()
	mock.calls.ListObjectsV2Pages = append(mock.calls.ListObjectsV2Pages, callInfo)
	locks3ClientMockListObjectsV2Pages.Unlock()
	return mock.ListObjectsV2PagesFunc(in1, in2)
}

// ListObjectsV2PagesCalls gets all the calls that were made to ListObjectsV2Pages.
// Check the length with:
//     len(mockeds3Client.ListObjectsV2PagesCalls())
func (mock *s3ClientMock) ListObjectsV2PagesCalls() []struct {
	In1 *s3.ListObjectsV2Input
	In2 func(*s3.ListObjectsV2Output, bool) bool
} {
	var calls []struct {
		In1 *s3.ListObjectsV2Input
		In2 func(*s3.ListObjectsV2Output, bool) bool
	}
	locks3ClientMockListObjectsV2Pages.RLock()
	calls = mock.calls.ListObjectsV2Pages
	locks3ClientMockListObjectsV2Pages.RUnlock()
	return calls
}

// ListObjectsV2PagesWithContext calls ListObjectsV2PagesWithContextFunc.
func (mock *s3ClientMock) ListObjectsV2PagesWithContext(in1 context.Context, in2 *s3.ListObjectsV2Input, in3 func(*s3.ListObjectsV2Output, bool) bool, in4 ...request.Option) error {
	if mock.ListObjectsV2PagesWithContextFunc == nil {
		panic("s3ClientMock.ListObjectsV2PagesWithContextFunc: method is nil but s3Client.ListObjectsV2PagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.ListObjectsV2Input
		In3 func(*s3.ListObjectsV2Output, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	locks3ClientMockListObjectsV2PagesWithContext.Lock()
	mock.calls.ListObjectsV2PagesWithContext = append(mock.calls.ListObjectsV2PagesWithContext, callInfo)
	locks3ClientMockListObjectsV2PagesWithContext.Unlock()
	return mock.ListObjectsV2PagesWithContextFunc(in1, in2, in3, in4...)
}

// ListObjectsV2PagesWithContextCalls gets all the calls that were made to ListObjectsV2PagesWithContext.
// Check the length with:
//     len(mockeds3Client.ListObjectsV2PagesWithContextCalls())
func (mock *s3ClientMock) ListObjectsV2PagesWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.ListObjectsV2Input
	In3 func(*s3.ListObjectsV2Output, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.ListObjectsV2Input
		In3 func(*s3.ListObjectsV2Output, bool) bool
		In4 []request.Option
	}
	locks3ClientMockListObjectsV2PagesWithContext.RLock()
	calls = mock.calls.ListObjectsV2PagesWithContext
	locks3ClientMockListObjectsV2PagesWithContext.RUnlock()
	return calls
}

// ListObjectsV2Request calls ListObjectsV2RequestFunc.
func (mock *s3ClientMock) ListObjectsV2Request(in1 *s3.ListObjectsV2Input) (*request.Request, *s3.ListObjectsV2Output) {
	if mock.ListObjectsV2RequestFunc == nil {
		panic("s3ClientMock.ListObjectsV2RequestFunc: method is nil but s3Client.ListObjectsV2Request was just called")
	}
	callInfo := struct {
		In1 *s3.ListObjectsV2Input
	}{
		In1: in1,
	}
	locks3ClientMockListObjectsV2Request.Lock()
	mock.calls.ListObjectsV2Request = append(mock.calls.ListObjectsV2Request, callInfo)
	locks3ClientMockListObjectsV2Request.Unlock()
	return mock.ListObjectsV2RequestFunc(in1)
}

// ListObjectsV2RequestCalls gets all the calls that were made to ListObjectsV2Request.
// Check the length with:
//     len(mockeds3Client.ListObjectsV2RequestCalls())
func (mock *s3ClientMock) ListObjectsV2RequestCalls() []struct {
	In1 *s3.ListObjectsV2Input
} {
	var calls []struct {
		In1 *s3.ListObjectsV2Input
	}
	locks3ClientMockListObjectsV2Request.RLock()
	calls = mock.calls.ListObjectsV2Request
	locks3ClientMockListObjectsV2Request.RUnlock()
	return calls
}

// ListObjectsV2WithContext calls ListObjectsV2WithContextFunc.
func (mock *s3ClientMock) ListObjectsV2WithContext(in1 context.Context, in2 *s3.ListObjectsV2Input, in3 ...request.Option) (*s3.ListObjectsV2Output, error) {
	if mock.ListObjectsV2WithContextFunc == nil {
		panic("s3ClientMock.ListObjectsV2WithContextFunc: method is nil but s3Client.ListObjectsV2WithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.ListObjectsV2Input
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockListObjectsV2WithContext.Lock()
	mock.calls.ListObjectsV2WithContext = append(mock.calls.ListObjectsV2WithContext, callInfo)
	locks3ClientMockListObjectsV2WithContext.Unlock()
	return mock.ListObjectsV2WithContextFunc(in1, in2, in3...)
}

// ListObjectsV2WithContextCalls gets all the calls that were made to ListObjectsV2WithContext.
// Check the length with:
//     len(mockeds3Client.ListObjectsV2WithContextCalls())
func (mock *s3ClientMock) ListObjectsV2WithContextCalls() []struct {
	In1 context.Context
	In2 *s3.ListObjectsV2Input
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.ListObjectsV2Input
		In3 []request.Option
	}
	locks3ClientMockListObjectsV2WithContext.RLock()
	calls = mock.calls.ListObjectsV2WithContext
	locks3ClientMockListObjectsV2WithContext.RUnlock()
	return calls
}

// ListObjectsWithContext calls ListObjectsWithContextFunc.
func (mock *s3ClientMock) ListObjectsWithContext(in1 context.Context, in2 *s3.ListObjectsInput, in3 ...request.Option) (*s3.ListObjectsOutput, error) {
	if mock.ListObjectsWithContextFunc == nil {
		panic("s3ClientMock.ListObjectsWithContextFunc: method is nil but s3Client.ListObjectsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.ListObjectsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockListObjectsWithContext.Lock()
	mock.calls.ListObjectsWithContext = append(mock.calls.ListObjectsWithContext, callInfo)
	locks3ClientMockListObjectsWithContext.Unlock()
	return mock.ListObjectsWithContextFunc(in1, in2, in3...)
}

// ListObjectsWithContextCalls gets all the calls that were made to ListObjectsWithContext.
// Check the length with:
//     len(mockeds3Client.ListObjectsWithContextCalls())
func (mock *s3ClientMock) ListObjectsWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.ListObjectsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.ListObjectsInput
		In3 []request.Option
	}
	locks3ClientMockListObjectsWithContext.RLock()
	calls = mock.calls.ListObjectsWithContext
	locks3ClientMockListObjectsWithContext.RUnlock()
	return calls
}

// ListParts calls ListPartsFunc.
func (mock *s3ClientMock) ListParts(in1 *s3.ListPartsInput) (*s3.ListPartsOutput, error) {
	if mock.ListPartsFunc == nil {
		panic("s3ClientMock.ListPartsFunc: method is nil but s3Client.ListParts was just called")
	}
	callInfo := struct {
		In1 *s3.ListPartsInput
	}{
		In1: in1,
	}
	locks3ClientMockListParts.Lock()
	mock.calls.ListParts = append(mock.calls.ListParts, callInfo)
	locks3ClientMockListParts.Unlock()
	return mock.ListPartsFunc(in1)
}

// ListPartsCalls gets all the calls that were made to ListParts.
// Check the length with:
//     len(mockeds3Client.ListPartsCalls())
func (mock *s3ClientMock) ListPartsCalls() []struct {
	In1 *s3.ListPartsInput
} {
	var calls []struct {
		In1 *s3.ListPartsInput
	}
	locks3ClientMockListParts.RLock()
	calls = mock.calls.ListParts
	locks3ClientMockListParts.RUnlock()
	return calls
}

// ListPartsPages calls ListPartsPagesFunc.
func (mock *s3ClientMock) ListPartsPages(in1 *s3.ListPartsInput, in2 func(*s3.ListPartsOutput, bool) bool) error {
	if mock.ListPartsPagesFunc == nil {
		panic("s3ClientMock.ListPartsPagesFunc: method is nil but s3Client.ListPartsPages was just called")
	}
	callInfo := struct {
		In1 *s3.ListPartsInput
		In2 func(*s3.ListPartsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	locks3ClientMockListPartsPages.Lock()
	mock.calls.ListPartsPages = append(mock.calls.ListPartsPages, callInfo)
	locks3ClientMockListPartsPages.Unlock()
	return mock.ListPartsPagesFunc(in1, in2)
}

// ListPartsPagesCalls gets all the calls that were made to ListPartsPages.
// Check the length with:
//     len(mockeds3Client.ListPartsPagesCalls())
func (mock *s3ClientMock) ListPartsPagesCalls() []struct {
	In1 *s3.ListPartsInput
	In2 func(*s3.ListPartsOutput, bool) bool
} {
	var calls []struct {
		In1 *s3.ListPartsInput
		In2 func(*s3.ListPartsOutput, bool) bool
	}
	locks3ClientMockListPartsPages.RLock()
	calls = mock.calls.ListPartsPages
	locks3ClientMockListPartsPages.RUnlock()
	return calls
}

// ListPartsPagesWithContext calls ListPartsPagesWithContextFunc.
func (mock *s3ClientMock) ListPartsPagesWithContext(in1 context.Context, in2 *s3.ListPartsInput, in3 func(*s3.ListPartsOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListPartsPagesWithContextFunc == nil {
		panic("s3ClientMock.ListPartsPagesWithContextFunc: method is nil but s3Client.ListPartsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.ListPartsInput
		In3 func(*s3.ListPartsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	locks3ClientMockListPartsPagesWithContext.Lock()
	mock.calls.ListPartsPagesWithContext = append(mock.calls.ListPartsPagesWithContext, callInfo)
	locks3ClientMockListPartsPagesWithContext.Unlock()
	return mock.ListPartsPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListPartsPagesWithContextCalls gets all the calls that were made to ListPartsPagesWithContext.
// Check the length with:
//     len(mockeds3Client.ListPartsPagesWithContextCalls())
func (mock *s3ClientMock) ListPartsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.ListPartsInput
	In3 func(*s3.ListPartsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.ListPartsInput
		In3 func(*s3.ListPartsOutput, bool) bool
		In4 []request.Option
	}
	locks3ClientMockListPartsPagesWithContext.RLock()
	calls = mock.calls.ListPartsPagesWithContext
	locks3ClientMockListPartsPagesWithContext.RUnlock()
	return calls
}

// ListPartsRequest calls ListPartsRequestFunc.
func (mock *s3ClientMock) ListPartsRequest(in1 *s3.ListPartsInput) (*request.Request, *s3.ListPartsOutput) {
	if mock.ListPartsRequestFunc == nil {
		panic("s3ClientMock.ListPartsRequestFunc: method is nil but s3Client.ListPartsRequest was just called")
	}
	callInfo := struct {
		In1 *s3.ListPartsInput
	}{
		In1: in1,
	}
	locks3ClientMockListPartsRequest.Lock()
	mock.calls.ListPartsRequest = append(mock.calls.ListPartsRequest, callInfo)
	locks3ClientMockListPartsRequest.Unlock()
	return mock.ListPartsRequestFunc(in1)
}

// ListPartsRequestCalls gets all the calls that were made to ListPartsRequest.
// Check the length with:
//     len(mockeds3Client.ListPartsRequestCalls())
func (mock *s3ClientMock) ListPartsRequestCalls() []struct {
	In1 *s3.ListPartsInput
} {
	var calls []struct {
		In1 *s3.ListPartsInput
	}
	locks3ClientMockListPartsRequest.RLock()
	calls = mock.calls.ListPartsRequest
	locks3ClientMockListPartsRequest.RUnlock()
	return calls
}

// ListPartsWithContext calls ListPartsWithContextFunc.
func (mock *s3ClientMock) ListPartsWithContext(in1 context.Context, in2 *s3.ListPartsInput, in3 ...request.Option) (*s3.ListPartsOutput, error) {
	if mock.ListPartsWithContextFunc == nil {
		panic("s3ClientMock.ListPartsWithContextFunc: method is nil but s3Client.ListPartsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.ListPartsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockListPartsWithContext.Lock()
	mock.calls.ListPartsWithContext = append(mock.calls.ListPartsWithContext, callInfo)
	locks3ClientMockListPartsWithContext.Unlock()
	return mock.ListPartsWithContextFunc(in1, in2, in3...)
}

// ListPartsWithContextCalls gets all the calls that were made to ListPartsWithContext.
// Check the length with:
//     len(mockeds3Client.ListPartsWithContextCalls())
func (mock *s3ClientMock) ListPartsWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.ListPartsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.ListPartsInput
		In3 []request.Option
	}
	locks3ClientMockListPartsWithContext.RLock()
	calls = mock.calls.ListPartsWithContext
	locks3ClientMockListPartsWithContext.RUnlock()
	return calls
}

// PutBucketAccelerateConfiguration calls PutBucketAccelerateConfigurationFunc.
func (mock *s3ClientMock) PutBucketAccelerateConfiguration(in1 *s3.PutBucketAccelerateConfigurationInput) (*s3.PutBucketAccelerateConfigurationOutput, error) {
	if mock.PutBucketAccelerateConfigurationFunc == nil {
		panic("s3ClientMock.PutBucketAccelerateConfigurationFunc: method is nil but s3Client.PutBucketAccelerateConfiguration was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketAccelerateConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketAccelerateConfiguration.Lock()
	mock.calls.PutBucketAccelerateConfiguration = append(mock.calls.PutBucketAccelerateConfiguration, callInfo)
	locks3ClientMockPutBucketAccelerateConfiguration.Unlock()
	return mock.PutBucketAccelerateConfigurationFunc(in1)
}

// PutBucketAccelerateConfigurationCalls gets all the calls that were made to PutBucketAccelerateConfiguration.
// Check the length with:
//     len(mockeds3Client.PutBucketAccelerateConfigurationCalls())
func (mock *s3ClientMock) PutBucketAccelerateConfigurationCalls() []struct {
	In1 *s3.PutBucketAccelerateConfigurationInput
} {
	var calls []struct {
		In1 *s3.PutBucketAccelerateConfigurationInput
	}
	locks3ClientMockPutBucketAccelerateConfiguration.RLock()
	calls = mock.calls.PutBucketAccelerateConfiguration
	locks3ClientMockPutBucketAccelerateConfiguration.RUnlock()
	return calls
}

// PutBucketAccelerateConfigurationRequest calls PutBucketAccelerateConfigurationRequestFunc.
func (mock *s3ClientMock) PutBucketAccelerateConfigurationRequest(in1 *s3.PutBucketAccelerateConfigurationInput) (*request.Request, *s3.PutBucketAccelerateConfigurationOutput) {
	if mock.PutBucketAccelerateConfigurationRequestFunc == nil {
		panic("s3ClientMock.PutBucketAccelerateConfigurationRequestFunc: method is nil but s3Client.PutBucketAccelerateConfigurationRequest was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketAccelerateConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketAccelerateConfigurationRequest.Lock()
	mock.calls.PutBucketAccelerateConfigurationRequest = append(mock.calls.PutBucketAccelerateConfigurationRequest, callInfo)
	locks3ClientMockPutBucketAccelerateConfigurationRequest.Unlock()
	return mock.PutBucketAccelerateConfigurationRequestFunc(in1)
}

// PutBucketAccelerateConfigurationRequestCalls gets all the calls that were made to PutBucketAccelerateConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketAccelerateConfigurationRequestCalls())
func (mock *s3ClientMock) PutBucketAccelerateConfigurationRequestCalls() []struct {
	In1 *s3.PutBucketAccelerateConfigurationInput
} {
	var calls []struct {
		In1 *s3.PutBucketAccelerateConfigurationInput
	}
	locks3ClientMockPutBucketAccelerateConfigurationRequest.RLock()
	calls = mock.calls.PutBucketAccelerateConfigurationRequest
	locks3ClientMockPutBucketAccelerateConfigurationRequest.RUnlock()
	return calls
}

// PutBucketAccelerateConfigurationWithContext calls PutBucketAccelerateConfigurationWithContextFunc.
func (mock *s3ClientMock) PutBucketAccelerateConfigurationWithContext(in1 context.Context, in2 *s3.PutBucketAccelerateConfigurationInput, in3 ...request.Option) (*s3.PutBucketAccelerateConfigurationOutput, error) {
	if mock.PutBucketAccelerateConfigurationWithContextFunc == nil {
		panic("s3ClientMock.PutBucketAccelerateConfigurationWithContextFunc: method is nil but s3Client.PutBucketAccelerateConfigurationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.PutBucketAccelerateConfigurationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockPutBucketAccelerateConfigurationWithContext.Lock()
	mock.calls.PutBucketAccelerateConfigurationWithContext = append(mock.calls.PutBucketAccelerateConfigurationWithContext, callInfo)
	locks3ClientMockPutBucketAccelerateConfigurationWithContext.Unlock()
	return mock.PutBucketAccelerateConfigurationWithContextFunc(in1, in2, in3...)
}

// PutBucketAccelerateConfigurationWithContextCalls gets all the calls that were made to PutBucketAccelerateConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketAccelerateConfigurationWithContextCalls())
func (mock *s3ClientMock) PutBucketAccelerateConfigurationWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.PutBucketAccelerateConfigurationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.PutBucketAccelerateConfigurationInput
		In3 []request.Option
	}
	locks3ClientMockPutBucketAccelerateConfigurationWithContext.RLock()
	calls = mock.calls.PutBucketAccelerateConfigurationWithContext
	locks3ClientMockPutBucketAccelerateConfigurationWithContext.RUnlock()
	return calls
}

// PutBucketAcl calls PutBucketAclFunc.
func (mock *s3ClientMock) PutBucketAcl(in1 *s3.PutBucketAclInput) (*s3.PutBucketAclOutput, error) {
	if mock.PutBucketAclFunc == nil {
		panic("s3ClientMock.PutBucketAclFunc: method is nil but s3Client.PutBucketAcl was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketAclInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketAcl.Lock()
	mock.calls.PutBucketAcl = append(mock.calls.PutBucketAcl, callInfo)
	locks3ClientMockPutBucketAcl.Unlock()
	return mock.PutBucketAclFunc(in1)
}

// PutBucketAclCalls gets all the calls that were made to PutBucketAcl.
// Check the length with:
//     len(mockeds3Client.PutBucketAclCalls())
func (mock *s3ClientMock) PutBucketAclCalls() []struct {
	In1 *s3.PutBucketAclInput
} {
	var calls []struct {
		In1 *s3.PutBucketAclInput
	}
	locks3ClientMockPutBucketAcl.RLock()
	calls = mock.calls.PutBucketAcl
	locks3ClientMockPutBucketAcl.RUnlock()
	return calls
}

// PutBucketAclRequest calls PutBucketAclRequestFunc.
func (mock *s3ClientMock) PutBucketAclRequest(in1 *s3.PutBucketAclInput) (*request.Request, *s3.PutBucketAclOutput) {
	if mock.PutBucketAclRequestFunc == nil {
		panic("s3ClientMock.PutBucketAclRequestFunc: method is nil but s3Client.PutBucketAclRequest was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketAclInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketAclRequest.Lock()
	mock.calls.PutBucketAclRequest = append(mock.calls.PutBucketAclRequest, callInfo)
	locks3ClientMockPutBucketAclRequest.Unlock()
	return mock.PutBucketAclRequestFunc(in1)
}

// PutBucketAclRequestCalls gets all the calls that were made to PutBucketAclRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketAclRequestCalls())
func (mock *s3ClientMock) PutBucketAclRequestCalls() []struct {
	In1 *s3.PutBucketAclInput
} {
	var calls []struct {
		In1 *s3.PutBucketAclInput
	}
	locks3ClientMockPutBucketAclRequest.RLock()
	calls = mock.calls.PutBucketAclRequest
	locks3ClientMockPutBucketAclRequest.RUnlock()
	return calls
}

// PutBucketAclWithContext calls PutBucketAclWithContextFunc.
func (mock *s3ClientMock) PutBucketAclWithContext(in1 context.Context, in2 *s3.PutBucketAclInput, in3 ...request.Option) (*s3.PutBucketAclOutput, error) {
	if mock.PutBucketAclWithContextFunc == nil {
		panic("s3ClientMock.PutBucketAclWithContextFunc: method is nil but s3Client.PutBucketAclWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.PutBucketAclInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockPutBucketAclWithContext.Lock()
	mock.calls.PutBucketAclWithContext = append(mock.calls.PutBucketAclWithContext, callInfo)
	locks3ClientMockPutBucketAclWithContext.Unlock()
	return mock.PutBucketAclWithContextFunc(in1, in2, in3...)
}

// PutBucketAclWithContextCalls gets all the calls that were made to PutBucketAclWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketAclWithContextCalls())
func (mock *s3ClientMock) PutBucketAclWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.PutBucketAclInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.PutBucketAclInput
		In3 []request.Option
	}
	locks3ClientMockPutBucketAclWithContext.RLock()
	calls = mock.calls.PutBucketAclWithContext
	locks3ClientMockPutBucketAclWithContext.RUnlock()
	return calls
}

// PutBucketAnalyticsConfiguration calls PutBucketAnalyticsConfigurationFunc.
func (mock *s3ClientMock) PutBucketAnalyticsConfiguration(in1 *s3.PutBucketAnalyticsConfigurationInput) (*s3.PutBucketAnalyticsConfigurationOutput, error) {
	if mock.PutBucketAnalyticsConfigurationFunc == nil {
		panic("s3ClientMock.PutBucketAnalyticsConfigurationFunc: method is nil but s3Client.PutBucketAnalyticsConfiguration was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketAnalyticsConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketAnalyticsConfiguration.Lock()
	mock.calls.PutBucketAnalyticsConfiguration = append(mock.calls.PutBucketAnalyticsConfiguration, callInfo)
	locks3ClientMockPutBucketAnalyticsConfiguration.Unlock()
	return mock.PutBucketAnalyticsConfigurationFunc(in1)
}

// PutBucketAnalyticsConfigurationCalls gets all the calls that were made to PutBucketAnalyticsConfiguration.
// Check the length with:
//     len(mockeds3Client.PutBucketAnalyticsConfigurationCalls())
func (mock *s3ClientMock) PutBucketAnalyticsConfigurationCalls() []struct {
	In1 *s3.PutBucketAnalyticsConfigurationInput
} {
	var calls []struct {
		In1 *s3.PutBucketAnalyticsConfigurationInput
	}
	locks3ClientMockPutBucketAnalyticsConfiguration.RLock()
	calls = mock.calls.PutBucketAnalyticsConfiguration
	locks3ClientMockPutBucketAnalyticsConfiguration.RUnlock()
	return calls
}

// PutBucketAnalyticsConfigurationRequest calls PutBucketAnalyticsConfigurationRequestFunc.
func (mock *s3ClientMock) PutBucketAnalyticsConfigurationRequest(in1 *s3.PutBucketAnalyticsConfigurationInput) (*request.Request, *s3.PutBucketAnalyticsConfigurationOutput) {
	if mock.PutBucketAnalyticsConfigurationRequestFunc == nil {
		panic("s3ClientMock.PutBucketAnalyticsConfigurationRequestFunc: method is nil but s3Client.PutBucketAnalyticsConfigurationRequest was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketAnalyticsConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketAnalyticsConfigurationRequest.Lock()
	mock.calls.PutBucketAnalyticsConfigurationRequest = append(mock.calls.PutBucketAnalyticsConfigurationRequest, callInfo)
	locks3ClientMockPutBucketAnalyticsConfigurationRequest.Unlock()
	return mock.PutBucketAnalyticsConfigurationRequestFunc(in1)
}

// PutBucketAnalyticsConfigurationRequestCalls gets all the calls that were made to PutBucketAnalyticsConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketAnalyticsConfigurationRequestCalls())
func (mock *s3ClientMock) PutBucketAnalyticsConfigurationRequestCalls() []struct {
	In1 *s3.PutBucketAnalyticsConfigurationInput
} {
	var calls []struct {
		In1 *s3.PutBucketAnalyticsConfigurationInput
	}
	locks3ClientMockPutBucketAnalyticsConfigurationRequest.RLock()
	calls = mock.calls.PutBucketAnalyticsConfigurationRequest
	locks3ClientMockPutBucketAnalyticsConfigurationRequest.RUnlock()
	return calls
}

// PutBucketAnalyticsConfigurationWithContext calls PutBucketAnalyticsConfigurationWithContextFunc.
func (mock *s3ClientMock) PutBucketAnalyticsConfigurationWithContext(in1 context.Context, in2 *s3.PutBucketAnalyticsConfigurationInput, in3 ...request.Option) (*s3.PutBucketAnalyticsConfigurationOutput, error) {
	if mock.PutBucketAnalyticsConfigurationWithContextFunc == nil {
		panic("s3ClientMock.PutBucketAnalyticsConfigurationWithContextFunc: method is nil but s3Client.PutBucketAnalyticsConfigurationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.PutBucketAnalyticsConfigurationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockPutBucketAnalyticsConfigurationWithContext.Lock()
	mock.calls.PutBucketAnalyticsConfigurationWithContext = append(mock.calls.PutBucketAnalyticsConfigurationWithContext, callInfo)
	locks3ClientMockPutBucketAnalyticsConfigurationWithContext.Unlock()
	return mock.PutBucketAnalyticsConfigurationWithContextFunc(in1, in2, in3...)
}

// PutBucketAnalyticsConfigurationWithContextCalls gets all the calls that were made to PutBucketAnalyticsConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketAnalyticsConfigurationWithContextCalls())
func (mock *s3ClientMock) PutBucketAnalyticsConfigurationWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.PutBucketAnalyticsConfigurationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.PutBucketAnalyticsConfigurationInput
		In3 []request.Option
	}
	locks3ClientMockPutBucketAnalyticsConfigurationWithContext.RLock()
	calls = mock.calls.PutBucketAnalyticsConfigurationWithContext
	locks3ClientMockPutBucketAnalyticsConfigurationWithContext.RUnlock()
	return calls
}

// PutBucketCors calls PutBucketCorsFunc.
func (mock *s3ClientMock) PutBucketCors(in1 *s3.PutBucketCorsInput) (*s3.PutBucketCorsOutput, error) {
	if mock.PutBucketCorsFunc == nil {
		panic("s3ClientMock.PutBucketCorsFunc: method is nil but s3Client.PutBucketCors was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketCorsInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketCors.Lock()
	mock.calls.PutBucketCors = append(mock.calls.PutBucketCors, callInfo)
	locks3ClientMockPutBucketCors.Unlock()
	return mock.PutBucketCorsFunc(in1)
}

// PutBucketCorsCalls gets all the calls that were made to PutBucketCors.
// Check the length with:
//     len(mockeds3Client.PutBucketCorsCalls())
func (mock *s3ClientMock) PutBucketCorsCalls() []struct {
	In1 *s3.PutBucketCorsInput
} {
	var calls []struct {
		In1 *s3.PutBucketCorsInput
	}
	locks3ClientMockPutBucketCors.RLock()
	calls = mock.calls.PutBucketCors
	locks3ClientMockPutBucketCors.RUnlock()
	return calls
}

// PutBucketCorsRequest calls PutBucketCorsRequestFunc.
func (mock *s3ClientMock) PutBucketCorsRequest(in1 *s3.PutBucketCorsInput) (*request.Request, *s3.PutBucketCorsOutput) {
	if mock.PutBucketCorsRequestFunc == nil {
		panic("s3ClientMock.PutBucketCorsRequestFunc: method is nil but s3Client.PutBucketCorsRequest was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketCorsInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketCorsRequest.Lock()
	mock.calls.PutBucketCorsRequest = append(mock.calls.PutBucketCorsRequest, callInfo)
	locks3ClientMockPutBucketCorsRequest.Unlock()
	return mock.PutBucketCorsRequestFunc(in1)
}

// PutBucketCorsRequestCalls gets all the calls that were made to PutBucketCorsRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketCorsRequestCalls())
func (mock *s3ClientMock) PutBucketCorsRequestCalls() []struct {
	In1 *s3.PutBucketCorsInput
} {
	var calls []struct {
		In1 *s3.PutBucketCorsInput
	}
	locks3ClientMockPutBucketCorsRequest.RLock()
	calls = mock.calls.PutBucketCorsRequest
	locks3ClientMockPutBucketCorsRequest.RUnlock()
	return calls
}

// PutBucketCorsWithContext calls PutBucketCorsWithContextFunc.
func (mock *s3ClientMock) PutBucketCorsWithContext(in1 context.Context, in2 *s3.PutBucketCorsInput, in3 ...request.Option) (*s3.PutBucketCorsOutput, error) {
	if mock.PutBucketCorsWithContextFunc == nil {
		panic("s3ClientMock.PutBucketCorsWithContextFunc: method is nil but s3Client.PutBucketCorsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.PutBucketCorsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockPutBucketCorsWithContext.Lock()
	mock.calls.PutBucketCorsWithContext = append(mock.calls.PutBucketCorsWithContext, callInfo)
	locks3ClientMockPutBucketCorsWithContext.Unlock()
	return mock.PutBucketCorsWithContextFunc(in1, in2, in3...)
}

// PutBucketCorsWithContextCalls gets all the calls that were made to PutBucketCorsWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketCorsWithContextCalls())
func (mock *s3ClientMock) PutBucketCorsWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.PutBucketCorsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.PutBucketCorsInput
		In3 []request.Option
	}
	locks3ClientMockPutBucketCorsWithContext.RLock()
	calls = mock.calls.PutBucketCorsWithContext
	locks3ClientMockPutBucketCorsWithContext.RUnlock()
	return calls
}

// PutBucketEncryption calls PutBucketEncryptionFunc.
func (mock *s3ClientMock) PutBucketEncryption(in1 *s3.PutBucketEncryptionInput) (*s3.PutBucketEncryptionOutput, error) {
	if mock.PutBucketEncryptionFunc == nil {
		panic("s3ClientMock.PutBucketEncryptionFunc: method is nil but s3Client.PutBucketEncryption was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketEncryptionInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketEncryption.Lock()
	mock.calls.PutBucketEncryption = append(mock.calls.PutBucketEncryption, callInfo)
	locks3ClientMockPutBucketEncryption.Unlock()
	return mock.PutBucketEncryptionFunc(in1)
}

// PutBucketEncryptionCalls gets all the calls that were made to PutBucketEncryption.
// Check the length with:
//     len(mockeds3Client.PutBucketEncryptionCalls())
func (mock *s3ClientMock) PutBucketEncryptionCalls() []struct {
	In1 *s3.PutBucketEncryptionInput
} {
	var calls []struct {
		In1 *s3.PutBucketEncryptionInput
	}
	locks3ClientMockPutBucketEncryption.RLock()
	calls = mock.calls.PutBucketEncryption
	locks3ClientMockPutBucketEncryption.RUnlock()
	return calls
}

// PutBucketEncryptionRequest calls PutBucketEncryptionRequestFunc.
func (mock *s3ClientMock) PutBucketEncryptionRequest(in1 *s3.PutBucketEncryptionInput) (*request.Request, *s3.PutBucketEncryptionOutput) {
	if mock.PutBucketEncryptionRequestFunc == nil {
		panic("s3ClientMock.PutBucketEncryptionRequestFunc: method is nil but s3Client.PutBucketEncryptionRequest was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketEncryptionInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketEncryptionRequest.Lock()
	mock.calls.PutBucketEncryptionRequest = append(mock.calls.PutBucketEncryptionRequest, callInfo)
	locks3ClientMockPutBucketEncryptionRequest.Unlock()
	return mock.PutBucketEncryptionRequestFunc(in1)
}

// PutBucketEncryptionRequestCalls gets all the calls that were made to PutBucketEncryptionRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketEncryptionRequestCalls())
func (mock *s3ClientMock) PutBucketEncryptionRequestCalls() []struct {
	In1 *s3.PutBucketEncryptionInput
} {
	var calls []struct {
		In1 *s3.PutBucketEncryptionInput
	}
	locks3ClientMockPutBucketEncryptionRequest.RLock()
	calls = mock.calls.PutBucketEncryptionRequest
	locks3ClientMockPutBucketEncryptionRequest.RUnlock()
	return calls
}

// PutBucketEncryptionWithContext calls PutBucketEncryptionWithContextFunc.
func (mock *s3ClientMock) PutBucketEncryptionWithContext(in1 context.Context, in2 *s3.PutBucketEncryptionInput, in3 ...request.Option) (*s3.PutBucketEncryptionOutput, error) {
	if mock.PutBucketEncryptionWithContextFunc == nil {
		panic("s3ClientMock.PutBucketEncryptionWithContextFunc: method is nil but s3Client.PutBucketEncryptionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.PutBucketEncryptionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockPutBucketEncryptionWithContext.Lock()
	mock.calls.PutBucketEncryptionWithContext = append(mock.calls.PutBucketEncryptionWithContext, callInfo)
	locks3ClientMockPutBucketEncryptionWithContext.Unlock()
	return mock.PutBucketEncryptionWithContextFunc(in1, in2, in3...)
}

// PutBucketEncryptionWithContextCalls gets all the calls that were made to PutBucketEncryptionWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketEncryptionWithContextCalls())
func (mock *s3ClientMock) PutBucketEncryptionWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.PutBucketEncryptionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.PutBucketEncryptionInput
		In3 []request.Option
	}
	locks3ClientMockPutBucketEncryptionWithContext.RLock()
	calls = mock.calls.PutBucketEncryptionWithContext
	locks3ClientMockPutBucketEncryptionWithContext.RUnlock()
	return calls
}

// PutBucketInventoryConfiguration calls PutBucketInventoryConfigurationFunc.
func (mock *s3ClientMock) PutBucketInventoryConfiguration(in1 *s3.PutBucketInventoryConfigurationInput) (*s3.PutBucketInventoryConfigurationOutput, error) {
	if mock.PutBucketInventoryConfigurationFunc == nil {
		panic("s3ClientMock.PutBucketInventoryConfigurationFunc: method is nil but s3Client.PutBucketInventoryConfiguration was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketInventoryConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketInventoryConfiguration.Lock()
	mock.calls.PutBucketInventoryConfiguration = append(mock.calls.PutBucketInventoryConfiguration, callInfo)
	locks3ClientMockPutBucketInventoryConfiguration.Unlock()
	return mock.PutBucketInventoryConfigurationFunc(in1)
}

// PutBucketInventoryConfigurationCalls gets all the calls that were made to PutBucketInventoryConfiguration.
// Check the length with:
//     len(mockeds3Client.PutBucketInventoryConfigurationCalls())
func (mock *s3ClientMock) PutBucketInventoryConfigurationCalls() []struct {
	In1 *s3.PutBucketInventoryConfigurationInput
} {
	var calls []struct {
		In1 *s3.PutBucketInventoryConfigurationInput
	}
	locks3ClientMockPutBucketInventoryConfiguration.RLock()
	calls = mock.calls.PutBucketInventoryConfiguration
	locks3ClientMockPutBucketInventoryConfiguration.RUnlock()
	return calls
}

// PutBucketInventoryConfigurationRequest calls PutBucketInventoryConfigurationRequestFunc.
func (mock *s3ClientMock) PutBucketInventoryConfigurationRequest(in1 *s3.PutBucketInventoryConfigurationInput) (*request.Request, *s3.PutBucketInventoryConfigurationOutput) {
	if mock.PutBucketInventoryConfigurationRequestFunc == nil {
		panic("s3ClientMock.PutBucketInventoryConfigurationRequestFunc: method is nil but s3Client.PutBucketInventoryConfigurationRequest was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketInventoryConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketInventoryConfigurationRequest.Lock()
	mock.calls.PutBucketInventoryConfigurationRequest = append(mock.calls.PutBucketInventoryConfigurationRequest, callInfo)
	locks3ClientMockPutBucketInventoryConfigurationRequest.Unlock()
	return mock.PutBucketInventoryConfigurationRequestFunc(in1)
}

// PutBucketInventoryConfigurationRequestCalls gets all the calls that were made to PutBucketInventoryConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketInventoryConfigurationRequestCalls())
func (mock *s3ClientMock) PutBucketInventoryConfigurationRequestCalls() []struct {
	In1 *s3.PutBucketInventoryConfigurationInput
} {
	var calls []struct {
		In1 *s3.PutBucketInventoryConfigurationInput
	}
	locks3ClientMockPutBucketInventoryConfigurationRequest.RLock()
	calls = mock.calls.PutBucketInventoryConfigurationRequest
	locks3ClientMockPutBucketInventoryConfigurationRequest.RUnlock()
	return calls
}

// PutBucketInventoryConfigurationWithContext calls PutBucketInventoryConfigurationWithContextFunc.
func (mock *s3ClientMock) PutBucketInventoryConfigurationWithContext(in1 context.Context, in2 *s3.PutBucketInventoryConfigurationInput, in3 ...request.Option) (*s3.PutBucketInventoryConfigurationOutput, error) {
	if mock.PutBucketInventoryConfigurationWithContextFunc == nil {
		panic("s3ClientMock.PutBucketInventoryConfigurationWithContextFunc: method is nil but s3Client.PutBucketInventoryConfigurationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.PutBucketInventoryConfigurationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockPutBucketInventoryConfigurationWithContext.Lock()
	mock.calls.PutBucketInventoryConfigurationWithContext = append(mock.calls.PutBucketInventoryConfigurationWithContext, callInfo)
	locks3ClientMockPutBucketInventoryConfigurationWithContext.Unlock()
	return mock.PutBucketInventoryConfigurationWithContextFunc(in1, in2, in3...)
}

// PutBucketInventoryConfigurationWithContextCalls gets all the calls that were made to PutBucketInventoryConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketInventoryConfigurationWithContextCalls())
func (mock *s3ClientMock) PutBucketInventoryConfigurationWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.PutBucketInventoryConfigurationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.PutBucketInventoryConfigurationInput
		In3 []request.Option
	}
	locks3ClientMockPutBucketInventoryConfigurationWithContext.RLock()
	calls = mock.calls.PutBucketInventoryConfigurationWithContext
	locks3ClientMockPutBucketInventoryConfigurationWithContext.RUnlock()
	return calls
}

// PutBucketLifecycle calls PutBucketLifecycleFunc.
func (mock *s3ClientMock) PutBucketLifecycle(in1 *s3.PutBucketLifecycleInput) (*s3.PutBucketLifecycleOutput, error) {
	if mock.PutBucketLifecycleFunc == nil {
		panic("s3ClientMock.PutBucketLifecycleFunc: method is nil but s3Client.PutBucketLifecycle was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketLifecycleInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketLifecycle.Lock()
	mock.calls.PutBucketLifecycle = append(mock.calls.PutBucketLifecycle, callInfo)
	locks3ClientMockPutBucketLifecycle.Unlock()
	return mock.PutBucketLifecycleFunc(in1)
}

// PutBucketLifecycleCalls gets all the calls that were made to PutBucketLifecycle.
// Check the length with:
//     len(mockeds3Client.PutBucketLifecycleCalls())
func (mock *s3ClientMock) PutBucketLifecycleCalls() []struct {
	In1 *s3.PutBucketLifecycleInput
} {
	var calls []struct {
		In1 *s3.PutBucketLifecycleInput
	}
	locks3ClientMockPutBucketLifecycle.RLock()
	calls = mock.calls.PutBucketLifecycle
	locks3ClientMockPutBucketLifecycle.RUnlock()
	return calls
}

// PutBucketLifecycleConfiguration calls PutBucketLifecycleConfigurationFunc.
func (mock *s3ClientMock) PutBucketLifecycleConfiguration(in1 *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error) {
	if mock.PutBucketLifecycleConfigurationFunc == nil {
		panic("s3ClientMock.PutBucketLifecycleConfigurationFunc: method is nil but s3Client.PutBucketLifecycleConfiguration was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketLifecycleConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketLifecycleConfiguration.Lock()
	mock.calls.PutBucketLifecycleConfiguration = append(mock.calls.PutBucketLifecycleConfiguration, callInfo)
	locks3ClientMockPutBucketLifecycleConfiguration.Unlock()
	return mock.PutBucketLifecycleConfigurationFunc(in1)
}

// PutBucketLifecycleConfigurationCalls gets all the calls that were made to PutBucketLifecycleConfiguration.
// Check the length with:
//     len(mockeds3Client.PutBucketLifecycleConfigurationCalls())
func (mock *s3ClientMock) PutBucketLifecycleConfigurationCalls() []struct {
	In1 *s3.PutBucketLifecycleConfigurationInput
} {
	var calls []struct {
		In1 *s3.PutBucketLifecycleConfigurationInput
	}
	locks3ClientMockPutBucketLifecycleConfiguration.RLock()
	calls = mock.calls.PutBucketLifecycleConfiguration
	locks3ClientMockPutBucketLifecycleConfiguration.RUnlock()
	return calls
}

// PutBucketLifecycleConfigurationRequest calls PutBucketLifecycleConfigurationRequestFunc.
func (mock *s3ClientMock) PutBucketLifecycleConfigurationRequest(in1 *s3.PutBucketLifecycleConfigurationInput) (*request.Request, *s3.PutBucketLifecycleConfigurationOutput) {
	if mock.PutBucketLifecycleConfigurationRequestFunc == nil {
		panic("s3ClientMock.PutBucketLifecycleConfigurationRequestFunc: method is nil but s3Client.PutBucketLifecycleConfigurationRequest was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketLifecycleConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketLifecycleConfigurationRequest.Lock()
	mock.calls.PutBucketLifecycleConfigurationRequest = append(mock.calls.PutBucketLifecycleConfigurationRequest, callInfo)
	locks3ClientMockPutBucketLifecycleConfigurationRequest.Unlock()
	return mock.PutBucketLifecycleConfigurationRequestFunc(in1)
}

// PutBucketLifecycleConfigurationRequestCalls gets all the calls that were made to PutBucketLifecycleConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketLifecycleConfigurationRequestCalls())
func (mock *s3ClientMock) PutBucketLifecycleConfigurationRequestCalls() []struct {
	In1 *s3.PutBucketLifecycleConfigurationInput
} {
	var calls []struct {
		In1 *s3.PutBucketLifecycleConfigurationInput
	}
	locks3ClientMockPutBucketLifecycleConfigurationRequest.RLock()
	calls = mock.calls.PutBucketLifecycleConfigurationRequest
	locks3ClientMockPutBucketLifecycleConfigurationRequest.RUnlock()
	return calls
}

// PutBucketLifecycleConfigurationWithContext calls PutBucketLifecycleConfigurationWithContextFunc.
func (mock *s3ClientMock) PutBucketLifecycleConfigurationWithContext(in1 context.Context, in2 *s3.PutBucketLifecycleConfigurationInput, in3 ...request.Option) (*s3.PutBucketLifecycleConfigurationOutput, error) {
	if mock.PutBucketLifecycleConfigurationWithContextFunc == nil {
		panic("s3ClientMock.PutBucketLifecycleConfigurationWithContextFunc: method is nil but s3Client.PutBucketLifecycleConfigurationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.PutBucketLifecycleConfigurationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockPutBucketLifecycleConfigurationWithContext.Lock()
	mock.calls.PutBucketLifecycleConfigurationWithContext = append(mock.calls.PutBucketLifecycleConfigurationWithContext, callInfo)
	locks3ClientMockPutBucketLifecycleConfigurationWithContext.Unlock()
	return mock.PutBucketLifecycleConfigurationWithContextFunc(in1, in2, in3...)
}

// PutBucketLifecycleConfigurationWithContextCalls gets all the calls that were made to PutBucketLifecycleConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketLifecycleConfigurationWithContextCalls())
func (mock *s3ClientMock) PutBucketLifecycleConfigurationWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.PutBucketLifecycleConfigurationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.PutBucketLifecycleConfigurationInput
		In3 []request.Option
	}
	locks3ClientMockPutBucketLifecycleConfigurationWithContext.RLock()
	calls = mock.calls.PutBucketLifecycleConfigurationWithContext
	locks3ClientMockPutBucketLifecycleConfigurationWithContext.RUnlock()
	return calls
}

// PutBucketLifecycleRequest calls PutBucketLifecycleRequestFunc.
func (mock *s3ClientMock) PutBucketLifecycleRequest(in1 *s3.PutBucketLifecycleInput) (*request.Request, *s3.PutBucketLifecycleOutput) {
	if mock.PutBucketLifecycleRequestFunc == nil {
		panic("s3ClientMock.PutBucketLifecycleRequestFunc: method is nil but s3Client.PutBucketLifecycleRequest was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketLifecycleInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketLifecycleRequest.Lock()
	mock.calls.PutBucketLifecycleRequest = append(mock.calls.PutBucketLifecycleRequest, callInfo)
	locks3ClientMockPutBucketLifecycleRequest.Unlock()
	return mock.PutBucketLifecycleRequestFunc(in1)
}

// PutBucketLifecycleRequestCalls gets all the calls that were made to PutBucketLifecycleRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketLifecycleRequestCalls())
func (mock *s3ClientMock) PutBucketLifecycleRequestCalls() []struct {
	In1 *s3.PutBucketLifecycleInput
} {
	var calls []struct {
		In1 *s3.PutBucketLifecycleInput
	}
	locks3ClientMockPutBucketLifecycleRequest.RLock()
	calls = mock.calls.PutBucketLifecycleRequest
	locks3ClientMockPutBucketLifecycleRequest.RUnlock()
	return calls
}

// PutBucketLifecycleWithContext calls PutBucketLifecycleWithContextFunc.
func (mock *s3ClientMock) PutBucketLifecycleWithContext(in1 context.Context, in2 *s3.PutBucketLifecycleInput, in3 ...request.Option) (*s3.PutBucketLifecycleOutput, error) {
	if mock.PutBucketLifecycleWithContextFunc == nil {
		panic("s3ClientMock.PutBucketLifecycleWithContextFunc: method is nil but s3Client.PutBucketLifecycleWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.PutBucketLifecycleInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockPutBucketLifecycleWithContext.Lock()
	mock.calls.PutBucketLifecycleWithContext = append(mock.calls.PutBucketLifecycleWithContext, callInfo)
	locks3ClientMockPutBucketLifecycleWithContext.Unlock()
	return mock.PutBucketLifecycleWithContextFunc(in1, in2, in3...)
}

// PutBucketLifecycleWithContextCalls gets all the calls that were made to PutBucketLifecycleWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketLifecycleWithContextCalls())
func (mock *s3ClientMock) PutBucketLifecycleWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.PutBucketLifecycleInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.PutBucketLifecycleInput
		In3 []request.Option
	}
	locks3ClientMockPutBucketLifecycleWithContext.RLock()
	calls = mock.calls.PutBucketLifecycleWithContext
	locks3ClientMockPutBucketLifecycleWithContext.RUnlock()
	return calls
}

// PutBucketLogging calls PutBucketLoggingFunc.
func (mock *s3ClientMock) PutBucketLogging(in1 *s3.PutBucketLoggingInput) (*s3.PutBucketLoggingOutput, error) {
	if mock.PutBucketLoggingFunc == nil {
		panic("s3ClientMock.PutBucketLoggingFunc: method is nil but s3Client.PutBucketLogging was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketLoggingInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketLogging.Lock()
	mock.calls.PutBucketLogging = append(mock.calls.PutBucketLogging, callInfo)
	locks3ClientMockPutBucketLogging.Unlock()
	return mock.PutBucketLoggingFunc(in1)
}

// PutBucketLoggingCalls gets all the calls that were made to PutBucketLogging.
// Check the length with:
//     len(mockeds3Client.PutBucketLoggingCalls())
func (mock *s3ClientMock) PutBucketLoggingCalls() []struct {
	In1 *s3.PutBucketLoggingInput
} {
	var calls []struct {
		In1 *s3.PutBucketLoggingInput
	}
	locks3ClientMockPutBucketLogging.RLock()
	calls = mock.calls.PutBucketLogging
	locks3ClientMockPutBucketLogging.RUnlock()
	return calls
}

// PutBucketLoggingRequest calls PutBucketLoggingRequestFunc.
func (mock *s3ClientMock) PutBucketLoggingRequest(in1 *s3.PutBucketLoggingInput) (*request.Request, *s3.PutBucketLoggingOutput) {
	if mock.PutBucketLoggingRequestFunc == nil {
		panic("s3ClientMock.PutBucketLoggingRequestFunc: method is nil but s3Client.PutBucketLoggingRequest was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketLoggingInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketLoggingRequest.Lock()
	mock.calls.PutBucketLoggingRequest = append(mock.calls.PutBucketLoggingRequest, callInfo)
	locks3ClientMockPutBucketLoggingRequest.Unlock()
	return mock.PutBucketLoggingRequestFunc(in1)
}

// PutBucketLoggingRequestCalls gets all the calls that were made to PutBucketLoggingRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketLoggingRequestCalls())
func (mock *s3ClientMock) PutBucketLoggingRequestCalls() []struct {
	In1 *s3.PutBucketLoggingInput
} {
	var calls []struct {
		In1 *s3.PutBucketLoggingInput
	}
	locks3ClientMockPutBucketLoggingRequest.RLock()
	calls = mock.calls.PutBucketLoggingRequest
	locks3ClientMockPutBucketLoggingRequest.RUnlock()
	return calls
}

// PutBucketLoggingWithContext calls PutBucketLoggingWithContextFunc.
func (mock *s3ClientMock) PutBucketLoggingWithContext(in1 context.Context, in2 *s3.PutBucketLoggingInput, in3 ...request.Option) (*s3.PutBucketLoggingOutput, error) {
	if mock.PutBucketLoggingWithContextFunc == nil {
		panic("s3ClientMock.PutBucketLoggingWithContextFunc: method is nil but s3Client.PutBucketLoggingWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.PutBucketLoggingInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockPutBucketLoggingWithContext.Lock()
	mock.calls.PutBucketLoggingWithContext = append(mock.calls.PutBucketLoggingWithContext, callInfo)
	locks3ClientMockPutBucketLoggingWithContext.Unlock()
	return mock.PutBucketLoggingWithContextFunc(in1, in2, in3...)
}

// PutBucketLoggingWithContextCalls gets all the calls that were made to PutBucketLoggingWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketLoggingWithContextCalls())
func (mock *s3ClientMock) PutBucketLoggingWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.PutBucketLoggingInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.PutBucketLoggingInput
		In3 []request.Option
	}
	locks3ClientMockPutBucketLoggingWithContext.RLock()
	calls = mock.calls.PutBucketLoggingWithContext
	locks3ClientMockPutBucketLoggingWithContext.RUnlock()
	return calls
}

// PutBucketMetricsConfiguration calls PutBucketMetricsConfigurationFunc.
func (mock *s3ClientMock) PutBucketMetricsConfiguration(in1 *s3.PutBucketMetricsConfigurationInput) (*s3.PutBucketMetricsConfigurationOutput, error) {
	if mock.PutBucketMetricsConfigurationFunc == nil {
		panic("s3ClientMock.PutBucketMetricsConfigurationFunc: method is nil but s3Client.PutBucketMetricsConfiguration was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketMetricsConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketMetricsConfiguration.Lock()
	mock.calls.PutBucketMetricsConfiguration = append(mock.calls.PutBucketMetricsConfiguration, callInfo)
	locks3ClientMockPutBucketMetricsConfiguration.Unlock()
	return mock.PutBucketMetricsConfigurationFunc(in1)
}

// PutBucketMetricsConfigurationCalls gets all the calls that were made to PutBucketMetricsConfiguration.
// Check the length with:
//     len(mockeds3Client.PutBucketMetricsConfigurationCalls())
func (mock *s3ClientMock) PutBucketMetricsConfigurationCalls() []struct {
	In1 *s3.PutBucketMetricsConfigurationInput
} {
	var calls []struct {
		In1 *s3.PutBucketMetricsConfigurationInput
	}
	locks3ClientMockPutBucketMetricsConfiguration.RLock()
	calls = mock.calls.PutBucketMetricsConfiguration
	locks3ClientMockPutBucketMetricsConfiguration.RUnlock()
	return calls
}

// PutBucketMetricsConfigurationRequest calls PutBucketMetricsConfigurationRequestFunc.
func (mock *s3ClientMock) PutBucketMetricsConfigurationRequest(in1 *s3.PutBucketMetricsConfigurationInput) (*request.Request, *s3.PutBucketMetricsConfigurationOutput) {
	if mock.PutBucketMetricsConfigurationRequestFunc == nil {
		panic("s3ClientMock.PutBucketMetricsConfigurationRequestFunc: method is nil but s3Client.PutBucketMetricsConfigurationRequest was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketMetricsConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketMetricsConfigurationRequest.Lock()
	mock.calls.PutBucketMetricsConfigurationRequest = append(mock.calls.PutBucketMetricsConfigurationRequest, callInfo)
	locks3ClientMockPutBucketMetricsConfigurationRequest.Unlock()
	return mock.PutBucketMetricsConfigurationRequestFunc(in1)
}

// PutBucketMetricsConfigurationRequestCalls gets all the calls that were made to PutBucketMetricsConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketMetricsConfigurationRequestCalls())
func (mock *s3ClientMock) PutBucketMetricsConfigurationRequestCalls() []struct {
	In1 *s3.PutBucketMetricsConfigurationInput
} {
	var calls []struct {
		In1 *s3.PutBucketMetricsConfigurationInput
	}
	locks3ClientMockPutBucketMetricsConfigurationRequest.RLock()
	calls = mock.calls.PutBucketMetricsConfigurationRequest
	locks3ClientMockPutBucketMetricsConfigurationRequest.RUnlock()
	return calls
}

// PutBucketMetricsConfigurationWithContext calls PutBucketMetricsConfigurationWithContextFunc.
func (mock *s3ClientMock) PutBucketMetricsConfigurationWithContext(in1 context.Context, in2 *s3.PutBucketMetricsConfigurationInput, in3 ...request.Option) (*s3.PutBucketMetricsConfigurationOutput, error) {
	if mock.PutBucketMetricsConfigurationWithContextFunc == nil {
		panic("s3ClientMock.PutBucketMetricsConfigurationWithContextFunc: method is nil but s3Client.PutBucketMetricsConfigurationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.PutBucketMetricsConfigurationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockPutBucketMetricsConfigurationWithContext.Lock()
	mock.calls.PutBucketMetricsConfigurationWithContext = append(mock.calls.PutBucketMetricsConfigurationWithContext, callInfo)
	locks3ClientMockPutBucketMetricsConfigurationWithContext.Unlock()
	return mock.PutBucketMetricsConfigurationWithContextFunc(in1, in2, in3...)
}

// PutBucketMetricsConfigurationWithContextCalls gets all the calls that were made to PutBucketMetricsConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketMetricsConfigurationWithContextCalls())
func (mock *s3ClientMock) PutBucketMetricsConfigurationWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.PutBucketMetricsConfigurationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.PutBucketMetricsConfigurationInput
		In3 []request.Option
	}
	locks3ClientMockPutBucketMetricsConfigurationWithContext.RLock()
	calls = mock.calls.PutBucketMetricsConfigurationWithContext
	locks3ClientMockPutBucketMetricsConfigurationWithContext.RUnlock()
	return calls
}

// PutBucketNotification calls PutBucketNotificationFunc.
func (mock *s3ClientMock) PutBucketNotification(in1 *s3.PutBucketNotificationInput) (*s3.PutBucketNotificationOutput, error) {
	if mock.PutBucketNotificationFunc == nil {
		panic("s3ClientMock.PutBucketNotificationFunc: method is nil but s3Client.PutBucketNotification was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketNotificationInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketNotification.Lock()
	mock.calls.PutBucketNotification = append(mock.calls.PutBucketNotification, callInfo)
	locks3ClientMockPutBucketNotification.Unlock()
	return mock.PutBucketNotificationFunc(in1)
}

// PutBucketNotificationCalls gets all the calls that were made to PutBucketNotification.
// Check the length with:
//     len(mockeds3Client.PutBucketNotificationCalls())
func (mock *s3ClientMock) PutBucketNotificationCalls() []struct {
	In1 *s3.PutBucketNotificationInput
} {
	var calls []struct {
		In1 *s3.PutBucketNotificationInput
	}
	locks3ClientMockPutBucketNotification.RLock()
	calls = mock.calls.PutBucketNotification
	locks3ClientMockPutBucketNotification.RUnlock()
	return calls
}

// PutBucketNotificationConfiguration calls PutBucketNotificationConfigurationFunc.
func (mock *s3ClientMock) PutBucketNotificationConfiguration(in1 *s3.PutBucketNotificationConfigurationInput) (*s3.PutBucketNotificationConfigurationOutput, error) {
	if mock.PutBucketNotificationConfigurationFunc == nil {
		panic("s3ClientMock.PutBucketNotificationConfigurationFunc: method is nil but s3Client.PutBucketNotificationConfiguration was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketNotificationConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketNotificationConfiguration.Lock()
	mock.calls.PutBucketNotificationConfiguration = append(mock.calls.PutBucketNotificationConfiguration, callInfo)
	locks3ClientMockPutBucketNotificationConfiguration.Unlock()
	return mock.PutBucketNotificationConfigurationFunc(in1)
}

// PutBucketNotificationConfigurationCalls gets all the calls that were made to PutBucketNotificationConfiguration.
// Check the length with:
//     len(mockeds3Client.PutBucketNotificationConfigurationCalls())
func (mock *s3ClientMock) PutBucketNotificationConfigurationCalls() []struct {
	In1 *s3.PutBucketNotificationConfigurationInput
} {
	var calls []struct {
		In1 *s3.PutBucketNotificationConfigurationInput
	}
	locks3ClientMockPutBucketNotificationConfiguration.RLock()
	calls = mock.calls.PutBucketNotificationConfiguration
	locks3ClientMockPutBucketNotificationConfiguration.RUnlock()
	return calls
}

// PutBucketNotificationConfigurationRequest calls PutBucketNotificationConfigurationRequestFunc.
func (mock *s3ClientMock) PutBucketNotificationConfigurationRequest(in1 *s3.PutBucketNotificationConfigurationInput) (*request.Request, *s3.PutBucketNotificationConfigurationOutput) {
	if mock.PutBucketNotificationConfigurationRequestFunc == nil {
		panic("s3ClientMock.PutBucketNotificationConfigurationRequestFunc: method is nil but s3Client.PutBucketNotificationConfigurationRequest was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketNotificationConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketNotificationConfigurationRequest.Lock()
	mock.calls.PutBucketNotificationConfigurationRequest = append(mock.calls.PutBucketNotificationConfigurationRequest, callInfo)
	locks3ClientMockPutBucketNotificationConfigurationRequest.Unlock()
	return mock.PutBucketNotificationConfigurationRequestFunc(in1)
}

// PutBucketNotificationConfigurationRequestCalls gets all the calls that were made to PutBucketNotificationConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketNotificationConfigurationRequestCalls())
func (mock *s3ClientMock) PutBucketNotificationConfigurationRequestCalls() []struct {
	In1 *s3.PutBucketNotificationConfigurationInput
} {
	var calls []struct {
		In1 *s3.PutBucketNotificationConfigurationInput
	}
	locks3ClientMockPutBucketNotificationConfigurationRequest.RLock()
	calls = mock.calls.PutBucketNotificationConfigurationRequest
	locks3ClientMockPutBucketNotificationConfigurationRequest.RUnlock()
	return calls
}

// PutBucketNotificationConfigurationWithContext calls PutBucketNotificationConfigurationWithContextFunc.
func (mock *s3ClientMock) PutBucketNotificationConfigurationWithContext(in1 context.Context, in2 *s3.PutBucketNotificationConfigurationInput, in3 ...request.Option) (*s3.PutBucketNotificationConfigurationOutput, error) {
	if mock.PutBucketNotificationConfigurationWithContextFunc == nil {
		panic("s3ClientMock.PutBucketNotificationConfigurationWithContextFunc: method is nil but s3Client.PutBucketNotificationConfigurationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.PutBucketNotificationConfigurationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockPutBucketNotificationConfigurationWithContext.Lock()
	mock.calls.PutBucketNotificationConfigurationWithContext = append(mock.calls.PutBucketNotificationConfigurationWithContext, callInfo)
	locks3ClientMockPutBucketNotificationConfigurationWithContext.Unlock()
	return mock.PutBucketNotificationConfigurationWithContextFunc(in1, in2, in3...)
}

// PutBucketNotificationConfigurationWithContextCalls gets all the calls that were made to PutBucketNotificationConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketNotificationConfigurationWithContextCalls())
func (mock *s3ClientMock) PutBucketNotificationConfigurationWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.PutBucketNotificationConfigurationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.PutBucketNotificationConfigurationInput
		In3 []request.Option
	}
	locks3ClientMockPutBucketNotificationConfigurationWithContext.RLock()
	calls = mock.calls.PutBucketNotificationConfigurationWithContext
	locks3ClientMockPutBucketNotificationConfigurationWithContext.RUnlock()
	return calls
}

// PutBucketNotificationRequest calls PutBucketNotificationRequestFunc.
func (mock *s3ClientMock) PutBucketNotificationRequest(in1 *s3.PutBucketNotificationInput) (*request.Request, *s3.PutBucketNotificationOutput) {
	if mock.PutBucketNotificationRequestFunc == nil {
		panic("s3ClientMock.PutBucketNotificationRequestFunc: method is nil but s3Client.PutBucketNotificationRequest was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketNotificationInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketNotificationRequest.Lock()
	mock.calls.PutBucketNotificationRequest = append(mock.calls.PutBucketNotificationRequest, callInfo)
	locks3ClientMockPutBucketNotificationRequest.Unlock()
	return mock.PutBucketNotificationRequestFunc(in1)
}

// PutBucketNotificationRequestCalls gets all the calls that were made to PutBucketNotificationRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketNotificationRequestCalls())
func (mock *s3ClientMock) PutBucketNotificationRequestCalls() []struct {
	In1 *s3.PutBucketNotificationInput
} {
	var calls []struct {
		In1 *s3.PutBucketNotificationInput
	}
	locks3ClientMockPutBucketNotificationRequest.RLock()
	calls = mock.calls.PutBucketNotificationRequest
	locks3ClientMockPutBucketNotificationRequest.RUnlock()
	return calls
}

// PutBucketNotificationWithContext calls PutBucketNotificationWithContextFunc.
func (mock *s3ClientMock) PutBucketNotificationWithContext(in1 context.Context, in2 *s3.PutBucketNotificationInput, in3 ...request.Option) (*s3.PutBucketNotificationOutput, error) {
	if mock.PutBucketNotificationWithContextFunc == nil {
		panic("s3ClientMock.PutBucketNotificationWithContextFunc: method is nil but s3Client.PutBucketNotificationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.PutBucketNotificationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockPutBucketNotificationWithContext.Lock()
	mock.calls.PutBucketNotificationWithContext = append(mock.calls.PutBucketNotificationWithContext, callInfo)
	locks3ClientMockPutBucketNotificationWithContext.Unlock()
	return mock.PutBucketNotificationWithContextFunc(in1, in2, in3...)
}

// PutBucketNotificationWithContextCalls gets all the calls that were made to PutBucketNotificationWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketNotificationWithContextCalls())
func (mock *s3ClientMock) PutBucketNotificationWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.PutBucketNotificationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.PutBucketNotificationInput
		In3 []request.Option
	}
	locks3ClientMockPutBucketNotificationWithContext.RLock()
	calls = mock.calls.PutBucketNotificationWithContext
	locks3ClientMockPutBucketNotificationWithContext.RUnlock()
	return calls
}

// PutBucketPolicy calls PutBucketPolicyFunc.
func (mock *s3ClientMock) PutBucketPolicy(in1 *s3.PutBucketPolicyInput) (*s3.PutBucketPolicyOutput, error) {
	if mock.PutBucketPolicyFunc == nil {
		panic("s3ClientMock.PutBucketPolicyFunc: method is nil but s3Client.PutBucketPolicy was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketPolicyInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketPolicy.Lock()
	mock.calls.PutBucketPolicy = append(mock.calls.PutBucketPolicy, callInfo)
	locks3ClientMockPutBucketPolicy.Unlock()
	return mock.PutBucketPolicyFunc(in1)
}

// PutBucketPolicyCalls gets all the calls that were made to PutBucketPolicy.
// Check the length with:
//     len(mockeds3Client.PutBucketPolicyCalls())
func (mock *s3ClientMock) PutBucketPolicyCalls() []struct {
	In1 *s3.PutBucketPolicyInput
} {
	var calls []struct {
		In1 *s3.PutBucketPolicyInput
	}
	locks3ClientMockPutBucketPolicy.RLock()
	calls = mock.calls.PutBucketPolicy
	locks3ClientMockPutBucketPolicy.RUnlock()
	return calls
}

// PutBucketPolicyRequest calls PutBucketPolicyRequestFunc.
func (mock *s3ClientMock) PutBucketPolicyRequest(in1 *s3.PutBucketPolicyInput) (*request.Request, *s3.PutBucketPolicyOutput) {
	if mock.PutBucketPolicyRequestFunc == nil {
		panic("s3ClientMock.PutBucketPolicyRequestFunc: method is nil but s3Client.PutBucketPolicyRequest was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketPolicyInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketPolicyRequest.Lock()
	mock.calls.PutBucketPolicyRequest = append(mock.calls.PutBucketPolicyRequest, callInfo)
	locks3ClientMockPutBucketPolicyRequest.Unlock()
	return mock.PutBucketPolicyRequestFunc(in1)
}

// PutBucketPolicyRequestCalls gets all the calls that were made to PutBucketPolicyRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketPolicyRequestCalls())
func (mock *s3ClientMock) PutBucketPolicyRequestCalls() []struct {
	In1 *s3.PutBucketPolicyInput
} {
	var calls []struct {
		In1 *s3.PutBucketPolicyInput
	}
	locks3ClientMockPutBucketPolicyRequest.RLock()
	calls = mock.calls.PutBucketPolicyRequest
	locks3ClientMockPutBucketPolicyRequest.RUnlock()
	return calls
}

// PutBucketPolicyWithContext calls PutBucketPolicyWithContextFunc.
func (mock *s3ClientMock) PutBucketPolicyWithContext(in1 context.Context, in2 *s3.PutBucketPolicyInput, in3 ...request.Option) (*s3.PutBucketPolicyOutput, error) {
	if mock.PutBucketPolicyWithContextFunc == nil {
		panic("s3ClientMock.PutBucketPolicyWithContextFunc: method is nil but s3Client.PutBucketPolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.PutBucketPolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockPutBucketPolicyWithContext.Lock()
	mock.calls.PutBucketPolicyWithContext = append(mock.calls.PutBucketPolicyWithContext, callInfo)
	locks3ClientMockPutBucketPolicyWithContext.Unlock()
	return mock.PutBucketPolicyWithContextFunc(in1, in2, in3...)
}

// PutBucketPolicyWithContextCalls gets all the calls that were made to PutBucketPolicyWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketPolicyWithContextCalls())
func (mock *s3ClientMock) PutBucketPolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.PutBucketPolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.PutBucketPolicyInput
		In3 []request.Option
	}
	locks3ClientMockPutBucketPolicyWithContext.RLock()
	calls = mock.calls.PutBucketPolicyWithContext
	locks3ClientMockPutBucketPolicyWithContext.RUnlock()
	return calls
}

// PutBucketReplication calls PutBucketReplicationFunc.
func (mock *s3ClientMock) PutBucketReplication(in1 *s3.PutBucketReplicationInput) (*s3.PutBucketReplicationOutput, error) {
	if mock.PutBucketReplicationFunc == nil {
		panic("s3ClientMock.PutBucketReplicationFunc: method is nil but s3Client.PutBucketReplication was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketReplicationInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketReplication.Lock()
	mock.calls.PutBucketReplication = append(mock.calls.PutBucketReplication, callInfo)
	locks3ClientMockPutBucketReplication.Unlock()
	return mock.PutBucketReplicationFunc(in1)
}

// PutBucketReplicationCalls gets all the calls that were made to PutBucketReplication.
// Check the length with:
//     len(mockeds3Client.PutBucketReplicationCalls())
func (mock *s3ClientMock) PutBucketReplicationCalls() []struct {
	In1 *s3.PutBucketReplicationInput
} {
	var calls []struct {
		In1 *s3.PutBucketReplicationInput
	}
	locks3ClientMockPutBucketReplication.RLock()
	calls = mock.calls.PutBucketReplication
	locks3ClientMockPutBucketReplication.RUnlock()
	return calls
}

// PutBucketReplicationRequest calls PutBucketReplicationRequestFunc.
func (mock *s3ClientMock) PutBucketReplicationRequest(in1 *s3.PutBucketReplicationInput) (*request.Request, *s3.PutBucketReplicationOutput) {
	if mock.PutBucketReplicationRequestFunc == nil {
		panic("s3ClientMock.PutBucketReplicationRequestFunc: method is nil but s3Client.PutBucketReplicationRequest was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketReplicationInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketReplicationRequest.Lock()
	mock.calls.PutBucketReplicationRequest = append(mock.calls.PutBucketReplicationRequest, callInfo)
	locks3ClientMockPutBucketReplicationRequest.Unlock()
	return mock.PutBucketReplicationRequestFunc(in1)
}

// PutBucketReplicationRequestCalls gets all the calls that were made to PutBucketReplicationRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketReplicationRequestCalls())
func (mock *s3ClientMock) PutBucketReplicationRequestCalls() []struct {
	In1 *s3.PutBucketReplicationInput
} {
	var calls []struct {
		In1 *s3.PutBucketReplicationInput
	}
	locks3ClientMockPutBucketReplicationRequest.RLock()
	calls = mock.calls.PutBucketReplicationRequest
	locks3ClientMockPutBucketReplicationRequest.RUnlock()
	return calls
}

// PutBucketReplicationWithContext calls PutBucketReplicationWithContextFunc.
func (mock *s3ClientMock) PutBucketReplicationWithContext(in1 context.Context, in2 *s3.PutBucketReplicationInput, in3 ...request.Option) (*s3.PutBucketReplicationOutput, error) {
	if mock.PutBucketReplicationWithContextFunc == nil {
		panic("s3ClientMock.PutBucketReplicationWithContextFunc: method is nil but s3Client.PutBucketReplicationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.PutBucketReplicationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockPutBucketReplicationWithContext.Lock()
	mock.calls.PutBucketReplicationWithContext = append(mock.calls.PutBucketReplicationWithContext, callInfo)
	locks3ClientMockPutBucketReplicationWithContext.Unlock()
	return mock.PutBucketReplicationWithContextFunc(in1, in2, in3...)
}

// PutBucketReplicationWithContextCalls gets all the calls that were made to PutBucketReplicationWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketReplicationWithContextCalls())
func (mock *s3ClientMock) PutBucketReplicationWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.PutBucketReplicationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.PutBucketReplicationInput
		In3 []request.Option
	}
	locks3ClientMockPutBucketReplicationWithContext.RLock()
	calls = mock.calls.PutBucketReplicationWithContext
	locks3ClientMockPutBucketReplicationWithContext.RUnlock()
	return calls
}

// PutBucketRequestPayment calls PutBucketRequestPaymentFunc.
func (mock *s3ClientMock) PutBucketRequestPayment(in1 *s3.PutBucketRequestPaymentInput) (*s3.PutBucketRequestPaymentOutput, error) {
	if mock.PutBucketRequestPaymentFunc == nil {
		panic("s3ClientMock.PutBucketRequestPaymentFunc: method is nil but s3Client.PutBucketRequestPayment was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketRequestPaymentInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketRequestPayment.Lock()
	mock.calls.PutBucketRequestPayment = append(mock.calls.PutBucketRequestPayment, callInfo)
	locks3ClientMockPutBucketRequestPayment.Unlock()
	return mock.PutBucketRequestPaymentFunc(in1)
}

// PutBucketRequestPaymentCalls gets all the calls that were made to PutBucketRequestPayment.
// Check the length with:
//     len(mockeds3Client.PutBucketRequestPaymentCalls())
func (mock *s3ClientMock) PutBucketRequestPaymentCalls() []struct {
	In1 *s3.PutBucketRequestPaymentInput
} {
	var calls []struct {
		In1 *s3.PutBucketRequestPaymentInput
	}
	locks3ClientMockPutBucketRequestPayment.RLock()
	calls = mock.calls.PutBucketRequestPayment
	locks3ClientMockPutBucketRequestPayment.RUnlock()
	return calls
}

// PutBucketRequestPaymentRequest calls PutBucketRequestPaymentRequestFunc.
func (mock *s3ClientMock) PutBucketRequestPaymentRequest(in1 *s3.PutBucketRequestPaymentInput) (*request.Request, *s3.PutBucketRequestPaymentOutput) {
	if mock.PutBucketRequestPaymentRequestFunc == nil {
		panic("s3ClientMock.PutBucketRequestPaymentRequestFunc: method is nil but s3Client.PutBucketRequestPaymentRequest was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketRequestPaymentInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketRequestPaymentRequest.Lock()
	mock.calls.PutBucketRequestPaymentRequest = append(mock.calls.PutBucketRequestPaymentRequest, callInfo)
	locks3ClientMockPutBucketRequestPaymentRequest.Unlock()
	return mock.PutBucketRequestPaymentRequestFunc(in1)
}

// PutBucketRequestPaymentRequestCalls gets all the calls that were made to PutBucketRequestPaymentRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketRequestPaymentRequestCalls())
func (mock *s3ClientMock) PutBucketRequestPaymentRequestCalls() []struct {
	In1 *s3.PutBucketRequestPaymentInput
} {
	var calls []struct {
		In1 *s3.PutBucketRequestPaymentInput
	}
	locks3ClientMockPutBucketRequestPaymentRequest.RLock()
	calls = mock.calls.PutBucketRequestPaymentRequest
	locks3ClientMockPutBucketRequestPaymentRequest.RUnlock()
	return calls
}

// PutBucketRequestPaymentWithContext calls PutBucketRequestPaymentWithContextFunc.
func (mock *s3ClientMock) PutBucketRequestPaymentWithContext(in1 context.Context, in2 *s3.PutBucketRequestPaymentInput, in3 ...request.Option) (*s3.PutBucketRequestPaymentOutput, error) {
	if mock.PutBucketRequestPaymentWithContextFunc == nil {
		panic("s3ClientMock.PutBucketRequestPaymentWithContextFunc: method is nil but s3Client.PutBucketRequestPaymentWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.PutBucketRequestPaymentInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockPutBucketRequestPaymentWithContext.Lock()
	mock.calls.PutBucketRequestPaymentWithContext = append(mock.calls.PutBucketRequestPaymentWithContext, callInfo)
	locks3ClientMockPutBucketRequestPaymentWithContext.Unlock()
	return mock.PutBucketRequestPaymentWithContextFunc(in1, in2, in3...)
}

// PutBucketRequestPaymentWithContextCalls gets all the calls that were made to PutBucketRequestPaymentWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketRequestPaymentWithContextCalls())
func (mock *s3ClientMock) PutBucketRequestPaymentWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.PutBucketRequestPaymentInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.PutBucketRequestPaymentInput
		In3 []request.Option
	}
	locks3ClientMockPutBucketRequestPaymentWithContext.RLock()
	calls = mock.calls.PutBucketRequestPaymentWithContext
	locks3ClientMockPutBucketRequestPaymentWithContext.RUnlock()
	return calls
}

// PutBucketTagging calls PutBucketTaggingFunc.
func (mock *s3ClientMock) PutBucketTagging(in1 *s3.PutBucketTaggingInput) (*s3.PutBucketTaggingOutput, error) {
	if mock.PutBucketTaggingFunc == nil {
		panic("s3ClientMock.PutBucketTaggingFunc: method is nil but s3Client.PutBucketTagging was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketTaggingInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketTagging.Lock()
	mock.calls.PutBucketTagging = append(mock.calls.PutBucketTagging, callInfo)
	locks3ClientMockPutBucketTagging.Unlock()
	return mock.PutBucketTaggingFunc(in1)
}

// PutBucketTaggingCalls gets all the calls that were made to PutBucketTagging.
// Check the length with:
//     len(mockeds3Client.PutBucketTaggingCalls())
func (mock *s3ClientMock) PutBucketTaggingCalls() []struct {
	In1 *s3.PutBucketTaggingInput
} {
	var calls []struct {
		In1 *s3.PutBucketTaggingInput
	}
	locks3ClientMockPutBucketTagging.RLock()
	calls = mock.calls.PutBucketTagging
	locks3ClientMockPutBucketTagging.RUnlock()
	return calls
}

// PutBucketTaggingRequest calls PutBucketTaggingRequestFunc.
func (mock *s3ClientMock) PutBucketTaggingRequest(in1 *s3.PutBucketTaggingInput) (*request.Request, *s3.PutBucketTaggingOutput) {
	if mock.PutBucketTaggingRequestFunc == nil {
		panic("s3ClientMock.PutBucketTaggingRequestFunc: method is nil but s3Client.PutBucketTaggingRequest was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketTaggingInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketTaggingRequest.Lock()
	mock.calls.PutBucketTaggingRequest = append(mock.calls.PutBucketTaggingRequest, callInfo)
	locks3ClientMockPutBucketTaggingRequest.Unlock()
	return mock.PutBucketTaggingRequestFunc(in1)
}

// PutBucketTaggingRequestCalls gets all the calls that were made to PutBucketTaggingRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketTaggingRequestCalls())
func (mock *s3ClientMock) PutBucketTaggingRequestCalls() []struct {
	In1 *s3.PutBucketTaggingInput
} {
	var calls []struct {
		In1 *s3.PutBucketTaggingInput
	}
	locks3ClientMockPutBucketTaggingRequest.RLock()
	calls = mock.calls.PutBucketTaggingRequest
	locks3ClientMockPutBucketTaggingRequest.RUnlock()
	return calls
}

// PutBucketTaggingWithContext calls PutBucketTaggingWithContextFunc.
func (mock *s3ClientMock) PutBucketTaggingWithContext(in1 context.Context, in2 *s3.PutBucketTaggingInput, in3 ...request.Option) (*s3.PutBucketTaggingOutput, error) {
	if mock.PutBucketTaggingWithContextFunc == nil {
		panic("s3ClientMock.PutBucketTaggingWithContextFunc: method is nil but s3Client.PutBucketTaggingWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.PutBucketTaggingInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockPutBucketTaggingWithContext.Lock()
	mock.calls.PutBucketTaggingWithContext = append(mock.calls.PutBucketTaggingWithContext, callInfo)
	locks3ClientMockPutBucketTaggingWithContext.Unlock()
	return mock.PutBucketTaggingWithContextFunc(in1, in2, in3...)
}

// PutBucketTaggingWithContextCalls gets all the calls that were made to PutBucketTaggingWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketTaggingWithContextCalls())
func (mock *s3ClientMock) PutBucketTaggingWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.PutBucketTaggingInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.PutBucketTaggingInput
		In3 []request.Option
	}
	locks3ClientMockPutBucketTaggingWithContext.RLock()
	calls = mock.calls.PutBucketTaggingWithContext
	locks3ClientMockPutBucketTaggingWithContext.RUnlock()
	return calls
}

// PutBucketVersioning calls PutBucketVersioningFunc.
func (mock *s3ClientMock) PutBucketVersioning(in1 *s3.PutBucketVersioningInput) (*s3.PutBucketVersioningOutput, error) {
	if mock.PutBucketVersioningFunc == nil {
		panic("s3ClientMock.PutBucketVersioningFunc: method is nil but s3Client.PutBucketVersioning was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketVersioningInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketVersioning.Lock()
	mock.calls.PutBucketVersioning = append(mock.calls.PutBucketVersioning, callInfo)
	locks3ClientMockPutBucketVersioning.Unlock()
	return mock.PutBucketVersioningFunc(in1)
}

// PutBucketVersioningCalls gets all the calls that were made to PutBucketVersioning.
// Check the length with:
//     len(mockeds3Client.PutBucketVersioningCalls())
func (mock *s3ClientMock) PutBucketVersioningCalls() []struct {
	In1 *s3.PutBucketVersioningInput
} {
	var calls []struct {
		In1 *s3.PutBucketVersioningInput
	}
	locks3ClientMockPutBucketVersioning.RLock()
	calls = mock.calls.PutBucketVersioning
	locks3ClientMockPutBucketVersioning.RUnlock()
	return calls
}

// PutBucketVersioningRequest calls PutBucketVersioningRequestFunc.
func (mock *s3ClientMock) PutBucketVersioningRequest(in1 *s3.PutBucketVersioningInput) (*request.Request, *s3.PutBucketVersioningOutput) {
	if mock.PutBucketVersioningRequestFunc == nil {
		panic("s3ClientMock.PutBucketVersioningRequestFunc: method is nil but s3Client.PutBucketVersioningRequest was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketVersioningInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketVersioningRequest.Lock()
	mock.calls.PutBucketVersioningRequest = append(mock.calls.PutBucketVersioningRequest, callInfo)
	locks3ClientMockPutBucketVersioningRequest.Unlock()
	return mock.PutBucketVersioningRequestFunc(in1)
}

// PutBucketVersioningRequestCalls gets all the calls that were made to PutBucketVersioningRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketVersioningRequestCalls())
func (mock *s3ClientMock) PutBucketVersioningRequestCalls() []struct {
	In1 *s3.PutBucketVersioningInput
} {
	var calls []struct {
		In1 *s3.PutBucketVersioningInput
	}
	locks3ClientMockPutBucketVersioningRequest.RLock()
	calls = mock.calls.PutBucketVersioningRequest
	locks3ClientMockPutBucketVersioningRequest.RUnlock()
	return calls
}

// PutBucketVersioningWithContext calls PutBucketVersioningWithContextFunc.
func (mock *s3ClientMock) PutBucketVersioningWithContext(in1 context.Context, in2 *s3.PutBucketVersioningInput, in3 ...request.Option) (*s3.PutBucketVersioningOutput, error) {
	if mock.PutBucketVersioningWithContextFunc == nil {
		panic("s3ClientMock.PutBucketVersioningWithContextFunc: method is nil but s3Client.PutBucketVersioningWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.PutBucketVersioningInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockPutBucketVersioningWithContext.Lock()
	mock.calls.PutBucketVersioningWithContext = append(mock.calls.PutBucketVersioningWithContext, callInfo)
	locks3ClientMockPutBucketVersioningWithContext.Unlock()
	return mock.PutBucketVersioningWithContextFunc(in1, in2, in3...)
}

// PutBucketVersioningWithContextCalls gets all the calls that were made to PutBucketVersioningWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketVersioningWithContextCalls())
func (mock *s3ClientMock) PutBucketVersioningWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.PutBucketVersioningInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.PutBucketVersioningInput
		In3 []request.Option
	}
	locks3ClientMockPutBucketVersioningWithContext.RLock()
	calls = mock.calls.PutBucketVersioningWithContext
	locks3ClientMockPutBucketVersioningWithContext.RUnlock()
	return calls
}

// PutBucketWebsite calls PutBucketWebsiteFunc.
func (mock *s3ClientMock) PutBucketWebsite(in1 *s3.PutBucketWebsiteInput) (*s3.PutBucketWebsiteOutput, error) {
	if mock.PutBucketWebsiteFunc == nil {
		panic("s3ClientMock.PutBucketWebsiteFunc: method is nil but s3Client.PutBucketWebsite was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketWebsiteInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketWebsite.Lock()
	mock.calls.PutBucketWebsite = append(mock.calls.PutBucketWebsite, callInfo)
	locks3ClientMockPutBucketWebsite.Unlock()
	return mock.PutBucketWebsiteFunc(in1)
}

// PutBucketWebsiteCalls gets all the calls that were made to PutBucketWebsite.
// Check the length with:
//     len(mockeds3Client.PutBucketWebsiteCalls())
func (mock *s3ClientMock) PutBucketWebsiteCalls() []struct {
	In1 *s3.PutBucketWebsiteInput
} {
	var calls []struct {
		In1 *s3.PutBucketWebsiteInput
	}
	locks3ClientMockPutBucketWebsite.RLock()
	calls = mock.calls.PutBucketWebsite
	locks3ClientMockPutBucketWebsite.RUnlock()
	return calls
}

// PutBucketWebsiteRequest calls PutBucketWebsiteRequestFunc.
func (mock *s3ClientMock) PutBucketWebsiteRequest(in1 *s3.PutBucketWebsiteInput) (*request.Request, *s3.PutBucketWebsiteOutput) {
	if mock.PutBucketWebsiteRequestFunc == nil {
		panic("s3ClientMock.PutBucketWebsiteRequestFunc: method is nil but s3Client.PutBucketWebsiteRequest was just called")
	}
	callInfo := struct {
		In1 *s3.PutBucketWebsiteInput
	}{
		In1: in1,
	}
	locks3ClientMockPutBucketWebsiteRequest.Lock()
	mock.calls.PutBucketWebsiteRequest = append(mock.calls.PutBucketWebsiteRequest, callInfo)
	locks3ClientMockPutBucketWebsiteRequest.Unlock()
	return mock.PutBucketWebsiteRequestFunc(in1)
}

// PutBucketWebsiteRequestCalls gets all the calls that were made to PutBucketWebsiteRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketWebsiteRequestCalls())
func (mock *s3ClientMock) PutBucketWebsiteRequestCalls() []struct {
	In1 *s3.PutBucketWebsiteInput
} {
	var calls []struct {
		In1 *s3.PutBucketWebsiteInput
	}
	locks3ClientMockPutBucketWebsiteRequest.RLock()
	calls = mock.calls.PutBucketWebsiteRequest
	locks3ClientMockPutBucketWebsiteRequest.RUnlock()
	return calls
}

// PutBucketWebsiteWithContext calls PutBucketWebsiteWithContextFunc.
func (mock *s3ClientMock) PutBucketWebsiteWithContext(in1 context.Context, in2 *s3.PutBucketWebsiteInput, in3 ...request.Option) (*s3.PutBucketWebsiteOutput, error) {
	if mock.PutBucketWebsiteWithContextFunc == nil {
		panic("s3ClientMock.PutBucketWebsiteWithContextFunc: method is nil but s3Client.PutBucketWebsiteWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.PutBucketWebsiteInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockPutBucketWebsiteWithContext.Lock()
	mock.calls.PutBucketWebsiteWithContext = append(mock.calls.PutBucketWebsiteWithContext, callInfo)
	locks3ClientMockPutBucketWebsiteWithContext.Unlock()
	return mock.PutBucketWebsiteWithContextFunc(in1, in2, in3...)
}

// PutBucketWebsiteWithContextCalls gets all the calls that were made to PutBucketWebsiteWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketWebsiteWithContextCalls())
func (mock *s3ClientMock) PutBucketWebsiteWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.PutBucketWebsiteInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.PutBucketWebsiteInput
		In3 []request.Option
	}
	locks3ClientMockPutBucketWebsiteWithContext.RLock()
	calls = mock.calls.PutBucketWebsiteWithContext
	locks3ClientMockPutBucketWebsiteWithContext.RUnlock()
	return calls
}

// PutObject calls PutObjectFunc.
func (mock *s3ClientMock) PutObject(in1 *s3.PutObjectInput) (*s3.PutObjectOutput, error) {
	if mock.PutObjectFunc == nil {
		panic("s3ClientMock.PutObjectFunc: method is nil but s3Client.PutObject was just called")
	}
	callInfo := struct {
		In1 *s3.PutObjectInput
	}{
		In1: in1,
	}
	locks3ClientMockPutObject.Lock()
	mock.calls.PutObject = append(mock.calls.PutObject, callInfo)
	locks3ClientMockPutObject.Unlock()
	return mock.PutObjectFunc(in1)
}

// PutObjectCalls gets all the calls that were made to PutObject.
// Check the length with:
//     len(mockeds3Client.PutObjectCalls())
func (mock *s3ClientMock) PutObjectCalls() []struct {
	In1 *s3.PutObjectInput
} {
	var calls []struct {
		In1 *s3.PutObjectInput
	}
	locks3ClientMockPutObject.RLock()
	calls = mock.calls.PutObject
	locks3ClientMockPutObject.RUnlock()
	return calls
}

// PutObjectAcl calls PutObjectAclFunc.
func (mock *s3ClientMock) PutObjectAcl(in1 *s3.PutObjectAclInput) (*s3.PutObjectAclOutput, error) {
	if mock.PutObjectAclFunc == nil {
		panic("s3ClientMock.PutObjectAclFunc: method is nil but s3Client.PutObjectAcl was just called")
	}
	callInfo := struct {
		In1 *s3.PutObjectAclInput
	}{
		In1: in1,
	}
	locks3ClientMockPutObjectAcl.Lock()
	mock.calls.PutObjectAcl = append(mock.calls.PutObjectAcl, callInfo)
	locks3ClientMockPutObjectAcl.Unlock()
	return mock.PutObjectAclFunc(in1)
}

// PutObjectAclCalls gets all the calls that were made to PutObjectAcl.
// Check the length with:
//     len(mockeds3Client.PutObjectAclCalls())
func (mock *s3ClientMock) PutObjectAclCalls() []struct {
	In1 *s3.PutObjectAclInput
} {
	var calls []struct {
		In1 *s3.PutObjectAclInput
	}
	locks3ClientMockPutObjectAcl.RLock()
	calls = mock.calls.PutObjectAcl
	locks3ClientMockPutObjectAcl.RUnlock()
	return calls
}

// PutObjectAclRequest calls PutObjectAclRequestFunc.
func (mock *s3ClientMock) PutObjectAclRequest(in1 *s3.PutObjectAclInput) (*request.Request, *s3.PutObjectAclOutput) {
	if mock.PutObjectAclRequestFunc == nil {
		panic("s3ClientMock.PutObjectAclRequestFunc: method is nil but s3Client.PutObjectAclRequest was just called")
	}
	callInfo := struct {
		In1 *s3.PutObjectAclInput
	}{
		In1: in1,
	}
	locks3ClientMockPutObjectAclRequest.Lock()
	mock.calls.PutObjectAclRequest = append(mock.calls.PutObjectAclRequest, callInfo)
	locks3ClientMockPutObjectAclRequest.Unlock()
	return mock.PutObjectAclRequestFunc(in1)
}

// PutObjectAclRequestCalls gets all the calls that were made to PutObjectAclRequest.
// Check the length with:
//     len(mockeds3Client.PutObjectAclRequestCalls())
func (mock *s3ClientMock) PutObjectAclRequestCalls() []struct {
	In1 *s3.PutObjectAclInput
} {
	var calls []struct {
		In1 *s3.PutObjectAclInput
	}
	locks3ClientMockPutObjectAclRequest.RLock()
	calls = mock.calls.PutObjectAclRequest
	locks3ClientMockPutObjectAclRequest.RUnlock()
	return calls
}

// PutObjectAclWithContext calls PutObjectAclWithContextFunc.
func (mock *s3ClientMock) PutObjectAclWithContext(in1 context.Context, in2 *s3.PutObjectAclInput, in3 ...request.Option) (*s3.PutObjectAclOutput, error) {
	if mock.PutObjectAclWithContextFunc == nil {
		panic("s3ClientMock.PutObjectAclWithContextFunc: method is nil but s3Client.PutObjectAclWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.PutObjectAclInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockPutObjectAclWithContext.Lock()
	mock.calls.PutObjectAclWithContext = append(mock.calls.PutObjectAclWithContext, callInfo)
	locks3ClientMockPutObjectAclWithContext.Unlock()
	return mock.PutObjectAclWithContextFunc(in1, in2, in3...)
}

// PutObjectAclWithContextCalls gets all the calls that were made to PutObjectAclWithContext.
// Check the length with:
//     len(mockeds3Client.PutObjectAclWithContextCalls())
func (mock *s3ClientMock) PutObjectAclWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.PutObjectAclInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.PutObjectAclInput
		In3 []request.Option
	}
	locks3ClientMockPutObjectAclWithContext.RLock()
	calls = mock.calls.PutObjectAclWithContext
	locks3ClientMockPutObjectAclWithContext.RUnlock()
	return calls
}

// PutObjectLegalHold calls PutObjectLegalHoldFunc.
func (mock *s3ClientMock) PutObjectLegalHold(in1 *s3.PutObjectLegalHoldInput) (*s3.PutObjectLegalHoldOutput, error) {
	if mock.PutObjectLegalHoldFunc == nil {
		panic("s3ClientMock.PutObjectLegalHoldFunc: method is nil but s3Client.PutObjectLegalHold was just called")
	}
	callInfo := struct {
		In1 *s3.PutObjectLegalHoldInput
	}{
		In1: in1,
	}
	locks3ClientMockPutObjectLegalHold.Lock()
	mock.calls.PutObjectLegalHold = append(mock.calls.PutObjectLegalHold, callInfo)
	locks3ClientMockPutObjectLegalHold.Unlock()
	return mock.PutObjectLegalHoldFunc(in1)
}

// PutObjectLegalHoldCalls gets all the calls that were made to PutObjectLegalHold.
// Check the length with:
//     len(mockeds3Client.PutObjectLegalHoldCalls())
func (mock *s3ClientMock) PutObjectLegalHoldCalls() []struct {
	In1 *s3.PutObjectLegalHoldInput
} {
	var calls []struct {
		In1 *s3.PutObjectLegalHoldInput
	}
	locks3ClientMockPutObjectLegalHold.RLock()
	calls = mock.calls.PutObjectLegalHold
	locks3ClientMockPutObjectLegalHold.RUnlock()
	return calls
}

// PutObjectLegalHoldRequest calls PutObjectLegalHoldRequestFunc.
func (mock *s3ClientMock) PutObjectLegalHoldRequest(in1 *s3.PutObjectLegalHoldInput) (*request.Request, *s3.PutObjectLegalHoldOutput) {
	if mock.PutObjectLegalHoldRequestFunc == nil {
		panic("s3ClientMock.PutObjectLegalHoldRequestFunc: method is nil but s3Client.PutObjectLegalHoldRequest was just called")
	}
	callInfo := struct {
		In1 *s3.PutObjectLegalHoldInput
	}{
		In1: in1,
	}
	locks3ClientMockPutObjectLegalHoldRequest.Lock()
	mock.calls.PutObjectLegalHoldRequest = append(mock.calls.PutObjectLegalHoldRequest, callInfo)
	locks3ClientMockPutObjectLegalHoldRequest.Unlock()
	return mock.PutObjectLegalHoldRequestFunc(in1)
}

// PutObjectLegalHoldRequestCalls gets all the calls that were made to PutObjectLegalHoldRequest.
// Check the length with:
//     len(mockeds3Client.PutObjectLegalHoldRequestCalls())
func (mock *s3ClientMock) PutObjectLegalHoldRequestCalls() []struct {
	In1 *s3.PutObjectLegalHoldInput
} {
	var calls []struct {
		In1 *s3.PutObjectLegalHoldInput
	}
	locks3ClientMockPutObjectLegalHoldRequest.RLock()
	calls = mock.calls.PutObjectLegalHoldRequest
	locks3ClientMockPutObjectLegalHoldRequest.RUnlock()
	return calls
}

// PutObjectLegalHoldWithContext calls PutObjectLegalHoldWithContextFunc.
func (mock *s3ClientMock) PutObjectLegalHoldWithContext(in1 context.Context, in2 *s3.PutObjectLegalHoldInput, in3 ...request.Option) (*s3.PutObjectLegalHoldOutput, error) {
	if mock.PutObjectLegalHoldWithContextFunc == nil {
		panic("s3ClientMock.PutObjectLegalHoldWithContextFunc: method is nil but s3Client.PutObjectLegalHoldWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.PutObjectLegalHoldInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockPutObjectLegalHoldWithContext.Lock()
	mock.calls.PutObjectLegalHoldWithContext = append(mock.calls.PutObjectLegalHoldWithContext, callInfo)
	locks3ClientMockPutObjectLegalHoldWithContext.Unlock()
	return mock.PutObjectLegalHoldWithContextFunc(in1, in2, in3...)
}

// PutObjectLegalHoldWithContextCalls gets all the calls that were made to PutObjectLegalHoldWithContext.
// Check the length with:
//     len(mockeds3Client.PutObjectLegalHoldWithContextCalls())
func (mock *s3ClientMock) PutObjectLegalHoldWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.PutObjectLegalHoldInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.PutObjectLegalHoldInput
		In3 []request.Option
	}
	locks3ClientMockPutObjectLegalHoldWithContext.RLock()
	calls = mock.calls.PutObjectLegalHoldWithContext
	locks3ClientMockPutObjectLegalHoldWithContext.RUnlock()
	return calls
}

// PutObjectLockConfiguration calls PutObjectLockConfigurationFunc.
func (mock *s3ClientMock) PutObjectLockConfiguration(in1 *s3.PutObjectLockConfigurationInput) (*s3.PutObjectLockConfigurationOutput, error) {
	if mock.PutObjectLockConfigurationFunc == nil {
		panic("s3ClientMock.PutObjectLockConfigurationFunc: method is nil but s3Client.PutObjectLockConfiguration was just called")
	}
	callInfo := struct {
		In1 *s3.PutObjectLockConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockPutObjectLockConfiguration.Lock()
	mock.calls.PutObjectLockConfiguration = append(mock.calls.PutObjectLockConfiguration, callInfo)
	locks3ClientMockPutObjectLockConfiguration.Unlock()
	return mock.PutObjectLockConfigurationFunc(in1)
}

// PutObjectLockConfigurationCalls gets all the calls that were made to PutObjectLockConfiguration.
// Check the length with:
//     len(mockeds3Client.PutObjectLockConfigurationCalls())
func (mock *s3ClientMock) PutObjectLockConfigurationCalls() []struct {
	In1 *s3.PutObjectLockConfigurationInput
} {
	var calls []struct {
		In1 *s3.PutObjectLockConfigurationInput
	}
	locks3ClientMockPutObjectLockConfiguration.RLock()
	calls = mock.calls.PutObjectLockConfiguration
	locks3ClientMockPutObjectLockConfiguration.RUnlock()
	return calls
}

// PutObjectLockConfigurationRequest calls PutObjectLockConfigurationRequestFunc.
func (mock *s3ClientMock) PutObjectLockConfigurationRequest(in1 *s3.PutObjectLockConfigurationInput) (*request.Request, *s3.PutObjectLockConfigurationOutput) {
	if mock.PutObjectLockConfigurationRequestFunc == nil {
		panic("s3ClientMock.PutObjectLockConfigurationRequestFunc: method is nil but s3Client.PutObjectLockConfigurationRequest was just called")
	}
	callInfo := struct {
		In1 *s3.PutObjectLockConfigurationInput
	}{
		In1: in1,
	}
	locks3ClientMockPutObjectLockConfigurationRequest.Lock()
	mock.calls.PutObjectLockConfigurationRequest = append(mock.calls.PutObjectLockConfigurationRequest, callInfo)
	locks3ClientMockPutObjectLockConfigurationRequest.Unlock()
	return mock.PutObjectLockConfigurationRequestFunc(in1)
}

// PutObjectLockConfigurationRequestCalls gets all the calls that were made to PutObjectLockConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.PutObjectLockConfigurationRequestCalls())
func (mock *s3ClientMock) PutObjectLockConfigurationRequestCalls() []struct {
	In1 *s3.PutObjectLockConfigurationInput
} {
	var calls []struct {
		In1 *s3.PutObjectLockConfigurationInput
	}
	locks3ClientMockPutObjectLockConfigurationRequest.RLock()
	calls = mock.calls.PutObjectLockConfigurationRequest
	locks3ClientMockPutObjectLockConfigurationRequest.RUnlock()
	return calls
}

// PutObjectLockConfigurationWithContext calls PutObjectLockConfigurationWithContextFunc.
func (mock *s3ClientMock) PutObjectLockConfigurationWithContext(in1 context.Context, in2 *s3.PutObjectLockConfigurationInput, in3 ...request.Option) (*s3.PutObjectLockConfigurationOutput, error) {
	if mock.PutObjectLockConfigurationWithContextFunc == nil {
		panic("s3ClientMock.PutObjectLockConfigurationWithContextFunc: method is nil but s3Client.PutObjectLockConfigurationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.PutObjectLockConfigurationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockPutObjectLockConfigurationWithContext.Lock()
	mock.calls.PutObjectLockConfigurationWithContext = append(mock.calls.PutObjectLockConfigurationWithContext, callInfo)
	locks3ClientMockPutObjectLockConfigurationWithContext.Unlock()
	return mock.PutObjectLockConfigurationWithContextFunc(in1, in2, in3...)
}

// PutObjectLockConfigurationWithContextCalls gets all the calls that were made to PutObjectLockConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.PutObjectLockConfigurationWithContextCalls())
func (mock *s3ClientMock) PutObjectLockConfigurationWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.PutObjectLockConfigurationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.PutObjectLockConfigurationInput
		In3 []request.Option
	}
	locks3ClientMockPutObjectLockConfigurationWithContext.RLock()
	calls = mock.calls.PutObjectLockConfigurationWithContext
	locks3ClientMockPutObjectLockConfigurationWithContext.RUnlock()
	return calls
}

// PutObjectRequest calls PutObjectRequestFunc.
func (mock *s3ClientMock) PutObjectRequest(in1 *s3.PutObjectInput) (*request.Request, *s3.PutObjectOutput) {
	if mock.PutObjectRequestFunc == nil {
		panic("s3ClientMock.PutObjectRequestFunc: method is nil but s3Client.PutObjectRequest was just called")
	}
	callInfo := struct {
		In1 *s3.PutObjectInput
	}{
		In1: in1,
	}
	locks3ClientMockPutObjectRequest.Lock()
	mock.calls.PutObjectRequest = append(mock.calls.PutObjectRequest, callInfo)
	locks3ClientMockPutObjectRequest.Unlock()
	return mock.PutObjectRequestFunc(in1)
}

// PutObjectRequestCalls gets all the calls that were made to PutObjectRequest.
// Check the length with:
//     len(mockeds3Client.PutObjectRequestCalls())
func (mock *s3ClientMock) PutObjectRequestCalls() []struct {
	In1 *s3.PutObjectInput
} {
	var calls []struct {
		In1 *s3.PutObjectInput
	}
	locks3ClientMockPutObjectRequest.RLock()
	calls = mock.calls.PutObjectRequest
	locks3ClientMockPutObjectRequest.RUnlock()
	return calls
}

// PutObjectRetention calls PutObjectRetentionFunc.
func (mock *s3ClientMock) PutObjectRetention(in1 *s3.PutObjectRetentionInput) (*s3.PutObjectRetentionOutput, error) {
	if mock.PutObjectRetentionFunc == nil {
		panic("s3ClientMock.PutObjectRetentionFunc: method is nil but s3Client.PutObjectRetention was just called")
	}
	callInfo := struct {
		In1 *s3.PutObjectRetentionInput
	}{
		In1: in1,
	}
	locks3ClientMockPutObjectRetention.Lock()
	mock.calls.PutObjectRetention = append(mock.calls.PutObjectRetention, callInfo)
	locks3ClientMockPutObjectRetention.Unlock()
	return mock.PutObjectRetentionFunc(in1)
}

// PutObjectRetentionCalls gets all the calls that were made to PutObjectRetention.
// Check the length with:
//     len(mockeds3Client.PutObjectRetentionCalls())
func (mock *s3ClientMock) PutObjectRetentionCalls() []struct {
	In1 *s3.PutObjectRetentionInput
} {
	var calls []struct {
		In1 *s3.PutObjectRetentionInput
	}
	locks3ClientMockPutObjectRetention.RLock()
	calls = mock.calls.PutObjectRetention
	locks3ClientMockPutObjectRetention.RUnlock()
	return calls
}

// PutObjectRetentionRequest calls PutObjectRetentionRequestFunc.
func (mock *s3ClientMock) PutObjectRetentionRequest(in1 *s3.PutObjectRetentionInput) (*request.Request, *s3.PutObjectRetentionOutput) {
	if mock.PutObjectRetentionRequestFunc == nil {
		panic("s3ClientMock.PutObjectRetentionRequestFunc: method is nil but s3Client.PutObjectRetentionRequest was just called")
	}
	callInfo := struct {
		In1 *s3.PutObjectRetentionInput
	}{
		In1: in1,
	}
	locks3ClientMockPutObjectRetentionRequest.Lock()
	mock.calls.PutObjectRetentionRequest = append(mock.calls.PutObjectRetentionRequest, callInfo)
	locks3ClientMockPutObjectRetentionRequest.Unlock()
	return mock.PutObjectRetentionRequestFunc(in1)
}

// PutObjectRetentionRequestCalls gets all the calls that were made to PutObjectRetentionRequest.
// Check the length with:
//     len(mockeds3Client.PutObjectRetentionRequestCalls())
func (mock *s3ClientMock) PutObjectRetentionRequestCalls() []struct {
	In1 *s3.PutObjectRetentionInput
} {
	var calls []struct {
		In1 *s3.PutObjectRetentionInput
	}
	locks3ClientMockPutObjectRetentionRequest.RLock()
	calls = mock.calls.PutObjectRetentionRequest
	locks3ClientMockPutObjectRetentionRequest.RUnlock()
	return calls
}

// PutObjectRetentionWithContext calls PutObjectRetentionWithContextFunc.
func (mock *s3ClientMock) PutObjectRetentionWithContext(in1 context.Context, in2 *s3.PutObjectRetentionInput, in3 ...request.Option) (*s3.PutObjectRetentionOutput, error) {
	if mock.PutObjectRetentionWithContextFunc == nil {
		panic("s3ClientMock.PutObjectRetentionWithContextFunc: method is nil but s3Client.PutObjectRetentionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.PutObjectRetentionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockPutObjectRetentionWithContext.Lock()
	mock.calls.PutObjectRetentionWithContext = append(mock.calls.PutObjectRetentionWithContext, callInfo)
	locks3ClientMockPutObjectRetentionWithContext.Unlock()
	return mock.PutObjectRetentionWithContextFunc(in1, in2, in3...)
}

// PutObjectRetentionWithContextCalls gets all the calls that were made to PutObjectRetentionWithContext.
// Check the length with:
//     len(mockeds3Client.PutObjectRetentionWithContextCalls())
func (mock *s3ClientMock) PutObjectRetentionWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.PutObjectRetentionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.PutObjectRetentionInput
		In3 []request.Option
	}
	locks3ClientMockPutObjectRetentionWithContext.RLock()
	calls = mock.calls.PutObjectRetentionWithContext
	locks3ClientMockPutObjectRetentionWithContext.RUnlock()
	return calls
}

// PutObjectTagging calls PutObjectTaggingFunc.
func (mock *s3ClientMock) PutObjectTagging(in1 *s3.PutObjectTaggingInput) (*s3.PutObjectTaggingOutput, error) {
	if mock.PutObjectTaggingFunc == nil {
		panic("s3ClientMock.PutObjectTaggingFunc: method is nil but s3Client.PutObjectTagging was just called")
	}
	callInfo := struct {
		In1 *s3.PutObjectTaggingInput
	}{
		In1: in1,
	}
	locks3ClientMockPutObjectTagging.Lock()
	mock.calls.PutObjectTagging = append(mock.calls.PutObjectTagging, callInfo)
	locks3ClientMockPutObjectTagging.Unlock()
	return mock.PutObjectTaggingFunc(in1)
}

// PutObjectTaggingCalls gets all the calls that were made to PutObjectTagging.
// Check the length with:
//     len(mockeds3Client.PutObjectTaggingCalls())
func (mock *s3ClientMock) PutObjectTaggingCalls() []struct {
	In1 *s3.PutObjectTaggingInput
} {
	var calls []struct {
		In1 *s3.PutObjectTaggingInput
	}
	locks3ClientMockPutObjectTagging.RLock()
	calls = mock.calls.PutObjectTagging
	locks3ClientMockPutObjectTagging.RUnlock()
	return calls
}

// PutObjectTaggingRequest calls PutObjectTaggingRequestFunc.
func (mock *s3ClientMock) PutObjectTaggingRequest(in1 *s3.PutObjectTaggingInput) (*request.Request, *s3.PutObjectTaggingOutput) {
	if mock.PutObjectTaggingRequestFunc == nil {
		panic("s3ClientMock.PutObjectTaggingRequestFunc: method is nil but s3Client.PutObjectTaggingRequest was just called")
	}
	callInfo := struct {
		In1 *s3.PutObjectTaggingInput
	}{
		In1: in1,
	}
	locks3ClientMockPutObjectTaggingRequest.Lock()
	mock.calls.PutObjectTaggingRequest = append(mock.calls.PutObjectTaggingRequest, callInfo)
	locks3ClientMockPutObjectTaggingRequest.Unlock()
	return mock.PutObjectTaggingRequestFunc(in1)
}

// PutObjectTaggingRequestCalls gets all the calls that were made to PutObjectTaggingRequest.
// Check the length with:
//     len(mockeds3Client.PutObjectTaggingRequestCalls())
func (mock *s3ClientMock) PutObjectTaggingRequestCalls() []struct {
	In1 *s3.PutObjectTaggingInput
} {
	var calls []struct {
		In1 *s3.PutObjectTaggingInput
	}
	locks3ClientMockPutObjectTaggingRequest.RLock()
	calls = mock.calls.PutObjectTaggingRequest
	locks3ClientMockPutObjectTaggingRequest.RUnlock()
	return calls
}

// PutObjectTaggingWithContext calls PutObjectTaggingWithContextFunc.
func (mock *s3ClientMock) PutObjectTaggingWithContext(in1 context.Context, in2 *s3.PutObjectTaggingInput, in3 ...request.Option) (*s3.PutObjectTaggingOutput, error) {
	if mock.PutObjectTaggingWithContextFunc == nil {
		panic("s3ClientMock.PutObjectTaggingWithContextFunc: method is nil but s3Client.PutObjectTaggingWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.PutObjectTaggingInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockPutObjectTaggingWithContext.Lock()
	mock.calls.PutObjectTaggingWithContext = append(mock.calls.PutObjectTaggingWithContext, callInfo)
	locks3ClientMockPutObjectTaggingWithContext.Unlock()
	return mock.PutObjectTaggingWithContextFunc(in1, in2, in3...)
}

// PutObjectTaggingWithContextCalls gets all the calls that were made to PutObjectTaggingWithContext.
// Check the length with:
//     len(mockeds3Client.PutObjectTaggingWithContextCalls())
func (mock *s3ClientMock) PutObjectTaggingWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.PutObjectTaggingInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.PutObjectTaggingInput
		In3 []request.Option
	}
	locks3ClientMockPutObjectTaggingWithContext.RLock()
	calls = mock.calls.PutObjectTaggingWithContext
	locks3ClientMockPutObjectTaggingWithContext.RUnlock()
	return calls
}

// PutObjectWithContext calls PutObjectWithContextFunc.
func (mock *s3ClientMock) PutObjectWithContext(in1 context.Context, in2 *s3.PutObjectInput, in3 ...request.Option) (*s3.PutObjectOutput, error) {
	if mock.PutObjectWithContextFunc == nil {
		panic("s3ClientMock.PutObjectWithContextFunc: method is nil but s3Client.PutObjectWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.PutObjectInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockPutObjectWithContext.Lock()
	mock.calls.PutObjectWithContext = append(mock.calls.PutObjectWithContext, callInfo)
	locks3ClientMockPutObjectWithContext.Unlock()
	return mock.PutObjectWithContextFunc(in1, in2, in3...)
}

// PutObjectWithContextCalls gets all the calls that were made to PutObjectWithContext.
// Check the length with:
//     len(mockeds3Client.PutObjectWithContextCalls())
func (mock *s3ClientMock) PutObjectWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.PutObjectInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.PutObjectInput
		In3 []request.Option
	}
	locks3ClientMockPutObjectWithContext.RLock()
	calls = mock.calls.PutObjectWithContext
	locks3ClientMockPutObjectWithContext.RUnlock()
	return calls
}

// PutPublicAccessBlock calls PutPublicAccessBlockFunc.
func (mock *s3ClientMock) PutPublicAccessBlock(in1 *s3.PutPublicAccessBlockInput) (*s3.PutPublicAccessBlockOutput, error) {
	if mock.PutPublicAccessBlockFunc == nil {
		panic("s3ClientMock.PutPublicAccessBlockFunc: method is nil but s3Client.PutPublicAccessBlock was just called")
	}
	callInfo := struct {
		In1 *s3.PutPublicAccessBlockInput
	}{
		In1: in1,
	}
	locks3ClientMockPutPublicAccessBlock.Lock()
	mock.calls.PutPublicAccessBlock = append(mock.calls.PutPublicAccessBlock, callInfo)
	locks3ClientMockPutPublicAccessBlock.Unlock()
	return mock.PutPublicAccessBlockFunc(in1)
}

// PutPublicAccessBlockCalls gets all the calls that were made to PutPublicAccessBlock.
// Check the length with:
//     len(mockeds3Client.PutPublicAccessBlockCalls())
func (mock *s3ClientMock) PutPublicAccessBlockCalls() []struct {
	In1 *s3.PutPublicAccessBlockInput
} {
	var calls []struct {
		In1 *s3.PutPublicAccessBlockInput
	}
	locks3ClientMockPutPublicAccessBlock.RLock()
	calls = mock.calls.PutPublicAccessBlock
	locks3ClientMockPutPublicAccessBlock.RUnlock()
	return calls
}

// PutPublicAccessBlockRequest calls PutPublicAccessBlockRequestFunc.
func (mock *s3ClientMock) PutPublicAccessBlockRequest(in1 *s3.PutPublicAccessBlockInput) (*request.Request, *s3.PutPublicAccessBlockOutput) {
	if mock.PutPublicAccessBlockRequestFunc == nil {
		panic("s3ClientMock.PutPublicAccessBlockRequestFunc: method is nil but s3Client.PutPublicAccessBlockRequest was just called")
	}
	callInfo := struct {
		In1 *s3.PutPublicAccessBlockInput
	}{
		In1: in1,
	}
	locks3ClientMockPutPublicAccessBlockRequest.Lock()
	mock.calls.PutPublicAccessBlockRequest = append(mock.calls.PutPublicAccessBlockRequest, callInfo)
	locks3ClientMockPutPublicAccessBlockRequest.Unlock()
	return mock.PutPublicAccessBlockRequestFunc(in1)
}

// PutPublicAccessBlockRequestCalls gets all the calls that were made to PutPublicAccessBlockRequest.
// Check the length with:
//     len(mockeds3Client.PutPublicAccessBlockRequestCalls())
func (mock *s3ClientMock) PutPublicAccessBlockRequestCalls() []struct {
	In1 *s3.PutPublicAccessBlockInput
} {
	var calls []struct {
		In1 *s3.PutPublicAccessBlockInput
	}
	locks3ClientMockPutPublicAccessBlockRequest.RLock()
	calls = mock.calls.PutPublicAccessBlockRequest
	locks3ClientMockPutPublicAccessBlockRequest.RUnlock()
	return calls
}

// PutPublicAccessBlockWithContext calls PutPublicAccessBlockWithContextFunc.
func (mock *s3ClientMock) PutPublicAccessBlockWithContext(in1 context.Context, in2 *s3.PutPublicAccessBlockInput, in3 ...request.Option) (*s3.PutPublicAccessBlockOutput, error) {
	if mock.PutPublicAccessBlockWithContextFunc == nil {
		panic("s3ClientMock.PutPublicAccessBlockWithContextFunc: method is nil but s3Client.PutPublicAccessBlockWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.PutPublicAccessBlockInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockPutPublicAccessBlockWithContext.Lock()
	mock.calls.PutPublicAccessBlockWithContext = append(mock.calls.PutPublicAccessBlockWithContext, callInfo)
	locks3ClientMockPutPublicAccessBlockWithContext.Unlock()
	return mock.PutPublicAccessBlockWithContextFunc(in1, in2, in3...)
}

// PutPublicAccessBlockWithContextCalls gets all the calls that were made to PutPublicAccessBlockWithContext.
// Check the length with:
//     len(mockeds3Client.PutPublicAccessBlockWithContextCalls())
func (mock *s3ClientMock) PutPublicAccessBlockWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.PutPublicAccessBlockInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.PutPublicAccessBlockInput
		In3 []request.Option
	}
	locks3ClientMockPutPublicAccessBlockWithContext.RLock()
	calls = mock.calls.PutPublicAccessBlockWithContext
	locks3ClientMockPutPublicAccessBlockWithContext.RUnlock()
	return calls
}

// RestoreObject calls RestoreObjectFunc.
func (mock *s3ClientMock) RestoreObject(in1 *s3.RestoreObjectInput) (*s3.RestoreObjectOutput, error) {
	if mock.RestoreObjectFunc == nil {
		panic("s3ClientMock.RestoreObjectFunc: method is nil but s3Client.RestoreObject was just called")
	}
	callInfo := struct {
		In1 *s3.RestoreObjectInput
	}{
		In1: in1,
	}
	locks3ClientMockRestoreObject.Lock()
	mock.calls.RestoreObject = append(mock.calls.RestoreObject, callInfo)
	locks3ClientMockRestoreObject.Unlock()
	return mock.RestoreObjectFunc(in1)
}

// RestoreObjectCalls gets all the calls that were made to RestoreObject.
// Check the length with:
//     len(mockeds3Client.RestoreObjectCalls())
func (mock *s3ClientMock) RestoreObjectCalls() []struct {
	In1 *s3.RestoreObjectInput
} {
	var calls []struct {
		In1 *s3.RestoreObjectInput
	}
	locks3ClientMockRestoreObject.RLock()
	calls = mock.calls.RestoreObject
	locks3ClientMockRestoreObject.RUnlock()
	return calls
}

// RestoreObjectRequest calls RestoreObjectRequestFunc.
func (mock *s3ClientMock) RestoreObjectRequest(in1 *s3.RestoreObjectInput) (*request.Request, *s3.RestoreObjectOutput) {
	if mock.RestoreObjectRequestFunc == nil {
		panic("s3ClientMock.RestoreObjectRequestFunc: method is nil but s3Client.RestoreObjectRequest was just called")
	}
	callInfo := struct {
		In1 *s3.RestoreObjectInput
	}{
		In1: in1,
	}
	locks3ClientMockRestoreObjectRequest.Lock()
	mock.calls.RestoreObjectRequest = append(mock.calls.RestoreObjectRequest, callInfo)
	locks3ClientMockRestoreObjectRequest.Unlock()
	return mock.RestoreObjectRequestFunc(in1)
}

// RestoreObjectRequestCalls gets all the calls that were made to RestoreObjectRequest.
// Check the length with:
//     len(mockeds3Client.RestoreObjectRequestCalls())
func (mock *s3ClientMock) RestoreObjectRequestCalls() []struct {
	In1 *s3.RestoreObjectInput
} {
	var calls []struct {
		In1 *s3.RestoreObjectInput
	}
	locks3ClientMockRestoreObjectRequest.RLock()
	calls = mock.calls.RestoreObjectRequest
	locks3ClientMockRestoreObjectRequest.RUnlock()
	return calls
}

// RestoreObjectWithContext calls RestoreObjectWithContextFunc.
func (mock *s3ClientMock) RestoreObjectWithContext(in1 context.Context, in2 *s3.RestoreObjectInput, in3 ...request.Option) (*s3.RestoreObjectOutput, error) {
	if mock.RestoreObjectWithContextFunc == nil {
		panic("s3ClientMock.RestoreObjectWithContextFunc: method is nil but s3Client.RestoreObjectWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.RestoreObjectInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockRestoreObjectWithContext.Lock()
	mock.calls.RestoreObjectWithContext = append(mock.calls.RestoreObjectWithContext, callInfo)
	locks3ClientMockRestoreObjectWithContext.Unlock()
	return mock.RestoreObjectWithContextFunc(in1, in2, in3...)
}

// RestoreObjectWithContextCalls gets all the calls that were made to RestoreObjectWithContext.
// Check the length with:
//     len(mockeds3Client.RestoreObjectWithContextCalls())
func (mock *s3ClientMock) RestoreObjectWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.RestoreObjectInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.RestoreObjectInput
		In3 []request.Option
	}
	locks3ClientMockRestoreObjectWithContext.RLock()
	calls = mock.calls.RestoreObjectWithContext
	locks3ClientMockRestoreObjectWithContext.RUnlock()
	return calls
}

// SelectObjectContent calls SelectObjectContentFunc.
func (mock *s3ClientMock) SelectObjectContent(in1 *s3.SelectObjectContentInput) (*s3.SelectObjectContentOutput, error) {
	if mock.SelectObjectContentFunc == nil {
		panic("s3ClientMock.SelectObjectContentFunc: method is nil but s3Client.SelectObjectContent was just called")
	}
	callInfo := struct {
		In1 *s3.SelectObjectContentInput
	}{
		In1: in1,
	}
	locks3ClientMockSelectObjectContent.Lock()
	mock.calls.SelectObjectContent = append(mock.calls.SelectObjectContent, callInfo)
	locks3ClientMockSelectObjectContent.Unlock()
	return mock.SelectObjectContentFunc(in1)
}

// SelectObjectContentCalls gets all the calls that were made to SelectObjectContent.
// Check the length with:
//     len(mockeds3Client.SelectObjectContentCalls())
func (mock *s3ClientMock) SelectObjectContentCalls() []struct {
	In1 *s3.SelectObjectContentInput
} {
	var calls []struct {
		In1 *s3.SelectObjectContentInput
	}
	locks3ClientMockSelectObjectContent.RLock()
	calls = mock.calls.SelectObjectContent
	locks3ClientMockSelectObjectContent.RUnlock()
	return calls
}

// SelectObjectContentRequest calls SelectObjectContentRequestFunc.
func (mock *s3ClientMock) SelectObjectContentRequest(in1 *s3.SelectObjectContentInput) (*request.Request, *s3.SelectObjectContentOutput) {
	if mock.SelectObjectContentRequestFunc == nil {
		panic("s3ClientMock.SelectObjectContentRequestFunc: method is nil but s3Client.SelectObjectContentRequest was just called")
	}
	callInfo := struct {
		In1 *s3.SelectObjectContentInput
	}{
		In1: in1,
	}
	locks3ClientMockSelectObjectContentRequest.Lock()
	mock.calls.SelectObjectContentRequest = append(mock.calls.SelectObjectContentRequest, callInfo)
	locks3ClientMockSelectObjectContentRequest.Unlock()
	return mock.SelectObjectContentRequestFunc(in1)
}

// SelectObjectContentRequestCalls gets all the calls that were made to SelectObjectContentRequest.
// Check the length with:
//     len(mockeds3Client.SelectObjectContentRequestCalls())
func (mock *s3ClientMock) SelectObjectContentRequestCalls() []struct {
	In1 *s3.SelectObjectContentInput
} {
	var calls []struct {
		In1 *s3.SelectObjectContentInput
	}
	locks3ClientMockSelectObjectContentRequest.RLock()
	calls = mock.calls.SelectObjectContentRequest
	locks3ClientMockSelectObjectContentRequest.RUnlock()
	return calls
}

// SelectObjectContentWithContext calls SelectObjectContentWithContextFunc.
func (mock *s3ClientMock) SelectObjectContentWithContext(in1 context.Context, in2 *s3.SelectObjectContentInput, in3 ...request.Option) (*s3.SelectObjectContentOutput, error) {
	if mock.SelectObjectContentWithContextFunc == nil {
		panic("s3ClientMock.SelectObjectContentWithContextFunc: method is nil but s3Client.SelectObjectContentWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.SelectObjectContentInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockSelectObjectContentWithContext.Lock()
	mock.calls.SelectObjectContentWithContext = append(mock.calls.SelectObjectContentWithContext, callInfo)
	locks3ClientMockSelectObjectContentWithContext.Unlock()
	return mock.SelectObjectContentWithContextFunc(in1, in2, in3...)
}

// SelectObjectContentWithContextCalls gets all the calls that were made to SelectObjectContentWithContext.
// Check the length with:
//     len(mockeds3Client.SelectObjectContentWithContextCalls())
func (mock *s3ClientMock) SelectObjectContentWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.SelectObjectContentInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.SelectObjectContentInput
		In3 []request.Option
	}
	locks3ClientMockSelectObjectContentWithContext.RLock()
	calls = mock.calls.SelectObjectContentWithContext
	locks3ClientMockSelectObjectContentWithContext.RUnlock()
	return calls
}

// UploadPart calls UploadPartFunc.
func (mock *s3ClientMock) UploadPart(in1 *s3.UploadPartInput) (*s3.UploadPartOutput, error) {
	if mock.UploadPartFunc == nil {
		panic("s3ClientMock.UploadPartFunc: method is nil but s3Client.UploadPart was just called")
	}
	callInfo := struct {
		In1 *s3.UploadPartInput
	}{
		In1: in1,
	}
	locks3ClientMockUploadPart.Lock()
	mock.calls.UploadPart = append(mock.calls.UploadPart, callInfo)
	locks3ClientMockUploadPart.Unlock()
	return mock.UploadPartFunc(in1)
}

// UploadPartCalls gets all the calls that were made to UploadPart.
// Check the length with:
//     len(mockeds3Client.UploadPartCalls())
func (mock *s3ClientMock) UploadPartCalls() []struct {
	In1 *s3.UploadPartInput
} {
	var calls []struct {
		In1 *s3.UploadPartInput
	}
	locks3ClientMockUploadPart.RLock()
	calls = mock.calls.UploadPart
	locks3ClientMockUploadPart.RUnlock()
	return calls
}

// UploadPartCopy calls UploadPartCopyFunc.
func (mock *s3ClientMock) UploadPartCopy(in1 *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error) {
	if mock.UploadPartCopyFunc == nil {
		panic("s3ClientMock.UploadPartCopyFunc: method is nil but s3Client.UploadPartCopy was just called")
	}
	callInfo := struct {
		In1 *s3.UploadPartCopyInput
	}{
		In1: in1,
	}
	locks3ClientMockUploadPartCopy.Lock()
	mock.calls.UploadPartCopy = append(mock.calls.UploadPartCopy, callInfo)
	locks3ClientMockUploadPartCopy.Unlock()
	return mock.UploadPartCopyFunc(in1)
}

// UploadPartCopyCalls gets all the calls that were made to UploadPartCopy.
// Check the length with:
//     len(mockeds3Client.UploadPartCopyCalls())
func (mock *s3ClientMock) UploadPartCopyCalls() []struct {
	In1 *s3.UploadPartCopyInput
} {
	var calls []struct {
		In1 *s3.UploadPartCopyInput
	}
	locks3ClientMockUploadPartCopy.RLock()
	calls = mock.calls.UploadPartCopy
	locks3ClientMockUploadPartCopy.RUnlock()
	return calls
}

// UploadPartCopyRequest calls UploadPartCopyRequestFunc.
func (mock *s3ClientMock) UploadPartCopyRequest(in1 *s3.UploadPartCopyInput) (*request.Request, *s3.UploadPartCopyOutput) {
	if mock.UploadPartCopyRequestFunc == nil {
		panic("s3ClientMock.UploadPartCopyRequestFunc: method is nil but s3Client.UploadPartCopyRequest was just called")
	}
	callInfo := struct {
		In1 *s3.UploadPartCopyInput
	}{
		In1: in1,
	}
	locks3ClientMockUploadPartCopyRequest.Lock()
	mock.calls.UploadPartCopyRequest = append(mock.calls.UploadPartCopyRequest, callInfo)
	locks3ClientMockUploadPartCopyRequest.Unlock()
	return mock.UploadPartCopyRequestFunc(in1)
}

// UploadPartCopyRequestCalls gets all the calls that were made to UploadPartCopyRequest.
// Check the length with:
//     len(mockeds3Client.UploadPartCopyRequestCalls())
func (mock *s3ClientMock) UploadPartCopyRequestCalls() []struct {
	In1 *s3.UploadPartCopyInput
} {
	var calls []struct {
		In1 *s3.UploadPartCopyInput
	}
	locks3ClientMockUploadPartCopyRequest.RLock()
	calls = mock.calls.UploadPartCopyRequest
	locks3ClientMockUploadPartCopyRequest.RUnlock()
	return calls
}

// UploadPartCopyWithContext calls UploadPartCopyWithContextFunc.
func (mock *s3ClientMock) UploadPartCopyWithContext(in1 context.Context, in2 *s3.UploadPartCopyInput, in3 ...request.Option) (*s3.UploadPartCopyOutput, error) {
	if mock.UploadPartCopyWithContextFunc == nil {
		panic("s3ClientMock.UploadPartCopyWithContextFunc: method is nil but s3Client.UploadPartCopyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.UploadPartCopyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockUploadPartCopyWithContext.Lock()
	mock.calls.UploadPartCopyWithContext = append(mock.calls.UploadPartCopyWithContext, callInfo)
	locks3ClientMockUploadPartCopyWithContext.Unlock()
	return mock.UploadPartCopyWithContextFunc(in1, in2, in3...)
}

// UploadPartCopyWithContextCalls gets all the calls that were made to UploadPartCopyWithContext.
// Check the length with:
//     len(mockeds3Client.UploadPartCopyWithContextCalls())
func (mock *s3ClientMock) UploadPartCopyWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.UploadPartCopyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.UploadPartCopyInput
		In3 []request.Option
	}
	locks3ClientMockUploadPartCopyWithContext.RLock()
	calls = mock.calls.UploadPartCopyWithContext
	locks3ClientMockUploadPartCopyWithContext.RUnlock()
	return calls
}

// UploadPartRequest calls UploadPartRequestFunc.
func (mock *s3ClientMock) UploadPartRequest(in1 *s3.UploadPartInput) (*request.Request, *s3.UploadPartOutput) {
	if mock.UploadPartRequestFunc == nil {
		panic("s3ClientMock.UploadPartRequestFunc: method is nil but s3Client.UploadPartRequest was just called")
	}
	callInfo := struct {
		In1 *s3.UploadPartInput
	}{
		In1: in1,
	}
	locks3ClientMockUploadPartRequest.Lock()
	mock.calls.UploadPartRequest = append(mock.calls.UploadPartRequest, callInfo)
	locks3ClientMockUploadPartRequest.Unlock()
	return mock.UploadPartRequestFunc(in1)
}

// UploadPartRequestCalls gets all the calls that were made to UploadPartRequest.
// Check the length with:
//     len(mockeds3Client.UploadPartRequestCalls())
func (mock *s3ClientMock) UploadPartRequestCalls() []struct {
	In1 *s3.UploadPartInput
} {
	var calls []struct {
		In1 *s3.UploadPartInput
	}
	locks3ClientMockUploadPartRequest.RLock()
	calls = mock.calls.UploadPartRequest
	locks3ClientMockUploadPartRequest.RUnlock()
	return calls
}

// UploadPartWithContext calls UploadPartWithContextFunc.
func (mock *s3ClientMock) UploadPartWithContext(in1 context.Context, in2 *s3.UploadPartInput, in3 ...request.Option) (*s3.UploadPartOutput, error) {
	if mock.UploadPartWithContextFunc == nil {
		panic("s3ClientMock.UploadPartWithContextFunc: method is nil but s3Client.UploadPartWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.UploadPartInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockUploadPartWithContext.Lock()
	mock.calls.UploadPartWithContext = append(mock.calls.UploadPartWithContext, callInfo)
	locks3ClientMockUploadPartWithContext.Unlock()
	return mock.UploadPartWithContextFunc(in1, in2, in3...)
}

// UploadPartWithContextCalls gets all the calls that were made to UploadPartWithContext.
// Check the length with:
//     len(mockeds3Client.UploadPartWithContextCalls())
func (mock *s3ClientMock) UploadPartWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.UploadPartInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.UploadPartInput
		In3 []request.Option
	}
	locks3ClientMockUploadPartWithContext.RLock()
	calls = mock.calls.UploadPartWithContext
	locks3ClientMockUploadPartWithContext.RUnlock()
	return calls
}

// WaitUntilBucketExists calls WaitUntilBucketExistsFunc.
func (mock *s3ClientMock) WaitUntilBucketExists(in1 *s3.HeadBucketInput) error {
	if mock.WaitUntilBucketExistsFunc == nil {
		panic("s3ClientMock.WaitUntilBucketExistsFunc: method is nil but s3Client.WaitUntilBucketExists was just called")
	}
	callInfo := struct {
		In1 *s3.HeadBucketInput
	}{
		In1: in1,
	}
	locks3ClientMockWaitUntilBucketExists.Lock()
	mock.calls.WaitUntilBucketExists = append(mock.calls.WaitUntilBucketExists, callInfo)
	locks3ClientMockWaitUntilBucketExists.Unlock()
	return mock.WaitUntilBucketExistsFunc(in1)
}

// WaitUntilBucketExistsCalls gets all the calls that were made to WaitUntilBucketExists.
// Check the length with:
//     len(mockeds3Client.WaitUntilBucketExistsCalls())
func (mock *s3ClientMock) WaitUntilBucketExistsCalls() []struct {
	In1 *s3.HeadBucketInput
} {
	var calls []struct {
		In1 *s3.HeadBucketInput
	}
	locks3ClientMockWaitUntilBucketExists.RLock()
	calls = mock.calls.WaitUntilBucketExists
	locks3ClientMockWaitUntilBucketExists.RUnlock()
	return calls
}

// WaitUntilBucketExistsWithContext calls WaitUntilBucketExistsWithContextFunc.
func (mock *s3ClientMock) WaitUntilBucketExistsWithContext(in1 context.Context, in2 *s3.HeadBucketInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilBucketExistsWithContextFunc == nil {
		panic("s3ClientMock.WaitUntilBucketExistsWithContextFunc: method is nil but s3Client.WaitUntilBucketExistsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.HeadBucketInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockWaitUntilBucketExistsWithContext.Lock()
	mock.calls.WaitUntilBucketExistsWithContext = append(mock.calls.WaitUntilBucketExistsWithContext, callInfo)
	locks3ClientMockWaitUntilBucketExistsWithContext.Unlock()
	return mock.WaitUntilBucketExistsWithContextFunc(in1, in2, in3...)
}

// WaitUntilBucketExistsWithContextCalls gets all the calls that were made to WaitUntilBucketExistsWithContext.
// Check the length with:
//     len(mockeds3Client.WaitUntilBucketExistsWithContextCalls())
func (mock *s3ClientMock) WaitUntilBucketExistsWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.HeadBucketInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.HeadBucketInput
		In3 []request.WaiterOption
	}
	locks3ClientMockWaitUntilBucketExistsWithContext.RLock()
	calls = mock.calls.WaitUntilBucketExistsWithContext
	locks3ClientMockWaitUntilBucketExistsWithContext.RUnlock()
	return calls
}

// WaitUntilBucketNotExists calls WaitUntilBucketNotExistsFunc.
func (mock *s3ClientMock) WaitUntilBucketNotExists(in1 *s3.HeadBucketInput) error {
	if mock.WaitUntilBucketNotExistsFunc == nil {
		panic("s3ClientMock.WaitUntilBucketNotExistsFunc: method is nil but s3Client.WaitUntilBucketNotExists was just called")
	}
	callInfo := struct {
		In1 *s3.HeadBucketInput
	}{
		In1: in1,
	}
	locks3ClientMockWaitUntilBucketNotExists.Lock()
	mock.calls.WaitUntilBucketNotExists = append(mock.calls.WaitUntilBucketNotExists, callInfo)
	locks3ClientMockWaitUntilBucketNotExists.Unlock()
	return mock.WaitUntilBucketNotExistsFunc(in1)
}

// WaitUntilBucketNotExistsCalls gets all the calls that were made to WaitUntilBucketNotExists.
// Check the length with:
//     len(mockeds3Client.WaitUntilBucketNotExistsCalls())
func (mock *s3ClientMock) WaitUntilBucketNotExistsCalls() []struct {
	In1 *s3.HeadBucketInput
} {
	var calls []struct {
		In1 *s3.HeadBucketInput
	}
	locks3ClientMockWaitUntilBucketNotExists.RLock()
	calls = mock.calls.WaitUntilBucketNotExists
	locks3ClientMockWaitUntilBucketNotExists.RUnlock()
	return calls
}

// WaitUntilBucketNotExistsWithContext calls WaitUntilBucketNotExistsWithContextFunc.
func (mock *s3ClientMock) WaitUntilBucketNotExistsWithContext(in1 context.Context, in2 *s3.HeadBucketInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilBucketNotExistsWithContextFunc == nil {
		panic("s3ClientMock.WaitUntilBucketNotExistsWithContextFunc: method is nil but s3Client.WaitUntilBucketNotExistsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.HeadBucketInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockWaitUntilBucketNotExistsWithContext.Lock()
	mock.calls.WaitUntilBucketNotExistsWithContext = append(mock.calls.WaitUntilBucketNotExistsWithContext, callInfo)
	locks3ClientMockWaitUntilBucketNotExistsWithContext.Unlock()
	return mock.WaitUntilBucketNotExistsWithContextFunc(in1, in2, in3...)
}

// WaitUntilBucketNotExistsWithContextCalls gets all the calls that were made to WaitUntilBucketNotExistsWithContext.
// Check the length with:
//     len(mockeds3Client.WaitUntilBucketNotExistsWithContextCalls())
func (mock *s3ClientMock) WaitUntilBucketNotExistsWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.HeadBucketInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.HeadBucketInput
		In3 []request.WaiterOption
	}
	locks3ClientMockWaitUntilBucketNotExistsWithContext.RLock()
	calls = mock.calls.WaitUntilBucketNotExistsWithContext
	locks3ClientMockWaitUntilBucketNotExistsWithContext.RUnlock()
	return calls
}

// WaitUntilObjectExists calls WaitUntilObjectExistsFunc.
func (mock *s3ClientMock) WaitUntilObjectExists(in1 *s3.HeadObjectInput) error {
	if mock.WaitUntilObjectExistsFunc == nil {
		panic("s3ClientMock.WaitUntilObjectExistsFunc: method is nil but s3Client.WaitUntilObjectExists was just called")
	}
	callInfo := struct {
		In1 *s3.HeadObjectInput
	}{
		In1: in1,
	}
	locks3ClientMockWaitUntilObjectExists.Lock()
	mock.calls.WaitUntilObjectExists = append(mock.calls.WaitUntilObjectExists, callInfo)
	locks3ClientMockWaitUntilObjectExists.Unlock()
	return mock.WaitUntilObjectExistsFunc(in1)
}

// WaitUntilObjectExistsCalls gets all the calls that were made to WaitUntilObjectExists.
// Check the length with:
//     len(mockeds3Client.WaitUntilObjectExistsCalls())
func (mock *s3ClientMock) WaitUntilObjectExistsCalls() []struct {
	In1 *s3.HeadObjectInput
} {
	var calls []struct {
		In1 *s3.HeadObjectInput
	}
	locks3ClientMockWaitUntilObjectExists.RLock()
	calls = mock.calls.WaitUntilObjectExists
	locks3ClientMockWaitUntilObjectExists.RUnlock()
	return calls
}

// WaitUntilObjectExistsWithContext calls WaitUntilObjectExistsWithContextFunc.
func (mock *s3ClientMock) WaitUntilObjectExistsWithContext(in1 context.Context, in2 *s3.HeadObjectInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilObjectExistsWithContextFunc == nil {
		panic("s3ClientMock.WaitUntilObjectExistsWithContextFunc: method is nil but s3Client.WaitUntilObjectExistsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.HeadObjectInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockWaitUntilObjectExistsWithContext.Lock()
	mock.calls.WaitUntilObjectExistsWithContext = append(mock.calls.WaitUntilObjectExistsWithContext, callInfo)
	locks3ClientMockWaitUntilObjectExistsWithContext.Unlock()
	return mock.WaitUntilObjectExistsWithContextFunc(in1, in2, in3...)
}

// WaitUntilObjectExistsWithContextCalls gets all the calls that were made to WaitUntilObjectExistsWithContext.
// Check the length with:
//     len(mockeds3Client.WaitUntilObjectExistsWithContextCalls())
func (mock *s3ClientMock) WaitUntilObjectExistsWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.HeadObjectInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.HeadObjectInput
		In3 []request.WaiterOption
	}
	locks3ClientMockWaitUntilObjectExistsWithContext.RLock()
	calls = mock.calls.WaitUntilObjectExistsWithContext
	locks3ClientMockWaitUntilObjectExistsWithContext.RUnlock()
	return calls
}

// WaitUntilObjectNotExists calls WaitUntilObjectNotExistsFunc.
func (mock *s3ClientMock) WaitUntilObjectNotExists(in1 *s3.HeadObjectInput) error {
	if mock.WaitUntilObjectNotExistsFunc == nil {
		panic("s3ClientMock.WaitUntilObjectNotExistsFunc: method is nil but s3Client.WaitUntilObjectNotExists was just called")
	}
	callInfo := struct {
		In1 *s3.HeadObjectInput
	}{
		In1: in1,
	}
	locks3ClientMockWaitUntilObjectNotExists.Lock()
	mock.calls.WaitUntilObjectNotExists = append(mock.calls.WaitUntilObjectNotExists, callInfo)
	locks3ClientMockWaitUntilObjectNotExists.Unlock()
	return mock.WaitUntilObjectNotExistsFunc(in1)
}

// WaitUntilObjectNotExistsCalls gets all the calls that were made to WaitUntilObjectNotExists.
// Check the length with:
//     len(mockeds3Client.WaitUntilObjectNotExistsCalls())
func (mock *s3ClientMock) WaitUntilObjectNotExistsCalls() []struct {
	In1 *s3.HeadObjectInput
} {
	var calls []struct {
		In1 *s3.HeadObjectInput
	}
	locks3ClientMockWaitUntilObjectNotExists.RLock()
	calls = mock.calls.WaitUntilObjectNotExists
	locks3ClientMockWaitUntilObjectNotExists.RUnlock()
	return calls
}

// WaitUntilObjectNotExistsWithContext calls WaitUntilObjectNotExistsWithContextFunc.
func (mock *s3ClientMock) WaitUntilObjectNotExistsWithContext(in1 context.Context, in2 *s3.HeadObjectInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilObjectNotExistsWithContextFunc == nil {
		panic("s3ClientMock.WaitUntilObjectNotExistsWithContextFunc: method is nil but s3Client.WaitUntilObjectNotExistsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *s3.HeadObjectInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	locks3ClientMockWaitUntilObjectNotExistsWithContext.Lock()
	mock.calls.WaitUntilObjectNotExistsWithContext = append(mock.calls.WaitUntilObjectNotExistsWithContext, callInfo)
	locks3ClientMockWaitUntilObjectNotExistsWithContext.Unlock()
	return mock.WaitUntilObjectNotExistsWithContextFunc(in1, in2, in3...)
}

// WaitUntilObjectNotExistsWithContextCalls gets all the calls that were made to WaitUntilObjectNotExistsWithContext.
// Check the length with:
//     len(mockeds3Client.WaitUntilObjectNotExistsWithContextCalls())
func (mock *s3ClientMock) WaitUntilObjectNotExistsWithContextCalls() []struct {
	In1 context.Context
	In2 *s3.HeadObjectInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *s3.HeadObjectInput
		In3 []request.WaiterOption
	}
	locks3ClientMockWaitUntilObjectNotExistsWithContext.RLock()
	calls = mock.calls.WaitUntilObjectNotExistsWithContext
	locks3ClientMockWaitUntilObjectNotExistsWithContext.RUnlock()
	return calls
}
