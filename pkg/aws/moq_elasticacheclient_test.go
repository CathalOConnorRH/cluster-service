// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package aws

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/elasticache"
	"sync"
)

var (
	lockelasticacheClientMockAddTagsToResource                                   sync.RWMutex
	lockelasticacheClientMockAddTagsToResourceRequest                            sync.RWMutex
	lockelasticacheClientMockAddTagsToResourceWithContext                        sync.RWMutex
	lockelasticacheClientMockAuthorizeCacheSecurityGroupIngress                  sync.RWMutex
	lockelasticacheClientMockAuthorizeCacheSecurityGroupIngressRequest           sync.RWMutex
	lockelasticacheClientMockAuthorizeCacheSecurityGroupIngressWithContext       sync.RWMutex
	lockelasticacheClientMockBatchApplyUpdateAction                              sync.RWMutex
	lockelasticacheClientMockBatchApplyUpdateActionRequest                       sync.RWMutex
	lockelasticacheClientMockBatchApplyUpdateActionWithContext                   sync.RWMutex
	lockelasticacheClientMockBatchStopUpdateAction                               sync.RWMutex
	lockelasticacheClientMockBatchStopUpdateActionRequest                        sync.RWMutex
	lockelasticacheClientMockBatchStopUpdateActionWithContext                    sync.RWMutex
	lockelasticacheClientMockCompleteMigration                                   sync.RWMutex
	lockelasticacheClientMockCompleteMigrationRequest                            sync.RWMutex
	lockelasticacheClientMockCompleteMigrationWithContext                        sync.RWMutex
	lockelasticacheClientMockCopySnapshot                                        sync.RWMutex
	lockelasticacheClientMockCopySnapshotRequest                                 sync.RWMutex
	lockelasticacheClientMockCopySnapshotWithContext                             sync.RWMutex
	lockelasticacheClientMockCreateCacheCluster                                  sync.RWMutex
	lockelasticacheClientMockCreateCacheClusterRequest                           sync.RWMutex
	lockelasticacheClientMockCreateCacheClusterWithContext                       sync.RWMutex
	lockelasticacheClientMockCreateCacheParameterGroup                           sync.RWMutex
	lockelasticacheClientMockCreateCacheParameterGroupRequest                    sync.RWMutex
	lockelasticacheClientMockCreateCacheParameterGroupWithContext                sync.RWMutex
	lockelasticacheClientMockCreateCacheSecurityGroup                            sync.RWMutex
	lockelasticacheClientMockCreateCacheSecurityGroupRequest                     sync.RWMutex
	lockelasticacheClientMockCreateCacheSecurityGroupWithContext                 sync.RWMutex
	lockelasticacheClientMockCreateCacheSubnetGroup                              sync.RWMutex
	lockelasticacheClientMockCreateCacheSubnetGroupRequest                       sync.RWMutex
	lockelasticacheClientMockCreateCacheSubnetGroupWithContext                   sync.RWMutex
	lockelasticacheClientMockCreateReplicationGroup                              sync.RWMutex
	lockelasticacheClientMockCreateReplicationGroupRequest                       sync.RWMutex
	lockelasticacheClientMockCreateReplicationGroupWithContext                   sync.RWMutex
	lockelasticacheClientMockCreateSnapshot                                      sync.RWMutex
	lockelasticacheClientMockCreateSnapshotRequest                               sync.RWMutex
	lockelasticacheClientMockCreateSnapshotWithContext                           sync.RWMutex
	lockelasticacheClientMockDecreaseReplicaCount                                sync.RWMutex
	lockelasticacheClientMockDecreaseReplicaCountRequest                         sync.RWMutex
	lockelasticacheClientMockDecreaseReplicaCountWithContext                     sync.RWMutex
	lockelasticacheClientMockDeleteCacheCluster                                  sync.RWMutex
	lockelasticacheClientMockDeleteCacheClusterRequest                           sync.RWMutex
	lockelasticacheClientMockDeleteCacheClusterWithContext                       sync.RWMutex
	lockelasticacheClientMockDeleteCacheParameterGroup                           sync.RWMutex
	lockelasticacheClientMockDeleteCacheParameterGroupRequest                    sync.RWMutex
	lockelasticacheClientMockDeleteCacheParameterGroupWithContext                sync.RWMutex
	lockelasticacheClientMockDeleteCacheSecurityGroup                            sync.RWMutex
	lockelasticacheClientMockDeleteCacheSecurityGroupRequest                     sync.RWMutex
	lockelasticacheClientMockDeleteCacheSecurityGroupWithContext                 sync.RWMutex
	lockelasticacheClientMockDeleteCacheSubnetGroup                              sync.RWMutex
	lockelasticacheClientMockDeleteCacheSubnetGroupRequest                       sync.RWMutex
	lockelasticacheClientMockDeleteCacheSubnetGroupWithContext                   sync.RWMutex
	lockelasticacheClientMockDeleteReplicationGroup                              sync.RWMutex
	lockelasticacheClientMockDeleteReplicationGroupRequest                       sync.RWMutex
	lockelasticacheClientMockDeleteReplicationGroupWithContext                   sync.RWMutex
	lockelasticacheClientMockDeleteSnapshot                                      sync.RWMutex
	lockelasticacheClientMockDeleteSnapshotRequest                               sync.RWMutex
	lockelasticacheClientMockDeleteSnapshotWithContext                           sync.RWMutex
	lockelasticacheClientMockDescribeCacheClusters                               sync.RWMutex
	lockelasticacheClientMockDescribeCacheClustersPages                          sync.RWMutex
	lockelasticacheClientMockDescribeCacheClustersPagesWithContext               sync.RWMutex
	lockelasticacheClientMockDescribeCacheClustersRequest                        sync.RWMutex
	lockelasticacheClientMockDescribeCacheClustersWithContext                    sync.RWMutex
	lockelasticacheClientMockDescribeCacheEngineVersions                         sync.RWMutex
	lockelasticacheClientMockDescribeCacheEngineVersionsPages                    sync.RWMutex
	lockelasticacheClientMockDescribeCacheEngineVersionsPagesWithContext         sync.RWMutex
	lockelasticacheClientMockDescribeCacheEngineVersionsRequest                  sync.RWMutex
	lockelasticacheClientMockDescribeCacheEngineVersionsWithContext              sync.RWMutex
	lockelasticacheClientMockDescribeCacheParameterGroups                        sync.RWMutex
	lockelasticacheClientMockDescribeCacheParameterGroupsPages                   sync.RWMutex
	lockelasticacheClientMockDescribeCacheParameterGroupsPagesWithContext        sync.RWMutex
	lockelasticacheClientMockDescribeCacheParameterGroupsRequest                 sync.RWMutex
	lockelasticacheClientMockDescribeCacheParameterGroupsWithContext             sync.RWMutex
	lockelasticacheClientMockDescribeCacheParameters                             sync.RWMutex
	lockelasticacheClientMockDescribeCacheParametersPages                        sync.RWMutex
	lockelasticacheClientMockDescribeCacheParametersPagesWithContext             sync.RWMutex
	lockelasticacheClientMockDescribeCacheParametersRequest                      sync.RWMutex
	lockelasticacheClientMockDescribeCacheParametersWithContext                  sync.RWMutex
	lockelasticacheClientMockDescribeCacheSecurityGroups                         sync.RWMutex
	lockelasticacheClientMockDescribeCacheSecurityGroupsPages                    sync.RWMutex
	lockelasticacheClientMockDescribeCacheSecurityGroupsPagesWithContext         sync.RWMutex
	lockelasticacheClientMockDescribeCacheSecurityGroupsRequest                  sync.RWMutex
	lockelasticacheClientMockDescribeCacheSecurityGroupsWithContext              sync.RWMutex
	lockelasticacheClientMockDescribeCacheSubnetGroups                           sync.RWMutex
	lockelasticacheClientMockDescribeCacheSubnetGroupsPages                      sync.RWMutex
	lockelasticacheClientMockDescribeCacheSubnetGroupsPagesWithContext           sync.RWMutex
	lockelasticacheClientMockDescribeCacheSubnetGroupsRequest                    sync.RWMutex
	lockelasticacheClientMockDescribeCacheSubnetGroupsWithContext                sync.RWMutex
	lockelasticacheClientMockDescribeEngineDefaultParameters                     sync.RWMutex
	lockelasticacheClientMockDescribeEngineDefaultParametersPages                sync.RWMutex
	lockelasticacheClientMockDescribeEngineDefaultParametersPagesWithContext     sync.RWMutex
	lockelasticacheClientMockDescribeEngineDefaultParametersRequest              sync.RWMutex
	lockelasticacheClientMockDescribeEngineDefaultParametersWithContext          sync.RWMutex
	lockelasticacheClientMockDescribeEvents                                      sync.RWMutex
	lockelasticacheClientMockDescribeEventsPages                                 sync.RWMutex
	lockelasticacheClientMockDescribeEventsPagesWithContext                      sync.RWMutex
	lockelasticacheClientMockDescribeEventsRequest                               sync.RWMutex
	lockelasticacheClientMockDescribeEventsWithContext                           sync.RWMutex
	lockelasticacheClientMockDescribeReplicationGroups                           sync.RWMutex
	lockelasticacheClientMockDescribeReplicationGroupsPages                      sync.RWMutex
	lockelasticacheClientMockDescribeReplicationGroupsPagesWithContext           sync.RWMutex
	lockelasticacheClientMockDescribeReplicationGroupsRequest                    sync.RWMutex
	lockelasticacheClientMockDescribeReplicationGroupsWithContext                sync.RWMutex
	lockelasticacheClientMockDescribeReservedCacheNodes                          sync.RWMutex
	lockelasticacheClientMockDescribeReservedCacheNodesOfferings                 sync.RWMutex
	lockelasticacheClientMockDescribeReservedCacheNodesOfferingsPages            sync.RWMutex
	lockelasticacheClientMockDescribeReservedCacheNodesOfferingsPagesWithContext sync.RWMutex
	lockelasticacheClientMockDescribeReservedCacheNodesOfferingsRequest          sync.RWMutex
	lockelasticacheClientMockDescribeReservedCacheNodesOfferingsWithContext      sync.RWMutex
	lockelasticacheClientMockDescribeReservedCacheNodesPages                     sync.RWMutex
	lockelasticacheClientMockDescribeReservedCacheNodesPagesWithContext          sync.RWMutex
	lockelasticacheClientMockDescribeReservedCacheNodesRequest                   sync.RWMutex
	lockelasticacheClientMockDescribeReservedCacheNodesWithContext               sync.RWMutex
	lockelasticacheClientMockDescribeServiceUpdates                              sync.RWMutex
	lockelasticacheClientMockDescribeServiceUpdatesPages                         sync.RWMutex
	lockelasticacheClientMockDescribeServiceUpdatesPagesWithContext              sync.RWMutex
	lockelasticacheClientMockDescribeServiceUpdatesRequest                       sync.RWMutex
	lockelasticacheClientMockDescribeServiceUpdatesWithContext                   sync.RWMutex
	lockelasticacheClientMockDescribeSnapshots                                   sync.RWMutex
	lockelasticacheClientMockDescribeSnapshotsPages                              sync.RWMutex
	lockelasticacheClientMockDescribeSnapshotsPagesWithContext                   sync.RWMutex
	lockelasticacheClientMockDescribeSnapshotsRequest                            sync.RWMutex
	lockelasticacheClientMockDescribeSnapshotsWithContext                        sync.RWMutex
	lockelasticacheClientMockDescribeUpdateActions                               sync.RWMutex
	lockelasticacheClientMockDescribeUpdateActionsPages                          sync.RWMutex
	lockelasticacheClientMockDescribeUpdateActionsPagesWithContext               sync.RWMutex
	lockelasticacheClientMockDescribeUpdateActionsRequest                        sync.RWMutex
	lockelasticacheClientMockDescribeUpdateActionsWithContext                    sync.RWMutex
	lockelasticacheClientMockIncreaseReplicaCount                                sync.RWMutex
	lockelasticacheClientMockIncreaseReplicaCountRequest                         sync.RWMutex
	lockelasticacheClientMockIncreaseReplicaCountWithContext                     sync.RWMutex
	lockelasticacheClientMockListAllowedNodeTypeModifications                    sync.RWMutex
	lockelasticacheClientMockListAllowedNodeTypeModificationsRequest             sync.RWMutex
	lockelasticacheClientMockListAllowedNodeTypeModificationsWithContext         sync.RWMutex
	lockelasticacheClientMockListTagsForResource                                 sync.RWMutex
	lockelasticacheClientMockListTagsForResourceRequest                          sync.RWMutex
	lockelasticacheClientMockListTagsForResourceWithContext                      sync.RWMutex
	lockelasticacheClientMockModifyCacheCluster                                  sync.RWMutex
	lockelasticacheClientMockModifyCacheClusterRequest                           sync.RWMutex
	lockelasticacheClientMockModifyCacheClusterWithContext                       sync.RWMutex
	lockelasticacheClientMockModifyCacheParameterGroup                           sync.RWMutex
	lockelasticacheClientMockModifyCacheParameterGroupRequest                    sync.RWMutex
	lockelasticacheClientMockModifyCacheParameterGroupWithContext                sync.RWMutex
	lockelasticacheClientMockModifyCacheSubnetGroup                              sync.RWMutex
	lockelasticacheClientMockModifyCacheSubnetGroupRequest                       sync.RWMutex
	lockelasticacheClientMockModifyCacheSubnetGroupWithContext                   sync.RWMutex
	lockelasticacheClientMockModifyReplicationGroup                              sync.RWMutex
	lockelasticacheClientMockModifyReplicationGroupRequest                       sync.RWMutex
	lockelasticacheClientMockModifyReplicationGroupShardConfiguration            sync.RWMutex
	lockelasticacheClientMockModifyReplicationGroupShardConfigurationRequest     sync.RWMutex
	lockelasticacheClientMockModifyReplicationGroupShardConfigurationWithContext sync.RWMutex
	lockelasticacheClientMockModifyReplicationGroupWithContext                   sync.RWMutex
	lockelasticacheClientMockPurchaseReservedCacheNodesOffering                  sync.RWMutex
	lockelasticacheClientMockPurchaseReservedCacheNodesOfferingRequest           sync.RWMutex
	lockelasticacheClientMockPurchaseReservedCacheNodesOfferingWithContext       sync.RWMutex
	lockelasticacheClientMockRebootCacheCluster                                  sync.RWMutex
	lockelasticacheClientMockRebootCacheClusterRequest                           sync.RWMutex
	lockelasticacheClientMockRebootCacheClusterWithContext                       sync.RWMutex
	lockelasticacheClientMockRemoveTagsFromResource                              sync.RWMutex
	lockelasticacheClientMockRemoveTagsFromResourceRequest                       sync.RWMutex
	lockelasticacheClientMockRemoveTagsFromResourceWithContext                   sync.RWMutex
	lockelasticacheClientMockResetCacheParameterGroup                            sync.RWMutex
	lockelasticacheClientMockResetCacheParameterGroupRequest                     sync.RWMutex
	lockelasticacheClientMockResetCacheParameterGroupWithContext                 sync.RWMutex
	lockelasticacheClientMockRevokeCacheSecurityGroupIngress                     sync.RWMutex
	lockelasticacheClientMockRevokeCacheSecurityGroupIngressRequest              sync.RWMutex
	lockelasticacheClientMockRevokeCacheSecurityGroupIngressWithContext          sync.RWMutex
	lockelasticacheClientMockStartMigration                                      sync.RWMutex
	lockelasticacheClientMockStartMigrationRequest                               sync.RWMutex
	lockelasticacheClientMockStartMigrationWithContext                           sync.RWMutex
	lockelasticacheClientMockTestFailover                                        sync.RWMutex
	lockelasticacheClientMockTestFailoverRequest                                 sync.RWMutex
	lockelasticacheClientMockTestFailoverWithContext                             sync.RWMutex
	lockelasticacheClientMockWaitUntilCacheClusterAvailable                      sync.RWMutex
	lockelasticacheClientMockWaitUntilCacheClusterAvailableWithContext           sync.RWMutex
	lockelasticacheClientMockWaitUntilCacheClusterDeleted                        sync.RWMutex
	lockelasticacheClientMockWaitUntilCacheClusterDeletedWithContext             sync.RWMutex
	lockelasticacheClientMockWaitUntilReplicationGroupAvailable                  sync.RWMutex
	lockelasticacheClientMockWaitUntilReplicationGroupAvailableWithContext       sync.RWMutex
	lockelasticacheClientMockWaitUntilReplicationGroupDeleted                    sync.RWMutex
	lockelasticacheClientMockWaitUntilReplicationGroupDeletedWithContext         sync.RWMutex
)

// Ensure, that elasticacheClientMock does implement elasticacheClient.
// If this is not the case, regenerate this file with moq.
var _ elasticacheClient = &elasticacheClientMock{}

// elasticacheClientMock is a mock implementation of elasticacheClient.
//
//     func TestSomethingThatUseselasticacheClient(t *testing.T) {
//
//         // make and configure a mocked elasticacheClient
//         mockedelasticacheClient := &elasticacheClientMock{
//             AddTagsToResourceFunc: func(in1 *elasticache.AddTagsToResourceInput) (*elasticache.TagListMessage, error) {
// 	               panic("mock out the AddTagsToResource method")
//             },
//             AddTagsToResourceRequestFunc: func(in1 *elasticache.AddTagsToResourceInput) (*request.Request, *elasticache.TagListMessage) {
// 	               panic("mock out the AddTagsToResourceRequest method")
//             },
//             AddTagsToResourceWithContextFunc: func(in1 context.Context, in2 *elasticache.AddTagsToResourceInput, in3 ...request.Option) (*elasticache.TagListMessage, error) {
// 	               panic("mock out the AddTagsToResourceWithContext method")
//             },
//             AuthorizeCacheSecurityGroupIngressFunc: func(in1 *elasticache.AuthorizeCacheSecurityGroupIngressInput) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error) {
// 	               panic("mock out the AuthorizeCacheSecurityGroupIngress method")
//             },
//             AuthorizeCacheSecurityGroupIngressRequestFunc: func(in1 *elasticache.AuthorizeCacheSecurityGroupIngressInput) (*request.Request, *elasticache.AuthorizeCacheSecurityGroupIngressOutput) {
// 	               panic("mock out the AuthorizeCacheSecurityGroupIngressRequest method")
//             },
//             AuthorizeCacheSecurityGroupIngressWithContextFunc: func(in1 context.Context, in2 *elasticache.AuthorizeCacheSecurityGroupIngressInput, in3 ...request.Option) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error) {
// 	               panic("mock out the AuthorizeCacheSecurityGroupIngressWithContext method")
//             },
//             BatchApplyUpdateActionFunc: func(in1 *elasticache.BatchApplyUpdateActionInput) (*elasticache.BatchApplyUpdateActionOutput, error) {
// 	               panic("mock out the BatchApplyUpdateAction method")
//             },
//             BatchApplyUpdateActionRequestFunc: func(in1 *elasticache.BatchApplyUpdateActionInput) (*request.Request, *elasticache.BatchApplyUpdateActionOutput) {
// 	               panic("mock out the BatchApplyUpdateActionRequest method")
//             },
//             BatchApplyUpdateActionWithContextFunc: func(in1 context.Context, in2 *elasticache.BatchApplyUpdateActionInput, in3 ...request.Option) (*elasticache.BatchApplyUpdateActionOutput, error) {
// 	               panic("mock out the BatchApplyUpdateActionWithContext method")
//             },
//             BatchStopUpdateActionFunc: func(in1 *elasticache.BatchStopUpdateActionInput) (*elasticache.BatchStopUpdateActionOutput, error) {
// 	               panic("mock out the BatchStopUpdateAction method")
//             },
//             BatchStopUpdateActionRequestFunc: func(in1 *elasticache.BatchStopUpdateActionInput) (*request.Request, *elasticache.BatchStopUpdateActionOutput) {
// 	               panic("mock out the BatchStopUpdateActionRequest method")
//             },
//             BatchStopUpdateActionWithContextFunc: func(in1 context.Context, in2 *elasticache.BatchStopUpdateActionInput, in3 ...request.Option) (*elasticache.BatchStopUpdateActionOutput, error) {
// 	               panic("mock out the BatchStopUpdateActionWithContext method")
//             },
//             CompleteMigrationFunc: func(in1 *elasticache.CompleteMigrationInput) (*elasticache.CompleteMigrationOutput, error) {
// 	               panic("mock out the CompleteMigration method")
//             },
//             CompleteMigrationRequestFunc: func(in1 *elasticache.CompleteMigrationInput) (*request.Request, *elasticache.CompleteMigrationOutput) {
// 	               panic("mock out the CompleteMigrationRequest method")
//             },
//             CompleteMigrationWithContextFunc: func(in1 context.Context, in2 *elasticache.CompleteMigrationInput, in3 ...request.Option) (*elasticache.CompleteMigrationOutput, error) {
// 	               panic("mock out the CompleteMigrationWithContext method")
//             },
//             CopySnapshotFunc: func(in1 *elasticache.CopySnapshotInput) (*elasticache.CopySnapshotOutput, error) {
// 	               panic("mock out the CopySnapshot method")
//             },
//             CopySnapshotRequestFunc: func(in1 *elasticache.CopySnapshotInput) (*request.Request, *elasticache.CopySnapshotOutput) {
// 	               panic("mock out the CopySnapshotRequest method")
//             },
//             CopySnapshotWithContextFunc: func(in1 context.Context, in2 *elasticache.CopySnapshotInput, in3 ...request.Option) (*elasticache.CopySnapshotOutput, error) {
// 	               panic("mock out the CopySnapshotWithContext method")
//             },
//             CreateCacheClusterFunc: func(in1 *elasticache.CreateCacheClusterInput) (*elasticache.CreateCacheClusterOutput, error) {
// 	               panic("mock out the CreateCacheCluster method")
//             },
//             CreateCacheClusterRequestFunc: func(in1 *elasticache.CreateCacheClusterInput) (*request.Request, *elasticache.CreateCacheClusterOutput) {
// 	               panic("mock out the CreateCacheClusterRequest method")
//             },
//             CreateCacheClusterWithContextFunc: func(in1 context.Context, in2 *elasticache.CreateCacheClusterInput, in3 ...request.Option) (*elasticache.CreateCacheClusterOutput, error) {
// 	               panic("mock out the CreateCacheClusterWithContext method")
//             },
//             CreateCacheParameterGroupFunc: func(in1 *elasticache.CreateCacheParameterGroupInput) (*elasticache.CreateCacheParameterGroupOutput, error) {
// 	               panic("mock out the CreateCacheParameterGroup method")
//             },
//             CreateCacheParameterGroupRequestFunc: func(in1 *elasticache.CreateCacheParameterGroupInput) (*request.Request, *elasticache.CreateCacheParameterGroupOutput) {
// 	               panic("mock out the CreateCacheParameterGroupRequest method")
//             },
//             CreateCacheParameterGroupWithContextFunc: func(in1 context.Context, in2 *elasticache.CreateCacheParameterGroupInput, in3 ...request.Option) (*elasticache.CreateCacheParameterGroupOutput, error) {
// 	               panic("mock out the CreateCacheParameterGroupWithContext method")
//             },
//             CreateCacheSecurityGroupFunc: func(in1 *elasticache.CreateCacheSecurityGroupInput) (*elasticache.CreateCacheSecurityGroupOutput, error) {
// 	               panic("mock out the CreateCacheSecurityGroup method")
//             },
//             CreateCacheSecurityGroupRequestFunc: func(in1 *elasticache.CreateCacheSecurityGroupInput) (*request.Request, *elasticache.CreateCacheSecurityGroupOutput) {
// 	               panic("mock out the CreateCacheSecurityGroupRequest method")
//             },
//             CreateCacheSecurityGroupWithContextFunc: func(in1 context.Context, in2 *elasticache.CreateCacheSecurityGroupInput, in3 ...request.Option) (*elasticache.CreateCacheSecurityGroupOutput, error) {
// 	               panic("mock out the CreateCacheSecurityGroupWithContext method")
//             },
//             CreateCacheSubnetGroupFunc: func(in1 *elasticache.CreateCacheSubnetGroupInput) (*elasticache.CreateCacheSubnetGroupOutput, error) {
// 	               panic("mock out the CreateCacheSubnetGroup method")
//             },
//             CreateCacheSubnetGroupRequestFunc: func(in1 *elasticache.CreateCacheSubnetGroupInput) (*request.Request, *elasticache.CreateCacheSubnetGroupOutput) {
// 	               panic("mock out the CreateCacheSubnetGroupRequest method")
//             },
//             CreateCacheSubnetGroupWithContextFunc: func(in1 context.Context, in2 *elasticache.CreateCacheSubnetGroupInput, in3 ...request.Option) (*elasticache.CreateCacheSubnetGroupOutput, error) {
// 	               panic("mock out the CreateCacheSubnetGroupWithContext method")
//             },
//             CreateReplicationGroupFunc: func(in1 *elasticache.CreateReplicationGroupInput) (*elasticache.CreateReplicationGroupOutput, error) {
// 	               panic("mock out the CreateReplicationGroup method")
//             },
//             CreateReplicationGroupRequestFunc: func(in1 *elasticache.CreateReplicationGroupInput) (*request.Request, *elasticache.CreateReplicationGroupOutput) {
// 	               panic("mock out the CreateReplicationGroupRequest method")
//             },
//             CreateReplicationGroupWithContextFunc: func(in1 context.Context, in2 *elasticache.CreateReplicationGroupInput, in3 ...request.Option) (*elasticache.CreateReplicationGroupOutput, error) {
// 	               panic("mock out the CreateReplicationGroupWithContext method")
//             },
//             CreateSnapshotFunc: func(in1 *elasticache.CreateSnapshotInput) (*elasticache.CreateSnapshotOutput, error) {
// 	               panic("mock out the CreateSnapshot method")
//             },
//             CreateSnapshotRequestFunc: func(in1 *elasticache.CreateSnapshotInput) (*request.Request, *elasticache.CreateSnapshotOutput) {
// 	               panic("mock out the CreateSnapshotRequest method")
//             },
//             CreateSnapshotWithContextFunc: func(in1 context.Context, in2 *elasticache.CreateSnapshotInput, in3 ...request.Option) (*elasticache.CreateSnapshotOutput, error) {
// 	               panic("mock out the CreateSnapshotWithContext method")
//             },
//             DecreaseReplicaCountFunc: func(in1 *elasticache.DecreaseReplicaCountInput) (*elasticache.DecreaseReplicaCountOutput, error) {
// 	               panic("mock out the DecreaseReplicaCount method")
//             },
//             DecreaseReplicaCountRequestFunc: func(in1 *elasticache.DecreaseReplicaCountInput) (*request.Request, *elasticache.DecreaseReplicaCountOutput) {
// 	               panic("mock out the DecreaseReplicaCountRequest method")
//             },
//             DecreaseReplicaCountWithContextFunc: func(in1 context.Context, in2 *elasticache.DecreaseReplicaCountInput, in3 ...request.Option) (*elasticache.DecreaseReplicaCountOutput, error) {
// 	               panic("mock out the DecreaseReplicaCountWithContext method")
//             },
//             DeleteCacheClusterFunc: func(in1 *elasticache.DeleteCacheClusterInput) (*elasticache.DeleteCacheClusterOutput, error) {
// 	               panic("mock out the DeleteCacheCluster method")
//             },
//             DeleteCacheClusterRequestFunc: func(in1 *elasticache.DeleteCacheClusterInput) (*request.Request, *elasticache.DeleteCacheClusterOutput) {
// 	               panic("mock out the DeleteCacheClusterRequest method")
//             },
//             DeleteCacheClusterWithContextFunc: func(in1 context.Context, in2 *elasticache.DeleteCacheClusterInput, in3 ...request.Option) (*elasticache.DeleteCacheClusterOutput, error) {
// 	               panic("mock out the DeleteCacheClusterWithContext method")
//             },
//             DeleteCacheParameterGroupFunc: func(in1 *elasticache.DeleteCacheParameterGroupInput) (*elasticache.DeleteCacheParameterGroupOutput, error) {
// 	               panic("mock out the DeleteCacheParameterGroup method")
//             },
//             DeleteCacheParameterGroupRequestFunc: func(in1 *elasticache.DeleteCacheParameterGroupInput) (*request.Request, *elasticache.DeleteCacheParameterGroupOutput) {
// 	               panic("mock out the DeleteCacheParameterGroupRequest method")
//             },
//             DeleteCacheParameterGroupWithContextFunc: func(in1 context.Context, in2 *elasticache.DeleteCacheParameterGroupInput, in3 ...request.Option) (*elasticache.DeleteCacheParameterGroupOutput, error) {
// 	               panic("mock out the DeleteCacheParameterGroupWithContext method")
//             },
//             DeleteCacheSecurityGroupFunc: func(in1 *elasticache.DeleteCacheSecurityGroupInput) (*elasticache.DeleteCacheSecurityGroupOutput, error) {
// 	               panic("mock out the DeleteCacheSecurityGroup method")
//             },
//             DeleteCacheSecurityGroupRequestFunc: func(in1 *elasticache.DeleteCacheSecurityGroupInput) (*request.Request, *elasticache.DeleteCacheSecurityGroupOutput) {
// 	               panic("mock out the DeleteCacheSecurityGroupRequest method")
//             },
//             DeleteCacheSecurityGroupWithContextFunc: func(in1 context.Context, in2 *elasticache.DeleteCacheSecurityGroupInput, in3 ...request.Option) (*elasticache.DeleteCacheSecurityGroupOutput, error) {
// 	               panic("mock out the DeleteCacheSecurityGroupWithContext method")
//             },
//             DeleteCacheSubnetGroupFunc: func(in1 *elasticache.DeleteCacheSubnetGroupInput) (*elasticache.DeleteCacheSubnetGroupOutput, error) {
// 	               panic("mock out the DeleteCacheSubnetGroup method")
//             },
//             DeleteCacheSubnetGroupRequestFunc: func(in1 *elasticache.DeleteCacheSubnetGroupInput) (*request.Request, *elasticache.DeleteCacheSubnetGroupOutput) {
// 	               panic("mock out the DeleteCacheSubnetGroupRequest method")
//             },
//             DeleteCacheSubnetGroupWithContextFunc: func(in1 context.Context, in2 *elasticache.DeleteCacheSubnetGroupInput, in3 ...request.Option) (*elasticache.DeleteCacheSubnetGroupOutput, error) {
// 	               panic("mock out the DeleteCacheSubnetGroupWithContext method")
//             },
//             DeleteReplicationGroupFunc: func(in1 *elasticache.DeleteReplicationGroupInput) (*elasticache.DeleteReplicationGroupOutput, error) {
// 	               panic("mock out the DeleteReplicationGroup method")
//             },
//             DeleteReplicationGroupRequestFunc: func(in1 *elasticache.DeleteReplicationGroupInput) (*request.Request, *elasticache.DeleteReplicationGroupOutput) {
// 	               panic("mock out the DeleteReplicationGroupRequest method")
//             },
//             DeleteReplicationGroupWithContextFunc: func(in1 context.Context, in2 *elasticache.DeleteReplicationGroupInput, in3 ...request.Option) (*elasticache.DeleteReplicationGroupOutput, error) {
// 	               panic("mock out the DeleteReplicationGroupWithContext method")
//             },
//             DeleteSnapshotFunc: func(in1 *elasticache.DeleteSnapshotInput) (*elasticache.DeleteSnapshotOutput, error) {
// 	               panic("mock out the DeleteSnapshot method")
//             },
//             DeleteSnapshotRequestFunc: func(in1 *elasticache.DeleteSnapshotInput) (*request.Request, *elasticache.DeleteSnapshotOutput) {
// 	               panic("mock out the DeleteSnapshotRequest method")
//             },
//             DeleteSnapshotWithContextFunc: func(in1 context.Context, in2 *elasticache.DeleteSnapshotInput, in3 ...request.Option) (*elasticache.DeleteSnapshotOutput, error) {
// 	               panic("mock out the DeleteSnapshotWithContext method")
//             },
//             DescribeCacheClustersFunc: func(in1 *elasticache.DescribeCacheClustersInput) (*elasticache.DescribeCacheClustersOutput, error) {
// 	               panic("mock out the DescribeCacheClusters method")
//             },
//             DescribeCacheClustersPagesFunc: func(in1 *elasticache.DescribeCacheClustersInput, in2 func(*elasticache.DescribeCacheClustersOutput, bool) bool) error {
// 	               panic("mock out the DescribeCacheClustersPages method")
//             },
//             DescribeCacheClustersPagesWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeCacheClustersInput, in3 func(*elasticache.DescribeCacheClustersOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeCacheClustersPagesWithContext method")
//             },
//             DescribeCacheClustersRequestFunc: func(in1 *elasticache.DescribeCacheClustersInput) (*request.Request, *elasticache.DescribeCacheClustersOutput) {
// 	               panic("mock out the DescribeCacheClustersRequest method")
//             },
//             DescribeCacheClustersWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeCacheClustersInput, in3 ...request.Option) (*elasticache.DescribeCacheClustersOutput, error) {
// 	               panic("mock out the DescribeCacheClustersWithContext method")
//             },
//             DescribeCacheEngineVersionsFunc: func(in1 *elasticache.DescribeCacheEngineVersionsInput) (*elasticache.DescribeCacheEngineVersionsOutput, error) {
// 	               panic("mock out the DescribeCacheEngineVersions method")
//             },
//             DescribeCacheEngineVersionsPagesFunc: func(in1 *elasticache.DescribeCacheEngineVersionsInput, in2 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool) error {
// 	               panic("mock out the DescribeCacheEngineVersionsPages method")
//             },
//             DescribeCacheEngineVersionsPagesWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeCacheEngineVersionsInput, in3 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeCacheEngineVersionsPagesWithContext method")
//             },
//             DescribeCacheEngineVersionsRequestFunc: func(in1 *elasticache.DescribeCacheEngineVersionsInput) (*request.Request, *elasticache.DescribeCacheEngineVersionsOutput) {
// 	               panic("mock out the DescribeCacheEngineVersionsRequest method")
//             },
//             DescribeCacheEngineVersionsWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeCacheEngineVersionsInput, in3 ...request.Option) (*elasticache.DescribeCacheEngineVersionsOutput, error) {
// 	               panic("mock out the DescribeCacheEngineVersionsWithContext method")
//             },
//             DescribeCacheParameterGroupsFunc: func(in1 *elasticache.DescribeCacheParameterGroupsInput) (*elasticache.DescribeCacheParameterGroupsOutput, error) {
// 	               panic("mock out the DescribeCacheParameterGroups method")
//             },
//             DescribeCacheParameterGroupsPagesFunc: func(in1 *elasticache.DescribeCacheParameterGroupsInput, in2 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool) error {
// 	               panic("mock out the DescribeCacheParameterGroupsPages method")
//             },
//             DescribeCacheParameterGroupsPagesWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeCacheParameterGroupsInput, in3 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeCacheParameterGroupsPagesWithContext method")
//             },
//             DescribeCacheParameterGroupsRequestFunc: func(in1 *elasticache.DescribeCacheParameterGroupsInput) (*request.Request, *elasticache.DescribeCacheParameterGroupsOutput) {
// 	               panic("mock out the DescribeCacheParameterGroupsRequest method")
//             },
//             DescribeCacheParameterGroupsWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeCacheParameterGroupsInput, in3 ...request.Option) (*elasticache.DescribeCacheParameterGroupsOutput, error) {
// 	               panic("mock out the DescribeCacheParameterGroupsWithContext method")
//             },
//             DescribeCacheParametersFunc: func(in1 *elasticache.DescribeCacheParametersInput) (*elasticache.DescribeCacheParametersOutput, error) {
// 	               panic("mock out the DescribeCacheParameters method")
//             },
//             DescribeCacheParametersPagesFunc: func(in1 *elasticache.DescribeCacheParametersInput, in2 func(*elasticache.DescribeCacheParametersOutput, bool) bool) error {
// 	               panic("mock out the DescribeCacheParametersPages method")
//             },
//             DescribeCacheParametersPagesWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeCacheParametersInput, in3 func(*elasticache.DescribeCacheParametersOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeCacheParametersPagesWithContext method")
//             },
//             DescribeCacheParametersRequestFunc: func(in1 *elasticache.DescribeCacheParametersInput) (*request.Request, *elasticache.DescribeCacheParametersOutput) {
// 	               panic("mock out the DescribeCacheParametersRequest method")
//             },
//             DescribeCacheParametersWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeCacheParametersInput, in3 ...request.Option) (*elasticache.DescribeCacheParametersOutput, error) {
// 	               panic("mock out the DescribeCacheParametersWithContext method")
//             },
//             DescribeCacheSecurityGroupsFunc: func(in1 *elasticache.DescribeCacheSecurityGroupsInput) (*elasticache.DescribeCacheSecurityGroupsOutput, error) {
// 	               panic("mock out the DescribeCacheSecurityGroups method")
//             },
//             DescribeCacheSecurityGroupsPagesFunc: func(in1 *elasticache.DescribeCacheSecurityGroupsInput, in2 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool) error {
// 	               panic("mock out the DescribeCacheSecurityGroupsPages method")
//             },
//             DescribeCacheSecurityGroupsPagesWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeCacheSecurityGroupsInput, in3 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeCacheSecurityGroupsPagesWithContext method")
//             },
//             DescribeCacheSecurityGroupsRequestFunc: func(in1 *elasticache.DescribeCacheSecurityGroupsInput) (*request.Request, *elasticache.DescribeCacheSecurityGroupsOutput) {
// 	               panic("mock out the DescribeCacheSecurityGroupsRequest method")
//             },
//             DescribeCacheSecurityGroupsWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeCacheSecurityGroupsInput, in3 ...request.Option) (*elasticache.DescribeCacheSecurityGroupsOutput, error) {
// 	               panic("mock out the DescribeCacheSecurityGroupsWithContext method")
//             },
//             DescribeCacheSubnetGroupsFunc: func(in1 *elasticache.DescribeCacheSubnetGroupsInput) (*elasticache.DescribeCacheSubnetGroupsOutput, error) {
// 	               panic("mock out the DescribeCacheSubnetGroups method")
//             },
//             DescribeCacheSubnetGroupsPagesFunc: func(in1 *elasticache.DescribeCacheSubnetGroupsInput, in2 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool) error {
// 	               panic("mock out the DescribeCacheSubnetGroupsPages method")
//             },
//             DescribeCacheSubnetGroupsPagesWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeCacheSubnetGroupsInput, in3 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeCacheSubnetGroupsPagesWithContext method")
//             },
//             DescribeCacheSubnetGroupsRequestFunc: func(in1 *elasticache.DescribeCacheSubnetGroupsInput) (*request.Request, *elasticache.DescribeCacheSubnetGroupsOutput) {
// 	               panic("mock out the DescribeCacheSubnetGroupsRequest method")
//             },
//             DescribeCacheSubnetGroupsWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeCacheSubnetGroupsInput, in3 ...request.Option) (*elasticache.DescribeCacheSubnetGroupsOutput, error) {
// 	               panic("mock out the DescribeCacheSubnetGroupsWithContext method")
//             },
//             DescribeEngineDefaultParametersFunc: func(in1 *elasticache.DescribeEngineDefaultParametersInput) (*elasticache.DescribeEngineDefaultParametersOutput, error) {
// 	               panic("mock out the DescribeEngineDefaultParameters method")
//             },
//             DescribeEngineDefaultParametersPagesFunc: func(in1 *elasticache.DescribeEngineDefaultParametersInput, in2 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool) error {
// 	               panic("mock out the DescribeEngineDefaultParametersPages method")
//             },
//             DescribeEngineDefaultParametersPagesWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeEngineDefaultParametersInput, in3 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeEngineDefaultParametersPagesWithContext method")
//             },
//             DescribeEngineDefaultParametersRequestFunc: func(in1 *elasticache.DescribeEngineDefaultParametersInput) (*request.Request, *elasticache.DescribeEngineDefaultParametersOutput) {
// 	               panic("mock out the DescribeEngineDefaultParametersRequest method")
//             },
//             DescribeEngineDefaultParametersWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeEngineDefaultParametersInput, in3 ...request.Option) (*elasticache.DescribeEngineDefaultParametersOutput, error) {
// 	               panic("mock out the DescribeEngineDefaultParametersWithContext method")
//             },
//             DescribeEventsFunc: func(in1 *elasticache.DescribeEventsInput) (*elasticache.DescribeEventsOutput, error) {
// 	               panic("mock out the DescribeEvents method")
//             },
//             DescribeEventsPagesFunc: func(in1 *elasticache.DescribeEventsInput, in2 func(*elasticache.DescribeEventsOutput, bool) bool) error {
// 	               panic("mock out the DescribeEventsPages method")
//             },
//             DescribeEventsPagesWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeEventsInput, in3 func(*elasticache.DescribeEventsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeEventsPagesWithContext method")
//             },
//             DescribeEventsRequestFunc: func(in1 *elasticache.DescribeEventsInput) (*request.Request, *elasticache.DescribeEventsOutput) {
// 	               panic("mock out the DescribeEventsRequest method")
//             },
//             DescribeEventsWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeEventsInput, in3 ...request.Option) (*elasticache.DescribeEventsOutput, error) {
// 	               panic("mock out the DescribeEventsWithContext method")
//             },
//             DescribeReplicationGroupsFunc: func(in1 *elasticache.DescribeReplicationGroupsInput) (*elasticache.DescribeReplicationGroupsOutput, error) {
// 	               panic("mock out the DescribeReplicationGroups method")
//             },
//             DescribeReplicationGroupsPagesFunc: func(in1 *elasticache.DescribeReplicationGroupsInput, in2 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool) error {
// 	               panic("mock out the DescribeReplicationGroupsPages method")
//             },
//             DescribeReplicationGroupsPagesWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeReplicationGroupsInput, in3 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeReplicationGroupsPagesWithContext method")
//             },
//             DescribeReplicationGroupsRequestFunc: func(in1 *elasticache.DescribeReplicationGroupsInput) (*request.Request, *elasticache.DescribeReplicationGroupsOutput) {
// 	               panic("mock out the DescribeReplicationGroupsRequest method")
//             },
//             DescribeReplicationGroupsWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeReplicationGroupsInput, in3 ...request.Option) (*elasticache.DescribeReplicationGroupsOutput, error) {
// 	               panic("mock out the DescribeReplicationGroupsWithContext method")
//             },
//             DescribeReservedCacheNodesFunc: func(in1 *elasticache.DescribeReservedCacheNodesInput) (*elasticache.DescribeReservedCacheNodesOutput, error) {
// 	               panic("mock out the DescribeReservedCacheNodes method")
//             },
//             DescribeReservedCacheNodesOfferingsFunc: func(in1 *elasticache.DescribeReservedCacheNodesOfferingsInput) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error) {
// 	               panic("mock out the DescribeReservedCacheNodesOfferings method")
//             },
//             DescribeReservedCacheNodesOfferingsPagesFunc: func(in1 *elasticache.DescribeReservedCacheNodesOfferingsInput, in2 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool) error {
// 	               panic("mock out the DescribeReservedCacheNodesOfferingsPages method")
//             },
//             DescribeReservedCacheNodesOfferingsPagesWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeReservedCacheNodesOfferingsInput, in3 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeReservedCacheNodesOfferingsPagesWithContext method")
//             },
//             DescribeReservedCacheNodesOfferingsRequestFunc: func(in1 *elasticache.DescribeReservedCacheNodesOfferingsInput) (*request.Request, *elasticache.DescribeReservedCacheNodesOfferingsOutput) {
// 	               panic("mock out the DescribeReservedCacheNodesOfferingsRequest method")
//             },
//             DescribeReservedCacheNodesOfferingsWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeReservedCacheNodesOfferingsInput, in3 ...request.Option) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error) {
// 	               panic("mock out the DescribeReservedCacheNodesOfferingsWithContext method")
//             },
//             DescribeReservedCacheNodesPagesFunc: func(in1 *elasticache.DescribeReservedCacheNodesInput, in2 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool) error {
// 	               panic("mock out the DescribeReservedCacheNodesPages method")
//             },
//             DescribeReservedCacheNodesPagesWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeReservedCacheNodesInput, in3 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeReservedCacheNodesPagesWithContext method")
//             },
//             DescribeReservedCacheNodesRequestFunc: func(in1 *elasticache.DescribeReservedCacheNodesInput) (*request.Request, *elasticache.DescribeReservedCacheNodesOutput) {
// 	               panic("mock out the DescribeReservedCacheNodesRequest method")
//             },
//             DescribeReservedCacheNodesWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeReservedCacheNodesInput, in3 ...request.Option) (*elasticache.DescribeReservedCacheNodesOutput, error) {
// 	               panic("mock out the DescribeReservedCacheNodesWithContext method")
//             },
//             DescribeServiceUpdatesFunc: func(in1 *elasticache.DescribeServiceUpdatesInput) (*elasticache.DescribeServiceUpdatesOutput, error) {
// 	               panic("mock out the DescribeServiceUpdates method")
//             },
//             DescribeServiceUpdatesPagesFunc: func(in1 *elasticache.DescribeServiceUpdatesInput, in2 func(*elasticache.DescribeServiceUpdatesOutput, bool) bool) error {
// 	               panic("mock out the DescribeServiceUpdatesPages method")
//             },
//             DescribeServiceUpdatesPagesWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeServiceUpdatesInput, in3 func(*elasticache.DescribeServiceUpdatesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeServiceUpdatesPagesWithContext method")
//             },
//             DescribeServiceUpdatesRequestFunc: func(in1 *elasticache.DescribeServiceUpdatesInput) (*request.Request, *elasticache.DescribeServiceUpdatesOutput) {
// 	               panic("mock out the DescribeServiceUpdatesRequest method")
//             },
//             DescribeServiceUpdatesWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeServiceUpdatesInput, in3 ...request.Option) (*elasticache.DescribeServiceUpdatesOutput, error) {
// 	               panic("mock out the DescribeServiceUpdatesWithContext method")
//             },
//             DescribeSnapshotsFunc: func(in1 *elasticache.DescribeSnapshotsInput) (*elasticache.DescribeSnapshotsOutput, error) {
// 	               panic("mock out the DescribeSnapshots method")
//             },
//             DescribeSnapshotsPagesFunc: func(in1 *elasticache.DescribeSnapshotsInput, in2 func(*elasticache.DescribeSnapshotsOutput, bool) bool) error {
// 	               panic("mock out the DescribeSnapshotsPages method")
//             },
//             DescribeSnapshotsPagesWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeSnapshotsInput, in3 func(*elasticache.DescribeSnapshotsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeSnapshotsPagesWithContext method")
//             },
//             DescribeSnapshotsRequestFunc: func(in1 *elasticache.DescribeSnapshotsInput) (*request.Request, *elasticache.DescribeSnapshotsOutput) {
// 	               panic("mock out the DescribeSnapshotsRequest method")
//             },
//             DescribeSnapshotsWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeSnapshotsInput, in3 ...request.Option) (*elasticache.DescribeSnapshotsOutput, error) {
// 	               panic("mock out the DescribeSnapshotsWithContext method")
//             },
//             DescribeUpdateActionsFunc: func(in1 *elasticache.DescribeUpdateActionsInput) (*elasticache.DescribeUpdateActionsOutput, error) {
// 	               panic("mock out the DescribeUpdateActions method")
//             },
//             DescribeUpdateActionsPagesFunc: func(in1 *elasticache.DescribeUpdateActionsInput, in2 func(*elasticache.DescribeUpdateActionsOutput, bool) bool) error {
// 	               panic("mock out the DescribeUpdateActionsPages method")
//             },
//             DescribeUpdateActionsPagesWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeUpdateActionsInput, in3 func(*elasticache.DescribeUpdateActionsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeUpdateActionsPagesWithContext method")
//             },
//             DescribeUpdateActionsRequestFunc: func(in1 *elasticache.DescribeUpdateActionsInput) (*request.Request, *elasticache.DescribeUpdateActionsOutput) {
// 	               panic("mock out the DescribeUpdateActionsRequest method")
//             },
//             DescribeUpdateActionsWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeUpdateActionsInput, in3 ...request.Option) (*elasticache.DescribeUpdateActionsOutput, error) {
// 	               panic("mock out the DescribeUpdateActionsWithContext method")
//             },
//             IncreaseReplicaCountFunc: func(in1 *elasticache.IncreaseReplicaCountInput) (*elasticache.IncreaseReplicaCountOutput, error) {
// 	               panic("mock out the IncreaseReplicaCount method")
//             },
//             IncreaseReplicaCountRequestFunc: func(in1 *elasticache.IncreaseReplicaCountInput) (*request.Request, *elasticache.IncreaseReplicaCountOutput) {
// 	               panic("mock out the IncreaseReplicaCountRequest method")
//             },
//             IncreaseReplicaCountWithContextFunc: func(in1 context.Context, in2 *elasticache.IncreaseReplicaCountInput, in3 ...request.Option) (*elasticache.IncreaseReplicaCountOutput, error) {
// 	               panic("mock out the IncreaseReplicaCountWithContext method")
//             },
//             ListAllowedNodeTypeModificationsFunc: func(in1 *elasticache.ListAllowedNodeTypeModificationsInput) (*elasticache.ListAllowedNodeTypeModificationsOutput, error) {
// 	               panic("mock out the ListAllowedNodeTypeModifications method")
//             },
//             ListAllowedNodeTypeModificationsRequestFunc: func(in1 *elasticache.ListAllowedNodeTypeModificationsInput) (*request.Request, *elasticache.ListAllowedNodeTypeModificationsOutput) {
// 	               panic("mock out the ListAllowedNodeTypeModificationsRequest method")
//             },
//             ListAllowedNodeTypeModificationsWithContextFunc: func(in1 context.Context, in2 *elasticache.ListAllowedNodeTypeModificationsInput, in3 ...request.Option) (*elasticache.ListAllowedNodeTypeModificationsOutput, error) {
// 	               panic("mock out the ListAllowedNodeTypeModificationsWithContext method")
//             },
//             ListTagsForResourceFunc: func(in1 *elasticache.ListTagsForResourceInput) (*elasticache.TagListMessage, error) {
// 	               panic("mock out the ListTagsForResource method")
//             },
//             ListTagsForResourceRequestFunc: func(in1 *elasticache.ListTagsForResourceInput) (*request.Request, *elasticache.TagListMessage) {
// 	               panic("mock out the ListTagsForResourceRequest method")
//             },
//             ListTagsForResourceWithContextFunc: func(in1 context.Context, in2 *elasticache.ListTagsForResourceInput, in3 ...request.Option) (*elasticache.TagListMessage, error) {
// 	               panic("mock out the ListTagsForResourceWithContext method")
//             },
//             ModifyCacheClusterFunc: func(in1 *elasticache.ModifyCacheClusterInput) (*elasticache.ModifyCacheClusterOutput, error) {
// 	               panic("mock out the ModifyCacheCluster method")
//             },
//             ModifyCacheClusterRequestFunc: func(in1 *elasticache.ModifyCacheClusterInput) (*request.Request, *elasticache.ModifyCacheClusterOutput) {
// 	               panic("mock out the ModifyCacheClusterRequest method")
//             },
//             ModifyCacheClusterWithContextFunc: func(in1 context.Context, in2 *elasticache.ModifyCacheClusterInput, in3 ...request.Option) (*elasticache.ModifyCacheClusterOutput, error) {
// 	               panic("mock out the ModifyCacheClusterWithContext method")
//             },
//             ModifyCacheParameterGroupFunc: func(in1 *elasticache.ModifyCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error) {
// 	               panic("mock out the ModifyCacheParameterGroup method")
//             },
//             ModifyCacheParameterGroupRequestFunc: func(in1 *elasticache.ModifyCacheParameterGroupInput) (*request.Request, *elasticache.CacheParameterGroupNameMessage) {
// 	               panic("mock out the ModifyCacheParameterGroupRequest method")
//             },
//             ModifyCacheParameterGroupWithContextFunc: func(in1 context.Context, in2 *elasticache.ModifyCacheParameterGroupInput, in3 ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error) {
// 	               panic("mock out the ModifyCacheParameterGroupWithContext method")
//             },
//             ModifyCacheSubnetGroupFunc: func(in1 *elasticache.ModifyCacheSubnetGroupInput) (*elasticache.ModifyCacheSubnetGroupOutput, error) {
// 	               panic("mock out the ModifyCacheSubnetGroup method")
//             },
//             ModifyCacheSubnetGroupRequestFunc: func(in1 *elasticache.ModifyCacheSubnetGroupInput) (*request.Request, *elasticache.ModifyCacheSubnetGroupOutput) {
// 	               panic("mock out the ModifyCacheSubnetGroupRequest method")
//             },
//             ModifyCacheSubnetGroupWithContextFunc: func(in1 context.Context, in2 *elasticache.ModifyCacheSubnetGroupInput, in3 ...request.Option) (*elasticache.ModifyCacheSubnetGroupOutput, error) {
// 	               panic("mock out the ModifyCacheSubnetGroupWithContext method")
//             },
//             ModifyReplicationGroupFunc: func(in1 *elasticache.ModifyReplicationGroupInput) (*elasticache.ModifyReplicationGroupOutput, error) {
// 	               panic("mock out the ModifyReplicationGroup method")
//             },
//             ModifyReplicationGroupRequestFunc: func(in1 *elasticache.ModifyReplicationGroupInput) (*request.Request, *elasticache.ModifyReplicationGroupOutput) {
// 	               panic("mock out the ModifyReplicationGroupRequest method")
//             },
//             ModifyReplicationGroupShardConfigurationFunc: func(in1 *elasticache.ModifyReplicationGroupShardConfigurationInput) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error) {
// 	               panic("mock out the ModifyReplicationGroupShardConfiguration method")
//             },
//             ModifyReplicationGroupShardConfigurationRequestFunc: func(in1 *elasticache.ModifyReplicationGroupShardConfigurationInput) (*request.Request, *elasticache.ModifyReplicationGroupShardConfigurationOutput) {
// 	               panic("mock out the ModifyReplicationGroupShardConfigurationRequest method")
//             },
//             ModifyReplicationGroupShardConfigurationWithContextFunc: func(in1 context.Context, in2 *elasticache.ModifyReplicationGroupShardConfigurationInput, in3 ...request.Option) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error) {
// 	               panic("mock out the ModifyReplicationGroupShardConfigurationWithContext method")
//             },
//             ModifyReplicationGroupWithContextFunc: func(in1 context.Context, in2 *elasticache.ModifyReplicationGroupInput, in3 ...request.Option) (*elasticache.ModifyReplicationGroupOutput, error) {
// 	               panic("mock out the ModifyReplicationGroupWithContext method")
//             },
//             PurchaseReservedCacheNodesOfferingFunc: func(in1 *elasticache.PurchaseReservedCacheNodesOfferingInput) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error) {
// 	               panic("mock out the PurchaseReservedCacheNodesOffering method")
//             },
//             PurchaseReservedCacheNodesOfferingRequestFunc: func(in1 *elasticache.PurchaseReservedCacheNodesOfferingInput) (*request.Request, *elasticache.PurchaseReservedCacheNodesOfferingOutput) {
// 	               panic("mock out the PurchaseReservedCacheNodesOfferingRequest method")
//             },
//             PurchaseReservedCacheNodesOfferingWithContextFunc: func(in1 context.Context, in2 *elasticache.PurchaseReservedCacheNodesOfferingInput, in3 ...request.Option) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error) {
// 	               panic("mock out the PurchaseReservedCacheNodesOfferingWithContext method")
//             },
//             RebootCacheClusterFunc: func(in1 *elasticache.RebootCacheClusterInput) (*elasticache.RebootCacheClusterOutput, error) {
// 	               panic("mock out the RebootCacheCluster method")
//             },
//             RebootCacheClusterRequestFunc: func(in1 *elasticache.RebootCacheClusterInput) (*request.Request, *elasticache.RebootCacheClusterOutput) {
// 	               panic("mock out the RebootCacheClusterRequest method")
//             },
//             RebootCacheClusterWithContextFunc: func(in1 context.Context, in2 *elasticache.RebootCacheClusterInput, in3 ...request.Option) (*elasticache.RebootCacheClusterOutput, error) {
// 	               panic("mock out the RebootCacheClusterWithContext method")
//             },
//             RemoveTagsFromResourceFunc: func(in1 *elasticache.RemoveTagsFromResourceInput) (*elasticache.TagListMessage, error) {
// 	               panic("mock out the RemoveTagsFromResource method")
//             },
//             RemoveTagsFromResourceRequestFunc: func(in1 *elasticache.RemoveTagsFromResourceInput) (*request.Request, *elasticache.TagListMessage) {
// 	               panic("mock out the RemoveTagsFromResourceRequest method")
//             },
//             RemoveTagsFromResourceWithContextFunc: func(in1 context.Context, in2 *elasticache.RemoveTagsFromResourceInput, in3 ...request.Option) (*elasticache.TagListMessage, error) {
// 	               panic("mock out the RemoveTagsFromResourceWithContext method")
//             },
//             ResetCacheParameterGroupFunc: func(in1 *elasticache.ResetCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error) {
// 	               panic("mock out the ResetCacheParameterGroup method")
//             },
//             ResetCacheParameterGroupRequestFunc: func(in1 *elasticache.ResetCacheParameterGroupInput) (*request.Request, *elasticache.CacheParameterGroupNameMessage) {
// 	               panic("mock out the ResetCacheParameterGroupRequest method")
//             },
//             ResetCacheParameterGroupWithContextFunc: func(in1 context.Context, in2 *elasticache.ResetCacheParameterGroupInput, in3 ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error) {
// 	               panic("mock out the ResetCacheParameterGroupWithContext method")
//             },
//             RevokeCacheSecurityGroupIngressFunc: func(in1 *elasticache.RevokeCacheSecurityGroupIngressInput) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error) {
// 	               panic("mock out the RevokeCacheSecurityGroupIngress method")
//             },
//             RevokeCacheSecurityGroupIngressRequestFunc: func(in1 *elasticache.RevokeCacheSecurityGroupIngressInput) (*request.Request, *elasticache.RevokeCacheSecurityGroupIngressOutput) {
// 	               panic("mock out the RevokeCacheSecurityGroupIngressRequest method")
//             },
//             RevokeCacheSecurityGroupIngressWithContextFunc: func(in1 context.Context, in2 *elasticache.RevokeCacheSecurityGroupIngressInput, in3 ...request.Option) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error) {
// 	               panic("mock out the RevokeCacheSecurityGroupIngressWithContext method")
//             },
//             StartMigrationFunc: func(in1 *elasticache.StartMigrationInput) (*elasticache.StartMigrationOutput, error) {
// 	               panic("mock out the StartMigration method")
//             },
//             StartMigrationRequestFunc: func(in1 *elasticache.StartMigrationInput) (*request.Request, *elasticache.StartMigrationOutput) {
// 	               panic("mock out the StartMigrationRequest method")
//             },
//             StartMigrationWithContextFunc: func(in1 context.Context, in2 *elasticache.StartMigrationInput, in3 ...request.Option) (*elasticache.StartMigrationOutput, error) {
// 	               panic("mock out the StartMigrationWithContext method")
//             },
//             TestFailoverFunc: func(in1 *elasticache.TestFailoverInput) (*elasticache.TestFailoverOutput, error) {
// 	               panic("mock out the TestFailover method")
//             },
//             TestFailoverRequestFunc: func(in1 *elasticache.TestFailoverInput) (*request.Request, *elasticache.TestFailoverOutput) {
// 	               panic("mock out the TestFailoverRequest method")
//             },
//             TestFailoverWithContextFunc: func(in1 context.Context, in2 *elasticache.TestFailoverInput, in3 ...request.Option) (*elasticache.TestFailoverOutput, error) {
// 	               panic("mock out the TestFailoverWithContext method")
//             },
//             WaitUntilCacheClusterAvailableFunc: func(in1 *elasticache.DescribeCacheClustersInput) error {
// 	               panic("mock out the WaitUntilCacheClusterAvailable method")
//             },
//             WaitUntilCacheClusterAvailableWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeCacheClustersInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilCacheClusterAvailableWithContext method")
//             },
//             WaitUntilCacheClusterDeletedFunc: func(in1 *elasticache.DescribeCacheClustersInput) error {
// 	               panic("mock out the WaitUntilCacheClusterDeleted method")
//             },
//             WaitUntilCacheClusterDeletedWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeCacheClustersInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilCacheClusterDeletedWithContext method")
//             },
//             WaitUntilReplicationGroupAvailableFunc: func(in1 *elasticache.DescribeReplicationGroupsInput) error {
// 	               panic("mock out the WaitUntilReplicationGroupAvailable method")
//             },
//             WaitUntilReplicationGroupAvailableWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeReplicationGroupsInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilReplicationGroupAvailableWithContext method")
//             },
//             WaitUntilReplicationGroupDeletedFunc: func(in1 *elasticache.DescribeReplicationGroupsInput) error {
// 	               panic("mock out the WaitUntilReplicationGroupDeleted method")
//             },
//             WaitUntilReplicationGroupDeletedWithContextFunc: func(in1 context.Context, in2 *elasticache.DescribeReplicationGroupsInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilReplicationGroupDeletedWithContext method")
//             },
//         }
//
//         // use mockedelasticacheClient in code that requires elasticacheClient
//         // and then make assertions.
//
//     }
type elasticacheClientMock struct {
	// AddTagsToResourceFunc mocks the AddTagsToResource method.
	AddTagsToResourceFunc func(in1 *elasticache.AddTagsToResourceInput) (*elasticache.TagListMessage, error)

	// AddTagsToResourceRequestFunc mocks the AddTagsToResourceRequest method.
	AddTagsToResourceRequestFunc func(in1 *elasticache.AddTagsToResourceInput) (*request.Request, *elasticache.TagListMessage)

	// AddTagsToResourceWithContextFunc mocks the AddTagsToResourceWithContext method.
	AddTagsToResourceWithContextFunc func(in1 context.Context, in2 *elasticache.AddTagsToResourceInput, in3 ...request.Option) (*elasticache.TagListMessage, error)

	// AuthorizeCacheSecurityGroupIngressFunc mocks the AuthorizeCacheSecurityGroupIngress method.
	AuthorizeCacheSecurityGroupIngressFunc func(in1 *elasticache.AuthorizeCacheSecurityGroupIngressInput) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error)

	// AuthorizeCacheSecurityGroupIngressRequestFunc mocks the AuthorizeCacheSecurityGroupIngressRequest method.
	AuthorizeCacheSecurityGroupIngressRequestFunc func(in1 *elasticache.AuthorizeCacheSecurityGroupIngressInput) (*request.Request, *elasticache.AuthorizeCacheSecurityGroupIngressOutput)

	// AuthorizeCacheSecurityGroupIngressWithContextFunc mocks the AuthorizeCacheSecurityGroupIngressWithContext method.
	AuthorizeCacheSecurityGroupIngressWithContextFunc func(in1 context.Context, in2 *elasticache.AuthorizeCacheSecurityGroupIngressInput, in3 ...request.Option) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error)

	// BatchApplyUpdateActionFunc mocks the BatchApplyUpdateAction method.
	BatchApplyUpdateActionFunc func(in1 *elasticache.BatchApplyUpdateActionInput) (*elasticache.BatchApplyUpdateActionOutput, error)

	// BatchApplyUpdateActionRequestFunc mocks the BatchApplyUpdateActionRequest method.
	BatchApplyUpdateActionRequestFunc func(in1 *elasticache.BatchApplyUpdateActionInput) (*request.Request, *elasticache.BatchApplyUpdateActionOutput)

	// BatchApplyUpdateActionWithContextFunc mocks the BatchApplyUpdateActionWithContext method.
	BatchApplyUpdateActionWithContextFunc func(in1 context.Context, in2 *elasticache.BatchApplyUpdateActionInput, in3 ...request.Option) (*elasticache.BatchApplyUpdateActionOutput, error)

	// BatchStopUpdateActionFunc mocks the BatchStopUpdateAction method.
	BatchStopUpdateActionFunc func(in1 *elasticache.BatchStopUpdateActionInput) (*elasticache.BatchStopUpdateActionOutput, error)

	// BatchStopUpdateActionRequestFunc mocks the BatchStopUpdateActionRequest method.
	BatchStopUpdateActionRequestFunc func(in1 *elasticache.BatchStopUpdateActionInput) (*request.Request, *elasticache.BatchStopUpdateActionOutput)

	// BatchStopUpdateActionWithContextFunc mocks the BatchStopUpdateActionWithContext method.
	BatchStopUpdateActionWithContextFunc func(in1 context.Context, in2 *elasticache.BatchStopUpdateActionInput, in3 ...request.Option) (*elasticache.BatchStopUpdateActionOutput, error)

	// CompleteMigrationFunc mocks the CompleteMigration method.
	CompleteMigrationFunc func(in1 *elasticache.CompleteMigrationInput) (*elasticache.CompleteMigrationOutput, error)

	// CompleteMigrationRequestFunc mocks the CompleteMigrationRequest method.
	CompleteMigrationRequestFunc func(in1 *elasticache.CompleteMigrationInput) (*request.Request, *elasticache.CompleteMigrationOutput)

	// CompleteMigrationWithContextFunc mocks the CompleteMigrationWithContext method.
	CompleteMigrationWithContextFunc func(in1 context.Context, in2 *elasticache.CompleteMigrationInput, in3 ...request.Option) (*elasticache.CompleteMigrationOutput, error)

	// CopySnapshotFunc mocks the CopySnapshot method.
	CopySnapshotFunc func(in1 *elasticache.CopySnapshotInput) (*elasticache.CopySnapshotOutput, error)

	// CopySnapshotRequestFunc mocks the CopySnapshotRequest method.
	CopySnapshotRequestFunc func(in1 *elasticache.CopySnapshotInput) (*request.Request, *elasticache.CopySnapshotOutput)

	// CopySnapshotWithContextFunc mocks the CopySnapshotWithContext method.
	CopySnapshotWithContextFunc func(in1 context.Context, in2 *elasticache.CopySnapshotInput, in3 ...request.Option) (*elasticache.CopySnapshotOutput, error)

	// CreateCacheClusterFunc mocks the CreateCacheCluster method.
	CreateCacheClusterFunc func(in1 *elasticache.CreateCacheClusterInput) (*elasticache.CreateCacheClusterOutput, error)

	// CreateCacheClusterRequestFunc mocks the CreateCacheClusterRequest method.
	CreateCacheClusterRequestFunc func(in1 *elasticache.CreateCacheClusterInput) (*request.Request, *elasticache.CreateCacheClusterOutput)

	// CreateCacheClusterWithContextFunc mocks the CreateCacheClusterWithContext method.
	CreateCacheClusterWithContextFunc func(in1 context.Context, in2 *elasticache.CreateCacheClusterInput, in3 ...request.Option) (*elasticache.CreateCacheClusterOutput, error)

	// CreateCacheParameterGroupFunc mocks the CreateCacheParameterGroup method.
	CreateCacheParameterGroupFunc func(in1 *elasticache.CreateCacheParameterGroupInput) (*elasticache.CreateCacheParameterGroupOutput, error)

	// CreateCacheParameterGroupRequestFunc mocks the CreateCacheParameterGroupRequest method.
	CreateCacheParameterGroupRequestFunc func(in1 *elasticache.CreateCacheParameterGroupInput) (*request.Request, *elasticache.CreateCacheParameterGroupOutput)

	// CreateCacheParameterGroupWithContextFunc mocks the CreateCacheParameterGroupWithContext method.
	CreateCacheParameterGroupWithContextFunc func(in1 context.Context, in2 *elasticache.CreateCacheParameterGroupInput, in3 ...request.Option) (*elasticache.CreateCacheParameterGroupOutput, error)

	// CreateCacheSecurityGroupFunc mocks the CreateCacheSecurityGroup method.
	CreateCacheSecurityGroupFunc func(in1 *elasticache.CreateCacheSecurityGroupInput) (*elasticache.CreateCacheSecurityGroupOutput, error)

	// CreateCacheSecurityGroupRequestFunc mocks the CreateCacheSecurityGroupRequest method.
	CreateCacheSecurityGroupRequestFunc func(in1 *elasticache.CreateCacheSecurityGroupInput) (*request.Request, *elasticache.CreateCacheSecurityGroupOutput)

	// CreateCacheSecurityGroupWithContextFunc mocks the CreateCacheSecurityGroupWithContext method.
	CreateCacheSecurityGroupWithContextFunc func(in1 context.Context, in2 *elasticache.CreateCacheSecurityGroupInput, in3 ...request.Option) (*elasticache.CreateCacheSecurityGroupOutput, error)

	// CreateCacheSubnetGroupFunc mocks the CreateCacheSubnetGroup method.
	CreateCacheSubnetGroupFunc func(in1 *elasticache.CreateCacheSubnetGroupInput) (*elasticache.CreateCacheSubnetGroupOutput, error)

	// CreateCacheSubnetGroupRequestFunc mocks the CreateCacheSubnetGroupRequest method.
	CreateCacheSubnetGroupRequestFunc func(in1 *elasticache.CreateCacheSubnetGroupInput) (*request.Request, *elasticache.CreateCacheSubnetGroupOutput)

	// CreateCacheSubnetGroupWithContextFunc mocks the CreateCacheSubnetGroupWithContext method.
	CreateCacheSubnetGroupWithContextFunc func(in1 context.Context, in2 *elasticache.CreateCacheSubnetGroupInput, in3 ...request.Option) (*elasticache.CreateCacheSubnetGroupOutput, error)

	// CreateReplicationGroupFunc mocks the CreateReplicationGroup method.
	CreateReplicationGroupFunc func(in1 *elasticache.CreateReplicationGroupInput) (*elasticache.CreateReplicationGroupOutput, error)

	// CreateReplicationGroupRequestFunc mocks the CreateReplicationGroupRequest method.
	CreateReplicationGroupRequestFunc func(in1 *elasticache.CreateReplicationGroupInput) (*request.Request, *elasticache.CreateReplicationGroupOutput)

	// CreateReplicationGroupWithContextFunc mocks the CreateReplicationGroupWithContext method.
	CreateReplicationGroupWithContextFunc func(in1 context.Context, in2 *elasticache.CreateReplicationGroupInput, in3 ...request.Option) (*elasticache.CreateReplicationGroupOutput, error)

	// CreateSnapshotFunc mocks the CreateSnapshot method.
	CreateSnapshotFunc func(in1 *elasticache.CreateSnapshotInput) (*elasticache.CreateSnapshotOutput, error)

	// CreateSnapshotRequestFunc mocks the CreateSnapshotRequest method.
	CreateSnapshotRequestFunc func(in1 *elasticache.CreateSnapshotInput) (*request.Request, *elasticache.CreateSnapshotOutput)

	// CreateSnapshotWithContextFunc mocks the CreateSnapshotWithContext method.
	CreateSnapshotWithContextFunc func(in1 context.Context, in2 *elasticache.CreateSnapshotInput, in3 ...request.Option) (*elasticache.CreateSnapshotOutput, error)

	// DecreaseReplicaCountFunc mocks the DecreaseReplicaCount method.
	DecreaseReplicaCountFunc func(in1 *elasticache.DecreaseReplicaCountInput) (*elasticache.DecreaseReplicaCountOutput, error)

	// DecreaseReplicaCountRequestFunc mocks the DecreaseReplicaCountRequest method.
	DecreaseReplicaCountRequestFunc func(in1 *elasticache.DecreaseReplicaCountInput) (*request.Request, *elasticache.DecreaseReplicaCountOutput)

	// DecreaseReplicaCountWithContextFunc mocks the DecreaseReplicaCountWithContext method.
	DecreaseReplicaCountWithContextFunc func(in1 context.Context, in2 *elasticache.DecreaseReplicaCountInput, in3 ...request.Option) (*elasticache.DecreaseReplicaCountOutput, error)

	// DeleteCacheClusterFunc mocks the DeleteCacheCluster method.
	DeleteCacheClusterFunc func(in1 *elasticache.DeleteCacheClusterInput) (*elasticache.DeleteCacheClusterOutput, error)

	// DeleteCacheClusterRequestFunc mocks the DeleteCacheClusterRequest method.
	DeleteCacheClusterRequestFunc func(in1 *elasticache.DeleteCacheClusterInput) (*request.Request, *elasticache.DeleteCacheClusterOutput)

	// DeleteCacheClusterWithContextFunc mocks the DeleteCacheClusterWithContext method.
	DeleteCacheClusterWithContextFunc func(in1 context.Context, in2 *elasticache.DeleteCacheClusterInput, in3 ...request.Option) (*elasticache.DeleteCacheClusterOutput, error)

	// DeleteCacheParameterGroupFunc mocks the DeleteCacheParameterGroup method.
	DeleteCacheParameterGroupFunc func(in1 *elasticache.DeleteCacheParameterGroupInput) (*elasticache.DeleteCacheParameterGroupOutput, error)

	// DeleteCacheParameterGroupRequestFunc mocks the DeleteCacheParameterGroupRequest method.
	DeleteCacheParameterGroupRequestFunc func(in1 *elasticache.DeleteCacheParameterGroupInput) (*request.Request, *elasticache.DeleteCacheParameterGroupOutput)

	// DeleteCacheParameterGroupWithContextFunc mocks the DeleteCacheParameterGroupWithContext method.
	DeleteCacheParameterGroupWithContextFunc func(in1 context.Context, in2 *elasticache.DeleteCacheParameterGroupInput, in3 ...request.Option) (*elasticache.DeleteCacheParameterGroupOutput, error)

	// DeleteCacheSecurityGroupFunc mocks the DeleteCacheSecurityGroup method.
	DeleteCacheSecurityGroupFunc func(in1 *elasticache.DeleteCacheSecurityGroupInput) (*elasticache.DeleteCacheSecurityGroupOutput, error)

	// DeleteCacheSecurityGroupRequestFunc mocks the DeleteCacheSecurityGroupRequest method.
	DeleteCacheSecurityGroupRequestFunc func(in1 *elasticache.DeleteCacheSecurityGroupInput) (*request.Request, *elasticache.DeleteCacheSecurityGroupOutput)

	// DeleteCacheSecurityGroupWithContextFunc mocks the DeleteCacheSecurityGroupWithContext method.
	DeleteCacheSecurityGroupWithContextFunc func(in1 context.Context, in2 *elasticache.DeleteCacheSecurityGroupInput, in3 ...request.Option) (*elasticache.DeleteCacheSecurityGroupOutput, error)

	// DeleteCacheSubnetGroupFunc mocks the DeleteCacheSubnetGroup method.
	DeleteCacheSubnetGroupFunc func(in1 *elasticache.DeleteCacheSubnetGroupInput) (*elasticache.DeleteCacheSubnetGroupOutput, error)

	// DeleteCacheSubnetGroupRequestFunc mocks the DeleteCacheSubnetGroupRequest method.
	DeleteCacheSubnetGroupRequestFunc func(in1 *elasticache.DeleteCacheSubnetGroupInput) (*request.Request, *elasticache.DeleteCacheSubnetGroupOutput)

	// DeleteCacheSubnetGroupWithContextFunc mocks the DeleteCacheSubnetGroupWithContext method.
	DeleteCacheSubnetGroupWithContextFunc func(in1 context.Context, in2 *elasticache.DeleteCacheSubnetGroupInput, in3 ...request.Option) (*elasticache.DeleteCacheSubnetGroupOutput, error)

	// DeleteReplicationGroupFunc mocks the DeleteReplicationGroup method.
	DeleteReplicationGroupFunc func(in1 *elasticache.DeleteReplicationGroupInput) (*elasticache.DeleteReplicationGroupOutput, error)

	// DeleteReplicationGroupRequestFunc mocks the DeleteReplicationGroupRequest method.
	DeleteReplicationGroupRequestFunc func(in1 *elasticache.DeleteReplicationGroupInput) (*request.Request, *elasticache.DeleteReplicationGroupOutput)

	// DeleteReplicationGroupWithContextFunc mocks the DeleteReplicationGroupWithContext method.
	DeleteReplicationGroupWithContextFunc func(in1 context.Context, in2 *elasticache.DeleteReplicationGroupInput, in3 ...request.Option) (*elasticache.DeleteReplicationGroupOutput, error)

	// DeleteSnapshotFunc mocks the DeleteSnapshot method.
	DeleteSnapshotFunc func(in1 *elasticache.DeleteSnapshotInput) (*elasticache.DeleteSnapshotOutput, error)

	// DeleteSnapshotRequestFunc mocks the DeleteSnapshotRequest method.
	DeleteSnapshotRequestFunc func(in1 *elasticache.DeleteSnapshotInput) (*request.Request, *elasticache.DeleteSnapshotOutput)

	// DeleteSnapshotWithContextFunc mocks the DeleteSnapshotWithContext method.
	DeleteSnapshotWithContextFunc func(in1 context.Context, in2 *elasticache.DeleteSnapshotInput, in3 ...request.Option) (*elasticache.DeleteSnapshotOutput, error)

	// DescribeCacheClustersFunc mocks the DescribeCacheClusters method.
	DescribeCacheClustersFunc func(in1 *elasticache.DescribeCacheClustersInput) (*elasticache.DescribeCacheClustersOutput, error)

	// DescribeCacheClustersPagesFunc mocks the DescribeCacheClustersPages method.
	DescribeCacheClustersPagesFunc func(in1 *elasticache.DescribeCacheClustersInput, in2 func(*elasticache.DescribeCacheClustersOutput, bool) bool) error

	// DescribeCacheClustersPagesWithContextFunc mocks the DescribeCacheClustersPagesWithContext method.
	DescribeCacheClustersPagesWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeCacheClustersInput, in3 func(*elasticache.DescribeCacheClustersOutput, bool) bool, in4 ...request.Option) error

	// DescribeCacheClustersRequestFunc mocks the DescribeCacheClustersRequest method.
	DescribeCacheClustersRequestFunc func(in1 *elasticache.DescribeCacheClustersInput) (*request.Request, *elasticache.DescribeCacheClustersOutput)

	// DescribeCacheClustersWithContextFunc mocks the DescribeCacheClustersWithContext method.
	DescribeCacheClustersWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeCacheClustersInput, in3 ...request.Option) (*elasticache.DescribeCacheClustersOutput, error)

	// DescribeCacheEngineVersionsFunc mocks the DescribeCacheEngineVersions method.
	DescribeCacheEngineVersionsFunc func(in1 *elasticache.DescribeCacheEngineVersionsInput) (*elasticache.DescribeCacheEngineVersionsOutput, error)

	// DescribeCacheEngineVersionsPagesFunc mocks the DescribeCacheEngineVersionsPages method.
	DescribeCacheEngineVersionsPagesFunc func(in1 *elasticache.DescribeCacheEngineVersionsInput, in2 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool) error

	// DescribeCacheEngineVersionsPagesWithContextFunc mocks the DescribeCacheEngineVersionsPagesWithContext method.
	DescribeCacheEngineVersionsPagesWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeCacheEngineVersionsInput, in3 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool, in4 ...request.Option) error

	// DescribeCacheEngineVersionsRequestFunc mocks the DescribeCacheEngineVersionsRequest method.
	DescribeCacheEngineVersionsRequestFunc func(in1 *elasticache.DescribeCacheEngineVersionsInput) (*request.Request, *elasticache.DescribeCacheEngineVersionsOutput)

	// DescribeCacheEngineVersionsWithContextFunc mocks the DescribeCacheEngineVersionsWithContext method.
	DescribeCacheEngineVersionsWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeCacheEngineVersionsInput, in3 ...request.Option) (*elasticache.DescribeCacheEngineVersionsOutput, error)

	// DescribeCacheParameterGroupsFunc mocks the DescribeCacheParameterGroups method.
	DescribeCacheParameterGroupsFunc func(in1 *elasticache.DescribeCacheParameterGroupsInput) (*elasticache.DescribeCacheParameterGroupsOutput, error)

	// DescribeCacheParameterGroupsPagesFunc mocks the DescribeCacheParameterGroupsPages method.
	DescribeCacheParameterGroupsPagesFunc func(in1 *elasticache.DescribeCacheParameterGroupsInput, in2 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool) error

	// DescribeCacheParameterGroupsPagesWithContextFunc mocks the DescribeCacheParameterGroupsPagesWithContext method.
	DescribeCacheParameterGroupsPagesWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeCacheParameterGroupsInput, in3 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool, in4 ...request.Option) error

	// DescribeCacheParameterGroupsRequestFunc mocks the DescribeCacheParameterGroupsRequest method.
	DescribeCacheParameterGroupsRequestFunc func(in1 *elasticache.DescribeCacheParameterGroupsInput) (*request.Request, *elasticache.DescribeCacheParameterGroupsOutput)

	// DescribeCacheParameterGroupsWithContextFunc mocks the DescribeCacheParameterGroupsWithContext method.
	DescribeCacheParameterGroupsWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeCacheParameterGroupsInput, in3 ...request.Option) (*elasticache.DescribeCacheParameterGroupsOutput, error)

	// DescribeCacheParametersFunc mocks the DescribeCacheParameters method.
	DescribeCacheParametersFunc func(in1 *elasticache.DescribeCacheParametersInput) (*elasticache.DescribeCacheParametersOutput, error)

	// DescribeCacheParametersPagesFunc mocks the DescribeCacheParametersPages method.
	DescribeCacheParametersPagesFunc func(in1 *elasticache.DescribeCacheParametersInput, in2 func(*elasticache.DescribeCacheParametersOutput, bool) bool) error

	// DescribeCacheParametersPagesWithContextFunc mocks the DescribeCacheParametersPagesWithContext method.
	DescribeCacheParametersPagesWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeCacheParametersInput, in3 func(*elasticache.DescribeCacheParametersOutput, bool) bool, in4 ...request.Option) error

	// DescribeCacheParametersRequestFunc mocks the DescribeCacheParametersRequest method.
	DescribeCacheParametersRequestFunc func(in1 *elasticache.DescribeCacheParametersInput) (*request.Request, *elasticache.DescribeCacheParametersOutput)

	// DescribeCacheParametersWithContextFunc mocks the DescribeCacheParametersWithContext method.
	DescribeCacheParametersWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeCacheParametersInput, in3 ...request.Option) (*elasticache.DescribeCacheParametersOutput, error)

	// DescribeCacheSecurityGroupsFunc mocks the DescribeCacheSecurityGroups method.
	DescribeCacheSecurityGroupsFunc func(in1 *elasticache.DescribeCacheSecurityGroupsInput) (*elasticache.DescribeCacheSecurityGroupsOutput, error)

	// DescribeCacheSecurityGroupsPagesFunc mocks the DescribeCacheSecurityGroupsPages method.
	DescribeCacheSecurityGroupsPagesFunc func(in1 *elasticache.DescribeCacheSecurityGroupsInput, in2 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool) error

	// DescribeCacheSecurityGroupsPagesWithContextFunc mocks the DescribeCacheSecurityGroupsPagesWithContext method.
	DescribeCacheSecurityGroupsPagesWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeCacheSecurityGroupsInput, in3 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool, in4 ...request.Option) error

	// DescribeCacheSecurityGroupsRequestFunc mocks the DescribeCacheSecurityGroupsRequest method.
	DescribeCacheSecurityGroupsRequestFunc func(in1 *elasticache.DescribeCacheSecurityGroupsInput) (*request.Request, *elasticache.DescribeCacheSecurityGroupsOutput)

	// DescribeCacheSecurityGroupsWithContextFunc mocks the DescribeCacheSecurityGroupsWithContext method.
	DescribeCacheSecurityGroupsWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeCacheSecurityGroupsInput, in3 ...request.Option) (*elasticache.DescribeCacheSecurityGroupsOutput, error)

	// DescribeCacheSubnetGroupsFunc mocks the DescribeCacheSubnetGroups method.
	DescribeCacheSubnetGroupsFunc func(in1 *elasticache.DescribeCacheSubnetGroupsInput) (*elasticache.DescribeCacheSubnetGroupsOutput, error)

	// DescribeCacheSubnetGroupsPagesFunc mocks the DescribeCacheSubnetGroupsPages method.
	DescribeCacheSubnetGroupsPagesFunc func(in1 *elasticache.DescribeCacheSubnetGroupsInput, in2 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool) error

	// DescribeCacheSubnetGroupsPagesWithContextFunc mocks the DescribeCacheSubnetGroupsPagesWithContext method.
	DescribeCacheSubnetGroupsPagesWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeCacheSubnetGroupsInput, in3 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool, in4 ...request.Option) error

	// DescribeCacheSubnetGroupsRequestFunc mocks the DescribeCacheSubnetGroupsRequest method.
	DescribeCacheSubnetGroupsRequestFunc func(in1 *elasticache.DescribeCacheSubnetGroupsInput) (*request.Request, *elasticache.DescribeCacheSubnetGroupsOutput)

	// DescribeCacheSubnetGroupsWithContextFunc mocks the DescribeCacheSubnetGroupsWithContext method.
	DescribeCacheSubnetGroupsWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeCacheSubnetGroupsInput, in3 ...request.Option) (*elasticache.DescribeCacheSubnetGroupsOutput, error)

	// DescribeEngineDefaultParametersFunc mocks the DescribeEngineDefaultParameters method.
	DescribeEngineDefaultParametersFunc func(in1 *elasticache.DescribeEngineDefaultParametersInput) (*elasticache.DescribeEngineDefaultParametersOutput, error)

	// DescribeEngineDefaultParametersPagesFunc mocks the DescribeEngineDefaultParametersPages method.
	DescribeEngineDefaultParametersPagesFunc func(in1 *elasticache.DescribeEngineDefaultParametersInput, in2 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool) error

	// DescribeEngineDefaultParametersPagesWithContextFunc mocks the DescribeEngineDefaultParametersPagesWithContext method.
	DescribeEngineDefaultParametersPagesWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeEngineDefaultParametersInput, in3 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool, in4 ...request.Option) error

	// DescribeEngineDefaultParametersRequestFunc mocks the DescribeEngineDefaultParametersRequest method.
	DescribeEngineDefaultParametersRequestFunc func(in1 *elasticache.DescribeEngineDefaultParametersInput) (*request.Request, *elasticache.DescribeEngineDefaultParametersOutput)

	// DescribeEngineDefaultParametersWithContextFunc mocks the DescribeEngineDefaultParametersWithContext method.
	DescribeEngineDefaultParametersWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeEngineDefaultParametersInput, in3 ...request.Option) (*elasticache.DescribeEngineDefaultParametersOutput, error)

	// DescribeEventsFunc mocks the DescribeEvents method.
	DescribeEventsFunc func(in1 *elasticache.DescribeEventsInput) (*elasticache.DescribeEventsOutput, error)

	// DescribeEventsPagesFunc mocks the DescribeEventsPages method.
	DescribeEventsPagesFunc func(in1 *elasticache.DescribeEventsInput, in2 func(*elasticache.DescribeEventsOutput, bool) bool) error

	// DescribeEventsPagesWithContextFunc mocks the DescribeEventsPagesWithContext method.
	DescribeEventsPagesWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeEventsInput, in3 func(*elasticache.DescribeEventsOutput, bool) bool, in4 ...request.Option) error

	// DescribeEventsRequestFunc mocks the DescribeEventsRequest method.
	DescribeEventsRequestFunc func(in1 *elasticache.DescribeEventsInput) (*request.Request, *elasticache.DescribeEventsOutput)

	// DescribeEventsWithContextFunc mocks the DescribeEventsWithContext method.
	DescribeEventsWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeEventsInput, in3 ...request.Option) (*elasticache.DescribeEventsOutput, error)

	// DescribeReplicationGroupsFunc mocks the DescribeReplicationGroups method.
	DescribeReplicationGroupsFunc func(in1 *elasticache.DescribeReplicationGroupsInput) (*elasticache.DescribeReplicationGroupsOutput, error)

	// DescribeReplicationGroupsPagesFunc mocks the DescribeReplicationGroupsPages method.
	DescribeReplicationGroupsPagesFunc func(in1 *elasticache.DescribeReplicationGroupsInput, in2 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool) error

	// DescribeReplicationGroupsPagesWithContextFunc mocks the DescribeReplicationGroupsPagesWithContext method.
	DescribeReplicationGroupsPagesWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeReplicationGroupsInput, in3 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool, in4 ...request.Option) error

	// DescribeReplicationGroupsRequestFunc mocks the DescribeReplicationGroupsRequest method.
	DescribeReplicationGroupsRequestFunc func(in1 *elasticache.DescribeReplicationGroupsInput) (*request.Request, *elasticache.DescribeReplicationGroupsOutput)

	// DescribeReplicationGroupsWithContextFunc mocks the DescribeReplicationGroupsWithContext method.
	DescribeReplicationGroupsWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeReplicationGroupsInput, in3 ...request.Option) (*elasticache.DescribeReplicationGroupsOutput, error)

	// DescribeReservedCacheNodesFunc mocks the DescribeReservedCacheNodes method.
	DescribeReservedCacheNodesFunc func(in1 *elasticache.DescribeReservedCacheNodesInput) (*elasticache.DescribeReservedCacheNodesOutput, error)

	// DescribeReservedCacheNodesOfferingsFunc mocks the DescribeReservedCacheNodesOfferings method.
	DescribeReservedCacheNodesOfferingsFunc func(in1 *elasticache.DescribeReservedCacheNodesOfferingsInput) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error)

	// DescribeReservedCacheNodesOfferingsPagesFunc mocks the DescribeReservedCacheNodesOfferingsPages method.
	DescribeReservedCacheNodesOfferingsPagesFunc func(in1 *elasticache.DescribeReservedCacheNodesOfferingsInput, in2 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool) error

	// DescribeReservedCacheNodesOfferingsPagesWithContextFunc mocks the DescribeReservedCacheNodesOfferingsPagesWithContext method.
	DescribeReservedCacheNodesOfferingsPagesWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeReservedCacheNodesOfferingsInput, in3 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool, in4 ...request.Option) error

	// DescribeReservedCacheNodesOfferingsRequestFunc mocks the DescribeReservedCacheNodesOfferingsRequest method.
	DescribeReservedCacheNodesOfferingsRequestFunc func(in1 *elasticache.DescribeReservedCacheNodesOfferingsInput) (*request.Request, *elasticache.DescribeReservedCacheNodesOfferingsOutput)

	// DescribeReservedCacheNodesOfferingsWithContextFunc mocks the DescribeReservedCacheNodesOfferingsWithContext method.
	DescribeReservedCacheNodesOfferingsWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeReservedCacheNodesOfferingsInput, in3 ...request.Option) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error)

	// DescribeReservedCacheNodesPagesFunc mocks the DescribeReservedCacheNodesPages method.
	DescribeReservedCacheNodesPagesFunc func(in1 *elasticache.DescribeReservedCacheNodesInput, in2 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool) error

	// DescribeReservedCacheNodesPagesWithContextFunc mocks the DescribeReservedCacheNodesPagesWithContext method.
	DescribeReservedCacheNodesPagesWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeReservedCacheNodesInput, in3 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool, in4 ...request.Option) error

	// DescribeReservedCacheNodesRequestFunc mocks the DescribeReservedCacheNodesRequest method.
	DescribeReservedCacheNodesRequestFunc func(in1 *elasticache.DescribeReservedCacheNodesInput) (*request.Request, *elasticache.DescribeReservedCacheNodesOutput)

	// DescribeReservedCacheNodesWithContextFunc mocks the DescribeReservedCacheNodesWithContext method.
	DescribeReservedCacheNodesWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeReservedCacheNodesInput, in3 ...request.Option) (*elasticache.DescribeReservedCacheNodesOutput, error)

	// DescribeServiceUpdatesFunc mocks the DescribeServiceUpdates method.
	DescribeServiceUpdatesFunc func(in1 *elasticache.DescribeServiceUpdatesInput) (*elasticache.DescribeServiceUpdatesOutput, error)

	// DescribeServiceUpdatesPagesFunc mocks the DescribeServiceUpdatesPages method.
	DescribeServiceUpdatesPagesFunc func(in1 *elasticache.DescribeServiceUpdatesInput, in2 func(*elasticache.DescribeServiceUpdatesOutput, bool) bool) error

	// DescribeServiceUpdatesPagesWithContextFunc mocks the DescribeServiceUpdatesPagesWithContext method.
	DescribeServiceUpdatesPagesWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeServiceUpdatesInput, in3 func(*elasticache.DescribeServiceUpdatesOutput, bool) bool, in4 ...request.Option) error

	// DescribeServiceUpdatesRequestFunc mocks the DescribeServiceUpdatesRequest method.
	DescribeServiceUpdatesRequestFunc func(in1 *elasticache.DescribeServiceUpdatesInput) (*request.Request, *elasticache.DescribeServiceUpdatesOutput)

	// DescribeServiceUpdatesWithContextFunc mocks the DescribeServiceUpdatesWithContext method.
	DescribeServiceUpdatesWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeServiceUpdatesInput, in3 ...request.Option) (*elasticache.DescribeServiceUpdatesOutput, error)

	// DescribeSnapshotsFunc mocks the DescribeSnapshots method.
	DescribeSnapshotsFunc func(in1 *elasticache.DescribeSnapshotsInput) (*elasticache.DescribeSnapshotsOutput, error)

	// DescribeSnapshotsPagesFunc mocks the DescribeSnapshotsPages method.
	DescribeSnapshotsPagesFunc func(in1 *elasticache.DescribeSnapshotsInput, in2 func(*elasticache.DescribeSnapshotsOutput, bool) bool) error

	// DescribeSnapshotsPagesWithContextFunc mocks the DescribeSnapshotsPagesWithContext method.
	DescribeSnapshotsPagesWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeSnapshotsInput, in3 func(*elasticache.DescribeSnapshotsOutput, bool) bool, in4 ...request.Option) error

	// DescribeSnapshotsRequestFunc mocks the DescribeSnapshotsRequest method.
	DescribeSnapshotsRequestFunc func(in1 *elasticache.DescribeSnapshotsInput) (*request.Request, *elasticache.DescribeSnapshotsOutput)

	// DescribeSnapshotsWithContextFunc mocks the DescribeSnapshotsWithContext method.
	DescribeSnapshotsWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeSnapshotsInput, in3 ...request.Option) (*elasticache.DescribeSnapshotsOutput, error)

	// DescribeUpdateActionsFunc mocks the DescribeUpdateActions method.
	DescribeUpdateActionsFunc func(in1 *elasticache.DescribeUpdateActionsInput) (*elasticache.DescribeUpdateActionsOutput, error)

	// DescribeUpdateActionsPagesFunc mocks the DescribeUpdateActionsPages method.
	DescribeUpdateActionsPagesFunc func(in1 *elasticache.DescribeUpdateActionsInput, in2 func(*elasticache.DescribeUpdateActionsOutput, bool) bool) error

	// DescribeUpdateActionsPagesWithContextFunc mocks the DescribeUpdateActionsPagesWithContext method.
	DescribeUpdateActionsPagesWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeUpdateActionsInput, in3 func(*elasticache.DescribeUpdateActionsOutput, bool) bool, in4 ...request.Option) error

	// DescribeUpdateActionsRequestFunc mocks the DescribeUpdateActionsRequest method.
	DescribeUpdateActionsRequestFunc func(in1 *elasticache.DescribeUpdateActionsInput) (*request.Request, *elasticache.DescribeUpdateActionsOutput)

	// DescribeUpdateActionsWithContextFunc mocks the DescribeUpdateActionsWithContext method.
	DescribeUpdateActionsWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeUpdateActionsInput, in3 ...request.Option) (*elasticache.DescribeUpdateActionsOutput, error)

	// IncreaseReplicaCountFunc mocks the IncreaseReplicaCount method.
	IncreaseReplicaCountFunc func(in1 *elasticache.IncreaseReplicaCountInput) (*elasticache.IncreaseReplicaCountOutput, error)

	// IncreaseReplicaCountRequestFunc mocks the IncreaseReplicaCountRequest method.
	IncreaseReplicaCountRequestFunc func(in1 *elasticache.IncreaseReplicaCountInput) (*request.Request, *elasticache.IncreaseReplicaCountOutput)

	// IncreaseReplicaCountWithContextFunc mocks the IncreaseReplicaCountWithContext method.
	IncreaseReplicaCountWithContextFunc func(in1 context.Context, in2 *elasticache.IncreaseReplicaCountInput, in3 ...request.Option) (*elasticache.IncreaseReplicaCountOutput, error)

	// ListAllowedNodeTypeModificationsFunc mocks the ListAllowedNodeTypeModifications method.
	ListAllowedNodeTypeModificationsFunc func(in1 *elasticache.ListAllowedNodeTypeModificationsInput) (*elasticache.ListAllowedNodeTypeModificationsOutput, error)

	// ListAllowedNodeTypeModificationsRequestFunc mocks the ListAllowedNodeTypeModificationsRequest method.
	ListAllowedNodeTypeModificationsRequestFunc func(in1 *elasticache.ListAllowedNodeTypeModificationsInput) (*request.Request, *elasticache.ListAllowedNodeTypeModificationsOutput)

	// ListAllowedNodeTypeModificationsWithContextFunc mocks the ListAllowedNodeTypeModificationsWithContext method.
	ListAllowedNodeTypeModificationsWithContextFunc func(in1 context.Context, in2 *elasticache.ListAllowedNodeTypeModificationsInput, in3 ...request.Option) (*elasticache.ListAllowedNodeTypeModificationsOutput, error)

	// ListTagsForResourceFunc mocks the ListTagsForResource method.
	ListTagsForResourceFunc func(in1 *elasticache.ListTagsForResourceInput) (*elasticache.TagListMessage, error)

	// ListTagsForResourceRequestFunc mocks the ListTagsForResourceRequest method.
	ListTagsForResourceRequestFunc func(in1 *elasticache.ListTagsForResourceInput) (*request.Request, *elasticache.TagListMessage)

	// ListTagsForResourceWithContextFunc mocks the ListTagsForResourceWithContext method.
	ListTagsForResourceWithContextFunc func(in1 context.Context, in2 *elasticache.ListTagsForResourceInput, in3 ...request.Option) (*elasticache.TagListMessage, error)

	// ModifyCacheClusterFunc mocks the ModifyCacheCluster method.
	ModifyCacheClusterFunc func(in1 *elasticache.ModifyCacheClusterInput) (*elasticache.ModifyCacheClusterOutput, error)

	// ModifyCacheClusterRequestFunc mocks the ModifyCacheClusterRequest method.
	ModifyCacheClusterRequestFunc func(in1 *elasticache.ModifyCacheClusterInput) (*request.Request, *elasticache.ModifyCacheClusterOutput)

	// ModifyCacheClusterWithContextFunc mocks the ModifyCacheClusterWithContext method.
	ModifyCacheClusterWithContextFunc func(in1 context.Context, in2 *elasticache.ModifyCacheClusterInput, in3 ...request.Option) (*elasticache.ModifyCacheClusterOutput, error)

	// ModifyCacheParameterGroupFunc mocks the ModifyCacheParameterGroup method.
	ModifyCacheParameterGroupFunc func(in1 *elasticache.ModifyCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error)

	// ModifyCacheParameterGroupRequestFunc mocks the ModifyCacheParameterGroupRequest method.
	ModifyCacheParameterGroupRequestFunc func(in1 *elasticache.ModifyCacheParameterGroupInput) (*request.Request, *elasticache.CacheParameterGroupNameMessage)

	// ModifyCacheParameterGroupWithContextFunc mocks the ModifyCacheParameterGroupWithContext method.
	ModifyCacheParameterGroupWithContextFunc func(in1 context.Context, in2 *elasticache.ModifyCacheParameterGroupInput, in3 ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error)

	// ModifyCacheSubnetGroupFunc mocks the ModifyCacheSubnetGroup method.
	ModifyCacheSubnetGroupFunc func(in1 *elasticache.ModifyCacheSubnetGroupInput) (*elasticache.ModifyCacheSubnetGroupOutput, error)

	// ModifyCacheSubnetGroupRequestFunc mocks the ModifyCacheSubnetGroupRequest method.
	ModifyCacheSubnetGroupRequestFunc func(in1 *elasticache.ModifyCacheSubnetGroupInput) (*request.Request, *elasticache.ModifyCacheSubnetGroupOutput)

	// ModifyCacheSubnetGroupWithContextFunc mocks the ModifyCacheSubnetGroupWithContext method.
	ModifyCacheSubnetGroupWithContextFunc func(in1 context.Context, in2 *elasticache.ModifyCacheSubnetGroupInput, in3 ...request.Option) (*elasticache.ModifyCacheSubnetGroupOutput, error)

	// ModifyReplicationGroupFunc mocks the ModifyReplicationGroup method.
	ModifyReplicationGroupFunc func(in1 *elasticache.ModifyReplicationGroupInput) (*elasticache.ModifyReplicationGroupOutput, error)

	// ModifyReplicationGroupRequestFunc mocks the ModifyReplicationGroupRequest method.
	ModifyReplicationGroupRequestFunc func(in1 *elasticache.ModifyReplicationGroupInput) (*request.Request, *elasticache.ModifyReplicationGroupOutput)

	// ModifyReplicationGroupShardConfigurationFunc mocks the ModifyReplicationGroupShardConfiguration method.
	ModifyReplicationGroupShardConfigurationFunc func(in1 *elasticache.ModifyReplicationGroupShardConfigurationInput) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error)

	// ModifyReplicationGroupShardConfigurationRequestFunc mocks the ModifyReplicationGroupShardConfigurationRequest method.
	ModifyReplicationGroupShardConfigurationRequestFunc func(in1 *elasticache.ModifyReplicationGroupShardConfigurationInput) (*request.Request, *elasticache.ModifyReplicationGroupShardConfigurationOutput)

	// ModifyReplicationGroupShardConfigurationWithContextFunc mocks the ModifyReplicationGroupShardConfigurationWithContext method.
	ModifyReplicationGroupShardConfigurationWithContextFunc func(in1 context.Context, in2 *elasticache.ModifyReplicationGroupShardConfigurationInput, in3 ...request.Option) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error)

	// ModifyReplicationGroupWithContextFunc mocks the ModifyReplicationGroupWithContext method.
	ModifyReplicationGroupWithContextFunc func(in1 context.Context, in2 *elasticache.ModifyReplicationGroupInput, in3 ...request.Option) (*elasticache.ModifyReplicationGroupOutput, error)

	// PurchaseReservedCacheNodesOfferingFunc mocks the PurchaseReservedCacheNodesOffering method.
	PurchaseReservedCacheNodesOfferingFunc func(in1 *elasticache.PurchaseReservedCacheNodesOfferingInput) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error)

	// PurchaseReservedCacheNodesOfferingRequestFunc mocks the PurchaseReservedCacheNodesOfferingRequest method.
	PurchaseReservedCacheNodesOfferingRequestFunc func(in1 *elasticache.PurchaseReservedCacheNodesOfferingInput) (*request.Request, *elasticache.PurchaseReservedCacheNodesOfferingOutput)

	// PurchaseReservedCacheNodesOfferingWithContextFunc mocks the PurchaseReservedCacheNodesOfferingWithContext method.
	PurchaseReservedCacheNodesOfferingWithContextFunc func(in1 context.Context, in2 *elasticache.PurchaseReservedCacheNodesOfferingInput, in3 ...request.Option) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error)

	// RebootCacheClusterFunc mocks the RebootCacheCluster method.
	RebootCacheClusterFunc func(in1 *elasticache.RebootCacheClusterInput) (*elasticache.RebootCacheClusterOutput, error)

	// RebootCacheClusterRequestFunc mocks the RebootCacheClusterRequest method.
	RebootCacheClusterRequestFunc func(in1 *elasticache.RebootCacheClusterInput) (*request.Request, *elasticache.RebootCacheClusterOutput)

	// RebootCacheClusterWithContextFunc mocks the RebootCacheClusterWithContext method.
	RebootCacheClusterWithContextFunc func(in1 context.Context, in2 *elasticache.RebootCacheClusterInput, in3 ...request.Option) (*elasticache.RebootCacheClusterOutput, error)

	// RemoveTagsFromResourceFunc mocks the RemoveTagsFromResource method.
	RemoveTagsFromResourceFunc func(in1 *elasticache.RemoveTagsFromResourceInput) (*elasticache.TagListMessage, error)

	// RemoveTagsFromResourceRequestFunc mocks the RemoveTagsFromResourceRequest method.
	RemoveTagsFromResourceRequestFunc func(in1 *elasticache.RemoveTagsFromResourceInput) (*request.Request, *elasticache.TagListMessage)

	// RemoveTagsFromResourceWithContextFunc mocks the RemoveTagsFromResourceWithContext method.
	RemoveTagsFromResourceWithContextFunc func(in1 context.Context, in2 *elasticache.RemoveTagsFromResourceInput, in3 ...request.Option) (*elasticache.TagListMessage, error)

	// ResetCacheParameterGroupFunc mocks the ResetCacheParameterGroup method.
	ResetCacheParameterGroupFunc func(in1 *elasticache.ResetCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error)

	// ResetCacheParameterGroupRequestFunc mocks the ResetCacheParameterGroupRequest method.
	ResetCacheParameterGroupRequestFunc func(in1 *elasticache.ResetCacheParameterGroupInput) (*request.Request, *elasticache.CacheParameterGroupNameMessage)

	// ResetCacheParameterGroupWithContextFunc mocks the ResetCacheParameterGroupWithContext method.
	ResetCacheParameterGroupWithContextFunc func(in1 context.Context, in2 *elasticache.ResetCacheParameterGroupInput, in3 ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error)

	// RevokeCacheSecurityGroupIngressFunc mocks the RevokeCacheSecurityGroupIngress method.
	RevokeCacheSecurityGroupIngressFunc func(in1 *elasticache.RevokeCacheSecurityGroupIngressInput) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error)

	// RevokeCacheSecurityGroupIngressRequestFunc mocks the RevokeCacheSecurityGroupIngressRequest method.
	RevokeCacheSecurityGroupIngressRequestFunc func(in1 *elasticache.RevokeCacheSecurityGroupIngressInput) (*request.Request, *elasticache.RevokeCacheSecurityGroupIngressOutput)

	// RevokeCacheSecurityGroupIngressWithContextFunc mocks the RevokeCacheSecurityGroupIngressWithContext method.
	RevokeCacheSecurityGroupIngressWithContextFunc func(in1 context.Context, in2 *elasticache.RevokeCacheSecurityGroupIngressInput, in3 ...request.Option) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error)

	// StartMigrationFunc mocks the StartMigration method.
	StartMigrationFunc func(in1 *elasticache.StartMigrationInput) (*elasticache.StartMigrationOutput, error)

	// StartMigrationRequestFunc mocks the StartMigrationRequest method.
	StartMigrationRequestFunc func(in1 *elasticache.StartMigrationInput) (*request.Request, *elasticache.StartMigrationOutput)

	// StartMigrationWithContextFunc mocks the StartMigrationWithContext method.
	StartMigrationWithContextFunc func(in1 context.Context, in2 *elasticache.StartMigrationInput, in3 ...request.Option) (*elasticache.StartMigrationOutput, error)

	// TestFailoverFunc mocks the TestFailover method.
	TestFailoverFunc func(in1 *elasticache.TestFailoverInput) (*elasticache.TestFailoverOutput, error)

	// TestFailoverRequestFunc mocks the TestFailoverRequest method.
	TestFailoverRequestFunc func(in1 *elasticache.TestFailoverInput) (*request.Request, *elasticache.TestFailoverOutput)

	// TestFailoverWithContextFunc mocks the TestFailoverWithContext method.
	TestFailoverWithContextFunc func(in1 context.Context, in2 *elasticache.TestFailoverInput, in3 ...request.Option) (*elasticache.TestFailoverOutput, error)

	// WaitUntilCacheClusterAvailableFunc mocks the WaitUntilCacheClusterAvailable method.
	WaitUntilCacheClusterAvailableFunc func(in1 *elasticache.DescribeCacheClustersInput) error

	// WaitUntilCacheClusterAvailableWithContextFunc mocks the WaitUntilCacheClusterAvailableWithContext method.
	WaitUntilCacheClusterAvailableWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeCacheClustersInput, in3 ...request.WaiterOption) error

	// WaitUntilCacheClusterDeletedFunc mocks the WaitUntilCacheClusterDeleted method.
	WaitUntilCacheClusterDeletedFunc func(in1 *elasticache.DescribeCacheClustersInput) error

	// WaitUntilCacheClusterDeletedWithContextFunc mocks the WaitUntilCacheClusterDeletedWithContext method.
	WaitUntilCacheClusterDeletedWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeCacheClustersInput, in3 ...request.WaiterOption) error

	// WaitUntilReplicationGroupAvailableFunc mocks the WaitUntilReplicationGroupAvailable method.
	WaitUntilReplicationGroupAvailableFunc func(in1 *elasticache.DescribeReplicationGroupsInput) error

	// WaitUntilReplicationGroupAvailableWithContextFunc mocks the WaitUntilReplicationGroupAvailableWithContext method.
	WaitUntilReplicationGroupAvailableWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeReplicationGroupsInput, in3 ...request.WaiterOption) error

	// WaitUntilReplicationGroupDeletedFunc mocks the WaitUntilReplicationGroupDeleted method.
	WaitUntilReplicationGroupDeletedFunc func(in1 *elasticache.DescribeReplicationGroupsInput) error

	// WaitUntilReplicationGroupDeletedWithContextFunc mocks the WaitUntilReplicationGroupDeletedWithContext method.
	WaitUntilReplicationGroupDeletedWithContextFunc func(in1 context.Context, in2 *elasticache.DescribeReplicationGroupsInput, in3 ...request.WaiterOption) error

	// calls tracks calls to the methods.
	calls struct {
		// AddTagsToResource holds details about calls to the AddTagsToResource method.
		AddTagsToResource []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.AddTagsToResourceInput
		}
		// AddTagsToResourceRequest holds details about calls to the AddTagsToResourceRequest method.
		AddTagsToResourceRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.AddTagsToResourceInput
		}
		// AddTagsToResourceWithContext holds details about calls to the AddTagsToResourceWithContext method.
		AddTagsToResourceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.AddTagsToResourceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AuthorizeCacheSecurityGroupIngress holds details about calls to the AuthorizeCacheSecurityGroupIngress method.
		AuthorizeCacheSecurityGroupIngress []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.AuthorizeCacheSecurityGroupIngressInput
		}
		// AuthorizeCacheSecurityGroupIngressRequest holds details about calls to the AuthorizeCacheSecurityGroupIngressRequest method.
		AuthorizeCacheSecurityGroupIngressRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.AuthorizeCacheSecurityGroupIngressInput
		}
		// AuthorizeCacheSecurityGroupIngressWithContext holds details about calls to the AuthorizeCacheSecurityGroupIngressWithContext method.
		AuthorizeCacheSecurityGroupIngressWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.AuthorizeCacheSecurityGroupIngressInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// BatchApplyUpdateAction holds details about calls to the BatchApplyUpdateAction method.
		BatchApplyUpdateAction []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.BatchApplyUpdateActionInput
		}
		// BatchApplyUpdateActionRequest holds details about calls to the BatchApplyUpdateActionRequest method.
		BatchApplyUpdateActionRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.BatchApplyUpdateActionInput
		}
		// BatchApplyUpdateActionWithContext holds details about calls to the BatchApplyUpdateActionWithContext method.
		BatchApplyUpdateActionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.BatchApplyUpdateActionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// BatchStopUpdateAction holds details about calls to the BatchStopUpdateAction method.
		BatchStopUpdateAction []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.BatchStopUpdateActionInput
		}
		// BatchStopUpdateActionRequest holds details about calls to the BatchStopUpdateActionRequest method.
		BatchStopUpdateActionRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.BatchStopUpdateActionInput
		}
		// BatchStopUpdateActionWithContext holds details about calls to the BatchStopUpdateActionWithContext method.
		BatchStopUpdateActionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.BatchStopUpdateActionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CompleteMigration holds details about calls to the CompleteMigration method.
		CompleteMigration []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.CompleteMigrationInput
		}
		// CompleteMigrationRequest holds details about calls to the CompleteMigrationRequest method.
		CompleteMigrationRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.CompleteMigrationInput
		}
		// CompleteMigrationWithContext holds details about calls to the CompleteMigrationWithContext method.
		CompleteMigrationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.CompleteMigrationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CopySnapshot holds details about calls to the CopySnapshot method.
		CopySnapshot []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.CopySnapshotInput
		}
		// CopySnapshotRequest holds details about calls to the CopySnapshotRequest method.
		CopySnapshotRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.CopySnapshotInput
		}
		// CopySnapshotWithContext holds details about calls to the CopySnapshotWithContext method.
		CopySnapshotWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.CopySnapshotInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateCacheCluster holds details about calls to the CreateCacheCluster method.
		CreateCacheCluster []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.CreateCacheClusterInput
		}
		// CreateCacheClusterRequest holds details about calls to the CreateCacheClusterRequest method.
		CreateCacheClusterRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.CreateCacheClusterInput
		}
		// CreateCacheClusterWithContext holds details about calls to the CreateCacheClusterWithContext method.
		CreateCacheClusterWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.CreateCacheClusterInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateCacheParameterGroup holds details about calls to the CreateCacheParameterGroup method.
		CreateCacheParameterGroup []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.CreateCacheParameterGroupInput
		}
		// CreateCacheParameterGroupRequest holds details about calls to the CreateCacheParameterGroupRequest method.
		CreateCacheParameterGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.CreateCacheParameterGroupInput
		}
		// CreateCacheParameterGroupWithContext holds details about calls to the CreateCacheParameterGroupWithContext method.
		CreateCacheParameterGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.CreateCacheParameterGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateCacheSecurityGroup holds details about calls to the CreateCacheSecurityGroup method.
		CreateCacheSecurityGroup []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.CreateCacheSecurityGroupInput
		}
		// CreateCacheSecurityGroupRequest holds details about calls to the CreateCacheSecurityGroupRequest method.
		CreateCacheSecurityGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.CreateCacheSecurityGroupInput
		}
		// CreateCacheSecurityGroupWithContext holds details about calls to the CreateCacheSecurityGroupWithContext method.
		CreateCacheSecurityGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.CreateCacheSecurityGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateCacheSubnetGroup holds details about calls to the CreateCacheSubnetGroup method.
		CreateCacheSubnetGroup []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.CreateCacheSubnetGroupInput
		}
		// CreateCacheSubnetGroupRequest holds details about calls to the CreateCacheSubnetGroupRequest method.
		CreateCacheSubnetGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.CreateCacheSubnetGroupInput
		}
		// CreateCacheSubnetGroupWithContext holds details about calls to the CreateCacheSubnetGroupWithContext method.
		CreateCacheSubnetGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.CreateCacheSubnetGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateReplicationGroup holds details about calls to the CreateReplicationGroup method.
		CreateReplicationGroup []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.CreateReplicationGroupInput
		}
		// CreateReplicationGroupRequest holds details about calls to the CreateReplicationGroupRequest method.
		CreateReplicationGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.CreateReplicationGroupInput
		}
		// CreateReplicationGroupWithContext holds details about calls to the CreateReplicationGroupWithContext method.
		CreateReplicationGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.CreateReplicationGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateSnapshot holds details about calls to the CreateSnapshot method.
		CreateSnapshot []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.CreateSnapshotInput
		}
		// CreateSnapshotRequest holds details about calls to the CreateSnapshotRequest method.
		CreateSnapshotRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.CreateSnapshotInput
		}
		// CreateSnapshotWithContext holds details about calls to the CreateSnapshotWithContext method.
		CreateSnapshotWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.CreateSnapshotInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DecreaseReplicaCount holds details about calls to the DecreaseReplicaCount method.
		DecreaseReplicaCount []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DecreaseReplicaCountInput
		}
		// DecreaseReplicaCountRequest holds details about calls to the DecreaseReplicaCountRequest method.
		DecreaseReplicaCountRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DecreaseReplicaCountInput
		}
		// DecreaseReplicaCountWithContext holds details about calls to the DecreaseReplicaCountWithContext method.
		DecreaseReplicaCountWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DecreaseReplicaCountInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteCacheCluster holds details about calls to the DeleteCacheCluster method.
		DeleteCacheCluster []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DeleteCacheClusterInput
		}
		// DeleteCacheClusterRequest holds details about calls to the DeleteCacheClusterRequest method.
		DeleteCacheClusterRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DeleteCacheClusterInput
		}
		// DeleteCacheClusterWithContext holds details about calls to the DeleteCacheClusterWithContext method.
		DeleteCacheClusterWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DeleteCacheClusterInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteCacheParameterGroup holds details about calls to the DeleteCacheParameterGroup method.
		DeleteCacheParameterGroup []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DeleteCacheParameterGroupInput
		}
		// DeleteCacheParameterGroupRequest holds details about calls to the DeleteCacheParameterGroupRequest method.
		DeleteCacheParameterGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DeleteCacheParameterGroupInput
		}
		// DeleteCacheParameterGroupWithContext holds details about calls to the DeleteCacheParameterGroupWithContext method.
		DeleteCacheParameterGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DeleteCacheParameterGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteCacheSecurityGroup holds details about calls to the DeleteCacheSecurityGroup method.
		DeleteCacheSecurityGroup []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DeleteCacheSecurityGroupInput
		}
		// DeleteCacheSecurityGroupRequest holds details about calls to the DeleteCacheSecurityGroupRequest method.
		DeleteCacheSecurityGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DeleteCacheSecurityGroupInput
		}
		// DeleteCacheSecurityGroupWithContext holds details about calls to the DeleteCacheSecurityGroupWithContext method.
		DeleteCacheSecurityGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DeleteCacheSecurityGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteCacheSubnetGroup holds details about calls to the DeleteCacheSubnetGroup method.
		DeleteCacheSubnetGroup []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DeleteCacheSubnetGroupInput
		}
		// DeleteCacheSubnetGroupRequest holds details about calls to the DeleteCacheSubnetGroupRequest method.
		DeleteCacheSubnetGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DeleteCacheSubnetGroupInput
		}
		// DeleteCacheSubnetGroupWithContext holds details about calls to the DeleteCacheSubnetGroupWithContext method.
		DeleteCacheSubnetGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DeleteCacheSubnetGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteReplicationGroup holds details about calls to the DeleteReplicationGroup method.
		DeleteReplicationGroup []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DeleteReplicationGroupInput
		}
		// DeleteReplicationGroupRequest holds details about calls to the DeleteReplicationGroupRequest method.
		DeleteReplicationGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DeleteReplicationGroupInput
		}
		// DeleteReplicationGroupWithContext holds details about calls to the DeleteReplicationGroupWithContext method.
		DeleteReplicationGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DeleteReplicationGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteSnapshot holds details about calls to the DeleteSnapshot method.
		DeleteSnapshot []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DeleteSnapshotInput
		}
		// DeleteSnapshotRequest holds details about calls to the DeleteSnapshotRequest method.
		DeleteSnapshotRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DeleteSnapshotInput
		}
		// DeleteSnapshotWithContext holds details about calls to the DeleteSnapshotWithContext method.
		DeleteSnapshotWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DeleteSnapshotInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeCacheClusters holds details about calls to the DescribeCacheClusters method.
		DescribeCacheClusters []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeCacheClustersInput
		}
		// DescribeCacheClustersPages holds details about calls to the DescribeCacheClustersPages method.
		DescribeCacheClustersPages []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeCacheClustersInput
			// In2 is the in2 argument value.
			In2 func(*elasticache.DescribeCacheClustersOutput, bool) bool
		}
		// DescribeCacheClustersPagesWithContext holds details about calls to the DescribeCacheClustersPagesWithContext method.
		DescribeCacheClustersPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeCacheClustersInput
			// In3 is the in3 argument value.
			In3 func(*elasticache.DescribeCacheClustersOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeCacheClustersRequest holds details about calls to the DescribeCacheClustersRequest method.
		DescribeCacheClustersRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeCacheClustersInput
		}
		// DescribeCacheClustersWithContext holds details about calls to the DescribeCacheClustersWithContext method.
		DescribeCacheClustersWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeCacheClustersInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeCacheEngineVersions holds details about calls to the DescribeCacheEngineVersions method.
		DescribeCacheEngineVersions []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeCacheEngineVersionsInput
		}
		// DescribeCacheEngineVersionsPages holds details about calls to the DescribeCacheEngineVersionsPages method.
		DescribeCacheEngineVersionsPages []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeCacheEngineVersionsInput
			// In2 is the in2 argument value.
			In2 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool
		}
		// DescribeCacheEngineVersionsPagesWithContext holds details about calls to the DescribeCacheEngineVersionsPagesWithContext method.
		DescribeCacheEngineVersionsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeCacheEngineVersionsInput
			// In3 is the in3 argument value.
			In3 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeCacheEngineVersionsRequest holds details about calls to the DescribeCacheEngineVersionsRequest method.
		DescribeCacheEngineVersionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeCacheEngineVersionsInput
		}
		// DescribeCacheEngineVersionsWithContext holds details about calls to the DescribeCacheEngineVersionsWithContext method.
		DescribeCacheEngineVersionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeCacheEngineVersionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeCacheParameterGroups holds details about calls to the DescribeCacheParameterGroups method.
		DescribeCacheParameterGroups []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeCacheParameterGroupsInput
		}
		// DescribeCacheParameterGroupsPages holds details about calls to the DescribeCacheParameterGroupsPages method.
		DescribeCacheParameterGroupsPages []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeCacheParameterGroupsInput
			// In2 is the in2 argument value.
			In2 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool
		}
		// DescribeCacheParameterGroupsPagesWithContext holds details about calls to the DescribeCacheParameterGroupsPagesWithContext method.
		DescribeCacheParameterGroupsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeCacheParameterGroupsInput
			// In3 is the in3 argument value.
			In3 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeCacheParameterGroupsRequest holds details about calls to the DescribeCacheParameterGroupsRequest method.
		DescribeCacheParameterGroupsRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeCacheParameterGroupsInput
		}
		// DescribeCacheParameterGroupsWithContext holds details about calls to the DescribeCacheParameterGroupsWithContext method.
		DescribeCacheParameterGroupsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeCacheParameterGroupsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeCacheParameters holds details about calls to the DescribeCacheParameters method.
		DescribeCacheParameters []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeCacheParametersInput
		}
		// DescribeCacheParametersPages holds details about calls to the DescribeCacheParametersPages method.
		DescribeCacheParametersPages []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeCacheParametersInput
			// In2 is the in2 argument value.
			In2 func(*elasticache.DescribeCacheParametersOutput, bool) bool
		}
		// DescribeCacheParametersPagesWithContext holds details about calls to the DescribeCacheParametersPagesWithContext method.
		DescribeCacheParametersPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeCacheParametersInput
			// In3 is the in3 argument value.
			In3 func(*elasticache.DescribeCacheParametersOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeCacheParametersRequest holds details about calls to the DescribeCacheParametersRequest method.
		DescribeCacheParametersRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeCacheParametersInput
		}
		// DescribeCacheParametersWithContext holds details about calls to the DescribeCacheParametersWithContext method.
		DescribeCacheParametersWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeCacheParametersInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeCacheSecurityGroups holds details about calls to the DescribeCacheSecurityGroups method.
		DescribeCacheSecurityGroups []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeCacheSecurityGroupsInput
		}
		// DescribeCacheSecurityGroupsPages holds details about calls to the DescribeCacheSecurityGroupsPages method.
		DescribeCacheSecurityGroupsPages []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeCacheSecurityGroupsInput
			// In2 is the in2 argument value.
			In2 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool
		}
		// DescribeCacheSecurityGroupsPagesWithContext holds details about calls to the DescribeCacheSecurityGroupsPagesWithContext method.
		DescribeCacheSecurityGroupsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeCacheSecurityGroupsInput
			// In3 is the in3 argument value.
			In3 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeCacheSecurityGroupsRequest holds details about calls to the DescribeCacheSecurityGroupsRequest method.
		DescribeCacheSecurityGroupsRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeCacheSecurityGroupsInput
		}
		// DescribeCacheSecurityGroupsWithContext holds details about calls to the DescribeCacheSecurityGroupsWithContext method.
		DescribeCacheSecurityGroupsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeCacheSecurityGroupsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeCacheSubnetGroups holds details about calls to the DescribeCacheSubnetGroups method.
		DescribeCacheSubnetGroups []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeCacheSubnetGroupsInput
		}
		// DescribeCacheSubnetGroupsPages holds details about calls to the DescribeCacheSubnetGroupsPages method.
		DescribeCacheSubnetGroupsPages []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeCacheSubnetGroupsInput
			// In2 is the in2 argument value.
			In2 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool
		}
		// DescribeCacheSubnetGroupsPagesWithContext holds details about calls to the DescribeCacheSubnetGroupsPagesWithContext method.
		DescribeCacheSubnetGroupsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeCacheSubnetGroupsInput
			// In3 is the in3 argument value.
			In3 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeCacheSubnetGroupsRequest holds details about calls to the DescribeCacheSubnetGroupsRequest method.
		DescribeCacheSubnetGroupsRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeCacheSubnetGroupsInput
		}
		// DescribeCacheSubnetGroupsWithContext holds details about calls to the DescribeCacheSubnetGroupsWithContext method.
		DescribeCacheSubnetGroupsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeCacheSubnetGroupsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeEngineDefaultParameters holds details about calls to the DescribeEngineDefaultParameters method.
		DescribeEngineDefaultParameters []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeEngineDefaultParametersInput
		}
		// DescribeEngineDefaultParametersPages holds details about calls to the DescribeEngineDefaultParametersPages method.
		DescribeEngineDefaultParametersPages []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeEngineDefaultParametersInput
			// In2 is the in2 argument value.
			In2 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool
		}
		// DescribeEngineDefaultParametersPagesWithContext holds details about calls to the DescribeEngineDefaultParametersPagesWithContext method.
		DescribeEngineDefaultParametersPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeEngineDefaultParametersInput
			// In3 is the in3 argument value.
			In3 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeEngineDefaultParametersRequest holds details about calls to the DescribeEngineDefaultParametersRequest method.
		DescribeEngineDefaultParametersRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeEngineDefaultParametersInput
		}
		// DescribeEngineDefaultParametersWithContext holds details about calls to the DescribeEngineDefaultParametersWithContext method.
		DescribeEngineDefaultParametersWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeEngineDefaultParametersInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeEvents holds details about calls to the DescribeEvents method.
		DescribeEvents []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeEventsInput
		}
		// DescribeEventsPages holds details about calls to the DescribeEventsPages method.
		DescribeEventsPages []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeEventsInput
			// In2 is the in2 argument value.
			In2 func(*elasticache.DescribeEventsOutput, bool) bool
		}
		// DescribeEventsPagesWithContext holds details about calls to the DescribeEventsPagesWithContext method.
		DescribeEventsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeEventsInput
			// In3 is the in3 argument value.
			In3 func(*elasticache.DescribeEventsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeEventsRequest holds details about calls to the DescribeEventsRequest method.
		DescribeEventsRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeEventsInput
		}
		// DescribeEventsWithContext holds details about calls to the DescribeEventsWithContext method.
		DescribeEventsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeEventsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeReplicationGroups holds details about calls to the DescribeReplicationGroups method.
		DescribeReplicationGroups []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeReplicationGroupsInput
		}
		// DescribeReplicationGroupsPages holds details about calls to the DescribeReplicationGroupsPages method.
		DescribeReplicationGroupsPages []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeReplicationGroupsInput
			// In2 is the in2 argument value.
			In2 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool
		}
		// DescribeReplicationGroupsPagesWithContext holds details about calls to the DescribeReplicationGroupsPagesWithContext method.
		DescribeReplicationGroupsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeReplicationGroupsInput
			// In3 is the in3 argument value.
			In3 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeReplicationGroupsRequest holds details about calls to the DescribeReplicationGroupsRequest method.
		DescribeReplicationGroupsRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeReplicationGroupsInput
		}
		// DescribeReplicationGroupsWithContext holds details about calls to the DescribeReplicationGroupsWithContext method.
		DescribeReplicationGroupsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeReplicationGroupsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeReservedCacheNodes holds details about calls to the DescribeReservedCacheNodes method.
		DescribeReservedCacheNodes []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeReservedCacheNodesInput
		}
		// DescribeReservedCacheNodesOfferings holds details about calls to the DescribeReservedCacheNodesOfferings method.
		DescribeReservedCacheNodesOfferings []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeReservedCacheNodesOfferingsInput
		}
		// DescribeReservedCacheNodesOfferingsPages holds details about calls to the DescribeReservedCacheNodesOfferingsPages method.
		DescribeReservedCacheNodesOfferingsPages []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeReservedCacheNodesOfferingsInput
			// In2 is the in2 argument value.
			In2 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool
		}
		// DescribeReservedCacheNodesOfferingsPagesWithContext holds details about calls to the DescribeReservedCacheNodesOfferingsPagesWithContext method.
		DescribeReservedCacheNodesOfferingsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeReservedCacheNodesOfferingsInput
			// In3 is the in3 argument value.
			In3 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeReservedCacheNodesOfferingsRequest holds details about calls to the DescribeReservedCacheNodesOfferingsRequest method.
		DescribeReservedCacheNodesOfferingsRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeReservedCacheNodesOfferingsInput
		}
		// DescribeReservedCacheNodesOfferingsWithContext holds details about calls to the DescribeReservedCacheNodesOfferingsWithContext method.
		DescribeReservedCacheNodesOfferingsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeReservedCacheNodesOfferingsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeReservedCacheNodesPages holds details about calls to the DescribeReservedCacheNodesPages method.
		DescribeReservedCacheNodesPages []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeReservedCacheNodesInput
			// In2 is the in2 argument value.
			In2 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool
		}
		// DescribeReservedCacheNodesPagesWithContext holds details about calls to the DescribeReservedCacheNodesPagesWithContext method.
		DescribeReservedCacheNodesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeReservedCacheNodesInput
			// In3 is the in3 argument value.
			In3 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeReservedCacheNodesRequest holds details about calls to the DescribeReservedCacheNodesRequest method.
		DescribeReservedCacheNodesRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeReservedCacheNodesInput
		}
		// DescribeReservedCacheNodesWithContext holds details about calls to the DescribeReservedCacheNodesWithContext method.
		DescribeReservedCacheNodesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeReservedCacheNodesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeServiceUpdates holds details about calls to the DescribeServiceUpdates method.
		DescribeServiceUpdates []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeServiceUpdatesInput
		}
		// DescribeServiceUpdatesPages holds details about calls to the DescribeServiceUpdatesPages method.
		DescribeServiceUpdatesPages []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeServiceUpdatesInput
			// In2 is the in2 argument value.
			In2 func(*elasticache.DescribeServiceUpdatesOutput, bool) bool
		}
		// DescribeServiceUpdatesPagesWithContext holds details about calls to the DescribeServiceUpdatesPagesWithContext method.
		DescribeServiceUpdatesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeServiceUpdatesInput
			// In3 is the in3 argument value.
			In3 func(*elasticache.DescribeServiceUpdatesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeServiceUpdatesRequest holds details about calls to the DescribeServiceUpdatesRequest method.
		DescribeServiceUpdatesRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeServiceUpdatesInput
		}
		// DescribeServiceUpdatesWithContext holds details about calls to the DescribeServiceUpdatesWithContext method.
		DescribeServiceUpdatesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeServiceUpdatesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeSnapshots holds details about calls to the DescribeSnapshots method.
		DescribeSnapshots []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeSnapshotsInput
		}
		// DescribeSnapshotsPages holds details about calls to the DescribeSnapshotsPages method.
		DescribeSnapshotsPages []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeSnapshotsInput
			// In2 is the in2 argument value.
			In2 func(*elasticache.DescribeSnapshotsOutput, bool) bool
		}
		// DescribeSnapshotsPagesWithContext holds details about calls to the DescribeSnapshotsPagesWithContext method.
		DescribeSnapshotsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeSnapshotsInput
			// In3 is the in3 argument value.
			In3 func(*elasticache.DescribeSnapshotsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeSnapshotsRequest holds details about calls to the DescribeSnapshotsRequest method.
		DescribeSnapshotsRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeSnapshotsInput
		}
		// DescribeSnapshotsWithContext holds details about calls to the DescribeSnapshotsWithContext method.
		DescribeSnapshotsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeSnapshotsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeUpdateActions holds details about calls to the DescribeUpdateActions method.
		DescribeUpdateActions []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeUpdateActionsInput
		}
		// DescribeUpdateActionsPages holds details about calls to the DescribeUpdateActionsPages method.
		DescribeUpdateActionsPages []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeUpdateActionsInput
			// In2 is the in2 argument value.
			In2 func(*elasticache.DescribeUpdateActionsOutput, bool) bool
		}
		// DescribeUpdateActionsPagesWithContext holds details about calls to the DescribeUpdateActionsPagesWithContext method.
		DescribeUpdateActionsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeUpdateActionsInput
			// In3 is the in3 argument value.
			In3 func(*elasticache.DescribeUpdateActionsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeUpdateActionsRequest holds details about calls to the DescribeUpdateActionsRequest method.
		DescribeUpdateActionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeUpdateActionsInput
		}
		// DescribeUpdateActionsWithContext holds details about calls to the DescribeUpdateActionsWithContext method.
		DescribeUpdateActionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeUpdateActionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// IncreaseReplicaCount holds details about calls to the IncreaseReplicaCount method.
		IncreaseReplicaCount []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.IncreaseReplicaCountInput
		}
		// IncreaseReplicaCountRequest holds details about calls to the IncreaseReplicaCountRequest method.
		IncreaseReplicaCountRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.IncreaseReplicaCountInput
		}
		// IncreaseReplicaCountWithContext holds details about calls to the IncreaseReplicaCountWithContext method.
		IncreaseReplicaCountWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.IncreaseReplicaCountInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListAllowedNodeTypeModifications holds details about calls to the ListAllowedNodeTypeModifications method.
		ListAllowedNodeTypeModifications []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.ListAllowedNodeTypeModificationsInput
		}
		// ListAllowedNodeTypeModificationsRequest holds details about calls to the ListAllowedNodeTypeModificationsRequest method.
		ListAllowedNodeTypeModificationsRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.ListAllowedNodeTypeModificationsInput
		}
		// ListAllowedNodeTypeModificationsWithContext holds details about calls to the ListAllowedNodeTypeModificationsWithContext method.
		ListAllowedNodeTypeModificationsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.ListAllowedNodeTypeModificationsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListTagsForResource holds details about calls to the ListTagsForResource method.
		ListTagsForResource []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.ListTagsForResourceInput
		}
		// ListTagsForResourceRequest holds details about calls to the ListTagsForResourceRequest method.
		ListTagsForResourceRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.ListTagsForResourceInput
		}
		// ListTagsForResourceWithContext holds details about calls to the ListTagsForResourceWithContext method.
		ListTagsForResourceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.ListTagsForResourceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyCacheCluster holds details about calls to the ModifyCacheCluster method.
		ModifyCacheCluster []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.ModifyCacheClusterInput
		}
		// ModifyCacheClusterRequest holds details about calls to the ModifyCacheClusterRequest method.
		ModifyCacheClusterRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.ModifyCacheClusterInput
		}
		// ModifyCacheClusterWithContext holds details about calls to the ModifyCacheClusterWithContext method.
		ModifyCacheClusterWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.ModifyCacheClusterInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyCacheParameterGroup holds details about calls to the ModifyCacheParameterGroup method.
		ModifyCacheParameterGroup []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.ModifyCacheParameterGroupInput
		}
		// ModifyCacheParameterGroupRequest holds details about calls to the ModifyCacheParameterGroupRequest method.
		ModifyCacheParameterGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.ModifyCacheParameterGroupInput
		}
		// ModifyCacheParameterGroupWithContext holds details about calls to the ModifyCacheParameterGroupWithContext method.
		ModifyCacheParameterGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.ModifyCacheParameterGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyCacheSubnetGroup holds details about calls to the ModifyCacheSubnetGroup method.
		ModifyCacheSubnetGroup []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.ModifyCacheSubnetGroupInput
		}
		// ModifyCacheSubnetGroupRequest holds details about calls to the ModifyCacheSubnetGroupRequest method.
		ModifyCacheSubnetGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.ModifyCacheSubnetGroupInput
		}
		// ModifyCacheSubnetGroupWithContext holds details about calls to the ModifyCacheSubnetGroupWithContext method.
		ModifyCacheSubnetGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.ModifyCacheSubnetGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyReplicationGroup holds details about calls to the ModifyReplicationGroup method.
		ModifyReplicationGroup []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.ModifyReplicationGroupInput
		}
		// ModifyReplicationGroupRequest holds details about calls to the ModifyReplicationGroupRequest method.
		ModifyReplicationGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.ModifyReplicationGroupInput
		}
		// ModifyReplicationGroupShardConfiguration holds details about calls to the ModifyReplicationGroupShardConfiguration method.
		ModifyReplicationGroupShardConfiguration []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.ModifyReplicationGroupShardConfigurationInput
		}
		// ModifyReplicationGroupShardConfigurationRequest holds details about calls to the ModifyReplicationGroupShardConfigurationRequest method.
		ModifyReplicationGroupShardConfigurationRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.ModifyReplicationGroupShardConfigurationInput
		}
		// ModifyReplicationGroupShardConfigurationWithContext holds details about calls to the ModifyReplicationGroupShardConfigurationWithContext method.
		ModifyReplicationGroupShardConfigurationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.ModifyReplicationGroupShardConfigurationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyReplicationGroupWithContext holds details about calls to the ModifyReplicationGroupWithContext method.
		ModifyReplicationGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.ModifyReplicationGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PurchaseReservedCacheNodesOffering holds details about calls to the PurchaseReservedCacheNodesOffering method.
		PurchaseReservedCacheNodesOffering []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.PurchaseReservedCacheNodesOfferingInput
		}
		// PurchaseReservedCacheNodesOfferingRequest holds details about calls to the PurchaseReservedCacheNodesOfferingRequest method.
		PurchaseReservedCacheNodesOfferingRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.PurchaseReservedCacheNodesOfferingInput
		}
		// PurchaseReservedCacheNodesOfferingWithContext holds details about calls to the PurchaseReservedCacheNodesOfferingWithContext method.
		PurchaseReservedCacheNodesOfferingWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.PurchaseReservedCacheNodesOfferingInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RebootCacheCluster holds details about calls to the RebootCacheCluster method.
		RebootCacheCluster []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.RebootCacheClusterInput
		}
		// RebootCacheClusterRequest holds details about calls to the RebootCacheClusterRequest method.
		RebootCacheClusterRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.RebootCacheClusterInput
		}
		// RebootCacheClusterWithContext holds details about calls to the RebootCacheClusterWithContext method.
		RebootCacheClusterWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.RebootCacheClusterInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RemoveTagsFromResource holds details about calls to the RemoveTagsFromResource method.
		RemoveTagsFromResource []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.RemoveTagsFromResourceInput
		}
		// RemoveTagsFromResourceRequest holds details about calls to the RemoveTagsFromResourceRequest method.
		RemoveTagsFromResourceRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.RemoveTagsFromResourceInput
		}
		// RemoveTagsFromResourceWithContext holds details about calls to the RemoveTagsFromResourceWithContext method.
		RemoveTagsFromResourceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.RemoveTagsFromResourceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ResetCacheParameterGroup holds details about calls to the ResetCacheParameterGroup method.
		ResetCacheParameterGroup []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.ResetCacheParameterGroupInput
		}
		// ResetCacheParameterGroupRequest holds details about calls to the ResetCacheParameterGroupRequest method.
		ResetCacheParameterGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.ResetCacheParameterGroupInput
		}
		// ResetCacheParameterGroupWithContext holds details about calls to the ResetCacheParameterGroupWithContext method.
		ResetCacheParameterGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.ResetCacheParameterGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RevokeCacheSecurityGroupIngress holds details about calls to the RevokeCacheSecurityGroupIngress method.
		RevokeCacheSecurityGroupIngress []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.RevokeCacheSecurityGroupIngressInput
		}
		// RevokeCacheSecurityGroupIngressRequest holds details about calls to the RevokeCacheSecurityGroupIngressRequest method.
		RevokeCacheSecurityGroupIngressRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.RevokeCacheSecurityGroupIngressInput
		}
		// RevokeCacheSecurityGroupIngressWithContext holds details about calls to the RevokeCacheSecurityGroupIngressWithContext method.
		RevokeCacheSecurityGroupIngressWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.RevokeCacheSecurityGroupIngressInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// StartMigration holds details about calls to the StartMigration method.
		StartMigration []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.StartMigrationInput
		}
		// StartMigrationRequest holds details about calls to the StartMigrationRequest method.
		StartMigrationRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.StartMigrationInput
		}
		// StartMigrationWithContext holds details about calls to the StartMigrationWithContext method.
		StartMigrationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.StartMigrationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// TestFailover holds details about calls to the TestFailover method.
		TestFailover []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.TestFailoverInput
		}
		// TestFailoverRequest holds details about calls to the TestFailoverRequest method.
		TestFailoverRequest []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.TestFailoverInput
		}
		// TestFailoverWithContext holds details about calls to the TestFailoverWithContext method.
		TestFailoverWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.TestFailoverInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// WaitUntilCacheClusterAvailable holds details about calls to the WaitUntilCacheClusterAvailable method.
		WaitUntilCacheClusterAvailable []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeCacheClustersInput
		}
		// WaitUntilCacheClusterAvailableWithContext holds details about calls to the WaitUntilCacheClusterAvailableWithContext method.
		WaitUntilCacheClusterAvailableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeCacheClustersInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilCacheClusterDeleted holds details about calls to the WaitUntilCacheClusterDeleted method.
		WaitUntilCacheClusterDeleted []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeCacheClustersInput
		}
		// WaitUntilCacheClusterDeletedWithContext holds details about calls to the WaitUntilCacheClusterDeletedWithContext method.
		WaitUntilCacheClusterDeletedWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeCacheClustersInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilReplicationGroupAvailable holds details about calls to the WaitUntilReplicationGroupAvailable method.
		WaitUntilReplicationGroupAvailable []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeReplicationGroupsInput
		}
		// WaitUntilReplicationGroupAvailableWithContext holds details about calls to the WaitUntilReplicationGroupAvailableWithContext method.
		WaitUntilReplicationGroupAvailableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeReplicationGroupsInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilReplicationGroupDeleted holds details about calls to the WaitUntilReplicationGroupDeleted method.
		WaitUntilReplicationGroupDeleted []struct {
			// In1 is the in1 argument value.
			In1 *elasticache.DescribeReplicationGroupsInput
		}
		// WaitUntilReplicationGroupDeletedWithContext holds details about calls to the WaitUntilReplicationGroupDeletedWithContext method.
		WaitUntilReplicationGroupDeletedWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *elasticache.DescribeReplicationGroupsInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
	}
}

// AddTagsToResource calls AddTagsToResourceFunc.
func (mock *elasticacheClientMock) AddTagsToResource(in1 *elasticache.AddTagsToResourceInput) (*elasticache.TagListMessage, error) {
	if mock.AddTagsToResourceFunc == nil {
		panic("elasticacheClientMock.AddTagsToResourceFunc: method is nil but elasticacheClient.AddTagsToResource was just called")
	}
	callInfo := struct {
		In1 *elasticache.AddTagsToResourceInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockAddTagsToResource.Lock()
	mock.calls.AddTagsToResource = append(mock.calls.AddTagsToResource, callInfo)
	lockelasticacheClientMockAddTagsToResource.Unlock()
	return mock.AddTagsToResourceFunc(in1)
}

// AddTagsToResourceCalls gets all the calls that were made to AddTagsToResource.
// Check the length with:
//     len(mockedelasticacheClient.AddTagsToResourceCalls())
func (mock *elasticacheClientMock) AddTagsToResourceCalls() []struct {
	In1 *elasticache.AddTagsToResourceInput
} {
	var calls []struct {
		In1 *elasticache.AddTagsToResourceInput
	}
	lockelasticacheClientMockAddTagsToResource.RLock()
	calls = mock.calls.AddTagsToResource
	lockelasticacheClientMockAddTagsToResource.RUnlock()
	return calls
}

// AddTagsToResourceRequest calls AddTagsToResourceRequestFunc.
func (mock *elasticacheClientMock) AddTagsToResourceRequest(in1 *elasticache.AddTagsToResourceInput) (*request.Request, *elasticache.TagListMessage) {
	if mock.AddTagsToResourceRequestFunc == nil {
		panic("elasticacheClientMock.AddTagsToResourceRequestFunc: method is nil but elasticacheClient.AddTagsToResourceRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.AddTagsToResourceInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockAddTagsToResourceRequest.Lock()
	mock.calls.AddTagsToResourceRequest = append(mock.calls.AddTagsToResourceRequest, callInfo)
	lockelasticacheClientMockAddTagsToResourceRequest.Unlock()
	return mock.AddTagsToResourceRequestFunc(in1)
}

// AddTagsToResourceRequestCalls gets all the calls that were made to AddTagsToResourceRequest.
// Check the length with:
//     len(mockedelasticacheClient.AddTagsToResourceRequestCalls())
func (mock *elasticacheClientMock) AddTagsToResourceRequestCalls() []struct {
	In1 *elasticache.AddTagsToResourceInput
} {
	var calls []struct {
		In1 *elasticache.AddTagsToResourceInput
	}
	lockelasticacheClientMockAddTagsToResourceRequest.RLock()
	calls = mock.calls.AddTagsToResourceRequest
	lockelasticacheClientMockAddTagsToResourceRequest.RUnlock()
	return calls
}

// AddTagsToResourceWithContext calls AddTagsToResourceWithContextFunc.
func (mock *elasticacheClientMock) AddTagsToResourceWithContext(in1 context.Context, in2 *elasticache.AddTagsToResourceInput, in3 ...request.Option) (*elasticache.TagListMessage, error) {
	if mock.AddTagsToResourceWithContextFunc == nil {
		panic("elasticacheClientMock.AddTagsToResourceWithContextFunc: method is nil but elasticacheClient.AddTagsToResourceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.AddTagsToResourceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockAddTagsToResourceWithContext.Lock()
	mock.calls.AddTagsToResourceWithContext = append(mock.calls.AddTagsToResourceWithContext, callInfo)
	lockelasticacheClientMockAddTagsToResourceWithContext.Unlock()
	return mock.AddTagsToResourceWithContextFunc(in1, in2, in3...)
}

// AddTagsToResourceWithContextCalls gets all the calls that were made to AddTagsToResourceWithContext.
// Check the length with:
//     len(mockedelasticacheClient.AddTagsToResourceWithContextCalls())
func (mock *elasticacheClientMock) AddTagsToResourceWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.AddTagsToResourceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.AddTagsToResourceInput
		In3 []request.Option
	}
	lockelasticacheClientMockAddTagsToResourceWithContext.RLock()
	calls = mock.calls.AddTagsToResourceWithContext
	lockelasticacheClientMockAddTagsToResourceWithContext.RUnlock()
	return calls
}

// AuthorizeCacheSecurityGroupIngress calls AuthorizeCacheSecurityGroupIngressFunc.
func (mock *elasticacheClientMock) AuthorizeCacheSecurityGroupIngress(in1 *elasticache.AuthorizeCacheSecurityGroupIngressInput) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error) {
	if mock.AuthorizeCacheSecurityGroupIngressFunc == nil {
		panic("elasticacheClientMock.AuthorizeCacheSecurityGroupIngressFunc: method is nil but elasticacheClient.AuthorizeCacheSecurityGroupIngress was just called")
	}
	callInfo := struct {
		In1 *elasticache.AuthorizeCacheSecurityGroupIngressInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockAuthorizeCacheSecurityGroupIngress.Lock()
	mock.calls.AuthorizeCacheSecurityGroupIngress = append(mock.calls.AuthorizeCacheSecurityGroupIngress, callInfo)
	lockelasticacheClientMockAuthorizeCacheSecurityGroupIngress.Unlock()
	return mock.AuthorizeCacheSecurityGroupIngressFunc(in1)
}

// AuthorizeCacheSecurityGroupIngressCalls gets all the calls that were made to AuthorizeCacheSecurityGroupIngress.
// Check the length with:
//     len(mockedelasticacheClient.AuthorizeCacheSecurityGroupIngressCalls())
func (mock *elasticacheClientMock) AuthorizeCacheSecurityGroupIngressCalls() []struct {
	In1 *elasticache.AuthorizeCacheSecurityGroupIngressInput
} {
	var calls []struct {
		In1 *elasticache.AuthorizeCacheSecurityGroupIngressInput
	}
	lockelasticacheClientMockAuthorizeCacheSecurityGroupIngress.RLock()
	calls = mock.calls.AuthorizeCacheSecurityGroupIngress
	lockelasticacheClientMockAuthorizeCacheSecurityGroupIngress.RUnlock()
	return calls
}

// AuthorizeCacheSecurityGroupIngressRequest calls AuthorizeCacheSecurityGroupIngressRequestFunc.
func (mock *elasticacheClientMock) AuthorizeCacheSecurityGroupIngressRequest(in1 *elasticache.AuthorizeCacheSecurityGroupIngressInput) (*request.Request, *elasticache.AuthorizeCacheSecurityGroupIngressOutput) {
	if mock.AuthorizeCacheSecurityGroupIngressRequestFunc == nil {
		panic("elasticacheClientMock.AuthorizeCacheSecurityGroupIngressRequestFunc: method is nil but elasticacheClient.AuthorizeCacheSecurityGroupIngressRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.AuthorizeCacheSecurityGroupIngressInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockAuthorizeCacheSecurityGroupIngressRequest.Lock()
	mock.calls.AuthorizeCacheSecurityGroupIngressRequest = append(mock.calls.AuthorizeCacheSecurityGroupIngressRequest, callInfo)
	lockelasticacheClientMockAuthorizeCacheSecurityGroupIngressRequest.Unlock()
	return mock.AuthorizeCacheSecurityGroupIngressRequestFunc(in1)
}

// AuthorizeCacheSecurityGroupIngressRequestCalls gets all the calls that were made to AuthorizeCacheSecurityGroupIngressRequest.
// Check the length with:
//     len(mockedelasticacheClient.AuthorizeCacheSecurityGroupIngressRequestCalls())
func (mock *elasticacheClientMock) AuthorizeCacheSecurityGroupIngressRequestCalls() []struct {
	In1 *elasticache.AuthorizeCacheSecurityGroupIngressInput
} {
	var calls []struct {
		In1 *elasticache.AuthorizeCacheSecurityGroupIngressInput
	}
	lockelasticacheClientMockAuthorizeCacheSecurityGroupIngressRequest.RLock()
	calls = mock.calls.AuthorizeCacheSecurityGroupIngressRequest
	lockelasticacheClientMockAuthorizeCacheSecurityGroupIngressRequest.RUnlock()
	return calls
}

// AuthorizeCacheSecurityGroupIngressWithContext calls AuthorizeCacheSecurityGroupIngressWithContextFunc.
func (mock *elasticacheClientMock) AuthorizeCacheSecurityGroupIngressWithContext(in1 context.Context, in2 *elasticache.AuthorizeCacheSecurityGroupIngressInput, in3 ...request.Option) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error) {
	if mock.AuthorizeCacheSecurityGroupIngressWithContextFunc == nil {
		panic("elasticacheClientMock.AuthorizeCacheSecurityGroupIngressWithContextFunc: method is nil but elasticacheClient.AuthorizeCacheSecurityGroupIngressWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.AuthorizeCacheSecurityGroupIngressInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockAuthorizeCacheSecurityGroupIngressWithContext.Lock()
	mock.calls.AuthorizeCacheSecurityGroupIngressWithContext = append(mock.calls.AuthorizeCacheSecurityGroupIngressWithContext, callInfo)
	lockelasticacheClientMockAuthorizeCacheSecurityGroupIngressWithContext.Unlock()
	return mock.AuthorizeCacheSecurityGroupIngressWithContextFunc(in1, in2, in3...)
}

// AuthorizeCacheSecurityGroupIngressWithContextCalls gets all the calls that were made to AuthorizeCacheSecurityGroupIngressWithContext.
// Check the length with:
//     len(mockedelasticacheClient.AuthorizeCacheSecurityGroupIngressWithContextCalls())
func (mock *elasticacheClientMock) AuthorizeCacheSecurityGroupIngressWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.AuthorizeCacheSecurityGroupIngressInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.AuthorizeCacheSecurityGroupIngressInput
		In3 []request.Option
	}
	lockelasticacheClientMockAuthorizeCacheSecurityGroupIngressWithContext.RLock()
	calls = mock.calls.AuthorizeCacheSecurityGroupIngressWithContext
	lockelasticacheClientMockAuthorizeCacheSecurityGroupIngressWithContext.RUnlock()
	return calls
}

// BatchApplyUpdateAction calls BatchApplyUpdateActionFunc.
func (mock *elasticacheClientMock) BatchApplyUpdateAction(in1 *elasticache.BatchApplyUpdateActionInput) (*elasticache.BatchApplyUpdateActionOutput, error) {
	if mock.BatchApplyUpdateActionFunc == nil {
		panic("elasticacheClientMock.BatchApplyUpdateActionFunc: method is nil but elasticacheClient.BatchApplyUpdateAction was just called")
	}
	callInfo := struct {
		In1 *elasticache.BatchApplyUpdateActionInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockBatchApplyUpdateAction.Lock()
	mock.calls.BatchApplyUpdateAction = append(mock.calls.BatchApplyUpdateAction, callInfo)
	lockelasticacheClientMockBatchApplyUpdateAction.Unlock()
	return mock.BatchApplyUpdateActionFunc(in1)
}

// BatchApplyUpdateActionCalls gets all the calls that were made to BatchApplyUpdateAction.
// Check the length with:
//     len(mockedelasticacheClient.BatchApplyUpdateActionCalls())
func (mock *elasticacheClientMock) BatchApplyUpdateActionCalls() []struct {
	In1 *elasticache.BatchApplyUpdateActionInput
} {
	var calls []struct {
		In1 *elasticache.BatchApplyUpdateActionInput
	}
	lockelasticacheClientMockBatchApplyUpdateAction.RLock()
	calls = mock.calls.BatchApplyUpdateAction
	lockelasticacheClientMockBatchApplyUpdateAction.RUnlock()
	return calls
}

// BatchApplyUpdateActionRequest calls BatchApplyUpdateActionRequestFunc.
func (mock *elasticacheClientMock) BatchApplyUpdateActionRequest(in1 *elasticache.BatchApplyUpdateActionInput) (*request.Request, *elasticache.BatchApplyUpdateActionOutput) {
	if mock.BatchApplyUpdateActionRequestFunc == nil {
		panic("elasticacheClientMock.BatchApplyUpdateActionRequestFunc: method is nil but elasticacheClient.BatchApplyUpdateActionRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.BatchApplyUpdateActionInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockBatchApplyUpdateActionRequest.Lock()
	mock.calls.BatchApplyUpdateActionRequest = append(mock.calls.BatchApplyUpdateActionRequest, callInfo)
	lockelasticacheClientMockBatchApplyUpdateActionRequest.Unlock()
	return mock.BatchApplyUpdateActionRequestFunc(in1)
}

// BatchApplyUpdateActionRequestCalls gets all the calls that were made to BatchApplyUpdateActionRequest.
// Check the length with:
//     len(mockedelasticacheClient.BatchApplyUpdateActionRequestCalls())
func (mock *elasticacheClientMock) BatchApplyUpdateActionRequestCalls() []struct {
	In1 *elasticache.BatchApplyUpdateActionInput
} {
	var calls []struct {
		In1 *elasticache.BatchApplyUpdateActionInput
	}
	lockelasticacheClientMockBatchApplyUpdateActionRequest.RLock()
	calls = mock.calls.BatchApplyUpdateActionRequest
	lockelasticacheClientMockBatchApplyUpdateActionRequest.RUnlock()
	return calls
}

// BatchApplyUpdateActionWithContext calls BatchApplyUpdateActionWithContextFunc.
func (mock *elasticacheClientMock) BatchApplyUpdateActionWithContext(in1 context.Context, in2 *elasticache.BatchApplyUpdateActionInput, in3 ...request.Option) (*elasticache.BatchApplyUpdateActionOutput, error) {
	if mock.BatchApplyUpdateActionWithContextFunc == nil {
		panic("elasticacheClientMock.BatchApplyUpdateActionWithContextFunc: method is nil but elasticacheClient.BatchApplyUpdateActionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.BatchApplyUpdateActionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockBatchApplyUpdateActionWithContext.Lock()
	mock.calls.BatchApplyUpdateActionWithContext = append(mock.calls.BatchApplyUpdateActionWithContext, callInfo)
	lockelasticacheClientMockBatchApplyUpdateActionWithContext.Unlock()
	return mock.BatchApplyUpdateActionWithContextFunc(in1, in2, in3...)
}

// BatchApplyUpdateActionWithContextCalls gets all the calls that were made to BatchApplyUpdateActionWithContext.
// Check the length with:
//     len(mockedelasticacheClient.BatchApplyUpdateActionWithContextCalls())
func (mock *elasticacheClientMock) BatchApplyUpdateActionWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.BatchApplyUpdateActionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.BatchApplyUpdateActionInput
		In3 []request.Option
	}
	lockelasticacheClientMockBatchApplyUpdateActionWithContext.RLock()
	calls = mock.calls.BatchApplyUpdateActionWithContext
	lockelasticacheClientMockBatchApplyUpdateActionWithContext.RUnlock()
	return calls
}

// BatchStopUpdateAction calls BatchStopUpdateActionFunc.
func (mock *elasticacheClientMock) BatchStopUpdateAction(in1 *elasticache.BatchStopUpdateActionInput) (*elasticache.BatchStopUpdateActionOutput, error) {
	if mock.BatchStopUpdateActionFunc == nil {
		panic("elasticacheClientMock.BatchStopUpdateActionFunc: method is nil but elasticacheClient.BatchStopUpdateAction was just called")
	}
	callInfo := struct {
		In1 *elasticache.BatchStopUpdateActionInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockBatchStopUpdateAction.Lock()
	mock.calls.BatchStopUpdateAction = append(mock.calls.BatchStopUpdateAction, callInfo)
	lockelasticacheClientMockBatchStopUpdateAction.Unlock()
	return mock.BatchStopUpdateActionFunc(in1)
}

// BatchStopUpdateActionCalls gets all the calls that were made to BatchStopUpdateAction.
// Check the length with:
//     len(mockedelasticacheClient.BatchStopUpdateActionCalls())
func (mock *elasticacheClientMock) BatchStopUpdateActionCalls() []struct {
	In1 *elasticache.BatchStopUpdateActionInput
} {
	var calls []struct {
		In1 *elasticache.BatchStopUpdateActionInput
	}
	lockelasticacheClientMockBatchStopUpdateAction.RLock()
	calls = mock.calls.BatchStopUpdateAction
	lockelasticacheClientMockBatchStopUpdateAction.RUnlock()
	return calls
}

// BatchStopUpdateActionRequest calls BatchStopUpdateActionRequestFunc.
func (mock *elasticacheClientMock) BatchStopUpdateActionRequest(in1 *elasticache.BatchStopUpdateActionInput) (*request.Request, *elasticache.BatchStopUpdateActionOutput) {
	if mock.BatchStopUpdateActionRequestFunc == nil {
		panic("elasticacheClientMock.BatchStopUpdateActionRequestFunc: method is nil but elasticacheClient.BatchStopUpdateActionRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.BatchStopUpdateActionInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockBatchStopUpdateActionRequest.Lock()
	mock.calls.BatchStopUpdateActionRequest = append(mock.calls.BatchStopUpdateActionRequest, callInfo)
	lockelasticacheClientMockBatchStopUpdateActionRequest.Unlock()
	return mock.BatchStopUpdateActionRequestFunc(in1)
}

// BatchStopUpdateActionRequestCalls gets all the calls that were made to BatchStopUpdateActionRequest.
// Check the length with:
//     len(mockedelasticacheClient.BatchStopUpdateActionRequestCalls())
func (mock *elasticacheClientMock) BatchStopUpdateActionRequestCalls() []struct {
	In1 *elasticache.BatchStopUpdateActionInput
} {
	var calls []struct {
		In1 *elasticache.BatchStopUpdateActionInput
	}
	lockelasticacheClientMockBatchStopUpdateActionRequest.RLock()
	calls = mock.calls.BatchStopUpdateActionRequest
	lockelasticacheClientMockBatchStopUpdateActionRequest.RUnlock()
	return calls
}

// BatchStopUpdateActionWithContext calls BatchStopUpdateActionWithContextFunc.
func (mock *elasticacheClientMock) BatchStopUpdateActionWithContext(in1 context.Context, in2 *elasticache.BatchStopUpdateActionInput, in3 ...request.Option) (*elasticache.BatchStopUpdateActionOutput, error) {
	if mock.BatchStopUpdateActionWithContextFunc == nil {
		panic("elasticacheClientMock.BatchStopUpdateActionWithContextFunc: method is nil but elasticacheClient.BatchStopUpdateActionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.BatchStopUpdateActionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockBatchStopUpdateActionWithContext.Lock()
	mock.calls.BatchStopUpdateActionWithContext = append(mock.calls.BatchStopUpdateActionWithContext, callInfo)
	lockelasticacheClientMockBatchStopUpdateActionWithContext.Unlock()
	return mock.BatchStopUpdateActionWithContextFunc(in1, in2, in3...)
}

// BatchStopUpdateActionWithContextCalls gets all the calls that were made to BatchStopUpdateActionWithContext.
// Check the length with:
//     len(mockedelasticacheClient.BatchStopUpdateActionWithContextCalls())
func (mock *elasticacheClientMock) BatchStopUpdateActionWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.BatchStopUpdateActionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.BatchStopUpdateActionInput
		In3 []request.Option
	}
	lockelasticacheClientMockBatchStopUpdateActionWithContext.RLock()
	calls = mock.calls.BatchStopUpdateActionWithContext
	lockelasticacheClientMockBatchStopUpdateActionWithContext.RUnlock()
	return calls
}

// CompleteMigration calls CompleteMigrationFunc.
func (mock *elasticacheClientMock) CompleteMigration(in1 *elasticache.CompleteMigrationInput) (*elasticache.CompleteMigrationOutput, error) {
	if mock.CompleteMigrationFunc == nil {
		panic("elasticacheClientMock.CompleteMigrationFunc: method is nil but elasticacheClient.CompleteMigration was just called")
	}
	callInfo := struct {
		In1 *elasticache.CompleteMigrationInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockCompleteMigration.Lock()
	mock.calls.CompleteMigration = append(mock.calls.CompleteMigration, callInfo)
	lockelasticacheClientMockCompleteMigration.Unlock()
	return mock.CompleteMigrationFunc(in1)
}

// CompleteMigrationCalls gets all the calls that were made to CompleteMigration.
// Check the length with:
//     len(mockedelasticacheClient.CompleteMigrationCalls())
func (mock *elasticacheClientMock) CompleteMigrationCalls() []struct {
	In1 *elasticache.CompleteMigrationInput
} {
	var calls []struct {
		In1 *elasticache.CompleteMigrationInput
	}
	lockelasticacheClientMockCompleteMigration.RLock()
	calls = mock.calls.CompleteMigration
	lockelasticacheClientMockCompleteMigration.RUnlock()
	return calls
}

// CompleteMigrationRequest calls CompleteMigrationRequestFunc.
func (mock *elasticacheClientMock) CompleteMigrationRequest(in1 *elasticache.CompleteMigrationInput) (*request.Request, *elasticache.CompleteMigrationOutput) {
	if mock.CompleteMigrationRequestFunc == nil {
		panic("elasticacheClientMock.CompleteMigrationRequestFunc: method is nil but elasticacheClient.CompleteMigrationRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.CompleteMigrationInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockCompleteMigrationRequest.Lock()
	mock.calls.CompleteMigrationRequest = append(mock.calls.CompleteMigrationRequest, callInfo)
	lockelasticacheClientMockCompleteMigrationRequest.Unlock()
	return mock.CompleteMigrationRequestFunc(in1)
}

// CompleteMigrationRequestCalls gets all the calls that were made to CompleteMigrationRequest.
// Check the length with:
//     len(mockedelasticacheClient.CompleteMigrationRequestCalls())
func (mock *elasticacheClientMock) CompleteMigrationRequestCalls() []struct {
	In1 *elasticache.CompleteMigrationInput
} {
	var calls []struct {
		In1 *elasticache.CompleteMigrationInput
	}
	lockelasticacheClientMockCompleteMigrationRequest.RLock()
	calls = mock.calls.CompleteMigrationRequest
	lockelasticacheClientMockCompleteMigrationRequest.RUnlock()
	return calls
}

// CompleteMigrationWithContext calls CompleteMigrationWithContextFunc.
func (mock *elasticacheClientMock) CompleteMigrationWithContext(in1 context.Context, in2 *elasticache.CompleteMigrationInput, in3 ...request.Option) (*elasticache.CompleteMigrationOutput, error) {
	if mock.CompleteMigrationWithContextFunc == nil {
		panic("elasticacheClientMock.CompleteMigrationWithContextFunc: method is nil but elasticacheClient.CompleteMigrationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.CompleteMigrationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockCompleteMigrationWithContext.Lock()
	mock.calls.CompleteMigrationWithContext = append(mock.calls.CompleteMigrationWithContext, callInfo)
	lockelasticacheClientMockCompleteMigrationWithContext.Unlock()
	return mock.CompleteMigrationWithContextFunc(in1, in2, in3...)
}

// CompleteMigrationWithContextCalls gets all the calls that were made to CompleteMigrationWithContext.
// Check the length with:
//     len(mockedelasticacheClient.CompleteMigrationWithContextCalls())
func (mock *elasticacheClientMock) CompleteMigrationWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.CompleteMigrationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.CompleteMigrationInput
		In3 []request.Option
	}
	lockelasticacheClientMockCompleteMigrationWithContext.RLock()
	calls = mock.calls.CompleteMigrationWithContext
	lockelasticacheClientMockCompleteMigrationWithContext.RUnlock()
	return calls
}

// CopySnapshot calls CopySnapshotFunc.
func (mock *elasticacheClientMock) CopySnapshot(in1 *elasticache.CopySnapshotInput) (*elasticache.CopySnapshotOutput, error) {
	if mock.CopySnapshotFunc == nil {
		panic("elasticacheClientMock.CopySnapshotFunc: method is nil but elasticacheClient.CopySnapshot was just called")
	}
	callInfo := struct {
		In1 *elasticache.CopySnapshotInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockCopySnapshot.Lock()
	mock.calls.CopySnapshot = append(mock.calls.CopySnapshot, callInfo)
	lockelasticacheClientMockCopySnapshot.Unlock()
	return mock.CopySnapshotFunc(in1)
}

// CopySnapshotCalls gets all the calls that were made to CopySnapshot.
// Check the length with:
//     len(mockedelasticacheClient.CopySnapshotCalls())
func (mock *elasticacheClientMock) CopySnapshotCalls() []struct {
	In1 *elasticache.CopySnapshotInput
} {
	var calls []struct {
		In1 *elasticache.CopySnapshotInput
	}
	lockelasticacheClientMockCopySnapshot.RLock()
	calls = mock.calls.CopySnapshot
	lockelasticacheClientMockCopySnapshot.RUnlock()
	return calls
}

// CopySnapshotRequest calls CopySnapshotRequestFunc.
func (mock *elasticacheClientMock) CopySnapshotRequest(in1 *elasticache.CopySnapshotInput) (*request.Request, *elasticache.CopySnapshotOutput) {
	if mock.CopySnapshotRequestFunc == nil {
		panic("elasticacheClientMock.CopySnapshotRequestFunc: method is nil but elasticacheClient.CopySnapshotRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.CopySnapshotInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockCopySnapshotRequest.Lock()
	mock.calls.CopySnapshotRequest = append(mock.calls.CopySnapshotRequest, callInfo)
	lockelasticacheClientMockCopySnapshotRequest.Unlock()
	return mock.CopySnapshotRequestFunc(in1)
}

// CopySnapshotRequestCalls gets all the calls that were made to CopySnapshotRequest.
// Check the length with:
//     len(mockedelasticacheClient.CopySnapshotRequestCalls())
func (mock *elasticacheClientMock) CopySnapshotRequestCalls() []struct {
	In1 *elasticache.CopySnapshotInput
} {
	var calls []struct {
		In1 *elasticache.CopySnapshotInput
	}
	lockelasticacheClientMockCopySnapshotRequest.RLock()
	calls = mock.calls.CopySnapshotRequest
	lockelasticacheClientMockCopySnapshotRequest.RUnlock()
	return calls
}

// CopySnapshotWithContext calls CopySnapshotWithContextFunc.
func (mock *elasticacheClientMock) CopySnapshotWithContext(in1 context.Context, in2 *elasticache.CopySnapshotInput, in3 ...request.Option) (*elasticache.CopySnapshotOutput, error) {
	if mock.CopySnapshotWithContextFunc == nil {
		panic("elasticacheClientMock.CopySnapshotWithContextFunc: method is nil but elasticacheClient.CopySnapshotWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.CopySnapshotInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockCopySnapshotWithContext.Lock()
	mock.calls.CopySnapshotWithContext = append(mock.calls.CopySnapshotWithContext, callInfo)
	lockelasticacheClientMockCopySnapshotWithContext.Unlock()
	return mock.CopySnapshotWithContextFunc(in1, in2, in3...)
}

// CopySnapshotWithContextCalls gets all the calls that were made to CopySnapshotWithContext.
// Check the length with:
//     len(mockedelasticacheClient.CopySnapshotWithContextCalls())
func (mock *elasticacheClientMock) CopySnapshotWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.CopySnapshotInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.CopySnapshotInput
		In3 []request.Option
	}
	lockelasticacheClientMockCopySnapshotWithContext.RLock()
	calls = mock.calls.CopySnapshotWithContext
	lockelasticacheClientMockCopySnapshotWithContext.RUnlock()
	return calls
}

// CreateCacheCluster calls CreateCacheClusterFunc.
func (mock *elasticacheClientMock) CreateCacheCluster(in1 *elasticache.CreateCacheClusterInput) (*elasticache.CreateCacheClusterOutput, error) {
	if mock.CreateCacheClusterFunc == nil {
		panic("elasticacheClientMock.CreateCacheClusterFunc: method is nil but elasticacheClient.CreateCacheCluster was just called")
	}
	callInfo := struct {
		In1 *elasticache.CreateCacheClusterInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockCreateCacheCluster.Lock()
	mock.calls.CreateCacheCluster = append(mock.calls.CreateCacheCluster, callInfo)
	lockelasticacheClientMockCreateCacheCluster.Unlock()
	return mock.CreateCacheClusterFunc(in1)
}

// CreateCacheClusterCalls gets all the calls that were made to CreateCacheCluster.
// Check the length with:
//     len(mockedelasticacheClient.CreateCacheClusterCalls())
func (mock *elasticacheClientMock) CreateCacheClusterCalls() []struct {
	In1 *elasticache.CreateCacheClusterInput
} {
	var calls []struct {
		In1 *elasticache.CreateCacheClusterInput
	}
	lockelasticacheClientMockCreateCacheCluster.RLock()
	calls = mock.calls.CreateCacheCluster
	lockelasticacheClientMockCreateCacheCluster.RUnlock()
	return calls
}

// CreateCacheClusterRequest calls CreateCacheClusterRequestFunc.
func (mock *elasticacheClientMock) CreateCacheClusterRequest(in1 *elasticache.CreateCacheClusterInput) (*request.Request, *elasticache.CreateCacheClusterOutput) {
	if mock.CreateCacheClusterRequestFunc == nil {
		panic("elasticacheClientMock.CreateCacheClusterRequestFunc: method is nil but elasticacheClient.CreateCacheClusterRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.CreateCacheClusterInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockCreateCacheClusterRequest.Lock()
	mock.calls.CreateCacheClusterRequest = append(mock.calls.CreateCacheClusterRequest, callInfo)
	lockelasticacheClientMockCreateCacheClusterRequest.Unlock()
	return mock.CreateCacheClusterRequestFunc(in1)
}

// CreateCacheClusterRequestCalls gets all the calls that were made to CreateCacheClusterRequest.
// Check the length with:
//     len(mockedelasticacheClient.CreateCacheClusterRequestCalls())
func (mock *elasticacheClientMock) CreateCacheClusterRequestCalls() []struct {
	In1 *elasticache.CreateCacheClusterInput
} {
	var calls []struct {
		In1 *elasticache.CreateCacheClusterInput
	}
	lockelasticacheClientMockCreateCacheClusterRequest.RLock()
	calls = mock.calls.CreateCacheClusterRequest
	lockelasticacheClientMockCreateCacheClusterRequest.RUnlock()
	return calls
}

// CreateCacheClusterWithContext calls CreateCacheClusterWithContextFunc.
func (mock *elasticacheClientMock) CreateCacheClusterWithContext(in1 context.Context, in2 *elasticache.CreateCacheClusterInput, in3 ...request.Option) (*elasticache.CreateCacheClusterOutput, error) {
	if mock.CreateCacheClusterWithContextFunc == nil {
		panic("elasticacheClientMock.CreateCacheClusterWithContextFunc: method is nil but elasticacheClient.CreateCacheClusterWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.CreateCacheClusterInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockCreateCacheClusterWithContext.Lock()
	mock.calls.CreateCacheClusterWithContext = append(mock.calls.CreateCacheClusterWithContext, callInfo)
	lockelasticacheClientMockCreateCacheClusterWithContext.Unlock()
	return mock.CreateCacheClusterWithContextFunc(in1, in2, in3...)
}

// CreateCacheClusterWithContextCalls gets all the calls that were made to CreateCacheClusterWithContext.
// Check the length with:
//     len(mockedelasticacheClient.CreateCacheClusterWithContextCalls())
func (mock *elasticacheClientMock) CreateCacheClusterWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.CreateCacheClusterInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.CreateCacheClusterInput
		In3 []request.Option
	}
	lockelasticacheClientMockCreateCacheClusterWithContext.RLock()
	calls = mock.calls.CreateCacheClusterWithContext
	lockelasticacheClientMockCreateCacheClusterWithContext.RUnlock()
	return calls
}

// CreateCacheParameterGroup calls CreateCacheParameterGroupFunc.
func (mock *elasticacheClientMock) CreateCacheParameterGroup(in1 *elasticache.CreateCacheParameterGroupInput) (*elasticache.CreateCacheParameterGroupOutput, error) {
	if mock.CreateCacheParameterGroupFunc == nil {
		panic("elasticacheClientMock.CreateCacheParameterGroupFunc: method is nil but elasticacheClient.CreateCacheParameterGroup was just called")
	}
	callInfo := struct {
		In1 *elasticache.CreateCacheParameterGroupInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockCreateCacheParameterGroup.Lock()
	mock.calls.CreateCacheParameterGroup = append(mock.calls.CreateCacheParameterGroup, callInfo)
	lockelasticacheClientMockCreateCacheParameterGroup.Unlock()
	return mock.CreateCacheParameterGroupFunc(in1)
}

// CreateCacheParameterGroupCalls gets all the calls that were made to CreateCacheParameterGroup.
// Check the length with:
//     len(mockedelasticacheClient.CreateCacheParameterGroupCalls())
func (mock *elasticacheClientMock) CreateCacheParameterGroupCalls() []struct {
	In1 *elasticache.CreateCacheParameterGroupInput
} {
	var calls []struct {
		In1 *elasticache.CreateCacheParameterGroupInput
	}
	lockelasticacheClientMockCreateCacheParameterGroup.RLock()
	calls = mock.calls.CreateCacheParameterGroup
	lockelasticacheClientMockCreateCacheParameterGroup.RUnlock()
	return calls
}

// CreateCacheParameterGroupRequest calls CreateCacheParameterGroupRequestFunc.
func (mock *elasticacheClientMock) CreateCacheParameterGroupRequest(in1 *elasticache.CreateCacheParameterGroupInput) (*request.Request, *elasticache.CreateCacheParameterGroupOutput) {
	if mock.CreateCacheParameterGroupRequestFunc == nil {
		panic("elasticacheClientMock.CreateCacheParameterGroupRequestFunc: method is nil but elasticacheClient.CreateCacheParameterGroupRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.CreateCacheParameterGroupInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockCreateCacheParameterGroupRequest.Lock()
	mock.calls.CreateCacheParameterGroupRequest = append(mock.calls.CreateCacheParameterGroupRequest, callInfo)
	lockelasticacheClientMockCreateCacheParameterGroupRequest.Unlock()
	return mock.CreateCacheParameterGroupRequestFunc(in1)
}

// CreateCacheParameterGroupRequestCalls gets all the calls that were made to CreateCacheParameterGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.CreateCacheParameterGroupRequestCalls())
func (mock *elasticacheClientMock) CreateCacheParameterGroupRequestCalls() []struct {
	In1 *elasticache.CreateCacheParameterGroupInput
} {
	var calls []struct {
		In1 *elasticache.CreateCacheParameterGroupInput
	}
	lockelasticacheClientMockCreateCacheParameterGroupRequest.RLock()
	calls = mock.calls.CreateCacheParameterGroupRequest
	lockelasticacheClientMockCreateCacheParameterGroupRequest.RUnlock()
	return calls
}

// CreateCacheParameterGroupWithContext calls CreateCacheParameterGroupWithContextFunc.
func (mock *elasticacheClientMock) CreateCacheParameterGroupWithContext(in1 context.Context, in2 *elasticache.CreateCacheParameterGroupInput, in3 ...request.Option) (*elasticache.CreateCacheParameterGroupOutput, error) {
	if mock.CreateCacheParameterGroupWithContextFunc == nil {
		panic("elasticacheClientMock.CreateCacheParameterGroupWithContextFunc: method is nil but elasticacheClient.CreateCacheParameterGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.CreateCacheParameterGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockCreateCacheParameterGroupWithContext.Lock()
	mock.calls.CreateCacheParameterGroupWithContext = append(mock.calls.CreateCacheParameterGroupWithContext, callInfo)
	lockelasticacheClientMockCreateCacheParameterGroupWithContext.Unlock()
	return mock.CreateCacheParameterGroupWithContextFunc(in1, in2, in3...)
}

// CreateCacheParameterGroupWithContextCalls gets all the calls that were made to CreateCacheParameterGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.CreateCacheParameterGroupWithContextCalls())
func (mock *elasticacheClientMock) CreateCacheParameterGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.CreateCacheParameterGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.CreateCacheParameterGroupInput
		In3 []request.Option
	}
	lockelasticacheClientMockCreateCacheParameterGroupWithContext.RLock()
	calls = mock.calls.CreateCacheParameterGroupWithContext
	lockelasticacheClientMockCreateCacheParameterGroupWithContext.RUnlock()
	return calls
}

// CreateCacheSecurityGroup calls CreateCacheSecurityGroupFunc.
func (mock *elasticacheClientMock) CreateCacheSecurityGroup(in1 *elasticache.CreateCacheSecurityGroupInput) (*elasticache.CreateCacheSecurityGroupOutput, error) {
	if mock.CreateCacheSecurityGroupFunc == nil {
		panic("elasticacheClientMock.CreateCacheSecurityGroupFunc: method is nil but elasticacheClient.CreateCacheSecurityGroup was just called")
	}
	callInfo := struct {
		In1 *elasticache.CreateCacheSecurityGroupInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockCreateCacheSecurityGroup.Lock()
	mock.calls.CreateCacheSecurityGroup = append(mock.calls.CreateCacheSecurityGroup, callInfo)
	lockelasticacheClientMockCreateCacheSecurityGroup.Unlock()
	return mock.CreateCacheSecurityGroupFunc(in1)
}

// CreateCacheSecurityGroupCalls gets all the calls that were made to CreateCacheSecurityGroup.
// Check the length with:
//     len(mockedelasticacheClient.CreateCacheSecurityGroupCalls())
func (mock *elasticacheClientMock) CreateCacheSecurityGroupCalls() []struct {
	In1 *elasticache.CreateCacheSecurityGroupInput
} {
	var calls []struct {
		In1 *elasticache.CreateCacheSecurityGroupInput
	}
	lockelasticacheClientMockCreateCacheSecurityGroup.RLock()
	calls = mock.calls.CreateCacheSecurityGroup
	lockelasticacheClientMockCreateCacheSecurityGroup.RUnlock()
	return calls
}

// CreateCacheSecurityGroupRequest calls CreateCacheSecurityGroupRequestFunc.
func (mock *elasticacheClientMock) CreateCacheSecurityGroupRequest(in1 *elasticache.CreateCacheSecurityGroupInput) (*request.Request, *elasticache.CreateCacheSecurityGroupOutput) {
	if mock.CreateCacheSecurityGroupRequestFunc == nil {
		panic("elasticacheClientMock.CreateCacheSecurityGroupRequestFunc: method is nil but elasticacheClient.CreateCacheSecurityGroupRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.CreateCacheSecurityGroupInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockCreateCacheSecurityGroupRequest.Lock()
	mock.calls.CreateCacheSecurityGroupRequest = append(mock.calls.CreateCacheSecurityGroupRequest, callInfo)
	lockelasticacheClientMockCreateCacheSecurityGroupRequest.Unlock()
	return mock.CreateCacheSecurityGroupRequestFunc(in1)
}

// CreateCacheSecurityGroupRequestCalls gets all the calls that were made to CreateCacheSecurityGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.CreateCacheSecurityGroupRequestCalls())
func (mock *elasticacheClientMock) CreateCacheSecurityGroupRequestCalls() []struct {
	In1 *elasticache.CreateCacheSecurityGroupInput
} {
	var calls []struct {
		In1 *elasticache.CreateCacheSecurityGroupInput
	}
	lockelasticacheClientMockCreateCacheSecurityGroupRequest.RLock()
	calls = mock.calls.CreateCacheSecurityGroupRequest
	lockelasticacheClientMockCreateCacheSecurityGroupRequest.RUnlock()
	return calls
}

// CreateCacheSecurityGroupWithContext calls CreateCacheSecurityGroupWithContextFunc.
func (mock *elasticacheClientMock) CreateCacheSecurityGroupWithContext(in1 context.Context, in2 *elasticache.CreateCacheSecurityGroupInput, in3 ...request.Option) (*elasticache.CreateCacheSecurityGroupOutput, error) {
	if mock.CreateCacheSecurityGroupWithContextFunc == nil {
		panic("elasticacheClientMock.CreateCacheSecurityGroupWithContextFunc: method is nil but elasticacheClient.CreateCacheSecurityGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.CreateCacheSecurityGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockCreateCacheSecurityGroupWithContext.Lock()
	mock.calls.CreateCacheSecurityGroupWithContext = append(mock.calls.CreateCacheSecurityGroupWithContext, callInfo)
	lockelasticacheClientMockCreateCacheSecurityGroupWithContext.Unlock()
	return mock.CreateCacheSecurityGroupWithContextFunc(in1, in2, in3...)
}

// CreateCacheSecurityGroupWithContextCalls gets all the calls that were made to CreateCacheSecurityGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.CreateCacheSecurityGroupWithContextCalls())
func (mock *elasticacheClientMock) CreateCacheSecurityGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.CreateCacheSecurityGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.CreateCacheSecurityGroupInput
		In3 []request.Option
	}
	lockelasticacheClientMockCreateCacheSecurityGroupWithContext.RLock()
	calls = mock.calls.CreateCacheSecurityGroupWithContext
	lockelasticacheClientMockCreateCacheSecurityGroupWithContext.RUnlock()
	return calls
}

// CreateCacheSubnetGroup calls CreateCacheSubnetGroupFunc.
func (mock *elasticacheClientMock) CreateCacheSubnetGroup(in1 *elasticache.CreateCacheSubnetGroupInput) (*elasticache.CreateCacheSubnetGroupOutput, error) {
	if mock.CreateCacheSubnetGroupFunc == nil {
		panic("elasticacheClientMock.CreateCacheSubnetGroupFunc: method is nil but elasticacheClient.CreateCacheSubnetGroup was just called")
	}
	callInfo := struct {
		In1 *elasticache.CreateCacheSubnetGroupInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockCreateCacheSubnetGroup.Lock()
	mock.calls.CreateCacheSubnetGroup = append(mock.calls.CreateCacheSubnetGroup, callInfo)
	lockelasticacheClientMockCreateCacheSubnetGroup.Unlock()
	return mock.CreateCacheSubnetGroupFunc(in1)
}

// CreateCacheSubnetGroupCalls gets all the calls that were made to CreateCacheSubnetGroup.
// Check the length with:
//     len(mockedelasticacheClient.CreateCacheSubnetGroupCalls())
func (mock *elasticacheClientMock) CreateCacheSubnetGroupCalls() []struct {
	In1 *elasticache.CreateCacheSubnetGroupInput
} {
	var calls []struct {
		In1 *elasticache.CreateCacheSubnetGroupInput
	}
	lockelasticacheClientMockCreateCacheSubnetGroup.RLock()
	calls = mock.calls.CreateCacheSubnetGroup
	lockelasticacheClientMockCreateCacheSubnetGroup.RUnlock()
	return calls
}

// CreateCacheSubnetGroupRequest calls CreateCacheSubnetGroupRequestFunc.
func (mock *elasticacheClientMock) CreateCacheSubnetGroupRequest(in1 *elasticache.CreateCacheSubnetGroupInput) (*request.Request, *elasticache.CreateCacheSubnetGroupOutput) {
	if mock.CreateCacheSubnetGroupRequestFunc == nil {
		panic("elasticacheClientMock.CreateCacheSubnetGroupRequestFunc: method is nil but elasticacheClient.CreateCacheSubnetGroupRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.CreateCacheSubnetGroupInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockCreateCacheSubnetGroupRequest.Lock()
	mock.calls.CreateCacheSubnetGroupRequest = append(mock.calls.CreateCacheSubnetGroupRequest, callInfo)
	lockelasticacheClientMockCreateCacheSubnetGroupRequest.Unlock()
	return mock.CreateCacheSubnetGroupRequestFunc(in1)
}

// CreateCacheSubnetGroupRequestCalls gets all the calls that were made to CreateCacheSubnetGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.CreateCacheSubnetGroupRequestCalls())
func (mock *elasticacheClientMock) CreateCacheSubnetGroupRequestCalls() []struct {
	In1 *elasticache.CreateCacheSubnetGroupInput
} {
	var calls []struct {
		In1 *elasticache.CreateCacheSubnetGroupInput
	}
	lockelasticacheClientMockCreateCacheSubnetGroupRequest.RLock()
	calls = mock.calls.CreateCacheSubnetGroupRequest
	lockelasticacheClientMockCreateCacheSubnetGroupRequest.RUnlock()
	return calls
}

// CreateCacheSubnetGroupWithContext calls CreateCacheSubnetGroupWithContextFunc.
func (mock *elasticacheClientMock) CreateCacheSubnetGroupWithContext(in1 context.Context, in2 *elasticache.CreateCacheSubnetGroupInput, in3 ...request.Option) (*elasticache.CreateCacheSubnetGroupOutput, error) {
	if mock.CreateCacheSubnetGroupWithContextFunc == nil {
		panic("elasticacheClientMock.CreateCacheSubnetGroupWithContextFunc: method is nil but elasticacheClient.CreateCacheSubnetGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.CreateCacheSubnetGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockCreateCacheSubnetGroupWithContext.Lock()
	mock.calls.CreateCacheSubnetGroupWithContext = append(mock.calls.CreateCacheSubnetGroupWithContext, callInfo)
	lockelasticacheClientMockCreateCacheSubnetGroupWithContext.Unlock()
	return mock.CreateCacheSubnetGroupWithContextFunc(in1, in2, in3...)
}

// CreateCacheSubnetGroupWithContextCalls gets all the calls that were made to CreateCacheSubnetGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.CreateCacheSubnetGroupWithContextCalls())
func (mock *elasticacheClientMock) CreateCacheSubnetGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.CreateCacheSubnetGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.CreateCacheSubnetGroupInput
		In3 []request.Option
	}
	lockelasticacheClientMockCreateCacheSubnetGroupWithContext.RLock()
	calls = mock.calls.CreateCacheSubnetGroupWithContext
	lockelasticacheClientMockCreateCacheSubnetGroupWithContext.RUnlock()
	return calls
}

// CreateReplicationGroup calls CreateReplicationGroupFunc.
func (mock *elasticacheClientMock) CreateReplicationGroup(in1 *elasticache.CreateReplicationGroupInput) (*elasticache.CreateReplicationGroupOutput, error) {
	if mock.CreateReplicationGroupFunc == nil {
		panic("elasticacheClientMock.CreateReplicationGroupFunc: method is nil but elasticacheClient.CreateReplicationGroup was just called")
	}
	callInfo := struct {
		In1 *elasticache.CreateReplicationGroupInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockCreateReplicationGroup.Lock()
	mock.calls.CreateReplicationGroup = append(mock.calls.CreateReplicationGroup, callInfo)
	lockelasticacheClientMockCreateReplicationGroup.Unlock()
	return mock.CreateReplicationGroupFunc(in1)
}

// CreateReplicationGroupCalls gets all the calls that were made to CreateReplicationGroup.
// Check the length with:
//     len(mockedelasticacheClient.CreateReplicationGroupCalls())
func (mock *elasticacheClientMock) CreateReplicationGroupCalls() []struct {
	In1 *elasticache.CreateReplicationGroupInput
} {
	var calls []struct {
		In1 *elasticache.CreateReplicationGroupInput
	}
	lockelasticacheClientMockCreateReplicationGroup.RLock()
	calls = mock.calls.CreateReplicationGroup
	lockelasticacheClientMockCreateReplicationGroup.RUnlock()
	return calls
}

// CreateReplicationGroupRequest calls CreateReplicationGroupRequestFunc.
func (mock *elasticacheClientMock) CreateReplicationGroupRequest(in1 *elasticache.CreateReplicationGroupInput) (*request.Request, *elasticache.CreateReplicationGroupOutput) {
	if mock.CreateReplicationGroupRequestFunc == nil {
		panic("elasticacheClientMock.CreateReplicationGroupRequestFunc: method is nil but elasticacheClient.CreateReplicationGroupRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.CreateReplicationGroupInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockCreateReplicationGroupRequest.Lock()
	mock.calls.CreateReplicationGroupRequest = append(mock.calls.CreateReplicationGroupRequest, callInfo)
	lockelasticacheClientMockCreateReplicationGroupRequest.Unlock()
	return mock.CreateReplicationGroupRequestFunc(in1)
}

// CreateReplicationGroupRequestCalls gets all the calls that were made to CreateReplicationGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.CreateReplicationGroupRequestCalls())
func (mock *elasticacheClientMock) CreateReplicationGroupRequestCalls() []struct {
	In1 *elasticache.CreateReplicationGroupInput
} {
	var calls []struct {
		In1 *elasticache.CreateReplicationGroupInput
	}
	lockelasticacheClientMockCreateReplicationGroupRequest.RLock()
	calls = mock.calls.CreateReplicationGroupRequest
	lockelasticacheClientMockCreateReplicationGroupRequest.RUnlock()
	return calls
}

// CreateReplicationGroupWithContext calls CreateReplicationGroupWithContextFunc.
func (mock *elasticacheClientMock) CreateReplicationGroupWithContext(in1 context.Context, in2 *elasticache.CreateReplicationGroupInput, in3 ...request.Option) (*elasticache.CreateReplicationGroupOutput, error) {
	if mock.CreateReplicationGroupWithContextFunc == nil {
		panic("elasticacheClientMock.CreateReplicationGroupWithContextFunc: method is nil but elasticacheClient.CreateReplicationGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.CreateReplicationGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockCreateReplicationGroupWithContext.Lock()
	mock.calls.CreateReplicationGroupWithContext = append(mock.calls.CreateReplicationGroupWithContext, callInfo)
	lockelasticacheClientMockCreateReplicationGroupWithContext.Unlock()
	return mock.CreateReplicationGroupWithContextFunc(in1, in2, in3...)
}

// CreateReplicationGroupWithContextCalls gets all the calls that were made to CreateReplicationGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.CreateReplicationGroupWithContextCalls())
func (mock *elasticacheClientMock) CreateReplicationGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.CreateReplicationGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.CreateReplicationGroupInput
		In3 []request.Option
	}
	lockelasticacheClientMockCreateReplicationGroupWithContext.RLock()
	calls = mock.calls.CreateReplicationGroupWithContext
	lockelasticacheClientMockCreateReplicationGroupWithContext.RUnlock()
	return calls
}

// CreateSnapshot calls CreateSnapshotFunc.
func (mock *elasticacheClientMock) CreateSnapshot(in1 *elasticache.CreateSnapshotInput) (*elasticache.CreateSnapshotOutput, error) {
	if mock.CreateSnapshotFunc == nil {
		panic("elasticacheClientMock.CreateSnapshotFunc: method is nil but elasticacheClient.CreateSnapshot was just called")
	}
	callInfo := struct {
		In1 *elasticache.CreateSnapshotInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockCreateSnapshot.Lock()
	mock.calls.CreateSnapshot = append(mock.calls.CreateSnapshot, callInfo)
	lockelasticacheClientMockCreateSnapshot.Unlock()
	return mock.CreateSnapshotFunc(in1)
}

// CreateSnapshotCalls gets all the calls that were made to CreateSnapshot.
// Check the length with:
//     len(mockedelasticacheClient.CreateSnapshotCalls())
func (mock *elasticacheClientMock) CreateSnapshotCalls() []struct {
	In1 *elasticache.CreateSnapshotInput
} {
	var calls []struct {
		In1 *elasticache.CreateSnapshotInput
	}
	lockelasticacheClientMockCreateSnapshot.RLock()
	calls = mock.calls.CreateSnapshot
	lockelasticacheClientMockCreateSnapshot.RUnlock()
	return calls
}

// CreateSnapshotRequest calls CreateSnapshotRequestFunc.
func (mock *elasticacheClientMock) CreateSnapshotRequest(in1 *elasticache.CreateSnapshotInput) (*request.Request, *elasticache.CreateSnapshotOutput) {
	if mock.CreateSnapshotRequestFunc == nil {
		panic("elasticacheClientMock.CreateSnapshotRequestFunc: method is nil but elasticacheClient.CreateSnapshotRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.CreateSnapshotInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockCreateSnapshotRequest.Lock()
	mock.calls.CreateSnapshotRequest = append(mock.calls.CreateSnapshotRequest, callInfo)
	lockelasticacheClientMockCreateSnapshotRequest.Unlock()
	return mock.CreateSnapshotRequestFunc(in1)
}

// CreateSnapshotRequestCalls gets all the calls that were made to CreateSnapshotRequest.
// Check the length with:
//     len(mockedelasticacheClient.CreateSnapshotRequestCalls())
func (mock *elasticacheClientMock) CreateSnapshotRequestCalls() []struct {
	In1 *elasticache.CreateSnapshotInput
} {
	var calls []struct {
		In1 *elasticache.CreateSnapshotInput
	}
	lockelasticacheClientMockCreateSnapshotRequest.RLock()
	calls = mock.calls.CreateSnapshotRequest
	lockelasticacheClientMockCreateSnapshotRequest.RUnlock()
	return calls
}

// CreateSnapshotWithContext calls CreateSnapshotWithContextFunc.
func (mock *elasticacheClientMock) CreateSnapshotWithContext(in1 context.Context, in2 *elasticache.CreateSnapshotInput, in3 ...request.Option) (*elasticache.CreateSnapshotOutput, error) {
	if mock.CreateSnapshotWithContextFunc == nil {
		panic("elasticacheClientMock.CreateSnapshotWithContextFunc: method is nil but elasticacheClient.CreateSnapshotWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.CreateSnapshotInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockCreateSnapshotWithContext.Lock()
	mock.calls.CreateSnapshotWithContext = append(mock.calls.CreateSnapshotWithContext, callInfo)
	lockelasticacheClientMockCreateSnapshotWithContext.Unlock()
	return mock.CreateSnapshotWithContextFunc(in1, in2, in3...)
}

// CreateSnapshotWithContextCalls gets all the calls that were made to CreateSnapshotWithContext.
// Check the length with:
//     len(mockedelasticacheClient.CreateSnapshotWithContextCalls())
func (mock *elasticacheClientMock) CreateSnapshotWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.CreateSnapshotInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.CreateSnapshotInput
		In3 []request.Option
	}
	lockelasticacheClientMockCreateSnapshotWithContext.RLock()
	calls = mock.calls.CreateSnapshotWithContext
	lockelasticacheClientMockCreateSnapshotWithContext.RUnlock()
	return calls
}

// DecreaseReplicaCount calls DecreaseReplicaCountFunc.
func (mock *elasticacheClientMock) DecreaseReplicaCount(in1 *elasticache.DecreaseReplicaCountInput) (*elasticache.DecreaseReplicaCountOutput, error) {
	if mock.DecreaseReplicaCountFunc == nil {
		panic("elasticacheClientMock.DecreaseReplicaCountFunc: method is nil but elasticacheClient.DecreaseReplicaCount was just called")
	}
	callInfo := struct {
		In1 *elasticache.DecreaseReplicaCountInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDecreaseReplicaCount.Lock()
	mock.calls.DecreaseReplicaCount = append(mock.calls.DecreaseReplicaCount, callInfo)
	lockelasticacheClientMockDecreaseReplicaCount.Unlock()
	return mock.DecreaseReplicaCountFunc(in1)
}

// DecreaseReplicaCountCalls gets all the calls that were made to DecreaseReplicaCount.
// Check the length with:
//     len(mockedelasticacheClient.DecreaseReplicaCountCalls())
func (mock *elasticacheClientMock) DecreaseReplicaCountCalls() []struct {
	In1 *elasticache.DecreaseReplicaCountInput
} {
	var calls []struct {
		In1 *elasticache.DecreaseReplicaCountInput
	}
	lockelasticacheClientMockDecreaseReplicaCount.RLock()
	calls = mock.calls.DecreaseReplicaCount
	lockelasticacheClientMockDecreaseReplicaCount.RUnlock()
	return calls
}

// DecreaseReplicaCountRequest calls DecreaseReplicaCountRequestFunc.
func (mock *elasticacheClientMock) DecreaseReplicaCountRequest(in1 *elasticache.DecreaseReplicaCountInput) (*request.Request, *elasticache.DecreaseReplicaCountOutput) {
	if mock.DecreaseReplicaCountRequestFunc == nil {
		panic("elasticacheClientMock.DecreaseReplicaCountRequestFunc: method is nil but elasticacheClient.DecreaseReplicaCountRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.DecreaseReplicaCountInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDecreaseReplicaCountRequest.Lock()
	mock.calls.DecreaseReplicaCountRequest = append(mock.calls.DecreaseReplicaCountRequest, callInfo)
	lockelasticacheClientMockDecreaseReplicaCountRequest.Unlock()
	return mock.DecreaseReplicaCountRequestFunc(in1)
}

// DecreaseReplicaCountRequestCalls gets all the calls that were made to DecreaseReplicaCountRequest.
// Check the length with:
//     len(mockedelasticacheClient.DecreaseReplicaCountRequestCalls())
func (mock *elasticacheClientMock) DecreaseReplicaCountRequestCalls() []struct {
	In1 *elasticache.DecreaseReplicaCountInput
} {
	var calls []struct {
		In1 *elasticache.DecreaseReplicaCountInput
	}
	lockelasticacheClientMockDecreaseReplicaCountRequest.RLock()
	calls = mock.calls.DecreaseReplicaCountRequest
	lockelasticacheClientMockDecreaseReplicaCountRequest.RUnlock()
	return calls
}

// DecreaseReplicaCountWithContext calls DecreaseReplicaCountWithContextFunc.
func (mock *elasticacheClientMock) DecreaseReplicaCountWithContext(in1 context.Context, in2 *elasticache.DecreaseReplicaCountInput, in3 ...request.Option) (*elasticache.DecreaseReplicaCountOutput, error) {
	if mock.DecreaseReplicaCountWithContextFunc == nil {
		panic("elasticacheClientMock.DecreaseReplicaCountWithContextFunc: method is nil but elasticacheClient.DecreaseReplicaCountWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DecreaseReplicaCountInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockDecreaseReplicaCountWithContext.Lock()
	mock.calls.DecreaseReplicaCountWithContext = append(mock.calls.DecreaseReplicaCountWithContext, callInfo)
	lockelasticacheClientMockDecreaseReplicaCountWithContext.Unlock()
	return mock.DecreaseReplicaCountWithContextFunc(in1, in2, in3...)
}

// DecreaseReplicaCountWithContextCalls gets all the calls that were made to DecreaseReplicaCountWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DecreaseReplicaCountWithContextCalls())
func (mock *elasticacheClientMock) DecreaseReplicaCountWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DecreaseReplicaCountInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DecreaseReplicaCountInput
		In3 []request.Option
	}
	lockelasticacheClientMockDecreaseReplicaCountWithContext.RLock()
	calls = mock.calls.DecreaseReplicaCountWithContext
	lockelasticacheClientMockDecreaseReplicaCountWithContext.RUnlock()
	return calls
}

// DeleteCacheCluster calls DeleteCacheClusterFunc.
func (mock *elasticacheClientMock) DeleteCacheCluster(in1 *elasticache.DeleteCacheClusterInput) (*elasticache.DeleteCacheClusterOutput, error) {
	if mock.DeleteCacheClusterFunc == nil {
		panic("elasticacheClientMock.DeleteCacheClusterFunc: method is nil but elasticacheClient.DeleteCacheCluster was just called")
	}
	callInfo := struct {
		In1 *elasticache.DeleteCacheClusterInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDeleteCacheCluster.Lock()
	mock.calls.DeleteCacheCluster = append(mock.calls.DeleteCacheCluster, callInfo)
	lockelasticacheClientMockDeleteCacheCluster.Unlock()
	return mock.DeleteCacheClusterFunc(in1)
}

// DeleteCacheClusterCalls gets all the calls that were made to DeleteCacheCluster.
// Check the length with:
//     len(mockedelasticacheClient.DeleteCacheClusterCalls())
func (mock *elasticacheClientMock) DeleteCacheClusterCalls() []struct {
	In1 *elasticache.DeleteCacheClusterInput
} {
	var calls []struct {
		In1 *elasticache.DeleteCacheClusterInput
	}
	lockelasticacheClientMockDeleteCacheCluster.RLock()
	calls = mock.calls.DeleteCacheCluster
	lockelasticacheClientMockDeleteCacheCluster.RUnlock()
	return calls
}

// DeleteCacheClusterRequest calls DeleteCacheClusterRequestFunc.
func (mock *elasticacheClientMock) DeleteCacheClusterRequest(in1 *elasticache.DeleteCacheClusterInput) (*request.Request, *elasticache.DeleteCacheClusterOutput) {
	if mock.DeleteCacheClusterRequestFunc == nil {
		panic("elasticacheClientMock.DeleteCacheClusterRequestFunc: method is nil but elasticacheClient.DeleteCacheClusterRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.DeleteCacheClusterInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDeleteCacheClusterRequest.Lock()
	mock.calls.DeleteCacheClusterRequest = append(mock.calls.DeleteCacheClusterRequest, callInfo)
	lockelasticacheClientMockDeleteCacheClusterRequest.Unlock()
	return mock.DeleteCacheClusterRequestFunc(in1)
}

// DeleteCacheClusterRequestCalls gets all the calls that were made to DeleteCacheClusterRequest.
// Check the length with:
//     len(mockedelasticacheClient.DeleteCacheClusterRequestCalls())
func (mock *elasticacheClientMock) DeleteCacheClusterRequestCalls() []struct {
	In1 *elasticache.DeleteCacheClusterInput
} {
	var calls []struct {
		In1 *elasticache.DeleteCacheClusterInput
	}
	lockelasticacheClientMockDeleteCacheClusterRequest.RLock()
	calls = mock.calls.DeleteCacheClusterRequest
	lockelasticacheClientMockDeleteCacheClusterRequest.RUnlock()
	return calls
}

// DeleteCacheClusterWithContext calls DeleteCacheClusterWithContextFunc.
func (mock *elasticacheClientMock) DeleteCacheClusterWithContext(in1 context.Context, in2 *elasticache.DeleteCacheClusterInput, in3 ...request.Option) (*elasticache.DeleteCacheClusterOutput, error) {
	if mock.DeleteCacheClusterWithContextFunc == nil {
		panic("elasticacheClientMock.DeleteCacheClusterWithContextFunc: method is nil but elasticacheClient.DeleteCacheClusterWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DeleteCacheClusterInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockDeleteCacheClusterWithContext.Lock()
	mock.calls.DeleteCacheClusterWithContext = append(mock.calls.DeleteCacheClusterWithContext, callInfo)
	lockelasticacheClientMockDeleteCacheClusterWithContext.Unlock()
	return mock.DeleteCacheClusterWithContextFunc(in1, in2, in3...)
}

// DeleteCacheClusterWithContextCalls gets all the calls that were made to DeleteCacheClusterWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DeleteCacheClusterWithContextCalls())
func (mock *elasticacheClientMock) DeleteCacheClusterWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DeleteCacheClusterInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DeleteCacheClusterInput
		In3 []request.Option
	}
	lockelasticacheClientMockDeleteCacheClusterWithContext.RLock()
	calls = mock.calls.DeleteCacheClusterWithContext
	lockelasticacheClientMockDeleteCacheClusterWithContext.RUnlock()
	return calls
}

// DeleteCacheParameterGroup calls DeleteCacheParameterGroupFunc.
func (mock *elasticacheClientMock) DeleteCacheParameterGroup(in1 *elasticache.DeleteCacheParameterGroupInput) (*elasticache.DeleteCacheParameterGroupOutput, error) {
	if mock.DeleteCacheParameterGroupFunc == nil {
		panic("elasticacheClientMock.DeleteCacheParameterGroupFunc: method is nil but elasticacheClient.DeleteCacheParameterGroup was just called")
	}
	callInfo := struct {
		In1 *elasticache.DeleteCacheParameterGroupInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDeleteCacheParameterGroup.Lock()
	mock.calls.DeleteCacheParameterGroup = append(mock.calls.DeleteCacheParameterGroup, callInfo)
	lockelasticacheClientMockDeleteCacheParameterGroup.Unlock()
	return mock.DeleteCacheParameterGroupFunc(in1)
}

// DeleteCacheParameterGroupCalls gets all the calls that were made to DeleteCacheParameterGroup.
// Check the length with:
//     len(mockedelasticacheClient.DeleteCacheParameterGroupCalls())
func (mock *elasticacheClientMock) DeleteCacheParameterGroupCalls() []struct {
	In1 *elasticache.DeleteCacheParameterGroupInput
} {
	var calls []struct {
		In1 *elasticache.DeleteCacheParameterGroupInput
	}
	lockelasticacheClientMockDeleteCacheParameterGroup.RLock()
	calls = mock.calls.DeleteCacheParameterGroup
	lockelasticacheClientMockDeleteCacheParameterGroup.RUnlock()
	return calls
}

// DeleteCacheParameterGroupRequest calls DeleteCacheParameterGroupRequestFunc.
func (mock *elasticacheClientMock) DeleteCacheParameterGroupRequest(in1 *elasticache.DeleteCacheParameterGroupInput) (*request.Request, *elasticache.DeleteCacheParameterGroupOutput) {
	if mock.DeleteCacheParameterGroupRequestFunc == nil {
		panic("elasticacheClientMock.DeleteCacheParameterGroupRequestFunc: method is nil but elasticacheClient.DeleteCacheParameterGroupRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.DeleteCacheParameterGroupInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDeleteCacheParameterGroupRequest.Lock()
	mock.calls.DeleteCacheParameterGroupRequest = append(mock.calls.DeleteCacheParameterGroupRequest, callInfo)
	lockelasticacheClientMockDeleteCacheParameterGroupRequest.Unlock()
	return mock.DeleteCacheParameterGroupRequestFunc(in1)
}

// DeleteCacheParameterGroupRequestCalls gets all the calls that were made to DeleteCacheParameterGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.DeleteCacheParameterGroupRequestCalls())
func (mock *elasticacheClientMock) DeleteCacheParameterGroupRequestCalls() []struct {
	In1 *elasticache.DeleteCacheParameterGroupInput
} {
	var calls []struct {
		In1 *elasticache.DeleteCacheParameterGroupInput
	}
	lockelasticacheClientMockDeleteCacheParameterGroupRequest.RLock()
	calls = mock.calls.DeleteCacheParameterGroupRequest
	lockelasticacheClientMockDeleteCacheParameterGroupRequest.RUnlock()
	return calls
}

// DeleteCacheParameterGroupWithContext calls DeleteCacheParameterGroupWithContextFunc.
func (mock *elasticacheClientMock) DeleteCacheParameterGroupWithContext(in1 context.Context, in2 *elasticache.DeleteCacheParameterGroupInput, in3 ...request.Option) (*elasticache.DeleteCacheParameterGroupOutput, error) {
	if mock.DeleteCacheParameterGroupWithContextFunc == nil {
		panic("elasticacheClientMock.DeleteCacheParameterGroupWithContextFunc: method is nil but elasticacheClient.DeleteCacheParameterGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DeleteCacheParameterGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockDeleteCacheParameterGroupWithContext.Lock()
	mock.calls.DeleteCacheParameterGroupWithContext = append(mock.calls.DeleteCacheParameterGroupWithContext, callInfo)
	lockelasticacheClientMockDeleteCacheParameterGroupWithContext.Unlock()
	return mock.DeleteCacheParameterGroupWithContextFunc(in1, in2, in3...)
}

// DeleteCacheParameterGroupWithContextCalls gets all the calls that were made to DeleteCacheParameterGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DeleteCacheParameterGroupWithContextCalls())
func (mock *elasticacheClientMock) DeleteCacheParameterGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DeleteCacheParameterGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DeleteCacheParameterGroupInput
		In3 []request.Option
	}
	lockelasticacheClientMockDeleteCacheParameterGroupWithContext.RLock()
	calls = mock.calls.DeleteCacheParameterGroupWithContext
	lockelasticacheClientMockDeleteCacheParameterGroupWithContext.RUnlock()
	return calls
}

// DeleteCacheSecurityGroup calls DeleteCacheSecurityGroupFunc.
func (mock *elasticacheClientMock) DeleteCacheSecurityGroup(in1 *elasticache.DeleteCacheSecurityGroupInput) (*elasticache.DeleteCacheSecurityGroupOutput, error) {
	if mock.DeleteCacheSecurityGroupFunc == nil {
		panic("elasticacheClientMock.DeleteCacheSecurityGroupFunc: method is nil but elasticacheClient.DeleteCacheSecurityGroup was just called")
	}
	callInfo := struct {
		In1 *elasticache.DeleteCacheSecurityGroupInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDeleteCacheSecurityGroup.Lock()
	mock.calls.DeleteCacheSecurityGroup = append(mock.calls.DeleteCacheSecurityGroup, callInfo)
	lockelasticacheClientMockDeleteCacheSecurityGroup.Unlock()
	return mock.DeleteCacheSecurityGroupFunc(in1)
}

// DeleteCacheSecurityGroupCalls gets all the calls that were made to DeleteCacheSecurityGroup.
// Check the length with:
//     len(mockedelasticacheClient.DeleteCacheSecurityGroupCalls())
func (mock *elasticacheClientMock) DeleteCacheSecurityGroupCalls() []struct {
	In1 *elasticache.DeleteCacheSecurityGroupInput
} {
	var calls []struct {
		In1 *elasticache.DeleteCacheSecurityGroupInput
	}
	lockelasticacheClientMockDeleteCacheSecurityGroup.RLock()
	calls = mock.calls.DeleteCacheSecurityGroup
	lockelasticacheClientMockDeleteCacheSecurityGroup.RUnlock()
	return calls
}

// DeleteCacheSecurityGroupRequest calls DeleteCacheSecurityGroupRequestFunc.
func (mock *elasticacheClientMock) DeleteCacheSecurityGroupRequest(in1 *elasticache.DeleteCacheSecurityGroupInput) (*request.Request, *elasticache.DeleteCacheSecurityGroupOutput) {
	if mock.DeleteCacheSecurityGroupRequestFunc == nil {
		panic("elasticacheClientMock.DeleteCacheSecurityGroupRequestFunc: method is nil but elasticacheClient.DeleteCacheSecurityGroupRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.DeleteCacheSecurityGroupInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDeleteCacheSecurityGroupRequest.Lock()
	mock.calls.DeleteCacheSecurityGroupRequest = append(mock.calls.DeleteCacheSecurityGroupRequest, callInfo)
	lockelasticacheClientMockDeleteCacheSecurityGroupRequest.Unlock()
	return mock.DeleteCacheSecurityGroupRequestFunc(in1)
}

// DeleteCacheSecurityGroupRequestCalls gets all the calls that were made to DeleteCacheSecurityGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.DeleteCacheSecurityGroupRequestCalls())
func (mock *elasticacheClientMock) DeleteCacheSecurityGroupRequestCalls() []struct {
	In1 *elasticache.DeleteCacheSecurityGroupInput
} {
	var calls []struct {
		In1 *elasticache.DeleteCacheSecurityGroupInput
	}
	lockelasticacheClientMockDeleteCacheSecurityGroupRequest.RLock()
	calls = mock.calls.DeleteCacheSecurityGroupRequest
	lockelasticacheClientMockDeleteCacheSecurityGroupRequest.RUnlock()
	return calls
}

// DeleteCacheSecurityGroupWithContext calls DeleteCacheSecurityGroupWithContextFunc.
func (mock *elasticacheClientMock) DeleteCacheSecurityGroupWithContext(in1 context.Context, in2 *elasticache.DeleteCacheSecurityGroupInput, in3 ...request.Option) (*elasticache.DeleteCacheSecurityGroupOutput, error) {
	if mock.DeleteCacheSecurityGroupWithContextFunc == nil {
		panic("elasticacheClientMock.DeleteCacheSecurityGroupWithContextFunc: method is nil but elasticacheClient.DeleteCacheSecurityGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DeleteCacheSecurityGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockDeleteCacheSecurityGroupWithContext.Lock()
	mock.calls.DeleteCacheSecurityGroupWithContext = append(mock.calls.DeleteCacheSecurityGroupWithContext, callInfo)
	lockelasticacheClientMockDeleteCacheSecurityGroupWithContext.Unlock()
	return mock.DeleteCacheSecurityGroupWithContextFunc(in1, in2, in3...)
}

// DeleteCacheSecurityGroupWithContextCalls gets all the calls that were made to DeleteCacheSecurityGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DeleteCacheSecurityGroupWithContextCalls())
func (mock *elasticacheClientMock) DeleteCacheSecurityGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DeleteCacheSecurityGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DeleteCacheSecurityGroupInput
		In3 []request.Option
	}
	lockelasticacheClientMockDeleteCacheSecurityGroupWithContext.RLock()
	calls = mock.calls.DeleteCacheSecurityGroupWithContext
	lockelasticacheClientMockDeleteCacheSecurityGroupWithContext.RUnlock()
	return calls
}

// DeleteCacheSubnetGroup calls DeleteCacheSubnetGroupFunc.
func (mock *elasticacheClientMock) DeleteCacheSubnetGroup(in1 *elasticache.DeleteCacheSubnetGroupInput) (*elasticache.DeleteCacheSubnetGroupOutput, error) {
	if mock.DeleteCacheSubnetGroupFunc == nil {
		panic("elasticacheClientMock.DeleteCacheSubnetGroupFunc: method is nil but elasticacheClient.DeleteCacheSubnetGroup was just called")
	}
	callInfo := struct {
		In1 *elasticache.DeleteCacheSubnetGroupInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDeleteCacheSubnetGroup.Lock()
	mock.calls.DeleteCacheSubnetGroup = append(mock.calls.DeleteCacheSubnetGroup, callInfo)
	lockelasticacheClientMockDeleteCacheSubnetGroup.Unlock()
	return mock.DeleteCacheSubnetGroupFunc(in1)
}

// DeleteCacheSubnetGroupCalls gets all the calls that were made to DeleteCacheSubnetGroup.
// Check the length with:
//     len(mockedelasticacheClient.DeleteCacheSubnetGroupCalls())
func (mock *elasticacheClientMock) DeleteCacheSubnetGroupCalls() []struct {
	In1 *elasticache.DeleteCacheSubnetGroupInput
} {
	var calls []struct {
		In1 *elasticache.DeleteCacheSubnetGroupInput
	}
	lockelasticacheClientMockDeleteCacheSubnetGroup.RLock()
	calls = mock.calls.DeleteCacheSubnetGroup
	lockelasticacheClientMockDeleteCacheSubnetGroup.RUnlock()
	return calls
}

// DeleteCacheSubnetGroupRequest calls DeleteCacheSubnetGroupRequestFunc.
func (mock *elasticacheClientMock) DeleteCacheSubnetGroupRequest(in1 *elasticache.DeleteCacheSubnetGroupInput) (*request.Request, *elasticache.DeleteCacheSubnetGroupOutput) {
	if mock.DeleteCacheSubnetGroupRequestFunc == nil {
		panic("elasticacheClientMock.DeleteCacheSubnetGroupRequestFunc: method is nil but elasticacheClient.DeleteCacheSubnetGroupRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.DeleteCacheSubnetGroupInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDeleteCacheSubnetGroupRequest.Lock()
	mock.calls.DeleteCacheSubnetGroupRequest = append(mock.calls.DeleteCacheSubnetGroupRequest, callInfo)
	lockelasticacheClientMockDeleteCacheSubnetGroupRequest.Unlock()
	return mock.DeleteCacheSubnetGroupRequestFunc(in1)
}

// DeleteCacheSubnetGroupRequestCalls gets all the calls that were made to DeleteCacheSubnetGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.DeleteCacheSubnetGroupRequestCalls())
func (mock *elasticacheClientMock) DeleteCacheSubnetGroupRequestCalls() []struct {
	In1 *elasticache.DeleteCacheSubnetGroupInput
} {
	var calls []struct {
		In1 *elasticache.DeleteCacheSubnetGroupInput
	}
	lockelasticacheClientMockDeleteCacheSubnetGroupRequest.RLock()
	calls = mock.calls.DeleteCacheSubnetGroupRequest
	lockelasticacheClientMockDeleteCacheSubnetGroupRequest.RUnlock()
	return calls
}

// DeleteCacheSubnetGroupWithContext calls DeleteCacheSubnetGroupWithContextFunc.
func (mock *elasticacheClientMock) DeleteCacheSubnetGroupWithContext(in1 context.Context, in2 *elasticache.DeleteCacheSubnetGroupInput, in3 ...request.Option) (*elasticache.DeleteCacheSubnetGroupOutput, error) {
	if mock.DeleteCacheSubnetGroupWithContextFunc == nil {
		panic("elasticacheClientMock.DeleteCacheSubnetGroupWithContextFunc: method is nil but elasticacheClient.DeleteCacheSubnetGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DeleteCacheSubnetGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockDeleteCacheSubnetGroupWithContext.Lock()
	mock.calls.DeleteCacheSubnetGroupWithContext = append(mock.calls.DeleteCacheSubnetGroupWithContext, callInfo)
	lockelasticacheClientMockDeleteCacheSubnetGroupWithContext.Unlock()
	return mock.DeleteCacheSubnetGroupWithContextFunc(in1, in2, in3...)
}

// DeleteCacheSubnetGroupWithContextCalls gets all the calls that were made to DeleteCacheSubnetGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DeleteCacheSubnetGroupWithContextCalls())
func (mock *elasticacheClientMock) DeleteCacheSubnetGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DeleteCacheSubnetGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DeleteCacheSubnetGroupInput
		In3 []request.Option
	}
	lockelasticacheClientMockDeleteCacheSubnetGroupWithContext.RLock()
	calls = mock.calls.DeleteCacheSubnetGroupWithContext
	lockelasticacheClientMockDeleteCacheSubnetGroupWithContext.RUnlock()
	return calls
}

// DeleteReplicationGroup calls DeleteReplicationGroupFunc.
func (mock *elasticacheClientMock) DeleteReplicationGroup(in1 *elasticache.DeleteReplicationGroupInput) (*elasticache.DeleteReplicationGroupOutput, error) {
	if mock.DeleteReplicationGroupFunc == nil {
		panic("elasticacheClientMock.DeleteReplicationGroupFunc: method is nil but elasticacheClient.DeleteReplicationGroup was just called")
	}
	callInfo := struct {
		In1 *elasticache.DeleteReplicationGroupInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDeleteReplicationGroup.Lock()
	mock.calls.DeleteReplicationGroup = append(mock.calls.DeleteReplicationGroup, callInfo)
	lockelasticacheClientMockDeleteReplicationGroup.Unlock()
	return mock.DeleteReplicationGroupFunc(in1)
}

// DeleteReplicationGroupCalls gets all the calls that were made to DeleteReplicationGroup.
// Check the length with:
//     len(mockedelasticacheClient.DeleteReplicationGroupCalls())
func (mock *elasticacheClientMock) DeleteReplicationGroupCalls() []struct {
	In1 *elasticache.DeleteReplicationGroupInput
} {
	var calls []struct {
		In1 *elasticache.DeleteReplicationGroupInput
	}
	lockelasticacheClientMockDeleteReplicationGroup.RLock()
	calls = mock.calls.DeleteReplicationGroup
	lockelasticacheClientMockDeleteReplicationGroup.RUnlock()
	return calls
}

// DeleteReplicationGroupRequest calls DeleteReplicationGroupRequestFunc.
func (mock *elasticacheClientMock) DeleteReplicationGroupRequest(in1 *elasticache.DeleteReplicationGroupInput) (*request.Request, *elasticache.DeleteReplicationGroupOutput) {
	if mock.DeleteReplicationGroupRequestFunc == nil {
		panic("elasticacheClientMock.DeleteReplicationGroupRequestFunc: method is nil but elasticacheClient.DeleteReplicationGroupRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.DeleteReplicationGroupInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDeleteReplicationGroupRequest.Lock()
	mock.calls.DeleteReplicationGroupRequest = append(mock.calls.DeleteReplicationGroupRequest, callInfo)
	lockelasticacheClientMockDeleteReplicationGroupRequest.Unlock()
	return mock.DeleteReplicationGroupRequestFunc(in1)
}

// DeleteReplicationGroupRequestCalls gets all the calls that were made to DeleteReplicationGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.DeleteReplicationGroupRequestCalls())
func (mock *elasticacheClientMock) DeleteReplicationGroupRequestCalls() []struct {
	In1 *elasticache.DeleteReplicationGroupInput
} {
	var calls []struct {
		In1 *elasticache.DeleteReplicationGroupInput
	}
	lockelasticacheClientMockDeleteReplicationGroupRequest.RLock()
	calls = mock.calls.DeleteReplicationGroupRequest
	lockelasticacheClientMockDeleteReplicationGroupRequest.RUnlock()
	return calls
}

// DeleteReplicationGroupWithContext calls DeleteReplicationGroupWithContextFunc.
func (mock *elasticacheClientMock) DeleteReplicationGroupWithContext(in1 context.Context, in2 *elasticache.DeleteReplicationGroupInput, in3 ...request.Option) (*elasticache.DeleteReplicationGroupOutput, error) {
	if mock.DeleteReplicationGroupWithContextFunc == nil {
		panic("elasticacheClientMock.DeleteReplicationGroupWithContextFunc: method is nil but elasticacheClient.DeleteReplicationGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DeleteReplicationGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockDeleteReplicationGroupWithContext.Lock()
	mock.calls.DeleteReplicationGroupWithContext = append(mock.calls.DeleteReplicationGroupWithContext, callInfo)
	lockelasticacheClientMockDeleteReplicationGroupWithContext.Unlock()
	return mock.DeleteReplicationGroupWithContextFunc(in1, in2, in3...)
}

// DeleteReplicationGroupWithContextCalls gets all the calls that were made to DeleteReplicationGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DeleteReplicationGroupWithContextCalls())
func (mock *elasticacheClientMock) DeleteReplicationGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DeleteReplicationGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DeleteReplicationGroupInput
		In3 []request.Option
	}
	lockelasticacheClientMockDeleteReplicationGroupWithContext.RLock()
	calls = mock.calls.DeleteReplicationGroupWithContext
	lockelasticacheClientMockDeleteReplicationGroupWithContext.RUnlock()
	return calls
}

// DeleteSnapshot calls DeleteSnapshotFunc.
func (mock *elasticacheClientMock) DeleteSnapshot(in1 *elasticache.DeleteSnapshotInput) (*elasticache.DeleteSnapshotOutput, error) {
	if mock.DeleteSnapshotFunc == nil {
		panic("elasticacheClientMock.DeleteSnapshotFunc: method is nil but elasticacheClient.DeleteSnapshot was just called")
	}
	callInfo := struct {
		In1 *elasticache.DeleteSnapshotInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDeleteSnapshot.Lock()
	mock.calls.DeleteSnapshot = append(mock.calls.DeleteSnapshot, callInfo)
	lockelasticacheClientMockDeleteSnapshot.Unlock()
	return mock.DeleteSnapshotFunc(in1)
}

// DeleteSnapshotCalls gets all the calls that were made to DeleteSnapshot.
// Check the length with:
//     len(mockedelasticacheClient.DeleteSnapshotCalls())
func (mock *elasticacheClientMock) DeleteSnapshotCalls() []struct {
	In1 *elasticache.DeleteSnapshotInput
} {
	var calls []struct {
		In1 *elasticache.DeleteSnapshotInput
	}
	lockelasticacheClientMockDeleteSnapshot.RLock()
	calls = mock.calls.DeleteSnapshot
	lockelasticacheClientMockDeleteSnapshot.RUnlock()
	return calls
}

// DeleteSnapshotRequest calls DeleteSnapshotRequestFunc.
func (mock *elasticacheClientMock) DeleteSnapshotRequest(in1 *elasticache.DeleteSnapshotInput) (*request.Request, *elasticache.DeleteSnapshotOutput) {
	if mock.DeleteSnapshotRequestFunc == nil {
		panic("elasticacheClientMock.DeleteSnapshotRequestFunc: method is nil but elasticacheClient.DeleteSnapshotRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.DeleteSnapshotInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDeleteSnapshotRequest.Lock()
	mock.calls.DeleteSnapshotRequest = append(mock.calls.DeleteSnapshotRequest, callInfo)
	lockelasticacheClientMockDeleteSnapshotRequest.Unlock()
	return mock.DeleteSnapshotRequestFunc(in1)
}

// DeleteSnapshotRequestCalls gets all the calls that were made to DeleteSnapshotRequest.
// Check the length with:
//     len(mockedelasticacheClient.DeleteSnapshotRequestCalls())
func (mock *elasticacheClientMock) DeleteSnapshotRequestCalls() []struct {
	In1 *elasticache.DeleteSnapshotInput
} {
	var calls []struct {
		In1 *elasticache.DeleteSnapshotInput
	}
	lockelasticacheClientMockDeleteSnapshotRequest.RLock()
	calls = mock.calls.DeleteSnapshotRequest
	lockelasticacheClientMockDeleteSnapshotRequest.RUnlock()
	return calls
}

// DeleteSnapshotWithContext calls DeleteSnapshotWithContextFunc.
func (mock *elasticacheClientMock) DeleteSnapshotWithContext(in1 context.Context, in2 *elasticache.DeleteSnapshotInput, in3 ...request.Option) (*elasticache.DeleteSnapshotOutput, error) {
	if mock.DeleteSnapshotWithContextFunc == nil {
		panic("elasticacheClientMock.DeleteSnapshotWithContextFunc: method is nil but elasticacheClient.DeleteSnapshotWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DeleteSnapshotInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockDeleteSnapshotWithContext.Lock()
	mock.calls.DeleteSnapshotWithContext = append(mock.calls.DeleteSnapshotWithContext, callInfo)
	lockelasticacheClientMockDeleteSnapshotWithContext.Unlock()
	return mock.DeleteSnapshotWithContextFunc(in1, in2, in3...)
}

// DeleteSnapshotWithContextCalls gets all the calls that were made to DeleteSnapshotWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DeleteSnapshotWithContextCalls())
func (mock *elasticacheClientMock) DeleteSnapshotWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DeleteSnapshotInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DeleteSnapshotInput
		In3 []request.Option
	}
	lockelasticacheClientMockDeleteSnapshotWithContext.RLock()
	calls = mock.calls.DeleteSnapshotWithContext
	lockelasticacheClientMockDeleteSnapshotWithContext.RUnlock()
	return calls
}

// DescribeCacheClusters calls DescribeCacheClustersFunc.
func (mock *elasticacheClientMock) DescribeCacheClusters(in1 *elasticache.DescribeCacheClustersInput) (*elasticache.DescribeCacheClustersOutput, error) {
	if mock.DescribeCacheClustersFunc == nil {
		panic("elasticacheClientMock.DescribeCacheClustersFunc: method is nil but elasticacheClient.DescribeCacheClusters was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeCacheClustersInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeCacheClusters.Lock()
	mock.calls.DescribeCacheClusters = append(mock.calls.DescribeCacheClusters, callInfo)
	lockelasticacheClientMockDescribeCacheClusters.Unlock()
	return mock.DescribeCacheClustersFunc(in1)
}

// DescribeCacheClustersCalls gets all the calls that were made to DescribeCacheClusters.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheClustersCalls())
func (mock *elasticacheClientMock) DescribeCacheClustersCalls() []struct {
	In1 *elasticache.DescribeCacheClustersInput
} {
	var calls []struct {
		In1 *elasticache.DescribeCacheClustersInput
	}
	lockelasticacheClientMockDescribeCacheClusters.RLock()
	calls = mock.calls.DescribeCacheClusters
	lockelasticacheClientMockDescribeCacheClusters.RUnlock()
	return calls
}

// DescribeCacheClustersPages calls DescribeCacheClustersPagesFunc.
func (mock *elasticacheClientMock) DescribeCacheClustersPages(in1 *elasticache.DescribeCacheClustersInput, in2 func(*elasticache.DescribeCacheClustersOutput, bool) bool) error {
	if mock.DescribeCacheClustersPagesFunc == nil {
		panic("elasticacheClientMock.DescribeCacheClustersPagesFunc: method is nil but elasticacheClient.DescribeCacheClustersPages was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeCacheClustersInput
		In2 func(*elasticache.DescribeCacheClustersOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockelasticacheClientMockDescribeCacheClustersPages.Lock()
	mock.calls.DescribeCacheClustersPages = append(mock.calls.DescribeCacheClustersPages, callInfo)
	lockelasticacheClientMockDescribeCacheClustersPages.Unlock()
	return mock.DescribeCacheClustersPagesFunc(in1, in2)
}

// DescribeCacheClustersPagesCalls gets all the calls that were made to DescribeCacheClustersPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheClustersPagesCalls())
func (mock *elasticacheClientMock) DescribeCacheClustersPagesCalls() []struct {
	In1 *elasticache.DescribeCacheClustersInput
	In2 func(*elasticache.DescribeCacheClustersOutput, bool) bool
} {
	var calls []struct {
		In1 *elasticache.DescribeCacheClustersInput
		In2 func(*elasticache.DescribeCacheClustersOutput, bool) bool
	}
	lockelasticacheClientMockDescribeCacheClustersPages.RLock()
	calls = mock.calls.DescribeCacheClustersPages
	lockelasticacheClientMockDescribeCacheClustersPages.RUnlock()
	return calls
}

// DescribeCacheClustersPagesWithContext calls DescribeCacheClustersPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeCacheClustersPagesWithContext(in1 context.Context, in2 *elasticache.DescribeCacheClustersInput, in3 func(*elasticache.DescribeCacheClustersOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeCacheClustersPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeCacheClustersPagesWithContextFunc: method is nil but elasticacheClient.DescribeCacheClustersPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheClustersInput
		In3 func(*elasticache.DescribeCacheClustersOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockelasticacheClientMockDescribeCacheClustersPagesWithContext.Lock()
	mock.calls.DescribeCacheClustersPagesWithContext = append(mock.calls.DescribeCacheClustersPagesWithContext, callInfo)
	lockelasticacheClientMockDescribeCacheClustersPagesWithContext.Unlock()
	return mock.DescribeCacheClustersPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeCacheClustersPagesWithContextCalls gets all the calls that were made to DescribeCacheClustersPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheClustersPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeCacheClustersPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeCacheClustersInput
	In3 func(*elasticache.DescribeCacheClustersOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheClustersInput
		In3 func(*elasticache.DescribeCacheClustersOutput, bool) bool
		In4 []request.Option
	}
	lockelasticacheClientMockDescribeCacheClustersPagesWithContext.RLock()
	calls = mock.calls.DescribeCacheClustersPagesWithContext
	lockelasticacheClientMockDescribeCacheClustersPagesWithContext.RUnlock()
	return calls
}

// DescribeCacheClustersRequest calls DescribeCacheClustersRequestFunc.
func (mock *elasticacheClientMock) DescribeCacheClustersRequest(in1 *elasticache.DescribeCacheClustersInput) (*request.Request, *elasticache.DescribeCacheClustersOutput) {
	if mock.DescribeCacheClustersRequestFunc == nil {
		panic("elasticacheClientMock.DescribeCacheClustersRequestFunc: method is nil but elasticacheClient.DescribeCacheClustersRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeCacheClustersInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeCacheClustersRequest.Lock()
	mock.calls.DescribeCacheClustersRequest = append(mock.calls.DescribeCacheClustersRequest, callInfo)
	lockelasticacheClientMockDescribeCacheClustersRequest.Unlock()
	return mock.DescribeCacheClustersRequestFunc(in1)
}

// DescribeCacheClustersRequestCalls gets all the calls that were made to DescribeCacheClustersRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheClustersRequestCalls())
func (mock *elasticacheClientMock) DescribeCacheClustersRequestCalls() []struct {
	In1 *elasticache.DescribeCacheClustersInput
} {
	var calls []struct {
		In1 *elasticache.DescribeCacheClustersInput
	}
	lockelasticacheClientMockDescribeCacheClustersRequest.RLock()
	calls = mock.calls.DescribeCacheClustersRequest
	lockelasticacheClientMockDescribeCacheClustersRequest.RUnlock()
	return calls
}

// DescribeCacheClustersWithContext calls DescribeCacheClustersWithContextFunc.
func (mock *elasticacheClientMock) DescribeCacheClustersWithContext(in1 context.Context, in2 *elasticache.DescribeCacheClustersInput, in3 ...request.Option) (*elasticache.DescribeCacheClustersOutput, error) {
	if mock.DescribeCacheClustersWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeCacheClustersWithContextFunc: method is nil but elasticacheClient.DescribeCacheClustersWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheClustersInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockDescribeCacheClustersWithContext.Lock()
	mock.calls.DescribeCacheClustersWithContext = append(mock.calls.DescribeCacheClustersWithContext, callInfo)
	lockelasticacheClientMockDescribeCacheClustersWithContext.Unlock()
	return mock.DescribeCacheClustersWithContextFunc(in1, in2, in3...)
}

// DescribeCacheClustersWithContextCalls gets all the calls that were made to DescribeCacheClustersWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheClustersWithContextCalls())
func (mock *elasticacheClientMock) DescribeCacheClustersWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeCacheClustersInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheClustersInput
		In3 []request.Option
	}
	lockelasticacheClientMockDescribeCacheClustersWithContext.RLock()
	calls = mock.calls.DescribeCacheClustersWithContext
	lockelasticacheClientMockDescribeCacheClustersWithContext.RUnlock()
	return calls
}

// DescribeCacheEngineVersions calls DescribeCacheEngineVersionsFunc.
func (mock *elasticacheClientMock) DescribeCacheEngineVersions(in1 *elasticache.DescribeCacheEngineVersionsInput) (*elasticache.DescribeCacheEngineVersionsOutput, error) {
	if mock.DescribeCacheEngineVersionsFunc == nil {
		panic("elasticacheClientMock.DescribeCacheEngineVersionsFunc: method is nil but elasticacheClient.DescribeCacheEngineVersions was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeCacheEngineVersionsInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeCacheEngineVersions.Lock()
	mock.calls.DescribeCacheEngineVersions = append(mock.calls.DescribeCacheEngineVersions, callInfo)
	lockelasticacheClientMockDescribeCacheEngineVersions.Unlock()
	return mock.DescribeCacheEngineVersionsFunc(in1)
}

// DescribeCacheEngineVersionsCalls gets all the calls that were made to DescribeCacheEngineVersions.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheEngineVersionsCalls())
func (mock *elasticacheClientMock) DescribeCacheEngineVersionsCalls() []struct {
	In1 *elasticache.DescribeCacheEngineVersionsInput
} {
	var calls []struct {
		In1 *elasticache.DescribeCacheEngineVersionsInput
	}
	lockelasticacheClientMockDescribeCacheEngineVersions.RLock()
	calls = mock.calls.DescribeCacheEngineVersions
	lockelasticacheClientMockDescribeCacheEngineVersions.RUnlock()
	return calls
}

// DescribeCacheEngineVersionsPages calls DescribeCacheEngineVersionsPagesFunc.
func (mock *elasticacheClientMock) DescribeCacheEngineVersionsPages(in1 *elasticache.DescribeCacheEngineVersionsInput, in2 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool) error {
	if mock.DescribeCacheEngineVersionsPagesFunc == nil {
		panic("elasticacheClientMock.DescribeCacheEngineVersionsPagesFunc: method is nil but elasticacheClient.DescribeCacheEngineVersionsPages was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeCacheEngineVersionsInput
		In2 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockelasticacheClientMockDescribeCacheEngineVersionsPages.Lock()
	mock.calls.DescribeCacheEngineVersionsPages = append(mock.calls.DescribeCacheEngineVersionsPages, callInfo)
	lockelasticacheClientMockDescribeCacheEngineVersionsPages.Unlock()
	return mock.DescribeCacheEngineVersionsPagesFunc(in1, in2)
}

// DescribeCacheEngineVersionsPagesCalls gets all the calls that were made to DescribeCacheEngineVersionsPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheEngineVersionsPagesCalls())
func (mock *elasticacheClientMock) DescribeCacheEngineVersionsPagesCalls() []struct {
	In1 *elasticache.DescribeCacheEngineVersionsInput
	In2 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool
} {
	var calls []struct {
		In1 *elasticache.DescribeCacheEngineVersionsInput
		In2 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool
	}
	lockelasticacheClientMockDescribeCacheEngineVersionsPages.RLock()
	calls = mock.calls.DescribeCacheEngineVersionsPages
	lockelasticacheClientMockDescribeCacheEngineVersionsPages.RUnlock()
	return calls
}

// DescribeCacheEngineVersionsPagesWithContext calls DescribeCacheEngineVersionsPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeCacheEngineVersionsPagesWithContext(in1 context.Context, in2 *elasticache.DescribeCacheEngineVersionsInput, in3 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeCacheEngineVersionsPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeCacheEngineVersionsPagesWithContextFunc: method is nil but elasticacheClient.DescribeCacheEngineVersionsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheEngineVersionsInput
		In3 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockelasticacheClientMockDescribeCacheEngineVersionsPagesWithContext.Lock()
	mock.calls.DescribeCacheEngineVersionsPagesWithContext = append(mock.calls.DescribeCacheEngineVersionsPagesWithContext, callInfo)
	lockelasticacheClientMockDescribeCacheEngineVersionsPagesWithContext.Unlock()
	return mock.DescribeCacheEngineVersionsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeCacheEngineVersionsPagesWithContextCalls gets all the calls that were made to DescribeCacheEngineVersionsPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheEngineVersionsPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeCacheEngineVersionsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeCacheEngineVersionsInput
	In3 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheEngineVersionsInput
		In3 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool
		In4 []request.Option
	}
	lockelasticacheClientMockDescribeCacheEngineVersionsPagesWithContext.RLock()
	calls = mock.calls.DescribeCacheEngineVersionsPagesWithContext
	lockelasticacheClientMockDescribeCacheEngineVersionsPagesWithContext.RUnlock()
	return calls
}

// DescribeCacheEngineVersionsRequest calls DescribeCacheEngineVersionsRequestFunc.
func (mock *elasticacheClientMock) DescribeCacheEngineVersionsRequest(in1 *elasticache.DescribeCacheEngineVersionsInput) (*request.Request, *elasticache.DescribeCacheEngineVersionsOutput) {
	if mock.DescribeCacheEngineVersionsRequestFunc == nil {
		panic("elasticacheClientMock.DescribeCacheEngineVersionsRequestFunc: method is nil but elasticacheClient.DescribeCacheEngineVersionsRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeCacheEngineVersionsInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeCacheEngineVersionsRequest.Lock()
	mock.calls.DescribeCacheEngineVersionsRequest = append(mock.calls.DescribeCacheEngineVersionsRequest, callInfo)
	lockelasticacheClientMockDescribeCacheEngineVersionsRequest.Unlock()
	return mock.DescribeCacheEngineVersionsRequestFunc(in1)
}

// DescribeCacheEngineVersionsRequestCalls gets all the calls that were made to DescribeCacheEngineVersionsRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheEngineVersionsRequestCalls())
func (mock *elasticacheClientMock) DescribeCacheEngineVersionsRequestCalls() []struct {
	In1 *elasticache.DescribeCacheEngineVersionsInput
} {
	var calls []struct {
		In1 *elasticache.DescribeCacheEngineVersionsInput
	}
	lockelasticacheClientMockDescribeCacheEngineVersionsRequest.RLock()
	calls = mock.calls.DescribeCacheEngineVersionsRequest
	lockelasticacheClientMockDescribeCacheEngineVersionsRequest.RUnlock()
	return calls
}

// DescribeCacheEngineVersionsWithContext calls DescribeCacheEngineVersionsWithContextFunc.
func (mock *elasticacheClientMock) DescribeCacheEngineVersionsWithContext(in1 context.Context, in2 *elasticache.DescribeCacheEngineVersionsInput, in3 ...request.Option) (*elasticache.DescribeCacheEngineVersionsOutput, error) {
	if mock.DescribeCacheEngineVersionsWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeCacheEngineVersionsWithContextFunc: method is nil but elasticacheClient.DescribeCacheEngineVersionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheEngineVersionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockDescribeCacheEngineVersionsWithContext.Lock()
	mock.calls.DescribeCacheEngineVersionsWithContext = append(mock.calls.DescribeCacheEngineVersionsWithContext, callInfo)
	lockelasticacheClientMockDescribeCacheEngineVersionsWithContext.Unlock()
	return mock.DescribeCacheEngineVersionsWithContextFunc(in1, in2, in3...)
}

// DescribeCacheEngineVersionsWithContextCalls gets all the calls that were made to DescribeCacheEngineVersionsWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheEngineVersionsWithContextCalls())
func (mock *elasticacheClientMock) DescribeCacheEngineVersionsWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeCacheEngineVersionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheEngineVersionsInput
		In3 []request.Option
	}
	lockelasticacheClientMockDescribeCacheEngineVersionsWithContext.RLock()
	calls = mock.calls.DescribeCacheEngineVersionsWithContext
	lockelasticacheClientMockDescribeCacheEngineVersionsWithContext.RUnlock()
	return calls
}

// DescribeCacheParameterGroups calls DescribeCacheParameterGroupsFunc.
func (mock *elasticacheClientMock) DescribeCacheParameterGroups(in1 *elasticache.DescribeCacheParameterGroupsInput) (*elasticache.DescribeCacheParameterGroupsOutput, error) {
	if mock.DescribeCacheParameterGroupsFunc == nil {
		panic("elasticacheClientMock.DescribeCacheParameterGroupsFunc: method is nil but elasticacheClient.DescribeCacheParameterGroups was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeCacheParameterGroupsInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeCacheParameterGroups.Lock()
	mock.calls.DescribeCacheParameterGroups = append(mock.calls.DescribeCacheParameterGroups, callInfo)
	lockelasticacheClientMockDescribeCacheParameterGroups.Unlock()
	return mock.DescribeCacheParameterGroupsFunc(in1)
}

// DescribeCacheParameterGroupsCalls gets all the calls that were made to DescribeCacheParameterGroups.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheParameterGroupsCalls())
func (mock *elasticacheClientMock) DescribeCacheParameterGroupsCalls() []struct {
	In1 *elasticache.DescribeCacheParameterGroupsInput
} {
	var calls []struct {
		In1 *elasticache.DescribeCacheParameterGroupsInput
	}
	lockelasticacheClientMockDescribeCacheParameterGroups.RLock()
	calls = mock.calls.DescribeCacheParameterGroups
	lockelasticacheClientMockDescribeCacheParameterGroups.RUnlock()
	return calls
}

// DescribeCacheParameterGroupsPages calls DescribeCacheParameterGroupsPagesFunc.
func (mock *elasticacheClientMock) DescribeCacheParameterGroupsPages(in1 *elasticache.DescribeCacheParameterGroupsInput, in2 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool) error {
	if mock.DescribeCacheParameterGroupsPagesFunc == nil {
		panic("elasticacheClientMock.DescribeCacheParameterGroupsPagesFunc: method is nil but elasticacheClient.DescribeCacheParameterGroupsPages was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeCacheParameterGroupsInput
		In2 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockelasticacheClientMockDescribeCacheParameterGroupsPages.Lock()
	mock.calls.DescribeCacheParameterGroupsPages = append(mock.calls.DescribeCacheParameterGroupsPages, callInfo)
	lockelasticacheClientMockDescribeCacheParameterGroupsPages.Unlock()
	return mock.DescribeCacheParameterGroupsPagesFunc(in1, in2)
}

// DescribeCacheParameterGroupsPagesCalls gets all the calls that were made to DescribeCacheParameterGroupsPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheParameterGroupsPagesCalls())
func (mock *elasticacheClientMock) DescribeCacheParameterGroupsPagesCalls() []struct {
	In1 *elasticache.DescribeCacheParameterGroupsInput
	In2 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool
} {
	var calls []struct {
		In1 *elasticache.DescribeCacheParameterGroupsInput
		In2 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool
	}
	lockelasticacheClientMockDescribeCacheParameterGroupsPages.RLock()
	calls = mock.calls.DescribeCacheParameterGroupsPages
	lockelasticacheClientMockDescribeCacheParameterGroupsPages.RUnlock()
	return calls
}

// DescribeCacheParameterGroupsPagesWithContext calls DescribeCacheParameterGroupsPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeCacheParameterGroupsPagesWithContext(in1 context.Context, in2 *elasticache.DescribeCacheParameterGroupsInput, in3 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeCacheParameterGroupsPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeCacheParameterGroupsPagesWithContextFunc: method is nil but elasticacheClient.DescribeCacheParameterGroupsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheParameterGroupsInput
		In3 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockelasticacheClientMockDescribeCacheParameterGroupsPagesWithContext.Lock()
	mock.calls.DescribeCacheParameterGroupsPagesWithContext = append(mock.calls.DescribeCacheParameterGroupsPagesWithContext, callInfo)
	lockelasticacheClientMockDescribeCacheParameterGroupsPagesWithContext.Unlock()
	return mock.DescribeCacheParameterGroupsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeCacheParameterGroupsPagesWithContextCalls gets all the calls that were made to DescribeCacheParameterGroupsPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheParameterGroupsPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeCacheParameterGroupsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeCacheParameterGroupsInput
	In3 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheParameterGroupsInput
		In3 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool
		In4 []request.Option
	}
	lockelasticacheClientMockDescribeCacheParameterGroupsPagesWithContext.RLock()
	calls = mock.calls.DescribeCacheParameterGroupsPagesWithContext
	lockelasticacheClientMockDescribeCacheParameterGroupsPagesWithContext.RUnlock()
	return calls
}

// DescribeCacheParameterGroupsRequest calls DescribeCacheParameterGroupsRequestFunc.
func (mock *elasticacheClientMock) DescribeCacheParameterGroupsRequest(in1 *elasticache.DescribeCacheParameterGroupsInput) (*request.Request, *elasticache.DescribeCacheParameterGroupsOutput) {
	if mock.DescribeCacheParameterGroupsRequestFunc == nil {
		panic("elasticacheClientMock.DescribeCacheParameterGroupsRequestFunc: method is nil but elasticacheClient.DescribeCacheParameterGroupsRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeCacheParameterGroupsInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeCacheParameterGroupsRequest.Lock()
	mock.calls.DescribeCacheParameterGroupsRequest = append(mock.calls.DescribeCacheParameterGroupsRequest, callInfo)
	lockelasticacheClientMockDescribeCacheParameterGroupsRequest.Unlock()
	return mock.DescribeCacheParameterGroupsRequestFunc(in1)
}

// DescribeCacheParameterGroupsRequestCalls gets all the calls that were made to DescribeCacheParameterGroupsRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheParameterGroupsRequestCalls())
func (mock *elasticacheClientMock) DescribeCacheParameterGroupsRequestCalls() []struct {
	In1 *elasticache.DescribeCacheParameterGroupsInput
} {
	var calls []struct {
		In1 *elasticache.DescribeCacheParameterGroupsInput
	}
	lockelasticacheClientMockDescribeCacheParameterGroupsRequest.RLock()
	calls = mock.calls.DescribeCacheParameterGroupsRequest
	lockelasticacheClientMockDescribeCacheParameterGroupsRequest.RUnlock()
	return calls
}

// DescribeCacheParameterGroupsWithContext calls DescribeCacheParameterGroupsWithContextFunc.
func (mock *elasticacheClientMock) DescribeCacheParameterGroupsWithContext(in1 context.Context, in2 *elasticache.DescribeCacheParameterGroupsInput, in3 ...request.Option) (*elasticache.DescribeCacheParameterGroupsOutput, error) {
	if mock.DescribeCacheParameterGroupsWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeCacheParameterGroupsWithContextFunc: method is nil but elasticacheClient.DescribeCacheParameterGroupsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheParameterGroupsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockDescribeCacheParameterGroupsWithContext.Lock()
	mock.calls.DescribeCacheParameterGroupsWithContext = append(mock.calls.DescribeCacheParameterGroupsWithContext, callInfo)
	lockelasticacheClientMockDescribeCacheParameterGroupsWithContext.Unlock()
	return mock.DescribeCacheParameterGroupsWithContextFunc(in1, in2, in3...)
}

// DescribeCacheParameterGroupsWithContextCalls gets all the calls that were made to DescribeCacheParameterGroupsWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheParameterGroupsWithContextCalls())
func (mock *elasticacheClientMock) DescribeCacheParameterGroupsWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeCacheParameterGroupsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheParameterGroupsInput
		In3 []request.Option
	}
	lockelasticacheClientMockDescribeCacheParameterGroupsWithContext.RLock()
	calls = mock.calls.DescribeCacheParameterGroupsWithContext
	lockelasticacheClientMockDescribeCacheParameterGroupsWithContext.RUnlock()
	return calls
}

// DescribeCacheParameters calls DescribeCacheParametersFunc.
func (mock *elasticacheClientMock) DescribeCacheParameters(in1 *elasticache.DescribeCacheParametersInput) (*elasticache.DescribeCacheParametersOutput, error) {
	if mock.DescribeCacheParametersFunc == nil {
		panic("elasticacheClientMock.DescribeCacheParametersFunc: method is nil but elasticacheClient.DescribeCacheParameters was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeCacheParametersInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeCacheParameters.Lock()
	mock.calls.DescribeCacheParameters = append(mock.calls.DescribeCacheParameters, callInfo)
	lockelasticacheClientMockDescribeCacheParameters.Unlock()
	return mock.DescribeCacheParametersFunc(in1)
}

// DescribeCacheParametersCalls gets all the calls that were made to DescribeCacheParameters.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheParametersCalls())
func (mock *elasticacheClientMock) DescribeCacheParametersCalls() []struct {
	In1 *elasticache.DescribeCacheParametersInput
} {
	var calls []struct {
		In1 *elasticache.DescribeCacheParametersInput
	}
	lockelasticacheClientMockDescribeCacheParameters.RLock()
	calls = mock.calls.DescribeCacheParameters
	lockelasticacheClientMockDescribeCacheParameters.RUnlock()
	return calls
}

// DescribeCacheParametersPages calls DescribeCacheParametersPagesFunc.
func (mock *elasticacheClientMock) DescribeCacheParametersPages(in1 *elasticache.DescribeCacheParametersInput, in2 func(*elasticache.DescribeCacheParametersOutput, bool) bool) error {
	if mock.DescribeCacheParametersPagesFunc == nil {
		panic("elasticacheClientMock.DescribeCacheParametersPagesFunc: method is nil but elasticacheClient.DescribeCacheParametersPages was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeCacheParametersInput
		In2 func(*elasticache.DescribeCacheParametersOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockelasticacheClientMockDescribeCacheParametersPages.Lock()
	mock.calls.DescribeCacheParametersPages = append(mock.calls.DescribeCacheParametersPages, callInfo)
	lockelasticacheClientMockDescribeCacheParametersPages.Unlock()
	return mock.DescribeCacheParametersPagesFunc(in1, in2)
}

// DescribeCacheParametersPagesCalls gets all the calls that were made to DescribeCacheParametersPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheParametersPagesCalls())
func (mock *elasticacheClientMock) DescribeCacheParametersPagesCalls() []struct {
	In1 *elasticache.DescribeCacheParametersInput
	In2 func(*elasticache.DescribeCacheParametersOutput, bool) bool
} {
	var calls []struct {
		In1 *elasticache.DescribeCacheParametersInput
		In2 func(*elasticache.DescribeCacheParametersOutput, bool) bool
	}
	lockelasticacheClientMockDescribeCacheParametersPages.RLock()
	calls = mock.calls.DescribeCacheParametersPages
	lockelasticacheClientMockDescribeCacheParametersPages.RUnlock()
	return calls
}

// DescribeCacheParametersPagesWithContext calls DescribeCacheParametersPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeCacheParametersPagesWithContext(in1 context.Context, in2 *elasticache.DescribeCacheParametersInput, in3 func(*elasticache.DescribeCacheParametersOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeCacheParametersPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeCacheParametersPagesWithContextFunc: method is nil but elasticacheClient.DescribeCacheParametersPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheParametersInput
		In3 func(*elasticache.DescribeCacheParametersOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockelasticacheClientMockDescribeCacheParametersPagesWithContext.Lock()
	mock.calls.DescribeCacheParametersPagesWithContext = append(mock.calls.DescribeCacheParametersPagesWithContext, callInfo)
	lockelasticacheClientMockDescribeCacheParametersPagesWithContext.Unlock()
	return mock.DescribeCacheParametersPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeCacheParametersPagesWithContextCalls gets all the calls that were made to DescribeCacheParametersPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheParametersPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeCacheParametersPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeCacheParametersInput
	In3 func(*elasticache.DescribeCacheParametersOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheParametersInput
		In3 func(*elasticache.DescribeCacheParametersOutput, bool) bool
		In4 []request.Option
	}
	lockelasticacheClientMockDescribeCacheParametersPagesWithContext.RLock()
	calls = mock.calls.DescribeCacheParametersPagesWithContext
	lockelasticacheClientMockDescribeCacheParametersPagesWithContext.RUnlock()
	return calls
}

// DescribeCacheParametersRequest calls DescribeCacheParametersRequestFunc.
func (mock *elasticacheClientMock) DescribeCacheParametersRequest(in1 *elasticache.DescribeCacheParametersInput) (*request.Request, *elasticache.DescribeCacheParametersOutput) {
	if mock.DescribeCacheParametersRequestFunc == nil {
		panic("elasticacheClientMock.DescribeCacheParametersRequestFunc: method is nil but elasticacheClient.DescribeCacheParametersRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeCacheParametersInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeCacheParametersRequest.Lock()
	mock.calls.DescribeCacheParametersRequest = append(mock.calls.DescribeCacheParametersRequest, callInfo)
	lockelasticacheClientMockDescribeCacheParametersRequest.Unlock()
	return mock.DescribeCacheParametersRequestFunc(in1)
}

// DescribeCacheParametersRequestCalls gets all the calls that were made to DescribeCacheParametersRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheParametersRequestCalls())
func (mock *elasticacheClientMock) DescribeCacheParametersRequestCalls() []struct {
	In1 *elasticache.DescribeCacheParametersInput
} {
	var calls []struct {
		In1 *elasticache.DescribeCacheParametersInput
	}
	lockelasticacheClientMockDescribeCacheParametersRequest.RLock()
	calls = mock.calls.DescribeCacheParametersRequest
	lockelasticacheClientMockDescribeCacheParametersRequest.RUnlock()
	return calls
}

// DescribeCacheParametersWithContext calls DescribeCacheParametersWithContextFunc.
func (mock *elasticacheClientMock) DescribeCacheParametersWithContext(in1 context.Context, in2 *elasticache.DescribeCacheParametersInput, in3 ...request.Option) (*elasticache.DescribeCacheParametersOutput, error) {
	if mock.DescribeCacheParametersWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeCacheParametersWithContextFunc: method is nil but elasticacheClient.DescribeCacheParametersWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheParametersInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockDescribeCacheParametersWithContext.Lock()
	mock.calls.DescribeCacheParametersWithContext = append(mock.calls.DescribeCacheParametersWithContext, callInfo)
	lockelasticacheClientMockDescribeCacheParametersWithContext.Unlock()
	return mock.DescribeCacheParametersWithContextFunc(in1, in2, in3...)
}

// DescribeCacheParametersWithContextCalls gets all the calls that were made to DescribeCacheParametersWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheParametersWithContextCalls())
func (mock *elasticacheClientMock) DescribeCacheParametersWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeCacheParametersInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheParametersInput
		In3 []request.Option
	}
	lockelasticacheClientMockDescribeCacheParametersWithContext.RLock()
	calls = mock.calls.DescribeCacheParametersWithContext
	lockelasticacheClientMockDescribeCacheParametersWithContext.RUnlock()
	return calls
}

// DescribeCacheSecurityGroups calls DescribeCacheSecurityGroupsFunc.
func (mock *elasticacheClientMock) DescribeCacheSecurityGroups(in1 *elasticache.DescribeCacheSecurityGroupsInput) (*elasticache.DescribeCacheSecurityGroupsOutput, error) {
	if mock.DescribeCacheSecurityGroupsFunc == nil {
		panic("elasticacheClientMock.DescribeCacheSecurityGroupsFunc: method is nil but elasticacheClient.DescribeCacheSecurityGroups was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeCacheSecurityGroupsInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeCacheSecurityGroups.Lock()
	mock.calls.DescribeCacheSecurityGroups = append(mock.calls.DescribeCacheSecurityGroups, callInfo)
	lockelasticacheClientMockDescribeCacheSecurityGroups.Unlock()
	return mock.DescribeCacheSecurityGroupsFunc(in1)
}

// DescribeCacheSecurityGroupsCalls gets all the calls that were made to DescribeCacheSecurityGroups.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheSecurityGroupsCalls())
func (mock *elasticacheClientMock) DescribeCacheSecurityGroupsCalls() []struct {
	In1 *elasticache.DescribeCacheSecurityGroupsInput
} {
	var calls []struct {
		In1 *elasticache.DescribeCacheSecurityGroupsInput
	}
	lockelasticacheClientMockDescribeCacheSecurityGroups.RLock()
	calls = mock.calls.DescribeCacheSecurityGroups
	lockelasticacheClientMockDescribeCacheSecurityGroups.RUnlock()
	return calls
}

// DescribeCacheSecurityGroupsPages calls DescribeCacheSecurityGroupsPagesFunc.
func (mock *elasticacheClientMock) DescribeCacheSecurityGroupsPages(in1 *elasticache.DescribeCacheSecurityGroupsInput, in2 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool) error {
	if mock.DescribeCacheSecurityGroupsPagesFunc == nil {
		panic("elasticacheClientMock.DescribeCacheSecurityGroupsPagesFunc: method is nil but elasticacheClient.DescribeCacheSecurityGroupsPages was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeCacheSecurityGroupsInput
		In2 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockelasticacheClientMockDescribeCacheSecurityGroupsPages.Lock()
	mock.calls.DescribeCacheSecurityGroupsPages = append(mock.calls.DescribeCacheSecurityGroupsPages, callInfo)
	lockelasticacheClientMockDescribeCacheSecurityGroupsPages.Unlock()
	return mock.DescribeCacheSecurityGroupsPagesFunc(in1, in2)
}

// DescribeCacheSecurityGroupsPagesCalls gets all the calls that were made to DescribeCacheSecurityGroupsPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheSecurityGroupsPagesCalls())
func (mock *elasticacheClientMock) DescribeCacheSecurityGroupsPagesCalls() []struct {
	In1 *elasticache.DescribeCacheSecurityGroupsInput
	In2 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool
} {
	var calls []struct {
		In1 *elasticache.DescribeCacheSecurityGroupsInput
		In2 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool
	}
	lockelasticacheClientMockDescribeCacheSecurityGroupsPages.RLock()
	calls = mock.calls.DescribeCacheSecurityGroupsPages
	lockelasticacheClientMockDescribeCacheSecurityGroupsPages.RUnlock()
	return calls
}

// DescribeCacheSecurityGroupsPagesWithContext calls DescribeCacheSecurityGroupsPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeCacheSecurityGroupsPagesWithContext(in1 context.Context, in2 *elasticache.DescribeCacheSecurityGroupsInput, in3 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeCacheSecurityGroupsPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeCacheSecurityGroupsPagesWithContextFunc: method is nil but elasticacheClient.DescribeCacheSecurityGroupsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheSecurityGroupsInput
		In3 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockelasticacheClientMockDescribeCacheSecurityGroupsPagesWithContext.Lock()
	mock.calls.DescribeCacheSecurityGroupsPagesWithContext = append(mock.calls.DescribeCacheSecurityGroupsPagesWithContext, callInfo)
	lockelasticacheClientMockDescribeCacheSecurityGroupsPagesWithContext.Unlock()
	return mock.DescribeCacheSecurityGroupsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeCacheSecurityGroupsPagesWithContextCalls gets all the calls that were made to DescribeCacheSecurityGroupsPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheSecurityGroupsPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeCacheSecurityGroupsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeCacheSecurityGroupsInput
	In3 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheSecurityGroupsInput
		In3 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool
		In4 []request.Option
	}
	lockelasticacheClientMockDescribeCacheSecurityGroupsPagesWithContext.RLock()
	calls = mock.calls.DescribeCacheSecurityGroupsPagesWithContext
	lockelasticacheClientMockDescribeCacheSecurityGroupsPagesWithContext.RUnlock()
	return calls
}

// DescribeCacheSecurityGroupsRequest calls DescribeCacheSecurityGroupsRequestFunc.
func (mock *elasticacheClientMock) DescribeCacheSecurityGroupsRequest(in1 *elasticache.DescribeCacheSecurityGroupsInput) (*request.Request, *elasticache.DescribeCacheSecurityGroupsOutput) {
	if mock.DescribeCacheSecurityGroupsRequestFunc == nil {
		panic("elasticacheClientMock.DescribeCacheSecurityGroupsRequestFunc: method is nil but elasticacheClient.DescribeCacheSecurityGroupsRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeCacheSecurityGroupsInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeCacheSecurityGroupsRequest.Lock()
	mock.calls.DescribeCacheSecurityGroupsRequest = append(mock.calls.DescribeCacheSecurityGroupsRequest, callInfo)
	lockelasticacheClientMockDescribeCacheSecurityGroupsRequest.Unlock()
	return mock.DescribeCacheSecurityGroupsRequestFunc(in1)
}

// DescribeCacheSecurityGroupsRequestCalls gets all the calls that were made to DescribeCacheSecurityGroupsRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheSecurityGroupsRequestCalls())
func (mock *elasticacheClientMock) DescribeCacheSecurityGroupsRequestCalls() []struct {
	In1 *elasticache.DescribeCacheSecurityGroupsInput
} {
	var calls []struct {
		In1 *elasticache.DescribeCacheSecurityGroupsInput
	}
	lockelasticacheClientMockDescribeCacheSecurityGroupsRequest.RLock()
	calls = mock.calls.DescribeCacheSecurityGroupsRequest
	lockelasticacheClientMockDescribeCacheSecurityGroupsRequest.RUnlock()
	return calls
}

// DescribeCacheSecurityGroupsWithContext calls DescribeCacheSecurityGroupsWithContextFunc.
func (mock *elasticacheClientMock) DescribeCacheSecurityGroupsWithContext(in1 context.Context, in2 *elasticache.DescribeCacheSecurityGroupsInput, in3 ...request.Option) (*elasticache.DescribeCacheSecurityGroupsOutput, error) {
	if mock.DescribeCacheSecurityGroupsWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeCacheSecurityGroupsWithContextFunc: method is nil but elasticacheClient.DescribeCacheSecurityGroupsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheSecurityGroupsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockDescribeCacheSecurityGroupsWithContext.Lock()
	mock.calls.DescribeCacheSecurityGroupsWithContext = append(mock.calls.DescribeCacheSecurityGroupsWithContext, callInfo)
	lockelasticacheClientMockDescribeCacheSecurityGroupsWithContext.Unlock()
	return mock.DescribeCacheSecurityGroupsWithContextFunc(in1, in2, in3...)
}

// DescribeCacheSecurityGroupsWithContextCalls gets all the calls that were made to DescribeCacheSecurityGroupsWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheSecurityGroupsWithContextCalls())
func (mock *elasticacheClientMock) DescribeCacheSecurityGroupsWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeCacheSecurityGroupsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheSecurityGroupsInput
		In3 []request.Option
	}
	lockelasticacheClientMockDescribeCacheSecurityGroupsWithContext.RLock()
	calls = mock.calls.DescribeCacheSecurityGroupsWithContext
	lockelasticacheClientMockDescribeCacheSecurityGroupsWithContext.RUnlock()
	return calls
}

// DescribeCacheSubnetGroups calls DescribeCacheSubnetGroupsFunc.
func (mock *elasticacheClientMock) DescribeCacheSubnetGroups(in1 *elasticache.DescribeCacheSubnetGroupsInput) (*elasticache.DescribeCacheSubnetGroupsOutput, error) {
	if mock.DescribeCacheSubnetGroupsFunc == nil {
		panic("elasticacheClientMock.DescribeCacheSubnetGroupsFunc: method is nil but elasticacheClient.DescribeCacheSubnetGroups was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeCacheSubnetGroupsInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeCacheSubnetGroups.Lock()
	mock.calls.DescribeCacheSubnetGroups = append(mock.calls.DescribeCacheSubnetGroups, callInfo)
	lockelasticacheClientMockDescribeCacheSubnetGroups.Unlock()
	return mock.DescribeCacheSubnetGroupsFunc(in1)
}

// DescribeCacheSubnetGroupsCalls gets all the calls that were made to DescribeCacheSubnetGroups.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheSubnetGroupsCalls())
func (mock *elasticacheClientMock) DescribeCacheSubnetGroupsCalls() []struct {
	In1 *elasticache.DescribeCacheSubnetGroupsInput
} {
	var calls []struct {
		In1 *elasticache.DescribeCacheSubnetGroupsInput
	}
	lockelasticacheClientMockDescribeCacheSubnetGroups.RLock()
	calls = mock.calls.DescribeCacheSubnetGroups
	lockelasticacheClientMockDescribeCacheSubnetGroups.RUnlock()
	return calls
}

// DescribeCacheSubnetGroupsPages calls DescribeCacheSubnetGroupsPagesFunc.
func (mock *elasticacheClientMock) DescribeCacheSubnetGroupsPages(in1 *elasticache.DescribeCacheSubnetGroupsInput, in2 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool) error {
	if mock.DescribeCacheSubnetGroupsPagesFunc == nil {
		panic("elasticacheClientMock.DescribeCacheSubnetGroupsPagesFunc: method is nil but elasticacheClient.DescribeCacheSubnetGroupsPages was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeCacheSubnetGroupsInput
		In2 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockelasticacheClientMockDescribeCacheSubnetGroupsPages.Lock()
	mock.calls.DescribeCacheSubnetGroupsPages = append(mock.calls.DescribeCacheSubnetGroupsPages, callInfo)
	lockelasticacheClientMockDescribeCacheSubnetGroupsPages.Unlock()
	return mock.DescribeCacheSubnetGroupsPagesFunc(in1, in2)
}

// DescribeCacheSubnetGroupsPagesCalls gets all the calls that were made to DescribeCacheSubnetGroupsPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheSubnetGroupsPagesCalls())
func (mock *elasticacheClientMock) DescribeCacheSubnetGroupsPagesCalls() []struct {
	In1 *elasticache.DescribeCacheSubnetGroupsInput
	In2 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool
} {
	var calls []struct {
		In1 *elasticache.DescribeCacheSubnetGroupsInput
		In2 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool
	}
	lockelasticacheClientMockDescribeCacheSubnetGroupsPages.RLock()
	calls = mock.calls.DescribeCacheSubnetGroupsPages
	lockelasticacheClientMockDescribeCacheSubnetGroupsPages.RUnlock()
	return calls
}

// DescribeCacheSubnetGroupsPagesWithContext calls DescribeCacheSubnetGroupsPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeCacheSubnetGroupsPagesWithContext(in1 context.Context, in2 *elasticache.DescribeCacheSubnetGroupsInput, in3 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeCacheSubnetGroupsPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeCacheSubnetGroupsPagesWithContextFunc: method is nil but elasticacheClient.DescribeCacheSubnetGroupsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheSubnetGroupsInput
		In3 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockelasticacheClientMockDescribeCacheSubnetGroupsPagesWithContext.Lock()
	mock.calls.DescribeCacheSubnetGroupsPagesWithContext = append(mock.calls.DescribeCacheSubnetGroupsPagesWithContext, callInfo)
	lockelasticacheClientMockDescribeCacheSubnetGroupsPagesWithContext.Unlock()
	return mock.DescribeCacheSubnetGroupsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeCacheSubnetGroupsPagesWithContextCalls gets all the calls that were made to DescribeCacheSubnetGroupsPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheSubnetGroupsPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeCacheSubnetGroupsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeCacheSubnetGroupsInput
	In3 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheSubnetGroupsInput
		In3 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool
		In4 []request.Option
	}
	lockelasticacheClientMockDescribeCacheSubnetGroupsPagesWithContext.RLock()
	calls = mock.calls.DescribeCacheSubnetGroupsPagesWithContext
	lockelasticacheClientMockDescribeCacheSubnetGroupsPagesWithContext.RUnlock()
	return calls
}

// DescribeCacheSubnetGroupsRequest calls DescribeCacheSubnetGroupsRequestFunc.
func (mock *elasticacheClientMock) DescribeCacheSubnetGroupsRequest(in1 *elasticache.DescribeCacheSubnetGroupsInput) (*request.Request, *elasticache.DescribeCacheSubnetGroupsOutput) {
	if mock.DescribeCacheSubnetGroupsRequestFunc == nil {
		panic("elasticacheClientMock.DescribeCacheSubnetGroupsRequestFunc: method is nil but elasticacheClient.DescribeCacheSubnetGroupsRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeCacheSubnetGroupsInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeCacheSubnetGroupsRequest.Lock()
	mock.calls.DescribeCacheSubnetGroupsRequest = append(mock.calls.DescribeCacheSubnetGroupsRequest, callInfo)
	lockelasticacheClientMockDescribeCacheSubnetGroupsRequest.Unlock()
	return mock.DescribeCacheSubnetGroupsRequestFunc(in1)
}

// DescribeCacheSubnetGroupsRequestCalls gets all the calls that were made to DescribeCacheSubnetGroupsRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheSubnetGroupsRequestCalls())
func (mock *elasticacheClientMock) DescribeCacheSubnetGroupsRequestCalls() []struct {
	In1 *elasticache.DescribeCacheSubnetGroupsInput
} {
	var calls []struct {
		In1 *elasticache.DescribeCacheSubnetGroupsInput
	}
	lockelasticacheClientMockDescribeCacheSubnetGroupsRequest.RLock()
	calls = mock.calls.DescribeCacheSubnetGroupsRequest
	lockelasticacheClientMockDescribeCacheSubnetGroupsRequest.RUnlock()
	return calls
}

// DescribeCacheSubnetGroupsWithContext calls DescribeCacheSubnetGroupsWithContextFunc.
func (mock *elasticacheClientMock) DescribeCacheSubnetGroupsWithContext(in1 context.Context, in2 *elasticache.DescribeCacheSubnetGroupsInput, in3 ...request.Option) (*elasticache.DescribeCacheSubnetGroupsOutput, error) {
	if mock.DescribeCacheSubnetGroupsWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeCacheSubnetGroupsWithContextFunc: method is nil but elasticacheClient.DescribeCacheSubnetGroupsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheSubnetGroupsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockDescribeCacheSubnetGroupsWithContext.Lock()
	mock.calls.DescribeCacheSubnetGroupsWithContext = append(mock.calls.DescribeCacheSubnetGroupsWithContext, callInfo)
	lockelasticacheClientMockDescribeCacheSubnetGroupsWithContext.Unlock()
	return mock.DescribeCacheSubnetGroupsWithContextFunc(in1, in2, in3...)
}

// DescribeCacheSubnetGroupsWithContextCalls gets all the calls that were made to DescribeCacheSubnetGroupsWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheSubnetGroupsWithContextCalls())
func (mock *elasticacheClientMock) DescribeCacheSubnetGroupsWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeCacheSubnetGroupsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheSubnetGroupsInput
		In3 []request.Option
	}
	lockelasticacheClientMockDescribeCacheSubnetGroupsWithContext.RLock()
	calls = mock.calls.DescribeCacheSubnetGroupsWithContext
	lockelasticacheClientMockDescribeCacheSubnetGroupsWithContext.RUnlock()
	return calls
}

// DescribeEngineDefaultParameters calls DescribeEngineDefaultParametersFunc.
func (mock *elasticacheClientMock) DescribeEngineDefaultParameters(in1 *elasticache.DescribeEngineDefaultParametersInput) (*elasticache.DescribeEngineDefaultParametersOutput, error) {
	if mock.DescribeEngineDefaultParametersFunc == nil {
		panic("elasticacheClientMock.DescribeEngineDefaultParametersFunc: method is nil but elasticacheClient.DescribeEngineDefaultParameters was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeEngineDefaultParametersInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeEngineDefaultParameters.Lock()
	mock.calls.DescribeEngineDefaultParameters = append(mock.calls.DescribeEngineDefaultParameters, callInfo)
	lockelasticacheClientMockDescribeEngineDefaultParameters.Unlock()
	return mock.DescribeEngineDefaultParametersFunc(in1)
}

// DescribeEngineDefaultParametersCalls gets all the calls that were made to DescribeEngineDefaultParameters.
// Check the length with:
//     len(mockedelasticacheClient.DescribeEngineDefaultParametersCalls())
func (mock *elasticacheClientMock) DescribeEngineDefaultParametersCalls() []struct {
	In1 *elasticache.DescribeEngineDefaultParametersInput
} {
	var calls []struct {
		In1 *elasticache.DescribeEngineDefaultParametersInput
	}
	lockelasticacheClientMockDescribeEngineDefaultParameters.RLock()
	calls = mock.calls.DescribeEngineDefaultParameters
	lockelasticacheClientMockDescribeEngineDefaultParameters.RUnlock()
	return calls
}

// DescribeEngineDefaultParametersPages calls DescribeEngineDefaultParametersPagesFunc.
func (mock *elasticacheClientMock) DescribeEngineDefaultParametersPages(in1 *elasticache.DescribeEngineDefaultParametersInput, in2 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool) error {
	if mock.DescribeEngineDefaultParametersPagesFunc == nil {
		panic("elasticacheClientMock.DescribeEngineDefaultParametersPagesFunc: method is nil but elasticacheClient.DescribeEngineDefaultParametersPages was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeEngineDefaultParametersInput
		In2 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockelasticacheClientMockDescribeEngineDefaultParametersPages.Lock()
	mock.calls.DescribeEngineDefaultParametersPages = append(mock.calls.DescribeEngineDefaultParametersPages, callInfo)
	lockelasticacheClientMockDescribeEngineDefaultParametersPages.Unlock()
	return mock.DescribeEngineDefaultParametersPagesFunc(in1, in2)
}

// DescribeEngineDefaultParametersPagesCalls gets all the calls that were made to DescribeEngineDefaultParametersPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeEngineDefaultParametersPagesCalls())
func (mock *elasticacheClientMock) DescribeEngineDefaultParametersPagesCalls() []struct {
	In1 *elasticache.DescribeEngineDefaultParametersInput
	In2 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool
} {
	var calls []struct {
		In1 *elasticache.DescribeEngineDefaultParametersInput
		In2 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool
	}
	lockelasticacheClientMockDescribeEngineDefaultParametersPages.RLock()
	calls = mock.calls.DescribeEngineDefaultParametersPages
	lockelasticacheClientMockDescribeEngineDefaultParametersPages.RUnlock()
	return calls
}

// DescribeEngineDefaultParametersPagesWithContext calls DescribeEngineDefaultParametersPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeEngineDefaultParametersPagesWithContext(in1 context.Context, in2 *elasticache.DescribeEngineDefaultParametersInput, in3 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeEngineDefaultParametersPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeEngineDefaultParametersPagesWithContextFunc: method is nil but elasticacheClient.DescribeEngineDefaultParametersPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeEngineDefaultParametersInput
		In3 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockelasticacheClientMockDescribeEngineDefaultParametersPagesWithContext.Lock()
	mock.calls.DescribeEngineDefaultParametersPagesWithContext = append(mock.calls.DescribeEngineDefaultParametersPagesWithContext, callInfo)
	lockelasticacheClientMockDescribeEngineDefaultParametersPagesWithContext.Unlock()
	return mock.DescribeEngineDefaultParametersPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeEngineDefaultParametersPagesWithContextCalls gets all the calls that were made to DescribeEngineDefaultParametersPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeEngineDefaultParametersPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeEngineDefaultParametersPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeEngineDefaultParametersInput
	In3 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeEngineDefaultParametersInput
		In3 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool
		In4 []request.Option
	}
	lockelasticacheClientMockDescribeEngineDefaultParametersPagesWithContext.RLock()
	calls = mock.calls.DescribeEngineDefaultParametersPagesWithContext
	lockelasticacheClientMockDescribeEngineDefaultParametersPagesWithContext.RUnlock()
	return calls
}

// DescribeEngineDefaultParametersRequest calls DescribeEngineDefaultParametersRequestFunc.
func (mock *elasticacheClientMock) DescribeEngineDefaultParametersRequest(in1 *elasticache.DescribeEngineDefaultParametersInput) (*request.Request, *elasticache.DescribeEngineDefaultParametersOutput) {
	if mock.DescribeEngineDefaultParametersRequestFunc == nil {
		panic("elasticacheClientMock.DescribeEngineDefaultParametersRequestFunc: method is nil but elasticacheClient.DescribeEngineDefaultParametersRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeEngineDefaultParametersInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeEngineDefaultParametersRequest.Lock()
	mock.calls.DescribeEngineDefaultParametersRequest = append(mock.calls.DescribeEngineDefaultParametersRequest, callInfo)
	lockelasticacheClientMockDescribeEngineDefaultParametersRequest.Unlock()
	return mock.DescribeEngineDefaultParametersRequestFunc(in1)
}

// DescribeEngineDefaultParametersRequestCalls gets all the calls that were made to DescribeEngineDefaultParametersRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeEngineDefaultParametersRequestCalls())
func (mock *elasticacheClientMock) DescribeEngineDefaultParametersRequestCalls() []struct {
	In1 *elasticache.DescribeEngineDefaultParametersInput
} {
	var calls []struct {
		In1 *elasticache.DescribeEngineDefaultParametersInput
	}
	lockelasticacheClientMockDescribeEngineDefaultParametersRequest.RLock()
	calls = mock.calls.DescribeEngineDefaultParametersRequest
	lockelasticacheClientMockDescribeEngineDefaultParametersRequest.RUnlock()
	return calls
}

// DescribeEngineDefaultParametersWithContext calls DescribeEngineDefaultParametersWithContextFunc.
func (mock *elasticacheClientMock) DescribeEngineDefaultParametersWithContext(in1 context.Context, in2 *elasticache.DescribeEngineDefaultParametersInput, in3 ...request.Option) (*elasticache.DescribeEngineDefaultParametersOutput, error) {
	if mock.DescribeEngineDefaultParametersWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeEngineDefaultParametersWithContextFunc: method is nil but elasticacheClient.DescribeEngineDefaultParametersWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeEngineDefaultParametersInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockDescribeEngineDefaultParametersWithContext.Lock()
	mock.calls.DescribeEngineDefaultParametersWithContext = append(mock.calls.DescribeEngineDefaultParametersWithContext, callInfo)
	lockelasticacheClientMockDescribeEngineDefaultParametersWithContext.Unlock()
	return mock.DescribeEngineDefaultParametersWithContextFunc(in1, in2, in3...)
}

// DescribeEngineDefaultParametersWithContextCalls gets all the calls that were made to DescribeEngineDefaultParametersWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeEngineDefaultParametersWithContextCalls())
func (mock *elasticacheClientMock) DescribeEngineDefaultParametersWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeEngineDefaultParametersInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeEngineDefaultParametersInput
		In3 []request.Option
	}
	lockelasticacheClientMockDescribeEngineDefaultParametersWithContext.RLock()
	calls = mock.calls.DescribeEngineDefaultParametersWithContext
	lockelasticacheClientMockDescribeEngineDefaultParametersWithContext.RUnlock()
	return calls
}

// DescribeEvents calls DescribeEventsFunc.
func (mock *elasticacheClientMock) DescribeEvents(in1 *elasticache.DescribeEventsInput) (*elasticache.DescribeEventsOutput, error) {
	if mock.DescribeEventsFunc == nil {
		panic("elasticacheClientMock.DescribeEventsFunc: method is nil but elasticacheClient.DescribeEvents was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeEventsInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeEvents.Lock()
	mock.calls.DescribeEvents = append(mock.calls.DescribeEvents, callInfo)
	lockelasticacheClientMockDescribeEvents.Unlock()
	return mock.DescribeEventsFunc(in1)
}

// DescribeEventsCalls gets all the calls that were made to DescribeEvents.
// Check the length with:
//     len(mockedelasticacheClient.DescribeEventsCalls())
func (mock *elasticacheClientMock) DescribeEventsCalls() []struct {
	In1 *elasticache.DescribeEventsInput
} {
	var calls []struct {
		In1 *elasticache.DescribeEventsInput
	}
	lockelasticacheClientMockDescribeEvents.RLock()
	calls = mock.calls.DescribeEvents
	lockelasticacheClientMockDescribeEvents.RUnlock()
	return calls
}

// DescribeEventsPages calls DescribeEventsPagesFunc.
func (mock *elasticacheClientMock) DescribeEventsPages(in1 *elasticache.DescribeEventsInput, in2 func(*elasticache.DescribeEventsOutput, bool) bool) error {
	if mock.DescribeEventsPagesFunc == nil {
		panic("elasticacheClientMock.DescribeEventsPagesFunc: method is nil but elasticacheClient.DescribeEventsPages was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeEventsInput
		In2 func(*elasticache.DescribeEventsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockelasticacheClientMockDescribeEventsPages.Lock()
	mock.calls.DescribeEventsPages = append(mock.calls.DescribeEventsPages, callInfo)
	lockelasticacheClientMockDescribeEventsPages.Unlock()
	return mock.DescribeEventsPagesFunc(in1, in2)
}

// DescribeEventsPagesCalls gets all the calls that were made to DescribeEventsPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeEventsPagesCalls())
func (mock *elasticacheClientMock) DescribeEventsPagesCalls() []struct {
	In1 *elasticache.DescribeEventsInput
	In2 func(*elasticache.DescribeEventsOutput, bool) bool
} {
	var calls []struct {
		In1 *elasticache.DescribeEventsInput
		In2 func(*elasticache.DescribeEventsOutput, bool) bool
	}
	lockelasticacheClientMockDescribeEventsPages.RLock()
	calls = mock.calls.DescribeEventsPages
	lockelasticacheClientMockDescribeEventsPages.RUnlock()
	return calls
}

// DescribeEventsPagesWithContext calls DescribeEventsPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeEventsPagesWithContext(in1 context.Context, in2 *elasticache.DescribeEventsInput, in3 func(*elasticache.DescribeEventsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeEventsPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeEventsPagesWithContextFunc: method is nil but elasticacheClient.DescribeEventsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeEventsInput
		In3 func(*elasticache.DescribeEventsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockelasticacheClientMockDescribeEventsPagesWithContext.Lock()
	mock.calls.DescribeEventsPagesWithContext = append(mock.calls.DescribeEventsPagesWithContext, callInfo)
	lockelasticacheClientMockDescribeEventsPagesWithContext.Unlock()
	return mock.DescribeEventsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeEventsPagesWithContextCalls gets all the calls that were made to DescribeEventsPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeEventsPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeEventsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeEventsInput
	In3 func(*elasticache.DescribeEventsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeEventsInput
		In3 func(*elasticache.DescribeEventsOutput, bool) bool
		In4 []request.Option
	}
	lockelasticacheClientMockDescribeEventsPagesWithContext.RLock()
	calls = mock.calls.DescribeEventsPagesWithContext
	lockelasticacheClientMockDescribeEventsPagesWithContext.RUnlock()
	return calls
}

// DescribeEventsRequest calls DescribeEventsRequestFunc.
func (mock *elasticacheClientMock) DescribeEventsRequest(in1 *elasticache.DescribeEventsInput) (*request.Request, *elasticache.DescribeEventsOutput) {
	if mock.DescribeEventsRequestFunc == nil {
		panic("elasticacheClientMock.DescribeEventsRequestFunc: method is nil but elasticacheClient.DescribeEventsRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeEventsInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeEventsRequest.Lock()
	mock.calls.DescribeEventsRequest = append(mock.calls.DescribeEventsRequest, callInfo)
	lockelasticacheClientMockDescribeEventsRequest.Unlock()
	return mock.DescribeEventsRequestFunc(in1)
}

// DescribeEventsRequestCalls gets all the calls that were made to DescribeEventsRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeEventsRequestCalls())
func (mock *elasticacheClientMock) DescribeEventsRequestCalls() []struct {
	In1 *elasticache.DescribeEventsInput
} {
	var calls []struct {
		In1 *elasticache.DescribeEventsInput
	}
	lockelasticacheClientMockDescribeEventsRequest.RLock()
	calls = mock.calls.DescribeEventsRequest
	lockelasticacheClientMockDescribeEventsRequest.RUnlock()
	return calls
}

// DescribeEventsWithContext calls DescribeEventsWithContextFunc.
func (mock *elasticacheClientMock) DescribeEventsWithContext(in1 context.Context, in2 *elasticache.DescribeEventsInput, in3 ...request.Option) (*elasticache.DescribeEventsOutput, error) {
	if mock.DescribeEventsWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeEventsWithContextFunc: method is nil but elasticacheClient.DescribeEventsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeEventsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockDescribeEventsWithContext.Lock()
	mock.calls.DescribeEventsWithContext = append(mock.calls.DescribeEventsWithContext, callInfo)
	lockelasticacheClientMockDescribeEventsWithContext.Unlock()
	return mock.DescribeEventsWithContextFunc(in1, in2, in3...)
}

// DescribeEventsWithContextCalls gets all the calls that were made to DescribeEventsWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeEventsWithContextCalls())
func (mock *elasticacheClientMock) DescribeEventsWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeEventsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeEventsInput
		In3 []request.Option
	}
	lockelasticacheClientMockDescribeEventsWithContext.RLock()
	calls = mock.calls.DescribeEventsWithContext
	lockelasticacheClientMockDescribeEventsWithContext.RUnlock()
	return calls
}

// DescribeReplicationGroups calls DescribeReplicationGroupsFunc.
func (mock *elasticacheClientMock) DescribeReplicationGroups(in1 *elasticache.DescribeReplicationGroupsInput) (*elasticache.DescribeReplicationGroupsOutput, error) {
	if mock.DescribeReplicationGroupsFunc == nil {
		panic("elasticacheClientMock.DescribeReplicationGroupsFunc: method is nil but elasticacheClient.DescribeReplicationGroups was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeReplicationGroupsInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeReplicationGroups.Lock()
	mock.calls.DescribeReplicationGroups = append(mock.calls.DescribeReplicationGroups, callInfo)
	lockelasticacheClientMockDescribeReplicationGroups.Unlock()
	return mock.DescribeReplicationGroupsFunc(in1)
}

// DescribeReplicationGroupsCalls gets all the calls that were made to DescribeReplicationGroups.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReplicationGroupsCalls())
func (mock *elasticacheClientMock) DescribeReplicationGroupsCalls() []struct {
	In1 *elasticache.DescribeReplicationGroupsInput
} {
	var calls []struct {
		In1 *elasticache.DescribeReplicationGroupsInput
	}
	lockelasticacheClientMockDescribeReplicationGroups.RLock()
	calls = mock.calls.DescribeReplicationGroups
	lockelasticacheClientMockDescribeReplicationGroups.RUnlock()
	return calls
}

// DescribeReplicationGroupsPages calls DescribeReplicationGroupsPagesFunc.
func (mock *elasticacheClientMock) DescribeReplicationGroupsPages(in1 *elasticache.DescribeReplicationGroupsInput, in2 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool) error {
	if mock.DescribeReplicationGroupsPagesFunc == nil {
		panic("elasticacheClientMock.DescribeReplicationGroupsPagesFunc: method is nil but elasticacheClient.DescribeReplicationGroupsPages was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeReplicationGroupsInput
		In2 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockelasticacheClientMockDescribeReplicationGroupsPages.Lock()
	mock.calls.DescribeReplicationGroupsPages = append(mock.calls.DescribeReplicationGroupsPages, callInfo)
	lockelasticacheClientMockDescribeReplicationGroupsPages.Unlock()
	return mock.DescribeReplicationGroupsPagesFunc(in1, in2)
}

// DescribeReplicationGroupsPagesCalls gets all the calls that were made to DescribeReplicationGroupsPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReplicationGroupsPagesCalls())
func (mock *elasticacheClientMock) DescribeReplicationGroupsPagesCalls() []struct {
	In1 *elasticache.DescribeReplicationGroupsInput
	In2 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool
} {
	var calls []struct {
		In1 *elasticache.DescribeReplicationGroupsInput
		In2 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool
	}
	lockelasticacheClientMockDescribeReplicationGroupsPages.RLock()
	calls = mock.calls.DescribeReplicationGroupsPages
	lockelasticacheClientMockDescribeReplicationGroupsPages.RUnlock()
	return calls
}

// DescribeReplicationGroupsPagesWithContext calls DescribeReplicationGroupsPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeReplicationGroupsPagesWithContext(in1 context.Context, in2 *elasticache.DescribeReplicationGroupsInput, in3 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeReplicationGroupsPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeReplicationGroupsPagesWithContextFunc: method is nil but elasticacheClient.DescribeReplicationGroupsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeReplicationGroupsInput
		In3 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockelasticacheClientMockDescribeReplicationGroupsPagesWithContext.Lock()
	mock.calls.DescribeReplicationGroupsPagesWithContext = append(mock.calls.DescribeReplicationGroupsPagesWithContext, callInfo)
	lockelasticacheClientMockDescribeReplicationGroupsPagesWithContext.Unlock()
	return mock.DescribeReplicationGroupsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeReplicationGroupsPagesWithContextCalls gets all the calls that were made to DescribeReplicationGroupsPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReplicationGroupsPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeReplicationGroupsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeReplicationGroupsInput
	In3 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeReplicationGroupsInput
		In3 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool
		In4 []request.Option
	}
	lockelasticacheClientMockDescribeReplicationGroupsPagesWithContext.RLock()
	calls = mock.calls.DescribeReplicationGroupsPagesWithContext
	lockelasticacheClientMockDescribeReplicationGroupsPagesWithContext.RUnlock()
	return calls
}

// DescribeReplicationGroupsRequest calls DescribeReplicationGroupsRequestFunc.
func (mock *elasticacheClientMock) DescribeReplicationGroupsRequest(in1 *elasticache.DescribeReplicationGroupsInput) (*request.Request, *elasticache.DescribeReplicationGroupsOutput) {
	if mock.DescribeReplicationGroupsRequestFunc == nil {
		panic("elasticacheClientMock.DescribeReplicationGroupsRequestFunc: method is nil but elasticacheClient.DescribeReplicationGroupsRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeReplicationGroupsInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeReplicationGroupsRequest.Lock()
	mock.calls.DescribeReplicationGroupsRequest = append(mock.calls.DescribeReplicationGroupsRequest, callInfo)
	lockelasticacheClientMockDescribeReplicationGroupsRequest.Unlock()
	return mock.DescribeReplicationGroupsRequestFunc(in1)
}

// DescribeReplicationGroupsRequestCalls gets all the calls that were made to DescribeReplicationGroupsRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReplicationGroupsRequestCalls())
func (mock *elasticacheClientMock) DescribeReplicationGroupsRequestCalls() []struct {
	In1 *elasticache.DescribeReplicationGroupsInput
} {
	var calls []struct {
		In1 *elasticache.DescribeReplicationGroupsInput
	}
	lockelasticacheClientMockDescribeReplicationGroupsRequest.RLock()
	calls = mock.calls.DescribeReplicationGroupsRequest
	lockelasticacheClientMockDescribeReplicationGroupsRequest.RUnlock()
	return calls
}

// DescribeReplicationGroupsWithContext calls DescribeReplicationGroupsWithContextFunc.
func (mock *elasticacheClientMock) DescribeReplicationGroupsWithContext(in1 context.Context, in2 *elasticache.DescribeReplicationGroupsInput, in3 ...request.Option) (*elasticache.DescribeReplicationGroupsOutput, error) {
	if mock.DescribeReplicationGroupsWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeReplicationGroupsWithContextFunc: method is nil but elasticacheClient.DescribeReplicationGroupsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeReplicationGroupsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockDescribeReplicationGroupsWithContext.Lock()
	mock.calls.DescribeReplicationGroupsWithContext = append(mock.calls.DescribeReplicationGroupsWithContext, callInfo)
	lockelasticacheClientMockDescribeReplicationGroupsWithContext.Unlock()
	return mock.DescribeReplicationGroupsWithContextFunc(in1, in2, in3...)
}

// DescribeReplicationGroupsWithContextCalls gets all the calls that were made to DescribeReplicationGroupsWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReplicationGroupsWithContextCalls())
func (mock *elasticacheClientMock) DescribeReplicationGroupsWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeReplicationGroupsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeReplicationGroupsInput
		In3 []request.Option
	}
	lockelasticacheClientMockDescribeReplicationGroupsWithContext.RLock()
	calls = mock.calls.DescribeReplicationGroupsWithContext
	lockelasticacheClientMockDescribeReplicationGroupsWithContext.RUnlock()
	return calls
}

// DescribeReservedCacheNodes calls DescribeReservedCacheNodesFunc.
func (mock *elasticacheClientMock) DescribeReservedCacheNodes(in1 *elasticache.DescribeReservedCacheNodesInput) (*elasticache.DescribeReservedCacheNodesOutput, error) {
	if mock.DescribeReservedCacheNodesFunc == nil {
		panic("elasticacheClientMock.DescribeReservedCacheNodesFunc: method is nil but elasticacheClient.DescribeReservedCacheNodes was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeReservedCacheNodesInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeReservedCacheNodes.Lock()
	mock.calls.DescribeReservedCacheNodes = append(mock.calls.DescribeReservedCacheNodes, callInfo)
	lockelasticacheClientMockDescribeReservedCacheNodes.Unlock()
	return mock.DescribeReservedCacheNodesFunc(in1)
}

// DescribeReservedCacheNodesCalls gets all the calls that were made to DescribeReservedCacheNodes.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReservedCacheNodesCalls())
func (mock *elasticacheClientMock) DescribeReservedCacheNodesCalls() []struct {
	In1 *elasticache.DescribeReservedCacheNodesInput
} {
	var calls []struct {
		In1 *elasticache.DescribeReservedCacheNodesInput
	}
	lockelasticacheClientMockDescribeReservedCacheNodes.RLock()
	calls = mock.calls.DescribeReservedCacheNodes
	lockelasticacheClientMockDescribeReservedCacheNodes.RUnlock()
	return calls
}

// DescribeReservedCacheNodesOfferings calls DescribeReservedCacheNodesOfferingsFunc.
func (mock *elasticacheClientMock) DescribeReservedCacheNodesOfferings(in1 *elasticache.DescribeReservedCacheNodesOfferingsInput) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error) {
	if mock.DescribeReservedCacheNodesOfferingsFunc == nil {
		panic("elasticacheClientMock.DescribeReservedCacheNodesOfferingsFunc: method is nil but elasticacheClient.DescribeReservedCacheNodesOfferings was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeReservedCacheNodesOfferingsInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeReservedCacheNodesOfferings.Lock()
	mock.calls.DescribeReservedCacheNodesOfferings = append(mock.calls.DescribeReservedCacheNodesOfferings, callInfo)
	lockelasticacheClientMockDescribeReservedCacheNodesOfferings.Unlock()
	return mock.DescribeReservedCacheNodesOfferingsFunc(in1)
}

// DescribeReservedCacheNodesOfferingsCalls gets all the calls that were made to DescribeReservedCacheNodesOfferings.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReservedCacheNodesOfferingsCalls())
func (mock *elasticacheClientMock) DescribeReservedCacheNodesOfferingsCalls() []struct {
	In1 *elasticache.DescribeReservedCacheNodesOfferingsInput
} {
	var calls []struct {
		In1 *elasticache.DescribeReservedCacheNodesOfferingsInput
	}
	lockelasticacheClientMockDescribeReservedCacheNodesOfferings.RLock()
	calls = mock.calls.DescribeReservedCacheNodesOfferings
	lockelasticacheClientMockDescribeReservedCacheNodesOfferings.RUnlock()
	return calls
}

// DescribeReservedCacheNodesOfferingsPages calls DescribeReservedCacheNodesOfferingsPagesFunc.
func (mock *elasticacheClientMock) DescribeReservedCacheNodesOfferingsPages(in1 *elasticache.DescribeReservedCacheNodesOfferingsInput, in2 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool) error {
	if mock.DescribeReservedCacheNodesOfferingsPagesFunc == nil {
		panic("elasticacheClientMock.DescribeReservedCacheNodesOfferingsPagesFunc: method is nil but elasticacheClient.DescribeReservedCacheNodesOfferingsPages was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeReservedCacheNodesOfferingsInput
		In2 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockelasticacheClientMockDescribeReservedCacheNodesOfferingsPages.Lock()
	mock.calls.DescribeReservedCacheNodesOfferingsPages = append(mock.calls.DescribeReservedCacheNodesOfferingsPages, callInfo)
	lockelasticacheClientMockDescribeReservedCacheNodesOfferingsPages.Unlock()
	return mock.DescribeReservedCacheNodesOfferingsPagesFunc(in1, in2)
}

// DescribeReservedCacheNodesOfferingsPagesCalls gets all the calls that were made to DescribeReservedCacheNodesOfferingsPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReservedCacheNodesOfferingsPagesCalls())
func (mock *elasticacheClientMock) DescribeReservedCacheNodesOfferingsPagesCalls() []struct {
	In1 *elasticache.DescribeReservedCacheNodesOfferingsInput
	In2 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool
} {
	var calls []struct {
		In1 *elasticache.DescribeReservedCacheNodesOfferingsInput
		In2 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool
	}
	lockelasticacheClientMockDescribeReservedCacheNodesOfferingsPages.RLock()
	calls = mock.calls.DescribeReservedCacheNodesOfferingsPages
	lockelasticacheClientMockDescribeReservedCacheNodesOfferingsPages.RUnlock()
	return calls
}

// DescribeReservedCacheNodesOfferingsPagesWithContext calls DescribeReservedCacheNodesOfferingsPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeReservedCacheNodesOfferingsPagesWithContext(in1 context.Context, in2 *elasticache.DescribeReservedCacheNodesOfferingsInput, in3 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeReservedCacheNodesOfferingsPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeReservedCacheNodesOfferingsPagesWithContextFunc: method is nil but elasticacheClient.DescribeReservedCacheNodesOfferingsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeReservedCacheNodesOfferingsInput
		In3 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockelasticacheClientMockDescribeReservedCacheNodesOfferingsPagesWithContext.Lock()
	mock.calls.DescribeReservedCacheNodesOfferingsPagesWithContext = append(mock.calls.DescribeReservedCacheNodesOfferingsPagesWithContext, callInfo)
	lockelasticacheClientMockDescribeReservedCacheNodesOfferingsPagesWithContext.Unlock()
	return mock.DescribeReservedCacheNodesOfferingsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeReservedCacheNodesOfferingsPagesWithContextCalls gets all the calls that were made to DescribeReservedCacheNodesOfferingsPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReservedCacheNodesOfferingsPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeReservedCacheNodesOfferingsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeReservedCacheNodesOfferingsInput
	In3 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeReservedCacheNodesOfferingsInput
		In3 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool
		In4 []request.Option
	}
	lockelasticacheClientMockDescribeReservedCacheNodesOfferingsPagesWithContext.RLock()
	calls = mock.calls.DescribeReservedCacheNodesOfferingsPagesWithContext
	lockelasticacheClientMockDescribeReservedCacheNodesOfferingsPagesWithContext.RUnlock()
	return calls
}

// DescribeReservedCacheNodesOfferingsRequest calls DescribeReservedCacheNodesOfferingsRequestFunc.
func (mock *elasticacheClientMock) DescribeReservedCacheNodesOfferingsRequest(in1 *elasticache.DescribeReservedCacheNodesOfferingsInput) (*request.Request, *elasticache.DescribeReservedCacheNodesOfferingsOutput) {
	if mock.DescribeReservedCacheNodesOfferingsRequestFunc == nil {
		panic("elasticacheClientMock.DescribeReservedCacheNodesOfferingsRequestFunc: method is nil but elasticacheClient.DescribeReservedCacheNodesOfferingsRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeReservedCacheNodesOfferingsInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeReservedCacheNodesOfferingsRequest.Lock()
	mock.calls.DescribeReservedCacheNodesOfferingsRequest = append(mock.calls.DescribeReservedCacheNodesOfferingsRequest, callInfo)
	lockelasticacheClientMockDescribeReservedCacheNodesOfferingsRequest.Unlock()
	return mock.DescribeReservedCacheNodesOfferingsRequestFunc(in1)
}

// DescribeReservedCacheNodesOfferingsRequestCalls gets all the calls that were made to DescribeReservedCacheNodesOfferingsRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReservedCacheNodesOfferingsRequestCalls())
func (mock *elasticacheClientMock) DescribeReservedCacheNodesOfferingsRequestCalls() []struct {
	In1 *elasticache.DescribeReservedCacheNodesOfferingsInput
} {
	var calls []struct {
		In1 *elasticache.DescribeReservedCacheNodesOfferingsInput
	}
	lockelasticacheClientMockDescribeReservedCacheNodesOfferingsRequest.RLock()
	calls = mock.calls.DescribeReservedCacheNodesOfferingsRequest
	lockelasticacheClientMockDescribeReservedCacheNodesOfferingsRequest.RUnlock()
	return calls
}

// DescribeReservedCacheNodesOfferingsWithContext calls DescribeReservedCacheNodesOfferingsWithContextFunc.
func (mock *elasticacheClientMock) DescribeReservedCacheNodesOfferingsWithContext(in1 context.Context, in2 *elasticache.DescribeReservedCacheNodesOfferingsInput, in3 ...request.Option) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error) {
	if mock.DescribeReservedCacheNodesOfferingsWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeReservedCacheNodesOfferingsWithContextFunc: method is nil but elasticacheClient.DescribeReservedCacheNodesOfferingsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeReservedCacheNodesOfferingsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockDescribeReservedCacheNodesOfferingsWithContext.Lock()
	mock.calls.DescribeReservedCacheNodesOfferingsWithContext = append(mock.calls.DescribeReservedCacheNodesOfferingsWithContext, callInfo)
	lockelasticacheClientMockDescribeReservedCacheNodesOfferingsWithContext.Unlock()
	return mock.DescribeReservedCacheNodesOfferingsWithContextFunc(in1, in2, in3...)
}

// DescribeReservedCacheNodesOfferingsWithContextCalls gets all the calls that were made to DescribeReservedCacheNodesOfferingsWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReservedCacheNodesOfferingsWithContextCalls())
func (mock *elasticacheClientMock) DescribeReservedCacheNodesOfferingsWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeReservedCacheNodesOfferingsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeReservedCacheNodesOfferingsInput
		In3 []request.Option
	}
	lockelasticacheClientMockDescribeReservedCacheNodesOfferingsWithContext.RLock()
	calls = mock.calls.DescribeReservedCacheNodesOfferingsWithContext
	lockelasticacheClientMockDescribeReservedCacheNodesOfferingsWithContext.RUnlock()
	return calls
}

// DescribeReservedCacheNodesPages calls DescribeReservedCacheNodesPagesFunc.
func (mock *elasticacheClientMock) DescribeReservedCacheNodesPages(in1 *elasticache.DescribeReservedCacheNodesInput, in2 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool) error {
	if mock.DescribeReservedCacheNodesPagesFunc == nil {
		panic("elasticacheClientMock.DescribeReservedCacheNodesPagesFunc: method is nil but elasticacheClient.DescribeReservedCacheNodesPages was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeReservedCacheNodesInput
		In2 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockelasticacheClientMockDescribeReservedCacheNodesPages.Lock()
	mock.calls.DescribeReservedCacheNodesPages = append(mock.calls.DescribeReservedCacheNodesPages, callInfo)
	lockelasticacheClientMockDescribeReservedCacheNodesPages.Unlock()
	return mock.DescribeReservedCacheNodesPagesFunc(in1, in2)
}

// DescribeReservedCacheNodesPagesCalls gets all the calls that were made to DescribeReservedCacheNodesPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReservedCacheNodesPagesCalls())
func (mock *elasticacheClientMock) DescribeReservedCacheNodesPagesCalls() []struct {
	In1 *elasticache.DescribeReservedCacheNodesInput
	In2 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool
} {
	var calls []struct {
		In1 *elasticache.DescribeReservedCacheNodesInput
		In2 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool
	}
	lockelasticacheClientMockDescribeReservedCacheNodesPages.RLock()
	calls = mock.calls.DescribeReservedCacheNodesPages
	lockelasticacheClientMockDescribeReservedCacheNodesPages.RUnlock()
	return calls
}

// DescribeReservedCacheNodesPagesWithContext calls DescribeReservedCacheNodesPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeReservedCacheNodesPagesWithContext(in1 context.Context, in2 *elasticache.DescribeReservedCacheNodesInput, in3 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeReservedCacheNodesPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeReservedCacheNodesPagesWithContextFunc: method is nil but elasticacheClient.DescribeReservedCacheNodesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeReservedCacheNodesInput
		In3 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockelasticacheClientMockDescribeReservedCacheNodesPagesWithContext.Lock()
	mock.calls.DescribeReservedCacheNodesPagesWithContext = append(mock.calls.DescribeReservedCacheNodesPagesWithContext, callInfo)
	lockelasticacheClientMockDescribeReservedCacheNodesPagesWithContext.Unlock()
	return mock.DescribeReservedCacheNodesPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeReservedCacheNodesPagesWithContextCalls gets all the calls that were made to DescribeReservedCacheNodesPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReservedCacheNodesPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeReservedCacheNodesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeReservedCacheNodesInput
	In3 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeReservedCacheNodesInput
		In3 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool
		In4 []request.Option
	}
	lockelasticacheClientMockDescribeReservedCacheNodesPagesWithContext.RLock()
	calls = mock.calls.DescribeReservedCacheNodesPagesWithContext
	lockelasticacheClientMockDescribeReservedCacheNodesPagesWithContext.RUnlock()
	return calls
}

// DescribeReservedCacheNodesRequest calls DescribeReservedCacheNodesRequestFunc.
func (mock *elasticacheClientMock) DescribeReservedCacheNodesRequest(in1 *elasticache.DescribeReservedCacheNodesInput) (*request.Request, *elasticache.DescribeReservedCacheNodesOutput) {
	if mock.DescribeReservedCacheNodesRequestFunc == nil {
		panic("elasticacheClientMock.DescribeReservedCacheNodesRequestFunc: method is nil but elasticacheClient.DescribeReservedCacheNodesRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeReservedCacheNodesInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeReservedCacheNodesRequest.Lock()
	mock.calls.DescribeReservedCacheNodesRequest = append(mock.calls.DescribeReservedCacheNodesRequest, callInfo)
	lockelasticacheClientMockDescribeReservedCacheNodesRequest.Unlock()
	return mock.DescribeReservedCacheNodesRequestFunc(in1)
}

// DescribeReservedCacheNodesRequestCalls gets all the calls that were made to DescribeReservedCacheNodesRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReservedCacheNodesRequestCalls())
func (mock *elasticacheClientMock) DescribeReservedCacheNodesRequestCalls() []struct {
	In1 *elasticache.DescribeReservedCacheNodesInput
} {
	var calls []struct {
		In1 *elasticache.DescribeReservedCacheNodesInput
	}
	lockelasticacheClientMockDescribeReservedCacheNodesRequest.RLock()
	calls = mock.calls.DescribeReservedCacheNodesRequest
	lockelasticacheClientMockDescribeReservedCacheNodesRequest.RUnlock()
	return calls
}

// DescribeReservedCacheNodesWithContext calls DescribeReservedCacheNodesWithContextFunc.
func (mock *elasticacheClientMock) DescribeReservedCacheNodesWithContext(in1 context.Context, in2 *elasticache.DescribeReservedCacheNodesInput, in3 ...request.Option) (*elasticache.DescribeReservedCacheNodesOutput, error) {
	if mock.DescribeReservedCacheNodesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeReservedCacheNodesWithContextFunc: method is nil but elasticacheClient.DescribeReservedCacheNodesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeReservedCacheNodesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockDescribeReservedCacheNodesWithContext.Lock()
	mock.calls.DescribeReservedCacheNodesWithContext = append(mock.calls.DescribeReservedCacheNodesWithContext, callInfo)
	lockelasticacheClientMockDescribeReservedCacheNodesWithContext.Unlock()
	return mock.DescribeReservedCacheNodesWithContextFunc(in1, in2, in3...)
}

// DescribeReservedCacheNodesWithContextCalls gets all the calls that were made to DescribeReservedCacheNodesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReservedCacheNodesWithContextCalls())
func (mock *elasticacheClientMock) DescribeReservedCacheNodesWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeReservedCacheNodesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeReservedCacheNodesInput
		In3 []request.Option
	}
	lockelasticacheClientMockDescribeReservedCacheNodesWithContext.RLock()
	calls = mock.calls.DescribeReservedCacheNodesWithContext
	lockelasticacheClientMockDescribeReservedCacheNodesWithContext.RUnlock()
	return calls
}

// DescribeServiceUpdates calls DescribeServiceUpdatesFunc.
func (mock *elasticacheClientMock) DescribeServiceUpdates(in1 *elasticache.DescribeServiceUpdatesInput) (*elasticache.DescribeServiceUpdatesOutput, error) {
	if mock.DescribeServiceUpdatesFunc == nil {
		panic("elasticacheClientMock.DescribeServiceUpdatesFunc: method is nil but elasticacheClient.DescribeServiceUpdates was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeServiceUpdatesInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeServiceUpdates.Lock()
	mock.calls.DescribeServiceUpdates = append(mock.calls.DescribeServiceUpdates, callInfo)
	lockelasticacheClientMockDescribeServiceUpdates.Unlock()
	return mock.DescribeServiceUpdatesFunc(in1)
}

// DescribeServiceUpdatesCalls gets all the calls that were made to DescribeServiceUpdates.
// Check the length with:
//     len(mockedelasticacheClient.DescribeServiceUpdatesCalls())
func (mock *elasticacheClientMock) DescribeServiceUpdatesCalls() []struct {
	In1 *elasticache.DescribeServiceUpdatesInput
} {
	var calls []struct {
		In1 *elasticache.DescribeServiceUpdatesInput
	}
	lockelasticacheClientMockDescribeServiceUpdates.RLock()
	calls = mock.calls.DescribeServiceUpdates
	lockelasticacheClientMockDescribeServiceUpdates.RUnlock()
	return calls
}

// DescribeServiceUpdatesPages calls DescribeServiceUpdatesPagesFunc.
func (mock *elasticacheClientMock) DescribeServiceUpdatesPages(in1 *elasticache.DescribeServiceUpdatesInput, in2 func(*elasticache.DescribeServiceUpdatesOutput, bool) bool) error {
	if mock.DescribeServiceUpdatesPagesFunc == nil {
		panic("elasticacheClientMock.DescribeServiceUpdatesPagesFunc: method is nil but elasticacheClient.DescribeServiceUpdatesPages was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeServiceUpdatesInput
		In2 func(*elasticache.DescribeServiceUpdatesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockelasticacheClientMockDescribeServiceUpdatesPages.Lock()
	mock.calls.DescribeServiceUpdatesPages = append(mock.calls.DescribeServiceUpdatesPages, callInfo)
	lockelasticacheClientMockDescribeServiceUpdatesPages.Unlock()
	return mock.DescribeServiceUpdatesPagesFunc(in1, in2)
}

// DescribeServiceUpdatesPagesCalls gets all the calls that were made to DescribeServiceUpdatesPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeServiceUpdatesPagesCalls())
func (mock *elasticacheClientMock) DescribeServiceUpdatesPagesCalls() []struct {
	In1 *elasticache.DescribeServiceUpdatesInput
	In2 func(*elasticache.DescribeServiceUpdatesOutput, bool) bool
} {
	var calls []struct {
		In1 *elasticache.DescribeServiceUpdatesInput
		In2 func(*elasticache.DescribeServiceUpdatesOutput, bool) bool
	}
	lockelasticacheClientMockDescribeServiceUpdatesPages.RLock()
	calls = mock.calls.DescribeServiceUpdatesPages
	lockelasticacheClientMockDescribeServiceUpdatesPages.RUnlock()
	return calls
}

// DescribeServiceUpdatesPagesWithContext calls DescribeServiceUpdatesPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeServiceUpdatesPagesWithContext(in1 context.Context, in2 *elasticache.DescribeServiceUpdatesInput, in3 func(*elasticache.DescribeServiceUpdatesOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeServiceUpdatesPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeServiceUpdatesPagesWithContextFunc: method is nil but elasticacheClient.DescribeServiceUpdatesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeServiceUpdatesInput
		In3 func(*elasticache.DescribeServiceUpdatesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockelasticacheClientMockDescribeServiceUpdatesPagesWithContext.Lock()
	mock.calls.DescribeServiceUpdatesPagesWithContext = append(mock.calls.DescribeServiceUpdatesPagesWithContext, callInfo)
	lockelasticacheClientMockDescribeServiceUpdatesPagesWithContext.Unlock()
	return mock.DescribeServiceUpdatesPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeServiceUpdatesPagesWithContextCalls gets all the calls that were made to DescribeServiceUpdatesPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeServiceUpdatesPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeServiceUpdatesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeServiceUpdatesInput
	In3 func(*elasticache.DescribeServiceUpdatesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeServiceUpdatesInput
		In3 func(*elasticache.DescribeServiceUpdatesOutput, bool) bool
		In4 []request.Option
	}
	lockelasticacheClientMockDescribeServiceUpdatesPagesWithContext.RLock()
	calls = mock.calls.DescribeServiceUpdatesPagesWithContext
	lockelasticacheClientMockDescribeServiceUpdatesPagesWithContext.RUnlock()
	return calls
}

// DescribeServiceUpdatesRequest calls DescribeServiceUpdatesRequestFunc.
func (mock *elasticacheClientMock) DescribeServiceUpdatesRequest(in1 *elasticache.DescribeServiceUpdatesInput) (*request.Request, *elasticache.DescribeServiceUpdatesOutput) {
	if mock.DescribeServiceUpdatesRequestFunc == nil {
		panic("elasticacheClientMock.DescribeServiceUpdatesRequestFunc: method is nil but elasticacheClient.DescribeServiceUpdatesRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeServiceUpdatesInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeServiceUpdatesRequest.Lock()
	mock.calls.DescribeServiceUpdatesRequest = append(mock.calls.DescribeServiceUpdatesRequest, callInfo)
	lockelasticacheClientMockDescribeServiceUpdatesRequest.Unlock()
	return mock.DescribeServiceUpdatesRequestFunc(in1)
}

// DescribeServiceUpdatesRequestCalls gets all the calls that were made to DescribeServiceUpdatesRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeServiceUpdatesRequestCalls())
func (mock *elasticacheClientMock) DescribeServiceUpdatesRequestCalls() []struct {
	In1 *elasticache.DescribeServiceUpdatesInput
} {
	var calls []struct {
		In1 *elasticache.DescribeServiceUpdatesInput
	}
	lockelasticacheClientMockDescribeServiceUpdatesRequest.RLock()
	calls = mock.calls.DescribeServiceUpdatesRequest
	lockelasticacheClientMockDescribeServiceUpdatesRequest.RUnlock()
	return calls
}

// DescribeServiceUpdatesWithContext calls DescribeServiceUpdatesWithContextFunc.
func (mock *elasticacheClientMock) DescribeServiceUpdatesWithContext(in1 context.Context, in2 *elasticache.DescribeServiceUpdatesInput, in3 ...request.Option) (*elasticache.DescribeServiceUpdatesOutput, error) {
	if mock.DescribeServiceUpdatesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeServiceUpdatesWithContextFunc: method is nil but elasticacheClient.DescribeServiceUpdatesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeServiceUpdatesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockDescribeServiceUpdatesWithContext.Lock()
	mock.calls.DescribeServiceUpdatesWithContext = append(mock.calls.DescribeServiceUpdatesWithContext, callInfo)
	lockelasticacheClientMockDescribeServiceUpdatesWithContext.Unlock()
	return mock.DescribeServiceUpdatesWithContextFunc(in1, in2, in3...)
}

// DescribeServiceUpdatesWithContextCalls gets all the calls that were made to DescribeServiceUpdatesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeServiceUpdatesWithContextCalls())
func (mock *elasticacheClientMock) DescribeServiceUpdatesWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeServiceUpdatesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeServiceUpdatesInput
		In3 []request.Option
	}
	lockelasticacheClientMockDescribeServiceUpdatesWithContext.RLock()
	calls = mock.calls.DescribeServiceUpdatesWithContext
	lockelasticacheClientMockDescribeServiceUpdatesWithContext.RUnlock()
	return calls
}

// DescribeSnapshots calls DescribeSnapshotsFunc.
func (mock *elasticacheClientMock) DescribeSnapshots(in1 *elasticache.DescribeSnapshotsInput) (*elasticache.DescribeSnapshotsOutput, error) {
	if mock.DescribeSnapshotsFunc == nil {
		panic("elasticacheClientMock.DescribeSnapshotsFunc: method is nil but elasticacheClient.DescribeSnapshots was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeSnapshotsInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeSnapshots.Lock()
	mock.calls.DescribeSnapshots = append(mock.calls.DescribeSnapshots, callInfo)
	lockelasticacheClientMockDescribeSnapshots.Unlock()
	return mock.DescribeSnapshotsFunc(in1)
}

// DescribeSnapshotsCalls gets all the calls that were made to DescribeSnapshots.
// Check the length with:
//     len(mockedelasticacheClient.DescribeSnapshotsCalls())
func (mock *elasticacheClientMock) DescribeSnapshotsCalls() []struct {
	In1 *elasticache.DescribeSnapshotsInput
} {
	var calls []struct {
		In1 *elasticache.DescribeSnapshotsInput
	}
	lockelasticacheClientMockDescribeSnapshots.RLock()
	calls = mock.calls.DescribeSnapshots
	lockelasticacheClientMockDescribeSnapshots.RUnlock()
	return calls
}

// DescribeSnapshotsPages calls DescribeSnapshotsPagesFunc.
func (mock *elasticacheClientMock) DescribeSnapshotsPages(in1 *elasticache.DescribeSnapshotsInput, in2 func(*elasticache.DescribeSnapshotsOutput, bool) bool) error {
	if mock.DescribeSnapshotsPagesFunc == nil {
		panic("elasticacheClientMock.DescribeSnapshotsPagesFunc: method is nil but elasticacheClient.DescribeSnapshotsPages was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeSnapshotsInput
		In2 func(*elasticache.DescribeSnapshotsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockelasticacheClientMockDescribeSnapshotsPages.Lock()
	mock.calls.DescribeSnapshotsPages = append(mock.calls.DescribeSnapshotsPages, callInfo)
	lockelasticacheClientMockDescribeSnapshotsPages.Unlock()
	return mock.DescribeSnapshotsPagesFunc(in1, in2)
}

// DescribeSnapshotsPagesCalls gets all the calls that were made to DescribeSnapshotsPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeSnapshotsPagesCalls())
func (mock *elasticacheClientMock) DescribeSnapshotsPagesCalls() []struct {
	In1 *elasticache.DescribeSnapshotsInput
	In2 func(*elasticache.DescribeSnapshotsOutput, bool) bool
} {
	var calls []struct {
		In1 *elasticache.DescribeSnapshotsInput
		In2 func(*elasticache.DescribeSnapshotsOutput, bool) bool
	}
	lockelasticacheClientMockDescribeSnapshotsPages.RLock()
	calls = mock.calls.DescribeSnapshotsPages
	lockelasticacheClientMockDescribeSnapshotsPages.RUnlock()
	return calls
}

// DescribeSnapshotsPagesWithContext calls DescribeSnapshotsPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeSnapshotsPagesWithContext(in1 context.Context, in2 *elasticache.DescribeSnapshotsInput, in3 func(*elasticache.DescribeSnapshotsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeSnapshotsPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeSnapshotsPagesWithContextFunc: method is nil but elasticacheClient.DescribeSnapshotsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeSnapshotsInput
		In3 func(*elasticache.DescribeSnapshotsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockelasticacheClientMockDescribeSnapshotsPagesWithContext.Lock()
	mock.calls.DescribeSnapshotsPagesWithContext = append(mock.calls.DescribeSnapshotsPagesWithContext, callInfo)
	lockelasticacheClientMockDescribeSnapshotsPagesWithContext.Unlock()
	return mock.DescribeSnapshotsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeSnapshotsPagesWithContextCalls gets all the calls that were made to DescribeSnapshotsPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeSnapshotsPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeSnapshotsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeSnapshotsInput
	In3 func(*elasticache.DescribeSnapshotsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeSnapshotsInput
		In3 func(*elasticache.DescribeSnapshotsOutput, bool) bool
		In4 []request.Option
	}
	lockelasticacheClientMockDescribeSnapshotsPagesWithContext.RLock()
	calls = mock.calls.DescribeSnapshotsPagesWithContext
	lockelasticacheClientMockDescribeSnapshotsPagesWithContext.RUnlock()
	return calls
}

// DescribeSnapshotsRequest calls DescribeSnapshotsRequestFunc.
func (mock *elasticacheClientMock) DescribeSnapshotsRequest(in1 *elasticache.DescribeSnapshotsInput) (*request.Request, *elasticache.DescribeSnapshotsOutput) {
	if mock.DescribeSnapshotsRequestFunc == nil {
		panic("elasticacheClientMock.DescribeSnapshotsRequestFunc: method is nil but elasticacheClient.DescribeSnapshotsRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeSnapshotsInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeSnapshotsRequest.Lock()
	mock.calls.DescribeSnapshotsRequest = append(mock.calls.DescribeSnapshotsRequest, callInfo)
	lockelasticacheClientMockDescribeSnapshotsRequest.Unlock()
	return mock.DescribeSnapshotsRequestFunc(in1)
}

// DescribeSnapshotsRequestCalls gets all the calls that were made to DescribeSnapshotsRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeSnapshotsRequestCalls())
func (mock *elasticacheClientMock) DescribeSnapshotsRequestCalls() []struct {
	In1 *elasticache.DescribeSnapshotsInput
} {
	var calls []struct {
		In1 *elasticache.DescribeSnapshotsInput
	}
	lockelasticacheClientMockDescribeSnapshotsRequest.RLock()
	calls = mock.calls.DescribeSnapshotsRequest
	lockelasticacheClientMockDescribeSnapshotsRequest.RUnlock()
	return calls
}

// DescribeSnapshotsWithContext calls DescribeSnapshotsWithContextFunc.
func (mock *elasticacheClientMock) DescribeSnapshotsWithContext(in1 context.Context, in2 *elasticache.DescribeSnapshotsInput, in3 ...request.Option) (*elasticache.DescribeSnapshotsOutput, error) {
	if mock.DescribeSnapshotsWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeSnapshotsWithContextFunc: method is nil but elasticacheClient.DescribeSnapshotsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeSnapshotsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockDescribeSnapshotsWithContext.Lock()
	mock.calls.DescribeSnapshotsWithContext = append(mock.calls.DescribeSnapshotsWithContext, callInfo)
	lockelasticacheClientMockDescribeSnapshotsWithContext.Unlock()
	return mock.DescribeSnapshotsWithContextFunc(in1, in2, in3...)
}

// DescribeSnapshotsWithContextCalls gets all the calls that were made to DescribeSnapshotsWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeSnapshotsWithContextCalls())
func (mock *elasticacheClientMock) DescribeSnapshotsWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeSnapshotsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeSnapshotsInput
		In3 []request.Option
	}
	lockelasticacheClientMockDescribeSnapshotsWithContext.RLock()
	calls = mock.calls.DescribeSnapshotsWithContext
	lockelasticacheClientMockDescribeSnapshotsWithContext.RUnlock()
	return calls
}

// DescribeUpdateActions calls DescribeUpdateActionsFunc.
func (mock *elasticacheClientMock) DescribeUpdateActions(in1 *elasticache.DescribeUpdateActionsInput) (*elasticache.DescribeUpdateActionsOutput, error) {
	if mock.DescribeUpdateActionsFunc == nil {
		panic("elasticacheClientMock.DescribeUpdateActionsFunc: method is nil but elasticacheClient.DescribeUpdateActions was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeUpdateActionsInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeUpdateActions.Lock()
	mock.calls.DescribeUpdateActions = append(mock.calls.DescribeUpdateActions, callInfo)
	lockelasticacheClientMockDescribeUpdateActions.Unlock()
	return mock.DescribeUpdateActionsFunc(in1)
}

// DescribeUpdateActionsCalls gets all the calls that were made to DescribeUpdateActions.
// Check the length with:
//     len(mockedelasticacheClient.DescribeUpdateActionsCalls())
func (mock *elasticacheClientMock) DescribeUpdateActionsCalls() []struct {
	In1 *elasticache.DescribeUpdateActionsInput
} {
	var calls []struct {
		In1 *elasticache.DescribeUpdateActionsInput
	}
	lockelasticacheClientMockDescribeUpdateActions.RLock()
	calls = mock.calls.DescribeUpdateActions
	lockelasticacheClientMockDescribeUpdateActions.RUnlock()
	return calls
}

// DescribeUpdateActionsPages calls DescribeUpdateActionsPagesFunc.
func (mock *elasticacheClientMock) DescribeUpdateActionsPages(in1 *elasticache.DescribeUpdateActionsInput, in2 func(*elasticache.DescribeUpdateActionsOutput, bool) bool) error {
	if mock.DescribeUpdateActionsPagesFunc == nil {
		panic("elasticacheClientMock.DescribeUpdateActionsPagesFunc: method is nil but elasticacheClient.DescribeUpdateActionsPages was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeUpdateActionsInput
		In2 func(*elasticache.DescribeUpdateActionsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockelasticacheClientMockDescribeUpdateActionsPages.Lock()
	mock.calls.DescribeUpdateActionsPages = append(mock.calls.DescribeUpdateActionsPages, callInfo)
	lockelasticacheClientMockDescribeUpdateActionsPages.Unlock()
	return mock.DescribeUpdateActionsPagesFunc(in1, in2)
}

// DescribeUpdateActionsPagesCalls gets all the calls that were made to DescribeUpdateActionsPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeUpdateActionsPagesCalls())
func (mock *elasticacheClientMock) DescribeUpdateActionsPagesCalls() []struct {
	In1 *elasticache.DescribeUpdateActionsInput
	In2 func(*elasticache.DescribeUpdateActionsOutput, bool) bool
} {
	var calls []struct {
		In1 *elasticache.DescribeUpdateActionsInput
		In2 func(*elasticache.DescribeUpdateActionsOutput, bool) bool
	}
	lockelasticacheClientMockDescribeUpdateActionsPages.RLock()
	calls = mock.calls.DescribeUpdateActionsPages
	lockelasticacheClientMockDescribeUpdateActionsPages.RUnlock()
	return calls
}

// DescribeUpdateActionsPagesWithContext calls DescribeUpdateActionsPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeUpdateActionsPagesWithContext(in1 context.Context, in2 *elasticache.DescribeUpdateActionsInput, in3 func(*elasticache.DescribeUpdateActionsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeUpdateActionsPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeUpdateActionsPagesWithContextFunc: method is nil but elasticacheClient.DescribeUpdateActionsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeUpdateActionsInput
		In3 func(*elasticache.DescribeUpdateActionsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockelasticacheClientMockDescribeUpdateActionsPagesWithContext.Lock()
	mock.calls.DescribeUpdateActionsPagesWithContext = append(mock.calls.DescribeUpdateActionsPagesWithContext, callInfo)
	lockelasticacheClientMockDescribeUpdateActionsPagesWithContext.Unlock()
	return mock.DescribeUpdateActionsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeUpdateActionsPagesWithContextCalls gets all the calls that were made to DescribeUpdateActionsPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeUpdateActionsPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeUpdateActionsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeUpdateActionsInput
	In3 func(*elasticache.DescribeUpdateActionsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeUpdateActionsInput
		In3 func(*elasticache.DescribeUpdateActionsOutput, bool) bool
		In4 []request.Option
	}
	lockelasticacheClientMockDescribeUpdateActionsPagesWithContext.RLock()
	calls = mock.calls.DescribeUpdateActionsPagesWithContext
	lockelasticacheClientMockDescribeUpdateActionsPagesWithContext.RUnlock()
	return calls
}

// DescribeUpdateActionsRequest calls DescribeUpdateActionsRequestFunc.
func (mock *elasticacheClientMock) DescribeUpdateActionsRequest(in1 *elasticache.DescribeUpdateActionsInput) (*request.Request, *elasticache.DescribeUpdateActionsOutput) {
	if mock.DescribeUpdateActionsRequestFunc == nil {
		panic("elasticacheClientMock.DescribeUpdateActionsRequestFunc: method is nil but elasticacheClient.DescribeUpdateActionsRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeUpdateActionsInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockDescribeUpdateActionsRequest.Lock()
	mock.calls.DescribeUpdateActionsRequest = append(mock.calls.DescribeUpdateActionsRequest, callInfo)
	lockelasticacheClientMockDescribeUpdateActionsRequest.Unlock()
	return mock.DescribeUpdateActionsRequestFunc(in1)
}

// DescribeUpdateActionsRequestCalls gets all the calls that were made to DescribeUpdateActionsRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeUpdateActionsRequestCalls())
func (mock *elasticacheClientMock) DescribeUpdateActionsRequestCalls() []struct {
	In1 *elasticache.DescribeUpdateActionsInput
} {
	var calls []struct {
		In1 *elasticache.DescribeUpdateActionsInput
	}
	lockelasticacheClientMockDescribeUpdateActionsRequest.RLock()
	calls = mock.calls.DescribeUpdateActionsRequest
	lockelasticacheClientMockDescribeUpdateActionsRequest.RUnlock()
	return calls
}

// DescribeUpdateActionsWithContext calls DescribeUpdateActionsWithContextFunc.
func (mock *elasticacheClientMock) DescribeUpdateActionsWithContext(in1 context.Context, in2 *elasticache.DescribeUpdateActionsInput, in3 ...request.Option) (*elasticache.DescribeUpdateActionsOutput, error) {
	if mock.DescribeUpdateActionsWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeUpdateActionsWithContextFunc: method is nil but elasticacheClient.DescribeUpdateActionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeUpdateActionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockDescribeUpdateActionsWithContext.Lock()
	mock.calls.DescribeUpdateActionsWithContext = append(mock.calls.DescribeUpdateActionsWithContext, callInfo)
	lockelasticacheClientMockDescribeUpdateActionsWithContext.Unlock()
	return mock.DescribeUpdateActionsWithContextFunc(in1, in2, in3...)
}

// DescribeUpdateActionsWithContextCalls gets all the calls that were made to DescribeUpdateActionsWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeUpdateActionsWithContextCalls())
func (mock *elasticacheClientMock) DescribeUpdateActionsWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeUpdateActionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeUpdateActionsInput
		In3 []request.Option
	}
	lockelasticacheClientMockDescribeUpdateActionsWithContext.RLock()
	calls = mock.calls.DescribeUpdateActionsWithContext
	lockelasticacheClientMockDescribeUpdateActionsWithContext.RUnlock()
	return calls
}

// IncreaseReplicaCount calls IncreaseReplicaCountFunc.
func (mock *elasticacheClientMock) IncreaseReplicaCount(in1 *elasticache.IncreaseReplicaCountInput) (*elasticache.IncreaseReplicaCountOutput, error) {
	if mock.IncreaseReplicaCountFunc == nil {
		panic("elasticacheClientMock.IncreaseReplicaCountFunc: method is nil but elasticacheClient.IncreaseReplicaCount was just called")
	}
	callInfo := struct {
		In1 *elasticache.IncreaseReplicaCountInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockIncreaseReplicaCount.Lock()
	mock.calls.IncreaseReplicaCount = append(mock.calls.IncreaseReplicaCount, callInfo)
	lockelasticacheClientMockIncreaseReplicaCount.Unlock()
	return mock.IncreaseReplicaCountFunc(in1)
}

// IncreaseReplicaCountCalls gets all the calls that were made to IncreaseReplicaCount.
// Check the length with:
//     len(mockedelasticacheClient.IncreaseReplicaCountCalls())
func (mock *elasticacheClientMock) IncreaseReplicaCountCalls() []struct {
	In1 *elasticache.IncreaseReplicaCountInput
} {
	var calls []struct {
		In1 *elasticache.IncreaseReplicaCountInput
	}
	lockelasticacheClientMockIncreaseReplicaCount.RLock()
	calls = mock.calls.IncreaseReplicaCount
	lockelasticacheClientMockIncreaseReplicaCount.RUnlock()
	return calls
}

// IncreaseReplicaCountRequest calls IncreaseReplicaCountRequestFunc.
func (mock *elasticacheClientMock) IncreaseReplicaCountRequest(in1 *elasticache.IncreaseReplicaCountInput) (*request.Request, *elasticache.IncreaseReplicaCountOutput) {
	if mock.IncreaseReplicaCountRequestFunc == nil {
		panic("elasticacheClientMock.IncreaseReplicaCountRequestFunc: method is nil but elasticacheClient.IncreaseReplicaCountRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.IncreaseReplicaCountInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockIncreaseReplicaCountRequest.Lock()
	mock.calls.IncreaseReplicaCountRequest = append(mock.calls.IncreaseReplicaCountRequest, callInfo)
	lockelasticacheClientMockIncreaseReplicaCountRequest.Unlock()
	return mock.IncreaseReplicaCountRequestFunc(in1)
}

// IncreaseReplicaCountRequestCalls gets all the calls that were made to IncreaseReplicaCountRequest.
// Check the length with:
//     len(mockedelasticacheClient.IncreaseReplicaCountRequestCalls())
func (mock *elasticacheClientMock) IncreaseReplicaCountRequestCalls() []struct {
	In1 *elasticache.IncreaseReplicaCountInput
} {
	var calls []struct {
		In1 *elasticache.IncreaseReplicaCountInput
	}
	lockelasticacheClientMockIncreaseReplicaCountRequest.RLock()
	calls = mock.calls.IncreaseReplicaCountRequest
	lockelasticacheClientMockIncreaseReplicaCountRequest.RUnlock()
	return calls
}

// IncreaseReplicaCountWithContext calls IncreaseReplicaCountWithContextFunc.
func (mock *elasticacheClientMock) IncreaseReplicaCountWithContext(in1 context.Context, in2 *elasticache.IncreaseReplicaCountInput, in3 ...request.Option) (*elasticache.IncreaseReplicaCountOutput, error) {
	if mock.IncreaseReplicaCountWithContextFunc == nil {
		panic("elasticacheClientMock.IncreaseReplicaCountWithContextFunc: method is nil but elasticacheClient.IncreaseReplicaCountWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.IncreaseReplicaCountInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockIncreaseReplicaCountWithContext.Lock()
	mock.calls.IncreaseReplicaCountWithContext = append(mock.calls.IncreaseReplicaCountWithContext, callInfo)
	lockelasticacheClientMockIncreaseReplicaCountWithContext.Unlock()
	return mock.IncreaseReplicaCountWithContextFunc(in1, in2, in3...)
}

// IncreaseReplicaCountWithContextCalls gets all the calls that were made to IncreaseReplicaCountWithContext.
// Check the length with:
//     len(mockedelasticacheClient.IncreaseReplicaCountWithContextCalls())
func (mock *elasticacheClientMock) IncreaseReplicaCountWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.IncreaseReplicaCountInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.IncreaseReplicaCountInput
		In3 []request.Option
	}
	lockelasticacheClientMockIncreaseReplicaCountWithContext.RLock()
	calls = mock.calls.IncreaseReplicaCountWithContext
	lockelasticacheClientMockIncreaseReplicaCountWithContext.RUnlock()
	return calls
}

// ListAllowedNodeTypeModifications calls ListAllowedNodeTypeModificationsFunc.
func (mock *elasticacheClientMock) ListAllowedNodeTypeModifications(in1 *elasticache.ListAllowedNodeTypeModificationsInput) (*elasticache.ListAllowedNodeTypeModificationsOutput, error) {
	if mock.ListAllowedNodeTypeModificationsFunc == nil {
		panic("elasticacheClientMock.ListAllowedNodeTypeModificationsFunc: method is nil but elasticacheClient.ListAllowedNodeTypeModifications was just called")
	}
	callInfo := struct {
		In1 *elasticache.ListAllowedNodeTypeModificationsInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockListAllowedNodeTypeModifications.Lock()
	mock.calls.ListAllowedNodeTypeModifications = append(mock.calls.ListAllowedNodeTypeModifications, callInfo)
	lockelasticacheClientMockListAllowedNodeTypeModifications.Unlock()
	return mock.ListAllowedNodeTypeModificationsFunc(in1)
}

// ListAllowedNodeTypeModificationsCalls gets all the calls that were made to ListAllowedNodeTypeModifications.
// Check the length with:
//     len(mockedelasticacheClient.ListAllowedNodeTypeModificationsCalls())
func (mock *elasticacheClientMock) ListAllowedNodeTypeModificationsCalls() []struct {
	In1 *elasticache.ListAllowedNodeTypeModificationsInput
} {
	var calls []struct {
		In1 *elasticache.ListAllowedNodeTypeModificationsInput
	}
	lockelasticacheClientMockListAllowedNodeTypeModifications.RLock()
	calls = mock.calls.ListAllowedNodeTypeModifications
	lockelasticacheClientMockListAllowedNodeTypeModifications.RUnlock()
	return calls
}

// ListAllowedNodeTypeModificationsRequest calls ListAllowedNodeTypeModificationsRequestFunc.
func (mock *elasticacheClientMock) ListAllowedNodeTypeModificationsRequest(in1 *elasticache.ListAllowedNodeTypeModificationsInput) (*request.Request, *elasticache.ListAllowedNodeTypeModificationsOutput) {
	if mock.ListAllowedNodeTypeModificationsRequestFunc == nil {
		panic("elasticacheClientMock.ListAllowedNodeTypeModificationsRequestFunc: method is nil but elasticacheClient.ListAllowedNodeTypeModificationsRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.ListAllowedNodeTypeModificationsInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockListAllowedNodeTypeModificationsRequest.Lock()
	mock.calls.ListAllowedNodeTypeModificationsRequest = append(mock.calls.ListAllowedNodeTypeModificationsRequest, callInfo)
	lockelasticacheClientMockListAllowedNodeTypeModificationsRequest.Unlock()
	return mock.ListAllowedNodeTypeModificationsRequestFunc(in1)
}

// ListAllowedNodeTypeModificationsRequestCalls gets all the calls that were made to ListAllowedNodeTypeModificationsRequest.
// Check the length with:
//     len(mockedelasticacheClient.ListAllowedNodeTypeModificationsRequestCalls())
func (mock *elasticacheClientMock) ListAllowedNodeTypeModificationsRequestCalls() []struct {
	In1 *elasticache.ListAllowedNodeTypeModificationsInput
} {
	var calls []struct {
		In1 *elasticache.ListAllowedNodeTypeModificationsInput
	}
	lockelasticacheClientMockListAllowedNodeTypeModificationsRequest.RLock()
	calls = mock.calls.ListAllowedNodeTypeModificationsRequest
	lockelasticacheClientMockListAllowedNodeTypeModificationsRequest.RUnlock()
	return calls
}

// ListAllowedNodeTypeModificationsWithContext calls ListAllowedNodeTypeModificationsWithContextFunc.
func (mock *elasticacheClientMock) ListAllowedNodeTypeModificationsWithContext(in1 context.Context, in2 *elasticache.ListAllowedNodeTypeModificationsInput, in3 ...request.Option) (*elasticache.ListAllowedNodeTypeModificationsOutput, error) {
	if mock.ListAllowedNodeTypeModificationsWithContextFunc == nil {
		panic("elasticacheClientMock.ListAllowedNodeTypeModificationsWithContextFunc: method is nil but elasticacheClient.ListAllowedNodeTypeModificationsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.ListAllowedNodeTypeModificationsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockListAllowedNodeTypeModificationsWithContext.Lock()
	mock.calls.ListAllowedNodeTypeModificationsWithContext = append(mock.calls.ListAllowedNodeTypeModificationsWithContext, callInfo)
	lockelasticacheClientMockListAllowedNodeTypeModificationsWithContext.Unlock()
	return mock.ListAllowedNodeTypeModificationsWithContextFunc(in1, in2, in3...)
}

// ListAllowedNodeTypeModificationsWithContextCalls gets all the calls that were made to ListAllowedNodeTypeModificationsWithContext.
// Check the length with:
//     len(mockedelasticacheClient.ListAllowedNodeTypeModificationsWithContextCalls())
func (mock *elasticacheClientMock) ListAllowedNodeTypeModificationsWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.ListAllowedNodeTypeModificationsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.ListAllowedNodeTypeModificationsInput
		In3 []request.Option
	}
	lockelasticacheClientMockListAllowedNodeTypeModificationsWithContext.RLock()
	calls = mock.calls.ListAllowedNodeTypeModificationsWithContext
	lockelasticacheClientMockListAllowedNodeTypeModificationsWithContext.RUnlock()
	return calls
}

// ListTagsForResource calls ListTagsForResourceFunc.
func (mock *elasticacheClientMock) ListTagsForResource(in1 *elasticache.ListTagsForResourceInput) (*elasticache.TagListMessage, error) {
	if mock.ListTagsForResourceFunc == nil {
		panic("elasticacheClientMock.ListTagsForResourceFunc: method is nil but elasticacheClient.ListTagsForResource was just called")
	}
	callInfo := struct {
		In1 *elasticache.ListTagsForResourceInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockListTagsForResource.Lock()
	mock.calls.ListTagsForResource = append(mock.calls.ListTagsForResource, callInfo)
	lockelasticacheClientMockListTagsForResource.Unlock()
	return mock.ListTagsForResourceFunc(in1)
}

// ListTagsForResourceCalls gets all the calls that were made to ListTagsForResource.
// Check the length with:
//     len(mockedelasticacheClient.ListTagsForResourceCalls())
func (mock *elasticacheClientMock) ListTagsForResourceCalls() []struct {
	In1 *elasticache.ListTagsForResourceInput
} {
	var calls []struct {
		In1 *elasticache.ListTagsForResourceInput
	}
	lockelasticacheClientMockListTagsForResource.RLock()
	calls = mock.calls.ListTagsForResource
	lockelasticacheClientMockListTagsForResource.RUnlock()
	return calls
}

// ListTagsForResourceRequest calls ListTagsForResourceRequestFunc.
func (mock *elasticacheClientMock) ListTagsForResourceRequest(in1 *elasticache.ListTagsForResourceInput) (*request.Request, *elasticache.TagListMessage) {
	if mock.ListTagsForResourceRequestFunc == nil {
		panic("elasticacheClientMock.ListTagsForResourceRequestFunc: method is nil but elasticacheClient.ListTagsForResourceRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.ListTagsForResourceInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockListTagsForResourceRequest.Lock()
	mock.calls.ListTagsForResourceRequest = append(mock.calls.ListTagsForResourceRequest, callInfo)
	lockelasticacheClientMockListTagsForResourceRequest.Unlock()
	return mock.ListTagsForResourceRequestFunc(in1)
}

// ListTagsForResourceRequestCalls gets all the calls that were made to ListTagsForResourceRequest.
// Check the length with:
//     len(mockedelasticacheClient.ListTagsForResourceRequestCalls())
func (mock *elasticacheClientMock) ListTagsForResourceRequestCalls() []struct {
	In1 *elasticache.ListTagsForResourceInput
} {
	var calls []struct {
		In1 *elasticache.ListTagsForResourceInput
	}
	lockelasticacheClientMockListTagsForResourceRequest.RLock()
	calls = mock.calls.ListTagsForResourceRequest
	lockelasticacheClientMockListTagsForResourceRequest.RUnlock()
	return calls
}

// ListTagsForResourceWithContext calls ListTagsForResourceWithContextFunc.
func (mock *elasticacheClientMock) ListTagsForResourceWithContext(in1 context.Context, in2 *elasticache.ListTagsForResourceInput, in3 ...request.Option) (*elasticache.TagListMessage, error) {
	if mock.ListTagsForResourceWithContextFunc == nil {
		panic("elasticacheClientMock.ListTagsForResourceWithContextFunc: method is nil but elasticacheClient.ListTagsForResourceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.ListTagsForResourceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockListTagsForResourceWithContext.Lock()
	mock.calls.ListTagsForResourceWithContext = append(mock.calls.ListTagsForResourceWithContext, callInfo)
	lockelasticacheClientMockListTagsForResourceWithContext.Unlock()
	return mock.ListTagsForResourceWithContextFunc(in1, in2, in3...)
}

// ListTagsForResourceWithContextCalls gets all the calls that were made to ListTagsForResourceWithContext.
// Check the length with:
//     len(mockedelasticacheClient.ListTagsForResourceWithContextCalls())
func (mock *elasticacheClientMock) ListTagsForResourceWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.ListTagsForResourceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.ListTagsForResourceInput
		In3 []request.Option
	}
	lockelasticacheClientMockListTagsForResourceWithContext.RLock()
	calls = mock.calls.ListTagsForResourceWithContext
	lockelasticacheClientMockListTagsForResourceWithContext.RUnlock()
	return calls
}

// ModifyCacheCluster calls ModifyCacheClusterFunc.
func (mock *elasticacheClientMock) ModifyCacheCluster(in1 *elasticache.ModifyCacheClusterInput) (*elasticache.ModifyCacheClusterOutput, error) {
	if mock.ModifyCacheClusterFunc == nil {
		panic("elasticacheClientMock.ModifyCacheClusterFunc: method is nil but elasticacheClient.ModifyCacheCluster was just called")
	}
	callInfo := struct {
		In1 *elasticache.ModifyCacheClusterInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockModifyCacheCluster.Lock()
	mock.calls.ModifyCacheCluster = append(mock.calls.ModifyCacheCluster, callInfo)
	lockelasticacheClientMockModifyCacheCluster.Unlock()
	return mock.ModifyCacheClusterFunc(in1)
}

// ModifyCacheClusterCalls gets all the calls that were made to ModifyCacheCluster.
// Check the length with:
//     len(mockedelasticacheClient.ModifyCacheClusterCalls())
func (mock *elasticacheClientMock) ModifyCacheClusterCalls() []struct {
	In1 *elasticache.ModifyCacheClusterInput
} {
	var calls []struct {
		In1 *elasticache.ModifyCacheClusterInput
	}
	lockelasticacheClientMockModifyCacheCluster.RLock()
	calls = mock.calls.ModifyCacheCluster
	lockelasticacheClientMockModifyCacheCluster.RUnlock()
	return calls
}

// ModifyCacheClusterRequest calls ModifyCacheClusterRequestFunc.
func (mock *elasticacheClientMock) ModifyCacheClusterRequest(in1 *elasticache.ModifyCacheClusterInput) (*request.Request, *elasticache.ModifyCacheClusterOutput) {
	if mock.ModifyCacheClusterRequestFunc == nil {
		panic("elasticacheClientMock.ModifyCacheClusterRequestFunc: method is nil but elasticacheClient.ModifyCacheClusterRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.ModifyCacheClusterInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockModifyCacheClusterRequest.Lock()
	mock.calls.ModifyCacheClusterRequest = append(mock.calls.ModifyCacheClusterRequest, callInfo)
	lockelasticacheClientMockModifyCacheClusterRequest.Unlock()
	return mock.ModifyCacheClusterRequestFunc(in1)
}

// ModifyCacheClusterRequestCalls gets all the calls that were made to ModifyCacheClusterRequest.
// Check the length with:
//     len(mockedelasticacheClient.ModifyCacheClusterRequestCalls())
func (mock *elasticacheClientMock) ModifyCacheClusterRequestCalls() []struct {
	In1 *elasticache.ModifyCacheClusterInput
} {
	var calls []struct {
		In1 *elasticache.ModifyCacheClusterInput
	}
	lockelasticacheClientMockModifyCacheClusterRequest.RLock()
	calls = mock.calls.ModifyCacheClusterRequest
	lockelasticacheClientMockModifyCacheClusterRequest.RUnlock()
	return calls
}

// ModifyCacheClusterWithContext calls ModifyCacheClusterWithContextFunc.
func (mock *elasticacheClientMock) ModifyCacheClusterWithContext(in1 context.Context, in2 *elasticache.ModifyCacheClusterInput, in3 ...request.Option) (*elasticache.ModifyCacheClusterOutput, error) {
	if mock.ModifyCacheClusterWithContextFunc == nil {
		panic("elasticacheClientMock.ModifyCacheClusterWithContextFunc: method is nil but elasticacheClient.ModifyCacheClusterWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.ModifyCacheClusterInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockModifyCacheClusterWithContext.Lock()
	mock.calls.ModifyCacheClusterWithContext = append(mock.calls.ModifyCacheClusterWithContext, callInfo)
	lockelasticacheClientMockModifyCacheClusterWithContext.Unlock()
	return mock.ModifyCacheClusterWithContextFunc(in1, in2, in3...)
}

// ModifyCacheClusterWithContextCalls gets all the calls that were made to ModifyCacheClusterWithContext.
// Check the length with:
//     len(mockedelasticacheClient.ModifyCacheClusterWithContextCalls())
func (mock *elasticacheClientMock) ModifyCacheClusterWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.ModifyCacheClusterInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.ModifyCacheClusterInput
		In3 []request.Option
	}
	lockelasticacheClientMockModifyCacheClusterWithContext.RLock()
	calls = mock.calls.ModifyCacheClusterWithContext
	lockelasticacheClientMockModifyCacheClusterWithContext.RUnlock()
	return calls
}

// ModifyCacheParameterGroup calls ModifyCacheParameterGroupFunc.
func (mock *elasticacheClientMock) ModifyCacheParameterGroup(in1 *elasticache.ModifyCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error) {
	if mock.ModifyCacheParameterGroupFunc == nil {
		panic("elasticacheClientMock.ModifyCacheParameterGroupFunc: method is nil but elasticacheClient.ModifyCacheParameterGroup was just called")
	}
	callInfo := struct {
		In1 *elasticache.ModifyCacheParameterGroupInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockModifyCacheParameterGroup.Lock()
	mock.calls.ModifyCacheParameterGroup = append(mock.calls.ModifyCacheParameterGroup, callInfo)
	lockelasticacheClientMockModifyCacheParameterGroup.Unlock()
	return mock.ModifyCacheParameterGroupFunc(in1)
}

// ModifyCacheParameterGroupCalls gets all the calls that were made to ModifyCacheParameterGroup.
// Check the length with:
//     len(mockedelasticacheClient.ModifyCacheParameterGroupCalls())
func (mock *elasticacheClientMock) ModifyCacheParameterGroupCalls() []struct {
	In1 *elasticache.ModifyCacheParameterGroupInput
} {
	var calls []struct {
		In1 *elasticache.ModifyCacheParameterGroupInput
	}
	lockelasticacheClientMockModifyCacheParameterGroup.RLock()
	calls = mock.calls.ModifyCacheParameterGroup
	lockelasticacheClientMockModifyCacheParameterGroup.RUnlock()
	return calls
}

// ModifyCacheParameterGroupRequest calls ModifyCacheParameterGroupRequestFunc.
func (mock *elasticacheClientMock) ModifyCacheParameterGroupRequest(in1 *elasticache.ModifyCacheParameterGroupInput) (*request.Request, *elasticache.CacheParameterGroupNameMessage) {
	if mock.ModifyCacheParameterGroupRequestFunc == nil {
		panic("elasticacheClientMock.ModifyCacheParameterGroupRequestFunc: method is nil but elasticacheClient.ModifyCacheParameterGroupRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.ModifyCacheParameterGroupInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockModifyCacheParameterGroupRequest.Lock()
	mock.calls.ModifyCacheParameterGroupRequest = append(mock.calls.ModifyCacheParameterGroupRequest, callInfo)
	lockelasticacheClientMockModifyCacheParameterGroupRequest.Unlock()
	return mock.ModifyCacheParameterGroupRequestFunc(in1)
}

// ModifyCacheParameterGroupRequestCalls gets all the calls that were made to ModifyCacheParameterGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.ModifyCacheParameterGroupRequestCalls())
func (mock *elasticacheClientMock) ModifyCacheParameterGroupRequestCalls() []struct {
	In1 *elasticache.ModifyCacheParameterGroupInput
} {
	var calls []struct {
		In1 *elasticache.ModifyCacheParameterGroupInput
	}
	lockelasticacheClientMockModifyCacheParameterGroupRequest.RLock()
	calls = mock.calls.ModifyCacheParameterGroupRequest
	lockelasticacheClientMockModifyCacheParameterGroupRequest.RUnlock()
	return calls
}

// ModifyCacheParameterGroupWithContext calls ModifyCacheParameterGroupWithContextFunc.
func (mock *elasticacheClientMock) ModifyCacheParameterGroupWithContext(in1 context.Context, in2 *elasticache.ModifyCacheParameterGroupInput, in3 ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error) {
	if mock.ModifyCacheParameterGroupWithContextFunc == nil {
		panic("elasticacheClientMock.ModifyCacheParameterGroupWithContextFunc: method is nil but elasticacheClient.ModifyCacheParameterGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.ModifyCacheParameterGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockModifyCacheParameterGroupWithContext.Lock()
	mock.calls.ModifyCacheParameterGroupWithContext = append(mock.calls.ModifyCacheParameterGroupWithContext, callInfo)
	lockelasticacheClientMockModifyCacheParameterGroupWithContext.Unlock()
	return mock.ModifyCacheParameterGroupWithContextFunc(in1, in2, in3...)
}

// ModifyCacheParameterGroupWithContextCalls gets all the calls that were made to ModifyCacheParameterGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.ModifyCacheParameterGroupWithContextCalls())
func (mock *elasticacheClientMock) ModifyCacheParameterGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.ModifyCacheParameterGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.ModifyCacheParameterGroupInput
		In3 []request.Option
	}
	lockelasticacheClientMockModifyCacheParameterGroupWithContext.RLock()
	calls = mock.calls.ModifyCacheParameterGroupWithContext
	lockelasticacheClientMockModifyCacheParameterGroupWithContext.RUnlock()
	return calls
}

// ModifyCacheSubnetGroup calls ModifyCacheSubnetGroupFunc.
func (mock *elasticacheClientMock) ModifyCacheSubnetGroup(in1 *elasticache.ModifyCacheSubnetGroupInput) (*elasticache.ModifyCacheSubnetGroupOutput, error) {
	if mock.ModifyCacheSubnetGroupFunc == nil {
		panic("elasticacheClientMock.ModifyCacheSubnetGroupFunc: method is nil but elasticacheClient.ModifyCacheSubnetGroup was just called")
	}
	callInfo := struct {
		In1 *elasticache.ModifyCacheSubnetGroupInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockModifyCacheSubnetGroup.Lock()
	mock.calls.ModifyCacheSubnetGroup = append(mock.calls.ModifyCacheSubnetGroup, callInfo)
	lockelasticacheClientMockModifyCacheSubnetGroup.Unlock()
	return mock.ModifyCacheSubnetGroupFunc(in1)
}

// ModifyCacheSubnetGroupCalls gets all the calls that were made to ModifyCacheSubnetGroup.
// Check the length with:
//     len(mockedelasticacheClient.ModifyCacheSubnetGroupCalls())
func (mock *elasticacheClientMock) ModifyCacheSubnetGroupCalls() []struct {
	In1 *elasticache.ModifyCacheSubnetGroupInput
} {
	var calls []struct {
		In1 *elasticache.ModifyCacheSubnetGroupInput
	}
	lockelasticacheClientMockModifyCacheSubnetGroup.RLock()
	calls = mock.calls.ModifyCacheSubnetGroup
	lockelasticacheClientMockModifyCacheSubnetGroup.RUnlock()
	return calls
}

// ModifyCacheSubnetGroupRequest calls ModifyCacheSubnetGroupRequestFunc.
func (mock *elasticacheClientMock) ModifyCacheSubnetGroupRequest(in1 *elasticache.ModifyCacheSubnetGroupInput) (*request.Request, *elasticache.ModifyCacheSubnetGroupOutput) {
	if mock.ModifyCacheSubnetGroupRequestFunc == nil {
		panic("elasticacheClientMock.ModifyCacheSubnetGroupRequestFunc: method is nil but elasticacheClient.ModifyCacheSubnetGroupRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.ModifyCacheSubnetGroupInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockModifyCacheSubnetGroupRequest.Lock()
	mock.calls.ModifyCacheSubnetGroupRequest = append(mock.calls.ModifyCacheSubnetGroupRequest, callInfo)
	lockelasticacheClientMockModifyCacheSubnetGroupRequest.Unlock()
	return mock.ModifyCacheSubnetGroupRequestFunc(in1)
}

// ModifyCacheSubnetGroupRequestCalls gets all the calls that were made to ModifyCacheSubnetGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.ModifyCacheSubnetGroupRequestCalls())
func (mock *elasticacheClientMock) ModifyCacheSubnetGroupRequestCalls() []struct {
	In1 *elasticache.ModifyCacheSubnetGroupInput
} {
	var calls []struct {
		In1 *elasticache.ModifyCacheSubnetGroupInput
	}
	lockelasticacheClientMockModifyCacheSubnetGroupRequest.RLock()
	calls = mock.calls.ModifyCacheSubnetGroupRequest
	lockelasticacheClientMockModifyCacheSubnetGroupRequest.RUnlock()
	return calls
}

// ModifyCacheSubnetGroupWithContext calls ModifyCacheSubnetGroupWithContextFunc.
func (mock *elasticacheClientMock) ModifyCacheSubnetGroupWithContext(in1 context.Context, in2 *elasticache.ModifyCacheSubnetGroupInput, in3 ...request.Option) (*elasticache.ModifyCacheSubnetGroupOutput, error) {
	if mock.ModifyCacheSubnetGroupWithContextFunc == nil {
		panic("elasticacheClientMock.ModifyCacheSubnetGroupWithContextFunc: method is nil but elasticacheClient.ModifyCacheSubnetGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.ModifyCacheSubnetGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockModifyCacheSubnetGroupWithContext.Lock()
	mock.calls.ModifyCacheSubnetGroupWithContext = append(mock.calls.ModifyCacheSubnetGroupWithContext, callInfo)
	lockelasticacheClientMockModifyCacheSubnetGroupWithContext.Unlock()
	return mock.ModifyCacheSubnetGroupWithContextFunc(in1, in2, in3...)
}

// ModifyCacheSubnetGroupWithContextCalls gets all the calls that were made to ModifyCacheSubnetGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.ModifyCacheSubnetGroupWithContextCalls())
func (mock *elasticacheClientMock) ModifyCacheSubnetGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.ModifyCacheSubnetGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.ModifyCacheSubnetGroupInput
		In3 []request.Option
	}
	lockelasticacheClientMockModifyCacheSubnetGroupWithContext.RLock()
	calls = mock.calls.ModifyCacheSubnetGroupWithContext
	lockelasticacheClientMockModifyCacheSubnetGroupWithContext.RUnlock()
	return calls
}

// ModifyReplicationGroup calls ModifyReplicationGroupFunc.
func (mock *elasticacheClientMock) ModifyReplicationGroup(in1 *elasticache.ModifyReplicationGroupInput) (*elasticache.ModifyReplicationGroupOutput, error) {
	if mock.ModifyReplicationGroupFunc == nil {
		panic("elasticacheClientMock.ModifyReplicationGroupFunc: method is nil but elasticacheClient.ModifyReplicationGroup was just called")
	}
	callInfo := struct {
		In1 *elasticache.ModifyReplicationGroupInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockModifyReplicationGroup.Lock()
	mock.calls.ModifyReplicationGroup = append(mock.calls.ModifyReplicationGroup, callInfo)
	lockelasticacheClientMockModifyReplicationGroup.Unlock()
	return mock.ModifyReplicationGroupFunc(in1)
}

// ModifyReplicationGroupCalls gets all the calls that were made to ModifyReplicationGroup.
// Check the length with:
//     len(mockedelasticacheClient.ModifyReplicationGroupCalls())
func (mock *elasticacheClientMock) ModifyReplicationGroupCalls() []struct {
	In1 *elasticache.ModifyReplicationGroupInput
} {
	var calls []struct {
		In1 *elasticache.ModifyReplicationGroupInput
	}
	lockelasticacheClientMockModifyReplicationGroup.RLock()
	calls = mock.calls.ModifyReplicationGroup
	lockelasticacheClientMockModifyReplicationGroup.RUnlock()
	return calls
}

// ModifyReplicationGroupRequest calls ModifyReplicationGroupRequestFunc.
func (mock *elasticacheClientMock) ModifyReplicationGroupRequest(in1 *elasticache.ModifyReplicationGroupInput) (*request.Request, *elasticache.ModifyReplicationGroupOutput) {
	if mock.ModifyReplicationGroupRequestFunc == nil {
		panic("elasticacheClientMock.ModifyReplicationGroupRequestFunc: method is nil but elasticacheClient.ModifyReplicationGroupRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.ModifyReplicationGroupInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockModifyReplicationGroupRequest.Lock()
	mock.calls.ModifyReplicationGroupRequest = append(mock.calls.ModifyReplicationGroupRequest, callInfo)
	lockelasticacheClientMockModifyReplicationGroupRequest.Unlock()
	return mock.ModifyReplicationGroupRequestFunc(in1)
}

// ModifyReplicationGroupRequestCalls gets all the calls that were made to ModifyReplicationGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.ModifyReplicationGroupRequestCalls())
func (mock *elasticacheClientMock) ModifyReplicationGroupRequestCalls() []struct {
	In1 *elasticache.ModifyReplicationGroupInput
} {
	var calls []struct {
		In1 *elasticache.ModifyReplicationGroupInput
	}
	lockelasticacheClientMockModifyReplicationGroupRequest.RLock()
	calls = mock.calls.ModifyReplicationGroupRequest
	lockelasticacheClientMockModifyReplicationGroupRequest.RUnlock()
	return calls
}

// ModifyReplicationGroupShardConfiguration calls ModifyReplicationGroupShardConfigurationFunc.
func (mock *elasticacheClientMock) ModifyReplicationGroupShardConfiguration(in1 *elasticache.ModifyReplicationGroupShardConfigurationInput) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error) {
	if mock.ModifyReplicationGroupShardConfigurationFunc == nil {
		panic("elasticacheClientMock.ModifyReplicationGroupShardConfigurationFunc: method is nil but elasticacheClient.ModifyReplicationGroupShardConfiguration was just called")
	}
	callInfo := struct {
		In1 *elasticache.ModifyReplicationGroupShardConfigurationInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockModifyReplicationGroupShardConfiguration.Lock()
	mock.calls.ModifyReplicationGroupShardConfiguration = append(mock.calls.ModifyReplicationGroupShardConfiguration, callInfo)
	lockelasticacheClientMockModifyReplicationGroupShardConfiguration.Unlock()
	return mock.ModifyReplicationGroupShardConfigurationFunc(in1)
}

// ModifyReplicationGroupShardConfigurationCalls gets all the calls that were made to ModifyReplicationGroupShardConfiguration.
// Check the length with:
//     len(mockedelasticacheClient.ModifyReplicationGroupShardConfigurationCalls())
func (mock *elasticacheClientMock) ModifyReplicationGroupShardConfigurationCalls() []struct {
	In1 *elasticache.ModifyReplicationGroupShardConfigurationInput
} {
	var calls []struct {
		In1 *elasticache.ModifyReplicationGroupShardConfigurationInput
	}
	lockelasticacheClientMockModifyReplicationGroupShardConfiguration.RLock()
	calls = mock.calls.ModifyReplicationGroupShardConfiguration
	lockelasticacheClientMockModifyReplicationGroupShardConfiguration.RUnlock()
	return calls
}

// ModifyReplicationGroupShardConfigurationRequest calls ModifyReplicationGroupShardConfigurationRequestFunc.
func (mock *elasticacheClientMock) ModifyReplicationGroupShardConfigurationRequest(in1 *elasticache.ModifyReplicationGroupShardConfigurationInput) (*request.Request, *elasticache.ModifyReplicationGroupShardConfigurationOutput) {
	if mock.ModifyReplicationGroupShardConfigurationRequestFunc == nil {
		panic("elasticacheClientMock.ModifyReplicationGroupShardConfigurationRequestFunc: method is nil but elasticacheClient.ModifyReplicationGroupShardConfigurationRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.ModifyReplicationGroupShardConfigurationInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockModifyReplicationGroupShardConfigurationRequest.Lock()
	mock.calls.ModifyReplicationGroupShardConfigurationRequest = append(mock.calls.ModifyReplicationGroupShardConfigurationRequest, callInfo)
	lockelasticacheClientMockModifyReplicationGroupShardConfigurationRequest.Unlock()
	return mock.ModifyReplicationGroupShardConfigurationRequestFunc(in1)
}

// ModifyReplicationGroupShardConfigurationRequestCalls gets all the calls that were made to ModifyReplicationGroupShardConfigurationRequest.
// Check the length with:
//     len(mockedelasticacheClient.ModifyReplicationGroupShardConfigurationRequestCalls())
func (mock *elasticacheClientMock) ModifyReplicationGroupShardConfigurationRequestCalls() []struct {
	In1 *elasticache.ModifyReplicationGroupShardConfigurationInput
} {
	var calls []struct {
		In1 *elasticache.ModifyReplicationGroupShardConfigurationInput
	}
	lockelasticacheClientMockModifyReplicationGroupShardConfigurationRequest.RLock()
	calls = mock.calls.ModifyReplicationGroupShardConfigurationRequest
	lockelasticacheClientMockModifyReplicationGroupShardConfigurationRequest.RUnlock()
	return calls
}

// ModifyReplicationGroupShardConfigurationWithContext calls ModifyReplicationGroupShardConfigurationWithContextFunc.
func (mock *elasticacheClientMock) ModifyReplicationGroupShardConfigurationWithContext(in1 context.Context, in2 *elasticache.ModifyReplicationGroupShardConfigurationInput, in3 ...request.Option) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error) {
	if mock.ModifyReplicationGroupShardConfigurationWithContextFunc == nil {
		panic("elasticacheClientMock.ModifyReplicationGroupShardConfigurationWithContextFunc: method is nil but elasticacheClient.ModifyReplicationGroupShardConfigurationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.ModifyReplicationGroupShardConfigurationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockModifyReplicationGroupShardConfigurationWithContext.Lock()
	mock.calls.ModifyReplicationGroupShardConfigurationWithContext = append(mock.calls.ModifyReplicationGroupShardConfigurationWithContext, callInfo)
	lockelasticacheClientMockModifyReplicationGroupShardConfigurationWithContext.Unlock()
	return mock.ModifyReplicationGroupShardConfigurationWithContextFunc(in1, in2, in3...)
}

// ModifyReplicationGroupShardConfigurationWithContextCalls gets all the calls that were made to ModifyReplicationGroupShardConfigurationWithContext.
// Check the length with:
//     len(mockedelasticacheClient.ModifyReplicationGroupShardConfigurationWithContextCalls())
func (mock *elasticacheClientMock) ModifyReplicationGroupShardConfigurationWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.ModifyReplicationGroupShardConfigurationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.ModifyReplicationGroupShardConfigurationInput
		In3 []request.Option
	}
	lockelasticacheClientMockModifyReplicationGroupShardConfigurationWithContext.RLock()
	calls = mock.calls.ModifyReplicationGroupShardConfigurationWithContext
	lockelasticacheClientMockModifyReplicationGroupShardConfigurationWithContext.RUnlock()
	return calls
}

// ModifyReplicationGroupWithContext calls ModifyReplicationGroupWithContextFunc.
func (mock *elasticacheClientMock) ModifyReplicationGroupWithContext(in1 context.Context, in2 *elasticache.ModifyReplicationGroupInput, in3 ...request.Option) (*elasticache.ModifyReplicationGroupOutput, error) {
	if mock.ModifyReplicationGroupWithContextFunc == nil {
		panic("elasticacheClientMock.ModifyReplicationGroupWithContextFunc: method is nil but elasticacheClient.ModifyReplicationGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.ModifyReplicationGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockModifyReplicationGroupWithContext.Lock()
	mock.calls.ModifyReplicationGroupWithContext = append(mock.calls.ModifyReplicationGroupWithContext, callInfo)
	lockelasticacheClientMockModifyReplicationGroupWithContext.Unlock()
	return mock.ModifyReplicationGroupWithContextFunc(in1, in2, in3...)
}

// ModifyReplicationGroupWithContextCalls gets all the calls that were made to ModifyReplicationGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.ModifyReplicationGroupWithContextCalls())
func (mock *elasticacheClientMock) ModifyReplicationGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.ModifyReplicationGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.ModifyReplicationGroupInput
		In3 []request.Option
	}
	lockelasticacheClientMockModifyReplicationGroupWithContext.RLock()
	calls = mock.calls.ModifyReplicationGroupWithContext
	lockelasticacheClientMockModifyReplicationGroupWithContext.RUnlock()
	return calls
}

// PurchaseReservedCacheNodesOffering calls PurchaseReservedCacheNodesOfferingFunc.
func (mock *elasticacheClientMock) PurchaseReservedCacheNodesOffering(in1 *elasticache.PurchaseReservedCacheNodesOfferingInput) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error) {
	if mock.PurchaseReservedCacheNodesOfferingFunc == nil {
		panic("elasticacheClientMock.PurchaseReservedCacheNodesOfferingFunc: method is nil but elasticacheClient.PurchaseReservedCacheNodesOffering was just called")
	}
	callInfo := struct {
		In1 *elasticache.PurchaseReservedCacheNodesOfferingInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockPurchaseReservedCacheNodesOffering.Lock()
	mock.calls.PurchaseReservedCacheNodesOffering = append(mock.calls.PurchaseReservedCacheNodesOffering, callInfo)
	lockelasticacheClientMockPurchaseReservedCacheNodesOffering.Unlock()
	return mock.PurchaseReservedCacheNodesOfferingFunc(in1)
}

// PurchaseReservedCacheNodesOfferingCalls gets all the calls that were made to PurchaseReservedCacheNodesOffering.
// Check the length with:
//     len(mockedelasticacheClient.PurchaseReservedCacheNodesOfferingCalls())
func (mock *elasticacheClientMock) PurchaseReservedCacheNodesOfferingCalls() []struct {
	In1 *elasticache.PurchaseReservedCacheNodesOfferingInput
} {
	var calls []struct {
		In1 *elasticache.PurchaseReservedCacheNodesOfferingInput
	}
	lockelasticacheClientMockPurchaseReservedCacheNodesOffering.RLock()
	calls = mock.calls.PurchaseReservedCacheNodesOffering
	lockelasticacheClientMockPurchaseReservedCacheNodesOffering.RUnlock()
	return calls
}

// PurchaseReservedCacheNodesOfferingRequest calls PurchaseReservedCacheNodesOfferingRequestFunc.
func (mock *elasticacheClientMock) PurchaseReservedCacheNodesOfferingRequest(in1 *elasticache.PurchaseReservedCacheNodesOfferingInput) (*request.Request, *elasticache.PurchaseReservedCacheNodesOfferingOutput) {
	if mock.PurchaseReservedCacheNodesOfferingRequestFunc == nil {
		panic("elasticacheClientMock.PurchaseReservedCacheNodesOfferingRequestFunc: method is nil but elasticacheClient.PurchaseReservedCacheNodesOfferingRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.PurchaseReservedCacheNodesOfferingInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockPurchaseReservedCacheNodesOfferingRequest.Lock()
	mock.calls.PurchaseReservedCacheNodesOfferingRequest = append(mock.calls.PurchaseReservedCacheNodesOfferingRequest, callInfo)
	lockelasticacheClientMockPurchaseReservedCacheNodesOfferingRequest.Unlock()
	return mock.PurchaseReservedCacheNodesOfferingRequestFunc(in1)
}

// PurchaseReservedCacheNodesOfferingRequestCalls gets all the calls that were made to PurchaseReservedCacheNodesOfferingRequest.
// Check the length with:
//     len(mockedelasticacheClient.PurchaseReservedCacheNodesOfferingRequestCalls())
func (mock *elasticacheClientMock) PurchaseReservedCacheNodesOfferingRequestCalls() []struct {
	In1 *elasticache.PurchaseReservedCacheNodesOfferingInput
} {
	var calls []struct {
		In1 *elasticache.PurchaseReservedCacheNodesOfferingInput
	}
	lockelasticacheClientMockPurchaseReservedCacheNodesOfferingRequest.RLock()
	calls = mock.calls.PurchaseReservedCacheNodesOfferingRequest
	lockelasticacheClientMockPurchaseReservedCacheNodesOfferingRequest.RUnlock()
	return calls
}

// PurchaseReservedCacheNodesOfferingWithContext calls PurchaseReservedCacheNodesOfferingWithContextFunc.
func (mock *elasticacheClientMock) PurchaseReservedCacheNodesOfferingWithContext(in1 context.Context, in2 *elasticache.PurchaseReservedCacheNodesOfferingInput, in3 ...request.Option) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error) {
	if mock.PurchaseReservedCacheNodesOfferingWithContextFunc == nil {
		panic("elasticacheClientMock.PurchaseReservedCacheNodesOfferingWithContextFunc: method is nil but elasticacheClient.PurchaseReservedCacheNodesOfferingWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.PurchaseReservedCacheNodesOfferingInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockPurchaseReservedCacheNodesOfferingWithContext.Lock()
	mock.calls.PurchaseReservedCacheNodesOfferingWithContext = append(mock.calls.PurchaseReservedCacheNodesOfferingWithContext, callInfo)
	lockelasticacheClientMockPurchaseReservedCacheNodesOfferingWithContext.Unlock()
	return mock.PurchaseReservedCacheNodesOfferingWithContextFunc(in1, in2, in3...)
}

// PurchaseReservedCacheNodesOfferingWithContextCalls gets all the calls that were made to PurchaseReservedCacheNodesOfferingWithContext.
// Check the length with:
//     len(mockedelasticacheClient.PurchaseReservedCacheNodesOfferingWithContextCalls())
func (mock *elasticacheClientMock) PurchaseReservedCacheNodesOfferingWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.PurchaseReservedCacheNodesOfferingInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.PurchaseReservedCacheNodesOfferingInput
		In3 []request.Option
	}
	lockelasticacheClientMockPurchaseReservedCacheNodesOfferingWithContext.RLock()
	calls = mock.calls.PurchaseReservedCacheNodesOfferingWithContext
	lockelasticacheClientMockPurchaseReservedCacheNodesOfferingWithContext.RUnlock()
	return calls
}

// RebootCacheCluster calls RebootCacheClusterFunc.
func (mock *elasticacheClientMock) RebootCacheCluster(in1 *elasticache.RebootCacheClusterInput) (*elasticache.RebootCacheClusterOutput, error) {
	if mock.RebootCacheClusterFunc == nil {
		panic("elasticacheClientMock.RebootCacheClusterFunc: method is nil but elasticacheClient.RebootCacheCluster was just called")
	}
	callInfo := struct {
		In1 *elasticache.RebootCacheClusterInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockRebootCacheCluster.Lock()
	mock.calls.RebootCacheCluster = append(mock.calls.RebootCacheCluster, callInfo)
	lockelasticacheClientMockRebootCacheCluster.Unlock()
	return mock.RebootCacheClusterFunc(in1)
}

// RebootCacheClusterCalls gets all the calls that were made to RebootCacheCluster.
// Check the length with:
//     len(mockedelasticacheClient.RebootCacheClusterCalls())
func (mock *elasticacheClientMock) RebootCacheClusterCalls() []struct {
	In1 *elasticache.RebootCacheClusterInput
} {
	var calls []struct {
		In1 *elasticache.RebootCacheClusterInput
	}
	lockelasticacheClientMockRebootCacheCluster.RLock()
	calls = mock.calls.RebootCacheCluster
	lockelasticacheClientMockRebootCacheCluster.RUnlock()
	return calls
}

// RebootCacheClusterRequest calls RebootCacheClusterRequestFunc.
func (mock *elasticacheClientMock) RebootCacheClusterRequest(in1 *elasticache.RebootCacheClusterInput) (*request.Request, *elasticache.RebootCacheClusterOutput) {
	if mock.RebootCacheClusterRequestFunc == nil {
		panic("elasticacheClientMock.RebootCacheClusterRequestFunc: method is nil but elasticacheClient.RebootCacheClusterRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.RebootCacheClusterInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockRebootCacheClusterRequest.Lock()
	mock.calls.RebootCacheClusterRequest = append(mock.calls.RebootCacheClusterRequest, callInfo)
	lockelasticacheClientMockRebootCacheClusterRequest.Unlock()
	return mock.RebootCacheClusterRequestFunc(in1)
}

// RebootCacheClusterRequestCalls gets all the calls that were made to RebootCacheClusterRequest.
// Check the length with:
//     len(mockedelasticacheClient.RebootCacheClusterRequestCalls())
func (mock *elasticacheClientMock) RebootCacheClusterRequestCalls() []struct {
	In1 *elasticache.RebootCacheClusterInput
} {
	var calls []struct {
		In1 *elasticache.RebootCacheClusterInput
	}
	lockelasticacheClientMockRebootCacheClusterRequest.RLock()
	calls = mock.calls.RebootCacheClusterRequest
	lockelasticacheClientMockRebootCacheClusterRequest.RUnlock()
	return calls
}

// RebootCacheClusterWithContext calls RebootCacheClusterWithContextFunc.
func (mock *elasticacheClientMock) RebootCacheClusterWithContext(in1 context.Context, in2 *elasticache.RebootCacheClusterInput, in3 ...request.Option) (*elasticache.RebootCacheClusterOutput, error) {
	if mock.RebootCacheClusterWithContextFunc == nil {
		panic("elasticacheClientMock.RebootCacheClusterWithContextFunc: method is nil but elasticacheClient.RebootCacheClusterWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.RebootCacheClusterInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockRebootCacheClusterWithContext.Lock()
	mock.calls.RebootCacheClusterWithContext = append(mock.calls.RebootCacheClusterWithContext, callInfo)
	lockelasticacheClientMockRebootCacheClusterWithContext.Unlock()
	return mock.RebootCacheClusterWithContextFunc(in1, in2, in3...)
}

// RebootCacheClusterWithContextCalls gets all the calls that were made to RebootCacheClusterWithContext.
// Check the length with:
//     len(mockedelasticacheClient.RebootCacheClusterWithContextCalls())
func (mock *elasticacheClientMock) RebootCacheClusterWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.RebootCacheClusterInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.RebootCacheClusterInput
		In3 []request.Option
	}
	lockelasticacheClientMockRebootCacheClusterWithContext.RLock()
	calls = mock.calls.RebootCacheClusterWithContext
	lockelasticacheClientMockRebootCacheClusterWithContext.RUnlock()
	return calls
}

// RemoveTagsFromResource calls RemoveTagsFromResourceFunc.
func (mock *elasticacheClientMock) RemoveTagsFromResource(in1 *elasticache.RemoveTagsFromResourceInput) (*elasticache.TagListMessage, error) {
	if mock.RemoveTagsFromResourceFunc == nil {
		panic("elasticacheClientMock.RemoveTagsFromResourceFunc: method is nil but elasticacheClient.RemoveTagsFromResource was just called")
	}
	callInfo := struct {
		In1 *elasticache.RemoveTagsFromResourceInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockRemoveTagsFromResource.Lock()
	mock.calls.RemoveTagsFromResource = append(mock.calls.RemoveTagsFromResource, callInfo)
	lockelasticacheClientMockRemoveTagsFromResource.Unlock()
	return mock.RemoveTagsFromResourceFunc(in1)
}

// RemoveTagsFromResourceCalls gets all the calls that were made to RemoveTagsFromResource.
// Check the length with:
//     len(mockedelasticacheClient.RemoveTagsFromResourceCalls())
func (mock *elasticacheClientMock) RemoveTagsFromResourceCalls() []struct {
	In1 *elasticache.RemoveTagsFromResourceInput
} {
	var calls []struct {
		In1 *elasticache.RemoveTagsFromResourceInput
	}
	lockelasticacheClientMockRemoveTagsFromResource.RLock()
	calls = mock.calls.RemoveTagsFromResource
	lockelasticacheClientMockRemoveTagsFromResource.RUnlock()
	return calls
}

// RemoveTagsFromResourceRequest calls RemoveTagsFromResourceRequestFunc.
func (mock *elasticacheClientMock) RemoveTagsFromResourceRequest(in1 *elasticache.RemoveTagsFromResourceInput) (*request.Request, *elasticache.TagListMessage) {
	if mock.RemoveTagsFromResourceRequestFunc == nil {
		panic("elasticacheClientMock.RemoveTagsFromResourceRequestFunc: method is nil but elasticacheClient.RemoveTagsFromResourceRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.RemoveTagsFromResourceInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockRemoveTagsFromResourceRequest.Lock()
	mock.calls.RemoveTagsFromResourceRequest = append(mock.calls.RemoveTagsFromResourceRequest, callInfo)
	lockelasticacheClientMockRemoveTagsFromResourceRequest.Unlock()
	return mock.RemoveTagsFromResourceRequestFunc(in1)
}

// RemoveTagsFromResourceRequestCalls gets all the calls that were made to RemoveTagsFromResourceRequest.
// Check the length with:
//     len(mockedelasticacheClient.RemoveTagsFromResourceRequestCalls())
func (mock *elasticacheClientMock) RemoveTagsFromResourceRequestCalls() []struct {
	In1 *elasticache.RemoveTagsFromResourceInput
} {
	var calls []struct {
		In1 *elasticache.RemoveTagsFromResourceInput
	}
	lockelasticacheClientMockRemoveTagsFromResourceRequest.RLock()
	calls = mock.calls.RemoveTagsFromResourceRequest
	lockelasticacheClientMockRemoveTagsFromResourceRequest.RUnlock()
	return calls
}

// RemoveTagsFromResourceWithContext calls RemoveTagsFromResourceWithContextFunc.
func (mock *elasticacheClientMock) RemoveTagsFromResourceWithContext(in1 context.Context, in2 *elasticache.RemoveTagsFromResourceInput, in3 ...request.Option) (*elasticache.TagListMessage, error) {
	if mock.RemoveTagsFromResourceWithContextFunc == nil {
		panic("elasticacheClientMock.RemoveTagsFromResourceWithContextFunc: method is nil but elasticacheClient.RemoveTagsFromResourceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.RemoveTagsFromResourceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockRemoveTagsFromResourceWithContext.Lock()
	mock.calls.RemoveTagsFromResourceWithContext = append(mock.calls.RemoveTagsFromResourceWithContext, callInfo)
	lockelasticacheClientMockRemoveTagsFromResourceWithContext.Unlock()
	return mock.RemoveTagsFromResourceWithContextFunc(in1, in2, in3...)
}

// RemoveTagsFromResourceWithContextCalls gets all the calls that were made to RemoveTagsFromResourceWithContext.
// Check the length with:
//     len(mockedelasticacheClient.RemoveTagsFromResourceWithContextCalls())
func (mock *elasticacheClientMock) RemoveTagsFromResourceWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.RemoveTagsFromResourceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.RemoveTagsFromResourceInput
		In3 []request.Option
	}
	lockelasticacheClientMockRemoveTagsFromResourceWithContext.RLock()
	calls = mock.calls.RemoveTagsFromResourceWithContext
	lockelasticacheClientMockRemoveTagsFromResourceWithContext.RUnlock()
	return calls
}

// ResetCacheParameterGroup calls ResetCacheParameterGroupFunc.
func (mock *elasticacheClientMock) ResetCacheParameterGroup(in1 *elasticache.ResetCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error) {
	if mock.ResetCacheParameterGroupFunc == nil {
		panic("elasticacheClientMock.ResetCacheParameterGroupFunc: method is nil but elasticacheClient.ResetCacheParameterGroup was just called")
	}
	callInfo := struct {
		In1 *elasticache.ResetCacheParameterGroupInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockResetCacheParameterGroup.Lock()
	mock.calls.ResetCacheParameterGroup = append(mock.calls.ResetCacheParameterGroup, callInfo)
	lockelasticacheClientMockResetCacheParameterGroup.Unlock()
	return mock.ResetCacheParameterGroupFunc(in1)
}

// ResetCacheParameterGroupCalls gets all the calls that were made to ResetCacheParameterGroup.
// Check the length with:
//     len(mockedelasticacheClient.ResetCacheParameterGroupCalls())
func (mock *elasticacheClientMock) ResetCacheParameterGroupCalls() []struct {
	In1 *elasticache.ResetCacheParameterGroupInput
} {
	var calls []struct {
		In1 *elasticache.ResetCacheParameterGroupInput
	}
	lockelasticacheClientMockResetCacheParameterGroup.RLock()
	calls = mock.calls.ResetCacheParameterGroup
	lockelasticacheClientMockResetCacheParameterGroup.RUnlock()
	return calls
}

// ResetCacheParameterGroupRequest calls ResetCacheParameterGroupRequestFunc.
func (mock *elasticacheClientMock) ResetCacheParameterGroupRequest(in1 *elasticache.ResetCacheParameterGroupInput) (*request.Request, *elasticache.CacheParameterGroupNameMessage) {
	if mock.ResetCacheParameterGroupRequestFunc == nil {
		panic("elasticacheClientMock.ResetCacheParameterGroupRequestFunc: method is nil but elasticacheClient.ResetCacheParameterGroupRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.ResetCacheParameterGroupInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockResetCacheParameterGroupRequest.Lock()
	mock.calls.ResetCacheParameterGroupRequest = append(mock.calls.ResetCacheParameterGroupRequest, callInfo)
	lockelasticacheClientMockResetCacheParameterGroupRequest.Unlock()
	return mock.ResetCacheParameterGroupRequestFunc(in1)
}

// ResetCacheParameterGroupRequestCalls gets all the calls that were made to ResetCacheParameterGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.ResetCacheParameterGroupRequestCalls())
func (mock *elasticacheClientMock) ResetCacheParameterGroupRequestCalls() []struct {
	In1 *elasticache.ResetCacheParameterGroupInput
} {
	var calls []struct {
		In1 *elasticache.ResetCacheParameterGroupInput
	}
	lockelasticacheClientMockResetCacheParameterGroupRequest.RLock()
	calls = mock.calls.ResetCacheParameterGroupRequest
	lockelasticacheClientMockResetCacheParameterGroupRequest.RUnlock()
	return calls
}

// ResetCacheParameterGroupWithContext calls ResetCacheParameterGroupWithContextFunc.
func (mock *elasticacheClientMock) ResetCacheParameterGroupWithContext(in1 context.Context, in2 *elasticache.ResetCacheParameterGroupInput, in3 ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error) {
	if mock.ResetCacheParameterGroupWithContextFunc == nil {
		panic("elasticacheClientMock.ResetCacheParameterGroupWithContextFunc: method is nil but elasticacheClient.ResetCacheParameterGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.ResetCacheParameterGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockResetCacheParameterGroupWithContext.Lock()
	mock.calls.ResetCacheParameterGroupWithContext = append(mock.calls.ResetCacheParameterGroupWithContext, callInfo)
	lockelasticacheClientMockResetCacheParameterGroupWithContext.Unlock()
	return mock.ResetCacheParameterGroupWithContextFunc(in1, in2, in3...)
}

// ResetCacheParameterGroupWithContextCalls gets all the calls that were made to ResetCacheParameterGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.ResetCacheParameterGroupWithContextCalls())
func (mock *elasticacheClientMock) ResetCacheParameterGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.ResetCacheParameterGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.ResetCacheParameterGroupInput
		In3 []request.Option
	}
	lockelasticacheClientMockResetCacheParameterGroupWithContext.RLock()
	calls = mock.calls.ResetCacheParameterGroupWithContext
	lockelasticacheClientMockResetCacheParameterGroupWithContext.RUnlock()
	return calls
}

// RevokeCacheSecurityGroupIngress calls RevokeCacheSecurityGroupIngressFunc.
func (mock *elasticacheClientMock) RevokeCacheSecurityGroupIngress(in1 *elasticache.RevokeCacheSecurityGroupIngressInput) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error) {
	if mock.RevokeCacheSecurityGroupIngressFunc == nil {
		panic("elasticacheClientMock.RevokeCacheSecurityGroupIngressFunc: method is nil but elasticacheClient.RevokeCacheSecurityGroupIngress was just called")
	}
	callInfo := struct {
		In1 *elasticache.RevokeCacheSecurityGroupIngressInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockRevokeCacheSecurityGroupIngress.Lock()
	mock.calls.RevokeCacheSecurityGroupIngress = append(mock.calls.RevokeCacheSecurityGroupIngress, callInfo)
	lockelasticacheClientMockRevokeCacheSecurityGroupIngress.Unlock()
	return mock.RevokeCacheSecurityGroupIngressFunc(in1)
}

// RevokeCacheSecurityGroupIngressCalls gets all the calls that were made to RevokeCacheSecurityGroupIngress.
// Check the length with:
//     len(mockedelasticacheClient.RevokeCacheSecurityGroupIngressCalls())
func (mock *elasticacheClientMock) RevokeCacheSecurityGroupIngressCalls() []struct {
	In1 *elasticache.RevokeCacheSecurityGroupIngressInput
} {
	var calls []struct {
		In1 *elasticache.RevokeCacheSecurityGroupIngressInput
	}
	lockelasticacheClientMockRevokeCacheSecurityGroupIngress.RLock()
	calls = mock.calls.RevokeCacheSecurityGroupIngress
	lockelasticacheClientMockRevokeCacheSecurityGroupIngress.RUnlock()
	return calls
}

// RevokeCacheSecurityGroupIngressRequest calls RevokeCacheSecurityGroupIngressRequestFunc.
func (mock *elasticacheClientMock) RevokeCacheSecurityGroupIngressRequest(in1 *elasticache.RevokeCacheSecurityGroupIngressInput) (*request.Request, *elasticache.RevokeCacheSecurityGroupIngressOutput) {
	if mock.RevokeCacheSecurityGroupIngressRequestFunc == nil {
		panic("elasticacheClientMock.RevokeCacheSecurityGroupIngressRequestFunc: method is nil but elasticacheClient.RevokeCacheSecurityGroupIngressRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.RevokeCacheSecurityGroupIngressInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockRevokeCacheSecurityGroupIngressRequest.Lock()
	mock.calls.RevokeCacheSecurityGroupIngressRequest = append(mock.calls.RevokeCacheSecurityGroupIngressRequest, callInfo)
	lockelasticacheClientMockRevokeCacheSecurityGroupIngressRequest.Unlock()
	return mock.RevokeCacheSecurityGroupIngressRequestFunc(in1)
}

// RevokeCacheSecurityGroupIngressRequestCalls gets all the calls that were made to RevokeCacheSecurityGroupIngressRequest.
// Check the length with:
//     len(mockedelasticacheClient.RevokeCacheSecurityGroupIngressRequestCalls())
func (mock *elasticacheClientMock) RevokeCacheSecurityGroupIngressRequestCalls() []struct {
	In1 *elasticache.RevokeCacheSecurityGroupIngressInput
} {
	var calls []struct {
		In1 *elasticache.RevokeCacheSecurityGroupIngressInput
	}
	lockelasticacheClientMockRevokeCacheSecurityGroupIngressRequest.RLock()
	calls = mock.calls.RevokeCacheSecurityGroupIngressRequest
	lockelasticacheClientMockRevokeCacheSecurityGroupIngressRequest.RUnlock()
	return calls
}

// RevokeCacheSecurityGroupIngressWithContext calls RevokeCacheSecurityGroupIngressWithContextFunc.
func (mock *elasticacheClientMock) RevokeCacheSecurityGroupIngressWithContext(in1 context.Context, in2 *elasticache.RevokeCacheSecurityGroupIngressInput, in3 ...request.Option) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error) {
	if mock.RevokeCacheSecurityGroupIngressWithContextFunc == nil {
		panic("elasticacheClientMock.RevokeCacheSecurityGroupIngressWithContextFunc: method is nil but elasticacheClient.RevokeCacheSecurityGroupIngressWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.RevokeCacheSecurityGroupIngressInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockRevokeCacheSecurityGroupIngressWithContext.Lock()
	mock.calls.RevokeCacheSecurityGroupIngressWithContext = append(mock.calls.RevokeCacheSecurityGroupIngressWithContext, callInfo)
	lockelasticacheClientMockRevokeCacheSecurityGroupIngressWithContext.Unlock()
	return mock.RevokeCacheSecurityGroupIngressWithContextFunc(in1, in2, in3...)
}

// RevokeCacheSecurityGroupIngressWithContextCalls gets all the calls that were made to RevokeCacheSecurityGroupIngressWithContext.
// Check the length with:
//     len(mockedelasticacheClient.RevokeCacheSecurityGroupIngressWithContextCalls())
func (mock *elasticacheClientMock) RevokeCacheSecurityGroupIngressWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.RevokeCacheSecurityGroupIngressInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.RevokeCacheSecurityGroupIngressInput
		In3 []request.Option
	}
	lockelasticacheClientMockRevokeCacheSecurityGroupIngressWithContext.RLock()
	calls = mock.calls.RevokeCacheSecurityGroupIngressWithContext
	lockelasticacheClientMockRevokeCacheSecurityGroupIngressWithContext.RUnlock()
	return calls
}

// StartMigration calls StartMigrationFunc.
func (mock *elasticacheClientMock) StartMigration(in1 *elasticache.StartMigrationInput) (*elasticache.StartMigrationOutput, error) {
	if mock.StartMigrationFunc == nil {
		panic("elasticacheClientMock.StartMigrationFunc: method is nil but elasticacheClient.StartMigration was just called")
	}
	callInfo := struct {
		In1 *elasticache.StartMigrationInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockStartMigration.Lock()
	mock.calls.StartMigration = append(mock.calls.StartMigration, callInfo)
	lockelasticacheClientMockStartMigration.Unlock()
	return mock.StartMigrationFunc(in1)
}

// StartMigrationCalls gets all the calls that were made to StartMigration.
// Check the length with:
//     len(mockedelasticacheClient.StartMigrationCalls())
func (mock *elasticacheClientMock) StartMigrationCalls() []struct {
	In1 *elasticache.StartMigrationInput
} {
	var calls []struct {
		In1 *elasticache.StartMigrationInput
	}
	lockelasticacheClientMockStartMigration.RLock()
	calls = mock.calls.StartMigration
	lockelasticacheClientMockStartMigration.RUnlock()
	return calls
}

// StartMigrationRequest calls StartMigrationRequestFunc.
func (mock *elasticacheClientMock) StartMigrationRequest(in1 *elasticache.StartMigrationInput) (*request.Request, *elasticache.StartMigrationOutput) {
	if mock.StartMigrationRequestFunc == nil {
		panic("elasticacheClientMock.StartMigrationRequestFunc: method is nil but elasticacheClient.StartMigrationRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.StartMigrationInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockStartMigrationRequest.Lock()
	mock.calls.StartMigrationRequest = append(mock.calls.StartMigrationRequest, callInfo)
	lockelasticacheClientMockStartMigrationRequest.Unlock()
	return mock.StartMigrationRequestFunc(in1)
}

// StartMigrationRequestCalls gets all the calls that were made to StartMigrationRequest.
// Check the length with:
//     len(mockedelasticacheClient.StartMigrationRequestCalls())
func (mock *elasticacheClientMock) StartMigrationRequestCalls() []struct {
	In1 *elasticache.StartMigrationInput
} {
	var calls []struct {
		In1 *elasticache.StartMigrationInput
	}
	lockelasticacheClientMockStartMigrationRequest.RLock()
	calls = mock.calls.StartMigrationRequest
	lockelasticacheClientMockStartMigrationRequest.RUnlock()
	return calls
}

// StartMigrationWithContext calls StartMigrationWithContextFunc.
func (mock *elasticacheClientMock) StartMigrationWithContext(in1 context.Context, in2 *elasticache.StartMigrationInput, in3 ...request.Option) (*elasticache.StartMigrationOutput, error) {
	if mock.StartMigrationWithContextFunc == nil {
		panic("elasticacheClientMock.StartMigrationWithContextFunc: method is nil but elasticacheClient.StartMigrationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.StartMigrationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockStartMigrationWithContext.Lock()
	mock.calls.StartMigrationWithContext = append(mock.calls.StartMigrationWithContext, callInfo)
	lockelasticacheClientMockStartMigrationWithContext.Unlock()
	return mock.StartMigrationWithContextFunc(in1, in2, in3...)
}

// StartMigrationWithContextCalls gets all the calls that were made to StartMigrationWithContext.
// Check the length with:
//     len(mockedelasticacheClient.StartMigrationWithContextCalls())
func (mock *elasticacheClientMock) StartMigrationWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.StartMigrationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.StartMigrationInput
		In3 []request.Option
	}
	lockelasticacheClientMockStartMigrationWithContext.RLock()
	calls = mock.calls.StartMigrationWithContext
	lockelasticacheClientMockStartMigrationWithContext.RUnlock()
	return calls
}

// TestFailover calls TestFailoverFunc.
func (mock *elasticacheClientMock) TestFailover(in1 *elasticache.TestFailoverInput) (*elasticache.TestFailoverOutput, error) {
	if mock.TestFailoverFunc == nil {
		panic("elasticacheClientMock.TestFailoverFunc: method is nil but elasticacheClient.TestFailover was just called")
	}
	callInfo := struct {
		In1 *elasticache.TestFailoverInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockTestFailover.Lock()
	mock.calls.TestFailover = append(mock.calls.TestFailover, callInfo)
	lockelasticacheClientMockTestFailover.Unlock()
	return mock.TestFailoverFunc(in1)
}

// TestFailoverCalls gets all the calls that were made to TestFailover.
// Check the length with:
//     len(mockedelasticacheClient.TestFailoverCalls())
func (mock *elasticacheClientMock) TestFailoverCalls() []struct {
	In1 *elasticache.TestFailoverInput
} {
	var calls []struct {
		In1 *elasticache.TestFailoverInput
	}
	lockelasticacheClientMockTestFailover.RLock()
	calls = mock.calls.TestFailover
	lockelasticacheClientMockTestFailover.RUnlock()
	return calls
}

// TestFailoverRequest calls TestFailoverRequestFunc.
func (mock *elasticacheClientMock) TestFailoverRequest(in1 *elasticache.TestFailoverInput) (*request.Request, *elasticache.TestFailoverOutput) {
	if mock.TestFailoverRequestFunc == nil {
		panic("elasticacheClientMock.TestFailoverRequestFunc: method is nil but elasticacheClient.TestFailoverRequest was just called")
	}
	callInfo := struct {
		In1 *elasticache.TestFailoverInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockTestFailoverRequest.Lock()
	mock.calls.TestFailoverRequest = append(mock.calls.TestFailoverRequest, callInfo)
	lockelasticacheClientMockTestFailoverRequest.Unlock()
	return mock.TestFailoverRequestFunc(in1)
}

// TestFailoverRequestCalls gets all the calls that were made to TestFailoverRequest.
// Check the length with:
//     len(mockedelasticacheClient.TestFailoverRequestCalls())
func (mock *elasticacheClientMock) TestFailoverRequestCalls() []struct {
	In1 *elasticache.TestFailoverInput
} {
	var calls []struct {
		In1 *elasticache.TestFailoverInput
	}
	lockelasticacheClientMockTestFailoverRequest.RLock()
	calls = mock.calls.TestFailoverRequest
	lockelasticacheClientMockTestFailoverRequest.RUnlock()
	return calls
}

// TestFailoverWithContext calls TestFailoverWithContextFunc.
func (mock *elasticacheClientMock) TestFailoverWithContext(in1 context.Context, in2 *elasticache.TestFailoverInput, in3 ...request.Option) (*elasticache.TestFailoverOutput, error) {
	if mock.TestFailoverWithContextFunc == nil {
		panic("elasticacheClientMock.TestFailoverWithContextFunc: method is nil but elasticacheClient.TestFailoverWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.TestFailoverInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockTestFailoverWithContext.Lock()
	mock.calls.TestFailoverWithContext = append(mock.calls.TestFailoverWithContext, callInfo)
	lockelasticacheClientMockTestFailoverWithContext.Unlock()
	return mock.TestFailoverWithContextFunc(in1, in2, in3...)
}

// TestFailoverWithContextCalls gets all the calls that were made to TestFailoverWithContext.
// Check the length with:
//     len(mockedelasticacheClient.TestFailoverWithContextCalls())
func (mock *elasticacheClientMock) TestFailoverWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.TestFailoverInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.TestFailoverInput
		In3 []request.Option
	}
	lockelasticacheClientMockTestFailoverWithContext.RLock()
	calls = mock.calls.TestFailoverWithContext
	lockelasticacheClientMockTestFailoverWithContext.RUnlock()
	return calls
}

// WaitUntilCacheClusterAvailable calls WaitUntilCacheClusterAvailableFunc.
func (mock *elasticacheClientMock) WaitUntilCacheClusterAvailable(in1 *elasticache.DescribeCacheClustersInput) error {
	if mock.WaitUntilCacheClusterAvailableFunc == nil {
		panic("elasticacheClientMock.WaitUntilCacheClusterAvailableFunc: method is nil but elasticacheClient.WaitUntilCacheClusterAvailable was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeCacheClustersInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockWaitUntilCacheClusterAvailable.Lock()
	mock.calls.WaitUntilCacheClusterAvailable = append(mock.calls.WaitUntilCacheClusterAvailable, callInfo)
	lockelasticacheClientMockWaitUntilCacheClusterAvailable.Unlock()
	return mock.WaitUntilCacheClusterAvailableFunc(in1)
}

// WaitUntilCacheClusterAvailableCalls gets all the calls that were made to WaitUntilCacheClusterAvailable.
// Check the length with:
//     len(mockedelasticacheClient.WaitUntilCacheClusterAvailableCalls())
func (mock *elasticacheClientMock) WaitUntilCacheClusterAvailableCalls() []struct {
	In1 *elasticache.DescribeCacheClustersInput
} {
	var calls []struct {
		In1 *elasticache.DescribeCacheClustersInput
	}
	lockelasticacheClientMockWaitUntilCacheClusterAvailable.RLock()
	calls = mock.calls.WaitUntilCacheClusterAvailable
	lockelasticacheClientMockWaitUntilCacheClusterAvailable.RUnlock()
	return calls
}

// WaitUntilCacheClusterAvailableWithContext calls WaitUntilCacheClusterAvailableWithContextFunc.
func (mock *elasticacheClientMock) WaitUntilCacheClusterAvailableWithContext(in1 context.Context, in2 *elasticache.DescribeCacheClustersInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilCacheClusterAvailableWithContextFunc == nil {
		panic("elasticacheClientMock.WaitUntilCacheClusterAvailableWithContextFunc: method is nil but elasticacheClient.WaitUntilCacheClusterAvailableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheClustersInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockWaitUntilCacheClusterAvailableWithContext.Lock()
	mock.calls.WaitUntilCacheClusterAvailableWithContext = append(mock.calls.WaitUntilCacheClusterAvailableWithContext, callInfo)
	lockelasticacheClientMockWaitUntilCacheClusterAvailableWithContext.Unlock()
	return mock.WaitUntilCacheClusterAvailableWithContextFunc(in1, in2, in3...)
}

// WaitUntilCacheClusterAvailableWithContextCalls gets all the calls that were made to WaitUntilCacheClusterAvailableWithContext.
// Check the length with:
//     len(mockedelasticacheClient.WaitUntilCacheClusterAvailableWithContextCalls())
func (mock *elasticacheClientMock) WaitUntilCacheClusterAvailableWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeCacheClustersInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheClustersInput
		In3 []request.WaiterOption
	}
	lockelasticacheClientMockWaitUntilCacheClusterAvailableWithContext.RLock()
	calls = mock.calls.WaitUntilCacheClusterAvailableWithContext
	lockelasticacheClientMockWaitUntilCacheClusterAvailableWithContext.RUnlock()
	return calls
}

// WaitUntilCacheClusterDeleted calls WaitUntilCacheClusterDeletedFunc.
func (mock *elasticacheClientMock) WaitUntilCacheClusterDeleted(in1 *elasticache.DescribeCacheClustersInput) error {
	if mock.WaitUntilCacheClusterDeletedFunc == nil {
		panic("elasticacheClientMock.WaitUntilCacheClusterDeletedFunc: method is nil but elasticacheClient.WaitUntilCacheClusterDeleted was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeCacheClustersInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockWaitUntilCacheClusterDeleted.Lock()
	mock.calls.WaitUntilCacheClusterDeleted = append(mock.calls.WaitUntilCacheClusterDeleted, callInfo)
	lockelasticacheClientMockWaitUntilCacheClusterDeleted.Unlock()
	return mock.WaitUntilCacheClusterDeletedFunc(in1)
}

// WaitUntilCacheClusterDeletedCalls gets all the calls that were made to WaitUntilCacheClusterDeleted.
// Check the length with:
//     len(mockedelasticacheClient.WaitUntilCacheClusterDeletedCalls())
func (mock *elasticacheClientMock) WaitUntilCacheClusterDeletedCalls() []struct {
	In1 *elasticache.DescribeCacheClustersInput
} {
	var calls []struct {
		In1 *elasticache.DescribeCacheClustersInput
	}
	lockelasticacheClientMockWaitUntilCacheClusterDeleted.RLock()
	calls = mock.calls.WaitUntilCacheClusterDeleted
	lockelasticacheClientMockWaitUntilCacheClusterDeleted.RUnlock()
	return calls
}

// WaitUntilCacheClusterDeletedWithContext calls WaitUntilCacheClusterDeletedWithContextFunc.
func (mock *elasticacheClientMock) WaitUntilCacheClusterDeletedWithContext(in1 context.Context, in2 *elasticache.DescribeCacheClustersInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilCacheClusterDeletedWithContextFunc == nil {
		panic("elasticacheClientMock.WaitUntilCacheClusterDeletedWithContextFunc: method is nil but elasticacheClient.WaitUntilCacheClusterDeletedWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheClustersInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockWaitUntilCacheClusterDeletedWithContext.Lock()
	mock.calls.WaitUntilCacheClusterDeletedWithContext = append(mock.calls.WaitUntilCacheClusterDeletedWithContext, callInfo)
	lockelasticacheClientMockWaitUntilCacheClusterDeletedWithContext.Unlock()
	return mock.WaitUntilCacheClusterDeletedWithContextFunc(in1, in2, in3...)
}

// WaitUntilCacheClusterDeletedWithContextCalls gets all the calls that were made to WaitUntilCacheClusterDeletedWithContext.
// Check the length with:
//     len(mockedelasticacheClient.WaitUntilCacheClusterDeletedWithContextCalls())
func (mock *elasticacheClientMock) WaitUntilCacheClusterDeletedWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeCacheClustersInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeCacheClustersInput
		In3 []request.WaiterOption
	}
	lockelasticacheClientMockWaitUntilCacheClusterDeletedWithContext.RLock()
	calls = mock.calls.WaitUntilCacheClusterDeletedWithContext
	lockelasticacheClientMockWaitUntilCacheClusterDeletedWithContext.RUnlock()
	return calls
}

// WaitUntilReplicationGroupAvailable calls WaitUntilReplicationGroupAvailableFunc.
func (mock *elasticacheClientMock) WaitUntilReplicationGroupAvailable(in1 *elasticache.DescribeReplicationGroupsInput) error {
	if mock.WaitUntilReplicationGroupAvailableFunc == nil {
		panic("elasticacheClientMock.WaitUntilReplicationGroupAvailableFunc: method is nil but elasticacheClient.WaitUntilReplicationGroupAvailable was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeReplicationGroupsInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockWaitUntilReplicationGroupAvailable.Lock()
	mock.calls.WaitUntilReplicationGroupAvailable = append(mock.calls.WaitUntilReplicationGroupAvailable, callInfo)
	lockelasticacheClientMockWaitUntilReplicationGroupAvailable.Unlock()
	return mock.WaitUntilReplicationGroupAvailableFunc(in1)
}

// WaitUntilReplicationGroupAvailableCalls gets all the calls that were made to WaitUntilReplicationGroupAvailable.
// Check the length with:
//     len(mockedelasticacheClient.WaitUntilReplicationGroupAvailableCalls())
func (mock *elasticacheClientMock) WaitUntilReplicationGroupAvailableCalls() []struct {
	In1 *elasticache.DescribeReplicationGroupsInput
} {
	var calls []struct {
		In1 *elasticache.DescribeReplicationGroupsInput
	}
	lockelasticacheClientMockWaitUntilReplicationGroupAvailable.RLock()
	calls = mock.calls.WaitUntilReplicationGroupAvailable
	lockelasticacheClientMockWaitUntilReplicationGroupAvailable.RUnlock()
	return calls
}

// WaitUntilReplicationGroupAvailableWithContext calls WaitUntilReplicationGroupAvailableWithContextFunc.
func (mock *elasticacheClientMock) WaitUntilReplicationGroupAvailableWithContext(in1 context.Context, in2 *elasticache.DescribeReplicationGroupsInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilReplicationGroupAvailableWithContextFunc == nil {
		panic("elasticacheClientMock.WaitUntilReplicationGroupAvailableWithContextFunc: method is nil but elasticacheClient.WaitUntilReplicationGroupAvailableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeReplicationGroupsInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockWaitUntilReplicationGroupAvailableWithContext.Lock()
	mock.calls.WaitUntilReplicationGroupAvailableWithContext = append(mock.calls.WaitUntilReplicationGroupAvailableWithContext, callInfo)
	lockelasticacheClientMockWaitUntilReplicationGroupAvailableWithContext.Unlock()
	return mock.WaitUntilReplicationGroupAvailableWithContextFunc(in1, in2, in3...)
}

// WaitUntilReplicationGroupAvailableWithContextCalls gets all the calls that were made to WaitUntilReplicationGroupAvailableWithContext.
// Check the length with:
//     len(mockedelasticacheClient.WaitUntilReplicationGroupAvailableWithContextCalls())
func (mock *elasticacheClientMock) WaitUntilReplicationGroupAvailableWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeReplicationGroupsInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeReplicationGroupsInput
		In3 []request.WaiterOption
	}
	lockelasticacheClientMockWaitUntilReplicationGroupAvailableWithContext.RLock()
	calls = mock.calls.WaitUntilReplicationGroupAvailableWithContext
	lockelasticacheClientMockWaitUntilReplicationGroupAvailableWithContext.RUnlock()
	return calls
}

// WaitUntilReplicationGroupDeleted calls WaitUntilReplicationGroupDeletedFunc.
func (mock *elasticacheClientMock) WaitUntilReplicationGroupDeleted(in1 *elasticache.DescribeReplicationGroupsInput) error {
	if mock.WaitUntilReplicationGroupDeletedFunc == nil {
		panic("elasticacheClientMock.WaitUntilReplicationGroupDeletedFunc: method is nil but elasticacheClient.WaitUntilReplicationGroupDeleted was just called")
	}
	callInfo := struct {
		In1 *elasticache.DescribeReplicationGroupsInput
	}{
		In1: in1,
	}
	lockelasticacheClientMockWaitUntilReplicationGroupDeleted.Lock()
	mock.calls.WaitUntilReplicationGroupDeleted = append(mock.calls.WaitUntilReplicationGroupDeleted, callInfo)
	lockelasticacheClientMockWaitUntilReplicationGroupDeleted.Unlock()
	return mock.WaitUntilReplicationGroupDeletedFunc(in1)
}

// WaitUntilReplicationGroupDeletedCalls gets all the calls that were made to WaitUntilReplicationGroupDeleted.
// Check the length with:
//     len(mockedelasticacheClient.WaitUntilReplicationGroupDeletedCalls())
func (mock *elasticacheClientMock) WaitUntilReplicationGroupDeletedCalls() []struct {
	In1 *elasticache.DescribeReplicationGroupsInput
} {
	var calls []struct {
		In1 *elasticache.DescribeReplicationGroupsInput
	}
	lockelasticacheClientMockWaitUntilReplicationGroupDeleted.RLock()
	calls = mock.calls.WaitUntilReplicationGroupDeleted
	lockelasticacheClientMockWaitUntilReplicationGroupDeleted.RUnlock()
	return calls
}

// WaitUntilReplicationGroupDeletedWithContext calls WaitUntilReplicationGroupDeletedWithContextFunc.
func (mock *elasticacheClientMock) WaitUntilReplicationGroupDeletedWithContext(in1 context.Context, in2 *elasticache.DescribeReplicationGroupsInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilReplicationGroupDeletedWithContextFunc == nil {
		panic("elasticacheClientMock.WaitUntilReplicationGroupDeletedWithContextFunc: method is nil but elasticacheClient.WaitUntilReplicationGroupDeletedWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *elasticache.DescribeReplicationGroupsInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockelasticacheClientMockWaitUntilReplicationGroupDeletedWithContext.Lock()
	mock.calls.WaitUntilReplicationGroupDeletedWithContext = append(mock.calls.WaitUntilReplicationGroupDeletedWithContext, callInfo)
	lockelasticacheClientMockWaitUntilReplicationGroupDeletedWithContext.Unlock()
	return mock.WaitUntilReplicationGroupDeletedWithContextFunc(in1, in2, in3...)
}

// WaitUntilReplicationGroupDeletedWithContextCalls gets all the calls that were made to WaitUntilReplicationGroupDeletedWithContext.
// Check the length with:
//     len(mockedelasticacheClient.WaitUntilReplicationGroupDeletedWithContextCalls())
func (mock *elasticacheClientMock) WaitUntilReplicationGroupDeletedWithContextCalls() []struct {
	In1 context.Context
	In2 *elasticache.DescribeReplicationGroupsInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *elasticache.DescribeReplicationGroupsInput
		In3 []request.WaiterOption
	}
	lockelasticacheClientMockWaitUntilReplicationGroupDeletedWithContext.RLock()
	calls = mock.calls.WaitUntilReplicationGroupDeletedWithContext
	lockelasticacheClientMockWaitUntilReplicationGroupDeletedWithContext.RUnlock()
	return calls
}
