// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package aws

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/ec2"
	"sync"
)

var (
	lockec2ClientMockAcceptReservedInstancesExchangeQuote                                       sync.RWMutex
	lockec2ClientMockAcceptReservedInstancesExchangeQuoteRequest                                sync.RWMutex
	lockec2ClientMockAcceptReservedInstancesExchangeQuoteWithContext                            sync.RWMutex
	lockec2ClientMockAcceptTransitGatewayPeeringAttachment                                      sync.RWMutex
	lockec2ClientMockAcceptTransitGatewayPeeringAttachmentRequest                               sync.RWMutex
	lockec2ClientMockAcceptTransitGatewayPeeringAttachmentWithContext                           sync.RWMutex
	lockec2ClientMockAcceptTransitGatewayVpcAttachment                                          sync.RWMutex
	lockec2ClientMockAcceptTransitGatewayVpcAttachmentRequest                                   sync.RWMutex
	lockec2ClientMockAcceptTransitGatewayVpcAttachmentWithContext                               sync.RWMutex
	lockec2ClientMockAcceptVpcEndpointConnections                                               sync.RWMutex
	lockec2ClientMockAcceptVpcEndpointConnectionsRequest                                        sync.RWMutex
	lockec2ClientMockAcceptVpcEndpointConnectionsWithContext                                    sync.RWMutex
	lockec2ClientMockAcceptVpcPeeringConnection                                                 sync.RWMutex
	lockec2ClientMockAcceptVpcPeeringConnectionRequest                                          sync.RWMutex
	lockec2ClientMockAcceptVpcPeeringConnectionWithContext                                      sync.RWMutex
	lockec2ClientMockAdvertiseByoipCidr                                                         sync.RWMutex
	lockec2ClientMockAdvertiseByoipCidrRequest                                                  sync.RWMutex
	lockec2ClientMockAdvertiseByoipCidrWithContext                                              sync.RWMutex
	lockec2ClientMockAllocateAddress                                                            sync.RWMutex
	lockec2ClientMockAllocateAddressRequest                                                     sync.RWMutex
	lockec2ClientMockAllocateAddressWithContext                                                 sync.RWMutex
	lockec2ClientMockAllocateHosts                                                              sync.RWMutex
	lockec2ClientMockAllocateHostsRequest                                                       sync.RWMutex
	lockec2ClientMockAllocateHostsWithContext                                                   sync.RWMutex
	lockec2ClientMockApplySecurityGroupsToClientVpnTargetNetwork                                sync.RWMutex
	lockec2ClientMockApplySecurityGroupsToClientVpnTargetNetworkRequest                         sync.RWMutex
	lockec2ClientMockApplySecurityGroupsToClientVpnTargetNetworkWithContext                     sync.RWMutex
	lockec2ClientMockAssignIpv6Addresses                                                        sync.RWMutex
	lockec2ClientMockAssignIpv6AddressesRequest                                                 sync.RWMutex
	lockec2ClientMockAssignIpv6AddressesWithContext                                             sync.RWMutex
	lockec2ClientMockAssignPrivateIpAddresses                                                   sync.RWMutex
	lockec2ClientMockAssignPrivateIpAddressesRequest                                            sync.RWMutex
	lockec2ClientMockAssignPrivateIpAddressesWithContext                                        sync.RWMutex
	lockec2ClientMockAssociateAddress                                                           sync.RWMutex
	lockec2ClientMockAssociateAddressRequest                                                    sync.RWMutex
	lockec2ClientMockAssociateAddressWithContext                                                sync.RWMutex
	lockec2ClientMockAssociateClientVpnTargetNetwork                                            sync.RWMutex
	lockec2ClientMockAssociateClientVpnTargetNetworkRequest                                     sync.RWMutex
	lockec2ClientMockAssociateClientVpnTargetNetworkWithContext                                 sync.RWMutex
	lockec2ClientMockAssociateDhcpOptions                                                       sync.RWMutex
	lockec2ClientMockAssociateDhcpOptionsRequest                                                sync.RWMutex
	lockec2ClientMockAssociateDhcpOptionsWithContext                                            sync.RWMutex
	lockec2ClientMockAssociateIamInstanceProfile                                                sync.RWMutex
	lockec2ClientMockAssociateIamInstanceProfileRequest                                         sync.RWMutex
	lockec2ClientMockAssociateIamInstanceProfileWithContext                                     sync.RWMutex
	lockec2ClientMockAssociateRouteTable                                                        sync.RWMutex
	lockec2ClientMockAssociateRouteTableRequest                                                 sync.RWMutex
	lockec2ClientMockAssociateRouteTableWithContext                                             sync.RWMutex
	lockec2ClientMockAssociateSubnetCidrBlock                                                   sync.RWMutex
	lockec2ClientMockAssociateSubnetCidrBlockRequest                                            sync.RWMutex
	lockec2ClientMockAssociateSubnetCidrBlockWithContext                                        sync.RWMutex
	lockec2ClientMockAssociateTransitGatewayMulticastDomain                                     sync.RWMutex
	lockec2ClientMockAssociateTransitGatewayMulticastDomainRequest                              sync.RWMutex
	lockec2ClientMockAssociateTransitGatewayMulticastDomainWithContext                          sync.RWMutex
	lockec2ClientMockAssociateTransitGatewayRouteTable                                          sync.RWMutex
	lockec2ClientMockAssociateTransitGatewayRouteTableRequest                                   sync.RWMutex
	lockec2ClientMockAssociateTransitGatewayRouteTableWithContext                               sync.RWMutex
	lockec2ClientMockAssociateVpcCidrBlock                                                      sync.RWMutex
	lockec2ClientMockAssociateVpcCidrBlockRequest                                               sync.RWMutex
	lockec2ClientMockAssociateVpcCidrBlockWithContext                                           sync.RWMutex
	lockec2ClientMockAttachClassicLinkVpc                                                       sync.RWMutex
	lockec2ClientMockAttachClassicLinkVpcRequest                                                sync.RWMutex
	lockec2ClientMockAttachClassicLinkVpcWithContext                                            sync.RWMutex
	lockec2ClientMockAttachInternetGateway                                                      sync.RWMutex
	lockec2ClientMockAttachInternetGatewayRequest                                               sync.RWMutex
	lockec2ClientMockAttachInternetGatewayWithContext                                           sync.RWMutex
	lockec2ClientMockAttachNetworkInterface                                                     sync.RWMutex
	lockec2ClientMockAttachNetworkInterfaceRequest                                              sync.RWMutex
	lockec2ClientMockAttachNetworkInterfaceWithContext                                          sync.RWMutex
	lockec2ClientMockAttachVolume                                                               sync.RWMutex
	lockec2ClientMockAttachVolumeRequest                                                        sync.RWMutex
	lockec2ClientMockAttachVolumeWithContext                                                    sync.RWMutex
	lockec2ClientMockAttachVpnGateway                                                           sync.RWMutex
	lockec2ClientMockAttachVpnGatewayRequest                                                    sync.RWMutex
	lockec2ClientMockAttachVpnGatewayWithContext                                                sync.RWMutex
	lockec2ClientMockAuthorizeClientVpnIngress                                                  sync.RWMutex
	lockec2ClientMockAuthorizeClientVpnIngressRequest                                           sync.RWMutex
	lockec2ClientMockAuthorizeClientVpnIngressWithContext                                       sync.RWMutex
	lockec2ClientMockAuthorizeSecurityGroupEgress                                               sync.RWMutex
	lockec2ClientMockAuthorizeSecurityGroupEgressRequest                                        sync.RWMutex
	lockec2ClientMockAuthorizeSecurityGroupEgressWithContext                                    sync.RWMutex
	lockec2ClientMockAuthorizeSecurityGroupIngress                                              sync.RWMutex
	lockec2ClientMockAuthorizeSecurityGroupIngressRequest                                       sync.RWMutex
	lockec2ClientMockAuthorizeSecurityGroupIngressWithContext                                   sync.RWMutex
	lockec2ClientMockBundleInstance                                                             sync.RWMutex
	lockec2ClientMockBundleInstanceRequest                                                      sync.RWMutex
	lockec2ClientMockBundleInstanceWithContext                                                  sync.RWMutex
	lockec2ClientMockCancelBundleTask                                                           sync.RWMutex
	lockec2ClientMockCancelBundleTaskRequest                                                    sync.RWMutex
	lockec2ClientMockCancelBundleTaskWithContext                                                sync.RWMutex
	lockec2ClientMockCancelCapacityReservation                                                  sync.RWMutex
	lockec2ClientMockCancelCapacityReservationRequest                                           sync.RWMutex
	lockec2ClientMockCancelCapacityReservationWithContext                                       sync.RWMutex
	lockec2ClientMockCancelConversionTask                                                       sync.RWMutex
	lockec2ClientMockCancelConversionTaskRequest                                                sync.RWMutex
	lockec2ClientMockCancelConversionTaskWithContext                                            sync.RWMutex
	lockec2ClientMockCancelExportTask                                                           sync.RWMutex
	lockec2ClientMockCancelExportTaskRequest                                                    sync.RWMutex
	lockec2ClientMockCancelExportTaskWithContext                                                sync.RWMutex
	lockec2ClientMockCancelImportTask                                                           sync.RWMutex
	lockec2ClientMockCancelImportTaskRequest                                                    sync.RWMutex
	lockec2ClientMockCancelImportTaskWithContext                                                sync.RWMutex
	lockec2ClientMockCancelReservedInstancesListing                                             sync.RWMutex
	lockec2ClientMockCancelReservedInstancesListingRequest                                      sync.RWMutex
	lockec2ClientMockCancelReservedInstancesListingWithContext                                  sync.RWMutex
	lockec2ClientMockCancelSpotFleetRequests                                                    sync.RWMutex
	lockec2ClientMockCancelSpotFleetRequestsRequest                                             sync.RWMutex
	lockec2ClientMockCancelSpotFleetRequestsWithContext                                         sync.RWMutex
	lockec2ClientMockCancelSpotInstanceRequests                                                 sync.RWMutex
	lockec2ClientMockCancelSpotInstanceRequestsRequest                                          sync.RWMutex
	lockec2ClientMockCancelSpotInstanceRequestsWithContext                                      sync.RWMutex
	lockec2ClientMockConfirmProductInstance                                                     sync.RWMutex
	lockec2ClientMockConfirmProductInstanceRequest                                              sync.RWMutex
	lockec2ClientMockConfirmProductInstanceWithContext                                          sync.RWMutex
	lockec2ClientMockCopyFpgaImage                                                              sync.RWMutex
	lockec2ClientMockCopyFpgaImageRequest                                                       sync.RWMutex
	lockec2ClientMockCopyFpgaImageWithContext                                                   sync.RWMutex
	lockec2ClientMockCopyImage                                                                  sync.RWMutex
	lockec2ClientMockCopyImageRequest                                                           sync.RWMutex
	lockec2ClientMockCopyImageWithContext                                                       sync.RWMutex
	lockec2ClientMockCopySnapshot                                                               sync.RWMutex
	lockec2ClientMockCopySnapshotRequest                                                        sync.RWMutex
	lockec2ClientMockCopySnapshotWithContext                                                    sync.RWMutex
	lockec2ClientMockCreateCapacityReservation                                                  sync.RWMutex
	lockec2ClientMockCreateCapacityReservationRequest                                           sync.RWMutex
	lockec2ClientMockCreateCapacityReservationWithContext                                       sync.RWMutex
	lockec2ClientMockCreateClientVpnEndpoint                                                    sync.RWMutex
	lockec2ClientMockCreateClientVpnEndpointRequest                                             sync.RWMutex
	lockec2ClientMockCreateClientVpnEndpointWithContext                                         sync.RWMutex
	lockec2ClientMockCreateClientVpnRoute                                                       sync.RWMutex
	lockec2ClientMockCreateClientVpnRouteRequest                                                sync.RWMutex
	lockec2ClientMockCreateClientVpnRouteWithContext                                            sync.RWMutex
	lockec2ClientMockCreateCustomerGateway                                                      sync.RWMutex
	lockec2ClientMockCreateCustomerGatewayRequest                                               sync.RWMutex
	lockec2ClientMockCreateCustomerGatewayWithContext                                           sync.RWMutex
	lockec2ClientMockCreateDefaultSubnet                                                        sync.RWMutex
	lockec2ClientMockCreateDefaultSubnetRequest                                                 sync.RWMutex
	lockec2ClientMockCreateDefaultSubnetWithContext                                             sync.RWMutex
	lockec2ClientMockCreateDefaultVpc                                                           sync.RWMutex
	lockec2ClientMockCreateDefaultVpcRequest                                                    sync.RWMutex
	lockec2ClientMockCreateDefaultVpcWithContext                                                sync.RWMutex
	lockec2ClientMockCreateDhcpOptions                                                          sync.RWMutex
	lockec2ClientMockCreateDhcpOptionsRequest                                                   sync.RWMutex
	lockec2ClientMockCreateDhcpOptionsWithContext                                               sync.RWMutex
	lockec2ClientMockCreateEgressOnlyInternetGateway                                            sync.RWMutex
	lockec2ClientMockCreateEgressOnlyInternetGatewayRequest                                     sync.RWMutex
	lockec2ClientMockCreateEgressOnlyInternetGatewayWithContext                                 sync.RWMutex
	lockec2ClientMockCreateFleet                                                                sync.RWMutex
	lockec2ClientMockCreateFleetRequest                                                         sync.RWMutex
	lockec2ClientMockCreateFleetWithContext                                                     sync.RWMutex
	lockec2ClientMockCreateFlowLogs                                                             sync.RWMutex
	lockec2ClientMockCreateFlowLogsRequest                                                      sync.RWMutex
	lockec2ClientMockCreateFlowLogsWithContext                                                  sync.RWMutex
	lockec2ClientMockCreateFpgaImage                                                            sync.RWMutex
	lockec2ClientMockCreateFpgaImageRequest                                                     sync.RWMutex
	lockec2ClientMockCreateFpgaImageWithContext                                                 sync.RWMutex
	lockec2ClientMockCreateImage                                                                sync.RWMutex
	lockec2ClientMockCreateImageRequest                                                         sync.RWMutex
	lockec2ClientMockCreateImageWithContext                                                     sync.RWMutex
	lockec2ClientMockCreateInstanceExportTask                                                   sync.RWMutex
	lockec2ClientMockCreateInstanceExportTaskRequest                                            sync.RWMutex
	lockec2ClientMockCreateInstanceExportTaskWithContext                                        sync.RWMutex
	lockec2ClientMockCreateInternetGateway                                                      sync.RWMutex
	lockec2ClientMockCreateInternetGatewayRequest                                               sync.RWMutex
	lockec2ClientMockCreateInternetGatewayWithContext                                           sync.RWMutex
	lockec2ClientMockCreateKeyPair                                                              sync.RWMutex
	lockec2ClientMockCreateKeyPairRequest                                                       sync.RWMutex
	lockec2ClientMockCreateKeyPairWithContext                                                   sync.RWMutex
	lockec2ClientMockCreateLaunchTemplate                                                       sync.RWMutex
	lockec2ClientMockCreateLaunchTemplateRequest                                                sync.RWMutex
	lockec2ClientMockCreateLaunchTemplateVersion                                                sync.RWMutex
	lockec2ClientMockCreateLaunchTemplateVersionRequest                                         sync.RWMutex
	lockec2ClientMockCreateLaunchTemplateVersionWithContext                                     sync.RWMutex
	lockec2ClientMockCreateLaunchTemplateWithContext                                            sync.RWMutex
	lockec2ClientMockCreateLocalGatewayRoute                                                    sync.RWMutex
	lockec2ClientMockCreateLocalGatewayRouteRequest                                             sync.RWMutex
	lockec2ClientMockCreateLocalGatewayRouteTableVpcAssociation                                 sync.RWMutex
	lockec2ClientMockCreateLocalGatewayRouteTableVpcAssociationRequest                          sync.RWMutex
	lockec2ClientMockCreateLocalGatewayRouteTableVpcAssociationWithContext                      sync.RWMutex
	lockec2ClientMockCreateLocalGatewayRouteWithContext                                         sync.RWMutex
	lockec2ClientMockCreateNatGateway                                                           sync.RWMutex
	lockec2ClientMockCreateNatGatewayRequest                                                    sync.RWMutex
	lockec2ClientMockCreateNatGatewayWithContext                                                sync.RWMutex
	lockec2ClientMockCreateNetworkAcl                                                           sync.RWMutex
	lockec2ClientMockCreateNetworkAclEntry                                                      sync.RWMutex
	lockec2ClientMockCreateNetworkAclEntryRequest                                               sync.RWMutex
	lockec2ClientMockCreateNetworkAclEntryWithContext                                           sync.RWMutex
	lockec2ClientMockCreateNetworkAclRequest                                                    sync.RWMutex
	lockec2ClientMockCreateNetworkAclWithContext                                                sync.RWMutex
	lockec2ClientMockCreateNetworkInterface                                                     sync.RWMutex
	lockec2ClientMockCreateNetworkInterfacePermission                                           sync.RWMutex
	lockec2ClientMockCreateNetworkInterfacePermissionRequest                                    sync.RWMutex
	lockec2ClientMockCreateNetworkInterfacePermissionWithContext                                sync.RWMutex
	lockec2ClientMockCreateNetworkInterfaceRequest                                              sync.RWMutex
	lockec2ClientMockCreateNetworkInterfaceWithContext                                          sync.RWMutex
	lockec2ClientMockCreatePlacementGroup                                                       sync.RWMutex
	lockec2ClientMockCreatePlacementGroupRequest                                                sync.RWMutex
	lockec2ClientMockCreatePlacementGroupWithContext                                            sync.RWMutex
	lockec2ClientMockCreateReservedInstancesListing                                             sync.RWMutex
	lockec2ClientMockCreateReservedInstancesListingRequest                                      sync.RWMutex
	lockec2ClientMockCreateReservedInstancesListingWithContext                                  sync.RWMutex
	lockec2ClientMockCreateRoute                                                                sync.RWMutex
	lockec2ClientMockCreateRouteRequest                                                         sync.RWMutex
	lockec2ClientMockCreateRouteTable                                                           sync.RWMutex
	lockec2ClientMockCreateRouteTableRequest                                                    sync.RWMutex
	lockec2ClientMockCreateRouteTableWithContext                                                sync.RWMutex
	lockec2ClientMockCreateRouteWithContext                                                     sync.RWMutex
	lockec2ClientMockCreateSecurityGroup                                                        sync.RWMutex
	lockec2ClientMockCreateSecurityGroupRequest                                                 sync.RWMutex
	lockec2ClientMockCreateSecurityGroupWithContext                                             sync.RWMutex
	lockec2ClientMockCreateSnapshot                                                             sync.RWMutex
	lockec2ClientMockCreateSnapshotRequest                                                      sync.RWMutex
	lockec2ClientMockCreateSnapshotWithContext                                                  sync.RWMutex
	lockec2ClientMockCreateSnapshots                                                            sync.RWMutex
	lockec2ClientMockCreateSnapshotsRequest                                                     sync.RWMutex
	lockec2ClientMockCreateSnapshotsWithContext                                                 sync.RWMutex
	lockec2ClientMockCreateSpotDatafeedSubscription                                             sync.RWMutex
	lockec2ClientMockCreateSpotDatafeedSubscriptionRequest                                      sync.RWMutex
	lockec2ClientMockCreateSpotDatafeedSubscriptionWithContext                                  sync.RWMutex
	lockec2ClientMockCreateSubnet                                                               sync.RWMutex
	lockec2ClientMockCreateSubnetRequest                                                        sync.RWMutex
	lockec2ClientMockCreateSubnetWithContext                                                    sync.RWMutex
	lockec2ClientMockCreateTags                                                                 sync.RWMutex
	lockec2ClientMockCreateTagsRequest                                                          sync.RWMutex
	lockec2ClientMockCreateTagsWithContext                                                      sync.RWMutex
	lockec2ClientMockCreateTrafficMirrorFilter                                                  sync.RWMutex
	lockec2ClientMockCreateTrafficMirrorFilterRequest                                           sync.RWMutex
	lockec2ClientMockCreateTrafficMirrorFilterRule                                              sync.RWMutex
	lockec2ClientMockCreateTrafficMirrorFilterRuleRequest                                       sync.RWMutex
	lockec2ClientMockCreateTrafficMirrorFilterRuleWithContext                                   sync.RWMutex
	lockec2ClientMockCreateTrafficMirrorFilterWithContext                                       sync.RWMutex
	lockec2ClientMockCreateTrafficMirrorSession                                                 sync.RWMutex
	lockec2ClientMockCreateTrafficMirrorSessionRequest                                          sync.RWMutex
	lockec2ClientMockCreateTrafficMirrorSessionWithContext                                      sync.RWMutex
	lockec2ClientMockCreateTrafficMirrorTarget                                                  sync.RWMutex
	lockec2ClientMockCreateTrafficMirrorTargetRequest                                           sync.RWMutex
	lockec2ClientMockCreateTrafficMirrorTargetWithContext                                       sync.RWMutex
	lockec2ClientMockCreateTransitGateway                                                       sync.RWMutex
	lockec2ClientMockCreateTransitGatewayMulticastDomain                                        sync.RWMutex
	lockec2ClientMockCreateTransitGatewayMulticastDomainRequest                                 sync.RWMutex
	lockec2ClientMockCreateTransitGatewayMulticastDomainWithContext                             sync.RWMutex
	lockec2ClientMockCreateTransitGatewayPeeringAttachment                                      sync.RWMutex
	lockec2ClientMockCreateTransitGatewayPeeringAttachmentRequest                               sync.RWMutex
	lockec2ClientMockCreateTransitGatewayPeeringAttachmentWithContext                           sync.RWMutex
	lockec2ClientMockCreateTransitGatewayRequest                                                sync.RWMutex
	lockec2ClientMockCreateTransitGatewayRoute                                                  sync.RWMutex
	lockec2ClientMockCreateTransitGatewayRouteRequest                                           sync.RWMutex
	lockec2ClientMockCreateTransitGatewayRouteTable                                             sync.RWMutex
	lockec2ClientMockCreateTransitGatewayRouteTableRequest                                      sync.RWMutex
	lockec2ClientMockCreateTransitGatewayRouteTableWithContext                                  sync.RWMutex
	lockec2ClientMockCreateTransitGatewayRouteWithContext                                       sync.RWMutex
	lockec2ClientMockCreateTransitGatewayVpcAttachment                                          sync.RWMutex
	lockec2ClientMockCreateTransitGatewayVpcAttachmentRequest                                   sync.RWMutex
	lockec2ClientMockCreateTransitGatewayVpcAttachmentWithContext                               sync.RWMutex
	lockec2ClientMockCreateTransitGatewayWithContext                                            sync.RWMutex
	lockec2ClientMockCreateVolume                                                               sync.RWMutex
	lockec2ClientMockCreateVolumeRequest                                                        sync.RWMutex
	lockec2ClientMockCreateVolumeWithContext                                                    sync.RWMutex
	lockec2ClientMockCreateVpc                                                                  sync.RWMutex
	lockec2ClientMockCreateVpcEndpoint                                                          sync.RWMutex
	lockec2ClientMockCreateVpcEndpointConnectionNotification                                    sync.RWMutex
	lockec2ClientMockCreateVpcEndpointConnectionNotificationRequest                             sync.RWMutex
	lockec2ClientMockCreateVpcEndpointConnectionNotificationWithContext                         sync.RWMutex
	lockec2ClientMockCreateVpcEndpointRequest                                                   sync.RWMutex
	lockec2ClientMockCreateVpcEndpointServiceConfiguration                                      sync.RWMutex
	lockec2ClientMockCreateVpcEndpointServiceConfigurationRequest                               sync.RWMutex
	lockec2ClientMockCreateVpcEndpointServiceConfigurationWithContext                           sync.RWMutex
	lockec2ClientMockCreateVpcEndpointWithContext                                               sync.RWMutex
	lockec2ClientMockCreateVpcPeeringConnection                                                 sync.RWMutex
	lockec2ClientMockCreateVpcPeeringConnectionRequest                                          sync.RWMutex
	lockec2ClientMockCreateVpcPeeringConnectionWithContext                                      sync.RWMutex
	lockec2ClientMockCreateVpcRequest                                                           sync.RWMutex
	lockec2ClientMockCreateVpcWithContext                                                       sync.RWMutex
	lockec2ClientMockCreateVpnConnection                                                        sync.RWMutex
	lockec2ClientMockCreateVpnConnectionRequest                                                 sync.RWMutex
	lockec2ClientMockCreateVpnConnectionRoute                                                   sync.RWMutex
	lockec2ClientMockCreateVpnConnectionRouteRequest                                            sync.RWMutex
	lockec2ClientMockCreateVpnConnectionRouteWithContext                                        sync.RWMutex
	lockec2ClientMockCreateVpnConnectionWithContext                                             sync.RWMutex
	lockec2ClientMockCreateVpnGateway                                                           sync.RWMutex
	lockec2ClientMockCreateVpnGatewayRequest                                                    sync.RWMutex
	lockec2ClientMockCreateVpnGatewayWithContext                                                sync.RWMutex
	lockec2ClientMockDeleteClientVpnEndpoint                                                    sync.RWMutex
	lockec2ClientMockDeleteClientVpnEndpointRequest                                             sync.RWMutex
	lockec2ClientMockDeleteClientVpnEndpointWithContext                                         sync.RWMutex
	lockec2ClientMockDeleteClientVpnRoute                                                       sync.RWMutex
	lockec2ClientMockDeleteClientVpnRouteRequest                                                sync.RWMutex
	lockec2ClientMockDeleteClientVpnRouteWithContext                                            sync.RWMutex
	lockec2ClientMockDeleteCustomerGateway                                                      sync.RWMutex
	lockec2ClientMockDeleteCustomerGatewayRequest                                               sync.RWMutex
	lockec2ClientMockDeleteCustomerGatewayWithContext                                           sync.RWMutex
	lockec2ClientMockDeleteDhcpOptions                                                          sync.RWMutex
	lockec2ClientMockDeleteDhcpOptionsRequest                                                   sync.RWMutex
	lockec2ClientMockDeleteDhcpOptionsWithContext                                               sync.RWMutex
	lockec2ClientMockDeleteEgressOnlyInternetGateway                                            sync.RWMutex
	lockec2ClientMockDeleteEgressOnlyInternetGatewayRequest                                     sync.RWMutex
	lockec2ClientMockDeleteEgressOnlyInternetGatewayWithContext                                 sync.RWMutex
	lockec2ClientMockDeleteFleets                                                               sync.RWMutex
	lockec2ClientMockDeleteFleetsRequest                                                        sync.RWMutex
	lockec2ClientMockDeleteFleetsWithContext                                                    sync.RWMutex
	lockec2ClientMockDeleteFlowLogs                                                             sync.RWMutex
	lockec2ClientMockDeleteFlowLogsRequest                                                      sync.RWMutex
	lockec2ClientMockDeleteFlowLogsWithContext                                                  sync.RWMutex
	lockec2ClientMockDeleteFpgaImage                                                            sync.RWMutex
	lockec2ClientMockDeleteFpgaImageRequest                                                     sync.RWMutex
	lockec2ClientMockDeleteFpgaImageWithContext                                                 sync.RWMutex
	lockec2ClientMockDeleteInternetGateway                                                      sync.RWMutex
	lockec2ClientMockDeleteInternetGatewayRequest                                               sync.RWMutex
	lockec2ClientMockDeleteInternetGatewayWithContext                                           sync.RWMutex
	lockec2ClientMockDeleteKeyPair                                                              sync.RWMutex
	lockec2ClientMockDeleteKeyPairRequest                                                       sync.RWMutex
	lockec2ClientMockDeleteKeyPairWithContext                                                   sync.RWMutex
	lockec2ClientMockDeleteLaunchTemplate                                                       sync.RWMutex
	lockec2ClientMockDeleteLaunchTemplateRequest                                                sync.RWMutex
	lockec2ClientMockDeleteLaunchTemplateVersions                                               sync.RWMutex
	lockec2ClientMockDeleteLaunchTemplateVersionsRequest                                        sync.RWMutex
	lockec2ClientMockDeleteLaunchTemplateVersionsWithContext                                    sync.RWMutex
	lockec2ClientMockDeleteLaunchTemplateWithContext                                            sync.RWMutex
	lockec2ClientMockDeleteLocalGatewayRoute                                                    sync.RWMutex
	lockec2ClientMockDeleteLocalGatewayRouteRequest                                             sync.RWMutex
	lockec2ClientMockDeleteLocalGatewayRouteTableVpcAssociation                                 sync.RWMutex
	lockec2ClientMockDeleteLocalGatewayRouteTableVpcAssociationRequest                          sync.RWMutex
	lockec2ClientMockDeleteLocalGatewayRouteTableVpcAssociationWithContext                      sync.RWMutex
	lockec2ClientMockDeleteLocalGatewayRouteWithContext                                         sync.RWMutex
	lockec2ClientMockDeleteNatGateway                                                           sync.RWMutex
	lockec2ClientMockDeleteNatGatewayRequest                                                    sync.RWMutex
	lockec2ClientMockDeleteNatGatewayWithContext                                                sync.RWMutex
	lockec2ClientMockDeleteNetworkAcl                                                           sync.RWMutex
	lockec2ClientMockDeleteNetworkAclEntry                                                      sync.RWMutex
	lockec2ClientMockDeleteNetworkAclEntryRequest                                               sync.RWMutex
	lockec2ClientMockDeleteNetworkAclEntryWithContext                                           sync.RWMutex
	lockec2ClientMockDeleteNetworkAclRequest                                                    sync.RWMutex
	lockec2ClientMockDeleteNetworkAclWithContext                                                sync.RWMutex
	lockec2ClientMockDeleteNetworkInterface                                                     sync.RWMutex
	lockec2ClientMockDeleteNetworkInterfacePermission                                           sync.RWMutex
	lockec2ClientMockDeleteNetworkInterfacePermissionRequest                                    sync.RWMutex
	lockec2ClientMockDeleteNetworkInterfacePermissionWithContext                                sync.RWMutex
	lockec2ClientMockDeleteNetworkInterfaceRequest                                              sync.RWMutex
	lockec2ClientMockDeleteNetworkInterfaceWithContext                                          sync.RWMutex
	lockec2ClientMockDeletePlacementGroup                                                       sync.RWMutex
	lockec2ClientMockDeletePlacementGroupRequest                                                sync.RWMutex
	lockec2ClientMockDeletePlacementGroupWithContext                                            sync.RWMutex
	lockec2ClientMockDeleteQueuedReservedInstances                                              sync.RWMutex
	lockec2ClientMockDeleteQueuedReservedInstancesRequest                                       sync.RWMutex
	lockec2ClientMockDeleteQueuedReservedInstancesWithContext                                   sync.RWMutex
	lockec2ClientMockDeleteRoute                                                                sync.RWMutex
	lockec2ClientMockDeleteRouteRequest                                                         sync.RWMutex
	lockec2ClientMockDeleteRouteTable                                                           sync.RWMutex
	lockec2ClientMockDeleteRouteTableRequest                                                    sync.RWMutex
	lockec2ClientMockDeleteRouteTableWithContext                                                sync.RWMutex
	lockec2ClientMockDeleteRouteWithContext                                                     sync.RWMutex
	lockec2ClientMockDeleteSecurityGroup                                                        sync.RWMutex
	lockec2ClientMockDeleteSecurityGroupRequest                                                 sync.RWMutex
	lockec2ClientMockDeleteSecurityGroupWithContext                                             sync.RWMutex
	lockec2ClientMockDeleteSnapshot                                                             sync.RWMutex
	lockec2ClientMockDeleteSnapshotRequest                                                      sync.RWMutex
	lockec2ClientMockDeleteSnapshotWithContext                                                  sync.RWMutex
	lockec2ClientMockDeleteSpotDatafeedSubscription                                             sync.RWMutex
	lockec2ClientMockDeleteSpotDatafeedSubscriptionRequest                                      sync.RWMutex
	lockec2ClientMockDeleteSpotDatafeedSubscriptionWithContext                                  sync.RWMutex
	lockec2ClientMockDeleteSubnet                                                               sync.RWMutex
	lockec2ClientMockDeleteSubnetRequest                                                        sync.RWMutex
	lockec2ClientMockDeleteSubnetWithContext                                                    sync.RWMutex
	lockec2ClientMockDeleteTags                                                                 sync.RWMutex
	lockec2ClientMockDeleteTagsRequest                                                          sync.RWMutex
	lockec2ClientMockDeleteTagsWithContext                                                      sync.RWMutex
	lockec2ClientMockDeleteTrafficMirrorFilter                                                  sync.RWMutex
	lockec2ClientMockDeleteTrafficMirrorFilterRequest                                           sync.RWMutex
	lockec2ClientMockDeleteTrafficMirrorFilterRule                                              sync.RWMutex
	lockec2ClientMockDeleteTrafficMirrorFilterRuleRequest                                       sync.RWMutex
	lockec2ClientMockDeleteTrafficMirrorFilterRuleWithContext                                   sync.RWMutex
	lockec2ClientMockDeleteTrafficMirrorFilterWithContext                                       sync.RWMutex
	lockec2ClientMockDeleteTrafficMirrorSession                                                 sync.RWMutex
	lockec2ClientMockDeleteTrafficMirrorSessionRequest                                          sync.RWMutex
	lockec2ClientMockDeleteTrafficMirrorSessionWithContext                                      sync.RWMutex
	lockec2ClientMockDeleteTrafficMirrorTarget                                                  sync.RWMutex
	lockec2ClientMockDeleteTrafficMirrorTargetRequest                                           sync.RWMutex
	lockec2ClientMockDeleteTrafficMirrorTargetWithContext                                       sync.RWMutex
	lockec2ClientMockDeleteTransitGateway                                                       sync.RWMutex
	lockec2ClientMockDeleteTransitGatewayMulticastDomain                                        sync.RWMutex
	lockec2ClientMockDeleteTransitGatewayMulticastDomainRequest                                 sync.RWMutex
	lockec2ClientMockDeleteTransitGatewayMulticastDomainWithContext                             sync.RWMutex
	lockec2ClientMockDeleteTransitGatewayPeeringAttachment                                      sync.RWMutex
	lockec2ClientMockDeleteTransitGatewayPeeringAttachmentRequest                               sync.RWMutex
	lockec2ClientMockDeleteTransitGatewayPeeringAttachmentWithContext                           sync.RWMutex
	lockec2ClientMockDeleteTransitGatewayRequest                                                sync.RWMutex
	lockec2ClientMockDeleteTransitGatewayRoute                                                  sync.RWMutex
	lockec2ClientMockDeleteTransitGatewayRouteRequest                                           sync.RWMutex
	lockec2ClientMockDeleteTransitGatewayRouteTable                                             sync.RWMutex
	lockec2ClientMockDeleteTransitGatewayRouteTableRequest                                      sync.RWMutex
	lockec2ClientMockDeleteTransitGatewayRouteTableWithContext                                  sync.RWMutex
	lockec2ClientMockDeleteTransitGatewayRouteWithContext                                       sync.RWMutex
	lockec2ClientMockDeleteTransitGatewayVpcAttachment                                          sync.RWMutex
	lockec2ClientMockDeleteTransitGatewayVpcAttachmentRequest                                   sync.RWMutex
	lockec2ClientMockDeleteTransitGatewayVpcAttachmentWithContext                               sync.RWMutex
	lockec2ClientMockDeleteTransitGatewayWithContext                                            sync.RWMutex
	lockec2ClientMockDeleteVolume                                                               sync.RWMutex
	lockec2ClientMockDeleteVolumeRequest                                                        sync.RWMutex
	lockec2ClientMockDeleteVolumeWithContext                                                    sync.RWMutex
	lockec2ClientMockDeleteVpc                                                                  sync.RWMutex
	lockec2ClientMockDeleteVpcEndpointConnectionNotifications                                   sync.RWMutex
	lockec2ClientMockDeleteVpcEndpointConnectionNotificationsRequest                            sync.RWMutex
	lockec2ClientMockDeleteVpcEndpointConnectionNotificationsWithContext                        sync.RWMutex
	lockec2ClientMockDeleteVpcEndpointServiceConfigurations                                     sync.RWMutex
	lockec2ClientMockDeleteVpcEndpointServiceConfigurationsRequest                              sync.RWMutex
	lockec2ClientMockDeleteVpcEndpointServiceConfigurationsWithContext                          sync.RWMutex
	lockec2ClientMockDeleteVpcEndpoints                                                         sync.RWMutex
	lockec2ClientMockDeleteVpcEndpointsRequest                                                  sync.RWMutex
	lockec2ClientMockDeleteVpcEndpointsWithContext                                              sync.RWMutex
	lockec2ClientMockDeleteVpcPeeringConnection                                                 sync.RWMutex
	lockec2ClientMockDeleteVpcPeeringConnectionRequest                                          sync.RWMutex
	lockec2ClientMockDeleteVpcPeeringConnectionWithContext                                      sync.RWMutex
	lockec2ClientMockDeleteVpcRequest                                                           sync.RWMutex
	lockec2ClientMockDeleteVpcWithContext                                                       sync.RWMutex
	lockec2ClientMockDeleteVpnConnection                                                        sync.RWMutex
	lockec2ClientMockDeleteVpnConnectionRequest                                                 sync.RWMutex
	lockec2ClientMockDeleteVpnConnectionRoute                                                   sync.RWMutex
	lockec2ClientMockDeleteVpnConnectionRouteRequest                                            sync.RWMutex
	lockec2ClientMockDeleteVpnConnectionRouteWithContext                                        sync.RWMutex
	lockec2ClientMockDeleteVpnConnectionWithContext                                             sync.RWMutex
	lockec2ClientMockDeleteVpnGateway                                                           sync.RWMutex
	lockec2ClientMockDeleteVpnGatewayRequest                                                    sync.RWMutex
	lockec2ClientMockDeleteVpnGatewayWithContext                                                sync.RWMutex
	lockec2ClientMockDeprovisionByoipCidr                                                       sync.RWMutex
	lockec2ClientMockDeprovisionByoipCidrRequest                                                sync.RWMutex
	lockec2ClientMockDeprovisionByoipCidrWithContext                                            sync.RWMutex
	lockec2ClientMockDeregisterImage                                                            sync.RWMutex
	lockec2ClientMockDeregisterImageRequest                                                     sync.RWMutex
	lockec2ClientMockDeregisterImageWithContext                                                 sync.RWMutex
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupMembers                              sync.RWMutex
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupMembersRequest                       sync.RWMutex
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupMembersWithContext                   sync.RWMutex
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupSources                              sync.RWMutex
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupSourcesRequest                       sync.RWMutex
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupSourcesWithContext                   sync.RWMutex
	lockec2ClientMockDescribeAccountAttributes                                                  sync.RWMutex
	lockec2ClientMockDescribeAccountAttributesRequest                                           sync.RWMutex
	lockec2ClientMockDescribeAccountAttributesWithContext                                       sync.RWMutex
	lockec2ClientMockDescribeAddresses                                                          sync.RWMutex
	lockec2ClientMockDescribeAddressesRequest                                                   sync.RWMutex
	lockec2ClientMockDescribeAddressesWithContext                                               sync.RWMutex
	lockec2ClientMockDescribeAggregateIdFormat                                                  sync.RWMutex
	lockec2ClientMockDescribeAggregateIdFormatRequest                                           sync.RWMutex
	lockec2ClientMockDescribeAggregateIdFormatWithContext                                       sync.RWMutex
	lockec2ClientMockDescribeAvailabilityZones                                                  sync.RWMutex
	lockec2ClientMockDescribeAvailabilityZonesRequest                                           sync.RWMutex
	lockec2ClientMockDescribeAvailabilityZonesWithContext                                       sync.RWMutex
	lockec2ClientMockDescribeBundleTasks                                                        sync.RWMutex
	lockec2ClientMockDescribeBundleTasksRequest                                                 sync.RWMutex
	lockec2ClientMockDescribeBundleTasksWithContext                                             sync.RWMutex
	lockec2ClientMockDescribeByoipCidrs                                                         sync.RWMutex
	lockec2ClientMockDescribeByoipCidrsPages                                                    sync.RWMutex
	lockec2ClientMockDescribeByoipCidrsPagesWithContext                                         sync.RWMutex
	lockec2ClientMockDescribeByoipCidrsRequest                                                  sync.RWMutex
	lockec2ClientMockDescribeByoipCidrsWithContext                                              sync.RWMutex
	lockec2ClientMockDescribeCapacityReservations                                               sync.RWMutex
	lockec2ClientMockDescribeCapacityReservationsPages                                          sync.RWMutex
	lockec2ClientMockDescribeCapacityReservationsPagesWithContext                               sync.RWMutex
	lockec2ClientMockDescribeCapacityReservationsRequest                                        sync.RWMutex
	lockec2ClientMockDescribeCapacityReservationsWithContext                                    sync.RWMutex
	lockec2ClientMockDescribeClassicLinkInstances                                               sync.RWMutex
	lockec2ClientMockDescribeClassicLinkInstancesPages                                          sync.RWMutex
	lockec2ClientMockDescribeClassicLinkInstancesPagesWithContext                               sync.RWMutex
	lockec2ClientMockDescribeClassicLinkInstancesRequest                                        sync.RWMutex
	lockec2ClientMockDescribeClassicLinkInstancesWithContext                                    sync.RWMutex
	lockec2ClientMockDescribeClientVpnAuthorizationRules                                        sync.RWMutex
	lockec2ClientMockDescribeClientVpnAuthorizationRulesPages                                   sync.RWMutex
	lockec2ClientMockDescribeClientVpnAuthorizationRulesPagesWithContext                        sync.RWMutex
	lockec2ClientMockDescribeClientVpnAuthorizationRulesRequest                                 sync.RWMutex
	lockec2ClientMockDescribeClientVpnAuthorizationRulesWithContext                             sync.RWMutex
	lockec2ClientMockDescribeClientVpnConnections                                               sync.RWMutex
	lockec2ClientMockDescribeClientVpnConnectionsPages                                          sync.RWMutex
	lockec2ClientMockDescribeClientVpnConnectionsPagesWithContext                               sync.RWMutex
	lockec2ClientMockDescribeClientVpnConnectionsRequest                                        sync.RWMutex
	lockec2ClientMockDescribeClientVpnConnectionsWithContext                                    sync.RWMutex
	lockec2ClientMockDescribeClientVpnEndpoints                                                 sync.RWMutex
	lockec2ClientMockDescribeClientVpnEndpointsPages                                            sync.RWMutex
	lockec2ClientMockDescribeClientVpnEndpointsPagesWithContext                                 sync.RWMutex
	lockec2ClientMockDescribeClientVpnEndpointsRequest                                          sync.RWMutex
	lockec2ClientMockDescribeClientVpnEndpointsWithContext                                      sync.RWMutex
	lockec2ClientMockDescribeClientVpnRoutes                                                    sync.RWMutex
	lockec2ClientMockDescribeClientVpnRoutesPages                                               sync.RWMutex
	lockec2ClientMockDescribeClientVpnRoutesPagesWithContext                                    sync.RWMutex
	lockec2ClientMockDescribeClientVpnRoutesRequest                                             sync.RWMutex
	lockec2ClientMockDescribeClientVpnRoutesWithContext                                         sync.RWMutex
	lockec2ClientMockDescribeClientVpnTargetNetworks                                            sync.RWMutex
	lockec2ClientMockDescribeClientVpnTargetNetworksPages                                       sync.RWMutex
	lockec2ClientMockDescribeClientVpnTargetNetworksPagesWithContext                            sync.RWMutex
	lockec2ClientMockDescribeClientVpnTargetNetworksRequest                                     sync.RWMutex
	lockec2ClientMockDescribeClientVpnTargetNetworksWithContext                                 sync.RWMutex
	lockec2ClientMockDescribeCoipPools                                                          sync.RWMutex
	lockec2ClientMockDescribeCoipPoolsRequest                                                   sync.RWMutex
	lockec2ClientMockDescribeCoipPoolsWithContext                                               sync.RWMutex
	lockec2ClientMockDescribeConversionTasks                                                    sync.RWMutex
	lockec2ClientMockDescribeConversionTasksRequest                                             sync.RWMutex
	lockec2ClientMockDescribeConversionTasksWithContext                                         sync.RWMutex
	lockec2ClientMockDescribeCustomerGateways                                                   sync.RWMutex
	lockec2ClientMockDescribeCustomerGatewaysRequest                                            sync.RWMutex
	lockec2ClientMockDescribeCustomerGatewaysWithContext                                        sync.RWMutex
	lockec2ClientMockDescribeDhcpOptions                                                        sync.RWMutex
	lockec2ClientMockDescribeDhcpOptionsPages                                                   sync.RWMutex
	lockec2ClientMockDescribeDhcpOptionsPagesWithContext                                        sync.RWMutex
	lockec2ClientMockDescribeDhcpOptionsRequest                                                 sync.RWMutex
	lockec2ClientMockDescribeDhcpOptionsWithContext                                             sync.RWMutex
	lockec2ClientMockDescribeEgressOnlyInternetGateways                                         sync.RWMutex
	lockec2ClientMockDescribeEgressOnlyInternetGatewaysPages                                    sync.RWMutex
	lockec2ClientMockDescribeEgressOnlyInternetGatewaysPagesWithContext                         sync.RWMutex
	lockec2ClientMockDescribeEgressOnlyInternetGatewaysRequest                                  sync.RWMutex
	lockec2ClientMockDescribeEgressOnlyInternetGatewaysWithContext                              sync.RWMutex
	lockec2ClientMockDescribeElasticGpus                                                        sync.RWMutex
	lockec2ClientMockDescribeElasticGpusRequest                                                 sync.RWMutex
	lockec2ClientMockDescribeElasticGpusWithContext                                             sync.RWMutex
	lockec2ClientMockDescribeExportImageTasks                                                   sync.RWMutex
	lockec2ClientMockDescribeExportImageTasksPages                                              sync.RWMutex
	lockec2ClientMockDescribeExportImageTasksPagesWithContext                                   sync.RWMutex
	lockec2ClientMockDescribeExportImageTasksRequest                                            sync.RWMutex
	lockec2ClientMockDescribeExportImageTasksWithContext                                        sync.RWMutex
	lockec2ClientMockDescribeExportTasks                                                        sync.RWMutex
	lockec2ClientMockDescribeExportTasksRequest                                                 sync.RWMutex
	lockec2ClientMockDescribeExportTasksWithContext                                             sync.RWMutex
	lockec2ClientMockDescribeFastSnapshotRestores                                               sync.RWMutex
	lockec2ClientMockDescribeFastSnapshotRestoresPages                                          sync.RWMutex
	lockec2ClientMockDescribeFastSnapshotRestoresPagesWithContext                               sync.RWMutex
	lockec2ClientMockDescribeFastSnapshotRestoresRequest                                        sync.RWMutex
	lockec2ClientMockDescribeFastSnapshotRestoresWithContext                                    sync.RWMutex
	lockec2ClientMockDescribeFleetHistory                                                       sync.RWMutex
	lockec2ClientMockDescribeFleetHistoryRequest                                                sync.RWMutex
	lockec2ClientMockDescribeFleetHistoryWithContext                                            sync.RWMutex
	lockec2ClientMockDescribeFleetInstances                                                     sync.RWMutex
	lockec2ClientMockDescribeFleetInstancesRequest                                              sync.RWMutex
	lockec2ClientMockDescribeFleetInstancesWithContext                                          sync.RWMutex
	lockec2ClientMockDescribeFleets                                                             sync.RWMutex
	lockec2ClientMockDescribeFleetsPages                                                        sync.RWMutex
	lockec2ClientMockDescribeFleetsPagesWithContext                                             sync.RWMutex
	lockec2ClientMockDescribeFleetsRequest                                                      sync.RWMutex
	lockec2ClientMockDescribeFleetsWithContext                                                  sync.RWMutex
	lockec2ClientMockDescribeFlowLogs                                                           sync.RWMutex
	lockec2ClientMockDescribeFlowLogsPages                                                      sync.RWMutex
	lockec2ClientMockDescribeFlowLogsPagesWithContext                                           sync.RWMutex
	lockec2ClientMockDescribeFlowLogsRequest                                                    sync.RWMutex
	lockec2ClientMockDescribeFlowLogsWithContext                                                sync.RWMutex
	lockec2ClientMockDescribeFpgaImageAttribute                                                 sync.RWMutex
	lockec2ClientMockDescribeFpgaImageAttributeRequest                                          sync.RWMutex
	lockec2ClientMockDescribeFpgaImageAttributeWithContext                                      sync.RWMutex
	lockec2ClientMockDescribeFpgaImages                                                         sync.RWMutex
	lockec2ClientMockDescribeFpgaImagesPages                                                    sync.RWMutex
	lockec2ClientMockDescribeFpgaImagesPagesWithContext                                         sync.RWMutex
	lockec2ClientMockDescribeFpgaImagesRequest                                                  sync.RWMutex
	lockec2ClientMockDescribeFpgaImagesWithContext                                              sync.RWMutex
	lockec2ClientMockDescribeHostReservationOfferings                                           sync.RWMutex
	lockec2ClientMockDescribeHostReservationOfferingsPages                                      sync.RWMutex
	lockec2ClientMockDescribeHostReservationOfferingsPagesWithContext                           sync.RWMutex
	lockec2ClientMockDescribeHostReservationOfferingsRequest                                    sync.RWMutex
	lockec2ClientMockDescribeHostReservationOfferingsWithContext                                sync.RWMutex
	lockec2ClientMockDescribeHostReservations                                                   sync.RWMutex
	lockec2ClientMockDescribeHostReservationsPages                                              sync.RWMutex
	lockec2ClientMockDescribeHostReservationsPagesWithContext                                   sync.RWMutex
	lockec2ClientMockDescribeHostReservationsRequest                                            sync.RWMutex
	lockec2ClientMockDescribeHostReservationsWithContext                                        sync.RWMutex
	lockec2ClientMockDescribeHosts                                                              sync.RWMutex
	lockec2ClientMockDescribeHostsPages                                                         sync.RWMutex
	lockec2ClientMockDescribeHostsPagesWithContext                                              sync.RWMutex
	lockec2ClientMockDescribeHostsRequest                                                       sync.RWMutex
	lockec2ClientMockDescribeHostsWithContext                                                   sync.RWMutex
	lockec2ClientMockDescribeIamInstanceProfileAssociations                                     sync.RWMutex
	lockec2ClientMockDescribeIamInstanceProfileAssociationsPages                                sync.RWMutex
	lockec2ClientMockDescribeIamInstanceProfileAssociationsPagesWithContext                     sync.RWMutex
	lockec2ClientMockDescribeIamInstanceProfileAssociationsRequest                              sync.RWMutex
	lockec2ClientMockDescribeIamInstanceProfileAssociationsWithContext                          sync.RWMutex
	lockec2ClientMockDescribeIdFormat                                                           sync.RWMutex
	lockec2ClientMockDescribeIdFormatRequest                                                    sync.RWMutex
	lockec2ClientMockDescribeIdFormatWithContext                                                sync.RWMutex
	lockec2ClientMockDescribeIdentityIdFormat                                                   sync.RWMutex
	lockec2ClientMockDescribeIdentityIdFormatRequest                                            sync.RWMutex
	lockec2ClientMockDescribeIdentityIdFormatWithContext                                        sync.RWMutex
	lockec2ClientMockDescribeImageAttribute                                                     sync.RWMutex
	lockec2ClientMockDescribeImageAttributeRequest                                              sync.RWMutex
	lockec2ClientMockDescribeImageAttributeWithContext                                          sync.RWMutex
	lockec2ClientMockDescribeImages                                                             sync.RWMutex
	lockec2ClientMockDescribeImagesRequest                                                      sync.RWMutex
	lockec2ClientMockDescribeImagesWithContext                                                  sync.RWMutex
	lockec2ClientMockDescribeImportImageTasks                                                   sync.RWMutex
	lockec2ClientMockDescribeImportImageTasksPages                                              sync.RWMutex
	lockec2ClientMockDescribeImportImageTasksPagesWithContext                                   sync.RWMutex
	lockec2ClientMockDescribeImportImageTasksRequest                                            sync.RWMutex
	lockec2ClientMockDescribeImportImageTasksWithContext                                        sync.RWMutex
	lockec2ClientMockDescribeImportSnapshotTasks                                                sync.RWMutex
	lockec2ClientMockDescribeImportSnapshotTasksPages                                           sync.RWMutex
	lockec2ClientMockDescribeImportSnapshotTasksPagesWithContext                                sync.RWMutex
	lockec2ClientMockDescribeImportSnapshotTasksRequest                                         sync.RWMutex
	lockec2ClientMockDescribeImportSnapshotTasksWithContext                                     sync.RWMutex
	lockec2ClientMockDescribeInstanceAttribute                                                  sync.RWMutex
	lockec2ClientMockDescribeInstanceAttributeRequest                                           sync.RWMutex
	lockec2ClientMockDescribeInstanceAttributeWithContext                                       sync.RWMutex
	lockec2ClientMockDescribeInstanceCreditSpecifications                                       sync.RWMutex
	lockec2ClientMockDescribeInstanceCreditSpecificationsPages                                  sync.RWMutex
	lockec2ClientMockDescribeInstanceCreditSpecificationsPagesWithContext                       sync.RWMutex
	lockec2ClientMockDescribeInstanceCreditSpecificationsRequest                                sync.RWMutex
	lockec2ClientMockDescribeInstanceCreditSpecificationsWithContext                            sync.RWMutex
	lockec2ClientMockDescribeInstanceStatus                                                     sync.RWMutex
	lockec2ClientMockDescribeInstanceStatusPages                                                sync.RWMutex
	lockec2ClientMockDescribeInstanceStatusPagesWithContext                                     sync.RWMutex
	lockec2ClientMockDescribeInstanceStatusRequest                                              sync.RWMutex
	lockec2ClientMockDescribeInstanceStatusWithContext                                          sync.RWMutex
	lockec2ClientMockDescribeInstanceTypeOfferings                                              sync.RWMutex
	lockec2ClientMockDescribeInstanceTypeOfferingsRequest                                       sync.RWMutex
	lockec2ClientMockDescribeInstanceTypeOfferingsWithContext                                   sync.RWMutex
	lockec2ClientMockDescribeInstanceTypes                                                      sync.RWMutex
	lockec2ClientMockDescribeInstanceTypesRequest                                               sync.RWMutex
	lockec2ClientMockDescribeInstanceTypesWithContext                                           sync.RWMutex
	lockec2ClientMockDescribeInstances                                                          sync.RWMutex
	lockec2ClientMockDescribeInstancesPages                                                     sync.RWMutex
	lockec2ClientMockDescribeInstancesPagesWithContext                                          sync.RWMutex
	lockec2ClientMockDescribeInstancesRequest                                                   sync.RWMutex
	lockec2ClientMockDescribeInstancesWithContext                                               sync.RWMutex
	lockec2ClientMockDescribeInternetGateways                                                   sync.RWMutex
	lockec2ClientMockDescribeInternetGatewaysPages                                              sync.RWMutex
	lockec2ClientMockDescribeInternetGatewaysPagesWithContext                                   sync.RWMutex
	lockec2ClientMockDescribeInternetGatewaysRequest                                            sync.RWMutex
	lockec2ClientMockDescribeInternetGatewaysWithContext                                        sync.RWMutex
	lockec2ClientMockDescribeIpv6Pools                                                          sync.RWMutex
	lockec2ClientMockDescribeIpv6PoolsPages                                                     sync.RWMutex
	lockec2ClientMockDescribeIpv6PoolsPagesWithContext                                          sync.RWMutex
	lockec2ClientMockDescribeIpv6PoolsRequest                                                   sync.RWMutex
	lockec2ClientMockDescribeIpv6PoolsWithContext                                               sync.RWMutex
	lockec2ClientMockDescribeKeyPairs                                                           sync.RWMutex
	lockec2ClientMockDescribeKeyPairsRequest                                                    sync.RWMutex
	lockec2ClientMockDescribeKeyPairsWithContext                                                sync.RWMutex
	lockec2ClientMockDescribeLaunchTemplateVersions                                             sync.RWMutex
	lockec2ClientMockDescribeLaunchTemplateVersionsPages                                        sync.RWMutex
	lockec2ClientMockDescribeLaunchTemplateVersionsPagesWithContext                             sync.RWMutex
	lockec2ClientMockDescribeLaunchTemplateVersionsRequest                                      sync.RWMutex
	lockec2ClientMockDescribeLaunchTemplateVersionsWithContext                                  sync.RWMutex
	lockec2ClientMockDescribeLaunchTemplates                                                    sync.RWMutex
	lockec2ClientMockDescribeLaunchTemplatesPages                                               sync.RWMutex
	lockec2ClientMockDescribeLaunchTemplatesPagesWithContext                                    sync.RWMutex
	lockec2ClientMockDescribeLaunchTemplatesRequest                                             sync.RWMutex
	lockec2ClientMockDescribeLaunchTemplatesWithContext                                         sync.RWMutex
	lockec2ClientMockDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations            sync.RWMutex
	lockec2ClientMockDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest     sync.RWMutex
	lockec2ClientMockDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext sync.RWMutex
	lockec2ClientMockDescribeLocalGatewayRouteTableVpcAssociations                              sync.RWMutex
	lockec2ClientMockDescribeLocalGatewayRouteTableVpcAssociationsRequest                       sync.RWMutex
	lockec2ClientMockDescribeLocalGatewayRouteTableVpcAssociationsWithContext                   sync.RWMutex
	lockec2ClientMockDescribeLocalGatewayRouteTables                                            sync.RWMutex
	lockec2ClientMockDescribeLocalGatewayRouteTablesRequest                                     sync.RWMutex
	lockec2ClientMockDescribeLocalGatewayRouteTablesWithContext                                 sync.RWMutex
	lockec2ClientMockDescribeLocalGatewayVirtualInterfaceGroups                                 sync.RWMutex
	lockec2ClientMockDescribeLocalGatewayVirtualInterfaceGroupsRequest                          sync.RWMutex
	lockec2ClientMockDescribeLocalGatewayVirtualInterfaceGroupsWithContext                      sync.RWMutex
	lockec2ClientMockDescribeLocalGatewayVirtualInterfaces                                      sync.RWMutex
	lockec2ClientMockDescribeLocalGatewayVirtualInterfacesRequest                               sync.RWMutex
	lockec2ClientMockDescribeLocalGatewayVirtualInterfacesWithContext                           sync.RWMutex
	lockec2ClientMockDescribeLocalGateways                                                      sync.RWMutex
	lockec2ClientMockDescribeLocalGatewaysRequest                                               sync.RWMutex
	lockec2ClientMockDescribeLocalGatewaysWithContext                                           sync.RWMutex
	lockec2ClientMockDescribeMovingAddresses                                                    sync.RWMutex
	lockec2ClientMockDescribeMovingAddressesPages                                               sync.RWMutex
	lockec2ClientMockDescribeMovingAddressesPagesWithContext                                    sync.RWMutex
	lockec2ClientMockDescribeMovingAddressesRequest                                             sync.RWMutex
	lockec2ClientMockDescribeMovingAddressesWithContext                                         sync.RWMutex
	lockec2ClientMockDescribeNatGateways                                                        sync.RWMutex
	lockec2ClientMockDescribeNatGatewaysPages                                                   sync.RWMutex
	lockec2ClientMockDescribeNatGatewaysPagesWithContext                                        sync.RWMutex
	lockec2ClientMockDescribeNatGatewaysRequest                                                 sync.RWMutex
	lockec2ClientMockDescribeNatGatewaysWithContext                                             sync.RWMutex
	lockec2ClientMockDescribeNetworkAcls                                                        sync.RWMutex
	lockec2ClientMockDescribeNetworkAclsPages                                                   sync.RWMutex
	lockec2ClientMockDescribeNetworkAclsPagesWithContext                                        sync.RWMutex
	lockec2ClientMockDescribeNetworkAclsRequest                                                 sync.RWMutex
	lockec2ClientMockDescribeNetworkAclsWithContext                                             sync.RWMutex
	lockec2ClientMockDescribeNetworkInterfaceAttribute                                          sync.RWMutex
	lockec2ClientMockDescribeNetworkInterfaceAttributeRequest                                   sync.RWMutex
	lockec2ClientMockDescribeNetworkInterfaceAttributeWithContext                               sync.RWMutex
	lockec2ClientMockDescribeNetworkInterfacePermissions                                        sync.RWMutex
	lockec2ClientMockDescribeNetworkInterfacePermissionsPages                                   sync.RWMutex
	lockec2ClientMockDescribeNetworkInterfacePermissionsPagesWithContext                        sync.RWMutex
	lockec2ClientMockDescribeNetworkInterfacePermissionsRequest                                 sync.RWMutex
	lockec2ClientMockDescribeNetworkInterfacePermissionsWithContext                             sync.RWMutex
	lockec2ClientMockDescribeNetworkInterfaces                                                  sync.RWMutex
	lockec2ClientMockDescribeNetworkInterfacesPages                                             sync.RWMutex
	lockec2ClientMockDescribeNetworkInterfacesPagesWithContext                                  sync.RWMutex
	lockec2ClientMockDescribeNetworkInterfacesRequest                                           sync.RWMutex
	lockec2ClientMockDescribeNetworkInterfacesWithContext                                       sync.RWMutex
	lockec2ClientMockDescribePlacementGroups                                                    sync.RWMutex
	lockec2ClientMockDescribePlacementGroupsRequest                                             sync.RWMutex
	lockec2ClientMockDescribePlacementGroupsWithContext                                         sync.RWMutex
	lockec2ClientMockDescribePrefixLists                                                        sync.RWMutex
	lockec2ClientMockDescribePrefixListsPages                                                   sync.RWMutex
	lockec2ClientMockDescribePrefixListsPagesWithContext                                        sync.RWMutex
	lockec2ClientMockDescribePrefixListsRequest                                                 sync.RWMutex
	lockec2ClientMockDescribePrefixListsWithContext                                             sync.RWMutex
	lockec2ClientMockDescribePrincipalIdFormat                                                  sync.RWMutex
	lockec2ClientMockDescribePrincipalIdFormatPages                                             sync.RWMutex
	lockec2ClientMockDescribePrincipalIdFormatPagesWithContext                                  sync.RWMutex
	lockec2ClientMockDescribePrincipalIdFormatRequest                                           sync.RWMutex
	lockec2ClientMockDescribePrincipalIdFormatWithContext                                       sync.RWMutex
	lockec2ClientMockDescribePublicIpv4Pools                                                    sync.RWMutex
	lockec2ClientMockDescribePublicIpv4PoolsPages                                               sync.RWMutex
	lockec2ClientMockDescribePublicIpv4PoolsPagesWithContext                                    sync.RWMutex
	lockec2ClientMockDescribePublicIpv4PoolsRequest                                             sync.RWMutex
	lockec2ClientMockDescribePublicIpv4PoolsWithContext                                         sync.RWMutex
	lockec2ClientMockDescribeRegions                                                            sync.RWMutex
	lockec2ClientMockDescribeRegionsRequest                                                     sync.RWMutex
	lockec2ClientMockDescribeRegionsWithContext                                                 sync.RWMutex
	lockec2ClientMockDescribeReservedInstances                                                  sync.RWMutex
	lockec2ClientMockDescribeReservedInstancesListings                                          sync.RWMutex
	lockec2ClientMockDescribeReservedInstancesListingsRequest                                   sync.RWMutex
	lockec2ClientMockDescribeReservedInstancesListingsWithContext                               sync.RWMutex
	lockec2ClientMockDescribeReservedInstancesModifications                                     sync.RWMutex
	lockec2ClientMockDescribeReservedInstancesModificationsPages                                sync.RWMutex
	lockec2ClientMockDescribeReservedInstancesModificationsPagesWithContext                     sync.RWMutex
	lockec2ClientMockDescribeReservedInstancesModificationsRequest                              sync.RWMutex
	lockec2ClientMockDescribeReservedInstancesModificationsWithContext                          sync.RWMutex
	lockec2ClientMockDescribeReservedInstancesOfferings                                         sync.RWMutex
	lockec2ClientMockDescribeReservedInstancesOfferingsPages                                    sync.RWMutex
	lockec2ClientMockDescribeReservedInstancesOfferingsPagesWithContext                         sync.RWMutex
	lockec2ClientMockDescribeReservedInstancesOfferingsRequest                                  sync.RWMutex
	lockec2ClientMockDescribeReservedInstancesOfferingsWithContext                              sync.RWMutex
	lockec2ClientMockDescribeReservedInstancesRequest                                           sync.RWMutex
	lockec2ClientMockDescribeReservedInstancesWithContext                                       sync.RWMutex
	lockec2ClientMockDescribeRouteTables                                                        sync.RWMutex
	lockec2ClientMockDescribeRouteTablesPages                                                   sync.RWMutex
	lockec2ClientMockDescribeRouteTablesPagesWithContext                                        sync.RWMutex
	lockec2ClientMockDescribeRouteTablesRequest                                                 sync.RWMutex
	lockec2ClientMockDescribeRouteTablesWithContext                                             sync.RWMutex
	lockec2ClientMockDescribeScheduledInstanceAvailability                                      sync.RWMutex
	lockec2ClientMockDescribeScheduledInstanceAvailabilityPages                                 sync.RWMutex
	lockec2ClientMockDescribeScheduledInstanceAvailabilityPagesWithContext                      sync.RWMutex
	lockec2ClientMockDescribeScheduledInstanceAvailabilityRequest                               sync.RWMutex
	lockec2ClientMockDescribeScheduledInstanceAvailabilityWithContext                           sync.RWMutex
	lockec2ClientMockDescribeScheduledInstances                                                 sync.RWMutex
	lockec2ClientMockDescribeScheduledInstancesPages                                            sync.RWMutex
	lockec2ClientMockDescribeScheduledInstancesPagesWithContext                                 sync.RWMutex
	lockec2ClientMockDescribeScheduledInstancesRequest                                          sync.RWMutex
	lockec2ClientMockDescribeScheduledInstancesWithContext                                      sync.RWMutex
	lockec2ClientMockDescribeSecurityGroupReferences                                            sync.RWMutex
	lockec2ClientMockDescribeSecurityGroupReferencesRequest                                     sync.RWMutex
	lockec2ClientMockDescribeSecurityGroupReferencesWithContext                                 sync.RWMutex
	lockec2ClientMockDescribeSecurityGroups                                                     sync.RWMutex
	lockec2ClientMockDescribeSecurityGroupsPages                                                sync.RWMutex
	lockec2ClientMockDescribeSecurityGroupsPagesWithContext                                     sync.RWMutex
	lockec2ClientMockDescribeSecurityGroupsRequest                                              sync.RWMutex
	lockec2ClientMockDescribeSecurityGroupsWithContext                                          sync.RWMutex
	lockec2ClientMockDescribeSnapshotAttribute                                                  sync.RWMutex
	lockec2ClientMockDescribeSnapshotAttributeRequest                                           sync.RWMutex
	lockec2ClientMockDescribeSnapshotAttributeWithContext                                       sync.RWMutex
	lockec2ClientMockDescribeSnapshots                                                          sync.RWMutex
	lockec2ClientMockDescribeSnapshotsPages                                                     sync.RWMutex
	lockec2ClientMockDescribeSnapshotsPagesWithContext                                          sync.RWMutex
	lockec2ClientMockDescribeSnapshotsRequest                                                   sync.RWMutex
	lockec2ClientMockDescribeSnapshotsWithContext                                               sync.RWMutex
	lockec2ClientMockDescribeSpotDatafeedSubscription                                           sync.RWMutex
	lockec2ClientMockDescribeSpotDatafeedSubscriptionRequest                                    sync.RWMutex
	lockec2ClientMockDescribeSpotDatafeedSubscriptionWithContext                                sync.RWMutex
	lockec2ClientMockDescribeSpotFleetInstances                                                 sync.RWMutex
	lockec2ClientMockDescribeSpotFleetInstancesRequest                                          sync.RWMutex
	lockec2ClientMockDescribeSpotFleetInstancesWithContext                                      sync.RWMutex
	lockec2ClientMockDescribeSpotFleetRequestHistory                                            sync.RWMutex
	lockec2ClientMockDescribeSpotFleetRequestHistoryRequest                                     sync.RWMutex
	lockec2ClientMockDescribeSpotFleetRequestHistoryWithContext                                 sync.RWMutex
	lockec2ClientMockDescribeSpotFleetRequests                                                  sync.RWMutex
	lockec2ClientMockDescribeSpotFleetRequestsPages                                             sync.RWMutex
	lockec2ClientMockDescribeSpotFleetRequestsPagesWithContext                                  sync.RWMutex
	lockec2ClientMockDescribeSpotFleetRequestsRequest                                           sync.RWMutex
	lockec2ClientMockDescribeSpotFleetRequestsWithContext                                       sync.RWMutex
	lockec2ClientMockDescribeSpotInstanceRequests                                               sync.RWMutex
	lockec2ClientMockDescribeSpotInstanceRequestsPages                                          sync.RWMutex
	lockec2ClientMockDescribeSpotInstanceRequestsPagesWithContext                               sync.RWMutex
	lockec2ClientMockDescribeSpotInstanceRequestsRequest                                        sync.RWMutex
	lockec2ClientMockDescribeSpotInstanceRequestsWithContext                                    sync.RWMutex
	lockec2ClientMockDescribeSpotPriceHistory                                                   sync.RWMutex
	lockec2ClientMockDescribeSpotPriceHistoryPages                                              sync.RWMutex
	lockec2ClientMockDescribeSpotPriceHistoryPagesWithContext                                   sync.RWMutex
	lockec2ClientMockDescribeSpotPriceHistoryRequest                                            sync.RWMutex
	lockec2ClientMockDescribeSpotPriceHistoryWithContext                                        sync.RWMutex
	lockec2ClientMockDescribeStaleSecurityGroups                                                sync.RWMutex
	lockec2ClientMockDescribeStaleSecurityGroupsPages                                           sync.RWMutex
	lockec2ClientMockDescribeStaleSecurityGroupsPagesWithContext                                sync.RWMutex
	lockec2ClientMockDescribeStaleSecurityGroupsRequest                                         sync.RWMutex
	lockec2ClientMockDescribeStaleSecurityGroupsWithContext                                     sync.RWMutex
	lockec2ClientMockDescribeSubnets                                                            sync.RWMutex
	lockec2ClientMockDescribeSubnetsPages                                                       sync.RWMutex
	lockec2ClientMockDescribeSubnetsPagesWithContext                                            sync.RWMutex
	lockec2ClientMockDescribeSubnetsRequest                                                     sync.RWMutex
	lockec2ClientMockDescribeSubnetsWithContext                                                 sync.RWMutex
	lockec2ClientMockDescribeTags                                                               sync.RWMutex
	lockec2ClientMockDescribeTagsPages                                                          sync.RWMutex
	lockec2ClientMockDescribeTagsPagesWithContext                                               sync.RWMutex
	lockec2ClientMockDescribeTagsRequest                                                        sync.RWMutex
	lockec2ClientMockDescribeTagsWithContext                                                    sync.RWMutex
	lockec2ClientMockDescribeTrafficMirrorFilters                                               sync.RWMutex
	lockec2ClientMockDescribeTrafficMirrorFiltersPages                                          sync.RWMutex
	lockec2ClientMockDescribeTrafficMirrorFiltersPagesWithContext                               sync.RWMutex
	lockec2ClientMockDescribeTrafficMirrorFiltersRequest                                        sync.RWMutex
	lockec2ClientMockDescribeTrafficMirrorFiltersWithContext                                    sync.RWMutex
	lockec2ClientMockDescribeTrafficMirrorSessions                                              sync.RWMutex
	lockec2ClientMockDescribeTrafficMirrorSessionsPages                                         sync.RWMutex
	lockec2ClientMockDescribeTrafficMirrorSessionsPagesWithContext                              sync.RWMutex
	lockec2ClientMockDescribeTrafficMirrorSessionsRequest                                       sync.RWMutex
	lockec2ClientMockDescribeTrafficMirrorSessionsWithContext                                   sync.RWMutex
	lockec2ClientMockDescribeTrafficMirrorTargets                                               sync.RWMutex
	lockec2ClientMockDescribeTrafficMirrorTargetsPages                                          sync.RWMutex
	lockec2ClientMockDescribeTrafficMirrorTargetsPagesWithContext                               sync.RWMutex
	lockec2ClientMockDescribeTrafficMirrorTargetsRequest                                        sync.RWMutex
	lockec2ClientMockDescribeTrafficMirrorTargetsWithContext                                    sync.RWMutex
	lockec2ClientMockDescribeTransitGatewayAttachments                                          sync.RWMutex
	lockec2ClientMockDescribeTransitGatewayAttachmentsPages                                     sync.RWMutex
	lockec2ClientMockDescribeTransitGatewayAttachmentsPagesWithContext                          sync.RWMutex
	lockec2ClientMockDescribeTransitGatewayAttachmentsRequest                                   sync.RWMutex
	lockec2ClientMockDescribeTransitGatewayAttachmentsWithContext                               sync.RWMutex
	lockec2ClientMockDescribeTransitGatewayMulticastDomains                                     sync.RWMutex
	lockec2ClientMockDescribeTransitGatewayMulticastDomainsRequest                              sync.RWMutex
	lockec2ClientMockDescribeTransitGatewayMulticastDomainsWithContext                          sync.RWMutex
	lockec2ClientMockDescribeTransitGatewayPeeringAttachments                                   sync.RWMutex
	lockec2ClientMockDescribeTransitGatewayPeeringAttachmentsRequest                            sync.RWMutex
	lockec2ClientMockDescribeTransitGatewayPeeringAttachmentsWithContext                        sync.RWMutex
	lockec2ClientMockDescribeTransitGatewayRouteTables                                          sync.RWMutex
	lockec2ClientMockDescribeTransitGatewayRouteTablesPages                                     sync.RWMutex
	lockec2ClientMockDescribeTransitGatewayRouteTablesPagesWithContext                          sync.RWMutex
	lockec2ClientMockDescribeTransitGatewayRouteTablesRequest                                   sync.RWMutex
	lockec2ClientMockDescribeTransitGatewayRouteTablesWithContext                               sync.RWMutex
	lockec2ClientMockDescribeTransitGatewayVpcAttachments                                       sync.RWMutex
	lockec2ClientMockDescribeTransitGatewayVpcAttachmentsPages                                  sync.RWMutex
	lockec2ClientMockDescribeTransitGatewayVpcAttachmentsPagesWithContext                       sync.RWMutex
	lockec2ClientMockDescribeTransitGatewayVpcAttachmentsRequest                                sync.RWMutex
	lockec2ClientMockDescribeTransitGatewayVpcAttachmentsWithContext                            sync.RWMutex
	lockec2ClientMockDescribeTransitGateways                                                    sync.RWMutex
	lockec2ClientMockDescribeTransitGatewaysPages                                               sync.RWMutex
	lockec2ClientMockDescribeTransitGatewaysPagesWithContext                                    sync.RWMutex
	lockec2ClientMockDescribeTransitGatewaysRequest                                             sync.RWMutex
	lockec2ClientMockDescribeTransitGatewaysWithContext                                         sync.RWMutex
	lockec2ClientMockDescribeVolumeAttribute                                                    sync.RWMutex
	lockec2ClientMockDescribeVolumeAttributeRequest                                             sync.RWMutex
	lockec2ClientMockDescribeVolumeAttributeWithContext                                         sync.RWMutex
	lockec2ClientMockDescribeVolumeStatus                                                       sync.RWMutex
	lockec2ClientMockDescribeVolumeStatusPages                                                  sync.RWMutex
	lockec2ClientMockDescribeVolumeStatusPagesWithContext                                       sync.RWMutex
	lockec2ClientMockDescribeVolumeStatusRequest                                                sync.RWMutex
	lockec2ClientMockDescribeVolumeStatusWithContext                                            sync.RWMutex
	lockec2ClientMockDescribeVolumes                                                            sync.RWMutex
	lockec2ClientMockDescribeVolumesModifications                                               sync.RWMutex
	lockec2ClientMockDescribeVolumesModificationsPages                                          sync.RWMutex
	lockec2ClientMockDescribeVolumesModificationsPagesWithContext                               sync.RWMutex
	lockec2ClientMockDescribeVolumesModificationsRequest                                        sync.RWMutex
	lockec2ClientMockDescribeVolumesModificationsWithContext                                    sync.RWMutex
	lockec2ClientMockDescribeVolumesPages                                                       sync.RWMutex
	lockec2ClientMockDescribeVolumesPagesWithContext                                            sync.RWMutex
	lockec2ClientMockDescribeVolumesRequest                                                     sync.RWMutex
	lockec2ClientMockDescribeVolumesWithContext                                                 sync.RWMutex
	lockec2ClientMockDescribeVpcAttribute                                                       sync.RWMutex
	lockec2ClientMockDescribeVpcAttributeRequest                                                sync.RWMutex
	lockec2ClientMockDescribeVpcAttributeWithContext                                            sync.RWMutex
	lockec2ClientMockDescribeVpcClassicLink                                                     sync.RWMutex
	lockec2ClientMockDescribeVpcClassicLinkDnsSupport                                           sync.RWMutex
	lockec2ClientMockDescribeVpcClassicLinkDnsSupportPages                                      sync.RWMutex
	lockec2ClientMockDescribeVpcClassicLinkDnsSupportPagesWithContext                           sync.RWMutex
	lockec2ClientMockDescribeVpcClassicLinkDnsSupportRequest                                    sync.RWMutex
	lockec2ClientMockDescribeVpcClassicLinkDnsSupportWithContext                                sync.RWMutex
	lockec2ClientMockDescribeVpcClassicLinkRequest                                              sync.RWMutex
	lockec2ClientMockDescribeVpcClassicLinkWithContext                                          sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointConnectionNotifications                                 sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointConnectionNotificationsPages                            sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointConnectionNotificationsPagesWithContext                 sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointConnectionNotificationsRequest                          sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointConnectionNotificationsWithContext                      sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointConnections                                             sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointConnectionsPages                                        sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointConnectionsPagesWithContext                             sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointConnectionsRequest                                      sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointConnectionsWithContext                                  sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointServiceConfigurations                                   sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointServiceConfigurationsPages                              sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointServiceConfigurationsPagesWithContext                   sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointServiceConfigurationsRequest                            sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointServiceConfigurationsWithContext                        sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointServicePermissions                                      sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointServicePermissionsPages                                 sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointServicePermissionsPagesWithContext                      sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointServicePermissionsRequest                               sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointServicePermissionsWithContext                           sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointServices                                                sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointServicesRequest                                         sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointServicesWithContext                                     sync.RWMutex
	lockec2ClientMockDescribeVpcEndpoints                                                       sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointsPages                                                  sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointsPagesWithContext                                       sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointsRequest                                                sync.RWMutex
	lockec2ClientMockDescribeVpcEndpointsWithContext                                            sync.RWMutex
	lockec2ClientMockDescribeVpcPeeringConnections                                              sync.RWMutex
	lockec2ClientMockDescribeVpcPeeringConnectionsPages                                         sync.RWMutex
	lockec2ClientMockDescribeVpcPeeringConnectionsPagesWithContext                              sync.RWMutex
	lockec2ClientMockDescribeVpcPeeringConnectionsRequest                                       sync.RWMutex
	lockec2ClientMockDescribeVpcPeeringConnectionsWithContext                                   sync.RWMutex
	lockec2ClientMockDescribeVpcs                                                               sync.RWMutex
	lockec2ClientMockDescribeVpcsPages                                                          sync.RWMutex
	lockec2ClientMockDescribeVpcsPagesWithContext                                               sync.RWMutex
	lockec2ClientMockDescribeVpcsRequest                                                        sync.RWMutex
	lockec2ClientMockDescribeVpcsWithContext                                                    sync.RWMutex
	lockec2ClientMockDescribeVpnConnections                                                     sync.RWMutex
	lockec2ClientMockDescribeVpnConnectionsRequest                                              sync.RWMutex
	lockec2ClientMockDescribeVpnConnectionsWithContext                                          sync.RWMutex
	lockec2ClientMockDescribeVpnGateways                                                        sync.RWMutex
	lockec2ClientMockDescribeVpnGatewaysRequest                                                 sync.RWMutex
	lockec2ClientMockDescribeVpnGatewaysWithContext                                             sync.RWMutex
	lockec2ClientMockDetachClassicLinkVpc                                                       sync.RWMutex
	lockec2ClientMockDetachClassicLinkVpcRequest                                                sync.RWMutex
	lockec2ClientMockDetachClassicLinkVpcWithContext                                            sync.RWMutex
	lockec2ClientMockDetachInternetGateway                                                      sync.RWMutex
	lockec2ClientMockDetachInternetGatewayRequest                                               sync.RWMutex
	lockec2ClientMockDetachInternetGatewayWithContext                                           sync.RWMutex
	lockec2ClientMockDetachNetworkInterface                                                     sync.RWMutex
	lockec2ClientMockDetachNetworkInterfaceRequest                                              sync.RWMutex
	lockec2ClientMockDetachNetworkInterfaceWithContext                                          sync.RWMutex
	lockec2ClientMockDetachVolume                                                               sync.RWMutex
	lockec2ClientMockDetachVolumeRequest                                                        sync.RWMutex
	lockec2ClientMockDetachVolumeWithContext                                                    sync.RWMutex
	lockec2ClientMockDetachVpnGateway                                                           sync.RWMutex
	lockec2ClientMockDetachVpnGatewayRequest                                                    sync.RWMutex
	lockec2ClientMockDetachVpnGatewayWithContext                                                sync.RWMutex
	lockec2ClientMockDisableEbsEncryptionByDefault                                              sync.RWMutex
	lockec2ClientMockDisableEbsEncryptionByDefaultRequest                                       sync.RWMutex
	lockec2ClientMockDisableEbsEncryptionByDefaultWithContext                                   sync.RWMutex
	lockec2ClientMockDisableFastSnapshotRestores                                                sync.RWMutex
	lockec2ClientMockDisableFastSnapshotRestoresRequest                                         sync.RWMutex
	lockec2ClientMockDisableFastSnapshotRestoresWithContext                                     sync.RWMutex
	lockec2ClientMockDisableTransitGatewayRouteTablePropagation                                 sync.RWMutex
	lockec2ClientMockDisableTransitGatewayRouteTablePropagationRequest                          sync.RWMutex
	lockec2ClientMockDisableTransitGatewayRouteTablePropagationWithContext                      sync.RWMutex
	lockec2ClientMockDisableVgwRoutePropagation                                                 sync.RWMutex
	lockec2ClientMockDisableVgwRoutePropagationRequest                                          sync.RWMutex
	lockec2ClientMockDisableVgwRoutePropagationWithContext                                      sync.RWMutex
	lockec2ClientMockDisableVpcClassicLink                                                      sync.RWMutex
	lockec2ClientMockDisableVpcClassicLinkDnsSupport                                            sync.RWMutex
	lockec2ClientMockDisableVpcClassicLinkDnsSupportRequest                                     sync.RWMutex
	lockec2ClientMockDisableVpcClassicLinkDnsSupportWithContext                                 sync.RWMutex
	lockec2ClientMockDisableVpcClassicLinkRequest                                               sync.RWMutex
	lockec2ClientMockDisableVpcClassicLinkWithContext                                           sync.RWMutex
	lockec2ClientMockDisassociateAddress                                                        sync.RWMutex
	lockec2ClientMockDisassociateAddressRequest                                                 sync.RWMutex
	lockec2ClientMockDisassociateAddressWithContext                                             sync.RWMutex
	lockec2ClientMockDisassociateClientVpnTargetNetwork                                         sync.RWMutex
	lockec2ClientMockDisassociateClientVpnTargetNetworkRequest                                  sync.RWMutex
	lockec2ClientMockDisassociateClientVpnTargetNetworkWithContext                              sync.RWMutex
	lockec2ClientMockDisassociateIamInstanceProfile                                             sync.RWMutex
	lockec2ClientMockDisassociateIamInstanceProfileRequest                                      sync.RWMutex
	lockec2ClientMockDisassociateIamInstanceProfileWithContext                                  sync.RWMutex
	lockec2ClientMockDisassociateRouteTable                                                     sync.RWMutex
	lockec2ClientMockDisassociateRouteTableRequest                                              sync.RWMutex
	lockec2ClientMockDisassociateRouteTableWithContext                                          sync.RWMutex
	lockec2ClientMockDisassociateSubnetCidrBlock                                                sync.RWMutex
	lockec2ClientMockDisassociateSubnetCidrBlockRequest                                         sync.RWMutex
	lockec2ClientMockDisassociateSubnetCidrBlockWithContext                                     sync.RWMutex
	lockec2ClientMockDisassociateTransitGatewayMulticastDomain                                  sync.RWMutex
	lockec2ClientMockDisassociateTransitGatewayMulticastDomainRequest                           sync.RWMutex
	lockec2ClientMockDisassociateTransitGatewayMulticastDomainWithContext                       sync.RWMutex
	lockec2ClientMockDisassociateTransitGatewayRouteTable                                       sync.RWMutex
	lockec2ClientMockDisassociateTransitGatewayRouteTableRequest                                sync.RWMutex
	lockec2ClientMockDisassociateTransitGatewayRouteTableWithContext                            sync.RWMutex
	lockec2ClientMockDisassociateVpcCidrBlock                                                   sync.RWMutex
	lockec2ClientMockDisassociateVpcCidrBlockRequest                                            sync.RWMutex
	lockec2ClientMockDisassociateVpcCidrBlockWithContext                                        sync.RWMutex
	lockec2ClientMockEnableEbsEncryptionByDefault                                               sync.RWMutex
	lockec2ClientMockEnableEbsEncryptionByDefaultRequest                                        sync.RWMutex
	lockec2ClientMockEnableEbsEncryptionByDefaultWithContext                                    sync.RWMutex
	lockec2ClientMockEnableFastSnapshotRestores                                                 sync.RWMutex
	lockec2ClientMockEnableFastSnapshotRestoresRequest                                          sync.RWMutex
	lockec2ClientMockEnableFastSnapshotRestoresWithContext                                      sync.RWMutex
	lockec2ClientMockEnableTransitGatewayRouteTablePropagation                                  sync.RWMutex
	lockec2ClientMockEnableTransitGatewayRouteTablePropagationRequest                           sync.RWMutex
	lockec2ClientMockEnableTransitGatewayRouteTablePropagationWithContext                       sync.RWMutex
	lockec2ClientMockEnableVgwRoutePropagation                                                  sync.RWMutex
	lockec2ClientMockEnableVgwRoutePropagationRequest                                           sync.RWMutex
	lockec2ClientMockEnableVgwRoutePropagationWithContext                                       sync.RWMutex
	lockec2ClientMockEnableVolumeIO                                                             sync.RWMutex
	lockec2ClientMockEnableVolumeIORequest                                                      sync.RWMutex
	lockec2ClientMockEnableVolumeIOWithContext                                                  sync.RWMutex
	lockec2ClientMockEnableVpcClassicLink                                                       sync.RWMutex
	lockec2ClientMockEnableVpcClassicLinkDnsSupport                                             sync.RWMutex
	lockec2ClientMockEnableVpcClassicLinkDnsSupportRequest                                      sync.RWMutex
	lockec2ClientMockEnableVpcClassicLinkDnsSupportWithContext                                  sync.RWMutex
	lockec2ClientMockEnableVpcClassicLinkRequest                                                sync.RWMutex
	lockec2ClientMockEnableVpcClassicLinkWithContext                                            sync.RWMutex
	lockec2ClientMockExportClientVpnClientCertificateRevocationList                             sync.RWMutex
	lockec2ClientMockExportClientVpnClientCertificateRevocationListRequest                      sync.RWMutex
	lockec2ClientMockExportClientVpnClientCertificateRevocationListWithContext                  sync.RWMutex
	lockec2ClientMockExportClientVpnClientConfiguration                                         sync.RWMutex
	lockec2ClientMockExportClientVpnClientConfigurationRequest                                  sync.RWMutex
	lockec2ClientMockExportClientVpnClientConfigurationWithContext                              sync.RWMutex
	lockec2ClientMockExportImage                                                                sync.RWMutex
	lockec2ClientMockExportImageRequest                                                         sync.RWMutex
	lockec2ClientMockExportImageWithContext                                                     sync.RWMutex
	lockec2ClientMockExportTransitGatewayRoutes                                                 sync.RWMutex
	lockec2ClientMockExportTransitGatewayRoutesRequest                                          sync.RWMutex
	lockec2ClientMockExportTransitGatewayRoutesWithContext                                      sync.RWMutex
	lockec2ClientMockGetAssociatedIpv6PoolCidrs                                                 sync.RWMutex
	lockec2ClientMockGetAssociatedIpv6PoolCidrsPages                                            sync.RWMutex
	lockec2ClientMockGetAssociatedIpv6PoolCidrsPagesWithContext                                 sync.RWMutex
	lockec2ClientMockGetAssociatedIpv6PoolCidrsRequest                                          sync.RWMutex
	lockec2ClientMockGetAssociatedIpv6PoolCidrsWithContext                                      sync.RWMutex
	lockec2ClientMockGetCapacityReservationUsage                                                sync.RWMutex
	lockec2ClientMockGetCapacityReservationUsageRequest                                         sync.RWMutex
	lockec2ClientMockGetCapacityReservationUsageWithContext                                     sync.RWMutex
	lockec2ClientMockGetCoipPoolUsage                                                           sync.RWMutex
	lockec2ClientMockGetCoipPoolUsageRequest                                                    sync.RWMutex
	lockec2ClientMockGetCoipPoolUsageWithContext                                                sync.RWMutex
	lockec2ClientMockGetConsoleOutput                                                           sync.RWMutex
	lockec2ClientMockGetConsoleOutputRequest                                                    sync.RWMutex
	lockec2ClientMockGetConsoleOutputWithContext                                                sync.RWMutex
	lockec2ClientMockGetConsoleScreenshot                                                       sync.RWMutex
	lockec2ClientMockGetConsoleScreenshotRequest                                                sync.RWMutex
	lockec2ClientMockGetConsoleScreenshotWithContext                                            sync.RWMutex
	lockec2ClientMockGetDefaultCreditSpecification                                              sync.RWMutex
	lockec2ClientMockGetDefaultCreditSpecificationRequest                                       sync.RWMutex
	lockec2ClientMockGetDefaultCreditSpecificationWithContext                                   sync.RWMutex
	lockec2ClientMockGetEbsDefaultKmsKeyId                                                      sync.RWMutex
	lockec2ClientMockGetEbsDefaultKmsKeyIdRequest                                               sync.RWMutex
	lockec2ClientMockGetEbsDefaultKmsKeyIdWithContext                                           sync.RWMutex
	lockec2ClientMockGetEbsEncryptionByDefault                                                  sync.RWMutex
	lockec2ClientMockGetEbsEncryptionByDefaultRequest                                           sync.RWMutex
	lockec2ClientMockGetEbsEncryptionByDefaultWithContext                                       sync.RWMutex
	lockec2ClientMockGetHostReservationPurchasePreview                                          sync.RWMutex
	lockec2ClientMockGetHostReservationPurchasePreviewRequest                                   sync.RWMutex
	lockec2ClientMockGetHostReservationPurchasePreviewWithContext                               sync.RWMutex
	lockec2ClientMockGetLaunchTemplateData                                                      sync.RWMutex
	lockec2ClientMockGetLaunchTemplateDataRequest                                               sync.RWMutex
	lockec2ClientMockGetLaunchTemplateDataWithContext                                           sync.RWMutex
	lockec2ClientMockGetPasswordData                                                            sync.RWMutex
	lockec2ClientMockGetPasswordDataRequest                                                     sync.RWMutex
	lockec2ClientMockGetPasswordDataWithContext                                                 sync.RWMutex
	lockec2ClientMockGetReservedInstancesExchangeQuote                                          sync.RWMutex
	lockec2ClientMockGetReservedInstancesExchangeQuoteRequest                                   sync.RWMutex
	lockec2ClientMockGetReservedInstancesExchangeQuoteWithContext                               sync.RWMutex
	lockec2ClientMockGetTransitGatewayAttachmentPropagations                                    sync.RWMutex
	lockec2ClientMockGetTransitGatewayAttachmentPropagationsPages                               sync.RWMutex
	lockec2ClientMockGetTransitGatewayAttachmentPropagationsPagesWithContext                    sync.RWMutex
	lockec2ClientMockGetTransitGatewayAttachmentPropagationsRequest                             sync.RWMutex
	lockec2ClientMockGetTransitGatewayAttachmentPropagationsWithContext                         sync.RWMutex
	lockec2ClientMockGetTransitGatewayMulticastDomainAssociations                               sync.RWMutex
	lockec2ClientMockGetTransitGatewayMulticastDomainAssociationsRequest                        sync.RWMutex
	lockec2ClientMockGetTransitGatewayMulticastDomainAssociationsWithContext                    sync.RWMutex
	lockec2ClientMockGetTransitGatewayRouteTableAssociations                                    sync.RWMutex
	lockec2ClientMockGetTransitGatewayRouteTableAssociationsPages                               sync.RWMutex
	lockec2ClientMockGetTransitGatewayRouteTableAssociationsPagesWithContext                    sync.RWMutex
	lockec2ClientMockGetTransitGatewayRouteTableAssociationsRequest                             sync.RWMutex
	lockec2ClientMockGetTransitGatewayRouteTableAssociationsWithContext                         sync.RWMutex
	lockec2ClientMockGetTransitGatewayRouteTablePropagations                                    sync.RWMutex
	lockec2ClientMockGetTransitGatewayRouteTablePropagationsPages                               sync.RWMutex
	lockec2ClientMockGetTransitGatewayRouteTablePropagationsPagesWithContext                    sync.RWMutex
	lockec2ClientMockGetTransitGatewayRouteTablePropagationsRequest                             sync.RWMutex
	lockec2ClientMockGetTransitGatewayRouteTablePropagationsWithContext                         sync.RWMutex
	lockec2ClientMockImportClientVpnClientCertificateRevocationList                             sync.RWMutex
	lockec2ClientMockImportClientVpnClientCertificateRevocationListRequest                      sync.RWMutex
	lockec2ClientMockImportClientVpnClientCertificateRevocationListWithContext                  sync.RWMutex
	lockec2ClientMockImportImage                                                                sync.RWMutex
	lockec2ClientMockImportImageRequest                                                         sync.RWMutex
	lockec2ClientMockImportImageWithContext                                                     sync.RWMutex
	lockec2ClientMockImportInstance                                                             sync.RWMutex
	lockec2ClientMockImportInstanceRequest                                                      sync.RWMutex
	lockec2ClientMockImportInstanceWithContext                                                  sync.RWMutex
	lockec2ClientMockImportKeyPair                                                              sync.RWMutex
	lockec2ClientMockImportKeyPairRequest                                                       sync.RWMutex
	lockec2ClientMockImportKeyPairWithContext                                                   sync.RWMutex
	lockec2ClientMockImportSnapshot                                                             sync.RWMutex
	lockec2ClientMockImportSnapshotRequest                                                      sync.RWMutex
	lockec2ClientMockImportSnapshotWithContext                                                  sync.RWMutex
	lockec2ClientMockImportVolume                                                               sync.RWMutex
	lockec2ClientMockImportVolumeRequest                                                        sync.RWMutex
	lockec2ClientMockImportVolumeWithContext                                                    sync.RWMutex
	lockec2ClientMockModifyCapacityReservation                                                  sync.RWMutex
	lockec2ClientMockModifyCapacityReservationRequest                                           sync.RWMutex
	lockec2ClientMockModifyCapacityReservationWithContext                                       sync.RWMutex
	lockec2ClientMockModifyClientVpnEndpoint                                                    sync.RWMutex
	lockec2ClientMockModifyClientVpnEndpointRequest                                             sync.RWMutex
	lockec2ClientMockModifyClientVpnEndpointWithContext                                         sync.RWMutex
	lockec2ClientMockModifyDefaultCreditSpecification                                           sync.RWMutex
	lockec2ClientMockModifyDefaultCreditSpecificationRequest                                    sync.RWMutex
	lockec2ClientMockModifyDefaultCreditSpecificationWithContext                                sync.RWMutex
	lockec2ClientMockModifyEbsDefaultKmsKeyId                                                   sync.RWMutex
	lockec2ClientMockModifyEbsDefaultKmsKeyIdRequest                                            sync.RWMutex
	lockec2ClientMockModifyEbsDefaultKmsKeyIdWithContext                                        sync.RWMutex
	lockec2ClientMockModifyFleet                                                                sync.RWMutex
	lockec2ClientMockModifyFleetRequest                                                         sync.RWMutex
	lockec2ClientMockModifyFleetWithContext                                                     sync.RWMutex
	lockec2ClientMockModifyFpgaImageAttribute                                                   sync.RWMutex
	lockec2ClientMockModifyFpgaImageAttributeRequest                                            sync.RWMutex
	lockec2ClientMockModifyFpgaImageAttributeWithContext                                        sync.RWMutex
	lockec2ClientMockModifyHosts                                                                sync.RWMutex
	lockec2ClientMockModifyHostsRequest                                                         sync.RWMutex
	lockec2ClientMockModifyHostsWithContext                                                     sync.RWMutex
	lockec2ClientMockModifyIdFormat                                                             sync.RWMutex
	lockec2ClientMockModifyIdFormatRequest                                                      sync.RWMutex
	lockec2ClientMockModifyIdFormatWithContext                                                  sync.RWMutex
	lockec2ClientMockModifyIdentityIdFormat                                                     sync.RWMutex
	lockec2ClientMockModifyIdentityIdFormatRequest                                              sync.RWMutex
	lockec2ClientMockModifyIdentityIdFormatWithContext                                          sync.RWMutex
	lockec2ClientMockModifyImageAttribute                                                       sync.RWMutex
	lockec2ClientMockModifyImageAttributeRequest                                                sync.RWMutex
	lockec2ClientMockModifyImageAttributeWithContext                                            sync.RWMutex
	lockec2ClientMockModifyInstanceAttribute                                                    sync.RWMutex
	lockec2ClientMockModifyInstanceAttributeRequest                                             sync.RWMutex
	lockec2ClientMockModifyInstanceAttributeWithContext                                         sync.RWMutex
	lockec2ClientMockModifyInstanceCapacityReservationAttributes                                sync.RWMutex
	lockec2ClientMockModifyInstanceCapacityReservationAttributesRequest                         sync.RWMutex
	lockec2ClientMockModifyInstanceCapacityReservationAttributesWithContext                     sync.RWMutex
	lockec2ClientMockModifyInstanceCreditSpecification                                          sync.RWMutex
	lockec2ClientMockModifyInstanceCreditSpecificationRequest                                   sync.RWMutex
	lockec2ClientMockModifyInstanceCreditSpecificationWithContext                               sync.RWMutex
	lockec2ClientMockModifyInstanceEventStartTime                                               sync.RWMutex
	lockec2ClientMockModifyInstanceEventStartTimeRequest                                        sync.RWMutex
	lockec2ClientMockModifyInstanceEventStartTimeWithContext                                    sync.RWMutex
	lockec2ClientMockModifyInstanceMetadataOptions                                              sync.RWMutex
	lockec2ClientMockModifyInstanceMetadataOptionsRequest                                       sync.RWMutex
	lockec2ClientMockModifyInstanceMetadataOptionsWithContext                                   sync.RWMutex
	lockec2ClientMockModifyInstancePlacement                                                    sync.RWMutex
	lockec2ClientMockModifyInstancePlacementRequest                                             sync.RWMutex
	lockec2ClientMockModifyInstancePlacementWithContext                                         sync.RWMutex
	lockec2ClientMockModifyLaunchTemplate                                                       sync.RWMutex
	lockec2ClientMockModifyLaunchTemplateRequest                                                sync.RWMutex
	lockec2ClientMockModifyLaunchTemplateWithContext                                            sync.RWMutex
	lockec2ClientMockModifyNetworkInterfaceAttribute                                            sync.RWMutex
	lockec2ClientMockModifyNetworkInterfaceAttributeRequest                                     sync.RWMutex
	lockec2ClientMockModifyNetworkInterfaceAttributeWithContext                                 sync.RWMutex
	lockec2ClientMockModifyReservedInstances                                                    sync.RWMutex
	lockec2ClientMockModifyReservedInstancesRequest                                             sync.RWMutex
	lockec2ClientMockModifyReservedInstancesWithContext                                         sync.RWMutex
	lockec2ClientMockModifySnapshotAttribute                                                    sync.RWMutex
	lockec2ClientMockModifySnapshotAttributeRequest                                             sync.RWMutex
	lockec2ClientMockModifySnapshotAttributeWithContext                                         sync.RWMutex
	lockec2ClientMockModifySpotFleetRequest                                                     sync.RWMutex
	lockec2ClientMockModifySpotFleetRequestRequest                                              sync.RWMutex
	lockec2ClientMockModifySpotFleetRequestWithContext                                          sync.RWMutex
	lockec2ClientMockModifySubnetAttribute                                                      sync.RWMutex
	lockec2ClientMockModifySubnetAttributeRequest                                               sync.RWMutex
	lockec2ClientMockModifySubnetAttributeWithContext                                           sync.RWMutex
	lockec2ClientMockModifyTrafficMirrorFilterNetworkServices                                   sync.RWMutex
	lockec2ClientMockModifyTrafficMirrorFilterNetworkServicesRequest                            sync.RWMutex
	lockec2ClientMockModifyTrafficMirrorFilterNetworkServicesWithContext                        sync.RWMutex
	lockec2ClientMockModifyTrafficMirrorFilterRule                                              sync.RWMutex
	lockec2ClientMockModifyTrafficMirrorFilterRuleRequest                                       sync.RWMutex
	lockec2ClientMockModifyTrafficMirrorFilterRuleWithContext                                   sync.RWMutex
	lockec2ClientMockModifyTrafficMirrorSession                                                 sync.RWMutex
	lockec2ClientMockModifyTrafficMirrorSessionRequest                                          sync.RWMutex
	lockec2ClientMockModifyTrafficMirrorSessionWithContext                                      sync.RWMutex
	lockec2ClientMockModifyTransitGatewayVpcAttachment                                          sync.RWMutex
	lockec2ClientMockModifyTransitGatewayVpcAttachmentRequest                                   sync.RWMutex
	lockec2ClientMockModifyTransitGatewayVpcAttachmentWithContext                               sync.RWMutex
	lockec2ClientMockModifyVolume                                                               sync.RWMutex
	lockec2ClientMockModifyVolumeAttribute                                                      sync.RWMutex
	lockec2ClientMockModifyVolumeAttributeRequest                                               sync.RWMutex
	lockec2ClientMockModifyVolumeAttributeWithContext                                           sync.RWMutex
	lockec2ClientMockModifyVolumeRequest                                                        sync.RWMutex
	lockec2ClientMockModifyVolumeWithContext                                                    sync.RWMutex
	lockec2ClientMockModifyVpcAttribute                                                         sync.RWMutex
	lockec2ClientMockModifyVpcAttributeRequest                                                  sync.RWMutex
	lockec2ClientMockModifyVpcAttributeWithContext                                              sync.RWMutex
	lockec2ClientMockModifyVpcEndpoint                                                          sync.RWMutex
	lockec2ClientMockModifyVpcEndpointConnectionNotification                                    sync.RWMutex
	lockec2ClientMockModifyVpcEndpointConnectionNotificationRequest                             sync.RWMutex
	lockec2ClientMockModifyVpcEndpointConnectionNotificationWithContext                         sync.RWMutex
	lockec2ClientMockModifyVpcEndpointRequest                                                   sync.RWMutex
	lockec2ClientMockModifyVpcEndpointServiceConfiguration                                      sync.RWMutex
	lockec2ClientMockModifyVpcEndpointServiceConfigurationRequest                               sync.RWMutex
	lockec2ClientMockModifyVpcEndpointServiceConfigurationWithContext                           sync.RWMutex
	lockec2ClientMockModifyVpcEndpointServicePermissions                                        sync.RWMutex
	lockec2ClientMockModifyVpcEndpointServicePermissionsRequest                                 sync.RWMutex
	lockec2ClientMockModifyVpcEndpointServicePermissionsWithContext                             sync.RWMutex
	lockec2ClientMockModifyVpcEndpointWithContext                                               sync.RWMutex
	lockec2ClientMockModifyVpcPeeringConnectionOptions                                          sync.RWMutex
	lockec2ClientMockModifyVpcPeeringConnectionOptionsRequest                                   sync.RWMutex
	lockec2ClientMockModifyVpcPeeringConnectionOptionsWithContext                               sync.RWMutex
	lockec2ClientMockModifyVpcTenancy                                                           sync.RWMutex
	lockec2ClientMockModifyVpcTenancyRequest                                                    sync.RWMutex
	lockec2ClientMockModifyVpcTenancyWithContext                                                sync.RWMutex
	lockec2ClientMockModifyVpnConnection                                                        sync.RWMutex
	lockec2ClientMockModifyVpnConnectionRequest                                                 sync.RWMutex
	lockec2ClientMockModifyVpnConnectionWithContext                                             sync.RWMutex
	lockec2ClientMockModifyVpnTunnelCertificate                                                 sync.RWMutex
	lockec2ClientMockModifyVpnTunnelCertificateRequest                                          sync.RWMutex
	lockec2ClientMockModifyVpnTunnelCertificateWithContext                                      sync.RWMutex
	lockec2ClientMockModifyVpnTunnelOptions                                                     sync.RWMutex
	lockec2ClientMockModifyVpnTunnelOptionsRequest                                              sync.RWMutex
	lockec2ClientMockModifyVpnTunnelOptionsWithContext                                          sync.RWMutex
	lockec2ClientMockMonitorInstances                                                           sync.RWMutex
	lockec2ClientMockMonitorInstancesRequest                                                    sync.RWMutex
	lockec2ClientMockMonitorInstancesWithContext                                                sync.RWMutex
	lockec2ClientMockMoveAddressToVpc                                                           sync.RWMutex
	lockec2ClientMockMoveAddressToVpcRequest                                                    sync.RWMutex
	lockec2ClientMockMoveAddressToVpcWithContext                                                sync.RWMutex
	lockec2ClientMockProvisionByoipCidr                                                         sync.RWMutex
	lockec2ClientMockProvisionByoipCidrRequest                                                  sync.RWMutex
	lockec2ClientMockProvisionByoipCidrWithContext                                              sync.RWMutex
	lockec2ClientMockPurchaseHostReservation                                                    sync.RWMutex
	lockec2ClientMockPurchaseHostReservationRequest                                             sync.RWMutex
	lockec2ClientMockPurchaseHostReservationWithContext                                         sync.RWMutex
	lockec2ClientMockPurchaseReservedInstancesOffering                                          sync.RWMutex
	lockec2ClientMockPurchaseReservedInstancesOfferingRequest                                   sync.RWMutex
	lockec2ClientMockPurchaseReservedInstancesOfferingWithContext                               sync.RWMutex
	lockec2ClientMockPurchaseScheduledInstances                                                 sync.RWMutex
	lockec2ClientMockPurchaseScheduledInstancesRequest                                          sync.RWMutex
	lockec2ClientMockPurchaseScheduledInstancesWithContext                                      sync.RWMutex
	lockec2ClientMockRebootInstances                                                            sync.RWMutex
	lockec2ClientMockRebootInstancesRequest                                                     sync.RWMutex
	lockec2ClientMockRebootInstancesWithContext                                                 sync.RWMutex
	lockec2ClientMockRegisterImage                                                              sync.RWMutex
	lockec2ClientMockRegisterImageRequest                                                       sync.RWMutex
	lockec2ClientMockRegisterImageWithContext                                                   sync.RWMutex
	lockec2ClientMockRegisterTransitGatewayMulticastGroupMembers                                sync.RWMutex
	lockec2ClientMockRegisterTransitGatewayMulticastGroupMembersRequest                         sync.RWMutex
	lockec2ClientMockRegisterTransitGatewayMulticastGroupMembersWithContext                     sync.RWMutex
	lockec2ClientMockRegisterTransitGatewayMulticastGroupSources                                sync.RWMutex
	lockec2ClientMockRegisterTransitGatewayMulticastGroupSourcesRequest                         sync.RWMutex
	lockec2ClientMockRegisterTransitGatewayMulticastGroupSourcesWithContext                     sync.RWMutex
	lockec2ClientMockRejectTransitGatewayPeeringAttachment                                      sync.RWMutex
	lockec2ClientMockRejectTransitGatewayPeeringAttachmentRequest                               sync.RWMutex
	lockec2ClientMockRejectTransitGatewayPeeringAttachmentWithContext                           sync.RWMutex
	lockec2ClientMockRejectTransitGatewayVpcAttachment                                          sync.RWMutex
	lockec2ClientMockRejectTransitGatewayVpcAttachmentRequest                                   sync.RWMutex
	lockec2ClientMockRejectTransitGatewayVpcAttachmentWithContext                               sync.RWMutex
	lockec2ClientMockRejectVpcEndpointConnections                                               sync.RWMutex
	lockec2ClientMockRejectVpcEndpointConnectionsRequest                                        sync.RWMutex
	lockec2ClientMockRejectVpcEndpointConnectionsWithContext                                    sync.RWMutex
	lockec2ClientMockRejectVpcPeeringConnection                                                 sync.RWMutex
	lockec2ClientMockRejectVpcPeeringConnectionRequest                                          sync.RWMutex
	lockec2ClientMockRejectVpcPeeringConnectionWithContext                                      sync.RWMutex
	lockec2ClientMockReleaseAddress                                                             sync.RWMutex
	lockec2ClientMockReleaseAddressRequest                                                      sync.RWMutex
	lockec2ClientMockReleaseAddressWithContext                                                  sync.RWMutex
	lockec2ClientMockReleaseHosts                                                               sync.RWMutex
	lockec2ClientMockReleaseHostsRequest                                                        sync.RWMutex
	lockec2ClientMockReleaseHostsWithContext                                                    sync.RWMutex
	lockec2ClientMockReplaceIamInstanceProfileAssociation                                       sync.RWMutex
	lockec2ClientMockReplaceIamInstanceProfileAssociationRequest                                sync.RWMutex
	lockec2ClientMockReplaceIamInstanceProfileAssociationWithContext                            sync.RWMutex
	lockec2ClientMockReplaceNetworkAclAssociation                                               sync.RWMutex
	lockec2ClientMockReplaceNetworkAclAssociationRequest                                        sync.RWMutex
	lockec2ClientMockReplaceNetworkAclAssociationWithContext                                    sync.RWMutex
	lockec2ClientMockReplaceNetworkAclEntry                                                     sync.RWMutex
	lockec2ClientMockReplaceNetworkAclEntryRequest                                              sync.RWMutex
	lockec2ClientMockReplaceNetworkAclEntryWithContext                                          sync.RWMutex
	lockec2ClientMockReplaceRoute                                                               sync.RWMutex
	lockec2ClientMockReplaceRouteRequest                                                        sync.RWMutex
	lockec2ClientMockReplaceRouteTableAssociation                                               sync.RWMutex
	lockec2ClientMockReplaceRouteTableAssociationRequest                                        sync.RWMutex
	lockec2ClientMockReplaceRouteTableAssociationWithContext                                    sync.RWMutex
	lockec2ClientMockReplaceRouteWithContext                                                    sync.RWMutex
	lockec2ClientMockReplaceTransitGatewayRoute                                                 sync.RWMutex
	lockec2ClientMockReplaceTransitGatewayRouteRequest                                          sync.RWMutex
	lockec2ClientMockReplaceTransitGatewayRouteWithContext                                      sync.RWMutex
	lockec2ClientMockReportInstanceStatus                                                       sync.RWMutex
	lockec2ClientMockReportInstanceStatusRequest                                                sync.RWMutex
	lockec2ClientMockReportInstanceStatusWithContext                                            sync.RWMutex
	lockec2ClientMockRequestSpotFleet                                                           sync.RWMutex
	lockec2ClientMockRequestSpotFleetRequest                                                    sync.RWMutex
	lockec2ClientMockRequestSpotFleetWithContext                                                sync.RWMutex
	lockec2ClientMockRequestSpotInstances                                                       sync.RWMutex
	lockec2ClientMockRequestSpotInstancesRequest                                                sync.RWMutex
	lockec2ClientMockRequestSpotInstancesWithContext                                            sync.RWMutex
	lockec2ClientMockResetEbsDefaultKmsKeyId                                                    sync.RWMutex
	lockec2ClientMockResetEbsDefaultKmsKeyIdRequest                                             sync.RWMutex
	lockec2ClientMockResetEbsDefaultKmsKeyIdWithContext                                         sync.RWMutex
	lockec2ClientMockResetFpgaImageAttribute                                                    sync.RWMutex
	lockec2ClientMockResetFpgaImageAttributeRequest                                             sync.RWMutex
	lockec2ClientMockResetFpgaImageAttributeWithContext                                         sync.RWMutex
	lockec2ClientMockResetImageAttribute                                                        sync.RWMutex
	lockec2ClientMockResetImageAttributeRequest                                                 sync.RWMutex
	lockec2ClientMockResetImageAttributeWithContext                                             sync.RWMutex
	lockec2ClientMockResetInstanceAttribute                                                     sync.RWMutex
	lockec2ClientMockResetInstanceAttributeRequest                                              sync.RWMutex
	lockec2ClientMockResetInstanceAttributeWithContext                                          sync.RWMutex
	lockec2ClientMockResetNetworkInterfaceAttribute                                             sync.RWMutex
	lockec2ClientMockResetNetworkInterfaceAttributeRequest                                      sync.RWMutex
	lockec2ClientMockResetNetworkInterfaceAttributeWithContext                                  sync.RWMutex
	lockec2ClientMockResetSnapshotAttribute                                                     sync.RWMutex
	lockec2ClientMockResetSnapshotAttributeRequest                                              sync.RWMutex
	lockec2ClientMockResetSnapshotAttributeWithContext                                          sync.RWMutex
	lockec2ClientMockRestoreAddressToClassic                                                    sync.RWMutex
	lockec2ClientMockRestoreAddressToClassicRequest                                             sync.RWMutex
	lockec2ClientMockRestoreAddressToClassicWithContext                                         sync.RWMutex
	lockec2ClientMockRevokeClientVpnIngress                                                     sync.RWMutex
	lockec2ClientMockRevokeClientVpnIngressRequest                                              sync.RWMutex
	lockec2ClientMockRevokeClientVpnIngressWithContext                                          sync.RWMutex
	lockec2ClientMockRevokeSecurityGroupEgress                                                  sync.RWMutex
	lockec2ClientMockRevokeSecurityGroupEgressRequest                                           sync.RWMutex
	lockec2ClientMockRevokeSecurityGroupEgressWithContext                                       sync.RWMutex
	lockec2ClientMockRevokeSecurityGroupIngress                                                 sync.RWMutex
	lockec2ClientMockRevokeSecurityGroupIngressRequest                                          sync.RWMutex
	lockec2ClientMockRevokeSecurityGroupIngressWithContext                                      sync.RWMutex
	lockec2ClientMockRunInstances                                                               sync.RWMutex
	lockec2ClientMockRunInstancesRequest                                                        sync.RWMutex
	lockec2ClientMockRunInstancesWithContext                                                    sync.RWMutex
	lockec2ClientMockRunScheduledInstances                                                      sync.RWMutex
	lockec2ClientMockRunScheduledInstancesRequest                                               sync.RWMutex
	lockec2ClientMockRunScheduledInstancesWithContext                                           sync.RWMutex
	lockec2ClientMockSearchLocalGatewayRoutes                                                   sync.RWMutex
	lockec2ClientMockSearchLocalGatewayRoutesRequest                                            sync.RWMutex
	lockec2ClientMockSearchLocalGatewayRoutesWithContext                                        sync.RWMutex
	lockec2ClientMockSearchTransitGatewayMulticastGroups                                        sync.RWMutex
	lockec2ClientMockSearchTransitGatewayMulticastGroupsRequest                                 sync.RWMutex
	lockec2ClientMockSearchTransitGatewayMulticastGroupsWithContext                             sync.RWMutex
	lockec2ClientMockSearchTransitGatewayRoutes                                                 sync.RWMutex
	lockec2ClientMockSearchTransitGatewayRoutesRequest                                          sync.RWMutex
	lockec2ClientMockSearchTransitGatewayRoutesWithContext                                      sync.RWMutex
	lockec2ClientMockSendDiagnosticInterrupt                                                    sync.RWMutex
	lockec2ClientMockSendDiagnosticInterruptRequest                                             sync.RWMutex
	lockec2ClientMockSendDiagnosticInterruptWithContext                                         sync.RWMutex
	lockec2ClientMockStartInstances                                                             sync.RWMutex
	lockec2ClientMockStartInstancesRequest                                                      sync.RWMutex
	lockec2ClientMockStartInstancesWithContext                                                  sync.RWMutex
	lockec2ClientMockStartVpcEndpointServicePrivateDnsVerification                              sync.RWMutex
	lockec2ClientMockStartVpcEndpointServicePrivateDnsVerificationRequest                       sync.RWMutex
	lockec2ClientMockStartVpcEndpointServicePrivateDnsVerificationWithContext                   sync.RWMutex
	lockec2ClientMockStopInstances                                                              sync.RWMutex
	lockec2ClientMockStopInstancesRequest                                                       sync.RWMutex
	lockec2ClientMockStopInstancesWithContext                                                   sync.RWMutex
	lockec2ClientMockTerminateClientVpnConnections                                              sync.RWMutex
	lockec2ClientMockTerminateClientVpnConnectionsRequest                                       sync.RWMutex
	lockec2ClientMockTerminateClientVpnConnectionsWithContext                                   sync.RWMutex
	lockec2ClientMockTerminateInstances                                                         sync.RWMutex
	lockec2ClientMockTerminateInstancesRequest                                                  sync.RWMutex
	lockec2ClientMockTerminateInstancesWithContext                                              sync.RWMutex
	lockec2ClientMockUnassignIpv6Addresses                                                      sync.RWMutex
	lockec2ClientMockUnassignIpv6AddressesRequest                                               sync.RWMutex
	lockec2ClientMockUnassignIpv6AddressesWithContext                                           sync.RWMutex
	lockec2ClientMockUnassignPrivateIpAddresses                                                 sync.RWMutex
	lockec2ClientMockUnassignPrivateIpAddressesRequest                                          sync.RWMutex
	lockec2ClientMockUnassignPrivateIpAddressesWithContext                                      sync.RWMutex
	lockec2ClientMockUnmonitorInstances                                                         sync.RWMutex
	lockec2ClientMockUnmonitorInstancesRequest                                                  sync.RWMutex
	lockec2ClientMockUnmonitorInstancesWithContext                                              sync.RWMutex
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsEgress                                  sync.RWMutex
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsEgressRequest                           sync.RWMutex
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsEgressWithContext                       sync.RWMutex
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsIngress                                 sync.RWMutex
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsIngressRequest                          sync.RWMutex
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsIngressWithContext                      sync.RWMutex
	lockec2ClientMockWaitUntilBundleTaskComplete                                                sync.RWMutex
	lockec2ClientMockWaitUntilBundleTaskCompleteWithContext                                     sync.RWMutex
	lockec2ClientMockWaitUntilConversionTaskCancelled                                           sync.RWMutex
	lockec2ClientMockWaitUntilConversionTaskCancelledWithContext                                sync.RWMutex
	lockec2ClientMockWaitUntilConversionTaskCompleted                                           sync.RWMutex
	lockec2ClientMockWaitUntilConversionTaskCompletedWithContext                                sync.RWMutex
	lockec2ClientMockWaitUntilConversionTaskDeleted                                             sync.RWMutex
	lockec2ClientMockWaitUntilConversionTaskDeletedWithContext                                  sync.RWMutex
	lockec2ClientMockWaitUntilCustomerGatewayAvailable                                          sync.RWMutex
	lockec2ClientMockWaitUntilCustomerGatewayAvailableWithContext                               sync.RWMutex
	lockec2ClientMockWaitUntilExportTaskCancelled                                               sync.RWMutex
	lockec2ClientMockWaitUntilExportTaskCancelledWithContext                                    sync.RWMutex
	lockec2ClientMockWaitUntilExportTaskCompleted                                               sync.RWMutex
	lockec2ClientMockWaitUntilExportTaskCompletedWithContext                                    sync.RWMutex
	lockec2ClientMockWaitUntilImageAvailable                                                    sync.RWMutex
	lockec2ClientMockWaitUntilImageAvailableWithContext                                         sync.RWMutex
	lockec2ClientMockWaitUntilImageExists                                                       sync.RWMutex
	lockec2ClientMockWaitUntilImageExistsWithContext                                            sync.RWMutex
	lockec2ClientMockWaitUntilInstanceExists                                                    sync.RWMutex
	lockec2ClientMockWaitUntilInstanceExistsWithContext                                         sync.RWMutex
	lockec2ClientMockWaitUntilInstanceRunning                                                   sync.RWMutex
	lockec2ClientMockWaitUntilInstanceRunningWithContext                                        sync.RWMutex
	lockec2ClientMockWaitUntilInstanceStatusOk                                                  sync.RWMutex
	lockec2ClientMockWaitUntilInstanceStatusOkWithContext                                       sync.RWMutex
	lockec2ClientMockWaitUntilInstanceStopped                                                   sync.RWMutex
	lockec2ClientMockWaitUntilInstanceStoppedWithContext                                        sync.RWMutex
	lockec2ClientMockWaitUntilInstanceTerminated                                                sync.RWMutex
	lockec2ClientMockWaitUntilInstanceTerminatedWithContext                                     sync.RWMutex
	lockec2ClientMockWaitUntilKeyPairExists                                                     sync.RWMutex
	lockec2ClientMockWaitUntilKeyPairExistsWithContext                                          sync.RWMutex
	lockec2ClientMockWaitUntilNatGatewayAvailable                                               sync.RWMutex
	lockec2ClientMockWaitUntilNatGatewayAvailableWithContext                                    sync.RWMutex
	lockec2ClientMockWaitUntilNetworkInterfaceAvailable                                         sync.RWMutex
	lockec2ClientMockWaitUntilNetworkInterfaceAvailableWithContext                              sync.RWMutex
	lockec2ClientMockWaitUntilPasswordDataAvailable                                             sync.RWMutex
	lockec2ClientMockWaitUntilPasswordDataAvailableWithContext                                  sync.RWMutex
	lockec2ClientMockWaitUntilSecurityGroupExists                                               sync.RWMutex
	lockec2ClientMockWaitUntilSecurityGroupExistsWithContext                                    sync.RWMutex
	lockec2ClientMockWaitUntilSnapshotCompleted                                                 sync.RWMutex
	lockec2ClientMockWaitUntilSnapshotCompletedWithContext                                      sync.RWMutex
	lockec2ClientMockWaitUntilSpotInstanceRequestFulfilled                                      sync.RWMutex
	lockec2ClientMockWaitUntilSpotInstanceRequestFulfilledWithContext                           sync.RWMutex
	lockec2ClientMockWaitUntilSubnetAvailable                                                   sync.RWMutex
	lockec2ClientMockWaitUntilSubnetAvailableWithContext                                        sync.RWMutex
	lockec2ClientMockWaitUntilSystemStatusOk                                                    sync.RWMutex
	lockec2ClientMockWaitUntilSystemStatusOkWithContext                                         sync.RWMutex
	lockec2ClientMockWaitUntilVolumeAvailable                                                   sync.RWMutex
	lockec2ClientMockWaitUntilVolumeAvailableWithContext                                        sync.RWMutex
	lockec2ClientMockWaitUntilVolumeDeleted                                                     sync.RWMutex
	lockec2ClientMockWaitUntilVolumeDeletedWithContext                                          sync.RWMutex
	lockec2ClientMockWaitUntilVolumeInUse                                                       sync.RWMutex
	lockec2ClientMockWaitUntilVolumeInUseWithContext                                            sync.RWMutex
	lockec2ClientMockWaitUntilVpcAvailable                                                      sync.RWMutex
	lockec2ClientMockWaitUntilVpcAvailableWithContext                                           sync.RWMutex
	lockec2ClientMockWaitUntilVpcExists                                                         sync.RWMutex
	lockec2ClientMockWaitUntilVpcExistsWithContext                                              sync.RWMutex
	lockec2ClientMockWaitUntilVpcPeeringConnectionDeleted                                       sync.RWMutex
	lockec2ClientMockWaitUntilVpcPeeringConnectionDeletedWithContext                            sync.RWMutex
	lockec2ClientMockWaitUntilVpcPeeringConnectionExists                                        sync.RWMutex
	lockec2ClientMockWaitUntilVpcPeeringConnectionExistsWithContext                             sync.RWMutex
	lockec2ClientMockWaitUntilVpnConnectionAvailable                                            sync.RWMutex
	lockec2ClientMockWaitUntilVpnConnectionAvailableWithContext                                 sync.RWMutex
	lockec2ClientMockWaitUntilVpnConnectionDeleted                                              sync.RWMutex
	lockec2ClientMockWaitUntilVpnConnectionDeletedWithContext                                   sync.RWMutex
	lockec2ClientMockWithdrawByoipCidr                                                          sync.RWMutex
	lockec2ClientMockWithdrawByoipCidrRequest                                                   sync.RWMutex
	lockec2ClientMockWithdrawByoipCidrWithContext                                               sync.RWMutex
)

// Ensure, that ec2ClientMock does implement ec2Client.
// If this is not the case, regenerate this file with moq.
var _ ec2Client = &ec2ClientMock{}

// ec2ClientMock is a mock implementation of ec2Client.
//
//     func TestSomethingThatUsesec2Client(t *testing.T) {
//
//         // make and configure a mocked ec2Client
//         mockedec2Client := &ec2ClientMock{
//             AcceptReservedInstancesExchangeQuoteFunc: func(in1 *ec2.AcceptReservedInstancesExchangeQuoteInput) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error) {
// 	               panic("mock out the AcceptReservedInstancesExchangeQuote method")
//             },
//             AcceptReservedInstancesExchangeQuoteRequestFunc: func(in1 *ec2.AcceptReservedInstancesExchangeQuoteInput) (*request.Request, *ec2.AcceptReservedInstancesExchangeQuoteOutput) {
// 	               panic("mock out the AcceptReservedInstancesExchangeQuoteRequest method")
//             },
//             AcceptReservedInstancesExchangeQuoteWithContextFunc: func(in1 context.Context, in2 *ec2.AcceptReservedInstancesExchangeQuoteInput, in3 ...request.Option) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error) {
// 	               panic("mock out the AcceptReservedInstancesExchangeQuoteWithContext method")
//             },
//             AcceptTransitGatewayPeeringAttachmentFunc: func(in1 *ec2.AcceptTransitGatewayPeeringAttachmentInput) (*ec2.AcceptTransitGatewayPeeringAttachmentOutput, error) {
// 	               panic("mock out the AcceptTransitGatewayPeeringAttachment method")
//             },
//             AcceptTransitGatewayPeeringAttachmentRequestFunc: func(in1 *ec2.AcceptTransitGatewayPeeringAttachmentInput) (*request.Request, *ec2.AcceptTransitGatewayPeeringAttachmentOutput) {
// 	               panic("mock out the AcceptTransitGatewayPeeringAttachmentRequest method")
//             },
//             AcceptTransitGatewayPeeringAttachmentWithContextFunc: func(in1 context.Context, in2 *ec2.AcceptTransitGatewayPeeringAttachmentInput, in3 ...request.Option) (*ec2.AcceptTransitGatewayPeeringAttachmentOutput, error) {
// 	               panic("mock out the AcceptTransitGatewayPeeringAttachmentWithContext method")
//             },
//             AcceptTransitGatewayVpcAttachmentFunc: func(in1 *ec2.AcceptTransitGatewayVpcAttachmentInput) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error) {
// 	               panic("mock out the AcceptTransitGatewayVpcAttachment method")
//             },
//             AcceptTransitGatewayVpcAttachmentRequestFunc: func(in1 *ec2.AcceptTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.AcceptTransitGatewayVpcAttachmentOutput) {
// 	               panic("mock out the AcceptTransitGatewayVpcAttachmentRequest method")
//             },
//             AcceptTransitGatewayVpcAttachmentWithContextFunc: func(in1 context.Context, in2 *ec2.AcceptTransitGatewayVpcAttachmentInput, in3 ...request.Option) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error) {
// 	               panic("mock out the AcceptTransitGatewayVpcAttachmentWithContext method")
//             },
//             AcceptVpcEndpointConnectionsFunc: func(in1 *ec2.AcceptVpcEndpointConnectionsInput) (*ec2.AcceptVpcEndpointConnectionsOutput, error) {
// 	               panic("mock out the AcceptVpcEndpointConnections method")
//             },
//             AcceptVpcEndpointConnectionsRequestFunc: func(in1 *ec2.AcceptVpcEndpointConnectionsInput) (*request.Request, *ec2.AcceptVpcEndpointConnectionsOutput) {
// 	               panic("mock out the AcceptVpcEndpointConnectionsRequest method")
//             },
//             AcceptVpcEndpointConnectionsWithContextFunc: func(in1 context.Context, in2 *ec2.AcceptVpcEndpointConnectionsInput, in3 ...request.Option) (*ec2.AcceptVpcEndpointConnectionsOutput, error) {
// 	               panic("mock out the AcceptVpcEndpointConnectionsWithContext method")
//             },
//             AcceptVpcPeeringConnectionFunc: func(in1 *ec2.AcceptVpcPeeringConnectionInput) (*ec2.AcceptVpcPeeringConnectionOutput, error) {
// 	               panic("mock out the AcceptVpcPeeringConnection method")
//             },
//             AcceptVpcPeeringConnectionRequestFunc: func(in1 *ec2.AcceptVpcPeeringConnectionInput) (*request.Request, *ec2.AcceptVpcPeeringConnectionOutput) {
// 	               panic("mock out the AcceptVpcPeeringConnectionRequest method")
//             },
//             AcceptVpcPeeringConnectionWithContextFunc: func(in1 context.Context, in2 *ec2.AcceptVpcPeeringConnectionInput, in3 ...request.Option) (*ec2.AcceptVpcPeeringConnectionOutput, error) {
// 	               panic("mock out the AcceptVpcPeeringConnectionWithContext method")
//             },
//             AdvertiseByoipCidrFunc: func(in1 *ec2.AdvertiseByoipCidrInput) (*ec2.AdvertiseByoipCidrOutput, error) {
// 	               panic("mock out the AdvertiseByoipCidr method")
//             },
//             AdvertiseByoipCidrRequestFunc: func(in1 *ec2.AdvertiseByoipCidrInput) (*request.Request, *ec2.AdvertiseByoipCidrOutput) {
// 	               panic("mock out the AdvertiseByoipCidrRequest method")
//             },
//             AdvertiseByoipCidrWithContextFunc: func(in1 context.Context, in2 *ec2.AdvertiseByoipCidrInput, in3 ...request.Option) (*ec2.AdvertiseByoipCidrOutput, error) {
// 	               panic("mock out the AdvertiseByoipCidrWithContext method")
//             },
//             AllocateAddressFunc: func(in1 *ec2.AllocateAddressInput) (*ec2.AllocateAddressOutput, error) {
// 	               panic("mock out the AllocateAddress method")
//             },
//             AllocateAddressRequestFunc: func(in1 *ec2.AllocateAddressInput) (*request.Request, *ec2.AllocateAddressOutput) {
// 	               panic("mock out the AllocateAddressRequest method")
//             },
//             AllocateAddressWithContextFunc: func(in1 context.Context, in2 *ec2.AllocateAddressInput, in3 ...request.Option) (*ec2.AllocateAddressOutput, error) {
// 	               panic("mock out the AllocateAddressWithContext method")
//             },
//             AllocateHostsFunc: func(in1 *ec2.AllocateHostsInput) (*ec2.AllocateHostsOutput, error) {
// 	               panic("mock out the AllocateHosts method")
//             },
//             AllocateHostsRequestFunc: func(in1 *ec2.AllocateHostsInput) (*request.Request, *ec2.AllocateHostsOutput) {
// 	               panic("mock out the AllocateHostsRequest method")
//             },
//             AllocateHostsWithContextFunc: func(in1 context.Context, in2 *ec2.AllocateHostsInput, in3 ...request.Option) (*ec2.AllocateHostsOutput, error) {
// 	               panic("mock out the AllocateHostsWithContext method")
//             },
//             ApplySecurityGroupsToClientVpnTargetNetworkFunc: func(in1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, error) {
// 	               panic("mock out the ApplySecurityGroupsToClientVpnTargetNetwork method")
//             },
//             ApplySecurityGroupsToClientVpnTargetNetworkRequestFunc: func(in1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) (*request.Request, *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput) {
// 	               panic("mock out the ApplySecurityGroupsToClientVpnTargetNetworkRequest method")
//             },
//             ApplySecurityGroupsToClientVpnTargetNetworkWithContextFunc: func(in1 context.Context, in2 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput, in3 ...request.Option) (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, error) {
// 	               panic("mock out the ApplySecurityGroupsToClientVpnTargetNetworkWithContext method")
//             },
//             AssignIpv6AddressesFunc: func(in1 *ec2.AssignIpv6AddressesInput) (*ec2.AssignIpv6AddressesOutput, error) {
// 	               panic("mock out the AssignIpv6Addresses method")
//             },
//             AssignIpv6AddressesRequestFunc: func(in1 *ec2.AssignIpv6AddressesInput) (*request.Request, *ec2.AssignIpv6AddressesOutput) {
// 	               panic("mock out the AssignIpv6AddressesRequest method")
//             },
//             AssignIpv6AddressesWithContextFunc: func(in1 context.Context, in2 *ec2.AssignIpv6AddressesInput, in3 ...request.Option) (*ec2.AssignIpv6AddressesOutput, error) {
// 	               panic("mock out the AssignIpv6AddressesWithContext method")
//             },
//             AssignPrivateIpAddressesFunc: func(in1 *ec2.AssignPrivateIpAddressesInput) (*ec2.AssignPrivateIpAddressesOutput, error) {
// 	               panic("mock out the AssignPrivateIpAddresses method")
//             },
//             AssignPrivateIpAddressesRequestFunc: func(in1 *ec2.AssignPrivateIpAddressesInput) (*request.Request, *ec2.AssignPrivateIpAddressesOutput) {
// 	               panic("mock out the AssignPrivateIpAddressesRequest method")
//             },
//             AssignPrivateIpAddressesWithContextFunc: func(in1 context.Context, in2 *ec2.AssignPrivateIpAddressesInput, in3 ...request.Option) (*ec2.AssignPrivateIpAddressesOutput, error) {
// 	               panic("mock out the AssignPrivateIpAddressesWithContext method")
//             },
//             AssociateAddressFunc: func(in1 *ec2.AssociateAddressInput) (*ec2.AssociateAddressOutput, error) {
// 	               panic("mock out the AssociateAddress method")
//             },
//             AssociateAddressRequestFunc: func(in1 *ec2.AssociateAddressInput) (*request.Request, *ec2.AssociateAddressOutput) {
// 	               panic("mock out the AssociateAddressRequest method")
//             },
//             AssociateAddressWithContextFunc: func(in1 context.Context, in2 *ec2.AssociateAddressInput, in3 ...request.Option) (*ec2.AssociateAddressOutput, error) {
// 	               panic("mock out the AssociateAddressWithContext method")
//             },
//             AssociateClientVpnTargetNetworkFunc: func(in1 *ec2.AssociateClientVpnTargetNetworkInput) (*ec2.AssociateClientVpnTargetNetworkOutput, error) {
// 	               panic("mock out the AssociateClientVpnTargetNetwork method")
//             },
//             AssociateClientVpnTargetNetworkRequestFunc: func(in1 *ec2.AssociateClientVpnTargetNetworkInput) (*request.Request, *ec2.AssociateClientVpnTargetNetworkOutput) {
// 	               panic("mock out the AssociateClientVpnTargetNetworkRequest method")
//             },
//             AssociateClientVpnTargetNetworkWithContextFunc: func(in1 context.Context, in2 *ec2.AssociateClientVpnTargetNetworkInput, in3 ...request.Option) (*ec2.AssociateClientVpnTargetNetworkOutput, error) {
// 	               panic("mock out the AssociateClientVpnTargetNetworkWithContext method")
//             },
//             AssociateDhcpOptionsFunc: func(in1 *ec2.AssociateDhcpOptionsInput) (*ec2.AssociateDhcpOptionsOutput, error) {
// 	               panic("mock out the AssociateDhcpOptions method")
//             },
//             AssociateDhcpOptionsRequestFunc: func(in1 *ec2.AssociateDhcpOptionsInput) (*request.Request, *ec2.AssociateDhcpOptionsOutput) {
// 	               panic("mock out the AssociateDhcpOptionsRequest method")
//             },
//             AssociateDhcpOptionsWithContextFunc: func(in1 context.Context, in2 *ec2.AssociateDhcpOptionsInput, in3 ...request.Option) (*ec2.AssociateDhcpOptionsOutput, error) {
// 	               panic("mock out the AssociateDhcpOptionsWithContext method")
//             },
//             AssociateIamInstanceProfileFunc: func(in1 *ec2.AssociateIamInstanceProfileInput) (*ec2.AssociateIamInstanceProfileOutput, error) {
// 	               panic("mock out the AssociateIamInstanceProfile method")
//             },
//             AssociateIamInstanceProfileRequestFunc: func(in1 *ec2.AssociateIamInstanceProfileInput) (*request.Request, *ec2.AssociateIamInstanceProfileOutput) {
// 	               panic("mock out the AssociateIamInstanceProfileRequest method")
//             },
//             AssociateIamInstanceProfileWithContextFunc: func(in1 context.Context, in2 *ec2.AssociateIamInstanceProfileInput, in3 ...request.Option) (*ec2.AssociateIamInstanceProfileOutput, error) {
// 	               panic("mock out the AssociateIamInstanceProfileWithContext method")
//             },
//             AssociateRouteTableFunc: func(in1 *ec2.AssociateRouteTableInput) (*ec2.AssociateRouteTableOutput, error) {
// 	               panic("mock out the AssociateRouteTable method")
//             },
//             AssociateRouteTableRequestFunc: func(in1 *ec2.AssociateRouteTableInput) (*request.Request, *ec2.AssociateRouteTableOutput) {
// 	               panic("mock out the AssociateRouteTableRequest method")
//             },
//             AssociateRouteTableWithContextFunc: func(in1 context.Context, in2 *ec2.AssociateRouteTableInput, in3 ...request.Option) (*ec2.AssociateRouteTableOutput, error) {
// 	               panic("mock out the AssociateRouteTableWithContext method")
//             },
//             AssociateSubnetCidrBlockFunc: func(in1 *ec2.AssociateSubnetCidrBlockInput) (*ec2.AssociateSubnetCidrBlockOutput, error) {
// 	               panic("mock out the AssociateSubnetCidrBlock method")
//             },
//             AssociateSubnetCidrBlockRequestFunc: func(in1 *ec2.AssociateSubnetCidrBlockInput) (*request.Request, *ec2.AssociateSubnetCidrBlockOutput) {
// 	               panic("mock out the AssociateSubnetCidrBlockRequest method")
//             },
//             AssociateSubnetCidrBlockWithContextFunc: func(in1 context.Context, in2 *ec2.AssociateSubnetCidrBlockInput, in3 ...request.Option) (*ec2.AssociateSubnetCidrBlockOutput, error) {
// 	               panic("mock out the AssociateSubnetCidrBlockWithContext method")
//             },
//             AssociateTransitGatewayMulticastDomainFunc: func(in1 *ec2.AssociateTransitGatewayMulticastDomainInput) (*ec2.AssociateTransitGatewayMulticastDomainOutput, error) {
// 	               panic("mock out the AssociateTransitGatewayMulticastDomain method")
//             },
//             AssociateTransitGatewayMulticastDomainRequestFunc: func(in1 *ec2.AssociateTransitGatewayMulticastDomainInput) (*request.Request, *ec2.AssociateTransitGatewayMulticastDomainOutput) {
// 	               panic("mock out the AssociateTransitGatewayMulticastDomainRequest method")
//             },
//             AssociateTransitGatewayMulticastDomainWithContextFunc: func(in1 context.Context, in2 *ec2.AssociateTransitGatewayMulticastDomainInput, in3 ...request.Option) (*ec2.AssociateTransitGatewayMulticastDomainOutput, error) {
// 	               panic("mock out the AssociateTransitGatewayMulticastDomainWithContext method")
//             },
//             AssociateTransitGatewayRouteTableFunc: func(in1 *ec2.AssociateTransitGatewayRouteTableInput) (*ec2.AssociateTransitGatewayRouteTableOutput, error) {
// 	               panic("mock out the AssociateTransitGatewayRouteTable method")
//             },
//             AssociateTransitGatewayRouteTableRequestFunc: func(in1 *ec2.AssociateTransitGatewayRouteTableInput) (*request.Request, *ec2.AssociateTransitGatewayRouteTableOutput) {
// 	               panic("mock out the AssociateTransitGatewayRouteTableRequest method")
//             },
//             AssociateTransitGatewayRouteTableWithContextFunc: func(in1 context.Context, in2 *ec2.AssociateTransitGatewayRouteTableInput, in3 ...request.Option) (*ec2.AssociateTransitGatewayRouteTableOutput, error) {
// 	               panic("mock out the AssociateTransitGatewayRouteTableWithContext method")
//             },
//             AssociateVpcCidrBlockFunc: func(in1 *ec2.AssociateVpcCidrBlockInput) (*ec2.AssociateVpcCidrBlockOutput, error) {
// 	               panic("mock out the AssociateVpcCidrBlock method")
//             },
//             AssociateVpcCidrBlockRequestFunc: func(in1 *ec2.AssociateVpcCidrBlockInput) (*request.Request, *ec2.AssociateVpcCidrBlockOutput) {
// 	               panic("mock out the AssociateVpcCidrBlockRequest method")
//             },
//             AssociateVpcCidrBlockWithContextFunc: func(in1 context.Context, in2 *ec2.AssociateVpcCidrBlockInput, in3 ...request.Option) (*ec2.AssociateVpcCidrBlockOutput, error) {
// 	               panic("mock out the AssociateVpcCidrBlockWithContext method")
//             },
//             AttachClassicLinkVpcFunc: func(in1 *ec2.AttachClassicLinkVpcInput) (*ec2.AttachClassicLinkVpcOutput, error) {
// 	               panic("mock out the AttachClassicLinkVpc method")
//             },
//             AttachClassicLinkVpcRequestFunc: func(in1 *ec2.AttachClassicLinkVpcInput) (*request.Request, *ec2.AttachClassicLinkVpcOutput) {
// 	               panic("mock out the AttachClassicLinkVpcRequest method")
//             },
//             AttachClassicLinkVpcWithContextFunc: func(in1 context.Context, in2 *ec2.AttachClassicLinkVpcInput, in3 ...request.Option) (*ec2.AttachClassicLinkVpcOutput, error) {
// 	               panic("mock out the AttachClassicLinkVpcWithContext method")
//             },
//             AttachInternetGatewayFunc: func(in1 *ec2.AttachInternetGatewayInput) (*ec2.AttachInternetGatewayOutput, error) {
// 	               panic("mock out the AttachInternetGateway method")
//             },
//             AttachInternetGatewayRequestFunc: func(in1 *ec2.AttachInternetGatewayInput) (*request.Request, *ec2.AttachInternetGatewayOutput) {
// 	               panic("mock out the AttachInternetGatewayRequest method")
//             },
//             AttachInternetGatewayWithContextFunc: func(in1 context.Context, in2 *ec2.AttachInternetGatewayInput, in3 ...request.Option) (*ec2.AttachInternetGatewayOutput, error) {
// 	               panic("mock out the AttachInternetGatewayWithContext method")
//             },
//             AttachNetworkInterfaceFunc: func(in1 *ec2.AttachNetworkInterfaceInput) (*ec2.AttachNetworkInterfaceOutput, error) {
// 	               panic("mock out the AttachNetworkInterface method")
//             },
//             AttachNetworkInterfaceRequestFunc: func(in1 *ec2.AttachNetworkInterfaceInput) (*request.Request, *ec2.AttachNetworkInterfaceOutput) {
// 	               panic("mock out the AttachNetworkInterfaceRequest method")
//             },
//             AttachNetworkInterfaceWithContextFunc: func(in1 context.Context, in2 *ec2.AttachNetworkInterfaceInput, in3 ...request.Option) (*ec2.AttachNetworkInterfaceOutput, error) {
// 	               panic("mock out the AttachNetworkInterfaceWithContext method")
//             },
//             AttachVolumeFunc: func(in1 *ec2.AttachVolumeInput) (*ec2.VolumeAttachment, error) {
// 	               panic("mock out the AttachVolume method")
//             },
//             AttachVolumeRequestFunc: func(in1 *ec2.AttachVolumeInput) (*request.Request, *ec2.VolumeAttachment) {
// 	               panic("mock out the AttachVolumeRequest method")
//             },
//             AttachVolumeWithContextFunc: func(in1 context.Context, in2 *ec2.AttachVolumeInput, in3 ...request.Option) (*ec2.VolumeAttachment, error) {
// 	               panic("mock out the AttachVolumeWithContext method")
//             },
//             AttachVpnGatewayFunc: func(in1 *ec2.AttachVpnGatewayInput) (*ec2.AttachVpnGatewayOutput, error) {
// 	               panic("mock out the AttachVpnGateway method")
//             },
//             AttachVpnGatewayRequestFunc: func(in1 *ec2.AttachVpnGatewayInput) (*request.Request, *ec2.AttachVpnGatewayOutput) {
// 	               panic("mock out the AttachVpnGatewayRequest method")
//             },
//             AttachVpnGatewayWithContextFunc: func(in1 context.Context, in2 *ec2.AttachVpnGatewayInput, in3 ...request.Option) (*ec2.AttachVpnGatewayOutput, error) {
// 	               panic("mock out the AttachVpnGatewayWithContext method")
//             },
//             AuthorizeClientVpnIngressFunc: func(in1 *ec2.AuthorizeClientVpnIngressInput) (*ec2.AuthorizeClientVpnIngressOutput, error) {
// 	               panic("mock out the AuthorizeClientVpnIngress method")
//             },
//             AuthorizeClientVpnIngressRequestFunc: func(in1 *ec2.AuthorizeClientVpnIngressInput) (*request.Request, *ec2.AuthorizeClientVpnIngressOutput) {
// 	               panic("mock out the AuthorizeClientVpnIngressRequest method")
//             },
//             AuthorizeClientVpnIngressWithContextFunc: func(in1 context.Context, in2 *ec2.AuthorizeClientVpnIngressInput, in3 ...request.Option) (*ec2.AuthorizeClientVpnIngressOutput, error) {
// 	               panic("mock out the AuthorizeClientVpnIngressWithContext method")
//             },
//             AuthorizeSecurityGroupEgressFunc: func(in1 *ec2.AuthorizeSecurityGroupEgressInput) (*ec2.AuthorizeSecurityGroupEgressOutput, error) {
// 	               panic("mock out the AuthorizeSecurityGroupEgress method")
//             },
//             AuthorizeSecurityGroupEgressRequestFunc: func(in1 *ec2.AuthorizeSecurityGroupEgressInput) (*request.Request, *ec2.AuthorizeSecurityGroupEgressOutput) {
// 	               panic("mock out the AuthorizeSecurityGroupEgressRequest method")
//             },
//             AuthorizeSecurityGroupEgressWithContextFunc: func(in1 context.Context, in2 *ec2.AuthorizeSecurityGroupEgressInput, in3 ...request.Option) (*ec2.AuthorizeSecurityGroupEgressOutput, error) {
// 	               panic("mock out the AuthorizeSecurityGroupEgressWithContext method")
//             },
//             AuthorizeSecurityGroupIngressFunc: func(in1 *ec2.AuthorizeSecurityGroupIngressInput) (*ec2.AuthorizeSecurityGroupIngressOutput, error) {
// 	               panic("mock out the AuthorizeSecurityGroupIngress method")
//             },
//             AuthorizeSecurityGroupIngressRequestFunc: func(in1 *ec2.AuthorizeSecurityGroupIngressInput) (*request.Request, *ec2.AuthorizeSecurityGroupIngressOutput) {
// 	               panic("mock out the AuthorizeSecurityGroupIngressRequest method")
//             },
//             AuthorizeSecurityGroupIngressWithContextFunc: func(in1 context.Context, in2 *ec2.AuthorizeSecurityGroupIngressInput, in3 ...request.Option) (*ec2.AuthorizeSecurityGroupIngressOutput, error) {
// 	               panic("mock out the AuthorizeSecurityGroupIngressWithContext method")
//             },
//             BundleInstanceFunc: func(in1 *ec2.BundleInstanceInput) (*ec2.BundleInstanceOutput, error) {
// 	               panic("mock out the BundleInstance method")
//             },
//             BundleInstanceRequestFunc: func(in1 *ec2.BundleInstanceInput) (*request.Request, *ec2.BundleInstanceOutput) {
// 	               panic("mock out the BundleInstanceRequest method")
//             },
//             BundleInstanceWithContextFunc: func(in1 context.Context, in2 *ec2.BundleInstanceInput, in3 ...request.Option) (*ec2.BundleInstanceOutput, error) {
// 	               panic("mock out the BundleInstanceWithContext method")
//             },
//             CancelBundleTaskFunc: func(in1 *ec2.CancelBundleTaskInput) (*ec2.CancelBundleTaskOutput, error) {
// 	               panic("mock out the CancelBundleTask method")
//             },
//             CancelBundleTaskRequestFunc: func(in1 *ec2.CancelBundleTaskInput) (*request.Request, *ec2.CancelBundleTaskOutput) {
// 	               panic("mock out the CancelBundleTaskRequest method")
//             },
//             CancelBundleTaskWithContextFunc: func(in1 context.Context, in2 *ec2.CancelBundleTaskInput, in3 ...request.Option) (*ec2.CancelBundleTaskOutput, error) {
// 	               panic("mock out the CancelBundleTaskWithContext method")
//             },
//             CancelCapacityReservationFunc: func(in1 *ec2.CancelCapacityReservationInput) (*ec2.CancelCapacityReservationOutput, error) {
// 	               panic("mock out the CancelCapacityReservation method")
//             },
//             CancelCapacityReservationRequestFunc: func(in1 *ec2.CancelCapacityReservationInput) (*request.Request, *ec2.CancelCapacityReservationOutput) {
// 	               panic("mock out the CancelCapacityReservationRequest method")
//             },
//             CancelCapacityReservationWithContextFunc: func(in1 context.Context, in2 *ec2.CancelCapacityReservationInput, in3 ...request.Option) (*ec2.CancelCapacityReservationOutput, error) {
// 	               panic("mock out the CancelCapacityReservationWithContext method")
//             },
//             CancelConversionTaskFunc: func(in1 *ec2.CancelConversionTaskInput) (*ec2.CancelConversionTaskOutput, error) {
// 	               panic("mock out the CancelConversionTask method")
//             },
//             CancelConversionTaskRequestFunc: func(in1 *ec2.CancelConversionTaskInput) (*request.Request, *ec2.CancelConversionTaskOutput) {
// 	               panic("mock out the CancelConversionTaskRequest method")
//             },
//             CancelConversionTaskWithContextFunc: func(in1 context.Context, in2 *ec2.CancelConversionTaskInput, in3 ...request.Option) (*ec2.CancelConversionTaskOutput, error) {
// 	               panic("mock out the CancelConversionTaskWithContext method")
//             },
//             CancelExportTaskFunc: func(in1 *ec2.CancelExportTaskInput) (*ec2.CancelExportTaskOutput, error) {
// 	               panic("mock out the CancelExportTask method")
//             },
//             CancelExportTaskRequestFunc: func(in1 *ec2.CancelExportTaskInput) (*request.Request, *ec2.CancelExportTaskOutput) {
// 	               panic("mock out the CancelExportTaskRequest method")
//             },
//             CancelExportTaskWithContextFunc: func(in1 context.Context, in2 *ec2.CancelExportTaskInput, in3 ...request.Option) (*ec2.CancelExportTaskOutput, error) {
// 	               panic("mock out the CancelExportTaskWithContext method")
//             },
//             CancelImportTaskFunc: func(in1 *ec2.CancelImportTaskInput) (*ec2.CancelImportTaskOutput, error) {
// 	               panic("mock out the CancelImportTask method")
//             },
//             CancelImportTaskRequestFunc: func(in1 *ec2.CancelImportTaskInput) (*request.Request, *ec2.CancelImportTaskOutput) {
// 	               panic("mock out the CancelImportTaskRequest method")
//             },
//             CancelImportTaskWithContextFunc: func(in1 context.Context, in2 *ec2.CancelImportTaskInput, in3 ...request.Option) (*ec2.CancelImportTaskOutput, error) {
// 	               panic("mock out the CancelImportTaskWithContext method")
//             },
//             CancelReservedInstancesListingFunc: func(in1 *ec2.CancelReservedInstancesListingInput) (*ec2.CancelReservedInstancesListingOutput, error) {
// 	               panic("mock out the CancelReservedInstancesListing method")
//             },
//             CancelReservedInstancesListingRequestFunc: func(in1 *ec2.CancelReservedInstancesListingInput) (*request.Request, *ec2.CancelReservedInstancesListingOutput) {
// 	               panic("mock out the CancelReservedInstancesListingRequest method")
//             },
//             CancelReservedInstancesListingWithContextFunc: func(in1 context.Context, in2 *ec2.CancelReservedInstancesListingInput, in3 ...request.Option) (*ec2.CancelReservedInstancesListingOutput, error) {
// 	               panic("mock out the CancelReservedInstancesListingWithContext method")
//             },
//             CancelSpotFleetRequestsFunc: func(in1 *ec2.CancelSpotFleetRequestsInput) (*ec2.CancelSpotFleetRequestsOutput, error) {
// 	               panic("mock out the CancelSpotFleetRequests method")
//             },
//             CancelSpotFleetRequestsRequestFunc: func(in1 *ec2.CancelSpotFleetRequestsInput) (*request.Request, *ec2.CancelSpotFleetRequestsOutput) {
// 	               panic("mock out the CancelSpotFleetRequestsRequest method")
//             },
//             CancelSpotFleetRequestsWithContextFunc: func(in1 context.Context, in2 *ec2.CancelSpotFleetRequestsInput, in3 ...request.Option) (*ec2.CancelSpotFleetRequestsOutput, error) {
// 	               panic("mock out the CancelSpotFleetRequestsWithContext method")
//             },
//             CancelSpotInstanceRequestsFunc: func(in1 *ec2.CancelSpotInstanceRequestsInput) (*ec2.CancelSpotInstanceRequestsOutput, error) {
// 	               panic("mock out the CancelSpotInstanceRequests method")
//             },
//             CancelSpotInstanceRequestsRequestFunc: func(in1 *ec2.CancelSpotInstanceRequestsInput) (*request.Request, *ec2.CancelSpotInstanceRequestsOutput) {
// 	               panic("mock out the CancelSpotInstanceRequestsRequest method")
//             },
//             CancelSpotInstanceRequestsWithContextFunc: func(in1 context.Context, in2 *ec2.CancelSpotInstanceRequestsInput, in3 ...request.Option) (*ec2.CancelSpotInstanceRequestsOutput, error) {
// 	               panic("mock out the CancelSpotInstanceRequestsWithContext method")
//             },
//             ConfirmProductInstanceFunc: func(in1 *ec2.ConfirmProductInstanceInput) (*ec2.ConfirmProductInstanceOutput, error) {
// 	               panic("mock out the ConfirmProductInstance method")
//             },
//             ConfirmProductInstanceRequestFunc: func(in1 *ec2.ConfirmProductInstanceInput) (*request.Request, *ec2.ConfirmProductInstanceOutput) {
// 	               panic("mock out the ConfirmProductInstanceRequest method")
//             },
//             ConfirmProductInstanceWithContextFunc: func(in1 context.Context, in2 *ec2.ConfirmProductInstanceInput, in3 ...request.Option) (*ec2.ConfirmProductInstanceOutput, error) {
// 	               panic("mock out the ConfirmProductInstanceWithContext method")
//             },
//             CopyFpgaImageFunc: func(in1 *ec2.CopyFpgaImageInput) (*ec2.CopyFpgaImageOutput, error) {
// 	               panic("mock out the CopyFpgaImage method")
//             },
//             CopyFpgaImageRequestFunc: func(in1 *ec2.CopyFpgaImageInput) (*request.Request, *ec2.CopyFpgaImageOutput) {
// 	               panic("mock out the CopyFpgaImageRequest method")
//             },
//             CopyFpgaImageWithContextFunc: func(in1 context.Context, in2 *ec2.CopyFpgaImageInput, in3 ...request.Option) (*ec2.CopyFpgaImageOutput, error) {
// 	               panic("mock out the CopyFpgaImageWithContext method")
//             },
//             CopyImageFunc: func(in1 *ec2.CopyImageInput) (*ec2.CopyImageOutput, error) {
// 	               panic("mock out the CopyImage method")
//             },
//             CopyImageRequestFunc: func(in1 *ec2.CopyImageInput) (*request.Request, *ec2.CopyImageOutput) {
// 	               panic("mock out the CopyImageRequest method")
//             },
//             CopyImageWithContextFunc: func(in1 context.Context, in2 *ec2.CopyImageInput, in3 ...request.Option) (*ec2.CopyImageOutput, error) {
// 	               panic("mock out the CopyImageWithContext method")
//             },
//             CopySnapshotFunc: func(in1 *ec2.CopySnapshotInput) (*ec2.CopySnapshotOutput, error) {
// 	               panic("mock out the CopySnapshot method")
//             },
//             CopySnapshotRequestFunc: func(in1 *ec2.CopySnapshotInput) (*request.Request, *ec2.CopySnapshotOutput) {
// 	               panic("mock out the CopySnapshotRequest method")
//             },
//             CopySnapshotWithContextFunc: func(in1 context.Context, in2 *ec2.CopySnapshotInput, in3 ...request.Option) (*ec2.CopySnapshotOutput, error) {
// 	               panic("mock out the CopySnapshotWithContext method")
//             },
//             CreateCapacityReservationFunc: func(in1 *ec2.CreateCapacityReservationInput) (*ec2.CreateCapacityReservationOutput, error) {
// 	               panic("mock out the CreateCapacityReservation method")
//             },
//             CreateCapacityReservationRequestFunc: func(in1 *ec2.CreateCapacityReservationInput) (*request.Request, *ec2.CreateCapacityReservationOutput) {
// 	               panic("mock out the CreateCapacityReservationRequest method")
//             },
//             CreateCapacityReservationWithContextFunc: func(in1 context.Context, in2 *ec2.CreateCapacityReservationInput, in3 ...request.Option) (*ec2.CreateCapacityReservationOutput, error) {
// 	               panic("mock out the CreateCapacityReservationWithContext method")
//             },
//             CreateClientVpnEndpointFunc: func(in1 *ec2.CreateClientVpnEndpointInput) (*ec2.CreateClientVpnEndpointOutput, error) {
// 	               panic("mock out the CreateClientVpnEndpoint method")
//             },
//             CreateClientVpnEndpointRequestFunc: func(in1 *ec2.CreateClientVpnEndpointInput) (*request.Request, *ec2.CreateClientVpnEndpointOutput) {
// 	               panic("mock out the CreateClientVpnEndpointRequest method")
//             },
//             CreateClientVpnEndpointWithContextFunc: func(in1 context.Context, in2 *ec2.CreateClientVpnEndpointInput, in3 ...request.Option) (*ec2.CreateClientVpnEndpointOutput, error) {
// 	               panic("mock out the CreateClientVpnEndpointWithContext method")
//             },
//             CreateClientVpnRouteFunc: func(in1 *ec2.CreateClientVpnRouteInput) (*ec2.CreateClientVpnRouteOutput, error) {
// 	               panic("mock out the CreateClientVpnRoute method")
//             },
//             CreateClientVpnRouteRequestFunc: func(in1 *ec2.CreateClientVpnRouteInput) (*request.Request, *ec2.CreateClientVpnRouteOutput) {
// 	               panic("mock out the CreateClientVpnRouteRequest method")
//             },
//             CreateClientVpnRouteWithContextFunc: func(in1 context.Context, in2 *ec2.CreateClientVpnRouteInput, in3 ...request.Option) (*ec2.CreateClientVpnRouteOutput, error) {
// 	               panic("mock out the CreateClientVpnRouteWithContext method")
//             },
//             CreateCustomerGatewayFunc: func(in1 *ec2.CreateCustomerGatewayInput) (*ec2.CreateCustomerGatewayOutput, error) {
// 	               panic("mock out the CreateCustomerGateway method")
//             },
//             CreateCustomerGatewayRequestFunc: func(in1 *ec2.CreateCustomerGatewayInput) (*request.Request, *ec2.CreateCustomerGatewayOutput) {
// 	               panic("mock out the CreateCustomerGatewayRequest method")
//             },
//             CreateCustomerGatewayWithContextFunc: func(in1 context.Context, in2 *ec2.CreateCustomerGatewayInput, in3 ...request.Option) (*ec2.CreateCustomerGatewayOutput, error) {
// 	               panic("mock out the CreateCustomerGatewayWithContext method")
//             },
//             CreateDefaultSubnetFunc: func(in1 *ec2.CreateDefaultSubnetInput) (*ec2.CreateDefaultSubnetOutput, error) {
// 	               panic("mock out the CreateDefaultSubnet method")
//             },
//             CreateDefaultSubnetRequestFunc: func(in1 *ec2.CreateDefaultSubnetInput) (*request.Request, *ec2.CreateDefaultSubnetOutput) {
// 	               panic("mock out the CreateDefaultSubnetRequest method")
//             },
//             CreateDefaultSubnetWithContextFunc: func(in1 context.Context, in2 *ec2.CreateDefaultSubnetInput, in3 ...request.Option) (*ec2.CreateDefaultSubnetOutput, error) {
// 	               panic("mock out the CreateDefaultSubnetWithContext method")
//             },
//             CreateDefaultVpcFunc: func(in1 *ec2.CreateDefaultVpcInput) (*ec2.CreateDefaultVpcOutput, error) {
// 	               panic("mock out the CreateDefaultVpc method")
//             },
//             CreateDefaultVpcRequestFunc: func(in1 *ec2.CreateDefaultVpcInput) (*request.Request, *ec2.CreateDefaultVpcOutput) {
// 	               panic("mock out the CreateDefaultVpcRequest method")
//             },
//             CreateDefaultVpcWithContextFunc: func(in1 context.Context, in2 *ec2.CreateDefaultVpcInput, in3 ...request.Option) (*ec2.CreateDefaultVpcOutput, error) {
// 	               panic("mock out the CreateDefaultVpcWithContext method")
//             },
//             CreateDhcpOptionsFunc: func(in1 *ec2.CreateDhcpOptionsInput) (*ec2.CreateDhcpOptionsOutput, error) {
// 	               panic("mock out the CreateDhcpOptions method")
//             },
//             CreateDhcpOptionsRequestFunc: func(in1 *ec2.CreateDhcpOptionsInput) (*request.Request, *ec2.CreateDhcpOptionsOutput) {
// 	               panic("mock out the CreateDhcpOptionsRequest method")
//             },
//             CreateDhcpOptionsWithContextFunc: func(in1 context.Context, in2 *ec2.CreateDhcpOptionsInput, in3 ...request.Option) (*ec2.CreateDhcpOptionsOutput, error) {
// 	               panic("mock out the CreateDhcpOptionsWithContext method")
//             },
//             CreateEgressOnlyInternetGatewayFunc: func(in1 *ec2.CreateEgressOnlyInternetGatewayInput) (*ec2.CreateEgressOnlyInternetGatewayOutput, error) {
// 	               panic("mock out the CreateEgressOnlyInternetGateway method")
//             },
//             CreateEgressOnlyInternetGatewayRequestFunc: func(in1 *ec2.CreateEgressOnlyInternetGatewayInput) (*request.Request, *ec2.CreateEgressOnlyInternetGatewayOutput) {
// 	               panic("mock out the CreateEgressOnlyInternetGatewayRequest method")
//             },
//             CreateEgressOnlyInternetGatewayWithContextFunc: func(in1 context.Context, in2 *ec2.CreateEgressOnlyInternetGatewayInput, in3 ...request.Option) (*ec2.CreateEgressOnlyInternetGatewayOutput, error) {
// 	               panic("mock out the CreateEgressOnlyInternetGatewayWithContext method")
//             },
//             CreateFleetFunc: func(in1 *ec2.CreateFleetInput) (*ec2.CreateFleetOutput, error) {
// 	               panic("mock out the CreateFleet method")
//             },
//             CreateFleetRequestFunc: func(in1 *ec2.CreateFleetInput) (*request.Request, *ec2.CreateFleetOutput) {
// 	               panic("mock out the CreateFleetRequest method")
//             },
//             CreateFleetWithContextFunc: func(in1 context.Context, in2 *ec2.CreateFleetInput, in3 ...request.Option) (*ec2.CreateFleetOutput, error) {
// 	               panic("mock out the CreateFleetWithContext method")
//             },
//             CreateFlowLogsFunc: func(in1 *ec2.CreateFlowLogsInput) (*ec2.CreateFlowLogsOutput, error) {
// 	               panic("mock out the CreateFlowLogs method")
//             },
//             CreateFlowLogsRequestFunc: func(in1 *ec2.CreateFlowLogsInput) (*request.Request, *ec2.CreateFlowLogsOutput) {
// 	               panic("mock out the CreateFlowLogsRequest method")
//             },
//             CreateFlowLogsWithContextFunc: func(in1 context.Context, in2 *ec2.CreateFlowLogsInput, in3 ...request.Option) (*ec2.CreateFlowLogsOutput, error) {
// 	               panic("mock out the CreateFlowLogsWithContext method")
//             },
//             CreateFpgaImageFunc: func(in1 *ec2.CreateFpgaImageInput) (*ec2.CreateFpgaImageOutput, error) {
// 	               panic("mock out the CreateFpgaImage method")
//             },
//             CreateFpgaImageRequestFunc: func(in1 *ec2.CreateFpgaImageInput) (*request.Request, *ec2.CreateFpgaImageOutput) {
// 	               panic("mock out the CreateFpgaImageRequest method")
//             },
//             CreateFpgaImageWithContextFunc: func(in1 context.Context, in2 *ec2.CreateFpgaImageInput, in3 ...request.Option) (*ec2.CreateFpgaImageOutput, error) {
// 	               panic("mock out the CreateFpgaImageWithContext method")
//             },
//             CreateImageFunc: func(in1 *ec2.CreateImageInput) (*ec2.CreateImageOutput, error) {
// 	               panic("mock out the CreateImage method")
//             },
//             CreateImageRequestFunc: func(in1 *ec2.CreateImageInput) (*request.Request, *ec2.CreateImageOutput) {
// 	               panic("mock out the CreateImageRequest method")
//             },
//             CreateImageWithContextFunc: func(in1 context.Context, in2 *ec2.CreateImageInput, in3 ...request.Option) (*ec2.CreateImageOutput, error) {
// 	               panic("mock out the CreateImageWithContext method")
//             },
//             CreateInstanceExportTaskFunc: func(in1 *ec2.CreateInstanceExportTaskInput) (*ec2.CreateInstanceExportTaskOutput, error) {
// 	               panic("mock out the CreateInstanceExportTask method")
//             },
//             CreateInstanceExportTaskRequestFunc: func(in1 *ec2.CreateInstanceExportTaskInput) (*request.Request, *ec2.CreateInstanceExportTaskOutput) {
// 	               panic("mock out the CreateInstanceExportTaskRequest method")
//             },
//             CreateInstanceExportTaskWithContextFunc: func(in1 context.Context, in2 *ec2.CreateInstanceExportTaskInput, in3 ...request.Option) (*ec2.CreateInstanceExportTaskOutput, error) {
// 	               panic("mock out the CreateInstanceExportTaskWithContext method")
//             },
//             CreateInternetGatewayFunc: func(in1 *ec2.CreateInternetGatewayInput) (*ec2.CreateInternetGatewayOutput, error) {
// 	               panic("mock out the CreateInternetGateway method")
//             },
//             CreateInternetGatewayRequestFunc: func(in1 *ec2.CreateInternetGatewayInput) (*request.Request, *ec2.CreateInternetGatewayOutput) {
// 	               panic("mock out the CreateInternetGatewayRequest method")
//             },
//             CreateInternetGatewayWithContextFunc: func(in1 context.Context, in2 *ec2.CreateInternetGatewayInput, in3 ...request.Option) (*ec2.CreateInternetGatewayOutput, error) {
// 	               panic("mock out the CreateInternetGatewayWithContext method")
//             },
//             CreateKeyPairFunc: func(in1 *ec2.CreateKeyPairInput) (*ec2.CreateKeyPairOutput, error) {
// 	               panic("mock out the CreateKeyPair method")
//             },
//             CreateKeyPairRequestFunc: func(in1 *ec2.CreateKeyPairInput) (*request.Request, *ec2.CreateKeyPairOutput) {
// 	               panic("mock out the CreateKeyPairRequest method")
//             },
//             CreateKeyPairWithContextFunc: func(in1 context.Context, in2 *ec2.CreateKeyPairInput, in3 ...request.Option) (*ec2.CreateKeyPairOutput, error) {
// 	               panic("mock out the CreateKeyPairWithContext method")
//             },
//             CreateLaunchTemplateFunc: func(in1 *ec2.CreateLaunchTemplateInput) (*ec2.CreateLaunchTemplateOutput, error) {
// 	               panic("mock out the CreateLaunchTemplate method")
//             },
//             CreateLaunchTemplateRequestFunc: func(in1 *ec2.CreateLaunchTemplateInput) (*request.Request, *ec2.CreateLaunchTemplateOutput) {
// 	               panic("mock out the CreateLaunchTemplateRequest method")
//             },
//             CreateLaunchTemplateVersionFunc: func(in1 *ec2.CreateLaunchTemplateVersionInput) (*ec2.CreateLaunchTemplateVersionOutput, error) {
// 	               panic("mock out the CreateLaunchTemplateVersion method")
//             },
//             CreateLaunchTemplateVersionRequestFunc: func(in1 *ec2.CreateLaunchTemplateVersionInput) (*request.Request, *ec2.CreateLaunchTemplateVersionOutput) {
// 	               panic("mock out the CreateLaunchTemplateVersionRequest method")
//             },
//             CreateLaunchTemplateVersionWithContextFunc: func(in1 context.Context, in2 *ec2.CreateLaunchTemplateVersionInput, in3 ...request.Option) (*ec2.CreateLaunchTemplateVersionOutput, error) {
// 	               panic("mock out the CreateLaunchTemplateVersionWithContext method")
//             },
//             CreateLaunchTemplateWithContextFunc: func(in1 context.Context, in2 *ec2.CreateLaunchTemplateInput, in3 ...request.Option) (*ec2.CreateLaunchTemplateOutput, error) {
// 	               panic("mock out the CreateLaunchTemplateWithContext method")
//             },
//             CreateLocalGatewayRouteFunc: func(in1 *ec2.CreateLocalGatewayRouteInput) (*ec2.CreateLocalGatewayRouteOutput, error) {
// 	               panic("mock out the CreateLocalGatewayRoute method")
//             },
//             CreateLocalGatewayRouteRequestFunc: func(in1 *ec2.CreateLocalGatewayRouteInput) (*request.Request, *ec2.CreateLocalGatewayRouteOutput) {
// 	               panic("mock out the CreateLocalGatewayRouteRequest method")
//             },
//             CreateLocalGatewayRouteTableVpcAssociationFunc: func(in1 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput) (*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput, error) {
// 	               panic("mock out the CreateLocalGatewayRouteTableVpcAssociation method")
//             },
//             CreateLocalGatewayRouteTableVpcAssociationRequestFunc: func(in1 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput) (*request.Request, *ec2.CreateLocalGatewayRouteTableVpcAssociationOutput) {
// 	               panic("mock out the CreateLocalGatewayRouteTableVpcAssociationRequest method")
//             },
//             CreateLocalGatewayRouteTableVpcAssociationWithContextFunc: func(in1 context.Context, in2 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput, in3 ...request.Option) (*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput, error) {
// 	               panic("mock out the CreateLocalGatewayRouteTableVpcAssociationWithContext method")
//             },
//             CreateLocalGatewayRouteWithContextFunc: func(in1 context.Context, in2 *ec2.CreateLocalGatewayRouteInput, in3 ...request.Option) (*ec2.CreateLocalGatewayRouteOutput, error) {
// 	               panic("mock out the CreateLocalGatewayRouteWithContext method")
//             },
//             CreateNatGatewayFunc: func(in1 *ec2.CreateNatGatewayInput) (*ec2.CreateNatGatewayOutput, error) {
// 	               panic("mock out the CreateNatGateway method")
//             },
//             CreateNatGatewayRequestFunc: func(in1 *ec2.CreateNatGatewayInput) (*request.Request, *ec2.CreateNatGatewayOutput) {
// 	               panic("mock out the CreateNatGatewayRequest method")
//             },
//             CreateNatGatewayWithContextFunc: func(in1 context.Context, in2 *ec2.CreateNatGatewayInput, in3 ...request.Option) (*ec2.CreateNatGatewayOutput, error) {
// 	               panic("mock out the CreateNatGatewayWithContext method")
//             },
//             CreateNetworkAclFunc: func(in1 *ec2.CreateNetworkAclInput) (*ec2.CreateNetworkAclOutput, error) {
// 	               panic("mock out the CreateNetworkAcl method")
//             },
//             CreateNetworkAclEntryFunc: func(in1 *ec2.CreateNetworkAclEntryInput) (*ec2.CreateNetworkAclEntryOutput, error) {
// 	               panic("mock out the CreateNetworkAclEntry method")
//             },
//             CreateNetworkAclEntryRequestFunc: func(in1 *ec2.CreateNetworkAclEntryInput) (*request.Request, *ec2.CreateNetworkAclEntryOutput) {
// 	               panic("mock out the CreateNetworkAclEntryRequest method")
//             },
//             CreateNetworkAclEntryWithContextFunc: func(in1 context.Context, in2 *ec2.CreateNetworkAclEntryInput, in3 ...request.Option) (*ec2.CreateNetworkAclEntryOutput, error) {
// 	               panic("mock out the CreateNetworkAclEntryWithContext method")
//             },
//             CreateNetworkAclRequestFunc: func(in1 *ec2.CreateNetworkAclInput) (*request.Request, *ec2.CreateNetworkAclOutput) {
// 	               panic("mock out the CreateNetworkAclRequest method")
//             },
//             CreateNetworkAclWithContextFunc: func(in1 context.Context, in2 *ec2.CreateNetworkAclInput, in3 ...request.Option) (*ec2.CreateNetworkAclOutput, error) {
// 	               panic("mock out the CreateNetworkAclWithContext method")
//             },
//             CreateNetworkInterfaceFunc: func(in1 *ec2.CreateNetworkInterfaceInput) (*ec2.CreateNetworkInterfaceOutput, error) {
// 	               panic("mock out the CreateNetworkInterface method")
//             },
//             CreateNetworkInterfacePermissionFunc: func(in1 *ec2.CreateNetworkInterfacePermissionInput) (*ec2.CreateNetworkInterfacePermissionOutput, error) {
// 	               panic("mock out the CreateNetworkInterfacePermission method")
//             },
//             CreateNetworkInterfacePermissionRequestFunc: func(in1 *ec2.CreateNetworkInterfacePermissionInput) (*request.Request, *ec2.CreateNetworkInterfacePermissionOutput) {
// 	               panic("mock out the CreateNetworkInterfacePermissionRequest method")
//             },
//             CreateNetworkInterfacePermissionWithContextFunc: func(in1 context.Context, in2 *ec2.CreateNetworkInterfacePermissionInput, in3 ...request.Option) (*ec2.CreateNetworkInterfacePermissionOutput, error) {
// 	               panic("mock out the CreateNetworkInterfacePermissionWithContext method")
//             },
//             CreateNetworkInterfaceRequestFunc: func(in1 *ec2.CreateNetworkInterfaceInput) (*request.Request, *ec2.CreateNetworkInterfaceOutput) {
// 	               panic("mock out the CreateNetworkInterfaceRequest method")
//             },
//             CreateNetworkInterfaceWithContextFunc: func(in1 context.Context, in2 *ec2.CreateNetworkInterfaceInput, in3 ...request.Option) (*ec2.CreateNetworkInterfaceOutput, error) {
// 	               panic("mock out the CreateNetworkInterfaceWithContext method")
//             },
//             CreatePlacementGroupFunc: func(in1 *ec2.CreatePlacementGroupInput) (*ec2.CreatePlacementGroupOutput, error) {
// 	               panic("mock out the CreatePlacementGroup method")
//             },
//             CreatePlacementGroupRequestFunc: func(in1 *ec2.CreatePlacementGroupInput) (*request.Request, *ec2.CreatePlacementGroupOutput) {
// 	               panic("mock out the CreatePlacementGroupRequest method")
//             },
//             CreatePlacementGroupWithContextFunc: func(in1 context.Context, in2 *ec2.CreatePlacementGroupInput, in3 ...request.Option) (*ec2.CreatePlacementGroupOutput, error) {
// 	               panic("mock out the CreatePlacementGroupWithContext method")
//             },
//             CreateReservedInstancesListingFunc: func(in1 *ec2.CreateReservedInstancesListingInput) (*ec2.CreateReservedInstancesListingOutput, error) {
// 	               panic("mock out the CreateReservedInstancesListing method")
//             },
//             CreateReservedInstancesListingRequestFunc: func(in1 *ec2.CreateReservedInstancesListingInput) (*request.Request, *ec2.CreateReservedInstancesListingOutput) {
// 	               panic("mock out the CreateReservedInstancesListingRequest method")
//             },
//             CreateReservedInstancesListingWithContextFunc: func(in1 context.Context, in2 *ec2.CreateReservedInstancesListingInput, in3 ...request.Option) (*ec2.CreateReservedInstancesListingOutput, error) {
// 	               panic("mock out the CreateReservedInstancesListingWithContext method")
//             },
//             CreateRouteFunc: func(in1 *ec2.CreateRouteInput) (*ec2.CreateRouteOutput, error) {
// 	               panic("mock out the CreateRoute method")
//             },
//             CreateRouteRequestFunc: func(in1 *ec2.CreateRouteInput) (*request.Request, *ec2.CreateRouteOutput) {
// 	               panic("mock out the CreateRouteRequest method")
//             },
//             CreateRouteTableFunc: func(in1 *ec2.CreateRouteTableInput) (*ec2.CreateRouteTableOutput, error) {
// 	               panic("mock out the CreateRouteTable method")
//             },
//             CreateRouteTableRequestFunc: func(in1 *ec2.CreateRouteTableInput) (*request.Request, *ec2.CreateRouteTableOutput) {
// 	               panic("mock out the CreateRouteTableRequest method")
//             },
//             CreateRouteTableWithContextFunc: func(in1 context.Context, in2 *ec2.CreateRouteTableInput, in3 ...request.Option) (*ec2.CreateRouteTableOutput, error) {
// 	               panic("mock out the CreateRouteTableWithContext method")
//             },
//             CreateRouteWithContextFunc: func(in1 context.Context, in2 *ec2.CreateRouteInput, in3 ...request.Option) (*ec2.CreateRouteOutput, error) {
// 	               panic("mock out the CreateRouteWithContext method")
//             },
//             CreateSecurityGroupFunc: func(in1 *ec2.CreateSecurityGroupInput) (*ec2.CreateSecurityGroupOutput, error) {
// 	               panic("mock out the CreateSecurityGroup method")
//             },
//             CreateSecurityGroupRequestFunc: func(in1 *ec2.CreateSecurityGroupInput) (*request.Request, *ec2.CreateSecurityGroupOutput) {
// 	               panic("mock out the CreateSecurityGroupRequest method")
//             },
//             CreateSecurityGroupWithContextFunc: func(in1 context.Context, in2 *ec2.CreateSecurityGroupInput, in3 ...request.Option) (*ec2.CreateSecurityGroupOutput, error) {
// 	               panic("mock out the CreateSecurityGroupWithContext method")
//             },
//             CreateSnapshotFunc: func(in1 *ec2.CreateSnapshotInput) (*ec2.Snapshot, error) {
// 	               panic("mock out the CreateSnapshot method")
//             },
//             CreateSnapshotRequestFunc: func(in1 *ec2.CreateSnapshotInput) (*request.Request, *ec2.Snapshot) {
// 	               panic("mock out the CreateSnapshotRequest method")
//             },
//             CreateSnapshotWithContextFunc: func(in1 context.Context, in2 *ec2.CreateSnapshotInput, in3 ...request.Option) (*ec2.Snapshot, error) {
// 	               panic("mock out the CreateSnapshotWithContext method")
//             },
//             CreateSnapshotsFunc: func(in1 *ec2.CreateSnapshotsInput) (*ec2.CreateSnapshotsOutput, error) {
// 	               panic("mock out the CreateSnapshots method")
//             },
//             CreateSnapshotsRequestFunc: func(in1 *ec2.CreateSnapshotsInput) (*request.Request, *ec2.CreateSnapshotsOutput) {
// 	               panic("mock out the CreateSnapshotsRequest method")
//             },
//             CreateSnapshotsWithContextFunc: func(in1 context.Context, in2 *ec2.CreateSnapshotsInput, in3 ...request.Option) (*ec2.CreateSnapshotsOutput, error) {
// 	               panic("mock out the CreateSnapshotsWithContext method")
//             },
//             CreateSpotDatafeedSubscriptionFunc: func(in1 *ec2.CreateSpotDatafeedSubscriptionInput) (*ec2.CreateSpotDatafeedSubscriptionOutput, error) {
// 	               panic("mock out the CreateSpotDatafeedSubscription method")
//             },
//             CreateSpotDatafeedSubscriptionRequestFunc: func(in1 *ec2.CreateSpotDatafeedSubscriptionInput) (*request.Request, *ec2.CreateSpotDatafeedSubscriptionOutput) {
// 	               panic("mock out the CreateSpotDatafeedSubscriptionRequest method")
//             },
//             CreateSpotDatafeedSubscriptionWithContextFunc: func(in1 context.Context, in2 *ec2.CreateSpotDatafeedSubscriptionInput, in3 ...request.Option) (*ec2.CreateSpotDatafeedSubscriptionOutput, error) {
// 	               panic("mock out the CreateSpotDatafeedSubscriptionWithContext method")
//             },
//             CreateSubnetFunc: func(in1 *ec2.CreateSubnetInput) (*ec2.CreateSubnetOutput, error) {
// 	               panic("mock out the CreateSubnet method")
//             },
//             CreateSubnetRequestFunc: func(in1 *ec2.CreateSubnetInput) (*request.Request, *ec2.CreateSubnetOutput) {
// 	               panic("mock out the CreateSubnetRequest method")
//             },
//             CreateSubnetWithContextFunc: func(in1 context.Context, in2 *ec2.CreateSubnetInput, in3 ...request.Option) (*ec2.CreateSubnetOutput, error) {
// 	               panic("mock out the CreateSubnetWithContext method")
//             },
//             CreateTagsFunc: func(in1 *ec2.CreateTagsInput) (*ec2.CreateTagsOutput, error) {
// 	               panic("mock out the CreateTags method")
//             },
//             CreateTagsRequestFunc: func(in1 *ec2.CreateTagsInput) (*request.Request, *ec2.CreateTagsOutput) {
// 	               panic("mock out the CreateTagsRequest method")
//             },
//             CreateTagsWithContextFunc: func(in1 context.Context, in2 *ec2.CreateTagsInput, in3 ...request.Option) (*ec2.CreateTagsOutput, error) {
// 	               panic("mock out the CreateTagsWithContext method")
//             },
//             CreateTrafficMirrorFilterFunc: func(in1 *ec2.CreateTrafficMirrorFilterInput) (*ec2.CreateTrafficMirrorFilterOutput, error) {
// 	               panic("mock out the CreateTrafficMirrorFilter method")
//             },
//             CreateTrafficMirrorFilterRequestFunc: func(in1 *ec2.CreateTrafficMirrorFilterInput) (*request.Request, *ec2.CreateTrafficMirrorFilterOutput) {
// 	               panic("mock out the CreateTrafficMirrorFilterRequest method")
//             },
//             CreateTrafficMirrorFilterRuleFunc: func(in1 *ec2.CreateTrafficMirrorFilterRuleInput) (*ec2.CreateTrafficMirrorFilterRuleOutput, error) {
// 	               panic("mock out the CreateTrafficMirrorFilterRule method")
//             },
//             CreateTrafficMirrorFilterRuleRequestFunc: func(in1 *ec2.CreateTrafficMirrorFilterRuleInput) (*request.Request, *ec2.CreateTrafficMirrorFilterRuleOutput) {
// 	               panic("mock out the CreateTrafficMirrorFilterRuleRequest method")
//             },
//             CreateTrafficMirrorFilterRuleWithContextFunc: func(in1 context.Context, in2 *ec2.CreateTrafficMirrorFilterRuleInput, in3 ...request.Option) (*ec2.CreateTrafficMirrorFilterRuleOutput, error) {
// 	               panic("mock out the CreateTrafficMirrorFilterRuleWithContext method")
//             },
//             CreateTrafficMirrorFilterWithContextFunc: func(in1 context.Context, in2 *ec2.CreateTrafficMirrorFilterInput, in3 ...request.Option) (*ec2.CreateTrafficMirrorFilterOutput, error) {
// 	               panic("mock out the CreateTrafficMirrorFilterWithContext method")
//             },
//             CreateTrafficMirrorSessionFunc: func(in1 *ec2.CreateTrafficMirrorSessionInput) (*ec2.CreateTrafficMirrorSessionOutput, error) {
// 	               panic("mock out the CreateTrafficMirrorSession method")
//             },
//             CreateTrafficMirrorSessionRequestFunc: func(in1 *ec2.CreateTrafficMirrorSessionInput) (*request.Request, *ec2.CreateTrafficMirrorSessionOutput) {
// 	               panic("mock out the CreateTrafficMirrorSessionRequest method")
//             },
//             CreateTrafficMirrorSessionWithContextFunc: func(in1 context.Context, in2 *ec2.CreateTrafficMirrorSessionInput, in3 ...request.Option) (*ec2.CreateTrafficMirrorSessionOutput, error) {
// 	               panic("mock out the CreateTrafficMirrorSessionWithContext method")
//             },
//             CreateTrafficMirrorTargetFunc: func(in1 *ec2.CreateTrafficMirrorTargetInput) (*ec2.CreateTrafficMirrorTargetOutput, error) {
// 	               panic("mock out the CreateTrafficMirrorTarget method")
//             },
//             CreateTrafficMirrorTargetRequestFunc: func(in1 *ec2.CreateTrafficMirrorTargetInput) (*request.Request, *ec2.CreateTrafficMirrorTargetOutput) {
// 	               panic("mock out the CreateTrafficMirrorTargetRequest method")
//             },
//             CreateTrafficMirrorTargetWithContextFunc: func(in1 context.Context, in2 *ec2.CreateTrafficMirrorTargetInput, in3 ...request.Option) (*ec2.CreateTrafficMirrorTargetOutput, error) {
// 	               panic("mock out the CreateTrafficMirrorTargetWithContext method")
//             },
//             CreateTransitGatewayFunc: func(in1 *ec2.CreateTransitGatewayInput) (*ec2.CreateTransitGatewayOutput, error) {
// 	               panic("mock out the CreateTransitGateway method")
//             },
//             CreateTransitGatewayMulticastDomainFunc: func(in1 *ec2.CreateTransitGatewayMulticastDomainInput) (*ec2.CreateTransitGatewayMulticastDomainOutput, error) {
// 	               panic("mock out the CreateTransitGatewayMulticastDomain method")
//             },
//             CreateTransitGatewayMulticastDomainRequestFunc: func(in1 *ec2.CreateTransitGatewayMulticastDomainInput) (*request.Request, *ec2.CreateTransitGatewayMulticastDomainOutput) {
// 	               panic("mock out the CreateTransitGatewayMulticastDomainRequest method")
//             },
//             CreateTransitGatewayMulticastDomainWithContextFunc: func(in1 context.Context, in2 *ec2.CreateTransitGatewayMulticastDomainInput, in3 ...request.Option) (*ec2.CreateTransitGatewayMulticastDomainOutput, error) {
// 	               panic("mock out the CreateTransitGatewayMulticastDomainWithContext method")
//             },
//             CreateTransitGatewayPeeringAttachmentFunc: func(in1 *ec2.CreateTransitGatewayPeeringAttachmentInput) (*ec2.CreateTransitGatewayPeeringAttachmentOutput, error) {
// 	               panic("mock out the CreateTransitGatewayPeeringAttachment method")
//             },
//             CreateTransitGatewayPeeringAttachmentRequestFunc: func(in1 *ec2.CreateTransitGatewayPeeringAttachmentInput) (*request.Request, *ec2.CreateTransitGatewayPeeringAttachmentOutput) {
// 	               panic("mock out the CreateTransitGatewayPeeringAttachmentRequest method")
//             },
//             CreateTransitGatewayPeeringAttachmentWithContextFunc: func(in1 context.Context, in2 *ec2.CreateTransitGatewayPeeringAttachmentInput, in3 ...request.Option) (*ec2.CreateTransitGatewayPeeringAttachmentOutput, error) {
// 	               panic("mock out the CreateTransitGatewayPeeringAttachmentWithContext method")
//             },
//             CreateTransitGatewayRequestFunc: func(in1 *ec2.CreateTransitGatewayInput) (*request.Request, *ec2.CreateTransitGatewayOutput) {
// 	               panic("mock out the CreateTransitGatewayRequest method")
//             },
//             CreateTransitGatewayRouteFunc: func(in1 *ec2.CreateTransitGatewayRouteInput) (*ec2.CreateTransitGatewayRouteOutput, error) {
// 	               panic("mock out the CreateTransitGatewayRoute method")
//             },
//             CreateTransitGatewayRouteRequestFunc: func(in1 *ec2.CreateTransitGatewayRouteInput) (*request.Request, *ec2.CreateTransitGatewayRouteOutput) {
// 	               panic("mock out the CreateTransitGatewayRouteRequest method")
//             },
//             CreateTransitGatewayRouteTableFunc: func(in1 *ec2.CreateTransitGatewayRouteTableInput) (*ec2.CreateTransitGatewayRouteTableOutput, error) {
// 	               panic("mock out the CreateTransitGatewayRouteTable method")
//             },
//             CreateTransitGatewayRouteTableRequestFunc: func(in1 *ec2.CreateTransitGatewayRouteTableInput) (*request.Request, *ec2.CreateTransitGatewayRouteTableOutput) {
// 	               panic("mock out the CreateTransitGatewayRouteTableRequest method")
//             },
//             CreateTransitGatewayRouteTableWithContextFunc: func(in1 context.Context, in2 *ec2.CreateTransitGatewayRouteTableInput, in3 ...request.Option) (*ec2.CreateTransitGatewayRouteTableOutput, error) {
// 	               panic("mock out the CreateTransitGatewayRouteTableWithContext method")
//             },
//             CreateTransitGatewayRouteWithContextFunc: func(in1 context.Context, in2 *ec2.CreateTransitGatewayRouteInput, in3 ...request.Option) (*ec2.CreateTransitGatewayRouteOutput, error) {
// 	               panic("mock out the CreateTransitGatewayRouteWithContext method")
//             },
//             CreateTransitGatewayVpcAttachmentFunc: func(in1 *ec2.CreateTransitGatewayVpcAttachmentInput) (*ec2.CreateTransitGatewayVpcAttachmentOutput, error) {
// 	               panic("mock out the CreateTransitGatewayVpcAttachment method")
//             },
//             CreateTransitGatewayVpcAttachmentRequestFunc: func(in1 *ec2.CreateTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.CreateTransitGatewayVpcAttachmentOutput) {
// 	               panic("mock out the CreateTransitGatewayVpcAttachmentRequest method")
//             },
//             CreateTransitGatewayVpcAttachmentWithContextFunc: func(in1 context.Context, in2 *ec2.CreateTransitGatewayVpcAttachmentInput, in3 ...request.Option) (*ec2.CreateTransitGatewayVpcAttachmentOutput, error) {
// 	               panic("mock out the CreateTransitGatewayVpcAttachmentWithContext method")
//             },
//             CreateTransitGatewayWithContextFunc: func(in1 context.Context, in2 *ec2.CreateTransitGatewayInput, in3 ...request.Option) (*ec2.CreateTransitGatewayOutput, error) {
// 	               panic("mock out the CreateTransitGatewayWithContext method")
//             },
//             CreateVolumeFunc: func(in1 *ec2.CreateVolumeInput) (*ec2.Volume, error) {
// 	               panic("mock out the CreateVolume method")
//             },
//             CreateVolumeRequestFunc: func(in1 *ec2.CreateVolumeInput) (*request.Request, *ec2.Volume) {
// 	               panic("mock out the CreateVolumeRequest method")
//             },
//             CreateVolumeWithContextFunc: func(in1 context.Context, in2 *ec2.CreateVolumeInput, in3 ...request.Option) (*ec2.Volume, error) {
// 	               panic("mock out the CreateVolumeWithContext method")
//             },
//             CreateVpcFunc: func(in1 *ec2.CreateVpcInput) (*ec2.CreateVpcOutput, error) {
// 	               panic("mock out the CreateVpc method")
//             },
//             CreateVpcEndpointFunc: func(in1 *ec2.CreateVpcEndpointInput) (*ec2.CreateVpcEndpointOutput, error) {
// 	               panic("mock out the CreateVpcEndpoint method")
//             },
//             CreateVpcEndpointConnectionNotificationFunc: func(in1 *ec2.CreateVpcEndpointConnectionNotificationInput) (*ec2.CreateVpcEndpointConnectionNotificationOutput, error) {
// 	               panic("mock out the CreateVpcEndpointConnectionNotification method")
//             },
//             CreateVpcEndpointConnectionNotificationRequestFunc: func(in1 *ec2.CreateVpcEndpointConnectionNotificationInput) (*request.Request, *ec2.CreateVpcEndpointConnectionNotificationOutput) {
// 	               panic("mock out the CreateVpcEndpointConnectionNotificationRequest method")
//             },
//             CreateVpcEndpointConnectionNotificationWithContextFunc: func(in1 context.Context, in2 *ec2.CreateVpcEndpointConnectionNotificationInput, in3 ...request.Option) (*ec2.CreateVpcEndpointConnectionNotificationOutput, error) {
// 	               panic("mock out the CreateVpcEndpointConnectionNotificationWithContext method")
//             },
//             CreateVpcEndpointRequestFunc: func(in1 *ec2.CreateVpcEndpointInput) (*request.Request, *ec2.CreateVpcEndpointOutput) {
// 	               panic("mock out the CreateVpcEndpointRequest method")
//             },
//             CreateVpcEndpointServiceConfigurationFunc: func(in1 *ec2.CreateVpcEndpointServiceConfigurationInput) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error) {
// 	               panic("mock out the CreateVpcEndpointServiceConfiguration method")
//             },
//             CreateVpcEndpointServiceConfigurationRequestFunc: func(in1 *ec2.CreateVpcEndpointServiceConfigurationInput) (*request.Request, *ec2.CreateVpcEndpointServiceConfigurationOutput) {
// 	               panic("mock out the CreateVpcEndpointServiceConfigurationRequest method")
//             },
//             CreateVpcEndpointServiceConfigurationWithContextFunc: func(in1 context.Context, in2 *ec2.CreateVpcEndpointServiceConfigurationInput, in3 ...request.Option) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error) {
// 	               panic("mock out the CreateVpcEndpointServiceConfigurationWithContext method")
//             },
//             CreateVpcEndpointWithContextFunc: func(in1 context.Context, in2 *ec2.CreateVpcEndpointInput, in3 ...request.Option) (*ec2.CreateVpcEndpointOutput, error) {
// 	               panic("mock out the CreateVpcEndpointWithContext method")
//             },
//             CreateVpcPeeringConnectionFunc: func(in1 *ec2.CreateVpcPeeringConnectionInput) (*ec2.CreateVpcPeeringConnectionOutput, error) {
// 	               panic("mock out the CreateVpcPeeringConnection method")
//             },
//             CreateVpcPeeringConnectionRequestFunc: func(in1 *ec2.CreateVpcPeeringConnectionInput) (*request.Request, *ec2.CreateVpcPeeringConnectionOutput) {
// 	               panic("mock out the CreateVpcPeeringConnectionRequest method")
//             },
//             CreateVpcPeeringConnectionWithContextFunc: func(in1 context.Context, in2 *ec2.CreateVpcPeeringConnectionInput, in3 ...request.Option) (*ec2.CreateVpcPeeringConnectionOutput, error) {
// 	               panic("mock out the CreateVpcPeeringConnectionWithContext method")
//             },
//             CreateVpcRequestFunc: func(in1 *ec2.CreateVpcInput) (*request.Request, *ec2.CreateVpcOutput) {
// 	               panic("mock out the CreateVpcRequest method")
//             },
//             CreateVpcWithContextFunc: func(in1 context.Context, in2 *ec2.CreateVpcInput, in3 ...request.Option) (*ec2.CreateVpcOutput, error) {
// 	               panic("mock out the CreateVpcWithContext method")
//             },
//             CreateVpnConnectionFunc: func(in1 *ec2.CreateVpnConnectionInput) (*ec2.CreateVpnConnectionOutput, error) {
// 	               panic("mock out the CreateVpnConnection method")
//             },
//             CreateVpnConnectionRequestFunc: func(in1 *ec2.CreateVpnConnectionInput) (*request.Request, *ec2.CreateVpnConnectionOutput) {
// 	               panic("mock out the CreateVpnConnectionRequest method")
//             },
//             CreateVpnConnectionRouteFunc: func(in1 *ec2.CreateVpnConnectionRouteInput) (*ec2.CreateVpnConnectionRouteOutput, error) {
// 	               panic("mock out the CreateVpnConnectionRoute method")
//             },
//             CreateVpnConnectionRouteRequestFunc: func(in1 *ec2.CreateVpnConnectionRouteInput) (*request.Request, *ec2.CreateVpnConnectionRouteOutput) {
// 	               panic("mock out the CreateVpnConnectionRouteRequest method")
//             },
//             CreateVpnConnectionRouteWithContextFunc: func(in1 context.Context, in2 *ec2.CreateVpnConnectionRouteInput, in3 ...request.Option) (*ec2.CreateVpnConnectionRouteOutput, error) {
// 	               panic("mock out the CreateVpnConnectionRouteWithContext method")
//             },
//             CreateVpnConnectionWithContextFunc: func(in1 context.Context, in2 *ec2.CreateVpnConnectionInput, in3 ...request.Option) (*ec2.CreateVpnConnectionOutput, error) {
// 	               panic("mock out the CreateVpnConnectionWithContext method")
//             },
//             CreateVpnGatewayFunc: func(in1 *ec2.CreateVpnGatewayInput) (*ec2.CreateVpnGatewayOutput, error) {
// 	               panic("mock out the CreateVpnGateway method")
//             },
//             CreateVpnGatewayRequestFunc: func(in1 *ec2.CreateVpnGatewayInput) (*request.Request, *ec2.CreateVpnGatewayOutput) {
// 	               panic("mock out the CreateVpnGatewayRequest method")
//             },
//             CreateVpnGatewayWithContextFunc: func(in1 context.Context, in2 *ec2.CreateVpnGatewayInput, in3 ...request.Option) (*ec2.CreateVpnGatewayOutput, error) {
// 	               panic("mock out the CreateVpnGatewayWithContext method")
//             },
//             DeleteClientVpnEndpointFunc: func(in1 *ec2.DeleteClientVpnEndpointInput) (*ec2.DeleteClientVpnEndpointOutput, error) {
// 	               panic("mock out the DeleteClientVpnEndpoint method")
//             },
//             DeleteClientVpnEndpointRequestFunc: func(in1 *ec2.DeleteClientVpnEndpointInput) (*request.Request, *ec2.DeleteClientVpnEndpointOutput) {
// 	               panic("mock out the DeleteClientVpnEndpointRequest method")
//             },
//             DeleteClientVpnEndpointWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteClientVpnEndpointInput, in3 ...request.Option) (*ec2.DeleteClientVpnEndpointOutput, error) {
// 	               panic("mock out the DeleteClientVpnEndpointWithContext method")
//             },
//             DeleteClientVpnRouteFunc: func(in1 *ec2.DeleteClientVpnRouteInput) (*ec2.DeleteClientVpnRouteOutput, error) {
// 	               panic("mock out the DeleteClientVpnRoute method")
//             },
//             DeleteClientVpnRouteRequestFunc: func(in1 *ec2.DeleteClientVpnRouteInput) (*request.Request, *ec2.DeleteClientVpnRouteOutput) {
// 	               panic("mock out the DeleteClientVpnRouteRequest method")
//             },
//             DeleteClientVpnRouteWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteClientVpnRouteInput, in3 ...request.Option) (*ec2.DeleteClientVpnRouteOutput, error) {
// 	               panic("mock out the DeleteClientVpnRouteWithContext method")
//             },
//             DeleteCustomerGatewayFunc: func(in1 *ec2.DeleteCustomerGatewayInput) (*ec2.DeleteCustomerGatewayOutput, error) {
// 	               panic("mock out the DeleteCustomerGateway method")
//             },
//             DeleteCustomerGatewayRequestFunc: func(in1 *ec2.DeleteCustomerGatewayInput) (*request.Request, *ec2.DeleteCustomerGatewayOutput) {
// 	               panic("mock out the DeleteCustomerGatewayRequest method")
//             },
//             DeleteCustomerGatewayWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteCustomerGatewayInput, in3 ...request.Option) (*ec2.DeleteCustomerGatewayOutput, error) {
// 	               panic("mock out the DeleteCustomerGatewayWithContext method")
//             },
//             DeleteDhcpOptionsFunc: func(in1 *ec2.DeleteDhcpOptionsInput) (*ec2.DeleteDhcpOptionsOutput, error) {
// 	               panic("mock out the DeleteDhcpOptions method")
//             },
//             DeleteDhcpOptionsRequestFunc: func(in1 *ec2.DeleteDhcpOptionsInput) (*request.Request, *ec2.DeleteDhcpOptionsOutput) {
// 	               panic("mock out the DeleteDhcpOptionsRequest method")
//             },
//             DeleteDhcpOptionsWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteDhcpOptionsInput, in3 ...request.Option) (*ec2.DeleteDhcpOptionsOutput, error) {
// 	               panic("mock out the DeleteDhcpOptionsWithContext method")
//             },
//             DeleteEgressOnlyInternetGatewayFunc: func(in1 *ec2.DeleteEgressOnlyInternetGatewayInput) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error) {
// 	               panic("mock out the DeleteEgressOnlyInternetGateway method")
//             },
//             DeleteEgressOnlyInternetGatewayRequestFunc: func(in1 *ec2.DeleteEgressOnlyInternetGatewayInput) (*request.Request, *ec2.DeleteEgressOnlyInternetGatewayOutput) {
// 	               panic("mock out the DeleteEgressOnlyInternetGatewayRequest method")
//             },
//             DeleteEgressOnlyInternetGatewayWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteEgressOnlyInternetGatewayInput, in3 ...request.Option) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error) {
// 	               panic("mock out the DeleteEgressOnlyInternetGatewayWithContext method")
//             },
//             DeleteFleetsFunc: func(in1 *ec2.DeleteFleetsInput) (*ec2.DeleteFleetsOutput, error) {
// 	               panic("mock out the DeleteFleets method")
//             },
//             DeleteFleetsRequestFunc: func(in1 *ec2.DeleteFleetsInput) (*request.Request, *ec2.DeleteFleetsOutput) {
// 	               panic("mock out the DeleteFleetsRequest method")
//             },
//             DeleteFleetsWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteFleetsInput, in3 ...request.Option) (*ec2.DeleteFleetsOutput, error) {
// 	               panic("mock out the DeleteFleetsWithContext method")
//             },
//             DeleteFlowLogsFunc: func(in1 *ec2.DeleteFlowLogsInput) (*ec2.DeleteFlowLogsOutput, error) {
// 	               panic("mock out the DeleteFlowLogs method")
//             },
//             DeleteFlowLogsRequestFunc: func(in1 *ec2.DeleteFlowLogsInput) (*request.Request, *ec2.DeleteFlowLogsOutput) {
// 	               panic("mock out the DeleteFlowLogsRequest method")
//             },
//             DeleteFlowLogsWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteFlowLogsInput, in3 ...request.Option) (*ec2.DeleteFlowLogsOutput, error) {
// 	               panic("mock out the DeleteFlowLogsWithContext method")
//             },
//             DeleteFpgaImageFunc: func(in1 *ec2.DeleteFpgaImageInput) (*ec2.DeleteFpgaImageOutput, error) {
// 	               panic("mock out the DeleteFpgaImage method")
//             },
//             DeleteFpgaImageRequestFunc: func(in1 *ec2.DeleteFpgaImageInput) (*request.Request, *ec2.DeleteFpgaImageOutput) {
// 	               panic("mock out the DeleteFpgaImageRequest method")
//             },
//             DeleteFpgaImageWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteFpgaImageInput, in3 ...request.Option) (*ec2.DeleteFpgaImageOutput, error) {
// 	               panic("mock out the DeleteFpgaImageWithContext method")
//             },
//             DeleteInternetGatewayFunc: func(in1 *ec2.DeleteInternetGatewayInput) (*ec2.DeleteInternetGatewayOutput, error) {
// 	               panic("mock out the DeleteInternetGateway method")
//             },
//             DeleteInternetGatewayRequestFunc: func(in1 *ec2.DeleteInternetGatewayInput) (*request.Request, *ec2.DeleteInternetGatewayOutput) {
// 	               panic("mock out the DeleteInternetGatewayRequest method")
//             },
//             DeleteInternetGatewayWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteInternetGatewayInput, in3 ...request.Option) (*ec2.DeleteInternetGatewayOutput, error) {
// 	               panic("mock out the DeleteInternetGatewayWithContext method")
//             },
//             DeleteKeyPairFunc: func(in1 *ec2.DeleteKeyPairInput) (*ec2.DeleteKeyPairOutput, error) {
// 	               panic("mock out the DeleteKeyPair method")
//             },
//             DeleteKeyPairRequestFunc: func(in1 *ec2.DeleteKeyPairInput) (*request.Request, *ec2.DeleteKeyPairOutput) {
// 	               panic("mock out the DeleteKeyPairRequest method")
//             },
//             DeleteKeyPairWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteKeyPairInput, in3 ...request.Option) (*ec2.DeleteKeyPairOutput, error) {
// 	               panic("mock out the DeleteKeyPairWithContext method")
//             },
//             DeleteLaunchTemplateFunc: func(in1 *ec2.DeleteLaunchTemplateInput) (*ec2.DeleteLaunchTemplateOutput, error) {
// 	               panic("mock out the DeleteLaunchTemplate method")
//             },
//             DeleteLaunchTemplateRequestFunc: func(in1 *ec2.DeleteLaunchTemplateInput) (*request.Request, *ec2.DeleteLaunchTemplateOutput) {
// 	               panic("mock out the DeleteLaunchTemplateRequest method")
//             },
//             DeleteLaunchTemplateVersionsFunc: func(in1 *ec2.DeleteLaunchTemplateVersionsInput) (*ec2.DeleteLaunchTemplateVersionsOutput, error) {
// 	               panic("mock out the DeleteLaunchTemplateVersions method")
//             },
//             DeleteLaunchTemplateVersionsRequestFunc: func(in1 *ec2.DeleteLaunchTemplateVersionsInput) (*request.Request, *ec2.DeleteLaunchTemplateVersionsOutput) {
// 	               panic("mock out the DeleteLaunchTemplateVersionsRequest method")
//             },
//             DeleteLaunchTemplateVersionsWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteLaunchTemplateVersionsInput, in3 ...request.Option) (*ec2.DeleteLaunchTemplateVersionsOutput, error) {
// 	               panic("mock out the DeleteLaunchTemplateVersionsWithContext method")
//             },
//             DeleteLaunchTemplateWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteLaunchTemplateInput, in3 ...request.Option) (*ec2.DeleteLaunchTemplateOutput, error) {
// 	               panic("mock out the DeleteLaunchTemplateWithContext method")
//             },
//             DeleteLocalGatewayRouteFunc: func(in1 *ec2.DeleteLocalGatewayRouteInput) (*ec2.DeleteLocalGatewayRouteOutput, error) {
// 	               panic("mock out the DeleteLocalGatewayRoute method")
//             },
//             DeleteLocalGatewayRouteRequestFunc: func(in1 *ec2.DeleteLocalGatewayRouteInput) (*request.Request, *ec2.DeleteLocalGatewayRouteOutput) {
// 	               panic("mock out the DeleteLocalGatewayRouteRequest method")
//             },
//             DeleteLocalGatewayRouteTableVpcAssociationFunc: func(in1 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput) (*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput, error) {
// 	               panic("mock out the DeleteLocalGatewayRouteTableVpcAssociation method")
//             },
//             DeleteLocalGatewayRouteTableVpcAssociationRequestFunc: func(in1 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput) (*request.Request, *ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput) {
// 	               panic("mock out the DeleteLocalGatewayRouteTableVpcAssociationRequest method")
//             },
//             DeleteLocalGatewayRouteTableVpcAssociationWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput, in3 ...request.Option) (*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput, error) {
// 	               panic("mock out the DeleteLocalGatewayRouteTableVpcAssociationWithContext method")
//             },
//             DeleteLocalGatewayRouteWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteLocalGatewayRouteInput, in3 ...request.Option) (*ec2.DeleteLocalGatewayRouteOutput, error) {
// 	               panic("mock out the DeleteLocalGatewayRouteWithContext method")
//             },
//             DeleteNatGatewayFunc: func(in1 *ec2.DeleteNatGatewayInput) (*ec2.DeleteNatGatewayOutput, error) {
// 	               panic("mock out the DeleteNatGateway method")
//             },
//             DeleteNatGatewayRequestFunc: func(in1 *ec2.DeleteNatGatewayInput) (*request.Request, *ec2.DeleteNatGatewayOutput) {
// 	               panic("mock out the DeleteNatGatewayRequest method")
//             },
//             DeleteNatGatewayWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteNatGatewayInput, in3 ...request.Option) (*ec2.DeleteNatGatewayOutput, error) {
// 	               panic("mock out the DeleteNatGatewayWithContext method")
//             },
//             DeleteNetworkAclFunc: func(in1 *ec2.DeleteNetworkAclInput) (*ec2.DeleteNetworkAclOutput, error) {
// 	               panic("mock out the DeleteNetworkAcl method")
//             },
//             DeleteNetworkAclEntryFunc: func(in1 *ec2.DeleteNetworkAclEntryInput) (*ec2.DeleteNetworkAclEntryOutput, error) {
// 	               panic("mock out the DeleteNetworkAclEntry method")
//             },
//             DeleteNetworkAclEntryRequestFunc: func(in1 *ec2.DeleteNetworkAclEntryInput) (*request.Request, *ec2.DeleteNetworkAclEntryOutput) {
// 	               panic("mock out the DeleteNetworkAclEntryRequest method")
//             },
//             DeleteNetworkAclEntryWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteNetworkAclEntryInput, in3 ...request.Option) (*ec2.DeleteNetworkAclEntryOutput, error) {
// 	               panic("mock out the DeleteNetworkAclEntryWithContext method")
//             },
//             DeleteNetworkAclRequestFunc: func(in1 *ec2.DeleteNetworkAclInput) (*request.Request, *ec2.DeleteNetworkAclOutput) {
// 	               panic("mock out the DeleteNetworkAclRequest method")
//             },
//             DeleteNetworkAclWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteNetworkAclInput, in3 ...request.Option) (*ec2.DeleteNetworkAclOutput, error) {
// 	               panic("mock out the DeleteNetworkAclWithContext method")
//             },
//             DeleteNetworkInterfaceFunc: func(in1 *ec2.DeleteNetworkInterfaceInput) (*ec2.DeleteNetworkInterfaceOutput, error) {
// 	               panic("mock out the DeleteNetworkInterface method")
//             },
//             DeleteNetworkInterfacePermissionFunc: func(in1 *ec2.DeleteNetworkInterfacePermissionInput) (*ec2.DeleteNetworkInterfacePermissionOutput, error) {
// 	               panic("mock out the DeleteNetworkInterfacePermission method")
//             },
//             DeleteNetworkInterfacePermissionRequestFunc: func(in1 *ec2.DeleteNetworkInterfacePermissionInput) (*request.Request, *ec2.DeleteNetworkInterfacePermissionOutput) {
// 	               panic("mock out the DeleteNetworkInterfacePermissionRequest method")
//             },
//             DeleteNetworkInterfacePermissionWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteNetworkInterfacePermissionInput, in3 ...request.Option) (*ec2.DeleteNetworkInterfacePermissionOutput, error) {
// 	               panic("mock out the DeleteNetworkInterfacePermissionWithContext method")
//             },
//             DeleteNetworkInterfaceRequestFunc: func(in1 *ec2.DeleteNetworkInterfaceInput) (*request.Request, *ec2.DeleteNetworkInterfaceOutput) {
// 	               panic("mock out the DeleteNetworkInterfaceRequest method")
//             },
//             DeleteNetworkInterfaceWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteNetworkInterfaceInput, in3 ...request.Option) (*ec2.DeleteNetworkInterfaceOutput, error) {
// 	               panic("mock out the DeleteNetworkInterfaceWithContext method")
//             },
//             DeletePlacementGroupFunc: func(in1 *ec2.DeletePlacementGroupInput) (*ec2.DeletePlacementGroupOutput, error) {
// 	               panic("mock out the DeletePlacementGroup method")
//             },
//             DeletePlacementGroupRequestFunc: func(in1 *ec2.DeletePlacementGroupInput) (*request.Request, *ec2.DeletePlacementGroupOutput) {
// 	               panic("mock out the DeletePlacementGroupRequest method")
//             },
//             DeletePlacementGroupWithContextFunc: func(in1 context.Context, in2 *ec2.DeletePlacementGroupInput, in3 ...request.Option) (*ec2.DeletePlacementGroupOutput, error) {
// 	               panic("mock out the DeletePlacementGroupWithContext method")
//             },
//             DeleteQueuedReservedInstancesFunc: func(in1 *ec2.DeleteQueuedReservedInstancesInput) (*ec2.DeleteQueuedReservedInstancesOutput, error) {
// 	               panic("mock out the DeleteQueuedReservedInstances method")
//             },
//             DeleteQueuedReservedInstancesRequestFunc: func(in1 *ec2.DeleteQueuedReservedInstancesInput) (*request.Request, *ec2.DeleteQueuedReservedInstancesOutput) {
// 	               panic("mock out the DeleteQueuedReservedInstancesRequest method")
//             },
//             DeleteQueuedReservedInstancesWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteQueuedReservedInstancesInput, in3 ...request.Option) (*ec2.DeleteQueuedReservedInstancesOutput, error) {
// 	               panic("mock out the DeleteQueuedReservedInstancesWithContext method")
//             },
//             DeleteRouteFunc: func(in1 *ec2.DeleteRouteInput) (*ec2.DeleteRouteOutput, error) {
// 	               panic("mock out the DeleteRoute method")
//             },
//             DeleteRouteRequestFunc: func(in1 *ec2.DeleteRouteInput) (*request.Request, *ec2.DeleteRouteOutput) {
// 	               panic("mock out the DeleteRouteRequest method")
//             },
//             DeleteRouteTableFunc: func(in1 *ec2.DeleteRouteTableInput) (*ec2.DeleteRouteTableOutput, error) {
// 	               panic("mock out the DeleteRouteTable method")
//             },
//             DeleteRouteTableRequestFunc: func(in1 *ec2.DeleteRouteTableInput) (*request.Request, *ec2.DeleteRouteTableOutput) {
// 	               panic("mock out the DeleteRouteTableRequest method")
//             },
//             DeleteRouteTableWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteRouteTableInput, in3 ...request.Option) (*ec2.DeleteRouteTableOutput, error) {
// 	               panic("mock out the DeleteRouteTableWithContext method")
//             },
//             DeleteRouteWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteRouteInput, in3 ...request.Option) (*ec2.DeleteRouteOutput, error) {
// 	               panic("mock out the DeleteRouteWithContext method")
//             },
//             DeleteSecurityGroupFunc: func(in1 *ec2.DeleteSecurityGroupInput) (*ec2.DeleteSecurityGroupOutput, error) {
// 	               panic("mock out the DeleteSecurityGroup method")
//             },
//             DeleteSecurityGroupRequestFunc: func(in1 *ec2.DeleteSecurityGroupInput) (*request.Request, *ec2.DeleteSecurityGroupOutput) {
// 	               panic("mock out the DeleteSecurityGroupRequest method")
//             },
//             DeleteSecurityGroupWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteSecurityGroupInput, in3 ...request.Option) (*ec2.DeleteSecurityGroupOutput, error) {
// 	               panic("mock out the DeleteSecurityGroupWithContext method")
//             },
//             DeleteSnapshotFunc: func(in1 *ec2.DeleteSnapshotInput) (*ec2.DeleteSnapshotOutput, error) {
// 	               panic("mock out the DeleteSnapshot method")
//             },
//             DeleteSnapshotRequestFunc: func(in1 *ec2.DeleteSnapshotInput) (*request.Request, *ec2.DeleteSnapshotOutput) {
// 	               panic("mock out the DeleteSnapshotRequest method")
//             },
//             DeleteSnapshotWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteSnapshotInput, in3 ...request.Option) (*ec2.DeleteSnapshotOutput, error) {
// 	               panic("mock out the DeleteSnapshotWithContext method")
//             },
//             DeleteSpotDatafeedSubscriptionFunc: func(in1 *ec2.DeleteSpotDatafeedSubscriptionInput) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error) {
// 	               panic("mock out the DeleteSpotDatafeedSubscription method")
//             },
//             DeleteSpotDatafeedSubscriptionRequestFunc: func(in1 *ec2.DeleteSpotDatafeedSubscriptionInput) (*request.Request, *ec2.DeleteSpotDatafeedSubscriptionOutput) {
// 	               panic("mock out the DeleteSpotDatafeedSubscriptionRequest method")
//             },
//             DeleteSpotDatafeedSubscriptionWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteSpotDatafeedSubscriptionInput, in3 ...request.Option) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error) {
// 	               panic("mock out the DeleteSpotDatafeedSubscriptionWithContext method")
//             },
//             DeleteSubnetFunc: func(in1 *ec2.DeleteSubnetInput) (*ec2.DeleteSubnetOutput, error) {
// 	               panic("mock out the DeleteSubnet method")
//             },
//             DeleteSubnetRequestFunc: func(in1 *ec2.DeleteSubnetInput) (*request.Request, *ec2.DeleteSubnetOutput) {
// 	               panic("mock out the DeleteSubnetRequest method")
//             },
//             DeleteSubnetWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteSubnetInput, in3 ...request.Option) (*ec2.DeleteSubnetOutput, error) {
// 	               panic("mock out the DeleteSubnetWithContext method")
//             },
//             DeleteTagsFunc: func(in1 *ec2.DeleteTagsInput) (*ec2.DeleteTagsOutput, error) {
// 	               panic("mock out the DeleteTags method")
//             },
//             DeleteTagsRequestFunc: func(in1 *ec2.DeleteTagsInput) (*request.Request, *ec2.DeleteTagsOutput) {
// 	               panic("mock out the DeleteTagsRequest method")
//             },
//             DeleteTagsWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteTagsInput, in3 ...request.Option) (*ec2.DeleteTagsOutput, error) {
// 	               panic("mock out the DeleteTagsWithContext method")
//             },
//             DeleteTrafficMirrorFilterFunc: func(in1 *ec2.DeleteTrafficMirrorFilterInput) (*ec2.DeleteTrafficMirrorFilterOutput, error) {
// 	               panic("mock out the DeleteTrafficMirrorFilter method")
//             },
//             DeleteTrafficMirrorFilterRequestFunc: func(in1 *ec2.DeleteTrafficMirrorFilterInput) (*request.Request, *ec2.DeleteTrafficMirrorFilterOutput) {
// 	               panic("mock out the DeleteTrafficMirrorFilterRequest method")
//             },
//             DeleteTrafficMirrorFilterRuleFunc: func(in1 *ec2.DeleteTrafficMirrorFilterRuleInput) (*ec2.DeleteTrafficMirrorFilterRuleOutput, error) {
// 	               panic("mock out the DeleteTrafficMirrorFilterRule method")
//             },
//             DeleteTrafficMirrorFilterRuleRequestFunc: func(in1 *ec2.DeleteTrafficMirrorFilterRuleInput) (*request.Request, *ec2.DeleteTrafficMirrorFilterRuleOutput) {
// 	               panic("mock out the DeleteTrafficMirrorFilterRuleRequest method")
//             },
//             DeleteTrafficMirrorFilterRuleWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteTrafficMirrorFilterRuleInput, in3 ...request.Option) (*ec2.DeleteTrafficMirrorFilterRuleOutput, error) {
// 	               panic("mock out the DeleteTrafficMirrorFilterRuleWithContext method")
//             },
//             DeleteTrafficMirrorFilterWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteTrafficMirrorFilterInput, in3 ...request.Option) (*ec2.DeleteTrafficMirrorFilterOutput, error) {
// 	               panic("mock out the DeleteTrafficMirrorFilterWithContext method")
//             },
//             DeleteTrafficMirrorSessionFunc: func(in1 *ec2.DeleteTrafficMirrorSessionInput) (*ec2.DeleteTrafficMirrorSessionOutput, error) {
// 	               panic("mock out the DeleteTrafficMirrorSession method")
//             },
//             DeleteTrafficMirrorSessionRequestFunc: func(in1 *ec2.DeleteTrafficMirrorSessionInput) (*request.Request, *ec2.DeleteTrafficMirrorSessionOutput) {
// 	               panic("mock out the DeleteTrafficMirrorSessionRequest method")
//             },
//             DeleteTrafficMirrorSessionWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteTrafficMirrorSessionInput, in3 ...request.Option) (*ec2.DeleteTrafficMirrorSessionOutput, error) {
// 	               panic("mock out the DeleteTrafficMirrorSessionWithContext method")
//             },
//             DeleteTrafficMirrorTargetFunc: func(in1 *ec2.DeleteTrafficMirrorTargetInput) (*ec2.DeleteTrafficMirrorTargetOutput, error) {
// 	               panic("mock out the DeleteTrafficMirrorTarget method")
//             },
//             DeleteTrafficMirrorTargetRequestFunc: func(in1 *ec2.DeleteTrafficMirrorTargetInput) (*request.Request, *ec2.DeleteTrafficMirrorTargetOutput) {
// 	               panic("mock out the DeleteTrafficMirrorTargetRequest method")
//             },
//             DeleteTrafficMirrorTargetWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteTrafficMirrorTargetInput, in3 ...request.Option) (*ec2.DeleteTrafficMirrorTargetOutput, error) {
// 	               panic("mock out the DeleteTrafficMirrorTargetWithContext method")
//             },
//             DeleteTransitGatewayFunc: func(in1 *ec2.DeleteTransitGatewayInput) (*ec2.DeleteTransitGatewayOutput, error) {
// 	               panic("mock out the DeleteTransitGateway method")
//             },
//             DeleteTransitGatewayMulticastDomainFunc: func(in1 *ec2.DeleteTransitGatewayMulticastDomainInput) (*ec2.DeleteTransitGatewayMulticastDomainOutput, error) {
// 	               panic("mock out the DeleteTransitGatewayMulticastDomain method")
//             },
//             DeleteTransitGatewayMulticastDomainRequestFunc: func(in1 *ec2.DeleteTransitGatewayMulticastDomainInput) (*request.Request, *ec2.DeleteTransitGatewayMulticastDomainOutput) {
// 	               panic("mock out the DeleteTransitGatewayMulticastDomainRequest method")
//             },
//             DeleteTransitGatewayMulticastDomainWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteTransitGatewayMulticastDomainInput, in3 ...request.Option) (*ec2.DeleteTransitGatewayMulticastDomainOutput, error) {
// 	               panic("mock out the DeleteTransitGatewayMulticastDomainWithContext method")
//             },
//             DeleteTransitGatewayPeeringAttachmentFunc: func(in1 *ec2.DeleteTransitGatewayPeeringAttachmentInput) (*ec2.DeleteTransitGatewayPeeringAttachmentOutput, error) {
// 	               panic("mock out the DeleteTransitGatewayPeeringAttachment method")
//             },
//             DeleteTransitGatewayPeeringAttachmentRequestFunc: func(in1 *ec2.DeleteTransitGatewayPeeringAttachmentInput) (*request.Request, *ec2.DeleteTransitGatewayPeeringAttachmentOutput) {
// 	               panic("mock out the DeleteTransitGatewayPeeringAttachmentRequest method")
//             },
//             DeleteTransitGatewayPeeringAttachmentWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteTransitGatewayPeeringAttachmentInput, in3 ...request.Option) (*ec2.DeleteTransitGatewayPeeringAttachmentOutput, error) {
// 	               panic("mock out the DeleteTransitGatewayPeeringAttachmentWithContext method")
//             },
//             DeleteTransitGatewayRequestFunc: func(in1 *ec2.DeleteTransitGatewayInput) (*request.Request, *ec2.DeleteTransitGatewayOutput) {
// 	               panic("mock out the DeleteTransitGatewayRequest method")
//             },
//             DeleteTransitGatewayRouteFunc: func(in1 *ec2.DeleteTransitGatewayRouteInput) (*ec2.DeleteTransitGatewayRouteOutput, error) {
// 	               panic("mock out the DeleteTransitGatewayRoute method")
//             },
//             DeleteTransitGatewayRouteRequestFunc: func(in1 *ec2.DeleteTransitGatewayRouteInput) (*request.Request, *ec2.DeleteTransitGatewayRouteOutput) {
// 	               panic("mock out the DeleteTransitGatewayRouteRequest method")
//             },
//             DeleteTransitGatewayRouteTableFunc: func(in1 *ec2.DeleteTransitGatewayRouteTableInput) (*ec2.DeleteTransitGatewayRouteTableOutput, error) {
// 	               panic("mock out the DeleteTransitGatewayRouteTable method")
//             },
//             DeleteTransitGatewayRouteTableRequestFunc: func(in1 *ec2.DeleteTransitGatewayRouteTableInput) (*request.Request, *ec2.DeleteTransitGatewayRouteTableOutput) {
// 	               panic("mock out the DeleteTransitGatewayRouteTableRequest method")
//             },
//             DeleteTransitGatewayRouteTableWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteTransitGatewayRouteTableInput, in3 ...request.Option) (*ec2.DeleteTransitGatewayRouteTableOutput, error) {
// 	               panic("mock out the DeleteTransitGatewayRouteTableWithContext method")
//             },
//             DeleteTransitGatewayRouteWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteTransitGatewayRouteInput, in3 ...request.Option) (*ec2.DeleteTransitGatewayRouteOutput, error) {
// 	               panic("mock out the DeleteTransitGatewayRouteWithContext method")
//             },
//             DeleteTransitGatewayVpcAttachmentFunc: func(in1 *ec2.DeleteTransitGatewayVpcAttachmentInput) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error) {
// 	               panic("mock out the DeleteTransitGatewayVpcAttachment method")
//             },
//             DeleteTransitGatewayVpcAttachmentRequestFunc: func(in1 *ec2.DeleteTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.DeleteTransitGatewayVpcAttachmentOutput) {
// 	               panic("mock out the DeleteTransitGatewayVpcAttachmentRequest method")
//             },
//             DeleteTransitGatewayVpcAttachmentWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteTransitGatewayVpcAttachmentInput, in3 ...request.Option) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error) {
// 	               panic("mock out the DeleteTransitGatewayVpcAttachmentWithContext method")
//             },
//             DeleteTransitGatewayWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteTransitGatewayInput, in3 ...request.Option) (*ec2.DeleteTransitGatewayOutput, error) {
// 	               panic("mock out the DeleteTransitGatewayWithContext method")
//             },
//             DeleteVolumeFunc: func(in1 *ec2.DeleteVolumeInput) (*ec2.DeleteVolumeOutput, error) {
// 	               panic("mock out the DeleteVolume method")
//             },
//             DeleteVolumeRequestFunc: func(in1 *ec2.DeleteVolumeInput) (*request.Request, *ec2.DeleteVolumeOutput) {
// 	               panic("mock out the DeleteVolumeRequest method")
//             },
//             DeleteVolumeWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteVolumeInput, in3 ...request.Option) (*ec2.DeleteVolumeOutput, error) {
// 	               panic("mock out the DeleteVolumeWithContext method")
//             },
//             DeleteVpcFunc: func(in1 *ec2.DeleteVpcInput) (*ec2.DeleteVpcOutput, error) {
// 	               panic("mock out the DeleteVpc method")
//             },
//             DeleteVpcEndpointConnectionNotificationsFunc: func(in1 *ec2.DeleteVpcEndpointConnectionNotificationsInput) (*ec2.DeleteVpcEndpointConnectionNotificationsOutput, error) {
// 	               panic("mock out the DeleteVpcEndpointConnectionNotifications method")
//             },
//             DeleteVpcEndpointConnectionNotificationsRequestFunc: func(in1 *ec2.DeleteVpcEndpointConnectionNotificationsInput) (*request.Request, *ec2.DeleteVpcEndpointConnectionNotificationsOutput) {
// 	               panic("mock out the DeleteVpcEndpointConnectionNotificationsRequest method")
//             },
//             DeleteVpcEndpointConnectionNotificationsWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteVpcEndpointConnectionNotificationsInput, in3 ...request.Option) (*ec2.DeleteVpcEndpointConnectionNotificationsOutput, error) {
// 	               panic("mock out the DeleteVpcEndpointConnectionNotificationsWithContext method")
//             },
//             DeleteVpcEndpointServiceConfigurationsFunc: func(in1 *ec2.DeleteVpcEndpointServiceConfigurationsInput) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error) {
// 	               panic("mock out the DeleteVpcEndpointServiceConfigurations method")
//             },
//             DeleteVpcEndpointServiceConfigurationsRequestFunc: func(in1 *ec2.DeleteVpcEndpointServiceConfigurationsInput) (*request.Request, *ec2.DeleteVpcEndpointServiceConfigurationsOutput) {
// 	               panic("mock out the DeleteVpcEndpointServiceConfigurationsRequest method")
//             },
//             DeleteVpcEndpointServiceConfigurationsWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteVpcEndpointServiceConfigurationsInput, in3 ...request.Option) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error) {
// 	               panic("mock out the DeleteVpcEndpointServiceConfigurationsWithContext method")
//             },
//             DeleteVpcEndpointsFunc: func(in1 *ec2.DeleteVpcEndpointsInput) (*ec2.DeleteVpcEndpointsOutput, error) {
// 	               panic("mock out the DeleteVpcEndpoints method")
//             },
//             DeleteVpcEndpointsRequestFunc: func(in1 *ec2.DeleteVpcEndpointsInput) (*request.Request, *ec2.DeleteVpcEndpointsOutput) {
// 	               panic("mock out the DeleteVpcEndpointsRequest method")
//             },
//             DeleteVpcEndpointsWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteVpcEndpointsInput, in3 ...request.Option) (*ec2.DeleteVpcEndpointsOutput, error) {
// 	               panic("mock out the DeleteVpcEndpointsWithContext method")
//             },
//             DeleteVpcPeeringConnectionFunc: func(in1 *ec2.DeleteVpcPeeringConnectionInput) (*ec2.DeleteVpcPeeringConnectionOutput, error) {
// 	               panic("mock out the DeleteVpcPeeringConnection method")
//             },
//             DeleteVpcPeeringConnectionRequestFunc: func(in1 *ec2.DeleteVpcPeeringConnectionInput) (*request.Request, *ec2.DeleteVpcPeeringConnectionOutput) {
// 	               panic("mock out the DeleteVpcPeeringConnectionRequest method")
//             },
//             DeleteVpcPeeringConnectionWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteVpcPeeringConnectionInput, in3 ...request.Option) (*ec2.DeleteVpcPeeringConnectionOutput, error) {
// 	               panic("mock out the DeleteVpcPeeringConnectionWithContext method")
//             },
//             DeleteVpcRequestFunc: func(in1 *ec2.DeleteVpcInput) (*request.Request, *ec2.DeleteVpcOutput) {
// 	               panic("mock out the DeleteVpcRequest method")
//             },
//             DeleteVpcWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteVpcInput, in3 ...request.Option) (*ec2.DeleteVpcOutput, error) {
// 	               panic("mock out the DeleteVpcWithContext method")
//             },
//             DeleteVpnConnectionFunc: func(in1 *ec2.DeleteVpnConnectionInput) (*ec2.DeleteVpnConnectionOutput, error) {
// 	               panic("mock out the DeleteVpnConnection method")
//             },
//             DeleteVpnConnectionRequestFunc: func(in1 *ec2.DeleteVpnConnectionInput) (*request.Request, *ec2.DeleteVpnConnectionOutput) {
// 	               panic("mock out the DeleteVpnConnectionRequest method")
//             },
//             DeleteVpnConnectionRouteFunc: func(in1 *ec2.DeleteVpnConnectionRouteInput) (*ec2.DeleteVpnConnectionRouteOutput, error) {
// 	               panic("mock out the DeleteVpnConnectionRoute method")
//             },
//             DeleteVpnConnectionRouteRequestFunc: func(in1 *ec2.DeleteVpnConnectionRouteInput) (*request.Request, *ec2.DeleteVpnConnectionRouteOutput) {
// 	               panic("mock out the DeleteVpnConnectionRouteRequest method")
//             },
//             DeleteVpnConnectionRouteWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteVpnConnectionRouteInput, in3 ...request.Option) (*ec2.DeleteVpnConnectionRouteOutput, error) {
// 	               panic("mock out the DeleteVpnConnectionRouteWithContext method")
//             },
//             DeleteVpnConnectionWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteVpnConnectionInput, in3 ...request.Option) (*ec2.DeleteVpnConnectionOutput, error) {
// 	               panic("mock out the DeleteVpnConnectionWithContext method")
//             },
//             DeleteVpnGatewayFunc: func(in1 *ec2.DeleteVpnGatewayInput) (*ec2.DeleteVpnGatewayOutput, error) {
// 	               panic("mock out the DeleteVpnGateway method")
//             },
//             DeleteVpnGatewayRequestFunc: func(in1 *ec2.DeleteVpnGatewayInput) (*request.Request, *ec2.DeleteVpnGatewayOutput) {
// 	               panic("mock out the DeleteVpnGatewayRequest method")
//             },
//             DeleteVpnGatewayWithContextFunc: func(in1 context.Context, in2 *ec2.DeleteVpnGatewayInput, in3 ...request.Option) (*ec2.DeleteVpnGatewayOutput, error) {
// 	               panic("mock out the DeleteVpnGatewayWithContext method")
//             },
//             DeprovisionByoipCidrFunc: func(in1 *ec2.DeprovisionByoipCidrInput) (*ec2.DeprovisionByoipCidrOutput, error) {
// 	               panic("mock out the DeprovisionByoipCidr method")
//             },
//             DeprovisionByoipCidrRequestFunc: func(in1 *ec2.DeprovisionByoipCidrInput) (*request.Request, *ec2.DeprovisionByoipCidrOutput) {
// 	               panic("mock out the DeprovisionByoipCidrRequest method")
//             },
//             DeprovisionByoipCidrWithContextFunc: func(in1 context.Context, in2 *ec2.DeprovisionByoipCidrInput, in3 ...request.Option) (*ec2.DeprovisionByoipCidrOutput, error) {
// 	               panic("mock out the DeprovisionByoipCidrWithContext method")
//             },
//             DeregisterImageFunc: func(in1 *ec2.DeregisterImageInput) (*ec2.DeregisterImageOutput, error) {
// 	               panic("mock out the DeregisterImage method")
//             },
//             DeregisterImageRequestFunc: func(in1 *ec2.DeregisterImageInput) (*request.Request, *ec2.DeregisterImageOutput) {
// 	               panic("mock out the DeregisterImageRequest method")
//             },
//             DeregisterImageWithContextFunc: func(in1 context.Context, in2 *ec2.DeregisterImageInput, in3 ...request.Option) (*ec2.DeregisterImageOutput, error) {
// 	               panic("mock out the DeregisterImageWithContext method")
//             },
//             DeregisterTransitGatewayMulticastGroupMembersFunc: func(in1 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput) (*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput, error) {
// 	               panic("mock out the DeregisterTransitGatewayMulticastGroupMembers method")
//             },
//             DeregisterTransitGatewayMulticastGroupMembersRequestFunc: func(in1 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput) (*request.Request, *ec2.DeregisterTransitGatewayMulticastGroupMembersOutput) {
// 	               panic("mock out the DeregisterTransitGatewayMulticastGroupMembersRequest method")
//             },
//             DeregisterTransitGatewayMulticastGroupMembersWithContextFunc: func(in1 context.Context, in2 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput, in3 ...request.Option) (*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput, error) {
// 	               panic("mock out the DeregisterTransitGatewayMulticastGroupMembersWithContext method")
//             },
//             DeregisterTransitGatewayMulticastGroupSourcesFunc: func(in1 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput) (*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput, error) {
// 	               panic("mock out the DeregisterTransitGatewayMulticastGroupSources method")
//             },
//             DeregisterTransitGatewayMulticastGroupSourcesRequestFunc: func(in1 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput) (*request.Request, *ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput) {
// 	               panic("mock out the DeregisterTransitGatewayMulticastGroupSourcesRequest method")
//             },
//             DeregisterTransitGatewayMulticastGroupSourcesWithContextFunc: func(in1 context.Context, in2 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput, in3 ...request.Option) (*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput, error) {
// 	               panic("mock out the DeregisterTransitGatewayMulticastGroupSourcesWithContext method")
//             },
//             DescribeAccountAttributesFunc: func(in1 *ec2.DescribeAccountAttributesInput) (*ec2.DescribeAccountAttributesOutput, error) {
// 	               panic("mock out the DescribeAccountAttributes method")
//             },
//             DescribeAccountAttributesRequestFunc: func(in1 *ec2.DescribeAccountAttributesInput) (*request.Request, *ec2.DescribeAccountAttributesOutput) {
// 	               panic("mock out the DescribeAccountAttributesRequest method")
//             },
//             DescribeAccountAttributesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeAccountAttributesInput, in3 ...request.Option) (*ec2.DescribeAccountAttributesOutput, error) {
// 	               panic("mock out the DescribeAccountAttributesWithContext method")
//             },
//             DescribeAddressesFunc: func(in1 *ec2.DescribeAddressesInput) (*ec2.DescribeAddressesOutput, error) {
// 	               panic("mock out the DescribeAddresses method")
//             },
//             DescribeAddressesRequestFunc: func(in1 *ec2.DescribeAddressesInput) (*request.Request, *ec2.DescribeAddressesOutput) {
// 	               panic("mock out the DescribeAddressesRequest method")
//             },
//             DescribeAddressesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeAddressesInput, in3 ...request.Option) (*ec2.DescribeAddressesOutput, error) {
// 	               panic("mock out the DescribeAddressesWithContext method")
//             },
//             DescribeAggregateIdFormatFunc: func(in1 *ec2.DescribeAggregateIdFormatInput) (*ec2.DescribeAggregateIdFormatOutput, error) {
// 	               panic("mock out the DescribeAggregateIdFormat method")
//             },
//             DescribeAggregateIdFormatRequestFunc: func(in1 *ec2.DescribeAggregateIdFormatInput) (*request.Request, *ec2.DescribeAggregateIdFormatOutput) {
// 	               panic("mock out the DescribeAggregateIdFormatRequest method")
//             },
//             DescribeAggregateIdFormatWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeAggregateIdFormatInput, in3 ...request.Option) (*ec2.DescribeAggregateIdFormatOutput, error) {
// 	               panic("mock out the DescribeAggregateIdFormatWithContext method")
//             },
//             DescribeAvailabilityZonesFunc: func(in1 *ec2.DescribeAvailabilityZonesInput) (*ec2.DescribeAvailabilityZonesOutput, error) {
// 	               panic("mock out the DescribeAvailabilityZones method")
//             },
//             DescribeAvailabilityZonesRequestFunc: func(in1 *ec2.DescribeAvailabilityZonesInput) (*request.Request, *ec2.DescribeAvailabilityZonesOutput) {
// 	               panic("mock out the DescribeAvailabilityZonesRequest method")
//             },
//             DescribeAvailabilityZonesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeAvailabilityZonesInput, in3 ...request.Option) (*ec2.DescribeAvailabilityZonesOutput, error) {
// 	               panic("mock out the DescribeAvailabilityZonesWithContext method")
//             },
//             DescribeBundleTasksFunc: func(in1 *ec2.DescribeBundleTasksInput) (*ec2.DescribeBundleTasksOutput, error) {
// 	               panic("mock out the DescribeBundleTasks method")
//             },
//             DescribeBundleTasksRequestFunc: func(in1 *ec2.DescribeBundleTasksInput) (*request.Request, *ec2.DescribeBundleTasksOutput) {
// 	               panic("mock out the DescribeBundleTasksRequest method")
//             },
//             DescribeBundleTasksWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeBundleTasksInput, in3 ...request.Option) (*ec2.DescribeBundleTasksOutput, error) {
// 	               panic("mock out the DescribeBundleTasksWithContext method")
//             },
//             DescribeByoipCidrsFunc: func(in1 *ec2.DescribeByoipCidrsInput) (*ec2.DescribeByoipCidrsOutput, error) {
// 	               panic("mock out the DescribeByoipCidrs method")
//             },
//             DescribeByoipCidrsPagesFunc: func(in1 *ec2.DescribeByoipCidrsInput, in2 func(*ec2.DescribeByoipCidrsOutput, bool) bool) error {
// 	               panic("mock out the DescribeByoipCidrsPages method")
//             },
//             DescribeByoipCidrsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeByoipCidrsInput, in3 func(*ec2.DescribeByoipCidrsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeByoipCidrsPagesWithContext method")
//             },
//             DescribeByoipCidrsRequestFunc: func(in1 *ec2.DescribeByoipCidrsInput) (*request.Request, *ec2.DescribeByoipCidrsOutput) {
// 	               panic("mock out the DescribeByoipCidrsRequest method")
//             },
//             DescribeByoipCidrsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeByoipCidrsInput, in3 ...request.Option) (*ec2.DescribeByoipCidrsOutput, error) {
// 	               panic("mock out the DescribeByoipCidrsWithContext method")
//             },
//             DescribeCapacityReservationsFunc: func(in1 *ec2.DescribeCapacityReservationsInput) (*ec2.DescribeCapacityReservationsOutput, error) {
// 	               panic("mock out the DescribeCapacityReservations method")
//             },
//             DescribeCapacityReservationsPagesFunc: func(in1 *ec2.DescribeCapacityReservationsInput, in2 func(*ec2.DescribeCapacityReservationsOutput, bool) bool) error {
// 	               panic("mock out the DescribeCapacityReservationsPages method")
//             },
//             DescribeCapacityReservationsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeCapacityReservationsInput, in3 func(*ec2.DescribeCapacityReservationsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeCapacityReservationsPagesWithContext method")
//             },
//             DescribeCapacityReservationsRequestFunc: func(in1 *ec2.DescribeCapacityReservationsInput) (*request.Request, *ec2.DescribeCapacityReservationsOutput) {
// 	               panic("mock out the DescribeCapacityReservationsRequest method")
//             },
//             DescribeCapacityReservationsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeCapacityReservationsInput, in3 ...request.Option) (*ec2.DescribeCapacityReservationsOutput, error) {
// 	               panic("mock out the DescribeCapacityReservationsWithContext method")
//             },
//             DescribeClassicLinkInstancesFunc: func(in1 *ec2.DescribeClassicLinkInstancesInput) (*ec2.DescribeClassicLinkInstancesOutput, error) {
// 	               panic("mock out the DescribeClassicLinkInstances method")
//             },
//             DescribeClassicLinkInstancesPagesFunc: func(in1 *ec2.DescribeClassicLinkInstancesInput, in2 func(*ec2.DescribeClassicLinkInstancesOutput, bool) bool) error {
// 	               panic("mock out the DescribeClassicLinkInstancesPages method")
//             },
//             DescribeClassicLinkInstancesPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeClassicLinkInstancesInput, in3 func(*ec2.DescribeClassicLinkInstancesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeClassicLinkInstancesPagesWithContext method")
//             },
//             DescribeClassicLinkInstancesRequestFunc: func(in1 *ec2.DescribeClassicLinkInstancesInput) (*request.Request, *ec2.DescribeClassicLinkInstancesOutput) {
// 	               panic("mock out the DescribeClassicLinkInstancesRequest method")
//             },
//             DescribeClassicLinkInstancesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeClassicLinkInstancesInput, in3 ...request.Option) (*ec2.DescribeClassicLinkInstancesOutput, error) {
// 	               panic("mock out the DescribeClassicLinkInstancesWithContext method")
//             },
//             DescribeClientVpnAuthorizationRulesFunc: func(in1 *ec2.DescribeClientVpnAuthorizationRulesInput) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error) {
// 	               panic("mock out the DescribeClientVpnAuthorizationRules method")
//             },
//             DescribeClientVpnAuthorizationRulesPagesFunc: func(in1 *ec2.DescribeClientVpnAuthorizationRulesInput, in2 func(*ec2.DescribeClientVpnAuthorizationRulesOutput, bool) bool) error {
// 	               panic("mock out the DescribeClientVpnAuthorizationRulesPages method")
//             },
//             DescribeClientVpnAuthorizationRulesPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeClientVpnAuthorizationRulesInput, in3 func(*ec2.DescribeClientVpnAuthorizationRulesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeClientVpnAuthorizationRulesPagesWithContext method")
//             },
//             DescribeClientVpnAuthorizationRulesRequestFunc: func(in1 *ec2.DescribeClientVpnAuthorizationRulesInput) (*request.Request, *ec2.DescribeClientVpnAuthorizationRulesOutput) {
// 	               panic("mock out the DescribeClientVpnAuthorizationRulesRequest method")
//             },
//             DescribeClientVpnAuthorizationRulesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeClientVpnAuthorizationRulesInput, in3 ...request.Option) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error) {
// 	               panic("mock out the DescribeClientVpnAuthorizationRulesWithContext method")
//             },
//             DescribeClientVpnConnectionsFunc: func(in1 *ec2.DescribeClientVpnConnectionsInput) (*ec2.DescribeClientVpnConnectionsOutput, error) {
// 	               panic("mock out the DescribeClientVpnConnections method")
//             },
//             DescribeClientVpnConnectionsPagesFunc: func(in1 *ec2.DescribeClientVpnConnectionsInput, in2 func(*ec2.DescribeClientVpnConnectionsOutput, bool) bool) error {
// 	               panic("mock out the DescribeClientVpnConnectionsPages method")
//             },
//             DescribeClientVpnConnectionsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeClientVpnConnectionsInput, in3 func(*ec2.DescribeClientVpnConnectionsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeClientVpnConnectionsPagesWithContext method")
//             },
//             DescribeClientVpnConnectionsRequestFunc: func(in1 *ec2.DescribeClientVpnConnectionsInput) (*request.Request, *ec2.DescribeClientVpnConnectionsOutput) {
// 	               panic("mock out the DescribeClientVpnConnectionsRequest method")
//             },
//             DescribeClientVpnConnectionsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeClientVpnConnectionsInput, in3 ...request.Option) (*ec2.DescribeClientVpnConnectionsOutput, error) {
// 	               panic("mock out the DescribeClientVpnConnectionsWithContext method")
//             },
//             DescribeClientVpnEndpointsFunc: func(in1 *ec2.DescribeClientVpnEndpointsInput) (*ec2.DescribeClientVpnEndpointsOutput, error) {
// 	               panic("mock out the DescribeClientVpnEndpoints method")
//             },
//             DescribeClientVpnEndpointsPagesFunc: func(in1 *ec2.DescribeClientVpnEndpointsInput, in2 func(*ec2.DescribeClientVpnEndpointsOutput, bool) bool) error {
// 	               panic("mock out the DescribeClientVpnEndpointsPages method")
//             },
//             DescribeClientVpnEndpointsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeClientVpnEndpointsInput, in3 func(*ec2.DescribeClientVpnEndpointsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeClientVpnEndpointsPagesWithContext method")
//             },
//             DescribeClientVpnEndpointsRequestFunc: func(in1 *ec2.DescribeClientVpnEndpointsInput) (*request.Request, *ec2.DescribeClientVpnEndpointsOutput) {
// 	               panic("mock out the DescribeClientVpnEndpointsRequest method")
//             },
//             DescribeClientVpnEndpointsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeClientVpnEndpointsInput, in3 ...request.Option) (*ec2.DescribeClientVpnEndpointsOutput, error) {
// 	               panic("mock out the DescribeClientVpnEndpointsWithContext method")
//             },
//             DescribeClientVpnRoutesFunc: func(in1 *ec2.DescribeClientVpnRoutesInput) (*ec2.DescribeClientVpnRoutesOutput, error) {
// 	               panic("mock out the DescribeClientVpnRoutes method")
//             },
//             DescribeClientVpnRoutesPagesFunc: func(in1 *ec2.DescribeClientVpnRoutesInput, in2 func(*ec2.DescribeClientVpnRoutesOutput, bool) bool) error {
// 	               panic("mock out the DescribeClientVpnRoutesPages method")
//             },
//             DescribeClientVpnRoutesPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeClientVpnRoutesInput, in3 func(*ec2.DescribeClientVpnRoutesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeClientVpnRoutesPagesWithContext method")
//             },
//             DescribeClientVpnRoutesRequestFunc: func(in1 *ec2.DescribeClientVpnRoutesInput) (*request.Request, *ec2.DescribeClientVpnRoutesOutput) {
// 	               panic("mock out the DescribeClientVpnRoutesRequest method")
//             },
//             DescribeClientVpnRoutesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeClientVpnRoutesInput, in3 ...request.Option) (*ec2.DescribeClientVpnRoutesOutput, error) {
// 	               panic("mock out the DescribeClientVpnRoutesWithContext method")
//             },
//             DescribeClientVpnTargetNetworksFunc: func(in1 *ec2.DescribeClientVpnTargetNetworksInput) (*ec2.DescribeClientVpnTargetNetworksOutput, error) {
// 	               panic("mock out the DescribeClientVpnTargetNetworks method")
//             },
//             DescribeClientVpnTargetNetworksPagesFunc: func(in1 *ec2.DescribeClientVpnTargetNetworksInput, in2 func(*ec2.DescribeClientVpnTargetNetworksOutput, bool) bool) error {
// 	               panic("mock out the DescribeClientVpnTargetNetworksPages method")
//             },
//             DescribeClientVpnTargetNetworksPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeClientVpnTargetNetworksInput, in3 func(*ec2.DescribeClientVpnTargetNetworksOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeClientVpnTargetNetworksPagesWithContext method")
//             },
//             DescribeClientVpnTargetNetworksRequestFunc: func(in1 *ec2.DescribeClientVpnTargetNetworksInput) (*request.Request, *ec2.DescribeClientVpnTargetNetworksOutput) {
// 	               panic("mock out the DescribeClientVpnTargetNetworksRequest method")
//             },
//             DescribeClientVpnTargetNetworksWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeClientVpnTargetNetworksInput, in3 ...request.Option) (*ec2.DescribeClientVpnTargetNetworksOutput, error) {
// 	               panic("mock out the DescribeClientVpnTargetNetworksWithContext method")
//             },
//             DescribeCoipPoolsFunc: func(in1 *ec2.DescribeCoipPoolsInput) (*ec2.DescribeCoipPoolsOutput, error) {
// 	               panic("mock out the DescribeCoipPools method")
//             },
//             DescribeCoipPoolsRequestFunc: func(in1 *ec2.DescribeCoipPoolsInput) (*request.Request, *ec2.DescribeCoipPoolsOutput) {
// 	               panic("mock out the DescribeCoipPoolsRequest method")
//             },
//             DescribeCoipPoolsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeCoipPoolsInput, in3 ...request.Option) (*ec2.DescribeCoipPoolsOutput, error) {
// 	               panic("mock out the DescribeCoipPoolsWithContext method")
//             },
//             DescribeConversionTasksFunc: func(in1 *ec2.DescribeConversionTasksInput) (*ec2.DescribeConversionTasksOutput, error) {
// 	               panic("mock out the DescribeConversionTasks method")
//             },
//             DescribeConversionTasksRequestFunc: func(in1 *ec2.DescribeConversionTasksInput) (*request.Request, *ec2.DescribeConversionTasksOutput) {
// 	               panic("mock out the DescribeConversionTasksRequest method")
//             },
//             DescribeConversionTasksWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeConversionTasksInput, in3 ...request.Option) (*ec2.DescribeConversionTasksOutput, error) {
// 	               panic("mock out the DescribeConversionTasksWithContext method")
//             },
//             DescribeCustomerGatewaysFunc: func(in1 *ec2.DescribeCustomerGatewaysInput) (*ec2.DescribeCustomerGatewaysOutput, error) {
// 	               panic("mock out the DescribeCustomerGateways method")
//             },
//             DescribeCustomerGatewaysRequestFunc: func(in1 *ec2.DescribeCustomerGatewaysInput) (*request.Request, *ec2.DescribeCustomerGatewaysOutput) {
// 	               panic("mock out the DescribeCustomerGatewaysRequest method")
//             },
//             DescribeCustomerGatewaysWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeCustomerGatewaysInput, in3 ...request.Option) (*ec2.DescribeCustomerGatewaysOutput, error) {
// 	               panic("mock out the DescribeCustomerGatewaysWithContext method")
//             },
//             DescribeDhcpOptionsFunc: func(in1 *ec2.DescribeDhcpOptionsInput) (*ec2.DescribeDhcpOptionsOutput, error) {
// 	               panic("mock out the DescribeDhcpOptions method")
//             },
//             DescribeDhcpOptionsPagesFunc: func(in1 *ec2.DescribeDhcpOptionsInput, in2 func(*ec2.DescribeDhcpOptionsOutput, bool) bool) error {
// 	               panic("mock out the DescribeDhcpOptionsPages method")
//             },
//             DescribeDhcpOptionsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeDhcpOptionsInput, in3 func(*ec2.DescribeDhcpOptionsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeDhcpOptionsPagesWithContext method")
//             },
//             DescribeDhcpOptionsRequestFunc: func(in1 *ec2.DescribeDhcpOptionsInput) (*request.Request, *ec2.DescribeDhcpOptionsOutput) {
// 	               panic("mock out the DescribeDhcpOptionsRequest method")
//             },
//             DescribeDhcpOptionsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeDhcpOptionsInput, in3 ...request.Option) (*ec2.DescribeDhcpOptionsOutput, error) {
// 	               panic("mock out the DescribeDhcpOptionsWithContext method")
//             },
//             DescribeEgressOnlyInternetGatewaysFunc: func(in1 *ec2.DescribeEgressOnlyInternetGatewaysInput) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error) {
// 	               panic("mock out the DescribeEgressOnlyInternetGateways method")
//             },
//             DescribeEgressOnlyInternetGatewaysPagesFunc: func(in1 *ec2.DescribeEgressOnlyInternetGatewaysInput, in2 func(*ec2.DescribeEgressOnlyInternetGatewaysOutput, bool) bool) error {
// 	               panic("mock out the DescribeEgressOnlyInternetGatewaysPages method")
//             },
//             DescribeEgressOnlyInternetGatewaysPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeEgressOnlyInternetGatewaysInput, in3 func(*ec2.DescribeEgressOnlyInternetGatewaysOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeEgressOnlyInternetGatewaysPagesWithContext method")
//             },
//             DescribeEgressOnlyInternetGatewaysRequestFunc: func(in1 *ec2.DescribeEgressOnlyInternetGatewaysInput) (*request.Request, *ec2.DescribeEgressOnlyInternetGatewaysOutput) {
// 	               panic("mock out the DescribeEgressOnlyInternetGatewaysRequest method")
//             },
//             DescribeEgressOnlyInternetGatewaysWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeEgressOnlyInternetGatewaysInput, in3 ...request.Option) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error) {
// 	               panic("mock out the DescribeEgressOnlyInternetGatewaysWithContext method")
//             },
//             DescribeElasticGpusFunc: func(in1 *ec2.DescribeElasticGpusInput) (*ec2.DescribeElasticGpusOutput, error) {
// 	               panic("mock out the DescribeElasticGpus method")
//             },
//             DescribeElasticGpusRequestFunc: func(in1 *ec2.DescribeElasticGpusInput) (*request.Request, *ec2.DescribeElasticGpusOutput) {
// 	               panic("mock out the DescribeElasticGpusRequest method")
//             },
//             DescribeElasticGpusWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeElasticGpusInput, in3 ...request.Option) (*ec2.DescribeElasticGpusOutput, error) {
// 	               panic("mock out the DescribeElasticGpusWithContext method")
//             },
//             DescribeExportImageTasksFunc: func(in1 *ec2.DescribeExportImageTasksInput) (*ec2.DescribeExportImageTasksOutput, error) {
// 	               panic("mock out the DescribeExportImageTasks method")
//             },
//             DescribeExportImageTasksPagesFunc: func(in1 *ec2.DescribeExportImageTasksInput, in2 func(*ec2.DescribeExportImageTasksOutput, bool) bool) error {
// 	               panic("mock out the DescribeExportImageTasksPages method")
//             },
//             DescribeExportImageTasksPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeExportImageTasksInput, in3 func(*ec2.DescribeExportImageTasksOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeExportImageTasksPagesWithContext method")
//             },
//             DescribeExportImageTasksRequestFunc: func(in1 *ec2.DescribeExportImageTasksInput) (*request.Request, *ec2.DescribeExportImageTasksOutput) {
// 	               panic("mock out the DescribeExportImageTasksRequest method")
//             },
//             DescribeExportImageTasksWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeExportImageTasksInput, in3 ...request.Option) (*ec2.DescribeExportImageTasksOutput, error) {
// 	               panic("mock out the DescribeExportImageTasksWithContext method")
//             },
//             DescribeExportTasksFunc: func(in1 *ec2.DescribeExportTasksInput) (*ec2.DescribeExportTasksOutput, error) {
// 	               panic("mock out the DescribeExportTasks method")
//             },
//             DescribeExportTasksRequestFunc: func(in1 *ec2.DescribeExportTasksInput) (*request.Request, *ec2.DescribeExportTasksOutput) {
// 	               panic("mock out the DescribeExportTasksRequest method")
//             },
//             DescribeExportTasksWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeExportTasksInput, in3 ...request.Option) (*ec2.DescribeExportTasksOutput, error) {
// 	               panic("mock out the DescribeExportTasksWithContext method")
//             },
//             DescribeFastSnapshotRestoresFunc: func(in1 *ec2.DescribeFastSnapshotRestoresInput) (*ec2.DescribeFastSnapshotRestoresOutput, error) {
// 	               panic("mock out the DescribeFastSnapshotRestores method")
//             },
//             DescribeFastSnapshotRestoresPagesFunc: func(in1 *ec2.DescribeFastSnapshotRestoresInput, in2 func(*ec2.DescribeFastSnapshotRestoresOutput, bool) bool) error {
// 	               panic("mock out the DescribeFastSnapshotRestoresPages method")
//             },
//             DescribeFastSnapshotRestoresPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeFastSnapshotRestoresInput, in3 func(*ec2.DescribeFastSnapshotRestoresOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeFastSnapshotRestoresPagesWithContext method")
//             },
//             DescribeFastSnapshotRestoresRequestFunc: func(in1 *ec2.DescribeFastSnapshotRestoresInput) (*request.Request, *ec2.DescribeFastSnapshotRestoresOutput) {
// 	               panic("mock out the DescribeFastSnapshotRestoresRequest method")
//             },
//             DescribeFastSnapshotRestoresWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeFastSnapshotRestoresInput, in3 ...request.Option) (*ec2.DescribeFastSnapshotRestoresOutput, error) {
// 	               panic("mock out the DescribeFastSnapshotRestoresWithContext method")
//             },
//             DescribeFleetHistoryFunc: func(in1 *ec2.DescribeFleetHistoryInput) (*ec2.DescribeFleetHistoryOutput, error) {
// 	               panic("mock out the DescribeFleetHistory method")
//             },
//             DescribeFleetHistoryRequestFunc: func(in1 *ec2.DescribeFleetHistoryInput) (*request.Request, *ec2.DescribeFleetHistoryOutput) {
// 	               panic("mock out the DescribeFleetHistoryRequest method")
//             },
//             DescribeFleetHistoryWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeFleetHistoryInput, in3 ...request.Option) (*ec2.DescribeFleetHistoryOutput, error) {
// 	               panic("mock out the DescribeFleetHistoryWithContext method")
//             },
//             DescribeFleetInstancesFunc: func(in1 *ec2.DescribeFleetInstancesInput) (*ec2.DescribeFleetInstancesOutput, error) {
// 	               panic("mock out the DescribeFleetInstances method")
//             },
//             DescribeFleetInstancesRequestFunc: func(in1 *ec2.DescribeFleetInstancesInput) (*request.Request, *ec2.DescribeFleetInstancesOutput) {
// 	               panic("mock out the DescribeFleetInstancesRequest method")
//             },
//             DescribeFleetInstancesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeFleetInstancesInput, in3 ...request.Option) (*ec2.DescribeFleetInstancesOutput, error) {
// 	               panic("mock out the DescribeFleetInstancesWithContext method")
//             },
//             DescribeFleetsFunc: func(in1 *ec2.DescribeFleetsInput) (*ec2.DescribeFleetsOutput, error) {
// 	               panic("mock out the DescribeFleets method")
//             },
//             DescribeFleetsPagesFunc: func(in1 *ec2.DescribeFleetsInput, in2 func(*ec2.DescribeFleetsOutput, bool) bool) error {
// 	               panic("mock out the DescribeFleetsPages method")
//             },
//             DescribeFleetsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeFleetsInput, in3 func(*ec2.DescribeFleetsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeFleetsPagesWithContext method")
//             },
//             DescribeFleetsRequestFunc: func(in1 *ec2.DescribeFleetsInput) (*request.Request, *ec2.DescribeFleetsOutput) {
// 	               panic("mock out the DescribeFleetsRequest method")
//             },
//             DescribeFleetsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeFleetsInput, in3 ...request.Option) (*ec2.DescribeFleetsOutput, error) {
// 	               panic("mock out the DescribeFleetsWithContext method")
//             },
//             DescribeFlowLogsFunc: func(in1 *ec2.DescribeFlowLogsInput) (*ec2.DescribeFlowLogsOutput, error) {
// 	               panic("mock out the DescribeFlowLogs method")
//             },
//             DescribeFlowLogsPagesFunc: func(in1 *ec2.DescribeFlowLogsInput, in2 func(*ec2.DescribeFlowLogsOutput, bool) bool) error {
// 	               panic("mock out the DescribeFlowLogsPages method")
//             },
//             DescribeFlowLogsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeFlowLogsInput, in3 func(*ec2.DescribeFlowLogsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeFlowLogsPagesWithContext method")
//             },
//             DescribeFlowLogsRequestFunc: func(in1 *ec2.DescribeFlowLogsInput) (*request.Request, *ec2.DescribeFlowLogsOutput) {
// 	               panic("mock out the DescribeFlowLogsRequest method")
//             },
//             DescribeFlowLogsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeFlowLogsInput, in3 ...request.Option) (*ec2.DescribeFlowLogsOutput, error) {
// 	               panic("mock out the DescribeFlowLogsWithContext method")
//             },
//             DescribeFpgaImageAttributeFunc: func(in1 *ec2.DescribeFpgaImageAttributeInput) (*ec2.DescribeFpgaImageAttributeOutput, error) {
// 	               panic("mock out the DescribeFpgaImageAttribute method")
//             },
//             DescribeFpgaImageAttributeRequestFunc: func(in1 *ec2.DescribeFpgaImageAttributeInput) (*request.Request, *ec2.DescribeFpgaImageAttributeOutput) {
// 	               panic("mock out the DescribeFpgaImageAttributeRequest method")
//             },
//             DescribeFpgaImageAttributeWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeFpgaImageAttributeInput, in3 ...request.Option) (*ec2.DescribeFpgaImageAttributeOutput, error) {
// 	               panic("mock out the DescribeFpgaImageAttributeWithContext method")
//             },
//             DescribeFpgaImagesFunc: func(in1 *ec2.DescribeFpgaImagesInput) (*ec2.DescribeFpgaImagesOutput, error) {
// 	               panic("mock out the DescribeFpgaImages method")
//             },
//             DescribeFpgaImagesPagesFunc: func(in1 *ec2.DescribeFpgaImagesInput, in2 func(*ec2.DescribeFpgaImagesOutput, bool) bool) error {
// 	               panic("mock out the DescribeFpgaImagesPages method")
//             },
//             DescribeFpgaImagesPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeFpgaImagesInput, in3 func(*ec2.DescribeFpgaImagesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeFpgaImagesPagesWithContext method")
//             },
//             DescribeFpgaImagesRequestFunc: func(in1 *ec2.DescribeFpgaImagesInput) (*request.Request, *ec2.DescribeFpgaImagesOutput) {
// 	               panic("mock out the DescribeFpgaImagesRequest method")
//             },
//             DescribeFpgaImagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeFpgaImagesInput, in3 ...request.Option) (*ec2.DescribeFpgaImagesOutput, error) {
// 	               panic("mock out the DescribeFpgaImagesWithContext method")
//             },
//             DescribeHostReservationOfferingsFunc: func(in1 *ec2.DescribeHostReservationOfferingsInput) (*ec2.DescribeHostReservationOfferingsOutput, error) {
// 	               panic("mock out the DescribeHostReservationOfferings method")
//             },
//             DescribeHostReservationOfferingsPagesFunc: func(in1 *ec2.DescribeHostReservationOfferingsInput, in2 func(*ec2.DescribeHostReservationOfferingsOutput, bool) bool) error {
// 	               panic("mock out the DescribeHostReservationOfferingsPages method")
//             },
//             DescribeHostReservationOfferingsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeHostReservationOfferingsInput, in3 func(*ec2.DescribeHostReservationOfferingsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeHostReservationOfferingsPagesWithContext method")
//             },
//             DescribeHostReservationOfferingsRequestFunc: func(in1 *ec2.DescribeHostReservationOfferingsInput) (*request.Request, *ec2.DescribeHostReservationOfferingsOutput) {
// 	               panic("mock out the DescribeHostReservationOfferingsRequest method")
//             },
//             DescribeHostReservationOfferingsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeHostReservationOfferingsInput, in3 ...request.Option) (*ec2.DescribeHostReservationOfferingsOutput, error) {
// 	               panic("mock out the DescribeHostReservationOfferingsWithContext method")
//             },
//             DescribeHostReservationsFunc: func(in1 *ec2.DescribeHostReservationsInput) (*ec2.DescribeHostReservationsOutput, error) {
// 	               panic("mock out the DescribeHostReservations method")
//             },
//             DescribeHostReservationsPagesFunc: func(in1 *ec2.DescribeHostReservationsInput, in2 func(*ec2.DescribeHostReservationsOutput, bool) bool) error {
// 	               panic("mock out the DescribeHostReservationsPages method")
//             },
//             DescribeHostReservationsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeHostReservationsInput, in3 func(*ec2.DescribeHostReservationsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeHostReservationsPagesWithContext method")
//             },
//             DescribeHostReservationsRequestFunc: func(in1 *ec2.DescribeHostReservationsInput) (*request.Request, *ec2.DescribeHostReservationsOutput) {
// 	               panic("mock out the DescribeHostReservationsRequest method")
//             },
//             DescribeHostReservationsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeHostReservationsInput, in3 ...request.Option) (*ec2.DescribeHostReservationsOutput, error) {
// 	               panic("mock out the DescribeHostReservationsWithContext method")
//             },
//             DescribeHostsFunc: func(in1 *ec2.DescribeHostsInput) (*ec2.DescribeHostsOutput, error) {
// 	               panic("mock out the DescribeHosts method")
//             },
//             DescribeHostsPagesFunc: func(in1 *ec2.DescribeHostsInput, in2 func(*ec2.DescribeHostsOutput, bool) bool) error {
// 	               panic("mock out the DescribeHostsPages method")
//             },
//             DescribeHostsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeHostsInput, in3 func(*ec2.DescribeHostsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeHostsPagesWithContext method")
//             },
//             DescribeHostsRequestFunc: func(in1 *ec2.DescribeHostsInput) (*request.Request, *ec2.DescribeHostsOutput) {
// 	               panic("mock out the DescribeHostsRequest method")
//             },
//             DescribeHostsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeHostsInput, in3 ...request.Option) (*ec2.DescribeHostsOutput, error) {
// 	               panic("mock out the DescribeHostsWithContext method")
//             },
//             DescribeIamInstanceProfileAssociationsFunc: func(in1 *ec2.DescribeIamInstanceProfileAssociationsInput) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error) {
// 	               panic("mock out the DescribeIamInstanceProfileAssociations method")
//             },
//             DescribeIamInstanceProfileAssociationsPagesFunc: func(in1 *ec2.DescribeIamInstanceProfileAssociationsInput, in2 func(*ec2.DescribeIamInstanceProfileAssociationsOutput, bool) bool) error {
// 	               panic("mock out the DescribeIamInstanceProfileAssociationsPages method")
//             },
//             DescribeIamInstanceProfileAssociationsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeIamInstanceProfileAssociationsInput, in3 func(*ec2.DescribeIamInstanceProfileAssociationsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeIamInstanceProfileAssociationsPagesWithContext method")
//             },
//             DescribeIamInstanceProfileAssociationsRequestFunc: func(in1 *ec2.DescribeIamInstanceProfileAssociationsInput) (*request.Request, *ec2.DescribeIamInstanceProfileAssociationsOutput) {
// 	               panic("mock out the DescribeIamInstanceProfileAssociationsRequest method")
//             },
//             DescribeIamInstanceProfileAssociationsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeIamInstanceProfileAssociationsInput, in3 ...request.Option) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error) {
// 	               panic("mock out the DescribeIamInstanceProfileAssociationsWithContext method")
//             },
//             DescribeIdFormatFunc: func(in1 *ec2.DescribeIdFormatInput) (*ec2.DescribeIdFormatOutput, error) {
// 	               panic("mock out the DescribeIdFormat method")
//             },
//             DescribeIdFormatRequestFunc: func(in1 *ec2.DescribeIdFormatInput) (*request.Request, *ec2.DescribeIdFormatOutput) {
// 	               panic("mock out the DescribeIdFormatRequest method")
//             },
//             DescribeIdFormatWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeIdFormatInput, in3 ...request.Option) (*ec2.DescribeIdFormatOutput, error) {
// 	               panic("mock out the DescribeIdFormatWithContext method")
//             },
//             DescribeIdentityIdFormatFunc: func(in1 *ec2.DescribeIdentityIdFormatInput) (*ec2.DescribeIdentityIdFormatOutput, error) {
// 	               panic("mock out the DescribeIdentityIdFormat method")
//             },
//             DescribeIdentityIdFormatRequestFunc: func(in1 *ec2.DescribeIdentityIdFormatInput) (*request.Request, *ec2.DescribeIdentityIdFormatOutput) {
// 	               panic("mock out the DescribeIdentityIdFormatRequest method")
//             },
//             DescribeIdentityIdFormatWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeIdentityIdFormatInput, in3 ...request.Option) (*ec2.DescribeIdentityIdFormatOutput, error) {
// 	               panic("mock out the DescribeIdentityIdFormatWithContext method")
//             },
//             DescribeImageAttributeFunc: func(in1 *ec2.DescribeImageAttributeInput) (*ec2.DescribeImageAttributeOutput, error) {
// 	               panic("mock out the DescribeImageAttribute method")
//             },
//             DescribeImageAttributeRequestFunc: func(in1 *ec2.DescribeImageAttributeInput) (*request.Request, *ec2.DescribeImageAttributeOutput) {
// 	               panic("mock out the DescribeImageAttributeRequest method")
//             },
//             DescribeImageAttributeWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeImageAttributeInput, in3 ...request.Option) (*ec2.DescribeImageAttributeOutput, error) {
// 	               panic("mock out the DescribeImageAttributeWithContext method")
//             },
//             DescribeImagesFunc: func(in1 *ec2.DescribeImagesInput) (*ec2.DescribeImagesOutput, error) {
// 	               panic("mock out the DescribeImages method")
//             },
//             DescribeImagesRequestFunc: func(in1 *ec2.DescribeImagesInput) (*request.Request, *ec2.DescribeImagesOutput) {
// 	               panic("mock out the DescribeImagesRequest method")
//             },
//             DescribeImagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeImagesInput, in3 ...request.Option) (*ec2.DescribeImagesOutput, error) {
// 	               panic("mock out the DescribeImagesWithContext method")
//             },
//             DescribeImportImageTasksFunc: func(in1 *ec2.DescribeImportImageTasksInput) (*ec2.DescribeImportImageTasksOutput, error) {
// 	               panic("mock out the DescribeImportImageTasks method")
//             },
//             DescribeImportImageTasksPagesFunc: func(in1 *ec2.DescribeImportImageTasksInput, in2 func(*ec2.DescribeImportImageTasksOutput, bool) bool) error {
// 	               panic("mock out the DescribeImportImageTasksPages method")
//             },
//             DescribeImportImageTasksPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeImportImageTasksInput, in3 func(*ec2.DescribeImportImageTasksOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeImportImageTasksPagesWithContext method")
//             },
//             DescribeImportImageTasksRequestFunc: func(in1 *ec2.DescribeImportImageTasksInput) (*request.Request, *ec2.DescribeImportImageTasksOutput) {
// 	               panic("mock out the DescribeImportImageTasksRequest method")
//             },
//             DescribeImportImageTasksWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeImportImageTasksInput, in3 ...request.Option) (*ec2.DescribeImportImageTasksOutput, error) {
// 	               panic("mock out the DescribeImportImageTasksWithContext method")
//             },
//             DescribeImportSnapshotTasksFunc: func(in1 *ec2.DescribeImportSnapshotTasksInput) (*ec2.DescribeImportSnapshotTasksOutput, error) {
// 	               panic("mock out the DescribeImportSnapshotTasks method")
//             },
//             DescribeImportSnapshotTasksPagesFunc: func(in1 *ec2.DescribeImportSnapshotTasksInput, in2 func(*ec2.DescribeImportSnapshotTasksOutput, bool) bool) error {
// 	               panic("mock out the DescribeImportSnapshotTasksPages method")
//             },
//             DescribeImportSnapshotTasksPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeImportSnapshotTasksInput, in3 func(*ec2.DescribeImportSnapshotTasksOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeImportSnapshotTasksPagesWithContext method")
//             },
//             DescribeImportSnapshotTasksRequestFunc: func(in1 *ec2.DescribeImportSnapshotTasksInput) (*request.Request, *ec2.DescribeImportSnapshotTasksOutput) {
// 	               panic("mock out the DescribeImportSnapshotTasksRequest method")
//             },
//             DescribeImportSnapshotTasksWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeImportSnapshotTasksInput, in3 ...request.Option) (*ec2.DescribeImportSnapshotTasksOutput, error) {
// 	               panic("mock out the DescribeImportSnapshotTasksWithContext method")
//             },
//             DescribeInstanceAttributeFunc: func(in1 *ec2.DescribeInstanceAttributeInput) (*ec2.DescribeInstanceAttributeOutput, error) {
// 	               panic("mock out the DescribeInstanceAttribute method")
//             },
//             DescribeInstanceAttributeRequestFunc: func(in1 *ec2.DescribeInstanceAttributeInput) (*request.Request, *ec2.DescribeInstanceAttributeOutput) {
// 	               panic("mock out the DescribeInstanceAttributeRequest method")
//             },
//             DescribeInstanceAttributeWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeInstanceAttributeInput, in3 ...request.Option) (*ec2.DescribeInstanceAttributeOutput, error) {
// 	               panic("mock out the DescribeInstanceAttributeWithContext method")
//             },
//             DescribeInstanceCreditSpecificationsFunc: func(in1 *ec2.DescribeInstanceCreditSpecificationsInput) (*ec2.DescribeInstanceCreditSpecificationsOutput, error) {
// 	               panic("mock out the DescribeInstanceCreditSpecifications method")
//             },
//             DescribeInstanceCreditSpecificationsPagesFunc: func(in1 *ec2.DescribeInstanceCreditSpecificationsInput, in2 func(*ec2.DescribeInstanceCreditSpecificationsOutput, bool) bool) error {
// 	               panic("mock out the DescribeInstanceCreditSpecificationsPages method")
//             },
//             DescribeInstanceCreditSpecificationsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeInstanceCreditSpecificationsInput, in3 func(*ec2.DescribeInstanceCreditSpecificationsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeInstanceCreditSpecificationsPagesWithContext method")
//             },
//             DescribeInstanceCreditSpecificationsRequestFunc: func(in1 *ec2.DescribeInstanceCreditSpecificationsInput) (*request.Request, *ec2.DescribeInstanceCreditSpecificationsOutput) {
// 	               panic("mock out the DescribeInstanceCreditSpecificationsRequest method")
//             },
//             DescribeInstanceCreditSpecificationsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeInstanceCreditSpecificationsInput, in3 ...request.Option) (*ec2.DescribeInstanceCreditSpecificationsOutput, error) {
// 	               panic("mock out the DescribeInstanceCreditSpecificationsWithContext method")
//             },
//             DescribeInstanceStatusFunc: func(in1 *ec2.DescribeInstanceStatusInput) (*ec2.DescribeInstanceStatusOutput, error) {
// 	               panic("mock out the DescribeInstanceStatus method")
//             },
//             DescribeInstanceStatusPagesFunc: func(in1 *ec2.DescribeInstanceStatusInput, in2 func(*ec2.DescribeInstanceStatusOutput, bool) bool) error {
// 	               panic("mock out the DescribeInstanceStatusPages method")
//             },
//             DescribeInstanceStatusPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeInstanceStatusInput, in3 func(*ec2.DescribeInstanceStatusOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeInstanceStatusPagesWithContext method")
//             },
//             DescribeInstanceStatusRequestFunc: func(in1 *ec2.DescribeInstanceStatusInput) (*request.Request, *ec2.DescribeInstanceStatusOutput) {
// 	               panic("mock out the DescribeInstanceStatusRequest method")
//             },
//             DescribeInstanceStatusWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeInstanceStatusInput, in3 ...request.Option) (*ec2.DescribeInstanceStatusOutput, error) {
// 	               panic("mock out the DescribeInstanceStatusWithContext method")
//             },
//             DescribeInstanceTypeOfferingsFunc: func(in1 *ec2.DescribeInstanceTypeOfferingsInput) (*ec2.DescribeInstanceTypeOfferingsOutput, error) {
// 	               panic("mock out the DescribeInstanceTypeOfferings method")
//             },
//             DescribeInstanceTypeOfferingsRequestFunc: func(in1 *ec2.DescribeInstanceTypeOfferingsInput) (*request.Request, *ec2.DescribeInstanceTypeOfferingsOutput) {
// 	               panic("mock out the DescribeInstanceTypeOfferingsRequest method")
//             },
//             DescribeInstanceTypeOfferingsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeInstanceTypeOfferingsInput, in3 ...request.Option) (*ec2.DescribeInstanceTypeOfferingsOutput, error) {
// 	               panic("mock out the DescribeInstanceTypeOfferingsWithContext method")
//             },
//             DescribeInstanceTypesFunc: func(in1 *ec2.DescribeInstanceTypesInput) (*ec2.DescribeInstanceTypesOutput, error) {
// 	               panic("mock out the DescribeInstanceTypes method")
//             },
//             DescribeInstanceTypesRequestFunc: func(in1 *ec2.DescribeInstanceTypesInput) (*request.Request, *ec2.DescribeInstanceTypesOutput) {
// 	               panic("mock out the DescribeInstanceTypesRequest method")
//             },
//             DescribeInstanceTypesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeInstanceTypesInput, in3 ...request.Option) (*ec2.DescribeInstanceTypesOutput, error) {
// 	               panic("mock out the DescribeInstanceTypesWithContext method")
//             },
//             DescribeInstancesFunc: func(in1 *ec2.DescribeInstancesInput) (*ec2.DescribeInstancesOutput, error) {
// 	               panic("mock out the DescribeInstances method")
//             },
//             DescribeInstancesPagesFunc: func(in1 *ec2.DescribeInstancesInput, in2 func(*ec2.DescribeInstancesOutput, bool) bool) error {
// 	               panic("mock out the DescribeInstancesPages method")
//             },
//             DescribeInstancesPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeInstancesInput, in3 func(*ec2.DescribeInstancesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeInstancesPagesWithContext method")
//             },
//             DescribeInstancesRequestFunc: func(in1 *ec2.DescribeInstancesInput) (*request.Request, *ec2.DescribeInstancesOutput) {
// 	               panic("mock out the DescribeInstancesRequest method")
//             },
//             DescribeInstancesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeInstancesInput, in3 ...request.Option) (*ec2.DescribeInstancesOutput, error) {
// 	               panic("mock out the DescribeInstancesWithContext method")
//             },
//             DescribeInternetGatewaysFunc: func(in1 *ec2.DescribeInternetGatewaysInput) (*ec2.DescribeInternetGatewaysOutput, error) {
// 	               panic("mock out the DescribeInternetGateways method")
//             },
//             DescribeInternetGatewaysPagesFunc: func(in1 *ec2.DescribeInternetGatewaysInput, in2 func(*ec2.DescribeInternetGatewaysOutput, bool) bool) error {
// 	               panic("mock out the DescribeInternetGatewaysPages method")
//             },
//             DescribeInternetGatewaysPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeInternetGatewaysInput, in3 func(*ec2.DescribeInternetGatewaysOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeInternetGatewaysPagesWithContext method")
//             },
//             DescribeInternetGatewaysRequestFunc: func(in1 *ec2.DescribeInternetGatewaysInput) (*request.Request, *ec2.DescribeInternetGatewaysOutput) {
// 	               panic("mock out the DescribeInternetGatewaysRequest method")
//             },
//             DescribeInternetGatewaysWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeInternetGatewaysInput, in3 ...request.Option) (*ec2.DescribeInternetGatewaysOutput, error) {
// 	               panic("mock out the DescribeInternetGatewaysWithContext method")
//             },
//             DescribeIpv6PoolsFunc: func(in1 *ec2.DescribeIpv6PoolsInput) (*ec2.DescribeIpv6PoolsOutput, error) {
// 	               panic("mock out the DescribeIpv6Pools method")
//             },
//             DescribeIpv6PoolsPagesFunc: func(in1 *ec2.DescribeIpv6PoolsInput, in2 func(*ec2.DescribeIpv6PoolsOutput, bool) bool) error {
// 	               panic("mock out the DescribeIpv6PoolsPages method")
//             },
//             DescribeIpv6PoolsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeIpv6PoolsInput, in3 func(*ec2.DescribeIpv6PoolsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeIpv6PoolsPagesWithContext method")
//             },
//             DescribeIpv6PoolsRequestFunc: func(in1 *ec2.DescribeIpv6PoolsInput) (*request.Request, *ec2.DescribeIpv6PoolsOutput) {
// 	               panic("mock out the DescribeIpv6PoolsRequest method")
//             },
//             DescribeIpv6PoolsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeIpv6PoolsInput, in3 ...request.Option) (*ec2.DescribeIpv6PoolsOutput, error) {
// 	               panic("mock out the DescribeIpv6PoolsWithContext method")
//             },
//             DescribeKeyPairsFunc: func(in1 *ec2.DescribeKeyPairsInput) (*ec2.DescribeKeyPairsOutput, error) {
// 	               panic("mock out the DescribeKeyPairs method")
//             },
//             DescribeKeyPairsRequestFunc: func(in1 *ec2.DescribeKeyPairsInput) (*request.Request, *ec2.DescribeKeyPairsOutput) {
// 	               panic("mock out the DescribeKeyPairsRequest method")
//             },
//             DescribeKeyPairsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeKeyPairsInput, in3 ...request.Option) (*ec2.DescribeKeyPairsOutput, error) {
// 	               panic("mock out the DescribeKeyPairsWithContext method")
//             },
//             DescribeLaunchTemplateVersionsFunc: func(in1 *ec2.DescribeLaunchTemplateVersionsInput) (*ec2.DescribeLaunchTemplateVersionsOutput, error) {
// 	               panic("mock out the DescribeLaunchTemplateVersions method")
//             },
//             DescribeLaunchTemplateVersionsPagesFunc: func(in1 *ec2.DescribeLaunchTemplateVersionsInput, in2 func(*ec2.DescribeLaunchTemplateVersionsOutput, bool) bool) error {
// 	               panic("mock out the DescribeLaunchTemplateVersionsPages method")
//             },
//             DescribeLaunchTemplateVersionsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeLaunchTemplateVersionsInput, in3 func(*ec2.DescribeLaunchTemplateVersionsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeLaunchTemplateVersionsPagesWithContext method")
//             },
//             DescribeLaunchTemplateVersionsRequestFunc: func(in1 *ec2.DescribeLaunchTemplateVersionsInput) (*request.Request, *ec2.DescribeLaunchTemplateVersionsOutput) {
// 	               panic("mock out the DescribeLaunchTemplateVersionsRequest method")
//             },
//             DescribeLaunchTemplateVersionsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeLaunchTemplateVersionsInput, in3 ...request.Option) (*ec2.DescribeLaunchTemplateVersionsOutput, error) {
// 	               panic("mock out the DescribeLaunchTemplateVersionsWithContext method")
//             },
//             DescribeLaunchTemplatesFunc: func(in1 *ec2.DescribeLaunchTemplatesInput) (*ec2.DescribeLaunchTemplatesOutput, error) {
// 	               panic("mock out the DescribeLaunchTemplates method")
//             },
//             DescribeLaunchTemplatesPagesFunc: func(in1 *ec2.DescribeLaunchTemplatesInput, in2 func(*ec2.DescribeLaunchTemplatesOutput, bool) bool) error {
// 	               panic("mock out the DescribeLaunchTemplatesPages method")
//             },
//             DescribeLaunchTemplatesPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeLaunchTemplatesInput, in3 func(*ec2.DescribeLaunchTemplatesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeLaunchTemplatesPagesWithContext method")
//             },
//             DescribeLaunchTemplatesRequestFunc: func(in1 *ec2.DescribeLaunchTemplatesInput) (*request.Request, *ec2.DescribeLaunchTemplatesOutput) {
// 	               panic("mock out the DescribeLaunchTemplatesRequest method")
//             },
//             DescribeLaunchTemplatesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeLaunchTemplatesInput, in3 ...request.Option) (*ec2.DescribeLaunchTemplatesOutput, error) {
// 	               panic("mock out the DescribeLaunchTemplatesWithContext method")
//             },
//             DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFunc: func(in1 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) (*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, error) {
// 	               panic("mock out the DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations method")
//             },
//             DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequestFunc: func(in1 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) (*request.Request, *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput) {
// 	               panic("mock out the DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest method")
//             },
//             DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput, in3 ...request.Option) (*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, error) {
// 	               panic("mock out the DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext method")
//             },
//             DescribeLocalGatewayRouteTableVpcAssociationsFunc: func(in1 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput) (*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, error) {
// 	               panic("mock out the DescribeLocalGatewayRouteTableVpcAssociations method")
//             },
//             DescribeLocalGatewayRouteTableVpcAssociationsRequestFunc: func(in1 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput) (*request.Request, *ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput) {
// 	               panic("mock out the DescribeLocalGatewayRouteTableVpcAssociationsRequest method")
//             },
//             DescribeLocalGatewayRouteTableVpcAssociationsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput, in3 ...request.Option) (*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, error) {
// 	               panic("mock out the DescribeLocalGatewayRouteTableVpcAssociationsWithContext method")
//             },
//             DescribeLocalGatewayRouteTablesFunc: func(in1 *ec2.DescribeLocalGatewayRouteTablesInput) (*ec2.DescribeLocalGatewayRouteTablesOutput, error) {
// 	               panic("mock out the DescribeLocalGatewayRouteTables method")
//             },
//             DescribeLocalGatewayRouteTablesRequestFunc: func(in1 *ec2.DescribeLocalGatewayRouteTablesInput) (*request.Request, *ec2.DescribeLocalGatewayRouteTablesOutput) {
// 	               panic("mock out the DescribeLocalGatewayRouteTablesRequest method")
//             },
//             DescribeLocalGatewayRouteTablesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeLocalGatewayRouteTablesInput, in3 ...request.Option) (*ec2.DescribeLocalGatewayRouteTablesOutput, error) {
// 	               panic("mock out the DescribeLocalGatewayRouteTablesWithContext method")
//             },
//             DescribeLocalGatewayVirtualInterfaceGroupsFunc: func(in1 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput) (*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, error) {
// 	               panic("mock out the DescribeLocalGatewayVirtualInterfaceGroups method")
//             },
//             DescribeLocalGatewayVirtualInterfaceGroupsRequestFunc: func(in1 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput) (*request.Request, *ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput) {
// 	               panic("mock out the DescribeLocalGatewayVirtualInterfaceGroupsRequest method")
//             },
//             DescribeLocalGatewayVirtualInterfaceGroupsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput, in3 ...request.Option) (*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, error) {
// 	               panic("mock out the DescribeLocalGatewayVirtualInterfaceGroupsWithContext method")
//             },
//             DescribeLocalGatewayVirtualInterfacesFunc: func(in1 *ec2.DescribeLocalGatewayVirtualInterfacesInput) (*ec2.DescribeLocalGatewayVirtualInterfacesOutput, error) {
// 	               panic("mock out the DescribeLocalGatewayVirtualInterfaces method")
//             },
//             DescribeLocalGatewayVirtualInterfacesRequestFunc: func(in1 *ec2.DescribeLocalGatewayVirtualInterfacesInput) (*request.Request, *ec2.DescribeLocalGatewayVirtualInterfacesOutput) {
// 	               panic("mock out the DescribeLocalGatewayVirtualInterfacesRequest method")
//             },
//             DescribeLocalGatewayVirtualInterfacesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeLocalGatewayVirtualInterfacesInput, in3 ...request.Option) (*ec2.DescribeLocalGatewayVirtualInterfacesOutput, error) {
// 	               panic("mock out the DescribeLocalGatewayVirtualInterfacesWithContext method")
//             },
//             DescribeLocalGatewaysFunc: func(in1 *ec2.DescribeLocalGatewaysInput) (*ec2.DescribeLocalGatewaysOutput, error) {
// 	               panic("mock out the DescribeLocalGateways method")
//             },
//             DescribeLocalGatewaysRequestFunc: func(in1 *ec2.DescribeLocalGatewaysInput) (*request.Request, *ec2.DescribeLocalGatewaysOutput) {
// 	               panic("mock out the DescribeLocalGatewaysRequest method")
//             },
//             DescribeLocalGatewaysWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeLocalGatewaysInput, in3 ...request.Option) (*ec2.DescribeLocalGatewaysOutput, error) {
// 	               panic("mock out the DescribeLocalGatewaysWithContext method")
//             },
//             DescribeMovingAddressesFunc: func(in1 *ec2.DescribeMovingAddressesInput) (*ec2.DescribeMovingAddressesOutput, error) {
// 	               panic("mock out the DescribeMovingAddresses method")
//             },
//             DescribeMovingAddressesPagesFunc: func(in1 *ec2.DescribeMovingAddressesInput, in2 func(*ec2.DescribeMovingAddressesOutput, bool) bool) error {
// 	               panic("mock out the DescribeMovingAddressesPages method")
//             },
//             DescribeMovingAddressesPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeMovingAddressesInput, in3 func(*ec2.DescribeMovingAddressesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeMovingAddressesPagesWithContext method")
//             },
//             DescribeMovingAddressesRequestFunc: func(in1 *ec2.DescribeMovingAddressesInput) (*request.Request, *ec2.DescribeMovingAddressesOutput) {
// 	               panic("mock out the DescribeMovingAddressesRequest method")
//             },
//             DescribeMovingAddressesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeMovingAddressesInput, in3 ...request.Option) (*ec2.DescribeMovingAddressesOutput, error) {
// 	               panic("mock out the DescribeMovingAddressesWithContext method")
//             },
//             DescribeNatGatewaysFunc: func(in1 *ec2.DescribeNatGatewaysInput) (*ec2.DescribeNatGatewaysOutput, error) {
// 	               panic("mock out the DescribeNatGateways method")
//             },
//             DescribeNatGatewaysPagesFunc: func(in1 *ec2.DescribeNatGatewaysInput, in2 func(*ec2.DescribeNatGatewaysOutput, bool) bool) error {
// 	               panic("mock out the DescribeNatGatewaysPages method")
//             },
//             DescribeNatGatewaysPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeNatGatewaysInput, in3 func(*ec2.DescribeNatGatewaysOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeNatGatewaysPagesWithContext method")
//             },
//             DescribeNatGatewaysRequestFunc: func(in1 *ec2.DescribeNatGatewaysInput) (*request.Request, *ec2.DescribeNatGatewaysOutput) {
// 	               panic("mock out the DescribeNatGatewaysRequest method")
//             },
//             DescribeNatGatewaysWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeNatGatewaysInput, in3 ...request.Option) (*ec2.DescribeNatGatewaysOutput, error) {
// 	               panic("mock out the DescribeNatGatewaysWithContext method")
//             },
//             DescribeNetworkAclsFunc: func(in1 *ec2.DescribeNetworkAclsInput) (*ec2.DescribeNetworkAclsOutput, error) {
// 	               panic("mock out the DescribeNetworkAcls method")
//             },
//             DescribeNetworkAclsPagesFunc: func(in1 *ec2.DescribeNetworkAclsInput, in2 func(*ec2.DescribeNetworkAclsOutput, bool) bool) error {
// 	               panic("mock out the DescribeNetworkAclsPages method")
//             },
//             DescribeNetworkAclsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeNetworkAclsInput, in3 func(*ec2.DescribeNetworkAclsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeNetworkAclsPagesWithContext method")
//             },
//             DescribeNetworkAclsRequestFunc: func(in1 *ec2.DescribeNetworkAclsInput) (*request.Request, *ec2.DescribeNetworkAclsOutput) {
// 	               panic("mock out the DescribeNetworkAclsRequest method")
//             },
//             DescribeNetworkAclsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeNetworkAclsInput, in3 ...request.Option) (*ec2.DescribeNetworkAclsOutput, error) {
// 	               panic("mock out the DescribeNetworkAclsWithContext method")
//             },
//             DescribeNetworkInterfaceAttributeFunc: func(in1 *ec2.DescribeNetworkInterfaceAttributeInput) (*ec2.DescribeNetworkInterfaceAttributeOutput, error) {
// 	               panic("mock out the DescribeNetworkInterfaceAttribute method")
//             },
//             DescribeNetworkInterfaceAttributeRequestFunc: func(in1 *ec2.DescribeNetworkInterfaceAttributeInput) (*request.Request, *ec2.DescribeNetworkInterfaceAttributeOutput) {
// 	               panic("mock out the DescribeNetworkInterfaceAttributeRequest method")
//             },
//             DescribeNetworkInterfaceAttributeWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeNetworkInterfaceAttributeInput, in3 ...request.Option) (*ec2.DescribeNetworkInterfaceAttributeOutput, error) {
// 	               panic("mock out the DescribeNetworkInterfaceAttributeWithContext method")
//             },
//             DescribeNetworkInterfacePermissionsFunc: func(in1 *ec2.DescribeNetworkInterfacePermissionsInput) (*ec2.DescribeNetworkInterfacePermissionsOutput, error) {
// 	               panic("mock out the DescribeNetworkInterfacePermissions method")
//             },
//             DescribeNetworkInterfacePermissionsPagesFunc: func(in1 *ec2.DescribeNetworkInterfacePermissionsInput, in2 func(*ec2.DescribeNetworkInterfacePermissionsOutput, bool) bool) error {
// 	               panic("mock out the DescribeNetworkInterfacePermissionsPages method")
//             },
//             DescribeNetworkInterfacePermissionsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeNetworkInterfacePermissionsInput, in3 func(*ec2.DescribeNetworkInterfacePermissionsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeNetworkInterfacePermissionsPagesWithContext method")
//             },
//             DescribeNetworkInterfacePermissionsRequestFunc: func(in1 *ec2.DescribeNetworkInterfacePermissionsInput) (*request.Request, *ec2.DescribeNetworkInterfacePermissionsOutput) {
// 	               panic("mock out the DescribeNetworkInterfacePermissionsRequest method")
//             },
//             DescribeNetworkInterfacePermissionsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeNetworkInterfacePermissionsInput, in3 ...request.Option) (*ec2.DescribeNetworkInterfacePermissionsOutput, error) {
// 	               panic("mock out the DescribeNetworkInterfacePermissionsWithContext method")
//             },
//             DescribeNetworkInterfacesFunc: func(in1 *ec2.DescribeNetworkInterfacesInput) (*ec2.DescribeNetworkInterfacesOutput, error) {
// 	               panic("mock out the DescribeNetworkInterfaces method")
//             },
//             DescribeNetworkInterfacesPagesFunc: func(in1 *ec2.DescribeNetworkInterfacesInput, in2 func(*ec2.DescribeNetworkInterfacesOutput, bool) bool) error {
// 	               panic("mock out the DescribeNetworkInterfacesPages method")
//             },
//             DescribeNetworkInterfacesPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeNetworkInterfacesInput, in3 func(*ec2.DescribeNetworkInterfacesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeNetworkInterfacesPagesWithContext method")
//             },
//             DescribeNetworkInterfacesRequestFunc: func(in1 *ec2.DescribeNetworkInterfacesInput) (*request.Request, *ec2.DescribeNetworkInterfacesOutput) {
// 	               panic("mock out the DescribeNetworkInterfacesRequest method")
//             },
//             DescribeNetworkInterfacesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeNetworkInterfacesInput, in3 ...request.Option) (*ec2.DescribeNetworkInterfacesOutput, error) {
// 	               panic("mock out the DescribeNetworkInterfacesWithContext method")
//             },
//             DescribePlacementGroupsFunc: func(in1 *ec2.DescribePlacementGroupsInput) (*ec2.DescribePlacementGroupsOutput, error) {
// 	               panic("mock out the DescribePlacementGroups method")
//             },
//             DescribePlacementGroupsRequestFunc: func(in1 *ec2.DescribePlacementGroupsInput) (*request.Request, *ec2.DescribePlacementGroupsOutput) {
// 	               panic("mock out the DescribePlacementGroupsRequest method")
//             },
//             DescribePlacementGroupsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribePlacementGroupsInput, in3 ...request.Option) (*ec2.DescribePlacementGroupsOutput, error) {
// 	               panic("mock out the DescribePlacementGroupsWithContext method")
//             },
//             DescribePrefixListsFunc: func(in1 *ec2.DescribePrefixListsInput) (*ec2.DescribePrefixListsOutput, error) {
// 	               panic("mock out the DescribePrefixLists method")
//             },
//             DescribePrefixListsPagesFunc: func(in1 *ec2.DescribePrefixListsInput, in2 func(*ec2.DescribePrefixListsOutput, bool) bool) error {
// 	               panic("mock out the DescribePrefixListsPages method")
//             },
//             DescribePrefixListsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribePrefixListsInput, in3 func(*ec2.DescribePrefixListsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribePrefixListsPagesWithContext method")
//             },
//             DescribePrefixListsRequestFunc: func(in1 *ec2.DescribePrefixListsInput) (*request.Request, *ec2.DescribePrefixListsOutput) {
// 	               panic("mock out the DescribePrefixListsRequest method")
//             },
//             DescribePrefixListsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribePrefixListsInput, in3 ...request.Option) (*ec2.DescribePrefixListsOutput, error) {
// 	               panic("mock out the DescribePrefixListsWithContext method")
//             },
//             DescribePrincipalIdFormatFunc: func(in1 *ec2.DescribePrincipalIdFormatInput) (*ec2.DescribePrincipalIdFormatOutput, error) {
// 	               panic("mock out the DescribePrincipalIdFormat method")
//             },
//             DescribePrincipalIdFormatPagesFunc: func(in1 *ec2.DescribePrincipalIdFormatInput, in2 func(*ec2.DescribePrincipalIdFormatOutput, bool) bool) error {
// 	               panic("mock out the DescribePrincipalIdFormatPages method")
//             },
//             DescribePrincipalIdFormatPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribePrincipalIdFormatInput, in3 func(*ec2.DescribePrincipalIdFormatOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribePrincipalIdFormatPagesWithContext method")
//             },
//             DescribePrincipalIdFormatRequestFunc: func(in1 *ec2.DescribePrincipalIdFormatInput) (*request.Request, *ec2.DescribePrincipalIdFormatOutput) {
// 	               panic("mock out the DescribePrincipalIdFormatRequest method")
//             },
//             DescribePrincipalIdFormatWithContextFunc: func(in1 context.Context, in2 *ec2.DescribePrincipalIdFormatInput, in3 ...request.Option) (*ec2.DescribePrincipalIdFormatOutput, error) {
// 	               panic("mock out the DescribePrincipalIdFormatWithContext method")
//             },
//             DescribePublicIpv4PoolsFunc: func(in1 *ec2.DescribePublicIpv4PoolsInput) (*ec2.DescribePublicIpv4PoolsOutput, error) {
// 	               panic("mock out the DescribePublicIpv4Pools method")
//             },
//             DescribePublicIpv4PoolsPagesFunc: func(in1 *ec2.DescribePublicIpv4PoolsInput, in2 func(*ec2.DescribePublicIpv4PoolsOutput, bool) bool) error {
// 	               panic("mock out the DescribePublicIpv4PoolsPages method")
//             },
//             DescribePublicIpv4PoolsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribePublicIpv4PoolsInput, in3 func(*ec2.DescribePublicIpv4PoolsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribePublicIpv4PoolsPagesWithContext method")
//             },
//             DescribePublicIpv4PoolsRequestFunc: func(in1 *ec2.DescribePublicIpv4PoolsInput) (*request.Request, *ec2.DescribePublicIpv4PoolsOutput) {
// 	               panic("mock out the DescribePublicIpv4PoolsRequest method")
//             },
//             DescribePublicIpv4PoolsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribePublicIpv4PoolsInput, in3 ...request.Option) (*ec2.DescribePublicIpv4PoolsOutput, error) {
// 	               panic("mock out the DescribePublicIpv4PoolsWithContext method")
//             },
//             DescribeRegionsFunc: func(in1 *ec2.DescribeRegionsInput) (*ec2.DescribeRegionsOutput, error) {
// 	               panic("mock out the DescribeRegions method")
//             },
//             DescribeRegionsRequestFunc: func(in1 *ec2.DescribeRegionsInput) (*request.Request, *ec2.DescribeRegionsOutput) {
// 	               panic("mock out the DescribeRegionsRequest method")
//             },
//             DescribeRegionsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeRegionsInput, in3 ...request.Option) (*ec2.DescribeRegionsOutput, error) {
// 	               panic("mock out the DescribeRegionsWithContext method")
//             },
//             DescribeReservedInstancesFunc: func(in1 *ec2.DescribeReservedInstancesInput) (*ec2.DescribeReservedInstancesOutput, error) {
// 	               panic("mock out the DescribeReservedInstances method")
//             },
//             DescribeReservedInstancesListingsFunc: func(in1 *ec2.DescribeReservedInstancesListingsInput) (*ec2.DescribeReservedInstancesListingsOutput, error) {
// 	               panic("mock out the DescribeReservedInstancesListings method")
//             },
//             DescribeReservedInstancesListingsRequestFunc: func(in1 *ec2.DescribeReservedInstancesListingsInput) (*request.Request, *ec2.DescribeReservedInstancesListingsOutput) {
// 	               panic("mock out the DescribeReservedInstancesListingsRequest method")
//             },
//             DescribeReservedInstancesListingsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeReservedInstancesListingsInput, in3 ...request.Option) (*ec2.DescribeReservedInstancesListingsOutput, error) {
// 	               panic("mock out the DescribeReservedInstancesListingsWithContext method")
//             },
//             DescribeReservedInstancesModificationsFunc: func(in1 *ec2.DescribeReservedInstancesModificationsInput) (*ec2.DescribeReservedInstancesModificationsOutput, error) {
// 	               panic("mock out the DescribeReservedInstancesModifications method")
//             },
//             DescribeReservedInstancesModificationsPagesFunc: func(in1 *ec2.DescribeReservedInstancesModificationsInput, in2 func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool) error {
// 	               panic("mock out the DescribeReservedInstancesModificationsPages method")
//             },
//             DescribeReservedInstancesModificationsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeReservedInstancesModificationsInput, in3 func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeReservedInstancesModificationsPagesWithContext method")
//             },
//             DescribeReservedInstancesModificationsRequestFunc: func(in1 *ec2.DescribeReservedInstancesModificationsInput) (*request.Request, *ec2.DescribeReservedInstancesModificationsOutput) {
// 	               panic("mock out the DescribeReservedInstancesModificationsRequest method")
//             },
//             DescribeReservedInstancesModificationsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeReservedInstancesModificationsInput, in3 ...request.Option) (*ec2.DescribeReservedInstancesModificationsOutput, error) {
// 	               panic("mock out the DescribeReservedInstancesModificationsWithContext method")
//             },
//             DescribeReservedInstancesOfferingsFunc: func(in1 *ec2.DescribeReservedInstancesOfferingsInput) (*ec2.DescribeReservedInstancesOfferingsOutput, error) {
// 	               panic("mock out the DescribeReservedInstancesOfferings method")
//             },
//             DescribeReservedInstancesOfferingsPagesFunc: func(in1 *ec2.DescribeReservedInstancesOfferingsInput, in2 func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool) error {
// 	               panic("mock out the DescribeReservedInstancesOfferingsPages method")
//             },
//             DescribeReservedInstancesOfferingsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeReservedInstancesOfferingsInput, in3 func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeReservedInstancesOfferingsPagesWithContext method")
//             },
//             DescribeReservedInstancesOfferingsRequestFunc: func(in1 *ec2.DescribeReservedInstancesOfferingsInput) (*request.Request, *ec2.DescribeReservedInstancesOfferingsOutput) {
// 	               panic("mock out the DescribeReservedInstancesOfferingsRequest method")
//             },
//             DescribeReservedInstancesOfferingsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeReservedInstancesOfferingsInput, in3 ...request.Option) (*ec2.DescribeReservedInstancesOfferingsOutput, error) {
// 	               panic("mock out the DescribeReservedInstancesOfferingsWithContext method")
//             },
//             DescribeReservedInstancesRequestFunc: func(in1 *ec2.DescribeReservedInstancesInput) (*request.Request, *ec2.DescribeReservedInstancesOutput) {
// 	               panic("mock out the DescribeReservedInstancesRequest method")
//             },
//             DescribeReservedInstancesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeReservedInstancesInput, in3 ...request.Option) (*ec2.DescribeReservedInstancesOutput, error) {
// 	               panic("mock out the DescribeReservedInstancesWithContext method")
//             },
//             DescribeRouteTablesFunc: func(in1 *ec2.DescribeRouteTablesInput) (*ec2.DescribeRouteTablesOutput, error) {
// 	               panic("mock out the DescribeRouteTables method")
//             },
//             DescribeRouteTablesPagesFunc: func(in1 *ec2.DescribeRouteTablesInput, in2 func(*ec2.DescribeRouteTablesOutput, bool) bool) error {
// 	               panic("mock out the DescribeRouteTablesPages method")
//             },
//             DescribeRouteTablesPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeRouteTablesInput, in3 func(*ec2.DescribeRouteTablesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeRouteTablesPagesWithContext method")
//             },
//             DescribeRouteTablesRequestFunc: func(in1 *ec2.DescribeRouteTablesInput) (*request.Request, *ec2.DescribeRouteTablesOutput) {
// 	               panic("mock out the DescribeRouteTablesRequest method")
//             },
//             DescribeRouteTablesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeRouteTablesInput, in3 ...request.Option) (*ec2.DescribeRouteTablesOutput, error) {
// 	               panic("mock out the DescribeRouteTablesWithContext method")
//             },
//             DescribeScheduledInstanceAvailabilityFunc: func(in1 *ec2.DescribeScheduledInstanceAvailabilityInput) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error) {
// 	               panic("mock out the DescribeScheduledInstanceAvailability method")
//             },
//             DescribeScheduledInstanceAvailabilityPagesFunc: func(in1 *ec2.DescribeScheduledInstanceAvailabilityInput, in2 func(*ec2.DescribeScheduledInstanceAvailabilityOutput, bool) bool) error {
// 	               panic("mock out the DescribeScheduledInstanceAvailabilityPages method")
//             },
//             DescribeScheduledInstanceAvailabilityPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeScheduledInstanceAvailabilityInput, in3 func(*ec2.DescribeScheduledInstanceAvailabilityOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeScheduledInstanceAvailabilityPagesWithContext method")
//             },
//             DescribeScheduledInstanceAvailabilityRequestFunc: func(in1 *ec2.DescribeScheduledInstanceAvailabilityInput) (*request.Request, *ec2.DescribeScheduledInstanceAvailabilityOutput) {
// 	               panic("mock out the DescribeScheduledInstanceAvailabilityRequest method")
//             },
//             DescribeScheduledInstanceAvailabilityWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeScheduledInstanceAvailabilityInput, in3 ...request.Option) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error) {
// 	               panic("mock out the DescribeScheduledInstanceAvailabilityWithContext method")
//             },
//             DescribeScheduledInstancesFunc: func(in1 *ec2.DescribeScheduledInstancesInput) (*ec2.DescribeScheduledInstancesOutput, error) {
// 	               panic("mock out the DescribeScheduledInstances method")
//             },
//             DescribeScheduledInstancesPagesFunc: func(in1 *ec2.DescribeScheduledInstancesInput, in2 func(*ec2.DescribeScheduledInstancesOutput, bool) bool) error {
// 	               panic("mock out the DescribeScheduledInstancesPages method")
//             },
//             DescribeScheduledInstancesPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeScheduledInstancesInput, in3 func(*ec2.DescribeScheduledInstancesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeScheduledInstancesPagesWithContext method")
//             },
//             DescribeScheduledInstancesRequestFunc: func(in1 *ec2.DescribeScheduledInstancesInput) (*request.Request, *ec2.DescribeScheduledInstancesOutput) {
// 	               panic("mock out the DescribeScheduledInstancesRequest method")
//             },
//             DescribeScheduledInstancesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeScheduledInstancesInput, in3 ...request.Option) (*ec2.DescribeScheduledInstancesOutput, error) {
// 	               panic("mock out the DescribeScheduledInstancesWithContext method")
//             },
//             DescribeSecurityGroupReferencesFunc: func(in1 *ec2.DescribeSecurityGroupReferencesInput) (*ec2.DescribeSecurityGroupReferencesOutput, error) {
// 	               panic("mock out the DescribeSecurityGroupReferences method")
//             },
//             DescribeSecurityGroupReferencesRequestFunc: func(in1 *ec2.DescribeSecurityGroupReferencesInput) (*request.Request, *ec2.DescribeSecurityGroupReferencesOutput) {
// 	               panic("mock out the DescribeSecurityGroupReferencesRequest method")
//             },
//             DescribeSecurityGroupReferencesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeSecurityGroupReferencesInput, in3 ...request.Option) (*ec2.DescribeSecurityGroupReferencesOutput, error) {
// 	               panic("mock out the DescribeSecurityGroupReferencesWithContext method")
//             },
//             DescribeSecurityGroupsFunc: func(in1 *ec2.DescribeSecurityGroupsInput) (*ec2.DescribeSecurityGroupsOutput, error) {
// 	               panic("mock out the DescribeSecurityGroups method")
//             },
//             DescribeSecurityGroupsPagesFunc: func(in1 *ec2.DescribeSecurityGroupsInput, in2 func(*ec2.DescribeSecurityGroupsOutput, bool) bool) error {
// 	               panic("mock out the DescribeSecurityGroupsPages method")
//             },
//             DescribeSecurityGroupsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeSecurityGroupsInput, in3 func(*ec2.DescribeSecurityGroupsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeSecurityGroupsPagesWithContext method")
//             },
//             DescribeSecurityGroupsRequestFunc: func(in1 *ec2.DescribeSecurityGroupsInput) (*request.Request, *ec2.DescribeSecurityGroupsOutput) {
// 	               panic("mock out the DescribeSecurityGroupsRequest method")
//             },
//             DescribeSecurityGroupsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeSecurityGroupsInput, in3 ...request.Option) (*ec2.DescribeSecurityGroupsOutput, error) {
// 	               panic("mock out the DescribeSecurityGroupsWithContext method")
//             },
//             DescribeSnapshotAttributeFunc: func(in1 *ec2.DescribeSnapshotAttributeInput) (*ec2.DescribeSnapshotAttributeOutput, error) {
// 	               panic("mock out the DescribeSnapshotAttribute method")
//             },
//             DescribeSnapshotAttributeRequestFunc: func(in1 *ec2.DescribeSnapshotAttributeInput) (*request.Request, *ec2.DescribeSnapshotAttributeOutput) {
// 	               panic("mock out the DescribeSnapshotAttributeRequest method")
//             },
//             DescribeSnapshotAttributeWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeSnapshotAttributeInput, in3 ...request.Option) (*ec2.DescribeSnapshotAttributeOutput, error) {
// 	               panic("mock out the DescribeSnapshotAttributeWithContext method")
//             },
//             DescribeSnapshotsFunc: func(in1 *ec2.DescribeSnapshotsInput) (*ec2.DescribeSnapshotsOutput, error) {
// 	               panic("mock out the DescribeSnapshots method")
//             },
//             DescribeSnapshotsPagesFunc: func(in1 *ec2.DescribeSnapshotsInput, in2 func(*ec2.DescribeSnapshotsOutput, bool) bool) error {
// 	               panic("mock out the DescribeSnapshotsPages method")
//             },
//             DescribeSnapshotsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeSnapshotsInput, in3 func(*ec2.DescribeSnapshotsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeSnapshotsPagesWithContext method")
//             },
//             DescribeSnapshotsRequestFunc: func(in1 *ec2.DescribeSnapshotsInput) (*request.Request, *ec2.DescribeSnapshotsOutput) {
// 	               panic("mock out the DescribeSnapshotsRequest method")
//             },
//             DescribeSnapshotsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeSnapshotsInput, in3 ...request.Option) (*ec2.DescribeSnapshotsOutput, error) {
// 	               panic("mock out the DescribeSnapshotsWithContext method")
//             },
//             DescribeSpotDatafeedSubscriptionFunc: func(in1 *ec2.DescribeSpotDatafeedSubscriptionInput) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error) {
// 	               panic("mock out the DescribeSpotDatafeedSubscription method")
//             },
//             DescribeSpotDatafeedSubscriptionRequestFunc: func(in1 *ec2.DescribeSpotDatafeedSubscriptionInput) (*request.Request, *ec2.DescribeSpotDatafeedSubscriptionOutput) {
// 	               panic("mock out the DescribeSpotDatafeedSubscriptionRequest method")
//             },
//             DescribeSpotDatafeedSubscriptionWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeSpotDatafeedSubscriptionInput, in3 ...request.Option) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error) {
// 	               panic("mock out the DescribeSpotDatafeedSubscriptionWithContext method")
//             },
//             DescribeSpotFleetInstancesFunc: func(in1 *ec2.DescribeSpotFleetInstancesInput) (*ec2.DescribeSpotFleetInstancesOutput, error) {
// 	               panic("mock out the DescribeSpotFleetInstances method")
//             },
//             DescribeSpotFleetInstancesRequestFunc: func(in1 *ec2.DescribeSpotFleetInstancesInput) (*request.Request, *ec2.DescribeSpotFleetInstancesOutput) {
// 	               panic("mock out the DescribeSpotFleetInstancesRequest method")
//             },
//             DescribeSpotFleetInstancesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeSpotFleetInstancesInput, in3 ...request.Option) (*ec2.DescribeSpotFleetInstancesOutput, error) {
// 	               panic("mock out the DescribeSpotFleetInstancesWithContext method")
//             },
//             DescribeSpotFleetRequestHistoryFunc: func(in1 *ec2.DescribeSpotFleetRequestHistoryInput) (*ec2.DescribeSpotFleetRequestHistoryOutput, error) {
// 	               panic("mock out the DescribeSpotFleetRequestHistory method")
//             },
//             DescribeSpotFleetRequestHistoryRequestFunc: func(in1 *ec2.DescribeSpotFleetRequestHistoryInput) (*request.Request, *ec2.DescribeSpotFleetRequestHistoryOutput) {
// 	               panic("mock out the DescribeSpotFleetRequestHistoryRequest method")
//             },
//             DescribeSpotFleetRequestHistoryWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeSpotFleetRequestHistoryInput, in3 ...request.Option) (*ec2.DescribeSpotFleetRequestHistoryOutput, error) {
// 	               panic("mock out the DescribeSpotFleetRequestHistoryWithContext method")
//             },
//             DescribeSpotFleetRequestsFunc: func(in1 *ec2.DescribeSpotFleetRequestsInput) (*ec2.DescribeSpotFleetRequestsOutput, error) {
// 	               panic("mock out the DescribeSpotFleetRequests method")
//             },
//             DescribeSpotFleetRequestsPagesFunc: func(in1 *ec2.DescribeSpotFleetRequestsInput, in2 func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool) error {
// 	               panic("mock out the DescribeSpotFleetRequestsPages method")
//             },
//             DescribeSpotFleetRequestsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeSpotFleetRequestsInput, in3 func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeSpotFleetRequestsPagesWithContext method")
//             },
//             DescribeSpotFleetRequestsRequestFunc: func(in1 *ec2.DescribeSpotFleetRequestsInput) (*request.Request, *ec2.DescribeSpotFleetRequestsOutput) {
// 	               panic("mock out the DescribeSpotFleetRequestsRequest method")
//             },
//             DescribeSpotFleetRequestsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeSpotFleetRequestsInput, in3 ...request.Option) (*ec2.DescribeSpotFleetRequestsOutput, error) {
// 	               panic("mock out the DescribeSpotFleetRequestsWithContext method")
//             },
//             DescribeSpotInstanceRequestsFunc: func(in1 *ec2.DescribeSpotInstanceRequestsInput) (*ec2.DescribeSpotInstanceRequestsOutput, error) {
// 	               panic("mock out the DescribeSpotInstanceRequests method")
//             },
//             DescribeSpotInstanceRequestsPagesFunc: func(in1 *ec2.DescribeSpotInstanceRequestsInput, in2 func(*ec2.DescribeSpotInstanceRequestsOutput, bool) bool) error {
// 	               panic("mock out the DescribeSpotInstanceRequestsPages method")
//             },
//             DescribeSpotInstanceRequestsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeSpotInstanceRequestsInput, in3 func(*ec2.DescribeSpotInstanceRequestsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeSpotInstanceRequestsPagesWithContext method")
//             },
//             DescribeSpotInstanceRequestsRequestFunc: func(in1 *ec2.DescribeSpotInstanceRequestsInput) (*request.Request, *ec2.DescribeSpotInstanceRequestsOutput) {
// 	               panic("mock out the DescribeSpotInstanceRequestsRequest method")
//             },
//             DescribeSpotInstanceRequestsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeSpotInstanceRequestsInput, in3 ...request.Option) (*ec2.DescribeSpotInstanceRequestsOutput, error) {
// 	               panic("mock out the DescribeSpotInstanceRequestsWithContext method")
//             },
//             DescribeSpotPriceHistoryFunc: func(in1 *ec2.DescribeSpotPriceHistoryInput) (*ec2.DescribeSpotPriceHistoryOutput, error) {
// 	               panic("mock out the DescribeSpotPriceHistory method")
//             },
//             DescribeSpotPriceHistoryPagesFunc: func(in1 *ec2.DescribeSpotPriceHistoryInput, in2 func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool) error {
// 	               panic("mock out the DescribeSpotPriceHistoryPages method")
//             },
//             DescribeSpotPriceHistoryPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeSpotPriceHistoryInput, in3 func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeSpotPriceHistoryPagesWithContext method")
//             },
//             DescribeSpotPriceHistoryRequestFunc: func(in1 *ec2.DescribeSpotPriceHistoryInput) (*request.Request, *ec2.DescribeSpotPriceHistoryOutput) {
// 	               panic("mock out the DescribeSpotPriceHistoryRequest method")
//             },
//             DescribeSpotPriceHistoryWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeSpotPriceHistoryInput, in3 ...request.Option) (*ec2.DescribeSpotPriceHistoryOutput, error) {
// 	               panic("mock out the DescribeSpotPriceHistoryWithContext method")
//             },
//             DescribeStaleSecurityGroupsFunc: func(in1 *ec2.DescribeStaleSecurityGroupsInput) (*ec2.DescribeStaleSecurityGroupsOutput, error) {
// 	               panic("mock out the DescribeStaleSecurityGroups method")
//             },
//             DescribeStaleSecurityGroupsPagesFunc: func(in1 *ec2.DescribeStaleSecurityGroupsInput, in2 func(*ec2.DescribeStaleSecurityGroupsOutput, bool) bool) error {
// 	               panic("mock out the DescribeStaleSecurityGroupsPages method")
//             },
//             DescribeStaleSecurityGroupsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeStaleSecurityGroupsInput, in3 func(*ec2.DescribeStaleSecurityGroupsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeStaleSecurityGroupsPagesWithContext method")
//             },
//             DescribeStaleSecurityGroupsRequestFunc: func(in1 *ec2.DescribeStaleSecurityGroupsInput) (*request.Request, *ec2.DescribeStaleSecurityGroupsOutput) {
// 	               panic("mock out the DescribeStaleSecurityGroupsRequest method")
//             },
//             DescribeStaleSecurityGroupsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeStaleSecurityGroupsInput, in3 ...request.Option) (*ec2.DescribeStaleSecurityGroupsOutput, error) {
// 	               panic("mock out the DescribeStaleSecurityGroupsWithContext method")
//             },
//             DescribeSubnetsFunc: func(in1 *ec2.DescribeSubnetsInput) (*ec2.DescribeSubnetsOutput, error) {
// 	               panic("mock out the DescribeSubnets method")
//             },
//             DescribeSubnetsPagesFunc: func(in1 *ec2.DescribeSubnetsInput, in2 func(*ec2.DescribeSubnetsOutput, bool) bool) error {
// 	               panic("mock out the DescribeSubnetsPages method")
//             },
//             DescribeSubnetsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeSubnetsInput, in3 func(*ec2.DescribeSubnetsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeSubnetsPagesWithContext method")
//             },
//             DescribeSubnetsRequestFunc: func(in1 *ec2.DescribeSubnetsInput) (*request.Request, *ec2.DescribeSubnetsOutput) {
// 	               panic("mock out the DescribeSubnetsRequest method")
//             },
//             DescribeSubnetsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeSubnetsInput, in3 ...request.Option) (*ec2.DescribeSubnetsOutput, error) {
// 	               panic("mock out the DescribeSubnetsWithContext method")
//             },
//             DescribeTagsFunc: func(in1 *ec2.DescribeTagsInput) (*ec2.DescribeTagsOutput, error) {
// 	               panic("mock out the DescribeTags method")
//             },
//             DescribeTagsPagesFunc: func(in1 *ec2.DescribeTagsInput, in2 func(*ec2.DescribeTagsOutput, bool) bool) error {
// 	               panic("mock out the DescribeTagsPages method")
//             },
//             DescribeTagsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeTagsInput, in3 func(*ec2.DescribeTagsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeTagsPagesWithContext method")
//             },
//             DescribeTagsRequestFunc: func(in1 *ec2.DescribeTagsInput) (*request.Request, *ec2.DescribeTagsOutput) {
// 	               panic("mock out the DescribeTagsRequest method")
//             },
//             DescribeTagsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeTagsInput, in3 ...request.Option) (*ec2.DescribeTagsOutput, error) {
// 	               panic("mock out the DescribeTagsWithContext method")
//             },
//             DescribeTrafficMirrorFiltersFunc: func(in1 *ec2.DescribeTrafficMirrorFiltersInput) (*ec2.DescribeTrafficMirrorFiltersOutput, error) {
// 	               panic("mock out the DescribeTrafficMirrorFilters method")
//             },
//             DescribeTrafficMirrorFiltersPagesFunc: func(in1 *ec2.DescribeTrafficMirrorFiltersInput, in2 func(*ec2.DescribeTrafficMirrorFiltersOutput, bool) bool) error {
// 	               panic("mock out the DescribeTrafficMirrorFiltersPages method")
//             },
//             DescribeTrafficMirrorFiltersPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeTrafficMirrorFiltersInput, in3 func(*ec2.DescribeTrafficMirrorFiltersOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeTrafficMirrorFiltersPagesWithContext method")
//             },
//             DescribeTrafficMirrorFiltersRequestFunc: func(in1 *ec2.DescribeTrafficMirrorFiltersInput) (*request.Request, *ec2.DescribeTrafficMirrorFiltersOutput) {
// 	               panic("mock out the DescribeTrafficMirrorFiltersRequest method")
//             },
//             DescribeTrafficMirrorFiltersWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeTrafficMirrorFiltersInput, in3 ...request.Option) (*ec2.DescribeTrafficMirrorFiltersOutput, error) {
// 	               panic("mock out the DescribeTrafficMirrorFiltersWithContext method")
//             },
//             DescribeTrafficMirrorSessionsFunc: func(in1 *ec2.DescribeTrafficMirrorSessionsInput) (*ec2.DescribeTrafficMirrorSessionsOutput, error) {
// 	               panic("mock out the DescribeTrafficMirrorSessions method")
//             },
//             DescribeTrafficMirrorSessionsPagesFunc: func(in1 *ec2.DescribeTrafficMirrorSessionsInput, in2 func(*ec2.DescribeTrafficMirrorSessionsOutput, bool) bool) error {
// 	               panic("mock out the DescribeTrafficMirrorSessionsPages method")
//             },
//             DescribeTrafficMirrorSessionsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeTrafficMirrorSessionsInput, in3 func(*ec2.DescribeTrafficMirrorSessionsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeTrafficMirrorSessionsPagesWithContext method")
//             },
//             DescribeTrafficMirrorSessionsRequestFunc: func(in1 *ec2.DescribeTrafficMirrorSessionsInput) (*request.Request, *ec2.DescribeTrafficMirrorSessionsOutput) {
// 	               panic("mock out the DescribeTrafficMirrorSessionsRequest method")
//             },
//             DescribeTrafficMirrorSessionsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeTrafficMirrorSessionsInput, in3 ...request.Option) (*ec2.DescribeTrafficMirrorSessionsOutput, error) {
// 	               panic("mock out the DescribeTrafficMirrorSessionsWithContext method")
//             },
//             DescribeTrafficMirrorTargetsFunc: func(in1 *ec2.DescribeTrafficMirrorTargetsInput) (*ec2.DescribeTrafficMirrorTargetsOutput, error) {
// 	               panic("mock out the DescribeTrafficMirrorTargets method")
//             },
//             DescribeTrafficMirrorTargetsPagesFunc: func(in1 *ec2.DescribeTrafficMirrorTargetsInput, in2 func(*ec2.DescribeTrafficMirrorTargetsOutput, bool) bool) error {
// 	               panic("mock out the DescribeTrafficMirrorTargetsPages method")
//             },
//             DescribeTrafficMirrorTargetsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeTrafficMirrorTargetsInput, in3 func(*ec2.DescribeTrafficMirrorTargetsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeTrafficMirrorTargetsPagesWithContext method")
//             },
//             DescribeTrafficMirrorTargetsRequestFunc: func(in1 *ec2.DescribeTrafficMirrorTargetsInput) (*request.Request, *ec2.DescribeTrafficMirrorTargetsOutput) {
// 	               panic("mock out the DescribeTrafficMirrorTargetsRequest method")
//             },
//             DescribeTrafficMirrorTargetsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeTrafficMirrorTargetsInput, in3 ...request.Option) (*ec2.DescribeTrafficMirrorTargetsOutput, error) {
// 	               panic("mock out the DescribeTrafficMirrorTargetsWithContext method")
//             },
//             DescribeTransitGatewayAttachmentsFunc: func(in1 *ec2.DescribeTransitGatewayAttachmentsInput) (*ec2.DescribeTransitGatewayAttachmentsOutput, error) {
// 	               panic("mock out the DescribeTransitGatewayAttachments method")
//             },
//             DescribeTransitGatewayAttachmentsPagesFunc: func(in1 *ec2.DescribeTransitGatewayAttachmentsInput, in2 func(*ec2.DescribeTransitGatewayAttachmentsOutput, bool) bool) error {
// 	               panic("mock out the DescribeTransitGatewayAttachmentsPages method")
//             },
//             DescribeTransitGatewayAttachmentsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeTransitGatewayAttachmentsInput, in3 func(*ec2.DescribeTransitGatewayAttachmentsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeTransitGatewayAttachmentsPagesWithContext method")
//             },
//             DescribeTransitGatewayAttachmentsRequestFunc: func(in1 *ec2.DescribeTransitGatewayAttachmentsInput) (*request.Request, *ec2.DescribeTransitGatewayAttachmentsOutput) {
// 	               panic("mock out the DescribeTransitGatewayAttachmentsRequest method")
//             },
//             DescribeTransitGatewayAttachmentsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeTransitGatewayAttachmentsInput, in3 ...request.Option) (*ec2.DescribeTransitGatewayAttachmentsOutput, error) {
// 	               panic("mock out the DescribeTransitGatewayAttachmentsWithContext method")
//             },
//             DescribeTransitGatewayMulticastDomainsFunc: func(in1 *ec2.DescribeTransitGatewayMulticastDomainsInput) (*ec2.DescribeTransitGatewayMulticastDomainsOutput, error) {
// 	               panic("mock out the DescribeTransitGatewayMulticastDomains method")
//             },
//             DescribeTransitGatewayMulticastDomainsRequestFunc: func(in1 *ec2.DescribeTransitGatewayMulticastDomainsInput) (*request.Request, *ec2.DescribeTransitGatewayMulticastDomainsOutput) {
// 	               panic("mock out the DescribeTransitGatewayMulticastDomainsRequest method")
//             },
//             DescribeTransitGatewayMulticastDomainsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeTransitGatewayMulticastDomainsInput, in3 ...request.Option) (*ec2.DescribeTransitGatewayMulticastDomainsOutput, error) {
// 	               panic("mock out the DescribeTransitGatewayMulticastDomainsWithContext method")
//             },
//             DescribeTransitGatewayPeeringAttachmentsFunc: func(in1 *ec2.DescribeTransitGatewayPeeringAttachmentsInput) (*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, error) {
// 	               panic("mock out the DescribeTransitGatewayPeeringAttachments method")
//             },
//             DescribeTransitGatewayPeeringAttachmentsRequestFunc: func(in1 *ec2.DescribeTransitGatewayPeeringAttachmentsInput) (*request.Request, *ec2.DescribeTransitGatewayPeeringAttachmentsOutput) {
// 	               panic("mock out the DescribeTransitGatewayPeeringAttachmentsRequest method")
//             },
//             DescribeTransitGatewayPeeringAttachmentsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeTransitGatewayPeeringAttachmentsInput, in3 ...request.Option) (*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, error) {
// 	               panic("mock out the DescribeTransitGatewayPeeringAttachmentsWithContext method")
//             },
//             DescribeTransitGatewayRouteTablesFunc: func(in1 *ec2.DescribeTransitGatewayRouteTablesInput) (*ec2.DescribeTransitGatewayRouteTablesOutput, error) {
// 	               panic("mock out the DescribeTransitGatewayRouteTables method")
//             },
//             DescribeTransitGatewayRouteTablesPagesFunc: func(in1 *ec2.DescribeTransitGatewayRouteTablesInput, in2 func(*ec2.DescribeTransitGatewayRouteTablesOutput, bool) bool) error {
// 	               panic("mock out the DescribeTransitGatewayRouteTablesPages method")
//             },
//             DescribeTransitGatewayRouteTablesPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeTransitGatewayRouteTablesInput, in3 func(*ec2.DescribeTransitGatewayRouteTablesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeTransitGatewayRouteTablesPagesWithContext method")
//             },
//             DescribeTransitGatewayRouteTablesRequestFunc: func(in1 *ec2.DescribeTransitGatewayRouteTablesInput) (*request.Request, *ec2.DescribeTransitGatewayRouteTablesOutput) {
// 	               panic("mock out the DescribeTransitGatewayRouteTablesRequest method")
//             },
//             DescribeTransitGatewayRouteTablesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeTransitGatewayRouteTablesInput, in3 ...request.Option) (*ec2.DescribeTransitGatewayRouteTablesOutput, error) {
// 	               panic("mock out the DescribeTransitGatewayRouteTablesWithContext method")
//             },
//             DescribeTransitGatewayVpcAttachmentsFunc: func(in1 *ec2.DescribeTransitGatewayVpcAttachmentsInput) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error) {
// 	               panic("mock out the DescribeTransitGatewayVpcAttachments method")
//             },
//             DescribeTransitGatewayVpcAttachmentsPagesFunc: func(in1 *ec2.DescribeTransitGatewayVpcAttachmentsInput, in2 func(*ec2.DescribeTransitGatewayVpcAttachmentsOutput, bool) bool) error {
// 	               panic("mock out the DescribeTransitGatewayVpcAttachmentsPages method")
//             },
//             DescribeTransitGatewayVpcAttachmentsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeTransitGatewayVpcAttachmentsInput, in3 func(*ec2.DescribeTransitGatewayVpcAttachmentsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeTransitGatewayVpcAttachmentsPagesWithContext method")
//             },
//             DescribeTransitGatewayVpcAttachmentsRequestFunc: func(in1 *ec2.DescribeTransitGatewayVpcAttachmentsInput) (*request.Request, *ec2.DescribeTransitGatewayVpcAttachmentsOutput) {
// 	               panic("mock out the DescribeTransitGatewayVpcAttachmentsRequest method")
//             },
//             DescribeTransitGatewayVpcAttachmentsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeTransitGatewayVpcAttachmentsInput, in3 ...request.Option) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error) {
// 	               panic("mock out the DescribeTransitGatewayVpcAttachmentsWithContext method")
//             },
//             DescribeTransitGatewaysFunc: func(in1 *ec2.DescribeTransitGatewaysInput) (*ec2.DescribeTransitGatewaysOutput, error) {
// 	               panic("mock out the DescribeTransitGateways method")
//             },
//             DescribeTransitGatewaysPagesFunc: func(in1 *ec2.DescribeTransitGatewaysInput, in2 func(*ec2.DescribeTransitGatewaysOutput, bool) bool) error {
// 	               panic("mock out the DescribeTransitGatewaysPages method")
//             },
//             DescribeTransitGatewaysPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeTransitGatewaysInput, in3 func(*ec2.DescribeTransitGatewaysOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeTransitGatewaysPagesWithContext method")
//             },
//             DescribeTransitGatewaysRequestFunc: func(in1 *ec2.DescribeTransitGatewaysInput) (*request.Request, *ec2.DescribeTransitGatewaysOutput) {
// 	               panic("mock out the DescribeTransitGatewaysRequest method")
//             },
//             DescribeTransitGatewaysWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeTransitGatewaysInput, in3 ...request.Option) (*ec2.DescribeTransitGatewaysOutput, error) {
// 	               panic("mock out the DescribeTransitGatewaysWithContext method")
//             },
//             DescribeVolumeAttributeFunc: func(in1 *ec2.DescribeVolumeAttributeInput) (*ec2.DescribeVolumeAttributeOutput, error) {
// 	               panic("mock out the DescribeVolumeAttribute method")
//             },
//             DescribeVolumeAttributeRequestFunc: func(in1 *ec2.DescribeVolumeAttributeInput) (*request.Request, *ec2.DescribeVolumeAttributeOutput) {
// 	               panic("mock out the DescribeVolumeAttributeRequest method")
//             },
//             DescribeVolumeAttributeWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVolumeAttributeInput, in3 ...request.Option) (*ec2.DescribeVolumeAttributeOutput, error) {
// 	               panic("mock out the DescribeVolumeAttributeWithContext method")
//             },
//             DescribeVolumeStatusFunc: func(in1 *ec2.DescribeVolumeStatusInput) (*ec2.DescribeVolumeStatusOutput, error) {
// 	               panic("mock out the DescribeVolumeStatus method")
//             },
//             DescribeVolumeStatusPagesFunc: func(in1 *ec2.DescribeVolumeStatusInput, in2 func(*ec2.DescribeVolumeStatusOutput, bool) bool) error {
// 	               panic("mock out the DescribeVolumeStatusPages method")
//             },
//             DescribeVolumeStatusPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVolumeStatusInput, in3 func(*ec2.DescribeVolumeStatusOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeVolumeStatusPagesWithContext method")
//             },
//             DescribeVolumeStatusRequestFunc: func(in1 *ec2.DescribeVolumeStatusInput) (*request.Request, *ec2.DescribeVolumeStatusOutput) {
// 	               panic("mock out the DescribeVolumeStatusRequest method")
//             },
//             DescribeVolumeStatusWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVolumeStatusInput, in3 ...request.Option) (*ec2.DescribeVolumeStatusOutput, error) {
// 	               panic("mock out the DescribeVolumeStatusWithContext method")
//             },
//             DescribeVolumesFunc: func(in1 *ec2.DescribeVolumesInput) (*ec2.DescribeVolumesOutput, error) {
// 	               panic("mock out the DescribeVolumes method")
//             },
//             DescribeVolumesModificationsFunc: func(in1 *ec2.DescribeVolumesModificationsInput) (*ec2.DescribeVolumesModificationsOutput, error) {
// 	               panic("mock out the DescribeVolumesModifications method")
//             },
//             DescribeVolumesModificationsPagesFunc: func(in1 *ec2.DescribeVolumesModificationsInput, in2 func(*ec2.DescribeVolumesModificationsOutput, bool) bool) error {
// 	               panic("mock out the DescribeVolumesModificationsPages method")
//             },
//             DescribeVolumesModificationsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVolumesModificationsInput, in3 func(*ec2.DescribeVolumesModificationsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeVolumesModificationsPagesWithContext method")
//             },
//             DescribeVolumesModificationsRequestFunc: func(in1 *ec2.DescribeVolumesModificationsInput) (*request.Request, *ec2.DescribeVolumesModificationsOutput) {
// 	               panic("mock out the DescribeVolumesModificationsRequest method")
//             },
//             DescribeVolumesModificationsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVolumesModificationsInput, in3 ...request.Option) (*ec2.DescribeVolumesModificationsOutput, error) {
// 	               panic("mock out the DescribeVolumesModificationsWithContext method")
//             },
//             DescribeVolumesPagesFunc: func(in1 *ec2.DescribeVolumesInput, in2 func(*ec2.DescribeVolumesOutput, bool) bool) error {
// 	               panic("mock out the DescribeVolumesPages method")
//             },
//             DescribeVolumesPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVolumesInput, in3 func(*ec2.DescribeVolumesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeVolumesPagesWithContext method")
//             },
//             DescribeVolumesRequestFunc: func(in1 *ec2.DescribeVolumesInput) (*request.Request, *ec2.DescribeVolumesOutput) {
// 	               panic("mock out the DescribeVolumesRequest method")
//             },
//             DescribeVolumesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVolumesInput, in3 ...request.Option) (*ec2.DescribeVolumesOutput, error) {
// 	               panic("mock out the DescribeVolumesWithContext method")
//             },
//             DescribeVpcAttributeFunc: func(in1 *ec2.DescribeVpcAttributeInput) (*ec2.DescribeVpcAttributeOutput, error) {
// 	               panic("mock out the DescribeVpcAttribute method")
//             },
//             DescribeVpcAttributeRequestFunc: func(in1 *ec2.DescribeVpcAttributeInput) (*request.Request, *ec2.DescribeVpcAttributeOutput) {
// 	               panic("mock out the DescribeVpcAttributeRequest method")
//             },
//             DescribeVpcAttributeWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpcAttributeInput, in3 ...request.Option) (*ec2.DescribeVpcAttributeOutput, error) {
// 	               panic("mock out the DescribeVpcAttributeWithContext method")
//             },
//             DescribeVpcClassicLinkFunc: func(in1 *ec2.DescribeVpcClassicLinkInput) (*ec2.DescribeVpcClassicLinkOutput, error) {
// 	               panic("mock out the DescribeVpcClassicLink method")
//             },
//             DescribeVpcClassicLinkDnsSupportFunc: func(in1 *ec2.DescribeVpcClassicLinkDnsSupportInput) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error) {
// 	               panic("mock out the DescribeVpcClassicLinkDnsSupport method")
//             },
//             DescribeVpcClassicLinkDnsSupportPagesFunc: func(in1 *ec2.DescribeVpcClassicLinkDnsSupportInput, in2 func(*ec2.DescribeVpcClassicLinkDnsSupportOutput, bool) bool) error {
// 	               panic("mock out the DescribeVpcClassicLinkDnsSupportPages method")
//             },
//             DescribeVpcClassicLinkDnsSupportPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpcClassicLinkDnsSupportInput, in3 func(*ec2.DescribeVpcClassicLinkDnsSupportOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeVpcClassicLinkDnsSupportPagesWithContext method")
//             },
//             DescribeVpcClassicLinkDnsSupportRequestFunc: func(in1 *ec2.DescribeVpcClassicLinkDnsSupportInput) (*request.Request, *ec2.DescribeVpcClassicLinkDnsSupportOutput) {
// 	               panic("mock out the DescribeVpcClassicLinkDnsSupportRequest method")
//             },
//             DescribeVpcClassicLinkDnsSupportWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpcClassicLinkDnsSupportInput, in3 ...request.Option) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error) {
// 	               panic("mock out the DescribeVpcClassicLinkDnsSupportWithContext method")
//             },
//             DescribeVpcClassicLinkRequestFunc: func(in1 *ec2.DescribeVpcClassicLinkInput) (*request.Request, *ec2.DescribeVpcClassicLinkOutput) {
// 	               panic("mock out the DescribeVpcClassicLinkRequest method")
//             },
//             DescribeVpcClassicLinkWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpcClassicLinkInput, in3 ...request.Option) (*ec2.DescribeVpcClassicLinkOutput, error) {
// 	               panic("mock out the DescribeVpcClassicLinkWithContext method")
//             },
//             DescribeVpcEndpointConnectionNotificationsFunc: func(in1 *ec2.DescribeVpcEndpointConnectionNotificationsInput) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error) {
// 	               panic("mock out the DescribeVpcEndpointConnectionNotifications method")
//             },
//             DescribeVpcEndpointConnectionNotificationsPagesFunc: func(in1 *ec2.DescribeVpcEndpointConnectionNotificationsInput, in2 func(*ec2.DescribeVpcEndpointConnectionNotificationsOutput, bool) bool) error {
// 	               panic("mock out the DescribeVpcEndpointConnectionNotificationsPages method")
//             },
//             DescribeVpcEndpointConnectionNotificationsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpcEndpointConnectionNotificationsInput, in3 func(*ec2.DescribeVpcEndpointConnectionNotificationsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeVpcEndpointConnectionNotificationsPagesWithContext method")
//             },
//             DescribeVpcEndpointConnectionNotificationsRequestFunc: func(in1 *ec2.DescribeVpcEndpointConnectionNotificationsInput) (*request.Request, *ec2.DescribeVpcEndpointConnectionNotificationsOutput) {
// 	               panic("mock out the DescribeVpcEndpointConnectionNotificationsRequest method")
//             },
//             DescribeVpcEndpointConnectionNotificationsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpcEndpointConnectionNotificationsInput, in3 ...request.Option) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error) {
// 	               panic("mock out the DescribeVpcEndpointConnectionNotificationsWithContext method")
//             },
//             DescribeVpcEndpointConnectionsFunc: func(in1 *ec2.DescribeVpcEndpointConnectionsInput) (*ec2.DescribeVpcEndpointConnectionsOutput, error) {
// 	               panic("mock out the DescribeVpcEndpointConnections method")
//             },
//             DescribeVpcEndpointConnectionsPagesFunc: func(in1 *ec2.DescribeVpcEndpointConnectionsInput, in2 func(*ec2.DescribeVpcEndpointConnectionsOutput, bool) bool) error {
// 	               panic("mock out the DescribeVpcEndpointConnectionsPages method")
//             },
//             DescribeVpcEndpointConnectionsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpcEndpointConnectionsInput, in3 func(*ec2.DescribeVpcEndpointConnectionsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeVpcEndpointConnectionsPagesWithContext method")
//             },
//             DescribeVpcEndpointConnectionsRequestFunc: func(in1 *ec2.DescribeVpcEndpointConnectionsInput) (*request.Request, *ec2.DescribeVpcEndpointConnectionsOutput) {
// 	               panic("mock out the DescribeVpcEndpointConnectionsRequest method")
//             },
//             DescribeVpcEndpointConnectionsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpcEndpointConnectionsInput, in3 ...request.Option) (*ec2.DescribeVpcEndpointConnectionsOutput, error) {
// 	               panic("mock out the DescribeVpcEndpointConnectionsWithContext method")
//             },
//             DescribeVpcEndpointServiceConfigurationsFunc: func(in1 *ec2.DescribeVpcEndpointServiceConfigurationsInput) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error) {
// 	               panic("mock out the DescribeVpcEndpointServiceConfigurations method")
//             },
//             DescribeVpcEndpointServiceConfigurationsPagesFunc: func(in1 *ec2.DescribeVpcEndpointServiceConfigurationsInput, in2 func(*ec2.DescribeVpcEndpointServiceConfigurationsOutput, bool) bool) error {
// 	               panic("mock out the DescribeVpcEndpointServiceConfigurationsPages method")
//             },
//             DescribeVpcEndpointServiceConfigurationsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpcEndpointServiceConfigurationsInput, in3 func(*ec2.DescribeVpcEndpointServiceConfigurationsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeVpcEndpointServiceConfigurationsPagesWithContext method")
//             },
//             DescribeVpcEndpointServiceConfigurationsRequestFunc: func(in1 *ec2.DescribeVpcEndpointServiceConfigurationsInput) (*request.Request, *ec2.DescribeVpcEndpointServiceConfigurationsOutput) {
// 	               panic("mock out the DescribeVpcEndpointServiceConfigurationsRequest method")
//             },
//             DescribeVpcEndpointServiceConfigurationsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpcEndpointServiceConfigurationsInput, in3 ...request.Option) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error) {
// 	               panic("mock out the DescribeVpcEndpointServiceConfigurationsWithContext method")
//             },
//             DescribeVpcEndpointServicePermissionsFunc: func(in1 *ec2.DescribeVpcEndpointServicePermissionsInput) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error) {
// 	               panic("mock out the DescribeVpcEndpointServicePermissions method")
//             },
//             DescribeVpcEndpointServicePermissionsPagesFunc: func(in1 *ec2.DescribeVpcEndpointServicePermissionsInput, in2 func(*ec2.DescribeVpcEndpointServicePermissionsOutput, bool) bool) error {
// 	               panic("mock out the DescribeVpcEndpointServicePermissionsPages method")
//             },
//             DescribeVpcEndpointServicePermissionsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpcEndpointServicePermissionsInput, in3 func(*ec2.DescribeVpcEndpointServicePermissionsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeVpcEndpointServicePermissionsPagesWithContext method")
//             },
//             DescribeVpcEndpointServicePermissionsRequestFunc: func(in1 *ec2.DescribeVpcEndpointServicePermissionsInput) (*request.Request, *ec2.DescribeVpcEndpointServicePermissionsOutput) {
// 	               panic("mock out the DescribeVpcEndpointServicePermissionsRequest method")
//             },
//             DescribeVpcEndpointServicePermissionsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpcEndpointServicePermissionsInput, in3 ...request.Option) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error) {
// 	               panic("mock out the DescribeVpcEndpointServicePermissionsWithContext method")
//             },
//             DescribeVpcEndpointServicesFunc: func(in1 *ec2.DescribeVpcEndpointServicesInput) (*ec2.DescribeVpcEndpointServicesOutput, error) {
// 	               panic("mock out the DescribeVpcEndpointServices method")
//             },
//             DescribeVpcEndpointServicesRequestFunc: func(in1 *ec2.DescribeVpcEndpointServicesInput) (*request.Request, *ec2.DescribeVpcEndpointServicesOutput) {
// 	               panic("mock out the DescribeVpcEndpointServicesRequest method")
//             },
//             DescribeVpcEndpointServicesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpcEndpointServicesInput, in3 ...request.Option) (*ec2.DescribeVpcEndpointServicesOutput, error) {
// 	               panic("mock out the DescribeVpcEndpointServicesWithContext method")
//             },
//             DescribeVpcEndpointsFunc: func(in1 *ec2.DescribeVpcEndpointsInput) (*ec2.DescribeVpcEndpointsOutput, error) {
// 	               panic("mock out the DescribeVpcEndpoints method")
//             },
//             DescribeVpcEndpointsPagesFunc: func(in1 *ec2.DescribeVpcEndpointsInput, in2 func(*ec2.DescribeVpcEndpointsOutput, bool) bool) error {
// 	               panic("mock out the DescribeVpcEndpointsPages method")
//             },
//             DescribeVpcEndpointsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpcEndpointsInput, in3 func(*ec2.DescribeVpcEndpointsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeVpcEndpointsPagesWithContext method")
//             },
//             DescribeVpcEndpointsRequestFunc: func(in1 *ec2.DescribeVpcEndpointsInput) (*request.Request, *ec2.DescribeVpcEndpointsOutput) {
// 	               panic("mock out the DescribeVpcEndpointsRequest method")
//             },
//             DescribeVpcEndpointsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpcEndpointsInput, in3 ...request.Option) (*ec2.DescribeVpcEndpointsOutput, error) {
// 	               panic("mock out the DescribeVpcEndpointsWithContext method")
//             },
//             DescribeVpcPeeringConnectionsFunc: func(in1 *ec2.DescribeVpcPeeringConnectionsInput) (*ec2.DescribeVpcPeeringConnectionsOutput, error) {
// 	               panic("mock out the DescribeVpcPeeringConnections method")
//             },
//             DescribeVpcPeeringConnectionsPagesFunc: func(in1 *ec2.DescribeVpcPeeringConnectionsInput, in2 func(*ec2.DescribeVpcPeeringConnectionsOutput, bool) bool) error {
// 	               panic("mock out the DescribeVpcPeeringConnectionsPages method")
//             },
//             DescribeVpcPeeringConnectionsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpcPeeringConnectionsInput, in3 func(*ec2.DescribeVpcPeeringConnectionsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeVpcPeeringConnectionsPagesWithContext method")
//             },
//             DescribeVpcPeeringConnectionsRequestFunc: func(in1 *ec2.DescribeVpcPeeringConnectionsInput) (*request.Request, *ec2.DescribeVpcPeeringConnectionsOutput) {
// 	               panic("mock out the DescribeVpcPeeringConnectionsRequest method")
//             },
//             DescribeVpcPeeringConnectionsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpcPeeringConnectionsInput, in3 ...request.Option) (*ec2.DescribeVpcPeeringConnectionsOutput, error) {
// 	               panic("mock out the DescribeVpcPeeringConnectionsWithContext method")
//             },
//             DescribeVpcsFunc: func(in1 *ec2.DescribeVpcsInput) (*ec2.DescribeVpcsOutput, error) {
// 	               panic("mock out the DescribeVpcs method")
//             },
//             DescribeVpcsPagesFunc: func(in1 *ec2.DescribeVpcsInput, in2 func(*ec2.DescribeVpcsOutput, bool) bool) error {
// 	               panic("mock out the DescribeVpcsPages method")
//             },
//             DescribeVpcsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpcsInput, in3 func(*ec2.DescribeVpcsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeVpcsPagesWithContext method")
//             },
//             DescribeVpcsRequestFunc: func(in1 *ec2.DescribeVpcsInput) (*request.Request, *ec2.DescribeVpcsOutput) {
// 	               panic("mock out the DescribeVpcsRequest method")
//             },
//             DescribeVpcsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpcsInput, in3 ...request.Option) (*ec2.DescribeVpcsOutput, error) {
// 	               panic("mock out the DescribeVpcsWithContext method")
//             },
//             DescribeVpnConnectionsFunc: func(in1 *ec2.DescribeVpnConnectionsInput) (*ec2.DescribeVpnConnectionsOutput, error) {
// 	               panic("mock out the DescribeVpnConnections method")
//             },
//             DescribeVpnConnectionsRequestFunc: func(in1 *ec2.DescribeVpnConnectionsInput) (*request.Request, *ec2.DescribeVpnConnectionsOutput) {
// 	               panic("mock out the DescribeVpnConnectionsRequest method")
//             },
//             DescribeVpnConnectionsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpnConnectionsInput, in3 ...request.Option) (*ec2.DescribeVpnConnectionsOutput, error) {
// 	               panic("mock out the DescribeVpnConnectionsWithContext method")
//             },
//             DescribeVpnGatewaysFunc: func(in1 *ec2.DescribeVpnGatewaysInput) (*ec2.DescribeVpnGatewaysOutput, error) {
// 	               panic("mock out the DescribeVpnGateways method")
//             },
//             DescribeVpnGatewaysRequestFunc: func(in1 *ec2.DescribeVpnGatewaysInput) (*request.Request, *ec2.DescribeVpnGatewaysOutput) {
// 	               panic("mock out the DescribeVpnGatewaysRequest method")
//             },
//             DescribeVpnGatewaysWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpnGatewaysInput, in3 ...request.Option) (*ec2.DescribeVpnGatewaysOutput, error) {
// 	               panic("mock out the DescribeVpnGatewaysWithContext method")
//             },
//             DetachClassicLinkVpcFunc: func(in1 *ec2.DetachClassicLinkVpcInput) (*ec2.DetachClassicLinkVpcOutput, error) {
// 	               panic("mock out the DetachClassicLinkVpc method")
//             },
//             DetachClassicLinkVpcRequestFunc: func(in1 *ec2.DetachClassicLinkVpcInput) (*request.Request, *ec2.DetachClassicLinkVpcOutput) {
// 	               panic("mock out the DetachClassicLinkVpcRequest method")
//             },
//             DetachClassicLinkVpcWithContextFunc: func(in1 context.Context, in2 *ec2.DetachClassicLinkVpcInput, in3 ...request.Option) (*ec2.DetachClassicLinkVpcOutput, error) {
// 	               panic("mock out the DetachClassicLinkVpcWithContext method")
//             },
//             DetachInternetGatewayFunc: func(in1 *ec2.DetachInternetGatewayInput) (*ec2.DetachInternetGatewayOutput, error) {
// 	               panic("mock out the DetachInternetGateway method")
//             },
//             DetachInternetGatewayRequestFunc: func(in1 *ec2.DetachInternetGatewayInput) (*request.Request, *ec2.DetachInternetGatewayOutput) {
// 	               panic("mock out the DetachInternetGatewayRequest method")
//             },
//             DetachInternetGatewayWithContextFunc: func(in1 context.Context, in2 *ec2.DetachInternetGatewayInput, in3 ...request.Option) (*ec2.DetachInternetGatewayOutput, error) {
// 	               panic("mock out the DetachInternetGatewayWithContext method")
//             },
//             DetachNetworkInterfaceFunc: func(in1 *ec2.DetachNetworkInterfaceInput) (*ec2.DetachNetworkInterfaceOutput, error) {
// 	               panic("mock out the DetachNetworkInterface method")
//             },
//             DetachNetworkInterfaceRequestFunc: func(in1 *ec2.DetachNetworkInterfaceInput) (*request.Request, *ec2.DetachNetworkInterfaceOutput) {
// 	               panic("mock out the DetachNetworkInterfaceRequest method")
//             },
//             DetachNetworkInterfaceWithContextFunc: func(in1 context.Context, in2 *ec2.DetachNetworkInterfaceInput, in3 ...request.Option) (*ec2.DetachNetworkInterfaceOutput, error) {
// 	               panic("mock out the DetachNetworkInterfaceWithContext method")
//             },
//             DetachVolumeFunc: func(in1 *ec2.DetachVolumeInput) (*ec2.VolumeAttachment, error) {
// 	               panic("mock out the DetachVolume method")
//             },
//             DetachVolumeRequestFunc: func(in1 *ec2.DetachVolumeInput) (*request.Request, *ec2.VolumeAttachment) {
// 	               panic("mock out the DetachVolumeRequest method")
//             },
//             DetachVolumeWithContextFunc: func(in1 context.Context, in2 *ec2.DetachVolumeInput, in3 ...request.Option) (*ec2.VolumeAttachment, error) {
// 	               panic("mock out the DetachVolumeWithContext method")
//             },
//             DetachVpnGatewayFunc: func(in1 *ec2.DetachVpnGatewayInput) (*ec2.DetachVpnGatewayOutput, error) {
// 	               panic("mock out the DetachVpnGateway method")
//             },
//             DetachVpnGatewayRequestFunc: func(in1 *ec2.DetachVpnGatewayInput) (*request.Request, *ec2.DetachVpnGatewayOutput) {
// 	               panic("mock out the DetachVpnGatewayRequest method")
//             },
//             DetachVpnGatewayWithContextFunc: func(in1 context.Context, in2 *ec2.DetachVpnGatewayInput, in3 ...request.Option) (*ec2.DetachVpnGatewayOutput, error) {
// 	               panic("mock out the DetachVpnGatewayWithContext method")
//             },
//             DisableEbsEncryptionByDefaultFunc: func(in1 *ec2.DisableEbsEncryptionByDefaultInput) (*ec2.DisableEbsEncryptionByDefaultOutput, error) {
// 	               panic("mock out the DisableEbsEncryptionByDefault method")
//             },
//             DisableEbsEncryptionByDefaultRequestFunc: func(in1 *ec2.DisableEbsEncryptionByDefaultInput) (*request.Request, *ec2.DisableEbsEncryptionByDefaultOutput) {
// 	               panic("mock out the DisableEbsEncryptionByDefaultRequest method")
//             },
//             DisableEbsEncryptionByDefaultWithContextFunc: func(in1 context.Context, in2 *ec2.DisableEbsEncryptionByDefaultInput, in3 ...request.Option) (*ec2.DisableEbsEncryptionByDefaultOutput, error) {
// 	               panic("mock out the DisableEbsEncryptionByDefaultWithContext method")
//             },
//             DisableFastSnapshotRestoresFunc: func(in1 *ec2.DisableFastSnapshotRestoresInput) (*ec2.DisableFastSnapshotRestoresOutput, error) {
// 	               panic("mock out the DisableFastSnapshotRestores method")
//             },
//             DisableFastSnapshotRestoresRequestFunc: func(in1 *ec2.DisableFastSnapshotRestoresInput) (*request.Request, *ec2.DisableFastSnapshotRestoresOutput) {
// 	               panic("mock out the DisableFastSnapshotRestoresRequest method")
//             },
//             DisableFastSnapshotRestoresWithContextFunc: func(in1 context.Context, in2 *ec2.DisableFastSnapshotRestoresInput, in3 ...request.Option) (*ec2.DisableFastSnapshotRestoresOutput, error) {
// 	               panic("mock out the DisableFastSnapshotRestoresWithContext method")
//             },
//             DisableTransitGatewayRouteTablePropagationFunc: func(in1 *ec2.DisableTransitGatewayRouteTablePropagationInput) (*ec2.DisableTransitGatewayRouteTablePropagationOutput, error) {
// 	               panic("mock out the DisableTransitGatewayRouteTablePropagation method")
//             },
//             DisableTransitGatewayRouteTablePropagationRequestFunc: func(in1 *ec2.DisableTransitGatewayRouteTablePropagationInput) (*request.Request, *ec2.DisableTransitGatewayRouteTablePropagationOutput) {
// 	               panic("mock out the DisableTransitGatewayRouteTablePropagationRequest method")
//             },
//             DisableTransitGatewayRouteTablePropagationWithContextFunc: func(in1 context.Context, in2 *ec2.DisableTransitGatewayRouteTablePropagationInput, in3 ...request.Option) (*ec2.DisableTransitGatewayRouteTablePropagationOutput, error) {
// 	               panic("mock out the DisableTransitGatewayRouteTablePropagationWithContext method")
//             },
//             DisableVgwRoutePropagationFunc: func(in1 *ec2.DisableVgwRoutePropagationInput) (*ec2.DisableVgwRoutePropagationOutput, error) {
// 	               panic("mock out the DisableVgwRoutePropagation method")
//             },
//             DisableVgwRoutePropagationRequestFunc: func(in1 *ec2.DisableVgwRoutePropagationInput) (*request.Request, *ec2.DisableVgwRoutePropagationOutput) {
// 	               panic("mock out the DisableVgwRoutePropagationRequest method")
//             },
//             DisableVgwRoutePropagationWithContextFunc: func(in1 context.Context, in2 *ec2.DisableVgwRoutePropagationInput, in3 ...request.Option) (*ec2.DisableVgwRoutePropagationOutput, error) {
// 	               panic("mock out the DisableVgwRoutePropagationWithContext method")
//             },
//             DisableVpcClassicLinkFunc: func(in1 *ec2.DisableVpcClassicLinkInput) (*ec2.DisableVpcClassicLinkOutput, error) {
// 	               panic("mock out the DisableVpcClassicLink method")
//             },
//             DisableVpcClassicLinkDnsSupportFunc: func(in1 *ec2.DisableVpcClassicLinkDnsSupportInput) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error) {
// 	               panic("mock out the DisableVpcClassicLinkDnsSupport method")
//             },
//             DisableVpcClassicLinkDnsSupportRequestFunc: func(in1 *ec2.DisableVpcClassicLinkDnsSupportInput) (*request.Request, *ec2.DisableVpcClassicLinkDnsSupportOutput) {
// 	               panic("mock out the DisableVpcClassicLinkDnsSupportRequest method")
//             },
//             DisableVpcClassicLinkDnsSupportWithContextFunc: func(in1 context.Context, in2 *ec2.DisableVpcClassicLinkDnsSupportInput, in3 ...request.Option) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error) {
// 	               panic("mock out the DisableVpcClassicLinkDnsSupportWithContext method")
//             },
//             DisableVpcClassicLinkRequestFunc: func(in1 *ec2.DisableVpcClassicLinkInput) (*request.Request, *ec2.DisableVpcClassicLinkOutput) {
// 	               panic("mock out the DisableVpcClassicLinkRequest method")
//             },
//             DisableVpcClassicLinkWithContextFunc: func(in1 context.Context, in2 *ec2.DisableVpcClassicLinkInput, in3 ...request.Option) (*ec2.DisableVpcClassicLinkOutput, error) {
// 	               panic("mock out the DisableVpcClassicLinkWithContext method")
//             },
//             DisassociateAddressFunc: func(in1 *ec2.DisassociateAddressInput) (*ec2.DisassociateAddressOutput, error) {
// 	               panic("mock out the DisassociateAddress method")
//             },
//             DisassociateAddressRequestFunc: func(in1 *ec2.DisassociateAddressInput) (*request.Request, *ec2.DisassociateAddressOutput) {
// 	               panic("mock out the DisassociateAddressRequest method")
//             },
//             DisassociateAddressWithContextFunc: func(in1 context.Context, in2 *ec2.DisassociateAddressInput, in3 ...request.Option) (*ec2.DisassociateAddressOutput, error) {
// 	               panic("mock out the DisassociateAddressWithContext method")
//             },
//             DisassociateClientVpnTargetNetworkFunc: func(in1 *ec2.DisassociateClientVpnTargetNetworkInput) (*ec2.DisassociateClientVpnTargetNetworkOutput, error) {
// 	               panic("mock out the DisassociateClientVpnTargetNetwork method")
//             },
//             DisassociateClientVpnTargetNetworkRequestFunc: func(in1 *ec2.DisassociateClientVpnTargetNetworkInput) (*request.Request, *ec2.DisassociateClientVpnTargetNetworkOutput) {
// 	               panic("mock out the DisassociateClientVpnTargetNetworkRequest method")
//             },
//             DisassociateClientVpnTargetNetworkWithContextFunc: func(in1 context.Context, in2 *ec2.DisassociateClientVpnTargetNetworkInput, in3 ...request.Option) (*ec2.DisassociateClientVpnTargetNetworkOutput, error) {
// 	               panic("mock out the DisassociateClientVpnTargetNetworkWithContext method")
//             },
//             DisassociateIamInstanceProfileFunc: func(in1 *ec2.DisassociateIamInstanceProfileInput) (*ec2.DisassociateIamInstanceProfileOutput, error) {
// 	               panic("mock out the DisassociateIamInstanceProfile method")
//             },
//             DisassociateIamInstanceProfileRequestFunc: func(in1 *ec2.DisassociateIamInstanceProfileInput) (*request.Request, *ec2.DisassociateIamInstanceProfileOutput) {
// 	               panic("mock out the DisassociateIamInstanceProfileRequest method")
//             },
//             DisassociateIamInstanceProfileWithContextFunc: func(in1 context.Context, in2 *ec2.DisassociateIamInstanceProfileInput, in3 ...request.Option) (*ec2.DisassociateIamInstanceProfileOutput, error) {
// 	               panic("mock out the DisassociateIamInstanceProfileWithContext method")
//             },
//             DisassociateRouteTableFunc: func(in1 *ec2.DisassociateRouteTableInput) (*ec2.DisassociateRouteTableOutput, error) {
// 	               panic("mock out the DisassociateRouteTable method")
//             },
//             DisassociateRouteTableRequestFunc: func(in1 *ec2.DisassociateRouteTableInput) (*request.Request, *ec2.DisassociateRouteTableOutput) {
// 	               panic("mock out the DisassociateRouteTableRequest method")
//             },
//             DisassociateRouteTableWithContextFunc: func(in1 context.Context, in2 *ec2.DisassociateRouteTableInput, in3 ...request.Option) (*ec2.DisassociateRouteTableOutput, error) {
// 	               panic("mock out the DisassociateRouteTableWithContext method")
//             },
//             DisassociateSubnetCidrBlockFunc: func(in1 *ec2.DisassociateSubnetCidrBlockInput) (*ec2.DisassociateSubnetCidrBlockOutput, error) {
// 	               panic("mock out the DisassociateSubnetCidrBlock method")
//             },
//             DisassociateSubnetCidrBlockRequestFunc: func(in1 *ec2.DisassociateSubnetCidrBlockInput) (*request.Request, *ec2.DisassociateSubnetCidrBlockOutput) {
// 	               panic("mock out the DisassociateSubnetCidrBlockRequest method")
//             },
//             DisassociateSubnetCidrBlockWithContextFunc: func(in1 context.Context, in2 *ec2.DisassociateSubnetCidrBlockInput, in3 ...request.Option) (*ec2.DisassociateSubnetCidrBlockOutput, error) {
// 	               panic("mock out the DisassociateSubnetCidrBlockWithContext method")
//             },
//             DisassociateTransitGatewayMulticastDomainFunc: func(in1 *ec2.DisassociateTransitGatewayMulticastDomainInput) (*ec2.DisassociateTransitGatewayMulticastDomainOutput, error) {
// 	               panic("mock out the DisassociateTransitGatewayMulticastDomain method")
//             },
//             DisassociateTransitGatewayMulticastDomainRequestFunc: func(in1 *ec2.DisassociateTransitGatewayMulticastDomainInput) (*request.Request, *ec2.DisassociateTransitGatewayMulticastDomainOutput) {
// 	               panic("mock out the DisassociateTransitGatewayMulticastDomainRequest method")
//             },
//             DisassociateTransitGatewayMulticastDomainWithContextFunc: func(in1 context.Context, in2 *ec2.DisassociateTransitGatewayMulticastDomainInput, in3 ...request.Option) (*ec2.DisassociateTransitGatewayMulticastDomainOutput, error) {
// 	               panic("mock out the DisassociateTransitGatewayMulticastDomainWithContext method")
//             },
//             DisassociateTransitGatewayRouteTableFunc: func(in1 *ec2.DisassociateTransitGatewayRouteTableInput) (*ec2.DisassociateTransitGatewayRouteTableOutput, error) {
// 	               panic("mock out the DisassociateTransitGatewayRouteTable method")
//             },
//             DisassociateTransitGatewayRouteTableRequestFunc: func(in1 *ec2.DisassociateTransitGatewayRouteTableInput) (*request.Request, *ec2.DisassociateTransitGatewayRouteTableOutput) {
// 	               panic("mock out the DisassociateTransitGatewayRouteTableRequest method")
//             },
//             DisassociateTransitGatewayRouteTableWithContextFunc: func(in1 context.Context, in2 *ec2.DisassociateTransitGatewayRouteTableInput, in3 ...request.Option) (*ec2.DisassociateTransitGatewayRouteTableOutput, error) {
// 	               panic("mock out the DisassociateTransitGatewayRouteTableWithContext method")
//             },
//             DisassociateVpcCidrBlockFunc: func(in1 *ec2.DisassociateVpcCidrBlockInput) (*ec2.DisassociateVpcCidrBlockOutput, error) {
// 	               panic("mock out the DisassociateVpcCidrBlock method")
//             },
//             DisassociateVpcCidrBlockRequestFunc: func(in1 *ec2.DisassociateVpcCidrBlockInput) (*request.Request, *ec2.DisassociateVpcCidrBlockOutput) {
// 	               panic("mock out the DisassociateVpcCidrBlockRequest method")
//             },
//             DisassociateVpcCidrBlockWithContextFunc: func(in1 context.Context, in2 *ec2.DisassociateVpcCidrBlockInput, in3 ...request.Option) (*ec2.DisassociateVpcCidrBlockOutput, error) {
// 	               panic("mock out the DisassociateVpcCidrBlockWithContext method")
//             },
//             EnableEbsEncryptionByDefaultFunc: func(in1 *ec2.EnableEbsEncryptionByDefaultInput) (*ec2.EnableEbsEncryptionByDefaultOutput, error) {
// 	               panic("mock out the EnableEbsEncryptionByDefault method")
//             },
//             EnableEbsEncryptionByDefaultRequestFunc: func(in1 *ec2.EnableEbsEncryptionByDefaultInput) (*request.Request, *ec2.EnableEbsEncryptionByDefaultOutput) {
// 	               panic("mock out the EnableEbsEncryptionByDefaultRequest method")
//             },
//             EnableEbsEncryptionByDefaultWithContextFunc: func(in1 context.Context, in2 *ec2.EnableEbsEncryptionByDefaultInput, in3 ...request.Option) (*ec2.EnableEbsEncryptionByDefaultOutput, error) {
// 	               panic("mock out the EnableEbsEncryptionByDefaultWithContext method")
//             },
//             EnableFastSnapshotRestoresFunc: func(in1 *ec2.EnableFastSnapshotRestoresInput) (*ec2.EnableFastSnapshotRestoresOutput, error) {
// 	               panic("mock out the EnableFastSnapshotRestores method")
//             },
//             EnableFastSnapshotRestoresRequestFunc: func(in1 *ec2.EnableFastSnapshotRestoresInput) (*request.Request, *ec2.EnableFastSnapshotRestoresOutput) {
// 	               panic("mock out the EnableFastSnapshotRestoresRequest method")
//             },
//             EnableFastSnapshotRestoresWithContextFunc: func(in1 context.Context, in2 *ec2.EnableFastSnapshotRestoresInput, in3 ...request.Option) (*ec2.EnableFastSnapshotRestoresOutput, error) {
// 	               panic("mock out the EnableFastSnapshotRestoresWithContext method")
//             },
//             EnableTransitGatewayRouteTablePropagationFunc: func(in1 *ec2.EnableTransitGatewayRouteTablePropagationInput) (*ec2.EnableTransitGatewayRouteTablePropagationOutput, error) {
// 	               panic("mock out the EnableTransitGatewayRouteTablePropagation method")
//             },
//             EnableTransitGatewayRouteTablePropagationRequestFunc: func(in1 *ec2.EnableTransitGatewayRouteTablePropagationInput) (*request.Request, *ec2.EnableTransitGatewayRouteTablePropagationOutput) {
// 	               panic("mock out the EnableTransitGatewayRouteTablePropagationRequest method")
//             },
//             EnableTransitGatewayRouteTablePropagationWithContextFunc: func(in1 context.Context, in2 *ec2.EnableTransitGatewayRouteTablePropagationInput, in3 ...request.Option) (*ec2.EnableTransitGatewayRouteTablePropagationOutput, error) {
// 	               panic("mock out the EnableTransitGatewayRouteTablePropagationWithContext method")
//             },
//             EnableVgwRoutePropagationFunc: func(in1 *ec2.EnableVgwRoutePropagationInput) (*ec2.EnableVgwRoutePropagationOutput, error) {
// 	               panic("mock out the EnableVgwRoutePropagation method")
//             },
//             EnableVgwRoutePropagationRequestFunc: func(in1 *ec2.EnableVgwRoutePropagationInput) (*request.Request, *ec2.EnableVgwRoutePropagationOutput) {
// 	               panic("mock out the EnableVgwRoutePropagationRequest method")
//             },
//             EnableVgwRoutePropagationWithContextFunc: func(in1 context.Context, in2 *ec2.EnableVgwRoutePropagationInput, in3 ...request.Option) (*ec2.EnableVgwRoutePropagationOutput, error) {
// 	               panic("mock out the EnableVgwRoutePropagationWithContext method")
//             },
//             EnableVolumeIOFunc: func(in1 *ec2.EnableVolumeIOInput) (*ec2.EnableVolumeIOOutput, error) {
// 	               panic("mock out the EnableVolumeIO method")
//             },
//             EnableVolumeIORequestFunc: func(in1 *ec2.EnableVolumeIOInput) (*request.Request, *ec2.EnableVolumeIOOutput) {
// 	               panic("mock out the EnableVolumeIORequest method")
//             },
//             EnableVolumeIOWithContextFunc: func(in1 context.Context, in2 *ec2.EnableVolumeIOInput, in3 ...request.Option) (*ec2.EnableVolumeIOOutput, error) {
// 	               panic("mock out the EnableVolumeIOWithContext method")
//             },
//             EnableVpcClassicLinkFunc: func(in1 *ec2.EnableVpcClassicLinkInput) (*ec2.EnableVpcClassicLinkOutput, error) {
// 	               panic("mock out the EnableVpcClassicLink method")
//             },
//             EnableVpcClassicLinkDnsSupportFunc: func(in1 *ec2.EnableVpcClassicLinkDnsSupportInput) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error) {
// 	               panic("mock out the EnableVpcClassicLinkDnsSupport method")
//             },
//             EnableVpcClassicLinkDnsSupportRequestFunc: func(in1 *ec2.EnableVpcClassicLinkDnsSupportInput) (*request.Request, *ec2.EnableVpcClassicLinkDnsSupportOutput) {
// 	               panic("mock out the EnableVpcClassicLinkDnsSupportRequest method")
//             },
//             EnableVpcClassicLinkDnsSupportWithContextFunc: func(in1 context.Context, in2 *ec2.EnableVpcClassicLinkDnsSupportInput, in3 ...request.Option) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error) {
// 	               panic("mock out the EnableVpcClassicLinkDnsSupportWithContext method")
//             },
//             EnableVpcClassicLinkRequestFunc: func(in1 *ec2.EnableVpcClassicLinkInput) (*request.Request, *ec2.EnableVpcClassicLinkOutput) {
// 	               panic("mock out the EnableVpcClassicLinkRequest method")
//             },
//             EnableVpcClassicLinkWithContextFunc: func(in1 context.Context, in2 *ec2.EnableVpcClassicLinkInput, in3 ...request.Option) (*ec2.EnableVpcClassicLinkOutput, error) {
// 	               panic("mock out the EnableVpcClassicLinkWithContext method")
//             },
//             ExportClientVpnClientCertificateRevocationListFunc: func(in1 *ec2.ExportClientVpnClientCertificateRevocationListInput) (*ec2.ExportClientVpnClientCertificateRevocationListOutput, error) {
// 	               panic("mock out the ExportClientVpnClientCertificateRevocationList method")
//             },
//             ExportClientVpnClientCertificateRevocationListRequestFunc: func(in1 *ec2.ExportClientVpnClientCertificateRevocationListInput) (*request.Request, *ec2.ExportClientVpnClientCertificateRevocationListOutput) {
// 	               panic("mock out the ExportClientVpnClientCertificateRevocationListRequest method")
//             },
//             ExportClientVpnClientCertificateRevocationListWithContextFunc: func(in1 context.Context, in2 *ec2.ExportClientVpnClientCertificateRevocationListInput, in3 ...request.Option) (*ec2.ExportClientVpnClientCertificateRevocationListOutput, error) {
// 	               panic("mock out the ExportClientVpnClientCertificateRevocationListWithContext method")
//             },
//             ExportClientVpnClientConfigurationFunc: func(in1 *ec2.ExportClientVpnClientConfigurationInput) (*ec2.ExportClientVpnClientConfigurationOutput, error) {
// 	               panic("mock out the ExportClientVpnClientConfiguration method")
//             },
//             ExportClientVpnClientConfigurationRequestFunc: func(in1 *ec2.ExportClientVpnClientConfigurationInput) (*request.Request, *ec2.ExportClientVpnClientConfigurationOutput) {
// 	               panic("mock out the ExportClientVpnClientConfigurationRequest method")
//             },
//             ExportClientVpnClientConfigurationWithContextFunc: func(in1 context.Context, in2 *ec2.ExportClientVpnClientConfigurationInput, in3 ...request.Option) (*ec2.ExportClientVpnClientConfigurationOutput, error) {
// 	               panic("mock out the ExportClientVpnClientConfigurationWithContext method")
//             },
//             ExportImageFunc: func(in1 *ec2.ExportImageInput) (*ec2.ExportImageOutput, error) {
// 	               panic("mock out the ExportImage method")
//             },
//             ExportImageRequestFunc: func(in1 *ec2.ExportImageInput) (*request.Request, *ec2.ExportImageOutput) {
// 	               panic("mock out the ExportImageRequest method")
//             },
//             ExportImageWithContextFunc: func(in1 context.Context, in2 *ec2.ExportImageInput, in3 ...request.Option) (*ec2.ExportImageOutput, error) {
// 	               panic("mock out the ExportImageWithContext method")
//             },
//             ExportTransitGatewayRoutesFunc: func(in1 *ec2.ExportTransitGatewayRoutesInput) (*ec2.ExportTransitGatewayRoutesOutput, error) {
// 	               panic("mock out the ExportTransitGatewayRoutes method")
//             },
//             ExportTransitGatewayRoutesRequestFunc: func(in1 *ec2.ExportTransitGatewayRoutesInput) (*request.Request, *ec2.ExportTransitGatewayRoutesOutput) {
// 	               panic("mock out the ExportTransitGatewayRoutesRequest method")
//             },
//             ExportTransitGatewayRoutesWithContextFunc: func(in1 context.Context, in2 *ec2.ExportTransitGatewayRoutesInput, in3 ...request.Option) (*ec2.ExportTransitGatewayRoutesOutput, error) {
// 	               panic("mock out the ExportTransitGatewayRoutesWithContext method")
//             },
//             GetAssociatedIpv6PoolCidrsFunc: func(in1 *ec2.GetAssociatedIpv6PoolCidrsInput) (*ec2.GetAssociatedIpv6PoolCidrsOutput, error) {
// 	               panic("mock out the GetAssociatedIpv6PoolCidrs method")
//             },
//             GetAssociatedIpv6PoolCidrsPagesFunc: func(in1 *ec2.GetAssociatedIpv6PoolCidrsInput, in2 func(*ec2.GetAssociatedIpv6PoolCidrsOutput, bool) bool) error {
// 	               panic("mock out the GetAssociatedIpv6PoolCidrsPages method")
//             },
//             GetAssociatedIpv6PoolCidrsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.GetAssociatedIpv6PoolCidrsInput, in3 func(*ec2.GetAssociatedIpv6PoolCidrsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the GetAssociatedIpv6PoolCidrsPagesWithContext method")
//             },
//             GetAssociatedIpv6PoolCidrsRequestFunc: func(in1 *ec2.GetAssociatedIpv6PoolCidrsInput) (*request.Request, *ec2.GetAssociatedIpv6PoolCidrsOutput) {
// 	               panic("mock out the GetAssociatedIpv6PoolCidrsRequest method")
//             },
//             GetAssociatedIpv6PoolCidrsWithContextFunc: func(in1 context.Context, in2 *ec2.GetAssociatedIpv6PoolCidrsInput, in3 ...request.Option) (*ec2.GetAssociatedIpv6PoolCidrsOutput, error) {
// 	               panic("mock out the GetAssociatedIpv6PoolCidrsWithContext method")
//             },
//             GetCapacityReservationUsageFunc: func(in1 *ec2.GetCapacityReservationUsageInput) (*ec2.GetCapacityReservationUsageOutput, error) {
// 	               panic("mock out the GetCapacityReservationUsage method")
//             },
//             GetCapacityReservationUsageRequestFunc: func(in1 *ec2.GetCapacityReservationUsageInput) (*request.Request, *ec2.GetCapacityReservationUsageOutput) {
// 	               panic("mock out the GetCapacityReservationUsageRequest method")
//             },
//             GetCapacityReservationUsageWithContextFunc: func(in1 context.Context, in2 *ec2.GetCapacityReservationUsageInput, in3 ...request.Option) (*ec2.GetCapacityReservationUsageOutput, error) {
// 	               panic("mock out the GetCapacityReservationUsageWithContext method")
//             },
//             GetCoipPoolUsageFunc: func(in1 *ec2.GetCoipPoolUsageInput) (*ec2.GetCoipPoolUsageOutput, error) {
// 	               panic("mock out the GetCoipPoolUsage method")
//             },
//             GetCoipPoolUsageRequestFunc: func(in1 *ec2.GetCoipPoolUsageInput) (*request.Request, *ec2.GetCoipPoolUsageOutput) {
// 	               panic("mock out the GetCoipPoolUsageRequest method")
//             },
//             GetCoipPoolUsageWithContextFunc: func(in1 context.Context, in2 *ec2.GetCoipPoolUsageInput, in3 ...request.Option) (*ec2.GetCoipPoolUsageOutput, error) {
// 	               panic("mock out the GetCoipPoolUsageWithContext method")
//             },
//             GetConsoleOutputFunc: func(in1 *ec2.GetConsoleOutputInput) (*ec2.GetConsoleOutputOutput, error) {
// 	               panic("mock out the GetConsoleOutput method")
//             },
//             GetConsoleOutputRequestFunc: func(in1 *ec2.GetConsoleOutputInput) (*request.Request, *ec2.GetConsoleOutputOutput) {
// 	               panic("mock out the GetConsoleOutputRequest method")
//             },
//             GetConsoleOutputWithContextFunc: func(in1 context.Context, in2 *ec2.GetConsoleOutputInput, in3 ...request.Option) (*ec2.GetConsoleOutputOutput, error) {
// 	               panic("mock out the GetConsoleOutputWithContext method")
//             },
//             GetConsoleScreenshotFunc: func(in1 *ec2.GetConsoleScreenshotInput) (*ec2.GetConsoleScreenshotOutput, error) {
// 	               panic("mock out the GetConsoleScreenshot method")
//             },
//             GetConsoleScreenshotRequestFunc: func(in1 *ec2.GetConsoleScreenshotInput) (*request.Request, *ec2.GetConsoleScreenshotOutput) {
// 	               panic("mock out the GetConsoleScreenshotRequest method")
//             },
//             GetConsoleScreenshotWithContextFunc: func(in1 context.Context, in2 *ec2.GetConsoleScreenshotInput, in3 ...request.Option) (*ec2.GetConsoleScreenshotOutput, error) {
// 	               panic("mock out the GetConsoleScreenshotWithContext method")
//             },
//             GetDefaultCreditSpecificationFunc: func(in1 *ec2.GetDefaultCreditSpecificationInput) (*ec2.GetDefaultCreditSpecificationOutput, error) {
// 	               panic("mock out the GetDefaultCreditSpecification method")
//             },
//             GetDefaultCreditSpecificationRequestFunc: func(in1 *ec2.GetDefaultCreditSpecificationInput) (*request.Request, *ec2.GetDefaultCreditSpecificationOutput) {
// 	               panic("mock out the GetDefaultCreditSpecificationRequest method")
//             },
//             GetDefaultCreditSpecificationWithContextFunc: func(in1 context.Context, in2 *ec2.GetDefaultCreditSpecificationInput, in3 ...request.Option) (*ec2.GetDefaultCreditSpecificationOutput, error) {
// 	               panic("mock out the GetDefaultCreditSpecificationWithContext method")
//             },
//             GetEbsDefaultKmsKeyIdFunc: func(in1 *ec2.GetEbsDefaultKmsKeyIdInput) (*ec2.GetEbsDefaultKmsKeyIdOutput, error) {
// 	               panic("mock out the GetEbsDefaultKmsKeyId method")
//             },
//             GetEbsDefaultKmsKeyIdRequestFunc: func(in1 *ec2.GetEbsDefaultKmsKeyIdInput) (*request.Request, *ec2.GetEbsDefaultKmsKeyIdOutput) {
// 	               panic("mock out the GetEbsDefaultKmsKeyIdRequest method")
//             },
//             GetEbsDefaultKmsKeyIdWithContextFunc: func(in1 context.Context, in2 *ec2.GetEbsDefaultKmsKeyIdInput, in3 ...request.Option) (*ec2.GetEbsDefaultKmsKeyIdOutput, error) {
// 	               panic("mock out the GetEbsDefaultKmsKeyIdWithContext method")
//             },
//             GetEbsEncryptionByDefaultFunc: func(in1 *ec2.GetEbsEncryptionByDefaultInput) (*ec2.GetEbsEncryptionByDefaultOutput, error) {
// 	               panic("mock out the GetEbsEncryptionByDefault method")
//             },
//             GetEbsEncryptionByDefaultRequestFunc: func(in1 *ec2.GetEbsEncryptionByDefaultInput) (*request.Request, *ec2.GetEbsEncryptionByDefaultOutput) {
// 	               panic("mock out the GetEbsEncryptionByDefaultRequest method")
//             },
//             GetEbsEncryptionByDefaultWithContextFunc: func(in1 context.Context, in2 *ec2.GetEbsEncryptionByDefaultInput, in3 ...request.Option) (*ec2.GetEbsEncryptionByDefaultOutput, error) {
// 	               panic("mock out the GetEbsEncryptionByDefaultWithContext method")
//             },
//             GetHostReservationPurchasePreviewFunc: func(in1 *ec2.GetHostReservationPurchasePreviewInput) (*ec2.GetHostReservationPurchasePreviewOutput, error) {
// 	               panic("mock out the GetHostReservationPurchasePreview method")
//             },
//             GetHostReservationPurchasePreviewRequestFunc: func(in1 *ec2.GetHostReservationPurchasePreviewInput) (*request.Request, *ec2.GetHostReservationPurchasePreviewOutput) {
// 	               panic("mock out the GetHostReservationPurchasePreviewRequest method")
//             },
//             GetHostReservationPurchasePreviewWithContextFunc: func(in1 context.Context, in2 *ec2.GetHostReservationPurchasePreviewInput, in3 ...request.Option) (*ec2.GetHostReservationPurchasePreviewOutput, error) {
// 	               panic("mock out the GetHostReservationPurchasePreviewWithContext method")
//             },
//             GetLaunchTemplateDataFunc: func(in1 *ec2.GetLaunchTemplateDataInput) (*ec2.GetLaunchTemplateDataOutput, error) {
// 	               panic("mock out the GetLaunchTemplateData method")
//             },
//             GetLaunchTemplateDataRequestFunc: func(in1 *ec2.GetLaunchTemplateDataInput) (*request.Request, *ec2.GetLaunchTemplateDataOutput) {
// 	               panic("mock out the GetLaunchTemplateDataRequest method")
//             },
//             GetLaunchTemplateDataWithContextFunc: func(in1 context.Context, in2 *ec2.GetLaunchTemplateDataInput, in3 ...request.Option) (*ec2.GetLaunchTemplateDataOutput, error) {
// 	               panic("mock out the GetLaunchTemplateDataWithContext method")
//             },
//             GetPasswordDataFunc: func(in1 *ec2.GetPasswordDataInput) (*ec2.GetPasswordDataOutput, error) {
// 	               panic("mock out the GetPasswordData method")
//             },
//             GetPasswordDataRequestFunc: func(in1 *ec2.GetPasswordDataInput) (*request.Request, *ec2.GetPasswordDataOutput) {
// 	               panic("mock out the GetPasswordDataRequest method")
//             },
//             GetPasswordDataWithContextFunc: func(in1 context.Context, in2 *ec2.GetPasswordDataInput, in3 ...request.Option) (*ec2.GetPasswordDataOutput, error) {
// 	               panic("mock out the GetPasswordDataWithContext method")
//             },
//             GetReservedInstancesExchangeQuoteFunc: func(in1 *ec2.GetReservedInstancesExchangeQuoteInput) (*ec2.GetReservedInstancesExchangeQuoteOutput, error) {
// 	               panic("mock out the GetReservedInstancesExchangeQuote method")
//             },
//             GetReservedInstancesExchangeQuoteRequestFunc: func(in1 *ec2.GetReservedInstancesExchangeQuoteInput) (*request.Request, *ec2.GetReservedInstancesExchangeQuoteOutput) {
// 	               panic("mock out the GetReservedInstancesExchangeQuoteRequest method")
//             },
//             GetReservedInstancesExchangeQuoteWithContextFunc: func(in1 context.Context, in2 *ec2.GetReservedInstancesExchangeQuoteInput, in3 ...request.Option) (*ec2.GetReservedInstancesExchangeQuoteOutput, error) {
// 	               panic("mock out the GetReservedInstancesExchangeQuoteWithContext method")
//             },
//             GetTransitGatewayAttachmentPropagationsFunc: func(in1 *ec2.GetTransitGatewayAttachmentPropagationsInput) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error) {
// 	               panic("mock out the GetTransitGatewayAttachmentPropagations method")
//             },
//             GetTransitGatewayAttachmentPropagationsPagesFunc: func(in1 *ec2.GetTransitGatewayAttachmentPropagationsInput, in2 func(*ec2.GetTransitGatewayAttachmentPropagationsOutput, bool) bool) error {
// 	               panic("mock out the GetTransitGatewayAttachmentPropagationsPages method")
//             },
//             GetTransitGatewayAttachmentPropagationsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.GetTransitGatewayAttachmentPropagationsInput, in3 func(*ec2.GetTransitGatewayAttachmentPropagationsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the GetTransitGatewayAttachmentPropagationsPagesWithContext method")
//             },
//             GetTransitGatewayAttachmentPropagationsRequestFunc: func(in1 *ec2.GetTransitGatewayAttachmentPropagationsInput) (*request.Request, *ec2.GetTransitGatewayAttachmentPropagationsOutput) {
// 	               panic("mock out the GetTransitGatewayAttachmentPropagationsRequest method")
//             },
//             GetTransitGatewayAttachmentPropagationsWithContextFunc: func(in1 context.Context, in2 *ec2.GetTransitGatewayAttachmentPropagationsInput, in3 ...request.Option) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error) {
// 	               panic("mock out the GetTransitGatewayAttachmentPropagationsWithContext method")
//             },
//             GetTransitGatewayMulticastDomainAssociationsFunc: func(in1 *ec2.GetTransitGatewayMulticastDomainAssociationsInput) (*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, error) {
// 	               panic("mock out the GetTransitGatewayMulticastDomainAssociations method")
//             },
//             GetTransitGatewayMulticastDomainAssociationsRequestFunc: func(in1 *ec2.GetTransitGatewayMulticastDomainAssociationsInput) (*request.Request, *ec2.GetTransitGatewayMulticastDomainAssociationsOutput) {
// 	               panic("mock out the GetTransitGatewayMulticastDomainAssociationsRequest method")
//             },
//             GetTransitGatewayMulticastDomainAssociationsWithContextFunc: func(in1 context.Context, in2 *ec2.GetTransitGatewayMulticastDomainAssociationsInput, in3 ...request.Option) (*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, error) {
// 	               panic("mock out the GetTransitGatewayMulticastDomainAssociationsWithContext method")
//             },
//             GetTransitGatewayRouteTableAssociationsFunc: func(in1 *ec2.GetTransitGatewayRouteTableAssociationsInput) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error) {
// 	               panic("mock out the GetTransitGatewayRouteTableAssociations method")
//             },
//             GetTransitGatewayRouteTableAssociationsPagesFunc: func(in1 *ec2.GetTransitGatewayRouteTableAssociationsInput, in2 func(*ec2.GetTransitGatewayRouteTableAssociationsOutput, bool) bool) error {
// 	               panic("mock out the GetTransitGatewayRouteTableAssociationsPages method")
//             },
//             GetTransitGatewayRouteTableAssociationsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.GetTransitGatewayRouteTableAssociationsInput, in3 func(*ec2.GetTransitGatewayRouteTableAssociationsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the GetTransitGatewayRouteTableAssociationsPagesWithContext method")
//             },
//             GetTransitGatewayRouteTableAssociationsRequestFunc: func(in1 *ec2.GetTransitGatewayRouteTableAssociationsInput) (*request.Request, *ec2.GetTransitGatewayRouteTableAssociationsOutput) {
// 	               panic("mock out the GetTransitGatewayRouteTableAssociationsRequest method")
//             },
//             GetTransitGatewayRouteTableAssociationsWithContextFunc: func(in1 context.Context, in2 *ec2.GetTransitGatewayRouteTableAssociationsInput, in3 ...request.Option) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error) {
// 	               panic("mock out the GetTransitGatewayRouteTableAssociationsWithContext method")
//             },
//             GetTransitGatewayRouteTablePropagationsFunc: func(in1 *ec2.GetTransitGatewayRouteTablePropagationsInput) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error) {
// 	               panic("mock out the GetTransitGatewayRouteTablePropagations method")
//             },
//             GetTransitGatewayRouteTablePropagationsPagesFunc: func(in1 *ec2.GetTransitGatewayRouteTablePropagationsInput, in2 func(*ec2.GetTransitGatewayRouteTablePropagationsOutput, bool) bool) error {
// 	               panic("mock out the GetTransitGatewayRouteTablePropagationsPages method")
//             },
//             GetTransitGatewayRouteTablePropagationsPagesWithContextFunc: func(in1 context.Context, in2 *ec2.GetTransitGatewayRouteTablePropagationsInput, in3 func(*ec2.GetTransitGatewayRouteTablePropagationsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the GetTransitGatewayRouteTablePropagationsPagesWithContext method")
//             },
//             GetTransitGatewayRouteTablePropagationsRequestFunc: func(in1 *ec2.GetTransitGatewayRouteTablePropagationsInput) (*request.Request, *ec2.GetTransitGatewayRouteTablePropagationsOutput) {
// 	               panic("mock out the GetTransitGatewayRouteTablePropagationsRequest method")
//             },
//             GetTransitGatewayRouteTablePropagationsWithContextFunc: func(in1 context.Context, in2 *ec2.GetTransitGatewayRouteTablePropagationsInput, in3 ...request.Option) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error) {
// 	               panic("mock out the GetTransitGatewayRouteTablePropagationsWithContext method")
//             },
//             ImportClientVpnClientCertificateRevocationListFunc: func(in1 *ec2.ImportClientVpnClientCertificateRevocationListInput) (*ec2.ImportClientVpnClientCertificateRevocationListOutput, error) {
// 	               panic("mock out the ImportClientVpnClientCertificateRevocationList method")
//             },
//             ImportClientVpnClientCertificateRevocationListRequestFunc: func(in1 *ec2.ImportClientVpnClientCertificateRevocationListInput) (*request.Request, *ec2.ImportClientVpnClientCertificateRevocationListOutput) {
// 	               panic("mock out the ImportClientVpnClientCertificateRevocationListRequest method")
//             },
//             ImportClientVpnClientCertificateRevocationListWithContextFunc: func(in1 context.Context, in2 *ec2.ImportClientVpnClientCertificateRevocationListInput, in3 ...request.Option) (*ec2.ImportClientVpnClientCertificateRevocationListOutput, error) {
// 	               panic("mock out the ImportClientVpnClientCertificateRevocationListWithContext method")
//             },
//             ImportImageFunc: func(in1 *ec2.ImportImageInput) (*ec2.ImportImageOutput, error) {
// 	               panic("mock out the ImportImage method")
//             },
//             ImportImageRequestFunc: func(in1 *ec2.ImportImageInput) (*request.Request, *ec2.ImportImageOutput) {
// 	               panic("mock out the ImportImageRequest method")
//             },
//             ImportImageWithContextFunc: func(in1 context.Context, in2 *ec2.ImportImageInput, in3 ...request.Option) (*ec2.ImportImageOutput, error) {
// 	               panic("mock out the ImportImageWithContext method")
//             },
//             ImportInstanceFunc: func(in1 *ec2.ImportInstanceInput) (*ec2.ImportInstanceOutput, error) {
// 	               panic("mock out the ImportInstance method")
//             },
//             ImportInstanceRequestFunc: func(in1 *ec2.ImportInstanceInput) (*request.Request, *ec2.ImportInstanceOutput) {
// 	               panic("mock out the ImportInstanceRequest method")
//             },
//             ImportInstanceWithContextFunc: func(in1 context.Context, in2 *ec2.ImportInstanceInput, in3 ...request.Option) (*ec2.ImportInstanceOutput, error) {
// 	               panic("mock out the ImportInstanceWithContext method")
//             },
//             ImportKeyPairFunc: func(in1 *ec2.ImportKeyPairInput) (*ec2.ImportKeyPairOutput, error) {
// 	               panic("mock out the ImportKeyPair method")
//             },
//             ImportKeyPairRequestFunc: func(in1 *ec2.ImportKeyPairInput) (*request.Request, *ec2.ImportKeyPairOutput) {
// 	               panic("mock out the ImportKeyPairRequest method")
//             },
//             ImportKeyPairWithContextFunc: func(in1 context.Context, in2 *ec2.ImportKeyPairInput, in3 ...request.Option) (*ec2.ImportKeyPairOutput, error) {
// 	               panic("mock out the ImportKeyPairWithContext method")
//             },
//             ImportSnapshotFunc: func(in1 *ec2.ImportSnapshotInput) (*ec2.ImportSnapshotOutput, error) {
// 	               panic("mock out the ImportSnapshot method")
//             },
//             ImportSnapshotRequestFunc: func(in1 *ec2.ImportSnapshotInput) (*request.Request, *ec2.ImportSnapshotOutput) {
// 	               panic("mock out the ImportSnapshotRequest method")
//             },
//             ImportSnapshotWithContextFunc: func(in1 context.Context, in2 *ec2.ImportSnapshotInput, in3 ...request.Option) (*ec2.ImportSnapshotOutput, error) {
// 	               panic("mock out the ImportSnapshotWithContext method")
//             },
//             ImportVolumeFunc: func(in1 *ec2.ImportVolumeInput) (*ec2.ImportVolumeOutput, error) {
// 	               panic("mock out the ImportVolume method")
//             },
//             ImportVolumeRequestFunc: func(in1 *ec2.ImportVolumeInput) (*request.Request, *ec2.ImportVolumeOutput) {
// 	               panic("mock out the ImportVolumeRequest method")
//             },
//             ImportVolumeWithContextFunc: func(in1 context.Context, in2 *ec2.ImportVolumeInput, in3 ...request.Option) (*ec2.ImportVolumeOutput, error) {
// 	               panic("mock out the ImportVolumeWithContext method")
//             },
//             ModifyCapacityReservationFunc: func(in1 *ec2.ModifyCapacityReservationInput) (*ec2.ModifyCapacityReservationOutput, error) {
// 	               panic("mock out the ModifyCapacityReservation method")
//             },
//             ModifyCapacityReservationRequestFunc: func(in1 *ec2.ModifyCapacityReservationInput) (*request.Request, *ec2.ModifyCapacityReservationOutput) {
// 	               panic("mock out the ModifyCapacityReservationRequest method")
//             },
//             ModifyCapacityReservationWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyCapacityReservationInput, in3 ...request.Option) (*ec2.ModifyCapacityReservationOutput, error) {
// 	               panic("mock out the ModifyCapacityReservationWithContext method")
//             },
//             ModifyClientVpnEndpointFunc: func(in1 *ec2.ModifyClientVpnEndpointInput) (*ec2.ModifyClientVpnEndpointOutput, error) {
// 	               panic("mock out the ModifyClientVpnEndpoint method")
//             },
//             ModifyClientVpnEndpointRequestFunc: func(in1 *ec2.ModifyClientVpnEndpointInput) (*request.Request, *ec2.ModifyClientVpnEndpointOutput) {
// 	               panic("mock out the ModifyClientVpnEndpointRequest method")
//             },
//             ModifyClientVpnEndpointWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyClientVpnEndpointInput, in3 ...request.Option) (*ec2.ModifyClientVpnEndpointOutput, error) {
// 	               panic("mock out the ModifyClientVpnEndpointWithContext method")
//             },
//             ModifyDefaultCreditSpecificationFunc: func(in1 *ec2.ModifyDefaultCreditSpecificationInput) (*ec2.ModifyDefaultCreditSpecificationOutput, error) {
// 	               panic("mock out the ModifyDefaultCreditSpecification method")
//             },
//             ModifyDefaultCreditSpecificationRequestFunc: func(in1 *ec2.ModifyDefaultCreditSpecificationInput) (*request.Request, *ec2.ModifyDefaultCreditSpecificationOutput) {
// 	               panic("mock out the ModifyDefaultCreditSpecificationRequest method")
//             },
//             ModifyDefaultCreditSpecificationWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyDefaultCreditSpecificationInput, in3 ...request.Option) (*ec2.ModifyDefaultCreditSpecificationOutput, error) {
// 	               panic("mock out the ModifyDefaultCreditSpecificationWithContext method")
//             },
//             ModifyEbsDefaultKmsKeyIdFunc: func(in1 *ec2.ModifyEbsDefaultKmsKeyIdInput) (*ec2.ModifyEbsDefaultKmsKeyIdOutput, error) {
// 	               panic("mock out the ModifyEbsDefaultKmsKeyId method")
//             },
//             ModifyEbsDefaultKmsKeyIdRequestFunc: func(in1 *ec2.ModifyEbsDefaultKmsKeyIdInput) (*request.Request, *ec2.ModifyEbsDefaultKmsKeyIdOutput) {
// 	               panic("mock out the ModifyEbsDefaultKmsKeyIdRequest method")
//             },
//             ModifyEbsDefaultKmsKeyIdWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyEbsDefaultKmsKeyIdInput, in3 ...request.Option) (*ec2.ModifyEbsDefaultKmsKeyIdOutput, error) {
// 	               panic("mock out the ModifyEbsDefaultKmsKeyIdWithContext method")
//             },
//             ModifyFleetFunc: func(in1 *ec2.ModifyFleetInput) (*ec2.ModifyFleetOutput, error) {
// 	               panic("mock out the ModifyFleet method")
//             },
//             ModifyFleetRequestFunc: func(in1 *ec2.ModifyFleetInput) (*request.Request, *ec2.ModifyFleetOutput) {
// 	               panic("mock out the ModifyFleetRequest method")
//             },
//             ModifyFleetWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyFleetInput, in3 ...request.Option) (*ec2.ModifyFleetOutput, error) {
// 	               panic("mock out the ModifyFleetWithContext method")
//             },
//             ModifyFpgaImageAttributeFunc: func(in1 *ec2.ModifyFpgaImageAttributeInput) (*ec2.ModifyFpgaImageAttributeOutput, error) {
// 	               panic("mock out the ModifyFpgaImageAttribute method")
//             },
//             ModifyFpgaImageAttributeRequestFunc: func(in1 *ec2.ModifyFpgaImageAttributeInput) (*request.Request, *ec2.ModifyFpgaImageAttributeOutput) {
// 	               panic("mock out the ModifyFpgaImageAttributeRequest method")
//             },
//             ModifyFpgaImageAttributeWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyFpgaImageAttributeInput, in3 ...request.Option) (*ec2.ModifyFpgaImageAttributeOutput, error) {
// 	               panic("mock out the ModifyFpgaImageAttributeWithContext method")
//             },
//             ModifyHostsFunc: func(in1 *ec2.ModifyHostsInput) (*ec2.ModifyHostsOutput, error) {
// 	               panic("mock out the ModifyHosts method")
//             },
//             ModifyHostsRequestFunc: func(in1 *ec2.ModifyHostsInput) (*request.Request, *ec2.ModifyHostsOutput) {
// 	               panic("mock out the ModifyHostsRequest method")
//             },
//             ModifyHostsWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyHostsInput, in3 ...request.Option) (*ec2.ModifyHostsOutput, error) {
// 	               panic("mock out the ModifyHostsWithContext method")
//             },
//             ModifyIdFormatFunc: func(in1 *ec2.ModifyIdFormatInput) (*ec2.ModifyIdFormatOutput, error) {
// 	               panic("mock out the ModifyIdFormat method")
//             },
//             ModifyIdFormatRequestFunc: func(in1 *ec2.ModifyIdFormatInput) (*request.Request, *ec2.ModifyIdFormatOutput) {
// 	               panic("mock out the ModifyIdFormatRequest method")
//             },
//             ModifyIdFormatWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyIdFormatInput, in3 ...request.Option) (*ec2.ModifyIdFormatOutput, error) {
// 	               panic("mock out the ModifyIdFormatWithContext method")
//             },
//             ModifyIdentityIdFormatFunc: func(in1 *ec2.ModifyIdentityIdFormatInput) (*ec2.ModifyIdentityIdFormatOutput, error) {
// 	               panic("mock out the ModifyIdentityIdFormat method")
//             },
//             ModifyIdentityIdFormatRequestFunc: func(in1 *ec2.ModifyIdentityIdFormatInput) (*request.Request, *ec2.ModifyIdentityIdFormatOutput) {
// 	               panic("mock out the ModifyIdentityIdFormatRequest method")
//             },
//             ModifyIdentityIdFormatWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyIdentityIdFormatInput, in3 ...request.Option) (*ec2.ModifyIdentityIdFormatOutput, error) {
// 	               panic("mock out the ModifyIdentityIdFormatWithContext method")
//             },
//             ModifyImageAttributeFunc: func(in1 *ec2.ModifyImageAttributeInput) (*ec2.ModifyImageAttributeOutput, error) {
// 	               panic("mock out the ModifyImageAttribute method")
//             },
//             ModifyImageAttributeRequestFunc: func(in1 *ec2.ModifyImageAttributeInput) (*request.Request, *ec2.ModifyImageAttributeOutput) {
// 	               panic("mock out the ModifyImageAttributeRequest method")
//             },
//             ModifyImageAttributeWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyImageAttributeInput, in3 ...request.Option) (*ec2.ModifyImageAttributeOutput, error) {
// 	               panic("mock out the ModifyImageAttributeWithContext method")
//             },
//             ModifyInstanceAttributeFunc: func(in1 *ec2.ModifyInstanceAttributeInput) (*ec2.ModifyInstanceAttributeOutput, error) {
// 	               panic("mock out the ModifyInstanceAttribute method")
//             },
//             ModifyInstanceAttributeRequestFunc: func(in1 *ec2.ModifyInstanceAttributeInput) (*request.Request, *ec2.ModifyInstanceAttributeOutput) {
// 	               panic("mock out the ModifyInstanceAttributeRequest method")
//             },
//             ModifyInstanceAttributeWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyInstanceAttributeInput, in3 ...request.Option) (*ec2.ModifyInstanceAttributeOutput, error) {
// 	               panic("mock out the ModifyInstanceAttributeWithContext method")
//             },
//             ModifyInstanceCapacityReservationAttributesFunc: func(in1 *ec2.ModifyInstanceCapacityReservationAttributesInput) (*ec2.ModifyInstanceCapacityReservationAttributesOutput, error) {
// 	               panic("mock out the ModifyInstanceCapacityReservationAttributes method")
//             },
//             ModifyInstanceCapacityReservationAttributesRequestFunc: func(in1 *ec2.ModifyInstanceCapacityReservationAttributesInput) (*request.Request, *ec2.ModifyInstanceCapacityReservationAttributesOutput) {
// 	               panic("mock out the ModifyInstanceCapacityReservationAttributesRequest method")
//             },
//             ModifyInstanceCapacityReservationAttributesWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyInstanceCapacityReservationAttributesInput, in3 ...request.Option) (*ec2.ModifyInstanceCapacityReservationAttributesOutput, error) {
// 	               panic("mock out the ModifyInstanceCapacityReservationAttributesWithContext method")
//             },
//             ModifyInstanceCreditSpecificationFunc: func(in1 *ec2.ModifyInstanceCreditSpecificationInput) (*ec2.ModifyInstanceCreditSpecificationOutput, error) {
// 	               panic("mock out the ModifyInstanceCreditSpecification method")
//             },
//             ModifyInstanceCreditSpecificationRequestFunc: func(in1 *ec2.ModifyInstanceCreditSpecificationInput) (*request.Request, *ec2.ModifyInstanceCreditSpecificationOutput) {
// 	               panic("mock out the ModifyInstanceCreditSpecificationRequest method")
//             },
//             ModifyInstanceCreditSpecificationWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyInstanceCreditSpecificationInput, in3 ...request.Option) (*ec2.ModifyInstanceCreditSpecificationOutput, error) {
// 	               panic("mock out the ModifyInstanceCreditSpecificationWithContext method")
//             },
//             ModifyInstanceEventStartTimeFunc: func(in1 *ec2.ModifyInstanceEventStartTimeInput) (*ec2.ModifyInstanceEventStartTimeOutput, error) {
// 	               panic("mock out the ModifyInstanceEventStartTime method")
//             },
//             ModifyInstanceEventStartTimeRequestFunc: func(in1 *ec2.ModifyInstanceEventStartTimeInput) (*request.Request, *ec2.ModifyInstanceEventStartTimeOutput) {
// 	               panic("mock out the ModifyInstanceEventStartTimeRequest method")
//             },
//             ModifyInstanceEventStartTimeWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyInstanceEventStartTimeInput, in3 ...request.Option) (*ec2.ModifyInstanceEventStartTimeOutput, error) {
// 	               panic("mock out the ModifyInstanceEventStartTimeWithContext method")
//             },
//             ModifyInstanceMetadataOptionsFunc: func(in1 *ec2.ModifyInstanceMetadataOptionsInput) (*ec2.ModifyInstanceMetadataOptionsOutput, error) {
// 	               panic("mock out the ModifyInstanceMetadataOptions method")
//             },
//             ModifyInstanceMetadataOptionsRequestFunc: func(in1 *ec2.ModifyInstanceMetadataOptionsInput) (*request.Request, *ec2.ModifyInstanceMetadataOptionsOutput) {
// 	               panic("mock out the ModifyInstanceMetadataOptionsRequest method")
//             },
//             ModifyInstanceMetadataOptionsWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyInstanceMetadataOptionsInput, in3 ...request.Option) (*ec2.ModifyInstanceMetadataOptionsOutput, error) {
// 	               panic("mock out the ModifyInstanceMetadataOptionsWithContext method")
//             },
//             ModifyInstancePlacementFunc: func(in1 *ec2.ModifyInstancePlacementInput) (*ec2.ModifyInstancePlacementOutput, error) {
// 	               panic("mock out the ModifyInstancePlacement method")
//             },
//             ModifyInstancePlacementRequestFunc: func(in1 *ec2.ModifyInstancePlacementInput) (*request.Request, *ec2.ModifyInstancePlacementOutput) {
// 	               panic("mock out the ModifyInstancePlacementRequest method")
//             },
//             ModifyInstancePlacementWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyInstancePlacementInput, in3 ...request.Option) (*ec2.ModifyInstancePlacementOutput, error) {
// 	               panic("mock out the ModifyInstancePlacementWithContext method")
//             },
//             ModifyLaunchTemplateFunc: func(in1 *ec2.ModifyLaunchTemplateInput) (*ec2.ModifyLaunchTemplateOutput, error) {
// 	               panic("mock out the ModifyLaunchTemplate method")
//             },
//             ModifyLaunchTemplateRequestFunc: func(in1 *ec2.ModifyLaunchTemplateInput) (*request.Request, *ec2.ModifyLaunchTemplateOutput) {
// 	               panic("mock out the ModifyLaunchTemplateRequest method")
//             },
//             ModifyLaunchTemplateWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyLaunchTemplateInput, in3 ...request.Option) (*ec2.ModifyLaunchTemplateOutput, error) {
// 	               panic("mock out the ModifyLaunchTemplateWithContext method")
//             },
//             ModifyNetworkInterfaceAttributeFunc: func(in1 *ec2.ModifyNetworkInterfaceAttributeInput) (*ec2.ModifyNetworkInterfaceAttributeOutput, error) {
// 	               panic("mock out the ModifyNetworkInterfaceAttribute method")
//             },
//             ModifyNetworkInterfaceAttributeRequestFunc: func(in1 *ec2.ModifyNetworkInterfaceAttributeInput) (*request.Request, *ec2.ModifyNetworkInterfaceAttributeOutput) {
// 	               panic("mock out the ModifyNetworkInterfaceAttributeRequest method")
//             },
//             ModifyNetworkInterfaceAttributeWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyNetworkInterfaceAttributeInput, in3 ...request.Option) (*ec2.ModifyNetworkInterfaceAttributeOutput, error) {
// 	               panic("mock out the ModifyNetworkInterfaceAttributeWithContext method")
//             },
//             ModifyReservedInstancesFunc: func(in1 *ec2.ModifyReservedInstancesInput) (*ec2.ModifyReservedInstancesOutput, error) {
// 	               panic("mock out the ModifyReservedInstances method")
//             },
//             ModifyReservedInstancesRequestFunc: func(in1 *ec2.ModifyReservedInstancesInput) (*request.Request, *ec2.ModifyReservedInstancesOutput) {
// 	               panic("mock out the ModifyReservedInstancesRequest method")
//             },
//             ModifyReservedInstancesWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyReservedInstancesInput, in3 ...request.Option) (*ec2.ModifyReservedInstancesOutput, error) {
// 	               panic("mock out the ModifyReservedInstancesWithContext method")
//             },
//             ModifySnapshotAttributeFunc: func(in1 *ec2.ModifySnapshotAttributeInput) (*ec2.ModifySnapshotAttributeOutput, error) {
// 	               panic("mock out the ModifySnapshotAttribute method")
//             },
//             ModifySnapshotAttributeRequestFunc: func(in1 *ec2.ModifySnapshotAttributeInput) (*request.Request, *ec2.ModifySnapshotAttributeOutput) {
// 	               panic("mock out the ModifySnapshotAttributeRequest method")
//             },
//             ModifySnapshotAttributeWithContextFunc: func(in1 context.Context, in2 *ec2.ModifySnapshotAttributeInput, in3 ...request.Option) (*ec2.ModifySnapshotAttributeOutput, error) {
// 	               panic("mock out the ModifySnapshotAttributeWithContext method")
//             },
//             ModifySpotFleetRequestFunc: func(in1 *ec2.ModifySpotFleetRequestInput) (*ec2.ModifySpotFleetRequestOutput, error) {
// 	               panic("mock out the ModifySpotFleetRequest method")
//             },
//             ModifySpotFleetRequestRequestFunc: func(in1 *ec2.ModifySpotFleetRequestInput) (*request.Request, *ec2.ModifySpotFleetRequestOutput) {
// 	               panic("mock out the ModifySpotFleetRequestRequest method")
//             },
//             ModifySpotFleetRequestWithContextFunc: func(in1 context.Context, in2 *ec2.ModifySpotFleetRequestInput, in3 ...request.Option) (*ec2.ModifySpotFleetRequestOutput, error) {
// 	               panic("mock out the ModifySpotFleetRequestWithContext method")
//             },
//             ModifySubnetAttributeFunc: func(in1 *ec2.ModifySubnetAttributeInput) (*ec2.ModifySubnetAttributeOutput, error) {
// 	               panic("mock out the ModifySubnetAttribute method")
//             },
//             ModifySubnetAttributeRequestFunc: func(in1 *ec2.ModifySubnetAttributeInput) (*request.Request, *ec2.ModifySubnetAttributeOutput) {
// 	               panic("mock out the ModifySubnetAttributeRequest method")
//             },
//             ModifySubnetAttributeWithContextFunc: func(in1 context.Context, in2 *ec2.ModifySubnetAttributeInput, in3 ...request.Option) (*ec2.ModifySubnetAttributeOutput, error) {
// 	               panic("mock out the ModifySubnetAttributeWithContext method")
//             },
//             ModifyTrafficMirrorFilterNetworkServicesFunc: func(in1 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput) (*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput, error) {
// 	               panic("mock out the ModifyTrafficMirrorFilterNetworkServices method")
//             },
//             ModifyTrafficMirrorFilterNetworkServicesRequestFunc: func(in1 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput) (*request.Request, *ec2.ModifyTrafficMirrorFilterNetworkServicesOutput) {
// 	               panic("mock out the ModifyTrafficMirrorFilterNetworkServicesRequest method")
//             },
//             ModifyTrafficMirrorFilterNetworkServicesWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput, in3 ...request.Option) (*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput, error) {
// 	               panic("mock out the ModifyTrafficMirrorFilterNetworkServicesWithContext method")
//             },
//             ModifyTrafficMirrorFilterRuleFunc: func(in1 *ec2.ModifyTrafficMirrorFilterRuleInput) (*ec2.ModifyTrafficMirrorFilterRuleOutput, error) {
// 	               panic("mock out the ModifyTrafficMirrorFilterRule method")
//             },
//             ModifyTrafficMirrorFilterRuleRequestFunc: func(in1 *ec2.ModifyTrafficMirrorFilterRuleInput) (*request.Request, *ec2.ModifyTrafficMirrorFilterRuleOutput) {
// 	               panic("mock out the ModifyTrafficMirrorFilterRuleRequest method")
//             },
//             ModifyTrafficMirrorFilterRuleWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyTrafficMirrorFilterRuleInput, in3 ...request.Option) (*ec2.ModifyTrafficMirrorFilterRuleOutput, error) {
// 	               panic("mock out the ModifyTrafficMirrorFilterRuleWithContext method")
//             },
//             ModifyTrafficMirrorSessionFunc: func(in1 *ec2.ModifyTrafficMirrorSessionInput) (*ec2.ModifyTrafficMirrorSessionOutput, error) {
// 	               panic("mock out the ModifyTrafficMirrorSession method")
//             },
//             ModifyTrafficMirrorSessionRequestFunc: func(in1 *ec2.ModifyTrafficMirrorSessionInput) (*request.Request, *ec2.ModifyTrafficMirrorSessionOutput) {
// 	               panic("mock out the ModifyTrafficMirrorSessionRequest method")
//             },
//             ModifyTrafficMirrorSessionWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyTrafficMirrorSessionInput, in3 ...request.Option) (*ec2.ModifyTrafficMirrorSessionOutput, error) {
// 	               panic("mock out the ModifyTrafficMirrorSessionWithContext method")
//             },
//             ModifyTransitGatewayVpcAttachmentFunc: func(in1 *ec2.ModifyTransitGatewayVpcAttachmentInput) (*ec2.ModifyTransitGatewayVpcAttachmentOutput, error) {
// 	               panic("mock out the ModifyTransitGatewayVpcAttachment method")
//             },
//             ModifyTransitGatewayVpcAttachmentRequestFunc: func(in1 *ec2.ModifyTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.ModifyTransitGatewayVpcAttachmentOutput) {
// 	               panic("mock out the ModifyTransitGatewayVpcAttachmentRequest method")
//             },
//             ModifyTransitGatewayVpcAttachmentWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyTransitGatewayVpcAttachmentInput, in3 ...request.Option) (*ec2.ModifyTransitGatewayVpcAttachmentOutput, error) {
// 	               panic("mock out the ModifyTransitGatewayVpcAttachmentWithContext method")
//             },
//             ModifyVolumeFunc: func(in1 *ec2.ModifyVolumeInput) (*ec2.ModifyVolumeOutput, error) {
// 	               panic("mock out the ModifyVolume method")
//             },
//             ModifyVolumeAttributeFunc: func(in1 *ec2.ModifyVolumeAttributeInput) (*ec2.ModifyVolumeAttributeOutput, error) {
// 	               panic("mock out the ModifyVolumeAttribute method")
//             },
//             ModifyVolumeAttributeRequestFunc: func(in1 *ec2.ModifyVolumeAttributeInput) (*request.Request, *ec2.ModifyVolumeAttributeOutput) {
// 	               panic("mock out the ModifyVolumeAttributeRequest method")
//             },
//             ModifyVolumeAttributeWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyVolumeAttributeInput, in3 ...request.Option) (*ec2.ModifyVolumeAttributeOutput, error) {
// 	               panic("mock out the ModifyVolumeAttributeWithContext method")
//             },
//             ModifyVolumeRequestFunc: func(in1 *ec2.ModifyVolumeInput) (*request.Request, *ec2.ModifyVolumeOutput) {
// 	               panic("mock out the ModifyVolumeRequest method")
//             },
//             ModifyVolumeWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyVolumeInput, in3 ...request.Option) (*ec2.ModifyVolumeOutput, error) {
// 	               panic("mock out the ModifyVolumeWithContext method")
//             },
//             ModifyVpcAttributeFunc: func(in1 *ec2.ModifyVpcAttributeInput) (*ec2.ModifyVpcAttributeOutput, error) {
// 	               panic("mock out the ModifyVpcAttribute method")
//             },
//             ModifyVpcAttributeRequestFunc: func(in1 *ec2.ModifyVpcAttributeInput) (*request.Request, *ec2.ModifyVpcAttributeOutput) {
// 	               panic("mock out the ModifyVpcAttributeRequest method")
//             },
//             ModifyVpcAttributeWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyVpcAttributeInput, in3 ...request.Option) (*ec2.ModifyVpcAttributeOutput, error) {
// 	               panic("mock out the ModifyVpcAttributeWithContext method")
//             },
//             ModifyVpcEndpointFunc: func(in1 *ec2.ModifyVpcEndpointInput) (*ec2.ModifyVpcEndpointOutput, error) {
// 	               panic("mock out the ModifyVpcEndpoint method")
//             },
//             ModifyVpcEndpointConnectionNotificationFunc: func(in1 *ec2.ModifyVpcEndpointConnectionNotificationInput) (*ec2.ModifyVpcEndpointConnectionNotificationOutput, error) {
// 	               panic("mock out the ModifyVpcEndpointConnectionNotification method")
//             },
//             ModifyVpcEndpointConnectionNotificationRequestFunc: func(in1 *ec2.ModifyVpcEndpointConnectionNotificationInput) (*request.Request, *ec2.ModifyVpcEndpointConnectionNotificationOutput) {
// 	               panic("mock out the ModifyVpcEndpointConnectionNotificationRequest method")
//             },
//             ModifyVpcEndpointConnectionNotificationWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyVpcEndpointConnectionNotificationInput, in3 ...request.Option) (*ec2.ModifyVpcEndpointConnectionNotificationOutput, error) {
// 	               panic("mock out the ModifyVpcEndpointConnectionNotificationWithContext method")
//             },
//             ModifyVpcEndpointRequestFunc: func(in1 *ec2.ModifyVpcEndpointInput) (*request.Request, *ec2.ModifyVpcEndpointOutput) {
// 	               panic("mock out the ModifyVpcEndpointRequest method")
//             },
//             ModifyVpcEndpointServiceConfigurationFunc: func(in1 *ec2.ModifyVpcEndpointServiceConfigurationInput) (*ec2.ModifyVpcEndpointServiceConfigurationOutput, error) {
// 	               panic("mock out the ModifyVpcEndpointServiceConfiguration method")
//             },
//             ModifyVpcEndpointServiceConfigurationRequestFunc: func(in1 *ec2.ModifyVpcEndpointServiceConfigurationInput) (*request.Request, *ec2.ModifyVpcEndpointServiceConfigurationOutput) {
// 	               panic("mock out the ModifyVpcEndpointServiceConfigurationRequest method")
//             },
//             ModifyVpcEndpointServiceConfigurationWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyVpcEndpointServiceConfigurationInput, in3 ...request.Option) (*ec2.ModifyVpcEndpointServiceConfigurationOutput, error) {
// 	               panic("mock out the ModifyVpcEndpointServiceConfigurationWithContext method")
//             },
//             ModifyVpcEndpointServicePermissionsFunc: func(in1 *ec2.ModifyVpcEndpointServicePermissionsInput) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error) {
// 	               panic("mock out the ModifyVpcEndpointServicePermissions method")
//             },
//             ModifyVpcEndpointServicePermissionsRequestFunc: func(in1 *ec2.ModifyVpcEndpointServicePermissionsInput) (*request.Request, *ec2.ModifyVpcEndpointServicePermissionsOutput) {
// 	               panic("mock out the ModifyVpcEndpointServicePermissionsRequest method")
//             },
//             ModifyVpcEndpointServicePermissionsWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyVpcEndpointServicePermissionsInput, in3 ...request.Option) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error) {
// 	               panic("mock out the ModifyVpcEndpointServicePermissionsWithContext method")
//             },
//             ModifyVpcEndpointWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyVpcEndpointInput, in3 ...request.Option) (*ec2.ModifyVpcEndpointOutput, error) {
// 	               panic("mock out the ModifyVpcEndpointWithContext method")
//             },
//             ModifyVpcPeeringConnectionOptionsFunc: func(in1 *ec2.ModifyVpcPeeringConnectionOptionsInput) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error) {
// 	               panic("mock out the ModifyVpcPeeringConnectionOptions method")
//             },
//             ModifyVpcPeeringConnectionOptionsRequestFunc: func(in1 *ec2.ModifyVpcPeeringConnectionOptionsInput) (*request.Request, *ec2.ModifyVpcPeeringConnectionOptionsOutput) {
// 	               panic("mock out the ModifyVpcPeeringConnectionOptionsRequest method")
//             },
//             ModifyVpcPeeringConnectionOptionsWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyVpcPeeringConnectionOptionsInput, in3 ...request.Option) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error) {
// 	               panic("mock out the ModifyVpcPeeringConnectionOptionsWithContext method")
//             },
//             ModifyVpcTenancyFunc: func(in1 *ec2.ModifyVpcTenancyInput) (*ec2.ModifyVpcTenancyOutput, error) {
// 	               panic("mock out the ModifyVpcTenancy method")
//             },
//             ModifyVpcTenancyRequestFunc: func(in1 *ec2.ModifyVpcTenancyInput) (*request.Request, *ec2.ModifyVpcTenancyOutput) {
// 	               panic("mock out the ModifyVpcTenancyRequest method")
//             },
//             ModifyVpcTenancyWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyVpcTenancyInput, in3 ...request.Option) (*ec2.ModifyVpcTenancyOutput, error) {
// 	               panic("mock out the ModifyVpcTenancyWithContext method")
//             },
//             ModifyVpnConnectionFunc: func(in1 *ec2.ModifyVpnConnectionInput) (*ec2.ModifyVpnConnectionOutput, error) {
// 	               panic("mock out the ModifyVpnConnection method")
//             },
//             ModifyVpnConnectionRequestFunc: func(in1 *ec2.ModifyVpnConnectionInput) (*request.Request, *ec2.ModifyVpnConnectionOutput) {
// 	               panic("mock out the ModifyVpnConnectionRequest method")
//             },
//             ModifyVpnConnectionWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyVpnConnectionInput, in3 ...request.Option) (*ec2.ModifyVpnConnectionOutput, error) {
// 	               panic("mock out the ModifyVpnConnectionWithContext method")
//             },
//             ModifyVpnTunnelCertificateFunc: func(in1 *ec2.ModifyVpnTunnelCertificateInput) (*ec2.ModifyVpnTunnelCertificateOutput, error) {
// 	               panic("mock out the ModifyVpnTunnelCertificate method")
//             },
//             ModifyVpnTunnelCertificateRequestFunc: func(in1 *ec2.ModifyVpnTunnelCertificateInput) (*request.Request, *ec2.ModifyVpnTunnelCertificateOutput) {
// 	               panic("mock out the ModifyVpnTunnelCertificateRequest method")
//             },
//             ModifyVpnTunnelCertificateWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyVpnTunnelCertificateInput, in3 ...request.Option) (*ec2.ModifyVpnTunnelCertificateOutput, error) {
// 	               panic("mock out the ModifyVpnTunnelCertificateWithContext method")
//             },
//             ModifyVpnTunnelOptionsFunc: func(in1 *ec2.ModifyVpnTunnelOptionsInput) (*ec2.ModifyVpnTunnelOptionsOutput, error) {
// 	               panic("mock out the ModifyVpnTunnelOptions method")
//             },
//             ModifyVpnTunnelOptionsRequestFunc: func(in1 *ec2.ModifyVpnTunnelOptionsInput) (*request.Request, *ec2.ModifyVpnTunnelOptionsOutput) {
// 	               panic("mock out the ModifyVpnTunnelOptionsRequest method")
//             },
//             ModifyVpnTunnelOptionsWithContextFunc: func(in1 context.Context, in2 *ec2.ModifyVpnTunnelOptionsInput, in3 ...request.Option) (*ec2.ModifyVpnTunnelOptionsOutput, error) {
// 	               panic("mock out the ModifyVpnTunnelOptionsWithContext method")
//             },
//             MonitorInstancesFunc: func(in1 *ec2.MonitorInstancesInput) (*ec2.MonitorInstancesOutput, error) {
// 	               panic("mock out the MonitorInstances method")
//             },
//             MonitorInstancesRequestFunc: func(in1 *ec2.MonitorInstancesInput) (*request.Request, *ec2.MonitorInstancesOutput) {
// 	               panic("mock out the MonitorInstancesRequest method")
//             },
//             MonitorInstancesWithContextFunc: func(in1 context.Context, in2 *ec2.MonitorInstancesInput, in3 ...request.Option) (*ec2.MonitorInstancesOutput, error) {
// 	               panic("mock out the MonitorInstancesWithContext method")
//             },
//             MoveAddressToVpcFunc: func(in1 *ec2.MoveAddressToVpcInput) (*ec2.MoveAddressToVpcOutput, error) {
// 	               panic("mock out the MoveAddressToVpc method")
//             },
//             MoveAddressToVpcRequestFunc: func(in1 *ec2.MoveAddressToVpcInput) (*request.Request, *ec2.MoveAddressToVpcOutput) {
// 	               panic("mock out the MoveAddressToVpcRequest method")
//             },
//             MoveAddressToVpcWithContextFunc: func(in1 context.Context, in2 *ec2.MoveAddressToVpcInput, in3 ...request.Option) (*ec2.MoveAddressToVpcOutput, error) {
// 	               panic("mock out the MoveAddressToVpcWithContext method")
//             },
//             ProvisionByoipCidrFunc: func(in1 *ec2.ProvisionByoipCidrInput) (*ec2.ProvisionByoipCidrOutput, error) {
// 	               panic("mock out the ProvisionByoipCidr method")
//             },
//             ProvisionByoipCidrRequestFunc: func(in1 *ec2.ProvisionByoipCidrInput) (*request.Request, *ec2.ProvisionByoipCidrOutput) {
// 	               panic("mock out the ProvisionByoipCidrRequest method")
//             },
//             ProvisionByoipCidrWithContextFunc: func(in1 context.Context, in2 *ec2.ProvisionByoipCidrInput, in3 ...request.Option) (*ec2.ProvisionByoipCidrOutput, error) {
// 	               panic("mock out the ProvisionByoipCidrWithContext method")
//             },
//             PurchaseHostReservationFunc: func(in1 *ec2.PurchaseHostReservationInput) (*ec2.PurchaseHostReservationOutput, error) {
// 	               panic("mock out the PurchaseHostReservation method")
//             },
//             PurchaseHostReservationRequestFunc: func(in1 *ec2.PurchaseHostReservationInput) (*request.Request, *ec2.PurchaseHostReservationOutput) {
// 	               panic("mock out the PurchaseHostReservationRequest method")
//             },
//             PurchaseHostReservationWithContextFunc: func(in1 context.Context, in2 *ec2.PurchaseHostReservationInput, in3 ...request.Option) (*ec2.PurchaseHostReservationOutput, error) {
// 	               panic("mock out the PurchaseHostReservationWithContext method")
//             },
//             PurchaseReservedInstancesOfferingFunc: func(in1 *ec2.PurchaseReservedInstancesOfferingInput) (*ec2.PurchaseReservedInstancesOfferingOutput, error) {
// 	               panic("mock out the PurchaseReservedInstancesOffering method")
//             },
//             PurchaseReservedInstancesOfferingRequestFunc: func(in1 *ec2.PurchaseReservedInstancesOfferingInput) (*request.Request, *ec2.PurchaseReservedInstancesOfferingOutput) {
// 	               panic("mock out the PurchaseReservedInstancesOfferingRequest method")
//             },
//             PurchaseReservedInstancesOfferingWithContextFunc: func(in1 context.Context, in2 *ec2.PurchaseReservedInstancesOfferingInput, in3 ...request.Option) (*ec2.PurchaseReservedInstancesOfferingOutput, error) {
// 	               panic("mock out the PurchaseReservedInstancesOfferingWithContext method")
//             },
//             PurchaseScheduledInstancesFunc: func(in1 *ec2.PurchaseScheduledInstancesInput) (*ec2.PurchaseScheduledInstancesOutput, error) {
// 	               panic("mock out the PurchaseScheduledInstances method")
//             },
//             PurchaseScheduledInstancesRequestFunc: func(in1 *ec2.PurchaseScheduledInstancesInput) (*request.Request, *ec2.PurchaseScheduledInstancesOutput) {
// 	               panic("mock out the PurchaseScheduledInstancesRequest method")
//             },
//             PurchaseScheduledInstancesWithContextFunc: func(in1 context.Context, in2 *ec2.PurchaseScheduledInstancesInput, in3 ...request.Option) (*ec2.PurchaseScheduledInstancesOutput, error) {
// 	               panic("mock out the PurchaseScheduledInstancesWithContext method")
//             },
//             RebootInstancesFunc: func(in1 *ec2.RebootInstancesInput) (*ec2.RebootInstancesOutput, error) {
// 	               panic("mock out the RebootInstances method")
//             },
//             RebootInstancesRequestFunc: func(in1 *ec2.RebootInstancesInput) (*request.Request, *ec2.RebootInstancesOutput) {
// 	               panic("mock out the RebootInstancesRequest method")
//             },
//             RebootInstancesWithContextFunc: func(in1 context.Context, in2 *ec2.RebootInstancesInput, in3 ...request.Option) (*ec2.RebootInstancesOutput, error) {
// 	               panic("mock out the RebootInstancesWithContext method")
//             },
//             RegisterImageFunc: func(in1 *ec2.RegisterImageInput) (*ec2.RegisterImageOutput, error) {
// 	               panic("mock out the RegisterImage method")
//             },
//             RegisterImageRequestFunc: func(in1 *ec2.RegisterImageInput) (*request.Request, *ec2.RegisterImageOutput) {
// 	               panic("mock out the RegisterImageRequest method")
//             },
//             RegisterImageWithContextFunc: func(in1 context.Context, in2 *ec2.RegisterImageInput, in3 ...request.Option) (*ec2.RegisterImageOutput, error) {
// 	               panic("mock out the RegisterImageWithContext method")
//             },
//             RegisterTransitGatewayMulticastGroupMembersFunc: func(in1 *ec2.RegisterTransitGatewayMulticastGroupMembersInput) (*ec2.RegisterTransitGatewayMulticastGroupMembersOutput, error) {
// 	               panic("mock out the RegisterTransitGatewayMulticastGroupMembers method")
//             },
//             RegisterTransitGatewayMulticastGroupMembersRequestFunc: func(in1 *ec2.RegisterTransitGatewayMulticastGroupMembersInput) (*request.Request, *ec2.RegisterTransitGatewayMulticastGroupMembersOutput) {
// 	               panic("mock out the RegisterTransitGatewayMulticastGroupMembersRequest method")
//             },
//             RegisterTransitGatewayMulticastGroupMembersWithContextFunc: func(in1 context.Context, in2 *ec2.RegisterTransitGatewayMulticastGroupMembersInput, in3 ...request.Option) (*ec2.RegisterTransitGatewayMulticastGroupMembersOutput, error) {
// 	               panic("mock out the RegisterTransitGatewayMulticastGroupMembersWithContext method")
//             },
//             RegisterTransitGatewayMulticastGroupSourcesFunc: func(in1 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput) (*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput, error) {
// 	               panic("mock out the RegisterTransitGatewayMulticastGroupSources method")
//             },
//             RegisterTransitGatewayMulticastGroupSourcesRequestFunc: func(in1 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput) (*request.Request, *ec2.RegisterTransitGatewayMulticastGroupSourcesOutput) {
// 	               panic("mock out the RegisterTransitGatewayMulticastGroupSourcesRequest method")
//             },
//             RegisterTransitGatewayMulticastGroupSourcesWithContextFunc: func(in1 context.Context, in2 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput, in3 ...request.Option) (*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput, error) {
// 	               panic("mock out the RegisterTransitGatewayMulticastGroupSourcesWithContext method")
//             },
//             RejectTransitGatewayPeeringAttachmentFunc: func(in1 *ec2.RejectTransitGatewayPeeringAttachmentInput) (*ec2.RejectTransitGatewayPeeringAttachmentOutput, error) {
// 	               panic("mock out the RejectTransitGatewayPeeringAttachment method")
//             },
//             RejectTransitGatewayPeeringAttachmentRequestFunc: func(in1 *ec2.RejectTransitGatewayPeeringAttachmentInput) (*request.Request, *ec2.RejectTransitGatewayPeeringAttachmentOutput) {
// 	               panic("mock out the RejectTransitGatewayPeeringAttachmentRequest method")
//             },
//             RejectTransitGatewayPeeringAttachmentWithContextFunc: func(in1 context.Context, in2 *ec2.RejectTransitGatewayPeeringAttachmentInput, in3 ...request.Option) (*ec2.RejectTransitGatewayPeeringAttachmentOutput, error) {
// 	               panic("mock out the RejectTransitGatewayPeeringAttachmentWithContext method")
//             },
//             RejectTransitGatewayVpcAttachmentFunc: func(in1 *ec2.RejectTransitGatewayVpcAttachmentInput) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error) {
// 	               panic("mock out the RejectTransitGatewayVpcAttachment method")
//             },
//             RejectTransitGatewayVpcAttachmentRequestFunc: func(in1 *ec2.RejectTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.RejectTransitGatewayVpcAttachmentOutput) {
// 	               panic("mock out the RejectTransitGatewayVpcAttachmentRequest method")
//             },
//             RejectTransitGatewayVpcAttachmentWithContextFunc: func(in1 context.Context, in2 *ec2.RejectTransitGatewayVpcAttachmentInput, in3 ...request.Option) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error) {
// 	               panic("mock out the RejectTransitGatewayVpcAttachmentWithContext method")
//             },
//             RejectVpcEndpointConnectionsFunc: func(in1 *ec2.RejectVpcEndpointConnectionsInput) (*ec2.RejectVpcEndpointConnectionsOutput, error) {
// 	               panic("mock out the RejectVpcEndpointConnections method")
//             },
//             RejectVpcEndpointConnectionsRequestFunc: func(in1 *ec2.RejectVpcEndpointConnectionsInput) (*request.Request, *ec2.RejectVpcEndpointConnectionsOutput) {
// 	               panic("mock out the RejectVpcEndpointConnectionsRequest method")
//             },
//             RejectVpcEndpointConnectionsWithContextFunc: func(in1 context.Context, in2 *ec2.RejectVpcEndpointConnectionsInput, in3 ...request.Option) (*ec2.RejectVpcEndpointConnectionsOutput, error) {
// 	               panic("mock out the RejectVpcEndpointConnectionsWithContext method")
//             },
//             RejectVpcPeeringConnectionFunc: func(in1 *ec2.RejectVpcPeeringConnectionInput) (*ec2.RejectVpcPeeringConnectionOutput, error) {
// 	               panic("mock out the RejectVpcPeeringConnection method")
//             },
//             RejectVpcPeeringConnectionRequestFunc: func(in1 *ec2.RejectVpcPeeringConnectionInput) (*request.Request, *ec2.RejectVpcPeeringConnectionOutput) {
// 	               panic("mock out the RejectVpcPeeringConnectionRequest method")
//             },
//             RejectVpcPeeringConnectionWithContextFunc: func(in1 context.Context, in2 *ec2.RejectVpcPeeringConnectionInput, in3 ...request.Option) (*ec2.RejectVpcPeeringConnectionOutput, error) {
// 	               panic("mock out the RejectVpcPeeringConnectionWithContext method")
//             },
//             ReleaseAddressFunc: func(in1 *ec2.ReleaseAddressInput) (*ec2.ReleaseAddressOutput, error) {
// 	               panic("mock out the ReleaseAddress method")
//             },
//             ReleaseAddressRequestFunc: func(in1 *ec2.ReleaseAddressInput) (*request.Request, *ec2.ReleaseAddressOutput) {
// 	               panic("mock out the ReleaseAddressRequest method")
//             },
//             ReleaseAddressWithContextFunc: func(in1 context.Context, in2 *ec2.ReleaseAddressInput, in3 ...request.Option) (*ec2.ReleaseAddressOutput, error) {
// 	               panic("mock out the ReleaseAddressWithContext method")
//             },
//             ReleaseHostsFunc: func(in1 *ec2.ReleaseHostsInput) (*ec2.ReleaseHostsOutput, error) {
// 	               panic("mock out the ReleaseHosts method")
//             },
//             ReleaseHostsRequestFunc: func(in1 *ec2.ReleaseHostsInput) (*request.Request, *ec2.ReleaseHostsOutput) {
// 	               panic("mock out the ReleaseHostsRequest method")
//             },
//             ReleaseHostsWithContextFunc: func(in1 context.Context, in2 *ec2.ReleaseHostsInput, in3 ...request.Option) (*ec2.ReleaseHostsOutput, error) {
// 	               panic("mock out the ReleaseHostsWithContext method")
//             },
//             ReplaceIamInstanceProfileAssociationFunc: func(in1 *ec2.ReplaceIamInstanceProfileAssociationInput) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error) {
// 	               panic("mock out the ReplaceIamInstanceProfileAssociation method")
//             },
//             ReplaceIamInstanceProfileAssociationRequestFunc: func(in1 *ec2.ReplaceIamInstanceProfileAssociationInput) (*request.Request, *ec2.ReplaceIamInstanceProfileAssociationOutput) {
// 	               panic("mock out the ReplaceIamInstanceProfileAssociationRequest method")
//             },
//             ReplaceIamInstanceProfileAssociationWithContextFunc: func(in1 context.Context, in2 *ec2.ReplaceIamInstanceProfileAssociationInput, in3 ...request.Option) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error) {
// 	               panic("mock out the ReplaceIamInstanceProfileAssociationWithContext method")
//             },
//             ReplaceNetworkAclAssociationFunc: func(in1 *ec2.ReplaceNetworkAclAssociationInput) (*ec2.ReplaceNetworkAclAssociationOutput, error) {
// 	               panic("mock out the ReplaceNetworkAclAssociation method")
//             },
//             ReplaceNetworkAclAssociationRequestFunc: func(in1 *ec2.ReplaceNetworkAclAssociationInput) (*request.Request, *ec2.ReplaceNetworkAclAssociationOutput) {
// 	               panic("mock out the ReplaceNetworkAclAssociationRequest method")
//             },
//             ReplaceNetworkAclAssociationWithContextFunc: func(in1 context.Context, in2 *ec2.ReplaceNetworkAclAssociationInput, in3 ...request.Option) (*ec2.ReplaceNetworkAclAssociationOutput, error) {
// 	               panic("mock out the ReplaceNetworkAclAssociationWithContext method")
//             },
//             ReplaceNetworkAclEntryFunc: func(in1 *ec2.ReplaceNetworkAclEntryInput) (*ec2.ReplaceNetworkAclEntryOutput, error) {
// 	               panic("mock out the ReplaceNetworkAclEntry method")
//             },
//             ReplaceNetworkAclEntryRequestFunc: func(in1 *ec2.ReplaceNetworkAclEntryInput) (*request.Request, *ec2.ReplaceNetworkAclEntryOutput) {
// 	               panic("mock out the ReplaceNetworkAclEntryRequest method")
//             },
//             ReplaceNetworkAclEntryWithContextFunc: func(in1 context.Context, in2 *ec2.ReplaceNetworkAclEntryInput, in3 ...request.Option) (*ec2.ReplaceNetworkAclEntryOutput, error) {
// 	               panic("mock out the ReplaceNetworkAclEntryWithContext method")
//             },
//             ReplaceRouteFunc: func(in1 *ec2.ReplaceRouteInput) (*ec2.ReplaceRouteOutput, error) {
// 	               panic("mock out the ReplaceRoute method")
//             },
//             ReplaceRouteRequestFunc: func(in1 *ec2.ReplaceRouteInput) (*request.Request, *ec2.ReplaceRouteOutput) {
// 	               panic("mock out the ReplaceRouteRequest method")
//             },
//             ReplaceRouteTableAssociationFunc: func(in1 *ec2.ReplaceRouteTableAssociationInput) (*ec2.ReplaceRouteTableAssociationOutput, error) {
// 	               panic("mock out the ReplaceRouteTableAssociation method")
//             },
//             ReplaceRouteTableAssociationRequestFunc: func(in1 *ec2.ReplaceRouteTableAssociationInput) (*request.Request, *ec2.ReplaceRouteTableAssociationOutput) {
// 	               panic("mock out the ReplaceRouteTableAssociationRequest method")
//             },
//             ReplaceRouteTableAssociationWithContextFunc: func(in1 context.Context, in2 *ec2.ReplaceRouteTableAssociationInput, in3 ...request.Option) (*ec2.ReplaceRouteTableAssociationOutput, error) {
// 	               panic("mock out the ReplaceRouteTableAssociationWithContext method")
//             },
//             ReplaceRouteWithContextFunc: func(in1 context.Context, in2 *ec2.ReplaceRouteInput, in3 ...request.Option) (*ec2.ReplaceRouteOutput, error) {
// 	               panic("mock out the ReplaceRouteWithContext method")
//             },
//             ReplaceTransitGatewayRouteFunc: func(in1 *ec2.ReplaceTransitGatewayRouteInput) (*ec2.ReplaceTransitGatewayRouteOutput, error) {
// 	               panic("mock out the ReplaceTransitGatewayRoute method")
//             },
//             ReplaceTransitGatewayRouteRequestFunc: func(in1 *ec2.ReplaceTransitGatewayRouteInput) (*request.Request, *ec2.ReplaceTransitGatewayRouteOutput) {
// 	               panic("mock out the ReplaceTransitGatewayRouteRequest method")
//             },
//             ReplaceTransitGatewayRouteWithContextFunc: func(in1 context.Context, in2 *ec2.ReplaceTransitGatewayRouteInput, in3 ...request.Option) (*ec2.ReplaceTransitGatewayRouteOutput, error) {
// 	               panic("mock out the ReplaceTransitGatewayRouteWithContext method")
//             },
//             ReportInstanceStatusFunc: func(in1 *ec2.ReportInstanceStatusInput) (*ec2.ReportInstanceStatusOutput, error) {
// 	               panic("mock out the ReportInstanceStatus method")
//             },
//             ReportInstanceStatusRequestFunc: func(in1 *ec2.ReportInstanceStatusInput) (*request.Request, *ec2.ReportInstanceStatusOutput) {
// 	               panic("mock out the ReportInstanceStatusRequest method")
//             },
//             ReportInstanceStatusWithContextFunc: func(in1 context.Context, in2 *ec2.ReportInstanceStatusInput, in3 ...request.Option) (*ec2.ReportInstanceStatusOutput, error) {
// 	               panic("mock out the ReportInstanceStatusWithContext method")
//             },
//             RequestSpotFleetFunc: func(in1 *ec2.RequestSpotFleetInput) (*ec2.RequestSpotFleetOutput, error) {
// 	               panic("mock out the RequestSpotFleet method")
//             },
//             RequestSpotFleetRequestFunc: func(in1 *ec2.RequestSpotFleetInput) (*request.Request, *ec2.RequestSpotFleetOutput) {
// 	               panic("mock out the RequestSpotFleetRequest method")
//             },
//             RequestSpotFleetWithContextFunc: func(in1 context.Context, in2 *ec2.RequestSpotFleetInput, in3 ...request.Option) (*ec2.RequestSpotFleetOutput, error) {
// 	               panic("mock out the RequestSpotFleetWithContext method")
//             },
//             RequestSpotInstancesFunc: func(in1 *ec2.RequestSpotInstancesInput) (*ec2.RequestSpotInstancesOutput, error) {
// 	               panic("mock out the RequestSpotInstances method")
//             },
//             RequestSpotInstancesRequestFunc: func(in1 *ec2.RequestSpotInstancesInput) (*request.Request, *ec2.RequestSpotInstancesOutput) {
// 	               panic("mock out the RequestSpotInstancesRequest method")
//             },
//             RequestSpotInstancesWithContextFunc: func(in1 context.Context, in2 *ec2.RequestSpotInstancesInput, in3 ...request.Option) (*ec2.RequestSpotInstancesOutput, error) {
// 	               panic("mock out the RequestSpotInstancesWithContext method")
//             },
//             ResetEbsDefaultKmsKeyIdFunc: func(in1 *ec2.ResetEbsDefaultKmsKeyIdInput) (*ec2.ResetEbsDefaultKmsKeyIdOutput, error) {
// 	               panic("mock out the ResetEbsDefaultKmsKeyId method")
//             },
//             ResetEbsDefaultKmsKeyIdRequestFunc: func(in1 *ec2.ResetEbsDefaultKmsKeyIdInput) (*request.Request, *ec2.ResetEbsDefaultKmsKeyIdOutput) {
// 	               panic("mock out the ResetEbsDefaultKmsKeyIdRequest method")
//             },
//             ResetEbsDefaultKmsKeyIdWithContextFunc: func(in1 context.Context, in2 *ec2.ResetEbsDefaultKmsKeyIdInput, in3 ...request.Option) (*ec2.ResetEbsDefaultKmsKeyIdOutput, error) {
// 	               panic("mock out the ResetEbsDefaultKmsKeyIdWithContext method")
//             },
//             ResetFpgaImageAttributeFunc: func(in1 *ec2.ResetFpgaImageAttributeInput) (*ec2.ResetFpgaImageAttributeOutput, error) {
// 	               panic("mock out the ResetFpgaImageAttribute method")
//             },
//             ResetFpgaImageAttributeRequestFunc: func(in1 *ec2.ResetFpgaImageAttributeInput) (*request.Request, *ec2.ResetFpgaImageAttributeOutput) {
// 	               panic("mock out the ResetFpgaImageAttributeRequest method")
//             },
//             ResetFpgaImageAttributeWithContextFunc: func(in1 context.Context, in2 *ec2.ResetFpgaImageAttributeInput, in3 ...request.Option) (*ec2.ResetFpgaImageAttributeOutput, error) {
// 	               panic("mock out the ResetFpgaImageAttributeWithContext method")
//             },
//             ResetImageAttributeFunc: func(in1 *ec2.ResetImageAttributeInput) (*ec2.ResetImageAttributeOutput, error) {
// 	               panic("mock out the ResetImageAttribute method")
//             },
//             ResetImageAttributeRequestFunc: func(in1 *ec2.ResetImageAttributeInput) (*request.Request, *ec2.ResetImageAttributeOutput) {
// 	               panic("mock out the ResetImageAttributeRequest method")
//             },
//             ResetImageAttributeWithContextFunc: func(in1 context.Context, in2 *ec2.ResetImageAttributeInput, in3 ...request.Option) (*ec2.ResetImageAttributeOutput, error) {
// 	               panic("mock out the ResetImageAttributeWithContext method")
//             },
//             ResetInstanceAttributeFunc: func(in1 *ec2.ResetInstanceAttributeInput) (*ec2.ResetInstanceAttributeOutput, error) {
// 	               panic("mock out the ResetInstanceAttribute method")
//             },
//             ResetInstanceAttributeRequestFunc: func(in1 *ec2.ResetInstanceAttributeInput) (*request.Request, *ec2.ResetInstanceAttributeOutput) {
// 	               panic("mock out the ResetInstanceAttributeRequest method")
//             },
//             ResetInstanceAttributeWithContextFunc: func(in1 context.Context, in2 *ec2.ResetInstanceAttributeInput, in3 ...request.Option) (*ec2.ResetInstanceAttributeOutput, error) {
// 	               panic("mock out the ResetInstanceAttributeWithContext method")
//             },
//             ResetNetworkInterfaceAttributeFunc: func(in1 *ec2.ResetNetworkInterfaceAttributeInput) (*ec2.ResetNetworkInterfaceAttributeOutput, error) {
// 	               panic("mock out the ResetNetworkInterfaceAttribute method")
//             },
//             ResetNetworkInterfaceAttributeRequestFunc: func(in1 *ec2.ResetNetworkInterfaceAttributeInput) (*request.Request, *ec2.ResetNetworkInterfaceAttributeOutput) {
// 	               panic("mock out the ResetNetworkInterfaceAttributeRequest method")
//             },
//             ResetNetworkInterfaceAttributeWithContextFunc: func(in1 context.Context, in2 *ec2.ResetNetworkInterfaceAttributeInput, in3 ...request.Option) (*ec2.ResetNetworkInterfaceAttributeOutput, error) {
// 	               panic("mock out the ResetNetworkInterfaceAttributeWithContext method")
//             },
//             ResetSnapshotAttributeFunc: func(in1 *ec2.ResetSnapshotAttributeInput) (*ec2.ResetSnapshotAttributeOutput, error) {
// 	               panic("mock out the ResetSnapshotAttribute method")
//             },
//             ResetSnapshotAttributeRequestFunc: func(in1 *ec2.ResetSnapshotAttributeInput) (*request.Request, *ec2.ResetSnapshotAttributeOutput) {
// 	               panic("mock out the ResetSnapshotAttributeRequest method")
//             },
//             ResetSnapshotAttributeWithContextFunc: func(in1 context.Context, in2 *ec2.ResetSnapshotAttributeInput, in3 ...request.Option) (*ec2.ResetSnapshotAttributeOutput, error) {
// 	               panic("mock out the ResetSnapshotAttributeWithContext method")
//             },
//             RestoreAddressToClassicFunc: func(in1 *ec2.RestoreAddressToClassicInput) (*ec2.RestoreAddressToClassicOutput, error) {
// 	               panic("mock out the RestoreAddressToClassic method")
//             },
//             RestoreAddressToClassicRequestFunc: func(in1 *ec2.RestoreAddressToClassicInput) (*request.Request, *ec2.RestoreAddressToClassicOutput) {
// 	               panic("mock out the RestoreAddressToClassicRequest method")
//             },
//             RestoreAddressToClassicWithContextFunc: func(in1 context.Context, in2 *ec2.RestoreAddressToClassicInput, in3 ...request.Option) (*ec2.RestoreAddressToClassicOutput, error) {
// 	               panic("mock out the RestoreAddressToClassicWithContext method")
//             },
//             RevokeClientVpnIngressFunc: func(in1 *ec2.RevokeClientVpnIngressInput) (*ec2.RevokeClientVpnIngressOutput, error) {
// 	               panic("mock out the RevokeClientVpnIngress method")
//             },
//             RevokeClientVpnIngressRequestFunc: func(in1 *ec2.RevokeClientVpnIngressInput) (*request.Request, *ec2.RevokeClientVpnIngressOutput) {
// 	               panic("mock out the RevokeClientVpnIngressRequest method")
//             },
//             RevokeClientVpnIngressWithContextFunc: func(in1 context.Context, in2 *ec2.RevokeClientVpnIngressInput, in3 ...request.Option) (*ec2.RevokeClientVpnIngressOutput, error) {
// 	               panic("mock out the RevokeClientVpnIngressWithContext method")
//             },
//             RevokeSecurityGroupEgressFunc: func(in1 *ec2.RevokeSecurityGroupEgressInput) (*ec2.RevokeSecurityGroupEgressOutput, error) {
// 	               panic("mock out the RevokeSecurityGroupEgress method")
//             },
//             RevokeSecurityGroupEgressRequestFunc: func(in1 *ec2.RevokeSecurityGroupEgressInput) (*request.Request, *ec2.RevokeSecurityGroupEgressOutput) {
// 	               panic("mock out the RevokeSecurityGroupEgressRequest method")
//             },
//             RevokeSecurityGroupEgressWithContextFunc: func(in1 context.Context, in2 *ec2.RevokeSecurityGroupEgressInput, in3 ...request.Option) (*ec2.RevokeSecurityGroupEgressOutput, error) {
// 	               panic("mock out the RevokeSecurityGroupEgressWithContext method")
//             },
//             RevokeSecurityGroupIngressFunc: func(in1 *ec2.RevokeSecurityGroupIngressInput) (*ec2.RevokeSecurityGroupIngressOutput, error) {
// 	               panic("mock out the RevokeSecurityGroupIngress method")
//             },
//             RevokeSecurityGroupIngressRequestFunc: func(in1 *ec2.RevokeSecurityGroupIngressInput) (*request.Request, *ec2.RevokeSecurityGroupIngressOutput) {
// 	               panic("mock out the RevokeSecurityGroupIngressRequest method")
//             },
//             RevokeSecurityGroupIngressWithContextFunc: func(in1 context.Context, in2 *ec2.RevokeSecurityGroupIngressInput, in3 ...request.Option) (*ec2.RevokeSecurityGroupIngressOutput, error) {
// 	               panic("mock out the RevokeSecurityGroupIngressWithContext method")
//             },
//             RunInstancesFunc: func(in1 *ec2.RunInstancesInput) (*ec2.Reservation, error) {
// 	               panic("mock out the RunInstances method")
//             },
//             RunInstancesRequestFunc: func(in1 *ec2.RunInstancesInput) (*request.Request, *ec2.Reservation) {
// 	               panic("mock out the RunInstancesRequest method")
//             },
//             RunInstancesWithContextFunc: func(in1 context.Context, in2 *ec2.RunInstancesInput, in3 ...request.Option) (*ec2.Reservation, error) {
// 	               panic("mock out the RunInstancesWithContext method")
//             },
//             RunScheduledInstancesFunc: func(in1 *ec2.RunScheduledInstancesInput) (*ec2.RunScheduledInstancesOutput, error) {
// 	               panic("mock out the RunScheduledInstances method")
//             },
//             RunScheduledInstancesRequestFunc: func(in1 *ec2.RunScheduledInstancesInput) (*request.Request, *ec2.RunScheduledInstancesOutput) {
// 	               panic("mock out the RunScheduledInstancesRequest method")
//             },
//             RunScheduledInstancesWithContextFunc: func(in1 context.Context, in2 *ec2.RunScheduledInstancesInput, in3 ...request.Option) (*ec2.RunScheduledInstancesOutput, error) {
// 	               panic("mock out the RunScheduledInstancesWithContext method")
//             },
//             SearchLocalGatewayRoutesFunc: func(in1 *ec2.SearchLocalGatewayRoutesInput) (*ec2.SearchLocalGatewayRoutesOutput, error) {
// 	               panic("mock out the SearchLocalGatewayRoutes method")
//             },
//             SearchLocalGatewayRoutesRequestFunc: func(in1 *ec2.SearchLocalGatewayRoutesInput) (*request.Request, *ec2.SearchLocalGatewayRoutesOutput) {
// 	               panic("mock out the SearchLocalGatewayRoutesRequest method")
//             },
//             SearchLocalGatewayRoutesWithContextFunc: func(in1 context.Context, in2 *ec2.SearchLocalGatewayRoutesInput, in3 ...request.Option) (*ec2.SearchLocalGatewayRoutesOutput, error) {
// 	               panic("mock out the SearchLocalGatewayRoutesWithContext method")
//             },
//             SearchTransitGatewayMulticastGroupsFunc: func(in1 *ec2.SearchTransitGatewayMulticastGroupsInput) (*ec2.SearchTransitGatewayMulticastGroupsOutput, error) {
// 	               panic("mock out the SearchTransitGatewayMulticastGroups method")
//             },
//             SearchTransitGatewayMulticastGroupsRequestFunc: func(in1 *ec2.SearchTransitGatewayMulticastGroupsInput) (*request.Request, *ec2.SearchTransitGatewayMulticastGroupsOutput) {
// 	               panic("mock out the SearchTransitGatewayMulticastGroupsRequest method")
//             },
//             SearchTransitGatewayMulticastGroupsWithContextFunc: func(in1 context.Context, in2 *ec2.SearchTransitGatewayMulticastGroupsInput, in3 ...request.Option) (*ec2.SearchTransitGatewayMulticastGroupsOutput, error) {
// 	               panic("mock out the SearchTransitGatewayMulticastGroupsWithContext method")
//             },
//             SearchTransitGatewayRoutesFunc: func(in1 *ec2.SearchTransitGatewayRoutesInput) (*ec2.SearchTransitGatewayRoutesOutput, error) {
// 	               panic("mock out the SearchTransitGatewayRoutes method")
//             },
//             SearchTransitGatewayRoutesRequestFunc: func(in1 *ec2.SearchTransitGatewayRoutesInput) (*request.Request, *ec2.SearchTransitGatewayRoutesOutput) {
// 	               panic("mock out the SearchTransitGatewayRoutesRequest method")
//             },
//             SearchTransitGatewayRoutesWithContextFunc: func(in1 context.Context, in2 *ec2.SearchTransitGatewayRoutesInput, in3 ...request.Option) (*ec2.SearchTransitGatewayRoutesOutput, error) {
// 	               panic("mock out the SearchTransitGatewayRoutesWithContext method")
//             },
//             SendDiagnosticInterruptFunc: func(in1 *ec2.SendDiagnosticInterruptInput) (*ec2.SendDiagnosticInterruptOutput, error) {
// 	               panic("mock out the SendDiagnosticInterrupt method")
//             },
//             SendDiagnosticInterruptRequestFunc: func(in1 *ec2.SendDiagnosticInterruptInput) (*request.Request, *ec2.SendDiagnosticInterruptOutput) {
// 	               panic("mock out the SendDiagnosticInterruptRequest method")
//             },
//             SendDiagnosticInterruptWithContextFunc: func(in1 context.Context, in2 *ec2.SendDiagnosticInterruptInput, in3 ...request.Option) (*ec2.SendDiagnosticInterruptOutput, error) {
// 	               panic("mock out the SendDiagnosticInterruptWithContext method")
//             },
//             StartInstancesFunc: func(in1 *ec2.StartInstancesInput) (*ec2.StartInstancesOutput, error) {
// 	               panic("mock out the StartInstances method")
//             },
//             StartInstancesRequestFunc: func(in1 *ec2.StartInstancesInput) (*request.Request, *ec2.StartInstancesOutput) {
// 	               panic("mock out the StartInstancesRequest method")
//             },
//             StartInstancesWithContextFunc: func(in1 context.Context, in2 *ec2.StartInstancesInput, in3 ...request.Option) (*ec2.StartInstancesOutput, error) {
// 	               panic("mock out the StartInstancesWithContext method")
//             },
//             StartVpcEndpointServicePrivateDnsVerificationFunc: func(in1 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput) (*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput, error) {
// 	               panic("mock out the StartVpcEndpointServicePrivateDnsVerification method")
//             },
//             StartVpcEndpointServicePrivateDnsVerificationRequestFunc: func(in1 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput) (*request.Request, *ec2.StartVpcEndpointServicePrivateDnsVerificationOutput) {
// 	               panic("mock out the StartVpcEndpointServicePrivateDnsVerificationRequest method")
//             },
//             StartVpcEndpointServicePrivateDnsVerificationWithContextFunc: func(in1 context.Context, in2 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput, in3 ...request.Option) (*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput, error) {
// 	               panic("mock out the StartVpcEndpointServicePrivateDnsVerificationWithContext method")
//             },
//             StopInstancesFunc: func(in1 *ec2.StopInstancesInput) (*ec2.StopInstancesOutput, error) {
// 	               panic("mock out the StopInstances method")
//             },
//             StopInstancesRequestFunc: func(in1 *ec2.StopInstancesInput) (*request.Request, *ec2.StopInstancesOutput) {
// 	               panic("mock out the StopInstancesRequest method")
//             },
//             StopInstancesWithContextFunc: func(in1 context.Context, in2 *ec2.StopInstancesInput, in3 ...request.Option) (*ec2.StopInstancesOutput, error) {
// 	               panic("mock out the StopInstancesWithContext method")
//             },
//             TerminateClientVpnConnectionsFunc: func(in1 *ec2.TerminateClientVpnConnectionsInput) (*ec2.TerminateClientVpnConnectionsOutput, error) {
// 	               panic("mock out the TerminateClientVpnConnections method")
//             },
//             TerminateClientVpnConnectionsRequestFunc: func(in1 *ec2.TerminateClientVpnConnectionsInput) (*request.Request, *ec2.TerminateClientVpnConnectionsOutput) {
// 	               panic("mock out the TerminateClientVpnConnectionsRequest method")
//             },
//             TerminateClientVpnConnectionsWithContextFunc: func(in1 context.Context, in2 *ec2.TerminateClientVpnConnectionsInput, in3 ...request.Option) (*ec2.TerminateClientVpnConnectionsOutput, error) {
// 	               panic("mock out the TerminateClientVpnConnectionsWithContext method")
//             },
//             TerminateInstancesFunc: func(in1 *ec2.TerminateInstancesInput) (*ec2.TerminateInstancesOutput, error) {
// 	               panic("mock out the TerminateInstances method")
//             },
//             TerminateInstancesRequestFunc: func(in1 *ec2.TerminateInstancesInput) (*request.Request, *ec2.TerminateInstancesOutput) {
// 	               panic("mock out the TerminateInstancesRequest method")
//             },
//             TerminateInstancesWithContextFunc: func(in1 context.Context, in2 *ec2.TerminateInstancesInput, in3 ...request.Option) (*ec2.TerminateInstancesOutput, error) {
// 	               panic("mock out the TerminateInstancesWithContext method")
//             },
//             UnassignIpv6AddressesFunc: func(in1 *ec2.UnassignIpv6AddressesInput) (*ec2.UnassignIpv6AddressesOutput, error) {
// 	               panic("mock out the UnassignIpv6Addresses method")
//             },
//             UnassignIpv6AddressesRequestFunc: func(in1 *ec2.UnassignIpv6AddressesInput) (*request.Request, *ec2.UnassignIpv6AddressesOutput) {
// 	               panic("mock out the UnassignIpv6AddressesRequest method")
//             },
//             UnassignIpv6AddressesWithContextFunc: func(in1 context.Context, in2 *ec2.UnassignIpv6AddressesInput, in3 ...request.Option) (*ec2.UnassignIpv6AddressesOutput, error) {
// 	               panic("mock out the UnassignIpv6AddressesWithContext method")
//             },
//             UnassignPrivateIpAddressesFunc: func(in1 *ec2.UnassignPrivateIpAddressesInput) (*ec2.UnassignPrivateIpAddressesOutput, error) {
// 	               panic("mock out the UnassignPrivateIpAddresses method")
//             },
//             UnassignPrivateIpAddressesRequestFunc: func(in1 *ec2.UnassignPrivateIpAddressesInput) (*request.Request, *ec2.UnassignPrivateIpAddressesOutput) {
// 	               panic("mock out the UnassignPrivateIpAddressesRequest method")
//             },
//             UnassignPrivateIpAddressesWithContextFunc: func(in1 context.Context, in2 *ec2.UnassignPrivateIpAddressesInput, in3 ...request.Option) (*ec2.UnassignPrivateIpAddressesOutput, error) {
// 	               panic("mock out the UnassignPrivateIpAddressesWithContext method")
//             },
//             UnmonitorInstancesFunc: func(in1 *ec2.UnmonitorInstancesInput) (*ec2.UnmonitorInstancesOutput, error) {
// 	               panic("mock out the UnmonitorInstances method")
//             },
//             UnmonitorInstancesRequestFunc: func(in1 *ec2.UnmonitorInstancesInput) (*request.Request, *ec2.UnmonitorInstancesOutput) {
// 	               panic("mock out the UnmonitorInstancesRequest method")
//             },
//             UnmonitorInstancesWithContextFunc: func(in1 context.Context, in2 *ec2.UnmonitorInstancesInput, in3 ...request.Option) (*ec2.UnmonitorInstancesOutput, error) {
// 	               panic("mock out the UnmonitorInstancesWithContext method")
//             },
//             UpdateSecurityGroupRuleDescriptionsEgressFunc: func(in1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error) {
// 	               panic("mock out the UpdateSecurityGroupRuleDescriptionsEgress method")
//             },
//             UpdateSecurityGroupRuleDescriptionsEgressRequestFunc: func(in1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) (*request.Request, *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput) {
// 	               panic("mock out the UpdateSecurityGroupRuleDescriptionsEgressRequest method")
//             },
//             UpdateSecurityGroupRuleDescriptionsEgressWithContextFunc: func(in1 context.Context, in2 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput, in3 ...request.Option) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error) {
// 	               panic("mock out the UpdateSecurityGroupRuleDescriptionsEgressWithContext method")
//             },
//             UpdateSecurityGroupRuleDescriptionsIngressFunc: func(in1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error) {
// 	               panic("mock out the UpdateSecurityGroupRuleDescriptionsIngress method")
//             },
//             UpdateSecurityGroupRuleDescriptionsIngressRequestFunc: func(in1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) (*request.Request, *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput) {
// 	               panic("mock out the UpdateSecurityGroupRuleDescriptionsIngressRequest method")
//             },
//             UpdateSecurityGroupRuleDescriptionsIngressWithContextFunc: func(in1 context.Context, in2 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput, in3 ...request.Option) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error) {
// 	               panic("mock out the UpdateSecurityGroupRuleDescriptionsIngressWithContext method")
//             },
//             WaitUntilBundleTaskCompleteFunc: func(in1 *ec2.DescribeBundleTasksInput) error {
// 	               panic("mock out the WaitUntilBundleTaskComplete method")
//             },
//             WaitUntilBundleTaskCompleteWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeBundleTasksInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilBundleTaskCompleteWithContext method")
//             },
//             WaitUntilConversionTaskCancelledFunc: func(in1 *ec2.DescribeConversionTasksInput) error {
// 	               panic("mock out the WaitUntilConversionTaskCancelled method")
//             },
//             WaitUntilConversionTaskCancelledWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeConversionTasksInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilConversionTaskCancelledWithContext method")
//             },
//             WaitUntilConversionTaskCompletedFunc: func(in1 *ec2.DescribeConversionTasksInput) error {
// 	               panic("mock out the WaitUntilConversionTaskCompleted method")
//             },
//             WaitUntilConversionTaskCompletedWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeConversionTasksInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilConversionTaskCompletedWithContext method")
//             },
//             WaitUntilConversionTaskDeletedFunc: func(in1 *ec2.DescribeConversionTasksInput) error {
// 	               panic("mock out the WaitUntilConversionTaskDeleted method")
//             },
//             WaitUntilConversionTaskDeletedWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeConversionTasksInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilConversionTaskDeletedWithContext method")
//             },
//             WaitUntilCustomerGatewayAvailableFunc: func(in1 *ec2.DescribeCustomerGatewaysInput) error {
// 	               panic("mock out the WaitUntilCustomerGatewayAvailable method")
//             },
//             WaitUntilCustomerGatewayAvailableWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeCustomerGatewaysInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilCustomerGatewayAvailableWithContext method")
//             },
//             WaitUntilExportTaskCancelledFunc: func(in1 *ec2.DescribeExportTasksInput) error {
// 	               panic("mock out the WaitUntilExportTaskCancelled method")
//             },
//             WaitUntilExportTaskCancelledWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeExportTasksInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilExportTaskCancelledWithContext method")
//             },
//             WaitUntilExportTaskCompletedFunc: func(in1 *ec2.DescribeExportTasksInput) error {
// 	               panic("mock out the WaitUntilExportTaskCompleted method")
//             },
//             WaitUntilExportTaskCompletedWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeExportTasksInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilExportTaskCompletedWithContext method")
//             },
//             WaitUntilImageAvailableFunc: func(in1 *ec2.DescribeImagesInput) error {
// 	               panic("mock out the WaitUntilImageAvailable method")
//             },
//             WaitUntilImageAvailableWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeImagesInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilImageAvailableWithContext method")
//             },
//             WaitUntilImageExistsFunc: func(in1 *ec2.DescribeImagesInput) error {
// 	               panic("mock out the WaitUntilImageExists method")
//             },
//             WaitUntilImageExistsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeImagesInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilImageExistsWithContext method")
//             },
//             WaitUntilInstanceExistsFunc: func(in1 *ec2.DescribeInstancesInput) error {
// 	               panic("mock out the WaitUntilInstanceExists method")
//             },
//             WaitUntilInstanceExistsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeInstancesInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilInstanceExistsWithContext method")
//             },
//             WaitUntilInstanceRunningFunc: func(in1 *ec2.DescribeInstancesInput) error {
// 	               panic("mock out the WaitUntilInstanceRunning method")
//             },
//             WaitUntilInstanceRunningWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeInstancesInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilInstanceRunningWithContext method")
//             },
//             WaitUntilInstanceStatusOkFunc: func(in1 *ec2.DescribeInstanceStatusInput) error {
// 	               panic("mock out the WaitUntilInstanceStatusOk method")
//             },
//             WaitUntilInstanceStatusOkWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeInstanceStatusInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilInstanceStatusOkWithContext method")
//             },
//             WaitUntilInstanceStoppedFunc: func(in1 *ec2.DescribeInstancesInput) error {
// 	               panic("mock out the WaitUntilInstanceStopped method")
//             },
//             WaitUntilInstanceStoppedWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeInstancesInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilInstanceStoppedWithContext method")
//             },
//             WaitUntilInstanceTerminatedFunc: func(in1 *ec2.DescribeInstancesInput) error {
// 	               panic("mock out the WaitUntilInstanceTerminated method")
//             },
//             WaitUntilInstanceTerminatedWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeInstancesInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilInstanceTerminatedWithContext method")
//             },
//             WaitUntilKeyPairExistsFunc: func(in1 *ec2.DescribeKeyPairsInput) error {
// 	               panic("mock out the WaitUntilKeyPairExists method")
//             },
//             WaitUntilKeyPairExistsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeKeyPairsInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilKeyPairExistsWithContext method")
//             },
//             WaitUntilNatGatewayAvailableFunc: func(in1 *ec2.DescribeNatGatewaysInput) error {
// 	               panic("mock out the WaitUntilNatGatewayAvailable method")
//             },
//             WaitUntilNatGatewayAvailableWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeNatGatewaysInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilNatGatewayAvailableWithContext method")
//             },
//             WaitUntilNetworkInterfaceAvailableFunc: func(in1 *ec2.DescribeNetworkInterfacesInput) error {
// 	               panic("mock out the WaitUntilNetworkInterfaceAvailable method")
//             },
//             WaitUntilNetworkInterfaceAvailableWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeNetworkInterfacesInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilNetworkInterfaceAvailableWithContext method")
//             },
//             WaitUntilPasswordDataAvailableFunc: func(in1 *ec2.GetPasswordDataInput) error {
// 	               panic("mock out the WaitUntilPasswordDataAvailable method")
//             },
//             WaitUntilPasswordDataAvailableWithContextFunc: func(in1 context.Context, in2 *ec2.GetPasswordDataInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilPasswordDataAvailableWithContext method")
//             },
//             WaitUntilSecurityGroupExistsFunc: func(in1 *ec2.DescribeSecurityGroupsInput) error {
// 	               panic("mock out the WaitUntilSecurityGroupExists method")
//             },
//             WaitUntilSecurityGroupExistsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeSecurityGroupsInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilSecurityGroupExistsWithContext method")
//             },
//             WaitUntilSnapshotCompletedFunc: func(in1 *ec2.DescribeSnapshotsInput) error {
// 	               panic("mock out the WaitUntilSnapshotCompleted method")
//             },
//             WaitUntilSnapshotCompletedWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeSnapshotsInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilSnapshotCompletedWithContext method")
//             },
//             WaitUntilSpotInstanceRequestFulfilledFunc: func(in1 *ec2.DescribeSpotInstanceRequestsInput) error {
// 	               panic("mock out the WaitUntilSpotInstanceRequestFulfilled method")
//             },
//             WaitUntilSpotInstanceRequestFulfilledWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeSpotInstanceRequestsInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilSpotInstanceRequestFulfilledWithContext method")
//             },
//             WaitUntilSubnetAvailableFunc: func(in1 *ec2.DescribeSubnetsInput) error {
// 	               panic("mock out the WaitUntilSubnetAvailable method")
//             },
//             WaitUntilSubnetAvailableWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeSubnetsInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilSubnetAvailableWithContext method")
//             },
//             WaitUntilSystemStatusOkFunc: func(in1 *ec2.DescribeInstanceStatusInput) error {
// 	               panic("mock out the WaitUntilSystemStatusOk method")
//             },
//             WaitUntilSystemStatusOkWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeInstanceStatusInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilSystemStatusOkWithContext method")
//             },
//             WaitUntilVolumeAvailableFunc: func(in1 *ec2.DescribeVolumesInput) error {
// 	               panic("mock out the WaitUntilVolumeAvailable method")
//             },
//             WaitUntilVolumeAvailableWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVolumesInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilVolumeAvailableWithContext method")
//             },
//             WaitUntilVolumeDeletedFunc: func(in1 *ec2.DescribeVolumesInput) error {
// 	               panic("mock out the WaitUntilVolumeDeleted method")
//             },
//             WaitUntilVolumeDeletedWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVolumesInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilVolumeDeletedWithContext method")
//             },
//             WaitUntilVolumeInUseFunc: func(in1 *ec2.DescribeVolumesInput) error {
// 	               panic("mock out the WaitUntilVolumeInUse method")
//             },
//             WaitUntilVolumeInUseWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVolumesInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilVolumeInUseWithContext method")
//             },
//             WaitUntilVpcAvailableFunc: func(in1 *ec2.DescribeVpcsInput) error {
// 	               panic("mock out the WaitUntilVpcAvailable method")
//             },
//             WaitUntilVpcAvailableWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpcsInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilVpcAvailableWithContext method")
//             },
//             WaitUntilVpcExistsFunc: func(in1 *ec2.DescribeVpcsInput) error {
// 	               panic("mock out the WaitUntilVpcExists method")
//             },
//             WaitUntilVpcExistsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpcsInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilVpcExistsWithContext method")
//             },
//             WaitUntilVpcPeeringConnectionDeletedFunc: func(in1 *ec2.DescribeVpcPeeringConnectionsInput) error {
// 	               panic("mock out the WaitUntilVpcPeeringConnectionDeleted method")
//             },
//             WaitUntilVpcPeeringConnectionDeletedWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpcPeeringConnectionsInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilVpcPeeringConnectionDeletedWithContext method")
//             },
//             WaitUntilVpcPeeringConnectionExistsFunc: func(in1 *ec2.DescribeVpcPeeringConnectionsInput) error {
// 	               panic("mock out the WaitUntilVpcPeeringConnectionExists method")
//             },
//             WaitUntilVpcPeeringConnectionExistsWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpcPeeringConnectionsInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilVpcPeeringConnectionExistsWithContext method")
//             },
//             WaitUntilVpnConnectionAvailableFunc: func(in1 *ec2.DescribeVpnConnectionsInput) error {
// 	               panic("mock out the WaitUntilVpnConnectionAvailable method")
//             },
//             WaitUntilVpnConnectionAvailableWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpnConnectionsInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilVpnConnectionAvailableWithContext method")
//             },
//             WaitUntilVpnConnectionDeletedFunc: func(in1 *ec2.DescribeVpnConnectionsInput) error {
// 	               panic("mock out the WaitUntilVpnConnectionDeleted method")
//             },
//             WaitUntilVpnConnectionDeletedWithContextFunc: func(in1 context.Context, in2 *ec2.DescribeVpnConnectionsInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilVpnConnectionDeletedWithContext method")
//             },
//             WithdrawByoipCidrFunc: func(in1 *ec2.WithdrawByoipCidrInput) (*ec2.WithdrawByoipCidrOutput, error) {
// 	               panic("mock out the WithdrawByoipCidr method")
//             },
//             WithdrawByoipCidrRequestFunc: func(in1 *ec2.WithdrawByoipCidrInput) (*request.Request, *ec2.WithdrawByoipCidrOutput) {
// 	               panic("mock out the WithdrawByoipCidrRequest method")
//             },
//             WithdrawByoipCidrWithContextFunc: func(in1 context.Context, in2 *ec2.WithdrawByoipCidrInput, in3 ...request.Option) (*ec2.WithdrawByoipCidrOutput, error) {
// 	               panic("mock out the WithdrawByoipCidrWithContext method")
//             },
//         }
//
//         // use mockedec2Client in code that requires ec2Client
//         // and then make assertions.
//
//     }
type ec2ClientMock struct {
	// AcceptReservedInstancesExchangeQuoteFunc mocks the AcceptReservedInstancesExchangeQuote method.
	AcceptReservedInstancesExchangeQuoteFunc func(in1 *ec2.AcceptReservedInstancesExchangeQuoteInput) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error)

	// AcceptReservedInstancesExchangeQuoteRequestFunc mocks the AcceptReservedInstancesExchangeQuoteRequest method.
	AcceptReservedInstancesExchangeQuoteRequestFunc func(in1 *ec2.AcceptReservedInstancesExchangeQuoteInput) (*request.Request, *ec2.AcceptReservedInstancesExchangeQuoteOutput)

	// AcceptReservedInstancesExchangeQuoteWithContextFunc mocks the AcceptReservedInstancesExchangeQuoteWithContext method.
	AcceptReservedInstancesExchangeQuoteWithContextFunc func(in1 context.Context, in2 *ec2.AcceptReservedInstancesExchangeQuoteInput, in3 ...request.Option) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error)

	// AcceptTransitGatewayPeeringAttachmentFunc mocks the AcceptTransitGatewayPeeringAttachment method.
	AcceptTransitGatewayPeeringAttachmentFunc func(in1 *ec2.AcceptTransitGatewayPeeringAttachmentInput) (*ec2.AcceptTransitGatewayPeeringAttachmentOutput, error)

	// AcceptTransitGatewayPeeringAttachmentRequestFunc mocks the AcceptTransitGatewayPeeringAttachmentRequest method.
	AcceptTransitGatewayPeeringAttachmentRequestFunc func(in1 *ec2.AcceptTransitGatewayPeeringAttachmentInput) (*request.Request, *ec2.AcceptTransitGatewayPeeringAttachmentOutput)

	// AcceptTransitGatewayPeeringAttachmentWithContextFunc mocks the AcceptTransitGatewayPeeringAttachmentWithContext method.
	AcceptTransitGatewayPeeringAttachmentWithContextFunc func(in1 context.Context, in2 *ec2.AcceptTransitGatewayPeeringAttachmentInput, in3 ...request.Option) (*ec2.AcceptTransitGatewayPeeringAttachmentOutput, error)

	// AcceptTransitGatewayVpcAttachmentFunc mocks the AcceptTransitGatewayVpcAttachment method.
	AcceptTransitGatewayVpcAttachmentFunc func(in1 *ec2.AcceptTransitGatewayVpcAttachmentInput) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error)

	// AcceptTransitGatewayVpcAttachmentRequestFunc mocks the AcceptTransitGatewayVpcAttachmentRequest method.
	AcceptTransitGatewayVpcAttachmentRequestFunc func(in1 *ec2.AcceptTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.AcceptTransitGatewayVpcAttachmentOutput)

	// AcceptTransitGatewayVpcAttachmentWithContextFunc mocks the AcceptTransitGatewayVpcAttachmentWithContext method.
	AcceptTransitGatewayVpcAttachmentWithContextFunc func(in1 context.Context, in2 *ec2.AcceptTransitGatewayVpcAttachmentInput, in3 ...request.Option) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error)

	// AcceptVpcEndpointConnectionsFunc mocks the AcceptVpcEndpointConnections method.
	AcceptVpcEndpointConnectionsFunc func(in1 *ec2.AcceptVpcEndpointConnectionsInput) (*ec2.AcceptVpcEndpointConnectionsOutput, error)

	// AcceptVpcEndpointConnectionsRequestFunc mocks the AcceptVpcEndpointConnectionsRequest method.
	AcceptVpcEndpointConnectionsRequestFunc func(in1 *ec2.AcceptVpcEndpointConnectionsInput) (*request.Request, *ec2.AcceptVpcEndpointConnectionsOutput)

	// AcceptVpcEndpointConnectionsWithContextFunc mocks the AcceptVpcEndpointConnectionsWithContext method.
	AcceptVpcEndpointConnectionsWithContextFunc func(in1 context.Context, in2 *ec2.AcceptVpcEndpointConnectionsInput, in3 ...request.Option) (*ec2.AcceptVpcEndpointConnectionsOutput, error)

	// AcceptVpcPeeringConnectionFunc mocks the AcceptVpcPeeringConnection method.
	AcceptVpcPeeringConnectionFunc func(in1 *ec2.AcceptVpcPeeringConnectionInput) (*ec2.AcceptVpcPeeringConnectionOutput, error)

	// AcceptVpcPeeringConnectionRequestFunc mocks the AcceptVpcPeeringConnectionRequest method.
	AcceptVpcPeeringConnectionRequestFunc func(in1 *ec2.AcceptVpcPeeringConnectionInput) (*request.Request, *ec2.AcceptVpcPeeringConnectionOutput)

	// AcceptVpcPeeringConnectionWithContextFunc mocks the AcceptVpcPeeringConnectionWithContext method.
	AcceptVpcPeeringConnectionWithContextFunc func(in1 context.Context, in2 *ec2.AcceptVpcPeeringConnectionInput, in3 ...request.Option) (*ec2.AcceptVpcPeeringConnectionOutput, error)

	// AdvertiseByoipCidrFunc mocks the AdvertiseByoipCidr method.
	AdvertiseByoipCidrFunc func(in1 *ec2.AdvertiseByoipCidrInput) (*ec2.AdvertiseByoipCidrOutput, error)

	// AdvertiseByoipCidrRequestFunc mocks the AdvertiseByoipCidrRequest method.
	AdvertiseByoipCidrRequestFunc func(in1 *ec2.AdvertiseByoipCidrInput) (*request.Request, *ec2.AdvertiseByoipCidrOutput)

	// AdvertiseByoipCidrWithContextFunc mocks the AdvertiseByoipCidrWithContext method.
	AdvertiseByoipCidrWithContextFunc func(in1 context.Context, in2 *ec2.AdvertiseByoipCidrInput, in3 ...request.Option) (*ec2.AdvertiseByoipCidrOutput, error)

	// AllocateAddressFunc mocks the AllocateAddress method.
	AllocateAddressFunc func(in1 *ec2.AllocateAddressInput) (*ec2.AllocateAddressOutput, error)

	// AllocateAddressRequestFunc mocks the AllocateAddressRequest method.
	AllocateAddressRequestFunc func(in1 *ec2.AllocateAddressInput) (*request.Request, *ec2.AllocateAddressOutput)

	// AllocateAddressWithContextFunc mocks the AllocateAddressWithContext method.
	AllocateAddressWithContextFunc func(in1 context.Context, in2 *ec2.AllocateAddressInput, in3 ...request.Option) (*ec2.AllocateAddressOutput, error)

	// AllocateHostsFunc mocks the AllocateHosts method.
	AllocateHostsFunc func(in1 *ec2.AllocateHostsInput) (*ec2.AllocateHostsOutput, error)

	// AllocateHostsRequestFunc mocks the AllocateHostsRequest method.
	AllocateHostsRequestFunc func(in1 *ec2.AllocateHostsInput) (*request.Request, *ec2.AllocateHostsOutput)

	// AllocateHostsWithContextFunc mocks the AllocateHostsWithContext method.
	AllocateHostsWithContextFunc func(in1 context.Context, in2 *ec2.AllocateHostsInput, in3 ...request.Option) (*ec2.AllocateHostsOutput, error)

	// ApplySecurityGroupsToClientVpnTargetNetworkFunc mocks the ApplySecurityGroupsToClientVpnTargetNetwork method.
	ApplySecurityGroupsToClientVpnTargetNetworkFunc func(in1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, error)

	// ApplySecurityGroupsToClientVpnTargetNetworkRequestFunc mocks the ApplySecurityGroupsToClientVpnTargetNetworkRequest method.
	ApplySecurityGroupsToClientVpnTargetNetworkRequestFunc func(in1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) (*request.Request, *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput)

	// ApplySecurityGroupsToClientVpnTargetNetworkWithContextFunc mocks the ApplySecurityGroupsToClientVpnTargetNetworkWithContext method.
	ApplySecurityGroupsToClientVpnTargetNetworkWithContextFunc func(in1 context.Context, in2 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput, in3 ...request.Option) (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, error)

	// AssignIpv6AddressesFunc mocks the AssignIpv6Addresses method.
	AssignIpv6AddressesFunc func(in1 *ec2.AssignIpv6AddressesInput) (*ec2.AssignIpv6AddressesOutput, error)

	// AssignIpv6AddressesRequestFunc mocks the AssignIpv6AddressesRequest method.
	AssignIpv6AddressesRequestFunc func(in1 *ec2.AssignIpv6AddressesInput) (*request.Request, *ec2.AssignIpv6AddressesOutput)

	// AssignIpv6AddressesWithContextFunc mocks the AssignIpv6AddressesWithContext method.
	AssignIpv6AddressesWithContextFunc func(in1 context.Context, in2 *ec2.AssignIpv6AddressesInput, in3 ...request.Option) (*ec2.AssignIpv6AddressesOutput, error)

	// AssignPrivateIpAddressesFunc mocks the AssignPrivateIpAddresses method.
	AssignPrivateIpAddressesFunc func(in1 *ec2.AssignPrivateIpAddressesInput) (*ec2.AssignPrivateIpAddressesOutput, error)

	// AssignPrivateIpAddressesRequestFunc mocks the AssignPrivateIpAddressesRequest method.
	AssignPrivateIpAddressesRequestFunc func(in1 *ec2.AssignPrivateIpAddressesInput) (*request.Request, *ec2.AssignPrivateIpAddressesOutput)

	// AssignPrivateIpAddressesWithContextFunc mocks the AssignPrivateIpAddressesWithContext method.
	AssignPrivateIpAddressesWithContextFunc func(in1 context.Context, in2 *ec2.AssignPrivateIpAddressesInput, in3 ...request.Option) (*ec2.AssignPrivateIpAddressesOutput, error)

	// AssociateAddressFunc mocks the AssociateAddress method.
	AssociateAddressFunc func(in1 *ec2.AssociateAddressInput) (*ec2.AssociateAddressOutput, error)

	// AssociateAddressRequestFunc mocks the AssociateAddressRequest method.
	AssociateAddressRequestFunc func(in1 *ec2.AssociateAddressInput) (*request.Request, *ec2.AssociateAddressOutput)

	// AssociateAddressWithContextFunc mocks the AssociateAddressWithContext method.
	AssociateAddressWithContextFunc func(in1 context.Context, in2 *ec2.AssociateAddressInput, in3 ...request.Option) (*ec2.AssociateAddressOutput, error)

	// AssociateClientVpnTargetNetworkFunc mocks the AssociateClientVpnTargetNetwork method.
	AssociateClientVpnTargetNetworkFunc func(in1 *ec2.AssociateClientVpnTargetNetworkInput) (*ec2.AssociateClientVpnTargetNetworkOutput, error)

	// AssociateClientVpnTargetNetworkRequestFunc mocks the AssociateClientVpnTargetNetworkRequest method.
	AssociateClientVpnTargetNetworkRequestFunc func(in1 *ec2.AssociateClientVpnTargetNetworkInput) (*request.Request, *ec2.AssociateClientVpnTargetNetworkOutput)

	// AssociateClientVpnTargetNetworkWithContextFunc mocks the AssociateClientVpnTargetNetworkWithContext method.
	AssociateClientVpnTargetNetworkWithContextFunc func(in1 context.Context, in2 *ec2.AssociateClientVpnTargetNetworkInput, in3 ...request.Option) (*ec2.AssociateClientVpnTargetNetworkOutput, error)

	// AssociateDhcpOptionsFunc mocks the AssociateDhcpOptions method.
	AssociateDhcpOptionsFunc func(in1 *ec2.AssociateDhcpOptionsInput) (*ec2.AssociateDhcpOptionsOutput, error)

	// AssociateDhcpOptionsRequestFunc mocks the AssociateDhcpOptionsRequest method.
	AssociateDhcpOptionsRequestFunc func(in1 *ec2.AssociateDhcpOptionsInput) (*request.Request, *ec2.AssociateDhcpOptionsOutput)

	// AssociateDhcpOptionsWithContextFunc mocks the AssociateDhcpOptionsWithContext method.
	AssociateDhcpOptionsWithContextFunc func(in1 context.Context, in2 *ec2.AssociateDhcpOptionsInput, in3 ...request.Option) (*ec2.AssociateDhcpOptionsOutput, error)

	// AssociateIamInstanceProfileFunc mocks the AssociateIamInstanceProfile method.
	AssociateIamInstanceProfileFunc func(in1 *ec2.AssociateIamInstanceProfileInput) (*ec2.AssociateIamInstanceProfileOutput, error)

	// AssociateIamInstanceProfileRequestFunc mocks the AssociateIamInstanceProfileRequest method.
	AssociateIamInstanceProfileRequestFunc func(in1 *ec2.AssociateIamInstanceProfileInput) (*request.Request, *ec2.AssociateIamInstanceProfileOutput)

	// AssociateIamInstanceProfileWithContextFunc mocks the AssociateIamInstanceProfileWithContext method.
	AssociateIamInstanceProfileWithContextFunc func(in1 context.Context, in2 *ec2.AssociateIamInstanceProfileInput, in3 ...request.Option) (*ec2.AssociateIamInstanceProfileOutput, error)

	// AssociateRouteTableFunc mocks the AssociateRouteTable method.
	AssociateRouteTableFunc func(in1 *ec2.AssociateRouteTableInput) (*ec2.AssociateRouteTableOutput, error)

	// AssociateRouteTableRequestFunc mocks the AssociateRouteTableRequest method.
	AssociateRouteTableRequestFunc func(in1 *ec2.AssociateRouteTableInput) (*request.Request, *ec2.AssociateRouteTableOutput)

	// AssociateRouteTableWithContextFunc mocks the AssociateRouteTableWithContext method.
	AssociateRouteTableWithContextFunc func(in1 context.Context, in2 *ec2.AssociateRouteTableInput, in3 ...request.Option) (*ec2.AssociateRouteTableOutput, error)

	// AssociateSubnetCidrBlockFunc mocks the AssociateSubnetCidrBlock method.
	AssociateSubnetCidrBlockFunc func(in1 *ec2.AssociateSubnetCidrBlockInput) (*ec2.AssociateSubnetCidrBlockOutput, error)

	// AssociateSubnetCidrBlockRequestFunc mocks the AssociateSubnetCidrBlockRequest method.
	AssociateSubnetCidrBlockRequestFunc func(in1 *ec2.AssociateSubnetCidrBlockInput) (*request.Request, *ec2.AssociateSubnetCidrBlockOutput)

	// AssociateSubnetCidrBlockWithContextFunc mocks the AssociateSubnetCidrBlockWithContext method.
	AssociateSubnetCidrBlockWithContextFunc func(in1 context.Context, in2 *ec2.AssociateSubnetCidrBlockInput, in3 ...request.Option) (*ec2.AssociateSubnetCidrBlockOutput, error)

	// AssociateTransitGatewayMulticastDomainFunc mocks the AssociateTransitGatewayMulticastDomain method.
	AssociateTransitGatewayMulticastDomainFunc func(in1 *ec2.AssociateTransitGatewayMulticastDomainInput) (*ec2.AssociateTransitGatewayMulticastDomainOutput, error)

	// AssociateTransitGatewayMulticastDomainRequestFunc mocks the AssociateTransitGatewayMulticastDomainRequest method.
	AssociateTransitGatewayMulticastDomainRequestFunc func(in1 *ec2.AssociateTransitGatewayMulticastDomainInput) (*request.Request, *ec2.AssociateTransitGatewayMulticastDomainOutput)

	// AssociateTransitGatewayMulticastDomainWithContextFunc mocks the AssociateTransitGatewayMulticastDomainWithContext method.
	AssociateTransitGatewayMulticastDomainWithContextFunc func(in1 context.Context, in2 *ec2.AssociateTransitGatewayMulticastDomainInput, in3 ...request.Option) (*ec2.AssociateTransitGatewayMulticastDomainOutput, error)

	// AssociateTransitGatewayRouteTableFunc mocks the AssociateTransitGatewayRouteTable method.
	AssociateTransitGatewayRouteTableFunc func(in1 *ec2.AssociateTransitGatewayRouteTableInput) (*ec2.AssociateTransitGatewayRouteTableOutput, error)

	// AssociateTransitGatewayRouteTableRequestFunc mocks the AssociateTransitGatewayRouteTableRequest method.
	AssociateTransitGatewayRouteTableRequestFunc func(in1 *ec2.AssociateTransitGatewayRouteTableInput) (*request.Request, *ec2.AssociateTransitGatewayRouteTableOutput)

	// AssociateTransitGatewayRouteTableWithContextFunc mocks the AssociateTransitGatewayRouteTableWithContext method.
	AssociateTransitGatewayRouteTableWithContextFunc func(in1 context.Context, in2 *ec2.AssociateTransitGatewayRouteTableInput, in3 ...request.Option) (*ec2.AssociateTransitGatewayRouteTableOutput, error)

	// AssociateVpcCidrBlockFunc mocks the AssociateVpcCidrBlock method.
	AssociateVpcCidrBlockFunc func(in1 *ec2.AssociateVpcCidrBlockInput) (*ec2.AssociateVpcCidrBlockOutput, error)

	// AssociateVpcCidrBlockRequestFunc mocks the AssociateVpcCidrBlockRequest method.
	AssociateVpcCidrBlockRequestFunc func(in1 *ec2.AssociateVpcCidrBlockInput) (*request.Request, *ec2.AssociateVpcCidrBlockOutput)

	// AssociateVpcCidrBlockWithContextFunc mocks the AssociateVpcCidrBlockWithContext method.
	AssociateVpcCidrBlockWithContextFunc func(in1 context.Context, in2 *ec2.AssociateVpcCidrBlockInput, in3 ...request.Option) (*ec2.AssociateVpcCidrBlockOutput, error)

	// AttachClassicLinkVpcFunc mocks the AttachClassicLinkVpc method.
	AttachClassicLinkVpcFunc func(in1 *ec2.AttachClassicLinkVpcInput) (*ec2.AttachClassicLinkVpcOutput, error)

	// AttachClassicLinkVpcRequestFunc mocks the AttachClassicLinkVpcRequest method.
	AttachClassicLinkVpcRequestFunc func(in1 *ec2.AttachClassicLinkVpcInput) (*request.Request, *ec2.AttachClassicLinkVpcOutput)

	// AttachClassicLinkVpcWithContextFunc mocks the AttachClassicLinkVpcWithContext method.
	AttachClassicLinkVpcWithContextFunc func(in1 context.Context, in2 *ec2.AttachClassicLinkVpcInput, in3 ...request.Option) (*ec2.AttachClassicLinkVpcOutput, error)

	// AttachInternetGatewayFunc mocks the AttachInternetGateway method.
	AttachInternetGatewayFunc func(in1 *ec2.AttachInternetGatewayInput) (*ec2.AttachInternetGatewayOutput, error)

	// AttachInternetGatewayRequestFunc mocks the AttachInternetGatewayRequest method.
	AttachInternetGatewayRequestFunc func(in1 *ec2.AttachInternetGatewayInput) (*request.Request, *ec2.AttachInternetGatewayOutput)

	// AttachInternetGatewayWithContextFunc mocks the AttachInternetGatewayWithContext method.
	AttachInternetGatewayWithContextFunc func(in1 context.Context, in2 *ec2.AttachInternetGatewayInput, in3 ...request.Option) (*ec2.AttachInternetGatewayOutput, error)

	// AttachNetworkInterfaceFunc mocks the AttachNetworkInterface method.
	AttachNetworkInterfaceFunc func(in1 *ec2.AttachNetworkInterfaceInput) (*ec2.AttachNetworkInterfaceOutput, error)

	// AttachNetworkInterfaceRequestFunc mocks the AttachNetworkInterfaceRequest method.
	AttachNetworkInterfaceRequestFunc func(in1 *ec2.AttachNetworkInterfaceInput) (*request.Request, *ec2.AttachNetworkInterfaceOutput)

	// AttachNetworkInterfaceWithContextFunc mocks the AttachNetworkInterfaceWithContext method.
	AttachNetworkInterfaceWithContextFunc func(in1 context.Context, in2 *ec2.AttachNetworkInterfaceInput, in3 ...request.Option) (*ec2.AttachNetworkInterfaceOutput, error)

	// AttachVolumeFunc mocks the AttachVolume method.
	AttachVolumeFunc func(in1 *ec2.AttachVolumeInput) (*ec2.VolumeAttachment, error)

	// AttachVolumeRequestFunc mocks the AttachVolumeRequest method.
	AttachVolumeRequestFunc func(in1 *ec2.AttachVolumeInput) (*request.Request, *ec2.VolumeAttachment)

	// AttachVolumeWithContextFunc mocks the AttachVolumeWithContext method.
	AttachVolumeWithContextFunc func(in1 context.Context, in2 *ec2.AttachVolumeInput, in3 ...request.Option) (*ec2.VolumeAttachment, error)

	// AttachVpnGatewayFunc mocks the AttachVpnGateway method.
	AttachVpnGatewayFunc func(in1 *ec2.AttachVpnGatewayInput) (*ec2.AttachVpnGatewayOutput, error)

	// AttachVpnGatewayRequestFunc mocks the AttachVpnGatewayRequest method.
	AttachVpnGatewayRequestFunc func(in1 *ec2.AttachVpnGatewayInput) (*request.Request, *ec2.AttachVpnGatewayOutput)

	// AttachVpnGatewayWithContextFunc mocks the AttachVpnGatewayWithContext method.
	AttachVpnGatewayWithContextFunc func(in1 context.Context, in2 *ec2.AttachVpnGatewayInput, in3 ...request.Option) (*ec2.AttachVpnGatewayOutput, error)

	// AuthorizeClientVpnIngressFunc mocks the AuthorizeClientVpnIngress method.
	AuthorizeClientVpnIngressFunc func(in1 *ec2.AuthorizeClientVpnIngressInput) (*ec2.AuthorizeClientVpnIngressOutput, error)

	// AuthorizeClientVpnIngressRequestFunc mocks the AuthorizeClientVpnIngressRequest method.
	AuthorizeClientVpnIngressRequestFunc func(in1 *ec2.AuthorizeClientVpnIngressInput) (*request.Request, *ec2.AuthorizeClientVpnIngressOutput)

	// AuthorizeClientVpnIngressWithContextFunc mocks the AuthorizeClientVpnIngressWithContext method.
	AuthorizeClientVpnIngressWithContextFunc func(in1 context.Context, in2 *ec2.AuthorizeClientVpnIngressInput, in3 ...request.Option) (*ec2.AuthorizeClientVpnIngressOutput, error)

	// AuthorizeSecurityGroupEgressFunc mocks the AuthorizeSecurityGroupEgress method.
	AuthorizeSecurityGroupEgressFunc func(in1 *ec2.AuthorizeSecurityGroupEgressInput) (*ec2.AuthorizeSecurityGroupEgressOutput, error)

	// AuthorizeSecurityGroupEgressRequestFunc mocks the AuthorizeSecurityGroupEgressRequest method.
	AuthorizeSecurityGroupEgressRequestFunc func(in1 *ec2.AuthorizeSecurityGroupEgressInput) (*request.Request, *ec2.AuthorizeSecurityGroupEgressOutput)

	// AuthorizeSecurityGroupEgressWithContextFunc mocks the AuthorizeSecurityGroupEgressWithContext method.
	AuthorizeSecurityGroupEgressWithContextFunc func(in1 context.Context, in2 *ec2.AuthorizeSecurityGroupEgressInput, in3 ...request.Option) (*ec2.AuthorizeSecurityGroupEgressOutput, error)

	// AuthorizeSecurityGroupIngressFunc mocks the AuthorizeSecurityGroupIngress method.
	AuthorizeSecurityGroupIngressFunc func(in1 *ec2.AuthorizeSecurityGroupIngressInput) (*ec2.AuthorizeSecurityGroupIngressOutput, error)

	// AuthorizeSecurityGroupIngressRequestFunc mocks the AuthorizeSecurityGroupIngressRequest method.
	AuthorizeSecurityGroupIngressRequestFunc func(in1 *ec2.AuthorizeSecurityGroupIngressInput) (*request.Request, *ec2.AuthorizeSecurityGroupIngressOutput)

	// AuthorizeSecurityGroupIngressWithContextFunc mocks the AuthorizeSecurityGroupIngressWithContext method.
	AuthorizeSecurityGroupIngressWithContextFunc func(in1 context.Context, in2 *ec2.AuthorizeSecurityGroupIngressInput, in3 ...request.Option) (*ec2.AuthorizeSecurityGroupIngressOutput, error)

	// BundleInstanceFunc mocks the BundleInstance method.
	BundleInstanceFunc func(in1 *ec2.BundleInstanceInput) (*ec2.BundleInstanceOutput, error)

	// BundleInstanceRequestFunc mocks the BundleInstanceRequest method.
	BundleInstanceRequestFunc func(in1 *ec2.BundleInstanceInput) (*request.Request, *ec2.BundleInstanceOutput)

	// BundleInstanceWithContextFunc mocks the BundleInstanceWithContext method.
	BundleInstanceWithContextFunc func(in1 context.Context, in2 *ec2.BundleInstanceInput, in3 ...request.Option) (*ec2.BundleInstanceOutput, error)

	// CancelBundleTaskFunc mocks the CancelBundleTask method.
	CancelBundleTaskFunc func(in1 *ec2.CancelBundleTaskInput) (*ec2.CancelBundleTaskOutput, error)

	// CancelBundleTaskRequestFunc mocks the CancelBundleTaskRequest method.
	CancelBundleTaskRequestFunc func(in1 *ec2.CancelBundleTaskInput) (*request.Request, *ec2.CancelBundleTaskOutput)

	// CancelBundleTaskWithContextFunc mocks the CancelBundleTaskWithContext method.
	CancelBundleTaskWithContextFunc func(in1 context.Context, in2 *ec2.CancelBundleTaskInput, in3 ...request.Option) (*ec2.CancelBundleTaskOutput, error)

	// CancelCapacityReservationFunc mocks the CancelCapacityReservation method.
	CancelCapacityReservationFunc func(in1 *ec2.CancelCapacityReservationInput) (*ec2.CancelCapacityReservationOutput, error)

	// CancelCapacityReservationRequestFunc mocks the CancelCapacityReservationRequest method.
	CancelCapacityReservationRequestFunc func(in1 *ec2.CancelCapacityReservationInput) (*request.Request, *ec2.CancelCapacityReservationOutput)

	// CancelCapacityReservationWithContextFunc mocks the CancelCapacityReservationWithContext method.
	CancelCapacityReservationWithContextFunc func(in1 context.Context, in2 *ec2.CancelCapacityReservationInput, in3 ...request.Option) (*ec2.CancelCapacityReservationOutput, error)

	// CancelConversionTaskFunc mocks the CancelConversionTask method.
	CancelConversionTaskFunc func(in1 *ec2.CancelConversionTaskInput) (*ec2.CancelConversionTaskOutput, error)

	// CancelConversionTaskRequestFunc mocks the CancelConversionTaskRequest method.
	CancelConversionTaskRequestFunc func(in1 *ec2.CancelConversionTaskInput) (*request.Request, *ec2.CancelConversionTaskOutput)

	// CancelConversionTaskWithContextFunc mocks the CancelConversionTaskWithContext method.
	CancelConversionTaskWithContextFunc func(in1 context.Context, in2 *ec2.CancelConversionTaskInput, in3 ...request.Option) (*ec2.CancelConversionTaskOutput, error)

	// CancelExportTaskFunc mocks the CancelExportTask method.
	CancelExportTaskFunc func(in1 *ec2.CancelExportTaskInput) (*ec2.CancelExportTaskOutput, error)

	// CancelExportTaskRequestFunc mocks the CancelExportTaskRequest method.
	CancelExportTaskRequestFunc func(in1 *ec2.CancelExportTaskInput) (*request.Request, *ec2.CancelExportTaskOutput)

	// CancelExportTaskWithContextFunc mocks the CancelExportTaskWithContext method.
	CancelExportTaskWithContextFunc func(in1 context.Context, in2 *ec2.CancelExportTaskInput, in3 ...request.Option) (*ec2.CancelExportTaskOutput, error)

	// CancelImportTaskFunc mocks the CancelImportTask method.
	CancelImportTaskFunc func(in1 *ec2.CancelImportTaskInput) (*ec2.CancelImportTaskOutput, error)

	// CancelImportTaskRequestFunc mocks the CancelImportTaskRequest method.
	CancelImportTaskRequestFunc func(in1 *ec2.CancelImportTaskInput) (*request.Request, *ec2.CancelImportTaskOutput)

	// CancelImportTaskWithContextFunc mocks the CancelImportTaskWithContext method.
	CancelImportTaskWithContextFunc func(in1 context.Context, in2 *ec2.CancelImportTaskInput, in3 ...request.Option) (*ec2.CancelImportTaskOutput, error)

	// CancelReservedInstancesListingFunc mocks the CancelReservedInstancesListing method.
	CancelReservedInstancesListingFunc func(in1 *ec2.CancelReservedInstancesListingInput) (*ec2.CancelReservedInstancesListingOutput, error)

	// CancelReservedInstancesListingRequestFunc mocks the CancelReservedInstancesListingRequest method.
	CancelReservedInstancesListingRequestFunc func(in1 *ec2.CancelReservedInstancesListingInput) (*request.Request, *ec2.CancelReservedInstancesListingOutput)

	// CancelReservedInstancesListingWithContextFunc mocks the CancelReservedInstancesListingWithContext method.
	CancelReservedInstancesListingWithContextFunc func(in1 context.Context, in2 *ec2.CancelReservedInstancesListingInput, in3 ...request.Option) (*ec2.CancelReservedInstancesListingOutput, error)

	// CancelSpotFleetRequestsFunc mocks the CancelSpotFleetRequests method.
	CancelSpotFleetRequestsFunc func(in1 *ec2.CancelSpotFleetRequestsInput) (*ec2.CancelSpotFleetRequestsOutput, error)

	// CancelSpotFleetRequestsRequestFunc mocks the CancelSpotFleetRequestsRequest method.
	CancelSpotFleetRequestsRequestFunc func(in1 *ec2.CancelSpotFleetRequestsInput) (*request.Request, *ec2.CancelSpotFleetRequestsOutput)

	// CancelSpotFleetRequestsWithContextFunc mocks the CancelSpotFleetRequestsWithContext method.
	CancelSpotFleetRequestsWithContextFunc func(in1 context.Context, in2 *ec2.CancelSpotFleetRequestsInput, in3 ...request.Option) (*ec2.CancelSpotFleetRequestsOutput, error)

	// CancelSpotInstanceRequestsFunc mocks the CancelSpotInstanceRequests method.
	CancelSpotInstanceRequestsFunc func(in1 *ec2.CancelSpotInstanceRequestsInput) (*ec2.CancelSpotInstanceRequestsOutput, error)

	// CancelSpotInstanceRequestsRequestFunc mocks the CancelSpotInstanceRequestsRequest method.
	CancelSpotInstanceRequestsRequestFunc func(in1 *ec2.CancelSpotInstanceRequestsInput) (*request.Request, *ec2.CancelSpotInstanceRequestsOutput)

	// CancelSpotInstanceRequestsWithContextFunc mocks the CancelSpotInstanceRequestsWithContext method.
	CancelSpotInstanceRequestsWithContextFunc func(in1 context.Context, in2 *ec2.CancelSpotInstanceRequestsInput, in3 ...request.Option) (*ec2.CancelSpotInstanceRequestsOutput, error)

	// ConfirmProductInstanceFunc mocks the ConfirmProductInstance method.
	ConfirmProductInstanceFunc func(in1 *ec2.ConfirmProductInstanceInput) (*ec2.ConfirmProductInstanceOutput, error)

	// ConfirmProductInstanceRequestFunc mocks the ConfirmProductInstanceRequest method.
	ConfirmProductInstanceRequestFunc func(in1 *ec2.ConfirmProductInstanceInput) (*request.Request, *ec2.ConfirmProductInstanceOutput)

	// ConfirmProductInstanceWithContextFunc mocks the ConfirmProductInstanceWithContext method.
	ConfirmProductInstanceWithContextFunc func(in1 context.Context, in2 *ec2.ConfirmProductInstanceInput, in3 ...request.Option) (*ec2.ConfirmProductInstanceOutput, error)

	// CopyFpgaImageFunc mocks the CopyFpgaImage method.
	CopyFpgaImageFunc func(in1 *ec2.CopyFpgaImageInput) (*ec2.CopyFpgaImageOutput, error)

	// CopyFpgaImageRequestFunc mocks the CopyFpgaImageRequest method.
	CopyFpgaImageRequestFunc func(in1 *ec2.CopyFpgaImageInput) (*request.Request, *ec2.CopyFpgaImageOutput)

	// CopyFpgaImageWithContextFunc mocks the CopyFpgaImageWithContext method.
	CopyFpgaImageWithContextFunc func(in1 context.Context, in2 *ec2.CopyFpgaImageInput, in3 ...request.Option) (*ec2.CopyFpgaImageOutput, error)

	// CopyImageFunc mocks the CopyImage method.
	CopyImageFunc func(in1 *ec2.CopyImageInput) (*ec2.CopyImageOutput, error)

	// CopyImageRequestFunc mocks the CopyImageRequest method.
	CopyImageRequestFunc func(in1 *ec2.CopyImageInput) (*request.Request, *ec2.CopyImageOutput)

	// CopyImageWithContextFunc mocks the CopyImageWithContext method.
	CopyImageWithContextFunc func(in1 context.Context, in2 *ec2.CopyImageInput, in3 ...request.Option) (*ec2.CopyImageOutput, error)

	// CopySnapshotFunc mocks the CopySnapshot method.
	CopySnapshotFunc func(in1 *ec2.CopySnapshotInput) (*ec2.CopySnapshotOutput, error)

	// CopySnapshotRequestFunc mocks the CopySnapshotRequest method.
	CopySnapshotRequestFunc func(in1 *ec2.CopySnapshotInput) (*request.Request, *ec2.CopySnapshotOutput)

	// CopySnapshotWithContextFunc mocks the CopySnapshotWithContext method.
	CopySnapshotWithContextFunc func(in1 context.Context, in2 *ec2.CopySnapshotInput, in3 ...request.Option) (*ec2.CopySnapshotOutput, error)

	// CreateCapacityReservationFunc mocks the CreateCapacityReservation method.
	CreateCapacityReservationFunc func(in1 *ec2.CreateCapacityReservationInput) (*ec2.CreateCapacityReservationOutput, error)

	// CreateCapacityReservationRequestFunc mocks the CreateCapacityReservationRequest method.
	CreateCapacityReservationRequestFunc func(in1 *ec2.CreateCapacityReservationInput) (*request.Request, *ec2.CreateCapacityReservationOutput)

	// CreateCapacityReservationWithContextFunc mocks the CreateCapacityReservationWithContext method.
	CreateCapacityReservationWithContextFunc func(in1 context.Context, in2 *ec2.CreateCapacityReservationInput, in3 ...request.Option) (*ec2.CreateCapacityReservationOutput, error)

	// CreateClientVpnEndpointFunc mocks the CreateClientVpnEndpoint method.
	CreateClientVpnEndpointFunc func(in1 *ec2.CreateClientVpnEndpointInput) (*ec2.CreateClientVpnEndpointOutput, error)

	// CreateClientVpnEndpointRequestFunc mocks the CreateClientVpnEndpointRequest method.
	CreateClientVpnEndpointRequestFunc func(in1 *ec2.CreateClientVpnEndpointInput) (*request.Request, *ec2.CreateClientVpnEndpointOutput)

	// CreateClientVpnEndpointWithContextFunc mocks the CreateClientVpnEndpointWithContext method.
	CreateClientVpnEndpointWithContextFunc func(in1 context.Context, in2 *ec2.CreateClientVpnEndpointInput, in3 ...request.Option) (*ec2.CreateClientVpnEndpointOutput, error)

	// CreateClientVpnRouteFunc mocks the CreateClientVpnRoute method.
	CreateClientVpnRouteFunc func(in1 *ec2.CreateClientVpnRouteInput) (*ec2.CreateClientVpnRouteOutput, error)

	// CreateClientVpnRouteRequestFunc mocks the CreateClientVpnRouteRequest method.
	CreateClientVpnRouteRequestFunc func(in1 *ec2.CreateClientVpnRouteInput) (*request.Request, *ec2.CreateClientVpnRouteOutput)

	// CreateClientVpnRouteWithContextFunc mocks the CreateClientVpnRouteWithContext method.
	CreateClientVpnRouteWithContextFunc func(in1 context.Context, in2 *ec2.CreateClientVpnRouteInput, in3 ...request.Option) (*ec2.CreateClientVpnRouteOutput, error)

	// CreateCustomerGatewayFunc mocks the CreateCustomerGateway method.
	CreateCustomerGatewayFunc func(in1 *ec2.CreateCustomerGatewayInput) (*ec2.CreateCustomerGatewayOutput, error)

	// CreateCustomerGatewayRequestFunc mocks the CreateCustomerGatewayRequest method.
	CreateCustomerGatewayRequestFunc func(in1 *ec2.CreateCustomerGatewayInput) (*request.Request, *ec2.CreateCustomerGatewayOutput)

	// CreateCustomerGatewayWithContextFunc mocks the CreateCustomerGatewayWithContext method.
	CreateCustomerGatewayWithContextFunc func(in1 context.Context, in2 *ec2.CreateCustomerGatewayInput, in3 ...request.Option) (*ec2.CreateCustomerGatewayOutput, error)

	// CreateDefaultSubnetFunc mocks the CreateDefaultSubnet method.
	CreateDefaultSubnetFunc func(in1 *ec2.CreateDefaultSubnetInput) (*ec2.CreateDefaultSubnetOutput, error)

	// CreateDefaultSubnetRequestFunc mocks the CreateDefaultSubnetRequest method.
	CreateDefaultSubnetRequestFunc func(in1 *ec2.CreateDefaultSubnetInput) (*request.Request, *ec2.CreateDefaultSubnetOutput)

	// CreateDefaultSubnetWithContextFunc mocks the CreateDefaultSubnetWithContext method.
	CreateDefaultSubnetWithContextFunc func(in1 context.Context, in2 *ec2.CreateDefaultSubnetInput, in3 ...request.Option) (*ec2.CreateDefaultSubnetOutput, error)

	// CreateDefaultVpcFunc mocks the CreateDefaultVpc method.
	CreateDefaultVpcFunc func(in1 *ec2.CreateDefaultVpcInput) (*ec2.CreateDefaultVpcOutput, error)

	// CreateDefaultVpcRequestFunc mocks the CreateDefaultVpcRequest method.
	CreateDefaultVpcRequestFunc func(in1 *ec2.CreateDefaultVpcInput) (*request.Request, *ec2.CreateDefaultVpcOutput)

	// CreateDefaultVpcWithContextFunc mocks the CreateDefaultVpcWithContext method.
	CreateDefaultVpcWithContextFunc func(in1 context.Context, in2 *ec2.CreateDefaultVpcInput, in3 ...request.Option) (*ec2.CreateDefaultVpcOutput, error)

	// CreateDhcpOptionsFunc mocks the CreateDhcpOptions method.
	CreateDhcpOptionsFunc func(in1 *ec2.CreateDhcpOptionsInput) (*ec2.CreateDhcpOptionsOutput, error)

	// CreateDhcpOptionsRequestFunc mocks the CreateDhcpOptionsRequest method.
	CreateDhcpOptionsRequestFunc func(in1 *ec2.CreateDhcpOptionsInput) (*request.Request, *ec2.CreateDhcpOptionsOutput)

	// CreateDhcpOptionsWithContextFunc mocks the CreateDhcpOptionsWithContext method.
	CreateDhcpOptionsWithContextFunc func(in1 context.Context, in2 *ec2.CreateDhcpOptionsInput, in3 ...request.Option) (*ec2.CreateDhcpOptionsOutput, error)

	// CreateEgressOnlyInternetGatewayFunc mocks the CreateEgressOnlyInternetGateway method.
	CreateEgressOnlyInternetGatewayFunc func(in1 *ec2.CreateEgressOnlyInternetGatewayInput) (*ec2.CreateEgressOnlyInternetGatewayOutput, error)

	// CreateEgressOnlyInternetGatewayRequestFunc mocks the CreateEgressOnlyInternetGatewayRequest method.
	CreateEgressOnlyInternetGatewayRequestFunc func(in1 *ec2.CreateEgressOnlyInternetGatewayInput) (*request.Request, *ec2.CreateEgressOnlyInternetGatewayOutput)

	// CreateEgressOnlyInternetGatewayWithContextFunc mocks the CreateEgressOnlyInternetGatewayWithContext method.
	CreateEgressOnlyInternetGatewayWithContextFunc func(in1 context.Context, in2 *ec2.CreateEgressOnlyInternetGatewayInput, in3 ...request.Option) (*ec2.CreateEgressOnlyInternetGatewayOutput, error)

	// CreateFleetFunc mocks the CreateFleet method.
	CreateFleetFunc func(in1 *ec2.CreateFleetInput) (*ec2.CreateFleetOutput, error)

	// CreateFleetRequestFunc mocks the CreateFleetRequest method.
	CreateFleetRequestFunc func(in1 *ec2.CreateFleetInput) (*request.Request, *ec2.CreateFleetOutput)

	// CreateFleetWithContextFunc mocks the CreateFleetWithContext method.
	CreateFleetWithContextFunc func(in1 context.Context, in2 *ec2.CreateFleetInput, in3 ...request.Option) (*ec2.CreateFleetOutput, error)

	// CreateFlowLogsFunc mocks the CreateFlowLogs method.
	CreateFlowLogsFunc func(in1 *ec2.CreateFlowLogsInput) (*ec2.CreateFlowLogsOutput, error)

	// CreateFlowLogsRequestFunc mocks the CreateFlowLogsRequest method.
	CreateFlowLogsRequestFunc func(in1 *ec2.CreateFlowLogsInput) (*request.Request, *ec2.CreateFlowLogsOutput)

	// CreateFlowLogsWithContextFunc mocks the CreateFlowLogsWithContext method.
	CreateFlowLogsWithContextFunc func(in1 context.Context, in2 *ec2.CreateFlowLogsInput, in3 ...request.Option) (*ec2.CreateFlowLogsOutput, error)

	// CreateFpgaImageFunc mocks the CreateFpgaImage method.
	CreateFpgaImageFunc func(in1 *ec2.CreateFpgaImageInput) (*ec2.CreateFpgaImageOutput, error)

	// CreateFpgaImageRequestFunc mocks the CreateFpgaImageRequest method.
	CreateFpgaImageRequestFunc func(in1 *ec2.CreateFpgaImageInput) (*request.Request, *ec2.CreateFpgaImageOutput)

	// CreateFpgaImageWithContextFunc mocks the CreateFpgaImageWithContext method.
	CreateFpgaImageWithContextFunc func(in1 context.Context, in2 *ec2.CreateFpgaImageInput, in3 ...request.Option) (*ec2.CreateFpgaImageOutput, error)

	// CreateImageFunc mocks the CreateImage method.
	CreateImageFunc func(in1 *ec2.CreateImageInput) (*ec2.CreateImageOutput, error)

	// CreateImageRequestFunc mocks the CreateImageRequest method.
	CreateImageRequestFunc func(in1 *ec2.CreateImageInput) (*request.Request, *ec2.CreateImageOutput)

	// CreateImageWithContextFunc mocks the CreateImageWithContext method.
	CreateImageWithContextFunc func(in1 context.Context, in2 *ec2.CreateImageInput, in3 ...request.Option) (*ec2.CreateImageOutput, error)

	// CreateInstanceExportTaskFunc mocks the CreateInstanceExportTask method.
	CreateInstanceExportTaskFunc func(in1 *ec2.CreateInstanceExportTaskInput) (*ec2.CreateInstanceExportTaskOutput, error)

	// CreateInstanceExportTaskRequestFunc mocks the CreateInstanceExportTaskRequest method.
	CreateInstanceExportTaskRequestFunc func(in1 *ec2.CreateInstanceExportTaskInput) (*request.Request, *ec2.CreateInstanceExportTaskOutput)

	// CreateInstanceExportTaskWithContextFunc mocks the CreateInstanceExportTaskWithContext method.
	CreateInstanceExportTaskWithContextFunc func(in1 context.Context, in2 *ec2.CreateInstanceExportTaskInput, in3 ...request.Option) (*ec2.CreateInstanceExportTaskOutput, error)

	// CreateInternetGatewayFunc mocks the CreateInternetGateway method.
	CreateInternetGatewayFunc func(in1 *ec2.CreateInternetGatewayInput) (*ec2.CreateInternetGatewayOutput, error)

	// CreateInternetGatewayRequestFunc mocks the CreateInternetGatewayRequest method.
	CreateInternetGatewayRequestFunc func(in1 *ec2.CreateInternetGatewayInput) (*request.Request, *ec2.CreateInternetGatewayOutput)

	// CreateInternetGatewayWithContextFunc mocks the CreateInternetGatewayWithContext method.
	CreateInternetGatewayWithContextFunc func(in1 context.Context, in2 *ec2.CreateInternetGatewayInput, in3 ...request.Option) (*ec2.CreateInternetGatewayOutput, error)

	// CreateKeyPairFunc mocks the CreateKeyPair method.
	CreateKeyPairFunc func(in1 *ec2.CreateKeyPairInput) (*ec2.CreateKeyPairOutput, error)

	// CreateKeyPairRequestFunc mocks the CreateKeyPairRequest method.
	CreateKeyPairRequestFunc func(in1 *ec2.CreateKeyPairInput) (*request.Request, *ec2.CreateKeyPairOutput)

	// CreateKeyPairWithContextFunc mocks the CreateKeyPairWithContext method.
	CreateKeyPairWithContextFunc func(in1 context.Context, in2 *ec2.CreateKeyPairInput, in3 ...request.Option) (*ec2.CreateKeyPairOutput, error)

	// CreateLaunchTemplateFunc mocks the CreateLaunchTemplate method.
	CreateLaunchTemplateFunc func(in1 *ec2.CreateLaunchTemplateInput) (*ec2.CreateLaunchTemplateOutput, error)

	// CreateLaunchTemplateRequestFunc mocks the CreateLaunchTemplateRequest method.
	CreateLaunchTemplateRequestFunc func(in1 *ec2.CreateLaunchTemplateInput) (*request.Request, *ec2.CreateLaunchTemplateOutput)

	// CreateLaunchTemplateVersionFunc mocks the CreateLaunchTemplateVersion method.
	CreateLaunchTemplateVersionFunc func(in1 *ec2.CreateLaunchTemplateVersionInput) (*ec2.CreateLaunchTemplateVersionOutput, error)

	// CreateLaunchTemplateVersionRequestFunc mocks the CreateLaunchTemplateVersionRequest method.
	CreateLaunchTemplateVersionRequestFunc func(in1 *ec2.CreateLaunchTemplateVersionInput) (*request.Request, *ec2.CreateLaunchTemplateVersionOutput)

	// CreateLaunchTemplateVersionWithContextFunc mocks the CreateLaunchTemplateVersionWithContext method.
	CreateLaunchTemplateVersionWithContextFunc func(in1 context.Context, in2 *ec2.CreateLaunchTemplateVersionInput, in3 ...request.Option) (*ec2.CreateLaunchTemplateVersionOutput, error)

	// CreateLaunchTemplateWithContextFunc mocks the CreateLaunchTemplateWithContext method.
	CreateLaunchTemplateWithContextFunc func(in1 context.Context, in2 *ec2.CreateLaunchTemplateInput, in3 ...request.Option) (*ec2.CreateLaunchTemplateOutput, error)

	// CreateLocalGatewayRouteFunc mocks the CreateLocalGatewayRoute method.
	CreateLocalGatewayRouteFunc func(in1 *ec2.CreateLocalGatewayRouteInput) (*ec2.CreateLocalGatewayRouteOutput, error)

	// CreateLocalGatewayRouteRequestFunc mocks the CreateLocalGatewayRouteRequest method.
	CreateLocalGatewayRouteRequestFunc func(in1 *ec2.CreateLocalGatewayRouteInput) (*request.Request, *ec2.CreateLocalGatewayRouteOutput)

	// CreateLocalGatewayRouteTableVpcAssociationFunc mocks the CreateLocalGatewayRouteTableVpcAssociation method.
	CreateLocalGatewayRouteTableVpcAssociationFunc func(in1 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput) (*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput, error)

	// CreateLocalGatewayRouteTableVpcAssociationRequestFunc mocks the CreateLocalGatewayRouteTableVpcAssociationRequest method.
	CreateLocalGatewayRouteTableVpcAssociationRequestFunc func(in1 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput) (*request.Request, *ec2.CreateLocalGatewayRouteTableVpcAssociationOutput)

	// CreateLocalGatewayRouteTableVpcAssociationWithContextFunc mocks the CreateLocalGatewayRouteTableVpcAssociationWithContext method.
	CreateLocalGatewayRouteTableVpcAssociationWithContextFunc func(in1 context.Context, in2 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput, in3 ...request.Option) (*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput, error)

	// CreateLocalGatewayRouteWithContextFunc mocks the CreateLocalGatewayRouteWithContext method.
	CreateLocalGatewayRouteWithContextFunc func(in1 context.Context, in2 *ec2.CreateLocalGatewayRouteInput, in3 ...request.Option) (*ec2.CreateLocalGatewayRouteOutput, error)

	// CreateNatGatewayFunc mocks the CreateNatGateway method.
	CreateNatGatewayFunc func(in1 *ec2.CreateNatGatewayInput) (*ec2.CreateNatGatewayOutput, error)

	// CreateNatGatewayRequestFunc mocks the CreateNatGatewayRequest method.
	CreateNatGatewayRequestFunc func(in1 *ec2.CreateNatGatewayInput) (*request.Request, *ec2.CreateNatGatewayOutput)

	// CreateNatGatewayWithContextFunc mocks the CreateNatGatewayWithContext method.
	CreateNatGatewayWithContextFunc func(in1 context.Context, in2 *ec2.CreateNatGatewayInput, in3 ...request.Option) (*ec2.CreateNatGatewayOutput, error)

	// CreateNetworkAclFunc mocks the CreateNetworkAcl method.
	CreateNetworkAclFunc func(in1 *ec2.CreateNetworkAclInput) (*ec2.CreateNetworkAclOutput, error)

	// CreateNetworkAclEntryFunc mocks the CreateNetworkAclEntry method.
	CreateNetworkAclEntryFunc func(in1 *ec2.CreateNetworkAclEntryInput) (*ec2.CreateNetworkAclEntryOutput, error)

	// CreateNetworkAclEntryRequestFunc mocks the CreateNetworkAclEntryRequest method.
	CreateNetworkAclEntryRequestFunc func(in1 *ec2.CreateNetworkAclEntryInput) (*request.Request, *ec2.CreateNetworkAclEntryOutput)

	// CreateNetworkAclEntryWithContextFunc mocks the CreateNetworkAclEntryWithContext method.
	CreateNetworkAclEntryWithContextFunc func(in1 context.Context, in2 *ec2.CreateNetworkAclEntryInput, in3 ...request.Option) (*ec2.CreateNetworkAclEntryOutput, error)

	// CreateNetworkAclRequestFunc mocks the CreateNetworkAclRequest method.
	CreateNetworkAclRequestFunc func(in1 *ec2.CreateNetworkAclInput) (*request.Request, *ec2.CreateNetworkAclOutput)

	// CreateNetworkAclWithContextFunc mocks the CreateNetworkAclWithContext method.
	CreateNetworkAclWithContextFunc func(in1 context.Context, in2 *ec2.CreateNetworkAclInput, in3 ...request.Option) (*ec2.CreateNetworkAclOutput, error)

	// CreateNetworkInterfaceFunc mocks the CreateNetworkInterface method.
	CreateNetworkInterfaceFunc func(in1 *ec2.CreateNetworkInterfaceInput) (*ec2.CreateNetworkInterfaceOutput, error)

	// CreateNetworkInterfacePermissionFunc mocks the CreateNetworkInterfacePermission method.
	CreateNetworkInterfacePermissionFunc func(in1 *ec2.CreateNetworkInterfacePermissionInput) (*ec2.CreateNetworkInterfacePermissionOutput, error)

	// CreateNetworkInterfacePermissionRequestFunc mocks the CreateNetworkInterfacePermissionRequest method.
	CreateNetworkInterfacePermissionRequestFunc func(in1 *ec2.CreateNetworkInterfacePermissionInput) (*request.Request, *ec2.CreateNetworkInterfacePermissionOutput)

	// CreateNetworkInterfacePermissionWithContextFunc mocks the CreateNetworkInterfacePermissionWithContext method.
	CreateNetworkInterfacePermissionWithContextFunc func(in1 context.Context, in2 *ec2.CreateNetworkInterfacePermissionInput, in3 ...request.Option) (*ec2.CreateNetworkInterfacePermissionOutput, error)

	// CreateNetworkInterfaceRequestFunc mocks the CreateNetworkInterfaceRequest method.
	CreateNetworkInterfaceRequestFunc func(in1 *ec2.CreateNetworkInterfaceInput) (*request.Request, *ec2.CreateNetworkInterfaceOutput)

	// CreateNetworkInterfaceWithContextFunc mocks the CreateNetworkInterfaceWithContext method.
	CreateNetworkInterfaceWithContextFunc func(in1 context.Context, in2 *ec2.CreateNetworkInterfaceInput, in3 ...request.Option) (*ec2.CreateNetworkInterfaceOutput, error)

	// CreatePlacementGroupFunc mocks the CreatePlacementGroup method.
	CreatePlacementGroupFunc func(in1 *ec2.CreatePlacementGroupInput) (*ec2.CreatePlacementGroupOutput, error)

	// CreatePlacementGroupRequestFunc mocks the CreatePlacementGroupRequest method.
	CreatePlacementGroupRequestFunc func(in1 *ec2.CreatePlacementGroupInput) (*request.Request, *ec2.CreatePlacementGroupOutput)

	// CreatePlacementGroupWithContextFunc mocks the CreatePlacementGroupWithContext method.
	CreatePlacementGroupWithContextFunc func(in1 context.Context, in2 *ec2.CreatePlacementGroupInput, in3 ...request.Option) (*ec2.CreatePlacementGroupOutput, error)

	// CreateReservedInstancesListingFunc mocks the CreateReservedInstancesListing method.
	CreateReservedInstancesListingFunc func(in1 *ec2.CreateReservedInstancesListingInput) (*ec2.CreateReservedInstancesListingOutput, error)

	// CreateReservedInstancesListingRequestFunc mocks the CreateReservedInstancesListingRequest method.
	CreateReservedInstancesListingRequestFunc func(in1 *ec2.CreateReservedInstancesListingInput) (*request.Request, *ec2.CreateReservedInstancesListingOutput)

	// CreateReservedInstancesListingWithContextFunc mocks the CreateReservedInstancesListingWithContext method.
	CreateReservedInstancesListingWithContextFunc func(in1 context.Context, in2 *ec2.CreateReservedInstancesListingInput, in3 ...request.Option) (*ec2.CreateReservedInstancesListingOutput, error)

	// CreateRouteFunc mocks the CreateRoute method.
	CreateRouteFunc func(in1 *ec2.CreateRouteInput) (*ec2.CreateRouteOutput, error)

	// CreateRouteRequestFunc mocks the CreateRouteRequest method.
	CreateRouteRequestFunc func(in1 *ec2.CreateRouteInput) (*request.Request, *ec2.CreateRouteOutput)

	// CreateRouteTableFunc mocks the CreateRouteTable method.
	CreateRouteTableFunc func(in1 *ec2.CreateRouteTableInput) (*ec2.CreateRouteTableOutput, error)

	// CreateRouteTableRequestFunc mocks the CreateRouteTableRequest method.
	CreateRouteTableRequestFunc func(in1 *ec2.CreateRouteTableInput) (*request.Request, *ec2.CreateRouteTableOutput)

	// CreateRouteTableWithContextFunc mocks the CreateRouteTableWithContext method.
	CreateRouteTableWithContextFunc func(in1 context.Context, in2 *ec2.CreateRouteTableInput, in3 ...request.Option) (*ec2.CreateRouteTableOutput, error)

	// CreateRouteWithContextFunc mocks the CreateRouteWithContext method.
	CreateRouteWithContextFunc func(in1 context.Context, in2 *ec2.CreateRouteInput, in3 ...request.Option) (*ec2.CreateRouteOutput, error)

	// CreateSecurityGroupFunc mocks the CreateSecurityGroup method.
	CreateSecurityGroupFunc func(in1 *ec2.CreateSecurityGroupInput) (*ec2.CreateSecurityGroupOutput, error)

	// CreateSecurityGroupRequestFunc mocks the CreateSecurityGroupRequest method.
	CreateSecurityGroupRequestFunc func(in1 *ec2.CreateSecurityGroupInput) (*request.Request, *ec2.CreateSecurityGroupOutput)

	// CreateSecurityGroupWithContextFunc mocks the CreateSecurityGroupWithContext method.
	CreateSecurityGroupWithContextFunc func(in1 context.Context, in2 *ec2.CreateSecurityGroupInput, in3 ...request.Option) (*ec2.CreateSecurityGroupOutput, error)

	// CreateSnapshotFunc mocks the CreateSnapshot method.
	CreateSnapshotFunc func(in1 *ec2.CreateSnapshotInput) (*ec2.Snapshot, error)

	// CreateSnapshotRequestFunc mocks the CreateSnapshotRequest method.
	CreateSnapshotRequestFunc func(in1 *ec2.CreateSnapshotInput) (*request.Request, *ec2.Snapshot)

	// CreateSnapshotWithContextFunc mocks the CreateSnapshotWithContext method.
	CreateSnapshotWithContextFunc func(in1 context.Context, in2 *ec2.CreateSnapshotInput, in3 ...request.Option) (*ec2.Snapshot, error)

	// CreateSnapshotsFunc mocks the CreateSnapshots method.
	CreateSnapshotsFunc func(in1 *ec2.CreateSnapshotsInput) (*ec2.CreateSnapshotsOutput, error)

	// CreateSnapshotsRequestFunc mocks the CreateSnapshotsRequest method.
	CreateSnapshotsRequestFunc func(in1 *ec2.CreateSnapshotsInput) (*request.Request, *ec2.CreateSnapshotsOutput)

	// CreateSnapshotsWithContextFunc mocks the CreateSnapshotsWithContext method.
	CreateSnapshotsWithContextFunc func(in1 context.Context, in2 *ec2.CreateSnapshotsInput, in3 ...request.Option) (*ec2.CreateSnapshotsOutput, error)

	// CreateSpotDatafeedSubscriptionFunc mocks the CreateSpotDatafeedSubscription method.
	CreateSpotDatafeedSubscriptionFunc func(in1 *ec2.CreateSpotDatafeedSubscriptionInput) (*ec2.CreateSpotDatafeedSubscriptionOutput, error)

	// CreateSpotDatafeedSubscriptionRequestFunc mocks the CreateSpotDatafeedSubscriptionRequest method.
	CreateSpotDatafeedSubscriptionRequestFunc func(in1 *ec2.CreateSpotDatafeedSubscriptionInput) (*request.Request, *ec2.CreateSpotDatafeedSubscriptionOutput)

	// CreateSpotDatafeedSubscriptionWithContextFunc mocks the CreateSpotDatafeedSubscriptionWithContext method.
	CreateSpotDatafeedSubscriptionWithContextFunc func(in1 context.Context, in2 *ec2.CreateSpotDatafeedSubscriptionInput, in3 ...request.Option) (*ec2.CreateSpotDatafeedSubscriptionOutput, error)

	// CreateSubnetFunc mocks the CreateSubnet method.
	CreateSubnetFunc func(in1 *ec2.CreateSubnetInput) (*ec2.CreateSubnetOutput, error)

	// CreateSubnetRequestFunc mocks the CreateSubnetRequest method.
	CreateSubnetRequestFunc func(in1 *ec2.CreateSubnetInput) (*request.Request, *ec2.CreateSubnetOutput)

	// CreateSubnetWithContextFunc mocks the CreateSubnetWithContext method.
	CreateSubnetWithContextFunc func(in1 context.Context, in2 *ec2.CreateSubnetInput, in3 ...request.Option) (*ec2.CreateSubnetOutput, error)

	// CreateTagsFunc mocks the CreateTags method.
	CreateTagsFunc func(in1 *ec2.CreateTagsInput) (*ec2.CreateTagsOutput, error)

	// CreateTagsRequestFunc mocks the CreateTagsRequest method.
	CreateTagsRequestFunc func(in1 *ec2.CreateTagsInput) (*request.Request, *ec2.CreateTagsOutput)

	// CreateTagsWithContextFunc mocks the CreateTagsWithContext method.
	CreateTagsWithContextFunc func(in1 context.Context, in2 *ec2.CreateTagsInput, in3 ...request.Option) (*ec2.CreateTagsOutput, error)

	// CreateTrafficMirrorFilterFunc mocks the CreateTrafficMirrorFilter method.
	CreateTrafficMirrorFilterFunc func(in1 *ec2.CreateTrafficMirrorFilterInput) (*ec2.CreateTrafficMirrorFilterOutput, error)

	// CreateTrafficMirrorFilterRequestFunc mocks the CreateTrafficMirrorFilterRequest method.
	CreateTrafficMirrorFilterRequestFunc func(in1 *ec2.CreateTrafficMirrorFilterInput) (*request.Request, *ec2.CreateTrafficMirrorFilterOutput)

	// CreateTrafficMirrorFilterRuleFunc mocks the CreateTrafficMirrorFilterRule method.
	CreateTrafficMirrorFilterRuleFunc func(in1 *ec2.CreateTrafficMirrorFilterRuleInput) (*ec2.CreateTrafficMirrorFilterRuleOutput, error)

	// CreateTrafficMirrorFilterRuleRequestFunc mocks the CreateTrafficMirrorFilterRuleRequest method.
	CreateTrafficMirrorFilterRuleRequestFunc func(in1 *ec2.CreateTrafficMirrorFilterRuleInput) (*request.Request, *ec2.CreateTrafficMirrorFilterRuleOutput)

	// CreateTrafficMirrorFilterRuleWithContextFunc mocks the CreateTrafficMirrorFilterRuleWithContext method.
	CreateTrafficMirrorFilterRuleWithContextFunc func(in1 context.Context, in2 *ec2.CreateTrafficMirrorFilterRuleInput, in3 ...request.Option) (*ec2.CreateTrafficMirrorFilterRuleOutput, error)

	// CreateTrafficMirrorFilterWithContextFunc mocks the CreateTrafficMirrorFilterWithContext method.
	CreateTrafficMirrorFilterWithContextFunc func(in1 context.Context, in2 *ec2.CreateTrafficMirrorFilterInput, in3 ...request.Option) (*ec2.CreateTrafficMirrorFilterOutput, error)

	// CreateTrafficMirrorSessionFunc mocks the CreateTrafficMirrorSession method.
	CreateTrafficMirrorSessionFunc func(in1 *ec2.CreateTrafficMirrorSessionInput) (*ec2.CreateTrafficMirrorSessionOutput, error)

	// CreateTrafficMirrorSessionRequestFunc mocks the CreateTrafficMirrorSessionRequest method.
	CreateTrafficMirrorSessionRequestFunc func(in1 *ec2.CreateTrafficMirrorSessionInput) (*request.Request, *ec2.CreateTrafficMirrorSessionOutput)

	// CreateTrafficMirrorSessionWithContextFunc mocks the CreateTrafficMirrorSessionWithContext method.
	CreateTrafficMirrorSessionWithContextFunc func(in1 context.Context, in2 *ec2.CreateTrafficMirrorSessionInput, in3 ...request.Option) (*ec2.CreateTrafficMirrorSessionOutput, error)

	// CreateTrafficMirrorTargetFunc mocks the CreateTrafficMirrorTarget method.
	CreateTrafficMirrorTargetFunc func(in1 *ec2.CreateTrafficMirrorTargetInput) (*ec2.CreateTrafficMirrorTargetOutput, error)

	// CreateTrafficMirrorTargetRequestFunc mocks the CreateTrafficMirrorTargetRequest method.
	CreateTrafficMirrorTargetRequestFunc func(in1 *ec2.CreateTrafficMirrorTargetInput) (*request.Request, *ec2.CreateTrafficMirrorTargetOutput)

	// CreateTrafficMirrorTargetWithContextFunc mocks the CreateTrafficMirrorTargetWithContext method.
	CreateTrafficMirrorTargetWithContextFunc func(in1 context.Context, in2 *ec2.CreateTrafficMirrorTargetInput, in3 ...request.Option) (*ec2.CreateTrafficMirrorTargetOutput, error)

	// CreateTransitGatewayFunc mocks the CreateTransitGateway method.
	CreateTransitGatewayFunc func(in1 *ec2.CreateTransitGatewayInput) (*ec2.CreateTransitGatewayOutput, error)

	// CreateTransitGatewayMulticastDomainFunc mocks the CreateTransitGatewayMulticastDomain method.
	CreateTransitGatewayMulticastDomainFunc func(in1 *ec2.CreateTransitGatewayMulticastDomainInput) (*ec2.CreateTransitGatewayMulticastDomainOutput, error)

	// CreateTransitGatewayMulticastDomainRequestFunc mocks the CreateTransitGatewayMulticastDomainRequest method.
	CreateTransitGatewayMulticastDomainRequestFunc func(in1 *ec2.CreateTransitGatewayMulticastDomainInput) (*request.Request, *ec2.CreateTransitGatewayMulticastDomainOutput)

	// CreateTransitGatewayMulticastDomainWithContextFunc mocks the CreateTransitGatewayMulticastDomainWithContext method.
	CreateTransitGatewayMulticastDomainWithContextFunc func(in1 context.Context, in2 *ec2.CreateTransitGatewayMulticastDomainInput, in3 ...request.Option) (*ec2.CreateTransitGatewayMulticastDomainOutput, error)

	// CreateTransitGatewayPeeringAttachmentFunc mocks the CreateTransitGatewayPeeringAttachment method.
	CreateTransitGatewayPeeringAttachmentFunc func(in1 *ec2.CreateTransitGatewayPeeringAttachmentInput) (*ec2.CreateTransitGatewayPeeringAttachmentOutput, error)

	// CreateTransitGatewayPeeringAttachmentRequestFunc mocks the CreateTransitGatewayPeeringAttachmentRequest method.
	CreateTransitGatewayPeeringAttachmentRequestFunc func(in1 *ec2.CreateTransitGatewayPeeringAttachmentInput) (*request.Request, *ec2.CreateTransitGatewayPeeringAttachmentOutput)

	// CreateTransitGatewayPeeringAttachmentWithContextFunc mocks the CreateTransitGatewayPeeringAttachmentWithContext method.
	CreateTransitGatewayPeeringAttachmentWithContextFunc func(in1 context.Context, in2 *ec2.CreateTransitGatewayPeeringAttachmentInput, in3 ...request.Option) (*ec2.CreateTransitGatewayPeeringAttachmentOutput, error)

	// CreateTransitGatewayRequestFunc mocks the CreateTransitGatewayRequest method.
	CreateTransitGatewayRequestFunc func(in1 *ec2.CreateTransitGatewayInput) (*request.Request, *ec2.CreateTransitGatewayOutput)

	// CreateTransitGatewayRouteFunc mocks the CreateTransitGatewayRoute method.
	CreateTransitGatewayRouteFunc func(in1 *ec2.CreateTransitGatewayRouteInput) (*ec2.CreateTransitGatewayRouteOutput, error)

	// CreateTransitGatewayRouteRequestFunc mocks the CreateTransitGatewayRouteRequest method.
	CreateTransitGatewayRouteRequestFunc func(in1 *ec2.CreateTransitGatewayRouteInput) (*request.Request, *ec2.CreateTransitGatewayRouteOutput)

	// CreateTransitGatewayRouteTableFunc mocks the CreateTransitGatewayRouteTable method.
	CreateTransitGatewayRouteTableFunc func(in1 *ec2.CreateTransitGatewayRouteTableInput) (*ec2.CreateTransitGatewayRouteTableOutput, error)

	// CreateTransitGatewayRouteTableRequestFunc mocks the CreateTransitGatewayRouteTableRequest method.
	CreateTransitGatewayRouteTableRequestFunc func(in1 *ec2.CreateTransitGatewayRouteTableInput) (*request.Request, *ec2.CreateTransitGatewayRouteTableOutput)

	// CreateTransitGatewayRouteTableWithContextFunc mocks the CreateTransitGatewayRouteTableWithContext method.
	CreateTransitGatewayRouteTableWithContextFunc func(in1 context.Context, in2 *ec2.CreateTransitGatewayRouteTableInput, in3 ...request.Option) (*ec2.CreateTransitGatewayRouteTableOutput, error)

	// CreateTransitGatewayRouteWithContextFunc mocks the CreateTransitGatewayRouteWithContext method.
	CreateTransitGatewayRouteWithContextFunc func(in1 context.Context, in2 *ec2.CreateTransitGatewayRouteInput, in3 ...request.Option) (*ec2.CreateTransitGatewayRouteOutput, error)

	// CreateTransitGatewayVpcAttachmentFunc mocks the CreateTransitGatewayVpcAttachment method.
	CreateTransitGatewayVpcAttachmentFunc func(in1 *ec2.CreateTransitGatewayVpcAttachmentInput) (*ec2.CreateTransitGatewayVpcAttachmentOutput, error)

	// CreateTransitGatewayVpcAttachmentRequestFunc mocks the CreateTransitGatewayVpcAttachmentRequest method.
	CreateTransitGatewayVpcAttachmentRequestFunc func(in1 *ec2.CreateTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.CreateTransitGatewayVpcAttachmentOutput)

	// CreateTransitGatewayVpcAttachmentWithContextFunc mocks the CreateTransitGatewayVpcAttachmentWithContext method.
	CreateTransitGatewayVpcAttachmentWithContextFunc func(in1 context.Context, in2 *ec2.CreateTransitGatewayVpcAttachmentInput, in3 ...request.Option) (*ec2.CreateTransitGatewayVpcAttachmentOutput, error)

	// CreateTransitGatewayWithContextFunc mocks the CreateTransitGatewayWithContext method.
	CreateTransitGatewayWithContextFunc func(in1 context.Context, in2 *ec2.CreateTransitGatewayInput, in3 ...request.Option) (*ec2.CreateTransitGatewayOutput, error)

	// CreateVolumeFunc mocks the CreateVolume method.
	CreateVolumeFunc func(in1 *ec2.CreateVolumeInput) (*ec2.Volume, error)

	// CreateVolumeRequestFunc mocks the CreateVolumeRequest method.
	CreateVolumeRequestFunc func(in1 *ec2.CreateVolumeInput) (*request.Request, *ec2.Volume)

	// CreateVolumeWithContextFunc mocks the CreateVolumeWithContext method.
	CreateVolumeWithContextFunc func(in1 context.Context, in2 *ec2.CreateVolumeInput, in3 ...request.Option) (*ec2.Volume, error)

	// CreateVpcFunc mocks the CreateVpc method.
	CreateVpcFunc func(in1 *ec2.CreateVpcInput) (*ec2.CreateVpcOutput, error)

	// CreateVpcEndpointFunc mocks the CreateVpcEndpoint method.
	CreateVpcEndpointFunc func(in1 *ec2.CreateVpcEndpointInput) (*ec2.CreateVpcEndpointOutput, error)

	// CreateVpcEndpointConnectionNotificationFunc mocks the CreateVpcEndpointConnectionNotification method.
	CreateVpcEndpointConnectionNotificationFunc func(in1 *ec2.CreateVpcEndpointConnectionNotificationInput) (*ec2.CreateVpcEndpointConnectionNotificationOutput, error)

	// CreateVpcEndpointConnectionNotificationRequestFunc mocks the CreateVpcEndpointConnectionNotificationRequest method.
	CreateVpcEndpointConnectionNotificationRequestFunc func(in1 *ec2.CreateVpcEndpointConnectionNotificationInput) (*request.Request, *ec2.CreateVpcEndpointConnectionNotificationOutput)

	// CreateVpcEndpointConnectionNotificationWithContextFunc mocks the CreateVpcEndpointConnectionNotificationWithContext method.
	CreateVpcEndpointConnectionNotificationWithContextFunc func(in1 context.Context, in2 *ec2.CreateVpcEndpointConnectionNotificationInput, in3 ...request.Option) (*ec2.CreateVpcEndpointConnectionNotificationOutput, error)

	// CreateVpcEndpointRequestFunc mocks the CreateVpcEndpointRequest method.
	CreateVpcEndpointRequestFunc func(in1 *ec2.CreateVpcEndpointInput) (*request.Request, *ec2.CreateVpcEndpointOutput)

	// CreateVpcEndpointServiceConfigurationFunc mocks the CreateVpcEndpointServiceConfiguration method.
	CreateVpcEndpointServiceConfigurationFunc func(in1 *ec2.CreateVpcEndpointServiceConfigurationInput) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error)

	// CreateVpcEndpointServiceConfigurationRequestFunc mocks the CreateVpcEndpointServiceConfigurationRequest method.
	CreateVpcEndpointServiceConfigurationRequestFunc func(in1 *ec2.CreateVpcEndpointServiceConfigurationInput) (*request.Request, *ec2.CreateVpcEndpointServiceConfigurationOutput)

	// CreateVpcEndpointServiceConfigurationWithContextFunc mocks the CreateVpcEndpointServiceConfigurationWithContext method.
	CreateVpcEndpointServiceConfigurationWithContextFunc func(in1 context.Context, in2 *ec2.CreateVpcEndpointServiceConfigurationInput, in3 ...request.Option) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error)

	// CreateVpcEndpointWithContextFunc mocks the CreateVpcEndpointWithContext method.
	CreateVpcEndpointWithContextFunc func(in1 context.Context, in2 *ec2.CreateVpcEndpointInput, in3 ...request.Option) (*ec2.CreateVpcEndpointOutput, error)

	// CreateVpcPeeringConnectionFunc mocks the CreateVpcPeeringConnection method.
	CreateVpcPeeringConnectionFunc func(in1 *ec2.CreateVpcPeeringConnectionInput) (*ec2.CreateVpcPeeringConnectionOutput, error)

	// CreateVpcPeeringConnectionRequestFunc mocks the CreateVpcPeeringConnectionRequest method.
	CreateVpcPeeringConnectionRequestFunc func(in1 *ec2.CreateVpcPeeringConnectionInput) (*request.Request, *ec2.CreateVpcPeeringConnectionOutput)

	// CreateVpcPeeringConnectionWithContextFunc mocks the CreateVpcPeeringConnectionWithContext method.
	CreateVpcPeeringConnectionWithContextFunc func(in1 context.Context, in2 *ec2.CreateVpcPeeringConnectionInput, in3 ...request.Option) (*ec2.CreateVpcPeeringConnectionOutput, error)

	// CreateVpcRequestFunc mocks the CreateVpcRequest method.
	CreateVpcRequestFunc func(in1 *ec2.CreateVpcInput) (*request.Request, *ec2.CreateVpcOutput)

	// CreateVpcWithContextFunc mocks the CreateVpcWithContext method.
	CreateVpcWithContextFunc func(in1 context.Context, in2 *ec2.CreateVpcInput, in3 ...request.Option) (*ec2.CreateVpcOutput, error)

	// CreateVpnConnectionFunc mocks the CreateVpnConnection method.
	CreateVpnConnectionFunc func(in1 *ec2.CreateVpnConnectionInput) (*ec2.CreateVpnConnectionOutput, error)

	// CreateVpnConnectionRequestFunc mocks the CreateVpnConnectionRequest method.
	CreateVpnConnectionRequestFunc func(in1 *ec2.CreateVpnConnectionInput) (*request.Request, *ec2.CreateVpnConnectionOutput)

	// CreateVpnConnectionRouteFunc mocks the CreateVpnConnectionRoute method.
	CreateVpnConnectionRouteFunc func(in1 *ec2.CreateVpnConnectionRouteInput) (*ec2.CreateVpnConnectionRouteOutput, error)

	// CreateVpnConnectionRouteRequestFunc mocks the CreateVpnConnectionRouteRequest method.
	CreateVpnConnectionRouteRequestFunc func(in1 *ec2.CreateVpnConnectionRouteInput) (*request.Request, *ec2.CreateVpnConnectionRouteOutput)

	// CreateVpnConnectionRouteWithContextFunc mocks the CreateVpnConnectionRouteWithContext method.
	CreateVpnConnectionRouteWithContextFunc func(in1 context.Context, in2 *ec2.CreateVpnConnectionRouteInput, in3 ...request.Option) (*ec2.CreateVpnConnectionRouteOutput, error)

	// CreateVpnConnectionWithContextFunc mocks the CreateVpnConnectionWithContext method.
	CreateVpnConnectionWithContextFunc func(in1 context.Context, in2 *ec2.CreateVpnConnectionInput, in3 ...request.Option) (*ec2.CreateVpnConnectionOutput, error)

	// CreateVpnGatewayFunc mocks the CreateVpnGateway method.
	CreateVpnGatewayFunc func(in1 *ec2.CreateVpnGatewayInput) (*ec2.CreateVpnGatewayOutput, error)

	// CreateVpnGatewayRequestFunc mocks the CreateVpnGatewayRequest method.
	CreateVpnGatewayRequestFunc func(in1 *ec2.CreateVpnGatewayInput) (*request.Request, *ec2.CreateVpnGatewayOutput)

	// CreateVpnGatewayWithContextFunc mocks the CreateVpnGatewayWithContext method.
	CreateVpnGatewayWithContextFunc func(in1 context.Context, in2 *ec2.CreateVpnGatewayInput, in3 ...request.Option) (*ec2.CreateVpnGatewayOutput, error)

	// DeleteClientVpnEndpointFunc mocks the DeleteClientVpnEndpoint method.
	DeleteClientVpnEndpointFunc func(in1 *ec2.DeleteClientVpnEndpointInput) (*ec2.DeleteClientVpnEndpointOutput, error)

	// DeleteClientVpnEndpointRequestFunc mocks the DeleteClientVpnEndpointRequest method.
	DeleteClientVpnEndpointRequestFunc func(in1 *ec2.DeleteClientVpnEndpointInput) (*request.Request, *ec2.DeleteClientVpnEndpointOutput)

	// DeleteClientVpnEndpointWithContextFunc mocks the DeleteClientVpnEndpointWithContext method.
	DeleteClientVpnEndpointWithContextFunc func(in1 context.Context, in2 *ec2.DeleteClientVpnEndpointInput, in3 ...request.Option) (*ec2.DeleteClientVpnEndpointOutput, error)

	// DeleteClientVpnRouteFunc mocks the DeleteClientVpnRoute method.
	DeleteClientVpnRouteFunc func(in1 *ec2.DeleteClientVpnRouteInput) (*ec2.DeleteClientVpnRouteOutput, error)

	// DeleteClientVpnRouteRequestFunc mocks the DeleteClientVpnRouteRequest method.
	DeleteClientVpnRouteRequestFunc func(in1 *ec2.DeleteClientVpnRouteInput) (*request.Request, *ec2.DeleteClientVpnRouteOutput)

	// DeleteClientVpnRouteWithContextFunc mocks the DeleteClientVpnRouteWithContext method.
	DeleteClientVpnRouteWithContextFunc func(in1 context.Context, in2 *ec2.DeleteClientVpnRouteInput, in3 ...request.Option) (*ec2.DeleteClientVpnRouteOutput, error)

	// DeleteCustomerGatewayFunc mocks the DeleteCustomerGateway method.
	DeleteCustomerGatewayFunc func(in1 *ec2.DeleteCustomerGatewayInput) (*ec2.DeleteCustomerGatewayOutput, error)

	// DeleteCustomerGatewayRequestFunc mocks the DeleteCustomerGatewayRequest method.
	DeleteCustomerGatewayRequestFunc func(in1 *ec2.DeleteCustomerGatewayInput) (*request.Request, *ec2.DeleteCustomerGatewayOutput)

	// DeleteCustomerGatewayWithContextFunc mocks the DeleteCustomerGatewayWithContext method.
	DeleteCustomerGatewayWithContextFunc func(in1 context.Context, in2 *ec2.DeleteCustomerGatewayInput, in3 ...request.Option) (*ec2.DeleteCustomerGatewayOutput, error)

	// DeleteDhcpOptionsFunc mocks the DeleteDhcpOptions method.
	DeleteDhcpOptionsFunc func(in1 *ec2.DeleteDhcpOptionsInput) (*ec2.DeleteDhcpOptionsOutput, error)

	// DeleteDhcpOptionsRequestFunc mocks the DeleteDhcpOptionsRequest method.
	DeleteDhcpOptionsRequestFunc func(in1 *ec2.DeleteDhcpOptionsInput) (*request.Request, *ec2.DeleteDhcpOptionsOutput)

	// DeleteDhcpOptionsWithContextFunc mocks the DeleteDhcpOptionsWithContext method.
	DeleteDhcpOptionsWithContextFunc func(in1 context.Context, in2 *ec2.DeleteDhcpOptionsInput, in3 ...request.Option) (*ec2.DeleteDhcpOptionsOutput, error)

	// DeleteEgressOnlyInternetGatewayFunc mocks the DeleteEgressOnlyInternetGateway method.
	DeleteEgressOnlyInternetGatewayFunc func(in1 *ec2.DeleteEgressOnlyInternetGatewayInput) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error)

	// DeleteEgressOnlyInternetGatewayRequestFunc mocks the DeleteEgressOnlyInternetGatewayRequest method.
	DeleteEgressOnlyInternetGatewayRequestFunc func(in1 *ec2.DeleteEgressOnlyInternetGatewayInput) (*request.Request, *ec2.DeleteEgressOnlyInternetGatewayOutput)

	// DeleteEgressOnlyInternetGatewayWithContextFunc mocks the DeleteEgressOnlyInternetGatewayWithContext method.
	DeleteEgressOnlyInternetGatewayWithContextFunc func(in1 context.Context, in2 *ec2.DeleteEgressOnlyInternetGatewayInput, in3 ...request.Option) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error)

	// DeleteFleetsFunc mocks the DeleteFleets method.
	DeleteFleetsFunc func(in1 *ec2.DeleteFleetsInput) (*ec2.DeleteFleetsOutput, error)

	// DeleteFleetsRequestFunc mocks the DeleteFleetsRequest method.
	DeleteFleetsRequestFunc func(in1 *ec2.DeleteFleetsInput) (*request.Request, *ec2.DeleteFleetsOutput)

	// DeleteFleetsWithContextFunc mocks the DeleteFleetsWithContext method.
	DeleteFleetsWithContextFunc func(in1 context.Context, in2 *ec2.DeleteFleetsInput, in3 ...request.Option) (*ec2.DeleteFleetsOutput, error)

	// DeleteFlowLogsFunc mocks the DeleteFlowLogs method.
	DeleteFlowLogsFunc func(in1 *ec2.DeleteFlowLogsInput) (*ec2.DeleteFlowLogsOutput, error)

	// DeleteFlowLogsRequestFunc mocks the DeleteFlowLogsRequest method.
	DeleteFlowLogsRequestFunc func(in1 *ec2.DeleteFlowLogsInput) (*request.Request, *ec2.DeleteFlowLogsOutput)

	// DeleteFlowLogsWithContextFunc mocks the DeleteFlowLogsWithContext method.
	DeleteFlowLogsWithContextFunc func(in1 context.Context, in2 *ec2.DeleteFlowLogsInput, in3 ...request.Option) (*ec2.DeleteFlowLogsOutput, error)

	// DeleteFpgaImageFunc mocks the DeleteFpgaImage method.
	DeleteFpgaImageFunc func(in1 *ec2.DeleteFpgaImageInput) (*ec2.DeleteFpgaImageOutput, error)

	// DeleteFpgaImageRequestFunc mocks the DeleteFpgaImageRequest method.
	DeleteFpgaImageRequestFunc func(in1 *ec2.DeleteFpgaImageInput) (*request.Request, *ec2.DeleteFpgaImageOutput)

	// DeleteFpgaImageWithContextFunc mocks the DeleteFpgaImageWithContext method.
	DeleteFpgaImageWithContextFunc func(in1 context.Context, in2 *ec2.DeleteFpgaImageInput, in3 ...request.Option) (*ec2.DeleteFpgaImageOutput, error)

	// DeleteInternetGatewayFunc mocks the DeleteInternetGateway method.
	DeleteInternetGatewayFunc func(in1 *ec2.DeleteInternetGatewayInput) (*ec2.DeleteInternetGatewayOutput, error)

	// DeleteInternetGatewayRequestFunc mocks the DeleteInternetGatewayRequest method.
	DeleteInternetGatewayRequestFunc func(in1 *ec2.DeleteInternetGatewayInput) (*request.Request, *ec2.DeleteInternetGatewayOutput)

	// DeleteInternetGatewayWithContextFunc mocks the DeleteInternetGatewayWithContext method.
	DeleteInternetGatewayWithContextFunc func(in1 context.Context, in2 *ec2.DeleteInternetGatewayInput, in3 ...request.Option) (*ec2.DeleteInternetGatewayOutput, error)

	// DeleteKeyPairFunc mocks the DeleteKeyPair method.
	DeleteKeyPairFunc func(in1 *ec2.DeleteKeyPairInput) (*ec2.DeleteKeyPairOutput, error)

	// DeleteKeyPairRequestFunc mocks the DeleteKeyPairRequest method.
	DeleteKeyPairRequestFunc func(in1 *ec2.DeleteKeyPairInput) (*request.Request, *ec2.DeleteKeyPairOutput)

	// DeleteKeyPairWithContextFunc mocks the DeleteKeyPairWithContext method.
	DeleteKeyPairWithContextFunc func(in1 context.Context, in2 *ec2.DeleteKeyPairInput, in3 ...request.Option) (*ec2.DeleteKeyPairOutput, error)

	// DeleteLaunchTemplateFunc mocks the DeleteLaunchTemplate method.
	DeleteLaunchTemplateFunc func(in1 *ec2.DeleteLaunchTemplateInput) (*ec2.DeleteLaunchTemplateOutput, error)

	// DeleteLaunchTemplateRequestFunc mocks the DeleteLaunchTemplateRequest method.
	DeleteLaunchTemplateRequestFunc func(in1 *ec2.DeleteLaunchTemplateInput) (*request.Request, *ec2.DeleteLaunchTemplateOutput)

	// DeleteLaunchTemplateVersionsFunc mocks the DeleteLaunchTemplateVersions method.
	DeleteLaunchTemplateVersionsFunc func(in1 *ec2.DeleteLaunchTemplateVersionsInput) (*ec2.DeleteLaunchTemplateVersionsOutput, error)

	// DeleteLaunchTemplateVersionsRequestFunc mocks the DeleteLaunchTemplateVersionsRequest method.
	DeleteLaunchTemplateVersionsRequestFunc func(in1 *ec2.DeleteLaunchTemplateVersionsInput) (*request.Request, *ec2.DeleteLaunchTemplateVersionsOutput)

	// DeleteLaunchTemplateVersionsWithContextFunc mocks the DeleteLaunchTemplateVersionsWithContext method.
	DeleteLaunchTemplateVersionsWithContextFunc func(in1 context.Context, in2 *ec2.DeleteLaunchTemplateVersionsInput, in3 ...request.Option) (*ec2.DeleteLaunchTemplateVersionsOutput, error)

	// DeleteLaunchTemplateWithContextFunc mocks the DeleteLaunchTemplateWithContext method.
	DeleteLaunchTemplateWithContextFunc func(in1 context.Context, in2 *ec2.DeleteLaunchTemplateInput, in3 ...request.Option) (*ec2.DeleteLaunchTemplateOutput, error)

	// DeleteLocalGatewayRouteFunc mocks the DeleteLocalGatewayRoute method.
	DeleteLocalGatewayRouteFunc func(in1 *ec2.DeleteLocalGatewayRouteInput) (*ec2.DeleteLocalGatewayRouteOutput, error)

	// DeleteLocalGatewayRouteRequestFunc mocks the DeleteLocalGatewayRouteRequest method.
	DeleteLocalGatewayRouteRequestFunc func(in1 *ec2.DeleteLocalGatewayRouteInput) (*request.Request, *ec2.DeleteLocalGatewayRouteOutput)

	// DeleteLocalGatewayRouteTableVpcAssociationFunc mocks the DeleteLocalGatewayRouteTableVpcAssociation method.
	DeleteLocalGatewayRouteTableVpcAssociationFunc func(in1 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput) (*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput, error)

	// DeleteLocalGatewayRouteTableVpcAssociationRequestFunc mocks the DeleteLocalGatewayRouteTableVpcAssociationRequest method.
	DeleteLocalGatewayRouteTableVpcAssociationRequestFunc func(in1 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput) (*request.Request, *ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput)

	// DeleteLocalGatewayRouteTableVpcAssociationWithContextFunc mocks the DeleteLocalGatewayRouteTableVpcAssociationWithContext method.
	DeleteLocalGatewayRouteTableVpcAssociationWithContextFunc func(in1 context.Context, in2 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput, in3 ...request.Option) (*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput, error)

	// DeleteLocalGatewayRouteWithContextFunc mocks the DeleteLocalGatewayRouteWithContext method.
	DeleteLocalGatewayRouteWithContextFunc func(in1 context.Context, in2 *ec2.DeleteLocalGatewayRouteInput, in3 ...request.Option) (*ec2.DeleteLocalGatewayRouteOutput, error)

	// DeleteNatGatewayFunc mocks the DeleteNatGateway method.
	DeleteNatGatewayFunc func(in1 *ec2.DeleteNatGatewayInput) (*ec2.DeleteNatGatewayOutput, error)

	// DeleteNatGatewayRequestFunc mocks the DeleteNatGatewayRequest method.
	DeleteNatGatewayRequestFunc func(in1 *ec2.DeleteNatGatewayInput) (*request.Request, *ec2.DeleteNatGatewayOutput)

	// DeleteNatGatewayWithContextFunc mocks the DeleteNatGatewayWithContext method.
	DeleteNatGatewayWithContextFunc func(in1 context.Context, in2 *ec2.DeleteNatGatewayInput, in3 ...request.Option) (*ec2.DeleteNatGatewayOutput, error)

	// DeleteNetworkAclFunc mocks the DeleteNetworkAcl method.
	DeleteNetworkAclFunc func(in1 *ec2.DeleteNetworkAclInput) (*ec2.DeleteNetworkAclOutput, error)

	// DeleteNetworkAclEntryFunc mocks the DeleteNetworkAclEntry method.
	DeleteNetworkAclEntryFunc func(in1 *ec2.DeleteNetworkAclEntryInput) (*ec2.DeleteNetworkAclEntryOutput, error)

	// DeleteNetworkAclEntryRequestFunc mocks the DeleteNetworkAclEntryRequest method.
	DeleteNetworkAclEntryRequestFunc func(in1 *ec2.DeleteNetworkAclEntryInput) (*request.Request, *ec2.DeleteNetworkAclEntryOutput)

	// DeleteNetworkAclEntryWithContextFunc mocks the DeleteNetworkAclEntryWithContext method.
	DeleteNetworkAclEntryWithContextFunc func(in1 context.Context, in2 *ec2.DeleteNetworkAclEntryInput, in3 ...request.Option) (*ec2.DeleteNetworkAclEntryOutput, error)

	// DeleteNetworkAclRequestFunc mocks the DeleteNetworkAclRequest method.
	DeleteNetworkAclRequestFunc func(in1 *ec2.DeleteNetworkAclInput) (*request.Request, *ec2.DeleteNetworkAclOutput)

	// DeleteNetworkAclWithContextFunc mocks the DeleteNetworkAclWithContext method.
	DeleteNetworkAclWithContextFunc func(in1 context.Context, in2 *ec2.DeleteNetworkAclInput, in3 ...request.Option) (*ec2.DeleteNetworkAclOutput, error)

	// DeleteNetworkInterfaceFunc mocks the DeleteNetworkInterface method.
	DeleteNetworkInterfaceFunc func(in1 *ec2.DeleteNetworkInterfaceInput) (*ec2.DeleteNetworkInterfaceOutput, error)

	// DeleteNetworkInterfacePermissionFunc mocks the DeleteNetworkInterfacePermission method.
	DeleteNetworkInterfacePermissionFunc func(in1 *ec2.DeleteNetworkInterfacePermissionInput) (*ec2.DeleteNetworkInterfacePermissionOutput, error)

	// DeleteNetworkInterfacePermissionRequestFunc mocks the DeleteNetworkInterfacePermissionRequest method.
	DeleteNetworkInterfacePermissionRequestFunc func(in1 *ec2.DeleteNetworkInterfacePermissionInput) (*request.Request, *ec2.DeleteNetworkInterfacePermissionOutput)

	// DeleteNetworkInterfacePermissionWithContextFunc mocks the DeleteNetworkInterfacePermissionWithContext method.
	DeleteNetworkInterfacePermissionWithContextFunc func(in1 context.Context, in2 *ec2.DeleteNetworkInterfacePermissionInput, in3 ...request.Option) (*ec2.DeleteNetworkInterfacePermissionOutput, error)

	// DeleteNetworkInterfaceRequestFunc mocks the DeleteNetworkInterfaceRequest method.
	DeleteNetworkInterfaceRequestFunc func(in1 *ec2.DeleteNetworkInterfaceInput) (*request.Request, *ec2.DeleteNetworkInterfaceOutput)

	// DeleteNetworkInterfaceWithContextFunc mocks the DeleteNetworkInterfaceWithContext method.
	DeleteNetworkInterfaceWithContextFunc func(in1 context.Context, in2 *ec2.DeleteNetworkInterfaceInput, in3 ...request.Option) (*ec2.DeleteNetworkInterfaceOutput, error)

	// DeletePlacementGroupFunc mocks the DeletePlacementGroup method.
	DeletePlacementGroupFunc func(in1 *ec2.DeletePlacementGroupInput) (*ec2.DeletePlacementGroupOutput, error)

	// DeletePlacementGroupRequestFunc mocks the DeletePlacementGroupRequest method.
	DeletePlacementGroupRequestFunc func(in1 *ec2.DeletePlacementGroupInput) (*request.Request, *ec2.DeletePlacementGroupOutput)

	// DeletePlacementGroupWithContextFunc mocks the DeletePlacementGroupWithContext method.
	DeletePlacementGroupWithContextFunc func(in1 context.Context, in2 *ec2.DeletePlacementGroupInput, in3 ...request.Option) (*ec2.DeletePlacementGroupOutput, error)

	// DeleteQueuedReservedInstancesFunc mocks the DeleteQueuedReservedInstances method.
	DeleteQueuedReservedInstancesFunc func(in1 *ec2.DeleteQueuedReservedInstancesInput) (*ec2.DeleteQueuedReservedInstancesOutput, error)

	// DeleteQueuedReservedInstancesRequestFunc mocks the DeleteQueuedReservedInstancesRequest method.
	DeleteQueuedReservedInstancesRequestFunc func(in1 *ec2.DeleteQueuedReservedInstancesInput) (*request.Request, *ec2.DeleteQueuedReservedInstancesOutput)

	// DeleteQueuedReservedInstancesWithContextFunc mocks the DeleteQueuedReservedInstancesWithContext method.
	DeleteQueuedReservedInstancesWithContextFunc func(in1 context.Context, in2 *ec2.DeleteQueuedReservedInstancesInput, in3 ...request.Option) (*ec2.DeleteQueuedReservedInstancesOutput, error)

	// DeleteRouteFunc mocks the DeleteRoute method.
	DeleteRouteFunc func(in1 *ec2.DeleteRouteInput) (*ec2.DeleteRouteOutput, error)

	// DeleteRouteRequestFunc mocks the DeleteRouteRequest method.
	DeleteRouteRequestFunc func(in1 *ec2.DeleteRouteInput) (*request.Request, *ec2.DeleteRouteOutput)

	// DeleteRouteTableFunc mocks the DeleteRouteTable method.
	DeleteRouteTableFunc func(in1 *ec2.DeleteRouteTableInput) (*ec2.DeleteRouteTableOutput, error)

	// DeleteRouteTableRequestFunc mocks the DeleteRouteTableRequest method.
	DeleteRouteTableRequestFunc func(in1 *ec2.DeleteRouteTableInput) (*request.Request, *ec2.DeleteRouteTableOutput)

	// DeleteRouteTableWithContextFunc mocks the DeleteRouteTableWithContext method.
	DeleteRouteTableWithContextFunc func(in1 context.Context, in2 *ec2.DeleteRouteTableInput, in3 ...request.Option) (*ec2.DeleteRouteTableOutput, error)

	// DeleteRouteWithContextFunc mocks the DeleteRouteWithContext method.
	DeleteRouteWithContextFunc func(in1 context.Context, in2 *ec2.DeleteRouteInput, in3 ...request.Option) (*ec2.DeleteRouteOutput, error)

	// DeleteSecurityGroupFunc mocks the DeleteSecurityGroup method.
	DeleteSecurityGroupFunc func(in1 *ec2.DeleteSecurityGroupInput) (*ec2.DeleteSecurityGroupOutput, error)

	// DeleteSecurityGroupRequestFunc mocks the DeleteSecurityGroupRequest method.
	DeleteSecurityGroupRequestFunc func(in1 *ec2.DeleteSecurityGroupInput) (*request.Request, *ec2.DeleteSecurityGroupOutput)

	// DeleteSecurityGroupWithContextFunc mocks the DeleteSecurityGroupWithContext method.
	DeleteSecurityGroupWithContextFunc func(in1 context.Context, in2 *ec2.DeleteSecurityGroupInput, in3 ...request.Option) (*ec2.DeleteSecurityGroupOutput, error)

	// DeleteSnapshotFunc mocks the DeleteSnapshot method.
	DeleteSnapshotFunc func(in1 *ec2.DeleteSnapshotInput) (*ec2.DeleteSnapshotOutput, error)

	// DeleteSnapshotRequestFunc mocks the DeleteSnapshotRequest method.
	DeleteSnapshotRequestFunc func(in1 *ec2.DeleteSnapshotInput) (*request.Request, *ec2.DeleteSnapshotOutput)

	// DeleteSnapshotWithContextFunc mocks the DeleteSnapshotWithContext method.
	DeleteSnapshotWithContextFunc func(in1 context.Context, in2 *ec2.DeleteSnapshotInput, in3 ...request.Option) (*ec2.DeleteSnapshotOutput, error)

	// DeleteSpotDatafeedSubscriptionFunc mocks the DeleteSpotDatafeedSubscription method.
	DeleteSpotDatafeedSubscriptionFunc func(in1 *ec2.DeleteSpotDatafeedSubscriptionInput) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error)

	// DeleteSpotDatafeedSubscriptionRequestFunc mocks the DeleteSpotDatafeedSubscriptionRequest method.
	DeleteSpotDatafeedSubscriptionRequestFunc func(in1 *ec2.DeleteSpotDatafeedSubscriptionInput) (*request.Request, *ec2.DeleteSpotDatafeedSubscriptionOutput)

	// DeleteSpotDatafeedSubscriptionWithContextFunc mocks the DeleteSpotDatafeedSubscriptionWithContext method.
	DeleteSpotDatafeedSubscriptionWithContextFunc func(in1 context.Context, in2 *ec2.DeleteSpotDatafeedSubscriptionInput, in3 ...request.Option) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error)

	// DeleteSubnetFunc mocks the DeleteSubnet method.
	DeleteSubnetFunc func(in1 *ec2.DeleteSubnetInput) (*ec2.DeleteSubnetOutput, error)

	// DeleteSubnetRequestFunc mocks the DeleteSubnetRequest method.
	DeleteSubnetRequestFunc func(in1 *ec2.DeleteSubnetInput) (*request.Request, *ec2.DeleteSubnetOutput)

	// DeleteSubnetWithContextFunc mocks the DeleteSubnetWithContext method.
	DeleteSubnetWithContextFunc func(in1 context.Context, in2 *ec2.DeleteSubnetInput, in3 ...request.Option) (*ec2.DeleteSubnetOutput, error)

	// DeleteTagsFunc mocks the DeleteTags method.
	DeleteTagsFunc func(in1 *ec2.DeleteTagsInput) (*ec2.DeleteTagsOutput, error)

	// DeleteTagsRequestFunc mocks the DeleteTagsRequest method.
	DeleteTagsRequestFunc func(in1 *ec2.DeleteTagsInput) (*request.Request, *ec2.DeleteTagsOutput)

	// DeleteTagsWithContextFunc mocks the DeleteTagsWithContext method.
	DeleteTagsWithContextFunc func(in1 context.Context, in2 *ec2.DeleteTagsInput, in3 ...request.Option) (*ec2.DeleteTagsOutput, error)

	// DeleteTrafficMirrorFilterFunc mocks the DeleteTrafficMirrorFilter method.
	DeleteTrafficMirrorFilterFunc func(in1 *ec2.DeleteTrafficMirrorFilterInput) (*ec2.DeleteTrafficMirrorFilterOutput, error)

	// DeleteTrafficMirrorFilterRequestFunc mocks the DeleteTrafficMirrorFilterRequest method.
	DeleteTrafficMirrorFilterRequestFunc func(in1 *ec2.DeleteTrafficMirrorFilterInput) (*request.Request, *ec2.DeleteTrafficMirrorFilterOutput)

	// DeleteTrafficMirrorFilterRuleFunc mocks the DeleteTrafficMirrorFilterRule method.
	DeleteTrafficMirrorFilterRuleFunc func(in1 *ec2.DeleteTrafficMirrorFilterRuleInput) (*ec2.DeleteTrafficMirrorFilterRuleOutput, error)

	// DeleteTrafficMirrorFilterRuleRequestFunc mocks the DeleteTrafficMirrorFilterRuleRequest method.
	DeleteTrafficMirrorFilterRuleRequestFunc func(in1 *ec2.DeleteTrafficMirrorFilterRuleInput) (*request.Request, *ec2.DeleteTrafficMirrorFilterRuleOutput)

	// DeleteTrafficMirrorFilterRuleWithContextFunc mocks the DeleteTrafficMirrorFilterRuleWithContext method.
	DeleteTrafficMirrorFilterRuleWithContextFunc func(in1 context.Context, in2 *ec2.DeleteTrafficMirrorFilterRuleInput, in3 ...request.Option) (*ec2.DeleteTrafficMirrorFilterRuleOutput, error)

	// DeleteTrafficMirrorFilterWithContextFunc mocks the DeleteTrafficMirrorFilterWithContext method.
	DeleteTrafficMirrorFilterWithContextFunc func(in1 context.Context, in2 *ec2.DeleteTrafficMirrorFilterInput, in3 ...request.Option) (*ec2.DeleteTrafficMirrorFilterOutput, error)

	// DeleteTrafficMirrorSessionFunc mocks the DeleteTrafficMirrorSession method.
	DeleteTrafficMirrorSessionFunc func(in1 *ec2.DeleteTrafficMirrorSessionInput) (*ec2.DeleteTrafficMirrorSessionOutput, error)

	// DeleteTrafficMirrorSessionRequestFunc mocks the DeleteTrafficMirrorSessionRequest method.
	DeleteTrafficMirrorSessionRequestFunc func(in1 *ec2.DeleteTrafficMirrorSessionInput) (*request.Request, *ec2.DeleteTrafficMirrorSessionOutput)

	// DeleteTrafficMirrorSessionWithContextFunc mocks the DeleteTrafficMirrorSessionWithContext method.
	DeleteTrafficMirrorSessionWithContextFunc func(in1 context.Context, in2 *ec2.DeleteTrafficMirrorSessionInput, in3 ...request.Option) (*ec2.DeleteTrafficMirrorSessionOutput, error)

	// DeleteTrafficMirrorTargetFunc mocks the DeleteTrafficMirrorTarget method.
	DeleteTrafficMirrorTargetFunc func(in1 *ec2.DeleteTrafficMirrorTargetInput) (*ec2.DeleteTrafficMirrorTargetOutput, error)

	// DeleteTrafficMirrorTargetRequestFunc mocks the DeleteTrafficMirrorTargetRequest method.
	DeleteTrafficMirrorTargetRequestFunc func(in1 *ec2.DeleteTrafficMirrorTargetInput) (*request.Request, *ec2.DeleteTrafficMirrorTargetOutput)

	// DeleteTrafficMirrorTargetWithContextFunc mocks the DeleteTrafficMirrorTargetWithContext method.
	DeleteTrafficMirrorTargetWithContextFunc func(in1 context.Context, in2 *ec2.DeleteTrafficMirrorTargetInput, in3 ...request.Option) (*ec2.DeleteTrafficMirrorTargetOutput, error)

	// DeleteTransitGatewayFunc mocks the DeleteTransitGateway method.
	DeleteTransitGatewayFunc func(in1 *ec2.DeleteTransitGatewayInput) (*ec2.DeleteTransitGatewayOutput, error)

	// DeleteTransitGatewayMulticastDomainFunc mocks the DeleteTransitGatewayMulticastDomain method.
	DeleteTransitGatewayMulticastDomainFunc func(in1 *ec2.DeleteTransitGatewayMulticastDomainInput) (*ec2.DeleteTransitGatewayMulticastDomainOutput, error)

	// DeleteTransitGatewayMulticastDomainRequestFunc mocks the DeleteTransitGatewayMulticastDomainRequest method.
	DeleteTransitGatewayMulticastDomainRequestFunc func(in1 *ec2.DeleteTransitGatewayMulticastDomainInput) (*request.Request, *ec2.DeleteTransitGatewayMulticastDomainOutput)

	// DeleteTransitGatewayMulticastDomainWithContextFunc mocks the DeleteTransitGatewayMulticastDomainWithContext method.
	DeleteTransitGatewayMulticastDomainWithContextFunc func(in1 context.Context, in2 *ec2.DeleteTransitGatewayMulticastDomainInput, in3 ...request.Option) (*ec2.DeleteTransitGatewayMulticastDomainOutput, error)

	// DeleteTransitGatewayPeeringAttachmentFunc mocks the DeleteTransitGatewayPeeringAttachment method.
	DeleteTransitGatewayPeeringAttachmentFunc func(in1 *ec2.DeleteTransitGatewayPeeringAttachmentInput) (*ec2.DeleteTransitGatewayPeeringAttachmentOutput, error)

	// DeleteTransitGatewayPeeringAttachmentRequestFunc mocks the DeleteTransitGatewayPeeringAttachmentRequest method.
	DeleteTransitGatewayPeeringAttachmentRequestFunc func(in1 *ec2.DeleteTransitGatewayPeeringAttachmentInput) (*request.Request, *ec2.DeleteTransitGatewayPeeringAttachmentOutput)

	// DeleteTransitGatewayPeeringAttachmentWithContextFunc mocks the DeleteTransitGatewayPeeringAttachmentWithContext method.
	DeleteTransitGatewayPeeringAttachmentWithContextFunc func(in1 context.Context, in2 *ec2.DeleteTransitGatewayPeeringAttachmentInput, in3 ...request.Option) (*ec2.DeleteTransitGatewayPeeringAttachmentOutput, error)

	// DeleteTransitGatewayRequestFunc mocks the DeleteTransitGatewayRequest method.
	DeleteTransitGatewayRequestFunc func(in1 *ec2.DeleteTransitGatewayInput) (*request.Request, *ec2.DeleteTransitGatewayOutput)

	// DeleteTransitGatewayRouteFunc mocks the DeleteTransitGatewayRoute method.
	DeleteTransitGatewayRouteFunc func(in1 *ec2.DeleteTransitGatewayRouteInput) (*ec2.DeleteTransitGatewayRouteOutput, error)

	// DeleteTransitGatewayRouteRequestFunc mocks the DeleteTransitGatewayRouteRequest method.
	DeleteTransitGatewayRouteRequestFunc func(in1 *ec2.DeleteTransitGatewayRouteInput) (*request.Request, *ec2.DeleteTransitGatewayRouteOutput)

	// DeleteTransitGatewayRouteTableFunc mocks the DeleteTransitGatewayRouteTable method.
	DeleteTransitGatewayRouteTableFunc func(in1 *ec2.DeleteTransitGatewayRouteTableInput) (*ec2.DeleteTransitGatewayRouteTableOutput, error)

	// DeleteTransitGatewayRouteTableRequestFunc mocks the DeleteTransitGatewayRouteTableRequest method.
	DeleteTransitGatewayRouteTableRequestFunc func(in1 *ec2.DeleteTransitGatewayRouteTableInput) (*request.Request, *ec2.DeleteTransitGatewayRouteTableOutput)

	// DeleteTransitGatewayRouteTableWithContextFunc mocks the DeleteTransitGatewayRouteTableWithContext method.
	DeleteTransitGatewayRouteTableWithContextFunc func(in1 context.Context, in2 *ec2.DeleteTransitGatewayRouteTableInput, in3 ...request.Option) (*ec2.DeleteTransitGatewayRouteTableOutput, error)

	// DeleteTransitGatewayRouteWithContextFunc mocks the DeleteTransitGatewayRouteWithContext method.
	DeleteTransitGatewayRouteWithContextFunc func(in1 context.Context, in2 *ec2.DeleteTransitGatewayRouteInput, in3 ...request.Option) (*ec2.DeleteTransitGatewayRouteOutput, error)

	// DeleteTransitGatewayVpcAttachmentFunc mocks the DeleteTransitGatewayVpcAttachment method.
	DeleteTransitGatewayVpcAttachmentFunc func(in1 *ec2.DeleteTransitGatewayVpcAttachmentInput) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error)

	// DeleteTransitGatewayVpcAttachmentRequestFunc mocks the DeleteTransitGatewayVpcAttachmentRequest method.
	DeleteTransitGatewayVpcAttachmentRequestFunc func(in1 *ec2.DeleteTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.DeleteTransitGatewayVpcAttachmentOutput)

	// DeleteTransitGatewayVpcAttachmentWithContextFunc mocks the DeleteTransitGatewayVpcAttachmentWithContext method.
	DeleteTransitGatewayVpcAttachmentWithContextFunc func(in1 context.Context, in2 *ec2.DeleteTransitGatewayVpcAttachmentInput, in3 ...request.Option) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error)

	// DeleteTransitGatewayWithContextFunc mocks the DeleteTransitGatewayWithContext method.
	DeleteTransitGatewayWithContextFunc func(in1 context.Context, in2 *ec2.DeleteTransitGatewayInput, in3 ...request.Option) (*ec2.DeleteTransitGatewayOutput, error)

	// DeleteVolumeFunc mocks the DeleteVolume method.
	DeleteVolumeFunc func(in1 *ec2.DeleteVolumeInput) (*ec2.DeleteVolumeOutput, error)

	// DeleteVolumeRequestFunc mocks the DeleteVolumeRequest method.
	DeleteVolumeRequestFunc func(in1 *ec2.DeleteVolumeInput) (*request.Request, *ec2.DeleteVolumeOutput)

	// DeleteVolumeWithContextFunc mocks the DeleteVolumeWithContext method.
	DeleteVolumeWithContextFunc func(in1 context.Context, in2 *ec2.DeleteVolumeInput, in3 ...request.Option) (*ec2.DeleteVolumeOutput, error)

	// DeleteVpcFunc mocks the DeleteVpc method.
	DeleteVpcFunc func(in1 *ec2.DeleteVpcInput) (*ec2.DeleteVpcOutput, error)

	// DeleteVpcEndpointConnectionNotificationsFunc mocks the DeleteVpcEndpointConnectionNotifications method.
	DeleteVpcEndpointConnectionNotificationsFunc func(in1 *ec2.DeleteVpcEndpointConnectionNotificationsInput) (*ec2.DeleteVpcEndpointConnectionNotificationsOutput, error)

	// DeleteVpcEndpointConnectionNotificationsRequestFunc mocks the DeleteVpcEndpointConnectionNotificationsRequest method.
	DeleteVpcEndpointConnectionNotificationsRequestFunc func(in1 *ec2.DeleteVpcEndpointConnectionNotificationsInput) (*request.Request, *ec2.DeleteVpcEndpointConnectionNotificationsOutput)

	// DeleteVpcEndpointConnectionNotificationsWithContextFunc mocks the DeleteVpcEndpointConnectionNotificationsWithContext method.
	DeleteVpcEndpointConnectionNotificationsWithContextFunc func(in1 context.Context, in2 *ec2.DeleteVpcEndpointConnectionNotificationsInput, in3 ...request.Option) (*ec2.DeleteVpcEndpointConnectionNotificationsOutput, error)

	// DeleteVpcEndpointServiceConfigurationsFunc mocks the DeleteVpcEndpointServiceConfigurations method.
	DeleteVpcEndpointServiceConfigurationsFunc func(in1 *ec2.DeleteVpcEndpointServiceConfigurationsInput) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error)

	// DeleteVpcEndpointServiceConfigurationsRequestFunc mocks the DeleteVpcEndpointServiceConfigurationsRequest method.
	DeleteVpcEndpointServiceConfigurationsRequestFunc func(in1 *ec2.DeleteVpcEndpointServiceConfigurationsInput) (*request.Request, *ec2.DeleteVpcEndpointServiceConfigurationsOutput)

	// DeleteVpcEndpointServiceConfigurationsWithContextFunc mocks the DeleteVpcEndpointServiceConfigurationsWithContext method.
	DeleteVpcEndpointServiceConfigurationsWithContextFunc func(in1 context.Context, in2 *ec2.DeleteVpcEndpointServiceConfigurationsInput, in3 ...request.Option) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error)

	// DeleteVpcEndpointsFunc mocks the DeleteVpcEndpoints method.
	DeleteVpcEndpointsFunc func(in1 *ec2.DeleteVpcEndpointsInput) (*ec2.DeleteVpcEndpointsOutput, error)

	// DeleteVpcEndpointsRequestFunc mocks the DeleteVpcEndpointsRequest method.
	DeleteVpcEndpointsRequestFunc func(in1 *ec2.DeleteVpcEndpointsInput) (*request.Request, *ec2.DeleteVpcEndpointsOutput)

	// DeleteVpcEndpointsWithContextFunc mocks the DeleteVpcEndpointsWithContext method.
	DeleteVpcEndpointsWithContextFunc func(in1 context.Context, in2 *ec2.DeleteVpcEndpointsInput, in3 ...request.Option) (*ec2.DeleteVpcEndpointsOutput, error)

	// DeleteVpcPeeringConnectionFunc mocks the DeleteVpcPeeringConnection method.
	DeleteVpcPeeringConnectionFunc func(in1 *ec2.DeleteVpcPeeringConnectionInput) (*ec2.DeleteVpcPeeringConnectionOutput, error)

	// DeleteVpcPeeringConnectionRequestFunc mocks the DeleteVpcPeeringConnectionRequest method.
	DeleteVpcPeeringConnectionRequestFunc func(in1 *ec2.DeleteVpcPeeringConnectionInput) (*request.Request, *ec2.DeleteVpcPeeringConnectionOutput)

	// DeleteVpcPeeringConnectionWithContextFunc mocks the DeleteVpcPeeringConnectionWithContext method.
	DeleteVpcPeeringConnectionWithContextFunc func(in1 context.Context, in2 *ec2.DeleteVpcPeeringConnectionInput, in3 ...request.Option) (*ec2.DeleteVpcPeeringConnectionOutput, error)

	// DeleteVpcRequestFunc mocks the DeleteVpcRequest method.
	DeleteVpcRequestFunc func(in1 *ec2.DeleteVpcInput) (*request.Request, *ec2.DeleteVpcOutput)

	// DeleteVpcWithContextFunc mocks the DeleteVpcWithContext method.
	DeleteVpcWithContextFunc func(in1 context.Context, in2 *ec2.DeleteVpcInput, in3 ...request.Option) (*ec2.DeleteVpcOutput, error)

	// DeleteVpnConnectionFunc mocks the DeleteVpnConnection method.
	DeleteVpnConnectionFunc func(in1 *ec2.DeleteVpnConnectionInput) (*ec2.DeleteVpnConnectionOutput, error)

	// DeleteVpnConnectionRequestFunc mocks the DeleteVpnConnectionRequest method.
	DeleteVpnConnectionRequestFunc func(in1 *ec2.DeleteVpnConnectionInput) (*request.Request, *ec2.DeleteVpnConnectionOutput)

	// DeleteVpnConnectionRouteFunc mocks the DeleteVpnConnectionRoute method.
	DeleteVpnConnectionRouteFunc func(in1 *ec2.DeleteVpnConnectionRouteInput) (*ec2.DeleteVpnConnectionRouteOutput, error)

	// DeleteVpnConnectionRouteRequestFunc mocks the DeleteVpnConnectionRouteRequest method.
	DeleteVpnConnectionRouteRequestFunc func(in1 *ec2.DeleteVpnConnectionRouteInput) (*request.Request, *ec2.DeleteVpnConnectionRouteOutput)

	// DeleteVpnConnectionRouteWithContextFunc mocks the DeleteVpnConnectionRouteWithContext method.
	DeleteVpnConnectionRouteWithContextFunc func(in1 context.Context, in2 *ec2.DeleteVpnConnectionRouteInput, in3 ...request.Option) (*ec2.DeleteVpnConnectionRouteOutput, error)

	// DeleteVpnConnectionWithContextFunc mocks the DeleteVpnConnectionWithContext method.
	DeleteVpnConnectionWithContextFunc func(in1 context.Context, in2 *ec2.DeleteVpnConnectionInput, in3 ...request.Option) (*ec2.DeleteVpnConnectionOutput, error)

	// DeleteVpnGatewayFunc mocks the DeleteVpnGateway method.
	DeleteVpnGatewayFunc func(in1 *ec2.DeleteVpnGatewayInput) (*ec2.DeleteVpnGatewayOutput, error)

	// DeleteVpnGatewayRequestFunc mocks the DeleteVpnGatewayRequest method.
	DeleteVpnGatewayRequestFunc func(in1 *ec2.DeleteVpnGatewayInput) (*request.Request, *ec2.DeleteVpnGatewayOutput)

	// DeleteVpnGatewayWithContextFunc mocks the DeleteVpnGatewayWithContext method.
	DeleteVpnGatewayWithContextFunc func(in1 context.Context, in2 *ec2.DeleteVpnGatewayInput, in3 ...request.Option) (*ec2.DeleteVpnGatewayOutput, error)

	// DeprovisionByoipCidrFunc mocks the DeprovisionByoipCidr method.
	DeprovisionByoipCidrFunc func(in1 *ec2.DeprovisionByoipCidrInput) (*ec2.DeprovisionByoipCidrOutput, error)

	// DeprovisionByoipCidrRequestFunc mocks the DeprovisionByoipCidrRequest method.
	DeprovisionByoipCidrRequestFunc func(in1 *ec2.DeprovisionByoipCidrInput) (*request.Request, *ec2.DeprovisionByoipCidrOutput)

	// DeprovisionByoipCidrWithContextFunc mocks the DeprovisionByoipCidrWithContext method.
	DeprovisionByoipCidrWithContextFunc func(in1 context.Context, in2 *ec2.DeprovisionByoipCidrInput, in3 ...request.Option) (*ec2.DeprovisionByoipCidrOutput, error)

	// DeregisterImageFunc mocks the DeregisterImage method.
	DeregisterImageFunc func(in1 *ec2.DeregisterImageInput) (*ec2.DeregisterImageOutput, error)

	// DeregisterImageRequestFunc mocks the DeregisterImageRequest method.
	DeregisterImageRequestFunc func(in1 *ec2.DeregisterImageInput) (*request.Request, *ec2.DeregisterImageOutput)

	// DeregisterImageWithContextFunc mocks the DeregisterImageWithContext method.
	DeregisterImageWithContextFunc func(in1 context.Context, in2 *ec2.DeregisterImageInput, in3 ...request.Option) (*ec2.DeregisterImageOutput, error)

	// DeregisterTransitGatewayMulticastGroupMembersFunc mocks the DeregisterTransitGatewayMulticastGroupMembers method.
	DeregisterTransitGatewayMulticastGroupMembersFunc func(in1 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput) (*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput, error)

	// DeregisterTransitGatewayMulticastGroupMembersRequestFunc mocks the DeregisterTransitGatewayMulticastGroupMembersRequest method.
	DeregisterTransitGatewayMulticastGroupMembersRequestFunc func(in1 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput) (*request.Request, *ec2.DeregisterTransitGatewayMulticastGroupMembersOutput)

	// DeregisterTransitGatewayMulticastGroupMembersWithContextFunc mocks the DeregisterTransitGatewayMulticastGroupMembersWithContext method.
	DeregisterTransitGatewayMulticastGroupMembersWithContextFunc func(in1 context.Context, in2 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput, in3 ...request.Option) (*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput, error)

	// DeregisterTransitGatewayMulticastGroupSourcesFunc mocks the DeregisterTransitGatewayMulticastGroupSources method.
	DeregisterTransitGatewayMulticastGroupSourcesFunc func(in1 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput) (*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput, error)

	// DeregisterTransitGatewayMulticastGroupSourcesRequestFunc mocks the DeregisterTransitGatewayMulticastGroupSourcesRequest method.
	DeregisterTransitGatewayMulticastGroupSourcesRequestFunc func(in1 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput) (*request.Request, *ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput)

	// DeregisterTransitGatewayMulticastGroupSourcesWithContextFunc mocks the DeregisterTransitGatewayMulticastGroupSourcesWithContext method.
	DeregisterTransitGatewayMulticastGroupSourcesWithContextFunc func(in1 context.Context, in2 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput, in3 ...request.Option) (*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput, error)

	// DescribeAccountAttributesFunc mocks the DescribeAccountAttributes method.
	DescribeAccountAttributesFunc func(in1 *ec2.DescribeAccountAttributesInput) (*ec2.DescribeAccountAttributesOutput, error)

	// DescribeAccountAttributesRequestFunc mocks the DescribeAccountAttributesRequest method.
	DescribeAccountAttributesRequestFunc func(in1 *ec2.DescribeAccountAttributesInput) (*request.Request, *ec2.DescribeAccountAttributesOutput)

	// DescribeAccountAttributesWithContextFunc mocks the DescribeAccountAttributesWithContext method.
	DescribeAccountAttributesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeAccountAttributesInput, in3 ...request.Option) (*ec2.DescribeAccountAttributesOutput, error)

	// DescribeAddressesFunc mocks the DescribeAddresses method.
	DescribeAddressesFunc func(in1 *ec2.DescribeAddressesInput) (*ec2.DescribeAddressesOutput, error)

	// DescribeAddressesRequestFunc mocks the DescribeAddressesRequest method.
	DescribeAddressesRequestFunc func(in1 *ec2.DescribeAddressesInput) (*request.Request, *ec2.DescribeAddressesOutput)

	// DescribeAddressesWithContextFunc mocks the DescribeAddressesWithContext method.
	DescribeAddressesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeAddressesInput, in3 ...request.Option) (*ec2.DescribeAddressesOutput, error)

	// DescribeAggregateIdFormatFunc mocks the DescribeAggregateIdFormat method.
	DescribeAggregateIdFormatFunc func(in1 *ec2.DescribeAggregateIdFormatInput) (*ec2.DescribeAggregateIdFormatOutput, error)

	// DescribeAggregateIdFormatRequestFunc mocks the DescribeAggregateIdFormatRequest method.
	DescribeAggregateIdFormatRequestFunc func(in1 *ec2.DescribeAggregateIdFormatInput) (*request.Request, *ec2.DescribeAggregateIdFormatOutput)

	// DescribeAggregateIdFormatWithContextFunc mocks the DescribeAggregateIdFormatWithContext method.
	DescribeAggregateIdFormatWithContextFunc func(in1 context.Context, in2 *ec2.DescribeAggregateIdFormatInput, in3 ...request.Option) (*ec2.DescribeAggregateIdFormatOutput, error)

	// DescribeAvailabilityZonesFunc mocks the DescribeAvailabilityZones method.
	DescribeAvailabilityZonesFunc func(in1 *ec2.DescribeAvailabilityZonesInput) (*ec2.DescribeAvailabilityZonesOutput, error)

	// DescribeAvailabilityZonesRequestFunc mocks the DescribeAvailabilityZonesRequest method.
	DescribeAvailabilityZonesRequestFunc func(in1 *ec2.DescribeAvailabilityZonesInput) (*request.Request, *ec2.DescribeAvailabilityZonesOutput)

	// DescribeAvailabilityZonesWithContextFunc mocks the DescribeAvailabilityZonesWithContext method.
	DescribeAvailabilityZonesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeAvailabilityZonesInput, in3 ...request.Option) (*ec2.DescribeAvailabilityZonesOutput, error)

	// DescribeBundleTasksFunc mocks the DescribeBundleTasks method.
	DescribeBundleTasksFunc func(in1 *ec2.DescribeBundleTasksInput) (*ec2.DescribeBundleTasksOutput, error)

	// DescribeBundleTasksRequestFunc mocks the DescribeBundleTasksRequest method.
	DescribeBundleTasksRequestFunc func(in1 *ec2.DescribeBundleTasksInput) (*request.Request, *ec2.DescribeBundleTasksOutput)

	// DescribeBundleTasksWithContextFunc mocks the DescribeBundleTasksWithContext method.
	DescribeBundleTasksWithContextFunc func(in1 context.Context, in2 *ec2.DescribeBundleTasksInput, in3 ...request.Option) (*ec2.DescribeBundleTasksOutput, error)

	// DescribeByoipCidrsFunc mocks the DescribeByoipCidrs method.
	DescribeByoipCidrsFunc func(in1 *ec2.DescribeByoipCidrsInput) (*ec2.DescribeByoipCidrsOutput, error)

	// DescribeByoipCidrsPagesFunc mocks the DescribeByoipCidrsPages method.
	DescribeByoipCidrsPagesFunc func(in1 *ec2.DescribeByoipCidrsInput, in2 func(*ec2.DescribeByoipCidrsOutput, bool) bool) error

	// DescribeByoipCidrsPagesWithContextFunc mocks the DescribeByoipCidrsPagesWithContext method.
	DescribeByoipCidrsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeByoipCidrsInput, in3 func(*ec2.DescribeByoipCidrsOutput, bool) bool, in4 ...request.Option) error

	// DescribeByoipCidrsRequestFunc mocks the DescribeByoipCidrsRequest method.
	DescribeByoipCidrsRequestFunc func(in1 *ec2.DescribeByoipCidrsInput) (*request.Request, *ec2.DescribeByoipCidrsOutput)

	// DescribeByoipCidrsWithContextFunc mocks the DescribeByoipCidrsWithContext method.
	DescribeByoipCidrsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeByoipCidrsInput, in3 ...request.Option) (*ec2.DescribeByoipCidrsOutput, error)

	// DescribeCapacityReservationsFunc mocks the DescribeCapacityReservations method.
	DescribeCapacityReservationsFunc func(in1 *ec2.DescribeCapacityReservationsInput) (*ec2.DescribeCapacityReservationsOutput, error)

	// DescribeCapacityReservationsPagesFunc mocks the DescribeCapacityReservationsPages method.
	DescribeCapacityReservationsPagesFunc func(in1 *ec2.DescribeCapacityReservationsInput, in2 func(*ec2.DescribeCapacityReservationsOutput, bool) bool) error

	// DescribeCapacityReservationsPagesWithContextFunc mocks the DescribeCapacityReservationsPagesWithContext method.
	DescribeCapacityReservationsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeCapacityReservationsInput, in3 func(*ec2.DescribeCapacityReservationsOutput, bool) bool, in4 ...request.Option) error

	// DescribeCapacityReservationsRequestFunc mocks the DescribeCapacityReservationsRequest method.
	DescribeCapacityReservationsRequestFunc func(in1 *ec2.DescribeCapacityReservationsInput) (*request.Request, *ec2.DescribeCapacityReservationsOutput)

	// DescribeCapacityReservationsWithContextFunc mocks the DescribeCapacityReservationsWithContext method.
	DescribeCapacityReservationsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeCapacityReservationsInput, in3 ...request.Option) (*ec2.DescribeCapacityReservationsOutput, error)

	// DescribeClassicLinkInstancesFunc mocks the DescribeClassicLinkInstances method.
	DescribeClassicLinkInstancesFunc func(in1 *ec2.DescribeClassicLinkInstancesInput) (*ec2.DescribeClassicLinkInstancesOutput, error)

	// DescribeClassicLinkInstancesPagesFunc mocks the DescribeClassicLinkInstancesPages method.
	DescribeClassicLinkInstancesPagesFunc func(in1 *ec2.DescribeClassicLinkInstancesInput, in2 func(*ec2.DescribeClassicLinkInstancesOutput, bool) bool) error

	// DescribeClassicLinkInstancesPagesWithContextFunc mocks the DescribeClassicLinkInstancesPagesWithContext method.
	DescribeClassicLinkInstancesPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeClassicLinkInstancesInput, in3 func(*ec2.DescribeClassicLinkInstancesOutput, bool) bool, in4 ...request.Option) error

	// DescribeClassicLinkInstancesRequestFunc mocks the DescribeClassicLinkInstancesRequest method.
	DescribeClassicLinkInstancesRequestFunc func(in1 *ec2.DescribeClassicLinkInstancesInput) (*request.Request, *ec2.DescribeClassicLinkInstancesOutput)

	// DescribeClassicLinkInstancesWithContextFunc mocks the DescribeClassicLinkInstancesWithContext method.
	DescribeClassicLinkInstancesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeClassicLinkInstancesInput, in3 ...request.Option) (*ec2.DescribeClassicLinkInstancesOutput, error)

	// DescribeClientVpnAuthorizationRulesFunc mocks the DescribeClientVpnAuthorizationRules method.
	DescribeClientVpnAuthorizationRulesFunc func(in1 *ec2.DescribeClientVpnAuthorizationRulesInput) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error)

	// DescribeClientVpnAuthorizationRulesPagesFunc mocks the DescribeClientVpnAuthorizationRulesPages method.
	DescribeClientVpnAuthorizationRulesPagesFunc func(in1 *ec2.DescribeClientVpnAuthorizationRulesInput, in2 func(*ec2.DescribeClientVpnAuthorizationRulesOutput, bool) bool) error

	// DescribeClientVpnAuthorizationRulesPagesWithContextFunc mocks the DescribeClientVpnAuthorizationRulesPagesWithContext method.
	DescribeClientVpnAuthorizationRulesPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeClientVpnAuthorizationRulesInput, in3 func(*ec2.DescribeClientVpnAuthorizationRulesOutput, bool) bool, in4 ...request.Option) error

	// DescribeClientVpnAuthorizationRulesRequestFunc mocks the DescribeClientVpnAuthorizationRulesRequest method.
	DescribeClientVpnAuthorizationRulesRequestFunc func(in1 *ec2.DescribeClientVpnAuthorizationRulesInput) (*request.Request, *ec2.DescribeClientVpnAuthorizationRulesOutput)

	// DescribeClientVpnAuthorizationRulesWithContextFunc mocks the DescribeClientVpnAuthorizationRulesWithContext method.
	DescribeClientVpnAuthorizationRulesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeClientVpnAuthorizationRulesInput, in3 ...request.Option) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error)

	// DescribeClientVpnConnectionsFunc mocks the DescribeClientVpnConnections method.
	DescribeClientVpnConnectionsFunc func(in1 *ec2.DescribeClientVpnConnectionsInput) (*ec2.DescribeClientVpnConnectionsOutput, error)

	// DescribeClientVpnConnectionsPagesFunc mocks the DescribeClientVpnConnectionsPages method.
	DescribeClientVpnConnectionsPagesFunc func(in1 *ec2.DescribeClientVpnConnectionsInput, in2 func(*ec2.DescribeClientVpnConnectionsOutput, bool) bool) error

	// DescribeClientVpnConnectionsPagesWithContextFunc mocks the DescribeClientVpnConnectionsPagesWithContext method.
	DescribeClientVpnConnectionsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeClientVpnConnectionsInput, in3 func(*ec2.DescribeClientVpnConnectionsOutput, bool) bool, in4 ...request.Option) error

	// DescribeClientVpnConnectionsRequestFunc mocks the DescribeClientVpnConnectionsRequest method.
	DescribeClientVpnConnectionsRequestFunc func(in1 *ec2.DescribeClientVpnConnectionsInput) (*request.Request, *ec2.DescribeClientVpnConnectionsOutput)

	// DescribeClientVpnConnectionsWithContextFunc mocks the DescribeClientVpnConnectionsWithContext method.
	DescribeClientVpnConnectionsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeClientVpnConnectionsInput, in3 ...request.Option) (*ec2.DescribeClientVpnConnectionsOutput, error)

	// DescribeClientVpnEndpointsFunc mocks the DescribeClientVpnEndpoints method.
	DescribeClientVpnEndpointsFunc func(in1 *ec2.DescribeClientVpnEndpointsInput) (*ec2.DescribeClientVpnEndpointsOutput, error)

	// DescribeClientVpnEndpointsPagesFunc mocks the DescribeClientVpnEndpointsPages method.
	DescribeClientVpnEndpointsPagesFunc func(in1 *ec2.DescribeClientVpnEndpointsInput, in2 func(*ec2.DescribeClientVpnEndpointsOutput, bool) bool) error

	// DescribeClientVpnEndpointsPagesWithContextFunc mocks the DescribeClientVpnEndpointsPagesWithContext method.
	DescribeClientVpnEndpointsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeClientVpnEndpointsInput, in3 func(*ec2.DescribeClientVpnEndpointsOutput, bool) bool, in4 ...request.Option) error

	// DescribeClientVpnEndpointsRequestFunc mocks the DescribeClientVpnEndpointsRequest method.
	DescribeClientVpnEndpointsRequestFunc func(in1 *ec2.DescribeClientVpnEndpointsInput) (*request.Request, *ec2.DescribeClientVpnEndpointsOutput)

	// DescribeClientVpnEndpointsWithContextFunc mocks the DescribeClientVpnEndpointsWithContext method.
	DescribeClientVpnEndpointsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeClientVpnEndpointsInput, in3 ...request.Option) (*ec2.DescribeClientVpnEndpointsOutput, error)

	// DescribeClientVpnRoutesFunc mocks the DescribeClientVpnRoutes method.
	DescribeClientVpnRoutesFunc func(in1 *ec2.DescribeClientVpnRoutesInput) (*ec2.DescribeClientVpnRoutesOutput, error)

	// DescribeClientVpnRoutesPagesFunc mocks the DescribeClientVpnRoutesPages method.
	DescribeClientVpnRoutesPagesFunc func(in1 *ec2.DescribeClientVpnRoutesInput, in2 func(*ec2.DescribeClientVpnRoutesOutput, bool) bool) error

	// DescribeClientVpnRoutesPagesWithContextFunc mocks the DescribeClientVpnRoutesPagesWithContext method.
	DescribeClientVpnRoutesPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeClientVpnRoutesInput, in3 func(*ec2.DescribeClientVpnRoutesOutput, bool) bool, in4 ...request.Option) error

	// DescribeClientVpnRoutesRequestFunc mocks the DescribeClientVpnRoutesRequest method.
	DescribeClientVpnRoutesRequestFunc func(in1 *ec2.DescribeClientVpnRoutesInput) (*request.Request, *ec2.DescribeClientVpnRoutesOutput)

	// DescribeClientVpnRoutesWithContextFunc mocks the DescribeClientVpnRoutesWithContext method.
	DescribeClientVpnRoutesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeClientVpnRoutesInput, in3 ...request.Option) (*ec2.DescribeClientVpnRoutesOutput, error)

	// DescribeClientVpnTargetNetworksFunc mocks the DescribeClientVpnTargetNetworks method.
	DescribeClientVpnTargetNetworksFunc func(in1 *ec2.DescribeClientVpnTargetNetworksInput) (*ec2.DescribeClientVpnTargetNetworksOutput, error)

	// DescribeClientVpnTargetNetworksPagesFunc mocks the DescribeClientVpnTargetNetworksPages method.
	DescribeClientVpnTargetNetworksPagesFunc func(in1 *ec2.DescribeClientVpnTargetNetworksInput, in2 func(*ec2.DescribeClientVpnTargetNetworksOutput, bool) bool) error

	// DescribeClientVpnTargetNetworksPagesWithContextFunc mocks the DescribeClientVpnTargetNetworksPagesWithContext method.
	DescribeClientVpnTargetNetworksPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeClientVpnTargetNetworksInput, in3 func(*ec2.DescribeClientVpnTargetNetworksOutput, bool) bool, in4 ...request.Option) error

	// DescribeClientVpnTargetNetworksRequestFunc mocks the DescribeClientVpnTargetNetworksRequest method.
	DescribeClientVpnTargetNetworksRequestFunc func(in1 *ec2.DescribeClientVpnTargetNetworksInput) (*request.Request, *ec2.DescribeClientVpnTargetNetworksOutput)

	// DescribeClientVpnTargetNetworksWithContextFunc mocks the DescribeClientVpnTargetNetworksWithContext method.
	DescribeClientVpnTargetNetworksWithContextFunc func(in1 context.Context, in2 *ec2.DescribeClientVpnTargetNetworksInput, in3 ...request.Option) (*ec2.DescribeClientVpnTargetNetworksOutput, error)

	// DescribeCoipPoolsFunc mocks the DescribeCoipPools method.
	DescribeCoipPoolsFunc func(in1 *ec2.DescribeCoipPoolsInput) (*ec2.DescribeCoipPoolsOutput, error)

	// DescribeCoipPoolsRequestFunc mocks the DescribeCoipPoolsRequest method.
	DescribeCoipPoolsRequestFunc func(in1 *ec2.DescribeCoipPoolsInput) (*request.Request, *ec2.DescribeCoipPoolsOutput)

	// DescribeCoipPoolsWithContextFunc mocks the DescribeCoipPoolsWithContext method.
	DescribeCoipPoolsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeCoipPoolsInput, in3 ...request.Option) (*ec2.DescribeCoipPoolsOutput, error)

	// DescribeConversionTasksFunc mocks the DescribeConversionTasks method.
	DescribeConversionTasksFunc func(in1 *ec2.DescribeConversionTasksInput) (*ec2.DescribeConversionTasksOutput, error)

	// DescribeConversionTasksRequestFunc mocks the DescribeConversionTasksRequest method.
	DescribeConversionTasksRequestFunc func(in1 *ec2.DescribeConversionTasksInput) (*request.Request, *ec2.DescribeConversionTasksOutput)

	// DescribeConversionTasksWithContextFunc mocks the DescribeConversionTasksWithContext method.
	DescribeConversionTasksWithContextFunc func(in1 context.Context, in2 *ec2.DescribeConversionTasksInput, in3 ...request.Option) (*ec2.DescribeConversionTasksOutput, error)

	// DescribeCustomerGatewaysFunc mocks the DescribeCustomerGateways method.
	DescribeCustomerGatewaysFunc func(in1 *ec2.DescribeCustomerGatewaysInput) (*ec2.DescribeCustomerGatewaysOutput, error)

	// DescribeCustomerGatewaysRequestFunc mocks the DescribeCustomerGatewaysRequest method.
	DescribeCustomerGatewaysRequestFunc func(in1 *ec2.DescribeCustomerGatewaysInput) (*request.Request, *ec2.DescribeCustomerGatewaysOutput)

	// DescribeCustomerGatewaysWithContextFunc mocks the DescribeCustomerGatewaysWithContext method.
	DescribeCustomerGatewaysWithContextFunc func(in1 context.Context, in2 *ec2.DescribeCustomerGatewaysInput, in3 ...request.Option) (*ec2.DescribeCustomerGatewaysOutput, error)

	// DescribeDhcpOptionsFunc mocks the DescribeDhcpOptions method.
	DescribeDhcpOptionsFunc func(in1 *ec2.DescribeDhcpOptionsInput) (*ec2.DescribeDhcpOptionsOutput, error)

	// DescribeDhcpOptionsPagesFunc mocks the DescribeDhcpOptionsPages method.
	DescribeDhcpOptionsPagesFunc func(in1 *ec2.DescribeDhcpOptionsInput, in2 func(*ec2.DescribeDhcpOptionsOutput, bool) bool) error

	// DescribeDhcpOptionsPagesWithContextFunc mocks the DescribeDhcpOptionsPagesWithContext method.
	DescribeDhcpOptionsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeDhcpOptionsInput, in3 func(*ec2.DescribeDhcpOptionsOutput, bool) bool, in4 ...request.Option) error

	// DescribeDhcpOptionsRequestFunc mocks the DescribeDhcpOptionsRequest method.
	DescribeDhcpOptionsRequestFunc func(in1 *ec2.DescribeDhcpOptionsInput) (*request.Request, *ec2.DescribeDhcpOptionsOutput)

	// DescribeDhcpOptionsWithContextFunc mocks the DescribeDhcpOptionsWithContext method.
	DescribeDhcpOptionsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeDhcpOptionsInput, in3 ...request.Option) (*ec2.DescribeDhcpOptionsOutput, error)

	// DescribeEgressOnlyInternetGatewaysFunc mocks the DescribeEgressOnlyInternetGateways method.
	DescribeEgressOnlyInternetGatewaysFunc func(in1 *ec2.DescribeEgressOnlyInternetGatewaysInput) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error)

	// DescribeEgressOnlyInternetGatewaysPagesFunc mocks the DescribeEgressOnlyInternetGatewaysPages method.
	DescribeEgressOnlyInternetGatewaysPagesFunc func(in1 *ec2.DescribeEgressOnlyInternetGatewaysInput, in2 func(*ec2.DescribeEgressOnlyInternetGatewaysOutput, bool) bool) error

	// DescribeEgressOnlyInternetGatewaysPagesWithContextFunc mocks the DescribeEgressOnlyInternetGatewaysPagesWithContext method.
	DescribeEgressOnlyInternetGatewaysPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeEgressOnlyInternetGatewaysInput, in3 func(*ec2.DescribeEgressOnlyInternetGatewaysOutput, bool) bool, in4 ...request.Option) error

	// DescribeEgressOnlyInternetGatewaysRequestFunc mocks the DescribeEgressOnlyInternetGatewaysRequest method.
	DescribeEgressOnlyInternetGatewaysRequestFunc func(in1 *ec2.DescribeEgressOnlyInternetGatewaysInput) (*request.Request, *ec2.DescribeEgressOnlyInternetGatewaysOutput)

	// DescribeEgressOnlyInternetGatewaysWithContextFunc mocks the DescribeEgressOnlyInternetGatewaysWithContext method.
	DescribeEgressOnlyInternetGatewaysWithContextFunc func(in1 context.Context, in2 *ec2.DescribeEgressOnlyInternetGatewaysInput, in3 ...request.Option) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error)

	// DescribeElasticGpusFunc mocks the DescribeElasticGpus method.
	DescribeElasticGpusFunc func(in1 *ec2.DescribeElasticGpusInput) (*ec2.DescribeElasticGpusOutput, error)

	// DescribeElasticGpusRequestFunc mocks the DescribeElasticGpusRequest method.
	DescribeElasticGpusRequestFunc func(in1 *ec2.DescribeElasticGpusInput) (*request.Request, *ec2.DescribeElasticGpusOutput)

	// DescribeElasticGpusWithContextFunc mocks the DescribeElasticGpusWithContext method.
	DescribeElasticGpusWithContextFunc func(in1 context.Context, in2 *ec2.DescribeElasticGpusInput, in3 ...request.Option) (*ec2.DescribeElasticGpusOutput, error)

	// DescribeExportImageTasksFunc mocks the DescribeExportImageTasks method.
	DescribeExportImageTasksFunc func(in1 *ec2.DescribeExportImageTasksInput) (*ec2.DescribeExportImageTasksOutput, error)

	// DescribeExportImageTasksPagesFunc mocks the DescribeExportImageTasksPages method.
	DescribeExportImageTasksPagesFunc func(in1 *ec2.DescribeExportImageTasksInput, in2 func(*ec2.DescribeExportImageTasksOutput, bool) bool) error

	// DescribeExportImageTasksPagesWithContextFunc mocks the DescribeExportImageTasksPagesWithContext method.
	DescribeExportImageTasksPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeExportImageTasksInput, in3 func(*ec2.DescribeExportImageTasksOutput, bool) bool, in4 ...request.Option) error

	// DescribeExportImageTasksRequestFunc mocks the DescribeExportImageTasksRequest method.
	DescribeExportImageTasksRequestFunc func(in1 *ec2.DescribeExportImageTasksInput) (*request.Request, *ec2.DescribeExportImageTasksOutput)

	// DescribeExportImageTasksWithContextFunc mocks the DescribeExportImageTasksWithContext method.
	DescribeExportImageTasksWithContextFunc func(in1 context.Context, in2 *ec2.DescribeExportImageTasksInput, in3 ...request.Option) (*ec2.DescribeExportImageTasksOutput, error)

	// DescribeExportTasksFunc mocks the DescribeExportTasks method.
	DescribeExportTasksFunc func(in1 *ec2.DescribeExportTasksInput) (*ec2.DescribeExportTasksOutput, error)

	// DescribeExportTasksRequestFunc mocks the DescribeExportTasksRequest method.
	DescribeExportTasksRequestFunc func(in1 *ec2.DescribeExportTasksInput) (*request.Request, *ec2.DescribeExportTasksOutput)

	// DescribeExportTasksWithContextFunc mocks the DescribeExportTasksWithContext method.
	DescribeExportTasksWithContextFunc func(in1 context.Context, in2 *ec2.DescribeExportTasksInput, in3 ...request.Option) (*ec2.DescribeExportTasksOutput, error)

	// DescribeFastSnapshotRestoresFunc mocks the DescribeFastSnapshotRestores method.
	DescribeFastSnapshotRestoresFunc func(in1 *ec2.DescribeFastSnapshotRestoresInput) (*ec2.DescribeFastSnapshotRestoresOutput, error)

	// DescribeFastSnapshotRestoresPagesFunc mocks the DescribeFastSnapshotRestoresPages method.
	DescribeFastSnapshotRestoresPagesFunc func(in1 *ec2.DescribeFastSnapshotRestoresInput, in2 func(*ec2.DescribeFastSnapshotRestoresOutput, bool) bool) error

	// DescribeFastSnapshotRestoresPagesWithContextFunc mocks the DescribeFastSnapshotRestoresPagesWithContext method.
	DescribeFastSnapshotRestoresPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeFastSnapshotRestoresInput, in3 func(*ec2.DescribeFastSnapshotRestoresOutput, bool) bool, in4 ...request.Option) error

	// DescribeFastSnapshotRestoresRequestFunc mocks the DescribeFastSnapshotRestoresRequest method.
	DescribeFastSnapshotRestoresRequestFunc func(in1 *ec2.DescribeFastSnapshotRestoresInput) (*request.Request, *ec2.DescribeFastSnapshotRestoresOutput)

	// DescribeFastSnapshotRestoresWithContextFunc mocks the DescribeFastSnapshotRestoresWithContext method.
	DescribeFastSnapshotRestoresWithContextFunc func(in1 context.Context, in2 *ec2.DescribeFastSnapshotRestoresInput, in3 ...request.Option) (*ec2.DescribeFastSnapshotRestoresOutput, error)

	// DescribeFleetHistoryFunc mocks the DescribeFleetHistory method.
	DescribeFleetHistoryFunc func(in1 *ec2.DescribeFleetHistoryInput) (*ec2.DescribeFleetHistoryOutput, error)

	// DescribeFleetHistoryRequestFunc mocks the DescribeFleetHistoryRequest method.
	DescribeFleetHistoryRequestFunc func(in1 *ec2.DescribeFleetHistoryInput) (*request.Request, *ec2.DescribeFleetHistoryOutput)

	// DescribeFleetHistoryWithContextFunc mocks the DescribeFleetHistoryWithContext method.
	DescribeFleetHistoryWithContextFunc func(in1 context.Context, in2 *ec2.DescribeFleetHistoryInput, in3 ...request.Option) (*ec2.DescribeFleetHistoryOutput, error)

	// DescribeFleetInstancesFunc mocks the DescribeFleetInstances method.
	DescribeFleetInstancesFunc func(in1 *ec2.DescribeFleetInstancesInput) (*ec2.DescribeFleetInstancesOutput, error)

	// DescribeFleetInstancesRequestFunc mocks the DescribeFleetInstancesRequest method.
	DescribeFleetInstancesRequestFunc func(in1 *ec2.DescribeFleetInstancesInput) (*request.Request, *ec2.DescribeFleetInstancesOutput)

	// DescribeFleetInstancesWithContextFunc mocks the DescribeFleetInstancesWithContext method.
	DescribeFleetInstancesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeFleetInstancesInput, in3 ...request.Option) (*ec2.DescribeFleetInstancesOutput, error)

	// DescribeFleetsFunc mocks the DescribeFleets method.
	DescribeFleetsFunc func(in1 *ec2.DescribeFleetsInput) (*ec2.DescribeFleetsOutput, error)

	// DescribeFleetsPagesFunc mocks the DescribeFleetsPages method.
	DescribeFleetsPagesFunc func(in1 *ec2.DescribeFleetsInput, in2 func(*ec2.DescribeFleetsOutput, bool) bool) error

	// DescribeFleetsPagesWithContextFunc mocks the DescribeFleetsPagesWithContext method.
	DescribeFleetsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeFleetsInput, in3 func(*ec2.DescribeFleetsOutput, bool) bool, in4 ...request.Option) error

	// DescribeFleetsRequestFunc mocks the DescribeFleetsRequest method.
	DescribeFleetsRequestFunc func(in1 *ec2.DescribeFleetsInput) (*request.Request, *ec2.DescribeFleetsOutput)

	// DescribeFleetsWithContextFunc mocks the DescribeFleetsWithContext method.
	DescribeFleetsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeFleetsInput, in3 ...request.Option) (*ec2.DescribeFleetsOutput, error)

	// DescribeFlowLogsFunc mocks the DescribeFlowLogs method.
	DescribeFlowLogsFunc func(in1 *ec2.DescribeFlowLogsInput) (*ec2.DescribeFlowLogsOutput, error)

	// DescribeFlowLogsPagesFunc mocks the DescribeFlowLogsPages method.
	DescribeFlowLogsPagesFunc func(in1 *ec2.DescribeFlowLogsInput, in2 func(*ec2.DescribeFlowLogsOutput, bool) bool) error

	// DescribeFlowLogsPagesWithContextFunc mocks the DescribeFlowLogsPagesWithContext method.
	DescribeFlowLogsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeFlowLogsInput, in3 func(*ec2.DescribeFlowLogsOutput, bool) bool, in4 ...request.Option) error

	// DescribeFlowLogsRequestFunc mocks the DescribeFlowLogsRequest method.
	DescribeFlowLogsRequestFunc func(in1 *ec2.DescribeFlowLogsInput) (*request.Request, *ec2.DescribeFlowLogsOutput)

	// DescribeFlowLogsWithContextFunc mocks the DescribeFlowLogsWithContext method.
	DescribeFlowLogsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeFlowLogsInput, in3 ...request.Option) (*ec2.DescribeFlowLogsOutput, error)

	// DescribeFpgaImageAttributeFunc mocks the DescribeFpgaImageAttribute method.
	DescribeFpgaImageAttributeFunc func(in1 *ec2.DescribeFpgaImageAttributeInput) (*ec2.DescribeFpgaImageAttributeOutput, error)

	// DescribeFpgaImageAttributeRequestFunc mocks the DescribeFpgaImageAttributeRequest method.
	DescribeFpgaImageAttributeRequestFunc func(in1 *ec2.DescribeFpgaImageAttributeInput) (*request.Request, *ec2.DescribeFpgaImageAttributeOutput)

	// DescribeFpgaImageAttributeWithContextFunc mocks the DescribeFpgaImageAttributeWithContext method.
	DescribeFpgaImageAttributeWithContextFunc func(in1 context.Context, in2 *ec2.DescribeFpgaImageAttributeInput, in3 ...request.Option) (*ec2.DescribeFpgaImageAttributeOutput, error)

	// DescribeFpgaImagesFunc mocks the DescribeFpgaImages method.
	DescribeFpgaImagesFunc func(in1 *ec2.DescribeFpgaImagesInput) (*ec2.DescribeFpgaImagesOutput, error)

	// DescribeFpgaImagesPagesFunc mocks the DescribeFpgaImagesPages method.
	DescribeFpgaImagesPagesFunc func(in1 *ec2.DescribeFpgaImagesInput, in2 func(*ec2.DescribeFpgaImagesOutput, bool) bool) error

	// DescribeFpgaImagesPagesWithContextFunc mocks the DescribeFpgaImagesPagesWithContext method.
	DescribeFpgaImagesPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeFpgaImagesInput, in3 func(*ec2.DescribeFpgaImagesOutput, bool) bool, in4 ...request.Option) error

	// DescribeFpgaImagesRequestFunc mocks the DescribeFpgaImagesRequest method.
	DescribeFpgaImagesRequestFunc func(in1 *ec2.DescribeFpgaImagesInput) (*request.Request, *ec2.DescribeFpgaImagesOutput)

	// DescribeFpgaImagesWithContextFunc mocks the DescribeFpgaImagesWithContext method.
	DescribeFpgaImagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeFpgaImagesInput, in3 ...request.Option) (*ec2.DescribeFpgaImagesOutput, error)

	// DescribeHostReservationOfferingsFunc mocks the DescribeHostReservationOfferings method.
	DescribeHostReservationOfferingsFunc func(in1 *ec2.DescribeHostReservationOfferingsInput) (*ec2.DescribeHostReservationOfferingsOutput, error)

	// DescribeHostReservationOfferingsPagesFunc mocks the DescribeHostReservationOfferingsPages method.
	DescribeHostReservationOfferingsPagesFunc func(in1 *ec2.DescribeHostReservationOfferingsInput, in2 func(*ec2.DescribeHostReservationOfferingsOutput, bool) bool) error

	// DescribeHostReservationOfferingsPagesWithContextFunc mocks the DescribeHostReservationOfferingsPagesWithContext method.
	DescribeHostReservationOfferingsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeHostReservationOfferingsInput, in3 func(*ec2.DescribeHostReservationOfferingsOutput, bool) bool, in4 ...request.Option) error

	// DescribeHostReservationOfferingsRequestFunc mocks the DescribeHostReservationOfferingsRequest method.
	DescribeHostReservationOfferingsRequestFunc func(in1 *ec2.DescribeHostReservationOfferingsInput) (*request.Request, *ec2.DescribeHostReservationOfferingsOutput)

	// DescribeHostReservationOfferingsWithContextFunc mocks the DescribeHostReservationOfferingsWithContext method.
	DescribeHostReservationOfferingsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeHostReservationOfferingsInput, in3 ...request.Option) (*ec2.DescribeHostReservationOfferingsOutput, error)

	// DescribeHostReservationsFunc mocks the DescribeHostReservations method.
	DescribeHostReservationsFunc func(in1 *ec2.DescribeHostReservationsInput) (*ec2.DescribeHostReservationsOutput, error)

	// DescribeHostReservationsPagesFunc mocks the DescribeHostReservationsPages method.
	DescribeHostReservationsPagesFunc func(in1 *ec2.DescribeHostReservationsInput, in2 func(*ec2.DescribeHostReservationsOutput, bool) bool) error

	// DescribeHostReservationsPagesWithContextFunc mocks the DescribeHostReservationsPagesWithContext method.
	DescribeHostReservationsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeHostReservationsInput, in3 func(*ec2.DescribeHostReservationsOutput, bool) bool, in4 ...request.Option) error

	// DescribeHostReservationsRequestFunc mocks the DescribeHostReservationsRequest method.
	DescribeHostReservationsRequestFunc func(in1 *ec2.DescribeHostReservationsInput) (*request.Request, *ec2.DescribeHostReservationsOutput)

	// DescribeHostReservationsWithContextFunc mocks the DescribeHostReservationsWithContext method.
	DescribeHostReservationsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeHostReservationsInput, in3 ...request.Option) (*ec2.DescribeHostReservationsOutput, error)

	// DescribeHostsFunc mocks the DescribeHosts method.
	DescribeHostsFunc func(in1 *ec2.DescribeHostsInput) (*ec2.DescribeHostsOutput, error)

	// DescribeHostsPagesFunc mocks the DescribeHostsPages method.
	DescribeHostsPagesFunc func(in1 *ec2.DescribeHostsInput, in2 func(*ec2.DescribeHostsOutput, bool) bool) error

	// DescribeHostsPagesWithContextFunc mocks the DescribeHostsPagesWithContext method.
	DescribeHostsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeHostsInput, in3 func(*ec2.DescribeHostsOutput, bool) bool, in4 ...request.Option) error

	// DescribeHostsRequestFunc mocks the DescribeHostsRequest method.
	DescribeHostsRequestFunc func(in1 *ec2.DescribeHostsInput) (*request.Request, *ec2.DescribeHostsOutput)

	// DescribeHostsWithContextFunc mocks the DescribeHostsWithContext method.
	DescribeHostsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeHostsInput, in3 ...request.Option) (*ec2.DescribeHostsOutput, error)

	// DescribeIamInstanceProfileAssociationsFunc mocks the DescribeIamInstanceProfileAssociations method.
	DescribeIamInstanceProfileAssociationsFunc func(in1 *ec2.DescribeIamInstanceProfileAssociationsInput) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error)

	// DescribeIamInstanceProfileAssociationsPagesFunc mocks the DescribeIamInstanceProfileAssociationsPages method.
	DescribeIamInstanceProfileAssociationsPagesFunc func(in1 *ec2.DescribeIamInstanceProfileAssociationsInput, in2 func(*ec2.DescribeIamInstanceProfileAssociationsOutput, bool) bool) error

	// DescribeIamInstanceProfileAssociationsPagesWithContextFunc mocks the DescribeIamInstanceProfileAssociationsPagesWithContext method.
	DescribeIamInstanceProfileAssociationsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeIamInstanceProfileAssociationsInput, in3 func(*ec2.DescribeIamInstanceProfileAssociationsOutput, bool) bool, in4 ...request.Option) error

	// DescribeIamInstanceProfileAssociationsRequestFunc mocks the DescribeIamInstanceProfileAssociationsRequest method.
	DescribeIamInstanceProfileAssociationsRequestFunc func(in1 *ec2.DescribeIamInstanceProfileAssociationsInput) (*request.Request, *ec2.DescribeIamInstanceProfileAssociationsOutput)

	// DescribeIamInstanceProfileAssociationsWithContextFunc mocks the DescribeIamInstanceProfileAssociationsWithContext method.
	DescribeIamInstanceProfileAssociationsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeIamInstanceProfileAssociationsInput, in3 ...request.Option) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error)

	// DescribeIdFormatFunc mocks the DescribeIdFormat method.
	DescribeIdFormatFunc func(in1 *ec2.DescribeIdFormatInput) (*ec2.DescribeIdFormatOutput, error)

	// DescribeIdFormatRequestFunc mocks the DescribeIdFormatRequest method.
	DescribeIdFormatRequestFunc func(in1 *ec2.DescribeIdFormatInput) (*request.Request, *ec2.DescribeIdFormatOutput)

	// DescribeIdFormatWithContextFunc mocks the DescribeIdFormatWithContext method.
	DescribeIdFormatWithContextFunc func(in1 context.Context, in2 *ec2.DescribeIdFormatInput, in3 ...request.Option) (*ec2.DescribeIdFormatOutput, error)

	// DescribeIdentityIdFormatFunc mocks the DescribeIdentityIdFormat method.
	DescribeIdentityIdFormatFunc func(in1 *ec2.DescribeIdentityIdFormatInput) (*ec2.DescribeIdentityIdFormatOutput, error)

	// DescribeIdentityIdFormatRequestFunc mocks the DescribeIdentityIdFormatRequest method.
	DescribeIdentityIdFormatRequestFunc func(in1 *ec2.DescribeIdentityIdFormatInput) (*request.Request, *ec2.DescribeIdentityIdFormatOutput)

	// DescribeIdentityIdFormatWithContextFunc mocks the DescribeIdentityIdFormatWithContext method.
	DescribeIdentityIdFormatWithContextFunc func(in1 context.Context, in2 *ec2.DescribeIdentityIdFormatInput, in3 ...request.Option) (*ec2.DescribeIdentityIdFormatOutput, error)

	// DescribeImageAttributeFunc mocks the DescribeImageAttribute method.
	DescribeImageAttributeFunc func(in1 *ec2.DescribeImageAttributeInput) (*ec2.DescribeImageAttributeOutput, error)

	// DescribeImageAttributeRequestFunc mocks the DescribeImageAttributeRequest method.
	DescribeImageAttributeRequestFunc func(in1 *ec2.DescribeImageAttributeInput) (*request.Request, *ec2.DescribeImageAttributeOutput)

	// DescribeImageAttributeWithContextFunc mocks the DescribeImageAttributeWithContext method.
	DescribeImageAttributeWithContextFunc func(in1 context.Context, in2 *ec2.DescribeImageAttributeInput, in3 ...request.Option) (*ec2.DescribeImageAttributeOutput, error)

	// DescribeImagesFunc mocks the DescribeImages method.
	DescribeImagesFunc func(in1 *ec2.DescribeImagesInput) (*ec2.DescribeImagesOutput, error)

	// DescribeImagesRequestFunc mocks the DescribeImagesRequest method.
	DescribeImagesRequestFunc func(in1 *ec2.DescribeImagesInput) (*request.Request, *ec2.DescribeImagesOutput)

	// DescribeImagesWithContextFunc mocks the DescribeImagesWithContext method.
	DescribeImagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeImagesInput, in3 ...request.Option) (*ec2.DescribeImagesOutput, error)

	// DescribeImportImageTasksFunc mocks the DescribeImportImageTasks method.
	DescribeImportImageTasksFunc func(in1 *ec2.DescribeImportImageTasksInput) (*ec2.DescribeImportImageTasksOutput, error)

	// DescribeImportImageTasksPagesFunc mocks the DescribeImportImageTasksPages method.
	DescribeImportImageTasksPagesFunc func(in1 *ec2.DescribeImportImageTasksInput, in2 func(*ec2.DescribeImportImageTasksOutput, bool) bool) error

	// DescribeImportImageTasksPagesWithContextFunc mocks the DescribeImportImageTasksPagesWithContext method.
	DescribeImportImageTasksPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeImportImageTasksInput, in3 func(*ec2.DescribeImportImageTasksOutput, bool) bool, in4 ...request.Option) error

	// DescribeImportImageTasksRequestFunc mocks the DescribeImportImageTasksRequest method.
	DescribeImportImageTasksRequestFunc func(in1 *ec2.DescribeImportImageTasksInput) (*request.Request, *ec2.DescribeImportImageTasksOutput)

	// DescribeImportImageTasksWithContextFunc mocks the DescribeImportImageTasksWithContext method.
	DescribeImportImageTasksWithContextFunc func(in1 context.Context, in2 *ec2.DescribeImportImageTasksInput, in3 ...request.Option) (*ec2.DescribeImportImageTasksOutput, error)

	// DescribeImportSnapshotTasksFunc mocks the DescribeImportSnapshotTasks method.
	DescribeImportSnapshotTasksFunc func(in1 *ec2.DescribeImportSnapshotTasksInput) (*ec2.DescribeImportSnapshotTasksOutput, error)

	// DescribeImportSnapshotTasksPagesFunc mocks the DescribeImportSnapshotTasksPages method.
	DescribeImportSnapshotTasksPagesFunc func(in1 *ec2.DescribeImportSnapshotTasksInput, in2 func(*ec2.DescribeImportSnapshotTasksOutput, bool) bool) error

	// DescribeImportSnapshotTasksPagesWithContextFunc mocks the DescribeImportSnapshotTasksPagesWithContext method.
	DescribeImportSnapshotTasksPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeImportSnapshotTasksInput, in3 func(*ec2.DescribeImportSnapshotTasksOutput, bool) bool, in4 ...request.Option) error

	// DescribeImportSnapshotTasksRequestFunc mocks the DescribeImportSnapshotTasksRequest method.
	DescribeImportSnapshotTasksRequestFunc func(in1 *ec2.DescribeImportSnapshotTasksInput) (*request.Request, *ec2.DescribeImportSnapshotTasksOutput)

	// DescribeImportSnapshotTasksWithContextFunc mocks the DescribeImportSnapshotTasksWithContext method.
	DescribeImportSnapshotTasksWithContextFunc func(in1 context.Context, in2 *ec2.DescribeImportSnapshotTasksInput, in3 ...request.Option) (*ec2.DescribeImportSnapshotTasksOutput, error)

	// DescribeInstanceAttributeFunc mocks the DescribeInstanceAttribute method.
	DescribeInstanceAttributeFunc func(in1 *ec2.DescribeInstanceAttributeInput) (*ec2.DescribeInstanceAttributeOutput, error)

	// DescribeInstanceAttributeRequestFunc mocks the DescribeInstanceAttributeRequest method.
	DescribeInstanceAttributeRequestFunc func(in1 *ec2.DescribeInstanceAttributeInput) (*request.Request, *ec2.DescribeInstanceAttributeOutput)

	// DescribeInstanceAttributeWithContextFunc mocks the DescribeInstanceAttributeWithContext method.
	DescribeInstanceAttributeWithContextFunc func(in1 context.Context, in2 *ec2.DescribeInstanceAttributeInput, in3 ...request.Option) (*ec2.DescribeInstanceAttributeOutput, error)

	// DescribeInstanceCreditSpecificationsFunc mocks the DescribeInstanceCreditSpecifications method.
	DescribeInstanceCreditSpecificationsFunc func(in1 *ec2.DescribeInstanceCreditSpecificationsInput) (*ec2.DescribeInstanceCreditSpecificationsOutput, error)

	// DescribeInstanceCreditSpecificationsPagesFunc mocks the DescribeInstanceCreditSpecificationsPages method.
	DescribeInstanceCreditSpecificationsPagesFunc func(in1 *ec2.DescribeInstanceCreditSpecificationsInput, in2 func(*ec2.DescribeInstanceCreditSpecificationsOutput, bool) bool) error

	// DescribeInstanceCreditSpecificationsPagesWithContextFunc mocks the DescribeInstanceCreditSpecificationsPagesWithContext method.
	DescribeInstanceCreditSpecificationsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeInstanceCreditSpecificationsInput, in3 func(*ec2.DescribeInstanceCreditSpecificationsOutput, bool) bool, in4 ...request.Option) error

	// DescribeInstanceCreditSpecificationsRequestFunc mocks the DescribeInstanceCreditSpecificationsRequest method.
	DescribeInstanceCreditSpecificationsRequestFunc func(in1 *ec2.DescribeInstanceCreditSpecificationsInput) (*request.Request, *ec2.DescribeInstanceCreditSpecificationsOutput)

	// DescribeInstanceCreditSpecificationsWithContextFunc mocks the DescribeInstanceCreditSpecificationsWithContext method.
	DescribeInstanceCreditSpecificationsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeInstanceCreditSpecificationsInput, in3 ...request.Option) (*ec2.DescribeInstanceCreditSpecificationsOutput, error)

	// DescribeInstanceStatusFunc mocks the DescribeInstanceStatus method.
	DescribeInstanceStatusFunc func(in1 *ec2.DescribeInstanceStatusInput) (*ec2.DescribeInstanceStatusOutput, error)

	// DescribeInstanceStatusPagesFunc mocks the DescribeInstanceStatusPages method.
	DescribeInstanceStatusPagesFunc func(in1 *ec2.DescribeInstanceStatusInput, in2 func(*ec2.DescribeInstanceStatusOutput, bool) bool) error

	// DescribeInstanceStatusPagesWithContextFunc mocks the DescribeInstanceStatusPagesWithContext method.
	DescribeInstanceStatusPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeInstanceStatusInput, in3 func(*ec2.DescribeInstanceStatusOutput, bool) bool, in4 ...request.Option) error

	// DescribeInstanceStatusRequestFunc mocks the DescribeInstanceStatusRequest method.
	DescribeInstanceStatusRequestFunc func(in1 *ec2.DescribeInstanceStatusInput) (*request.Request, *ec2.DescribeInstanceStatusOutput)

	// DescribeInstanceStatusWithContextFunc mocks the DescribeInstanceStatusWithContext method.
	DescribeInstanceStatusWithContextFunc func(in1 context.Context, in2 *ec2.DescribeInstanceStatusInput, in3 ...request.Option) (*ec2.DescribeInstanceStatusOutput, error)

	// DescribeInstanceTypeOfferingsFunc mocks the DescribeInstanceTypeOfferings method.
	DescribeInstanceTypeOfferingsFunc func(in1 *ec2.DescribeInstanceTypeOfferingsInput) (*ec2.DescribeInstanceTypeOfferingsOutput, error)

	// DescribeInstanceTypeOfferingsRequestFunc mocks the DescribeInstanceTypeOfferingsRequest method.
	DescribeInstanceTypeOfferingsRequestFunc func(in1 *ec2.DescribeInstanceTypeOfferingsInput) (*request.Request, *ec2.DescribeInstanceTypeOfferingsOutput)

	// DescribeInstanceTypeOfferingsWithContextFunc mocks the DescribeInstanceTypeOfferingsWithContext method.
	DescribeInstanceTypeOfferingsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeInstanceTypeOfferingsInput, in3 ...request.Option) (*ec2.DescribeInstanceTypeOfferingsOutput, error)

	// DescribeInstanceTypesFunc mocks the DescribeInstanceTypes method.
	DescribeInstanceTypesFunc func(in1 *ec2.DescribeInstanceTypesInput) (*ec2.DescribeInstanceTypesOutput, error)

	// DescribeInstanceTypesRequestFunc mocks the DescribeInstanceTypesRequest method.
	DescribeInstanceTypesRequestFunc func(in1 *ec2.DescribeInstanceTypesInput) (*request.Request, *ec2.DescribeInstanceTypesOutput)

	// DescribeInstanceTypesWithContextFunc mocks the DescribeInstanceTypesWithContext method.
	DescribeInstanceTypesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeInstanceTypesInput, in3 ...request.Option) (*ec2.DescribeInstanceTypesOutput, error)

	// DescribeInstancesFunc mocks the DescribeInstances method.
	DescribeInstancesFunc func(in1 *ec2.DescribeInstancesInput) (*ec2.DescribeInstancesOutput, error)

	// DescribeInstancesPagesFunc mocks the DescribeInstancesPages method.
	DescribeInstancesPagesFunc func(in1 *ec2.DescribeInstancesInput, in2 func(*ec2.DescribeInstancesOutput, bool) bool) error

	// DescribeInstancesPagesWithContextFunc mocks the DescribeInstancesPagesWithContext method.
	DescribeInstancesPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeInstancesInput, in3 func(*ec2.DescribeInstancesOutput, bool) bool, in4 ...request.Option) error

	// DescribeInstancesRequestFunc mocks the DescribeInstancesRequest method.
	DescribeInstancesRequestFunc func(in1 *ec2.DescribeInstancesInput) (*request.Request, *ec2.DescribeInstancesOutput)

	// DescribeInstancesWithContextFunc mocks the DescribeInstancesWithContext method.
	DescribeInstancesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeInstancesInput, in3 ...request.Option) (*ec2.DescribeInstancesOutput, error)

	// DescribeInternetGatewaysFunc mocks the DescribeInternetGateways method.
	DescribeInternetGatewaysFunc func(in1 *ec2.DescribeInternetGatewaysInput) (*ec2.DescribeInternetGatewaysOutput, error)

	// DescribeInternetGatewaysPagesFunc mocks the DescribeInternetGatewaysPages method.
	DescribeInternetGatewaysPagesFunc func(in1 *ec2.DescribeInternetGatewaysInput, in2 func(*ec2.DescribeInternetGatewaysOutput, bool) bool) error

	// DescribeInternetGatewaysPagesWithContextFunc mocks the DescribeInternetGatewaysPagesWithContext method.
	DescribeInternetGatewaysPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeInternetGatewaysInput, in3 func(*ec2.DescribeInternetGatewaysOutput, bool) bool, in4 ...request.Option) error

	// DescribeInternetGatewaysRequestFunc mocks the DescribeInternetGatewaysRequest method.
	DescribeInternetGatewaysRequestFunc func(in1 *ec2.DescribeInternetGatewaysInput) (*request.Request, *ec2.DescribeInternetGatewaysOutput)

	// DescribeInternetGatewaysWithContextFunc mocks the DescribeInternetGatewaysWithContext method.
	DescribeInternetGatewaysWithContextFunc func(in1 context.Context, in2 *ec2.DescribeInternetGatewaysInput, in3 ...request.Option) (*ec2.DescribeInternetGatewaysOutput, error)

	// DescribeIpv6PoolsFunc mocks the DescribeIpv6Pools method.
	DescribeIpv6PoolsFunc func(in1 *ec2.DescribeIpv6PoolsInput) (*ec2.DescribeIpv6PoolsOutput, error)

	// DescribeIpv6PoolsPagesFunc mocks the DescribeIpv6PoolsPages method.
	DescribeIpv6PoolsPagesFunc func(in1 *ec2.DescribeIpv6PoolsInput, in2 func(*ec2.DescribeIpv6PoolsOutput, bool) bool) error

	// DescribeIpv6PoolsPagesWithContextFunc mocks the DescribeIpv6PoolsPagesWithContext method.
	DescribeIpv6PoolsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeIpv6PoolsInput, in3 func(*ec2.DescribeIpv6PoolsOutput, bool) bool, in4 ...request.Option) error

	// DescribeIpv6PoolsRequestFunc mocks the DescribeIpv6PoolsRequest method.
	DescribeIpv6PoolsRequestFunc func(in1 *ec2.DescribeIpv6PoolsInput) (*request.Request, *ec2.DescribeIpv6PoolsOutput)

	// DescribeIpv6PoolsWithContextFunc mocks the DescribeIpv6PoolsWithContext method.
	DescribeIpv6PoolsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeIpv6PoolsInput, in3 ...request.Option) (*ec2.DescribeIpv6PoolsOutput, error)

	// DescribeKeyPairsFunc mocks the DescribeKeyPairs method.
	DescribeKeyPairsFunc func(in1 *ec2.DescribeKeyPairsInput) (*ec2.DescribeKeyPairsOutput, error)

	// DescribeKeyPairsRequestFunc mocks the DescribeKeyPairsRequest method.
	DescribeKeyPairsRequestFunc func(in1 *ec2.DescribeKeyPairsInput) (*request.Request, *ec2.DescribeKeyPairsOutput)

	// DescribeKeyPairsWithContextFunc mocks the DescribeKeyPairsWithContext method.
	DescribeKeyPairsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeKeyPairsInput, in3 ...request.Option) (*ec2.DescribeKeyPairsOutput, error)

	// DescribeLaunchTemplateVersionsFunc mocks the DescribeLaunchTemplateVersions method.
	DescribeLaunchTemplateVersionsFunc func(in1 *ec2.DescribeLaunchTemplateVersionsInput) (*ec2.DescribeLaunchTemplateVersionsOutput, error)

	// DescribeLaunchTemplateVersionsPagesFunc mocks the DescribeLaunchTemplateVersionsPages method.
	DescribeLaunchTemplateVersionsPagesFunc func(in1 *ec2.DescribeLaunchTemplateVersionsInput, in2 func(*ec2.DescribeLaunchTemplateVersionsOutput, bool) bool) error

	// DescribeLaunchTemplateVersionsPagesWithContextFunc mocks the DescribeLaunchTemplateVersionsPagesWithContext method.
	DescribeLaunchTemplateVersionsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeLaunchTemplateVersionsInput, in3 func(*ec2.DescribeLaunchTemplateVersionsOutput, bool) bool, in4 ...request.Option) error

	// DescribeLaunchTemplateVersionsRequestFunc mocks the DescribeLaunchTemplateVersionsRequest method.
	DescribeLaunchTemplateVersionsRequestFunc func(in1 *ec2.DescribeLaunchTemplateVersionsInput) (*request.Request, *ec2.DescribeLaunchTemplateVersionsOutput)

	// DescribeLaunchTemplateVersionsWithContextFunc mocks the DescribeLaunchTemplateVersionsWithContext method.
	DescribeLaunchTemplateVersionsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeLaunchTemplateVersionsInput, in3 ...request.Option) (*ec2.DescribeLaunchTemplateVersionsOutput, error)

	// DescribeLaunchTemplatesFunc mocks the DescribeLaunchTemplates method.
	DescribeLaunchTemplatesFunc func(in1 *ec2.DescribeLaunchTemplatesInput) (*ec2.DescribeLaunchTemplatesOutput, error)

	// DescribeLaunchTemplatesPagesFunc mocks the DescribeLaunchTemplatesPages method.
	DescribeLaunchTemplatesPagesFunc func(in1 *ec2.DescribeLaunchTemplatesInput, in2 func(*ec2.DescribeLaunchTemplatesOutput, bool) bool) error

	// DescribeLaunchTemplatesPagesWithContextFunc mocks the DescribeLaunchTemplatesPagesWithContext method.
	DescribeLaunchTemplatesPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeLaunchTemplatesInput, in3 func(*ec2.DescribeLaunchTemplatesOutput, bool) bool, in4 ...request.Option) error

	// DescribeLaunchTemplatesRequestFunc mocks the DescribeLaunchTemplatesRequest method.
	DescribeLaunchTemplatesRequestFunc func(in1 *ec2.DescribeLaunchTemplatesInput) (*request.Request, *ec2.DescribeLaunchTemplatesOutput)

	// DescribeLaunchTemplatesWithContextFunc mocks the DescribeLaunchTemplatesWithContext method.
	DescribeLaunchTemplatesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeLaunchTemplatesInput, in3 ...request.Option) (*ec2.DescribeLaunchTemplatesOutput, error)

	// DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFunc mocks the DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations method.
	DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFunc func(in1 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) (*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, error)

	// DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequestFunc mocks the DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest method.
	DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequestFunc func(in1 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) (*request.Request, *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput)

	// DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContextFunc mocks the DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext method.
	DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput, in3 ...request.Option) (*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, error)

	// DescribeLocalGatewayRouteTableVpcAssociationsFunc mocks the DescribeLocalGatewayRouteTableVpcAssociations method.
	DescribeLocalGatewayRouteTableVpcAssociationsFunc func(in1 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput) (*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, error)

	// DescribeLocalGatewayRouteTableVpcAssociationsRequestFunc mocks the DescribeLocalGatewayRouteTableVpcAssociationsRequest method.
	DescribeLocalGatewayRouteTableVpcAssociationsRequestFunc func(in1 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput) (*request.Request, *ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput)

	// DescribeLocalGatewayRouteTableVpcAssociationsWithContextFunc mocks the DescribeLocalGatewayRouteTableVpcAssociationsWithContext method.
	DescribeLocalGatewayRouteTableVpcAssociationsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput, in3 ...request.Option) (*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, error)

	// DescribeLocalGatewayRouteTablesFunc mocks the DescribeLocalGatewayRouteTables method.
	DescribeLocalGatewayRouteTablesFunc func(in1 *ec2.DescribeLocalGatewayRouteTablesInput) (*ec2.DescribeLocalGatewayRouteTablesOutput, error)

	// DescribeLocalGatewayRouteTablesRequestFunc mocks the DescribeLocalGatewayRouteTablesRequest method.
	DescribeLocalGatewayRouteTablesRequestFunc func(in1 *ec2.DescribeLocalGatewayRouteTablesInput) (*request.Request, *ec2.DescribeLocalGatewayRouteTablesOutput)

	// DescribeLocalGatewayRouteTablesWithContextFunc mocks the DescribeLocalGatewayRouteTablesWithContext method.
	DescribeLocalGatewayRouteTablesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeLocalGatewayRouteTablesInput, in3 ...request.Option) (*ec2.DescribeLocalGatewayRouteTablesOutput, error)

	// DescribeLocalGatewayVirtualInterfaceGroupsFunc mocks the DescribeLocalGatewayVirtualInterfaceGroups method.
	DescribeLocalGatewayVirtualInterfaceGroupsFunc func(in1 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput) (*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, error)

	// DescribeLocalGatewayVirtualInterfaceGroupsRequestFunc mocks the DescribeLocalGatewayVirtualInterfaceGroupsRequest method.
	DescribeLocalGatewayVirtualInterfaceGroupsRequestFunc func(in1 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput) (*request.Request, *ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput)

	// DescribeLocalGatewayVirtualInterfaceGroupsWithContextFunc mocks the DescribeLocalGatewayVirtualInterfaceGroupsWithContext method.
	DescribeLocalGatewayVirtualInterfaceGroupsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput, in3 ...request.Option) (*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, error)

	// DescribeLocalGatewayVirtualInterfacesFunc mocks the DescribeLocalGatewayVirtualInterfaces method.
	DescribeLocalGatewayVirtualInterfacesFunc func(in1 *ec2.DescribeLocalGatewayVirtualInterfacesInput) (*ec2.DescribeLocalGatewayVirtualInterfacesOutput, error)

	// DescribeLocalGatewayVirtualInterfacesRequestFunc mocks the DescribeLocalGatewayVirtualInterfacesRequest method.
	DescribeLocalGatewayVirtualInterfacesRequestFunc func(in1 *ec2.DescribeLocalGatewayVirtualInterfacesInput) (*request.Request, *ec2.DescribeLocalGatewayVirtualInterfacesOutput)

	// DescribeLocalGatewayVirtualInterfacesWithContextFunc mocks the DescribeLocalGatewayVirtualInterfacesWithContext method.
	DescribeLocalGatewayVirtualInterfacesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeLocalGatewayVirtualInterfacesInput, in3 ...request.Option) (*ec2.DescribeLocalGatewayVirtualInterfacesOutput, error)

	// DescribeLocalGatewaysFunc mocks the DescribeLocalGateways method.
	DescribeLocalGatewaysFunc func(in1 *ec2.DescribeLocalGatewaysInput) (*ec2.DescribeLocalGatewaysOutput, error)

	// DescribeLocalGatewaysRequestFunc mocks the DescribeLocalGatewaysRequest method.
	DescribeLocalGatewaysRequestFunc func(in1 *ec2.DescribeLocalGatewaysInput) (*request.Request, *ec2.DescribeLocalGatewaysOutput)

	// DescribeLocalGatewaysWithContextFunc mocks the DescribeLocalGatewaysWithContext method.
	DescribeLocalGatewaysWithContextFunc func(in1 context.Context, in2 *ec2.DescribeLocalGatewaysInput, in3 ...request.Option) (*ec2.DescribeLocalGatewaysOutput, error)

	// DescribeMovingAddressesFunc mocks the DescribeMovingAddresses method.
	DescribeMovingAddressesFunc func(in1 *ec2.DescribeMovingAddressesInput) (*ec2.DescribeMovingAddressesOutput, error)

	// DescribeMovingAddressesPagesFunc mocks the DescribeMovingAddressesPages method.
	DescribeMovingAddressesPagesFunc func(in1 *ec2.DescribeMovingAddressesInput, in2 func(*ec2.DescribeMovingAddressesOutput, bool) bool) error

	// DescribeMovingAddressesPagesWithContextFunc mocks the DescribeMovingAddressesPagesWithContext method.
	DescribeMovingAddressesPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeMovingAddressesInput, in3 func(*ec2.DescribeMovingAddressesOutput, bool) bool, in4 ...request.Option) error

	// DescribeMovingAddressesRequestFunc mocks the DescribeMovingAddressesRequest method.
	DescribeMovingAddressesRequestFunc func(in1 *ec2.DescribeMovingAddressesInput) (*request.Request, *ec2.DescribeMovingAddressesOutput)

	// DescribeMovingAddressesWithContextFunc mocks the DescribeMovingAddressesWithContext method.
	DescribeMovingAddressesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeMovingAddressesInput, in3 ...request.Option) (*ec2.DescribeMovingAddressesOutput, error)

	// DescribeNatGatewaysFunc mocks the DescribeNatGateways method.
	DescribeNatGatewaysFunc func(in1 *ec2.DescribeNatGatewaysInput) (*ec2.DescribeNatGatewaysOutput, error)

	// DescribeNatGatewaysPagesFunc mocks the DescribeNatGatewaysPages method.
	DescribeNatGatewaysPagesFunc func(in1 *ec2.DescribeNatGatewaysInput, in2 func(*ec2.DescribeNatGatewaysOutput, bool) bool) error

	// DescribeNatGatewaysPagesWithContextFunc mocks the DescribeNatGatewaysPagesWithContext method.
	DescribeNatGatewaysPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeNatGatewaysInput, in3 func(*ec2.DescribeNatGatewaysOutput, bool) bool, in4 ...request.Option) error

	// DescribeNatGatewaysRequestFunc mocks the DescribeNatGatewaysRequest method.
	DescribeNatGatewaysRequestFunc func(in1 *ec2.DescribeNatGatewaysInput) (*request.Request, *ec2.DescribeNatGatewaysOutput)

	// DescribeNatGatewaysWithContextFunc mocks the DescribeNatGatewaysWithContext method.
	DescribeNatGatewaysWithContextFunc func(in1 context.Context, in2 *ec2.DescribeNatGatewaysInput, in3 ...request.Option) (*ec2.DescribeNatGatewaysOutput, error)

	// DescribeNetworkAclsFunc mocks the DescribeNetworkAcls method.
	DescribeNetworkAclsFunc func(in1 *ec2.DescribeNetworkAclsInput) (*ec2.DescribeNetworkAclsOutput, error)

	// DescribeNetworkAclsPagesFunc mocks the DescribeNetworkAclsPages method.
	DescribeNetworkAclsPagesFunc func(in1 *ec2.DescribeNetworkAclsInput, in2 func(*ec2.DescribeNetworkAclsOutput, bool) bool) error

	// DescribeNetworkAclsPagesWithContextFunc mocks the DescribeNetworkAclsPagesWithContext method.
	DescribeNetworkAclsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeNetworkAclsInput, in3 func(*ec2.DescribeNetworkAclsOutput, bool) bool, in4 ...request.Option) error

	// DescribeNetworkAclsRequestFunc mocks the DescribeNetworkAclsRequest method.
	DescribeNetworkAclsRequestFunc func(in1 *ec2.DescribeNetworkAclsInput) (*request.Request, *ec2.DescribeNetworkAclsOutput)

	// DescribeNetworkAclsWithContextFunc mocks the DescribeNetworkAclsWithContext method.
	DescribeNetworkAclsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeNetworkAclsInput, in3 ...request.Option) (*ec2.DescribeNetworkAclsOutput, error)

	// DescribeNetworkInterfaceAttributeFunc mocks the DescribeNetworkInterfaceAttribute method.
	DescribeNetworkInterfaceAttributeFunc func(in1 *ec2.DescribeNetworkInterfaceAttributeInput) (*ec2.DescribeNetworkInterfaceAttributeOutput, error)

	// DescribeNetworkInterfaceAttributeRequestFunc mocks the DescribeNetworkInterfaceAttributeRequest method.
	DescribeNetworkInterfaceAttributeRequestFunc func(in1 *ec2.DescribeNetworkInterfaceAttributeInput) (*request.Request, *ec2.DescribeNetworkInterfaceAttributeOutput)

	// DescribeNetworkInterfaceAttributeWithContextFunc mocks the DescribeNetworkInterfaceAttributeWithContext method.
	DescribeNetworkInterfaceAttributeWithContextFunc func(in1 context.Context, in2 *ec2.DescribeNetworkInterfaceAttributeInput, in3 ...request.Option) (*ec2.DescribeNetworkInterfaceAttributeOutput, error)

	// DescribeNetworkInterfacePermissionsFunc mocks the DescribeNetworkInterfacePermissions method.
	DescribeNetworkInterfacePermissionsFunc func(in1 *ec2.DescribeNetworkInterfacePermissionsInput) (*ec2.DescribeNetworkInterfacePermissionsOutput, error)

	// DescribeNetworkInterfacePermissionsPagesFunc mocks the DescribeNetworkInterfacePermissionsPages method.
	DescribeNetworkInterfacePermissionsPagesFunc func(in1 *ec2.DescribeNetworkInterfacePermissionsInput, in2 func(*ec2.DescribeNetworkInterfacePermissionsOutput, bool) bool) error

	// DescribeNetworkInterfacePermissionsPagesWithContextFunc mocks the DescribeNetworkInterfacePermissionsPagesWithContext method.
	DescribeNetworkInterfacePermissionsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeNetworkInterfacePermissionsInput, in3 func(*ec2.DescribeNetworkInterfacePermissionsOutput, bool) bool, in4 ...request.Option) error

	// DescribeNetworkInterfacePermissionsRequestFunc mocks the DescribeNetworkInterfacePermissionsRequest method.
	DescribeNetworkInterfacePermissionsRequestFunc func(in1 *ec2.DescribeNetworkInterfacePermissionsInput) (*request.Request, *ec2.DescribeNetworkInterfacePermissionsOutput)

	// DescribeNetworkInterfacePermissionsWithContextFunc mocks the DescribeNetworkInterfacePermissionsWithContext method.
	DescribeNetworkInterfacePermissionsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeNetworkInterfacePermissionsInput, in3 ...request.Option) (*ec2.DescribeNetworkInterfacePermissionsOutput, error)

	// DescribeNetworkInterfacesFunc mocks the DescribeNetworkInterfaces method.
	DescribeNetworkInterfacesFunc func(in1 *ec2.DescribeNetworkInterfacesInput) (*ec2.DescribeNetworkInterfacesOutput, error)

	// DescribeNetworkInterfacesPagesFunc mocks the DescribeNetworkInterfacesPages method.
	DescribeNetworkInterfacesPagesFunc func(in1 *ec2.DescribeNetworkInterfacesInput, in2 func(*ec2.DescribeNetworkInterfacesOutput, bool) bool) error

	// DescribeNetworkInterfacesPagesWithContextFunc mocks the DescribeNetworkInterfacesPagesWithContext method.
	DescribeNetworkInterfacesPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeNetworkInterfacesInput, in3 func(*ec2.DescribeNetworkInterfacesOutput, bool) bool, in4 ...request.Option) error

	// DescribeNetworkInterfacesRequestFunc mocks the DescribeNetworkInterfacesRequest method.
	DescribeNetworkInterfacesRequestFunc func(in1 *ec2.DescribeNetworkInterfacesInput) (*request.Request, *ec2.DescribeNetworkInterfacesOutput)

	// DescribeNetworkInterfacesWithContextFunc mocks the DescribeNetworkInterfacesWithContext method.
	DescribeNetworkInterfacesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeNetworkInterfacesInput, in3 ...request.Option) (*ec2.DescribeNetworkInterfacesOutput, error)

	// DescribePlacementGroupsFunc mocks the DescribePlacementGroups method.
	DescribePlacementGroupsFunc func(in1 *ec2.DescribePlacementGroupsInput) (*ec2.DescribePlacementGroupsOutput, error)

	// DescribePlacementGroupsRequestFunc mocks the DescribePlacementGroupsRequest method.
	DescribePlacementGroupsRequestFunc func(in1 *ec2.DescribePlacementGroupsInput) (*request.Request, *ec2.DescribePlacementGroupsOutput)

	// DescribePlacementGroupsWithContextFunc mocks the DescribePlacementGroupsWithContext method.
	DescribePlacementGroupsWithContextFunc func(in1 context.Context, in2 *ec2.DescribePlacementGroupsInput, in3 ...request.Option) (*ec2.DescribePlacementGroupsOutput, error)

	// DescribePrefixListsFunc mocks the DescribePrefixLists method.
	DescribePrefixListsFunc func(in1 *ec2.DescribePrefixListsInput) (*ec2.DescribePrefixListsOutput, error)

	// DescribePrefixListsPagesFunc mocks the DescribePrefixListsPages method.
	DescribePrefixListsPagesFunc func(in1 *ec2.DescribePrefixListsInput, in2 func(*ec2.DescribePrefixListsOutput, bool) bool) error

	// DescribePrefixListsPagesWithContextFunc mocks the DescribePrefixListsPagesWithContext method.
	DescribePrefixListsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribePrefixListsInput, in3 func(*ec2.DescribePrefixListsOutput, bool) bool, in4 ...request.Option) error

	// DescribePrefixListsRequestFunc mocks the DescribePrefixListsRequest method.
	DescribePrefixListsRequestFunc func(in1 *ec2.DescribePrefixListsInput) (*request.Request, *ec2.DescribePrefixListsOutput)

	// DescribePrefixListsWithContextFunc mocks the DescribePrefixListsWithContext method.
	DescribePrefixListsWithContextFunc func(in1 context.Context, in2 *ec2.DescribePrefixListsInput, in3 ...request.Option) (*ec2.DescribePrefixListsOutput, error)

	// DescribePrincipalIdFormatFunc mocks the DescribePrincipalIdFormat method.
	DescribePrincipalIdFormatFunc func(in1 *ec2.DescribePrincipalIdFormatInput) (*ec2.DescribePrincipalIdFormatOutput, error)

	// DescribePrincipalIdFormatPagesFunc mocks the DescribePrincipalIdFormatPages method.
	DescribePrincipalIdFormatPagesFunc func(in1 *ec2.DescribePrincipalIdFormatInput, in2 func(*ec2.DescribePrincipalIdFormatOutput, bool) bool) error

	// DescribePrincipalIdFormatPagesWithContextFunc mocks the DescribePrincipalIdFormatPagesWithContext method.
	DescribePrincipalIdFormatPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribePrincipalIdFormatInput, in3 func(*ec2.DescribePrincipalIdFormatOutput, bool) bool, in4 ...request.Option) error

	// DescribePrincipalIdFormatRequestFunc mocks the DescribePrincipalIdFormatRequest method.
	DescribePrincipalIdFormatRequestFunc func(in1 *ec2.DescribePrincipalIdFormatInput) (*request.Request, *ec2.DescribePrincipalIdFormatOutput)

	// DescribePrincipalIdFormatWithContextFunc mocks the DescribePrincipalIdFormatWithContext method.
	DescribePrincipalIdFormatWithContextFunc func(in1 context.Context, in2 *ec2.DescribePrincipalIdFormatInput, in3 ...request.Option) (*ec2.DescribePrincipalIdFormatOutput, error)

	// DescribePublicIpv4PoolsFunc mocks the DescribePublicIpv4Pools method.
	DescribePublicIpv4PoolsFunc func(in1 *ec2.DescribePublicIpv4PoolsInput) (*ec2.DescribePublicIpv4PoolsOutput, error)

	// DescribePublicIpv4PoolsPagesFunc mocks the DescribePublicIpv4PoolsPages method.
	DescribePublicIpv4PoolsPagesFunc func(in1 *ec2.DescribePublicIpv4PoolsInput, in2 func(*ec2.DescribePublicIpv4PoolsOutput, bool) bool) error

	// DescribePublicIpv4PoolsPagesWithContextFunc mocks the DescribePublicIpv4PoolsPagesWithContext method.
	DescribePublicIpv4PoolsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribePublicIpv4PoolsInput, in3 func(*ec2.DescribePublicIpv4PoolsOutput, bool) bool, in4 ...request.Option) error

	// DescribePublicIpv4PoolsRequestFunc mocks the DescribePublicIpv4PoolsRequest method.
	DescribePublicIpv4PoolsRequestFunc func(in1 *ec2.DescribePublicIpv4PoolsInput) (*request.Request, *ec2.DescribePublicIpv4PoolsOutput)

	// DescribePublicIpv4PoolsWithContextFunc mocks the DescribePublicIpv4PoolsWithContext method.
	DescribePublicIpv4PoolsWithContextFunc func(in1 context.Context, in2 *ec2.DescribePublicIpv4PoolsInput, in3 ...request.Option) (*ec2.DescribePublicIpv4PoolsOutput, error)

	// DescribeRegionsFunc mocks the DescribeRegions method.
	DescribeRegionsFunc func(in1 *ec2.DescribeRegionsInput) (*ec2.DescribeRegionsOutput, error)

	// DescribeRegionsRequestFunc mocks the DescribeRegionsRequest method.
	DescribeRegionsRequestFunc func(in1 *ec2.DescribeRegionsInput) (*request.Request, *ec2.DescribeRegionsOutput)

	// DescribeRegionsWithContextFunc mocks the DescribeRegionsWithContext method.
	DescribeRegionsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeRegionsInput, in3 ...request.Option) (*ec2.DescribeRegionsOutput, error)

	// DescribeReservedInstancesFunc mocks the DescribeReservedInstances method.
	DescribeReservedInstancesFunc func(in1 *ec2.DescribeReservedInstancesInput) (*ec2.DescribeReservedInstancesOutput, error)

	// DescribeReservedInstancesListingsFunc mocks the DescribeReservedInstancesListings method.
	DescribeReservedInstancesListingsFunc func(in1 *ec2.DescribeReservedInstancesListingsInput) (*ec2.DescribeReservedInstancesListingsOutput, error)

	// DescribeReservedInstancesListingsRequestFunc mocks the DescribeReservedInstancesListingsRequest method.
	DescribeReservedInstancesListingsRequestFunc func(in1 *ec2.DescribeReservedInstancesListingsInput) (*request.Request, *ec2.DescribeReservedInstancesListingsOutput)

	// DescribeReservedInstancesListingsWithContextFunc mocks the DescribeReservedInstancesListingsWithContext method.
	DescribeReservedInstancesListingsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeReservedInstancesListingsInput, in3 ...request.Option) (*ec2.DescribeReservedInstancesListingsOutput, error)

	// DescribeReservedInstancesModificationsFunc mocks the DescribeReservedInstancesModifications method.
	DescribeReservedInstancesModificationsFunc func(in1 *ec2.DescribeReservedInstancesModificationsInput) (*ec2.DescribeReservedInstancesModificationsOutput, error)

	// DescribeReservedInstancesModificationsPagesFunc mocks the DescribeReservedInstancesModificationsPages method.
	DescribeReservedInstancesModificationsPagesFunc func(in1 *ec2.DescribeReservedInstancesModificationsInput, in2 func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool) error

	// DescribeReservedInstancesModificationsPagesWithContextFunc mocks the DescribeReservedInstancesModificationsPagesWithContext method.
	DescribeReservedInstancesModificationsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeReservedInstancesModificationsInput, in3 func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool, in4 ...request.Option) error

	// DescribeReservedInstancesModificationsRequestFunc mocks the DescribeReservedInstancesModificationsRequest method.
	DescribeReservedInstancesModificationsRequestFunc func(in1 *ec2.DescribeReservedInstancesModificationsInput) (*request.Request, *ec2.DescribeReservedInstancesModificationsOutput)

	// DescribeReservedInstancesModificationsWithContextFunc mocks the DescribeReservedInstancesModificationsWithContext method.
	DescribeReservedInstancesModificationsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeReservedInstancesModificationsInput, in3 ...request.Option) (*ec2.DescribeReservedInstancesModificationsOutput, error)

	// DescribeReservedInstancesOfferingsFunc mocks the DescribeReservedInstancesOfferings method.
	DescribeReservedInstancesOfferingsFunc func(in1 *ec2.DescribeReservedInstancesOfferingsInput) (*ec2.DescribeReservedInstancesOfferingsOutput, error)

	// DescribeReservedInstancesOfferingsPagesFunc mocks the DescribeReservedInstancesOfferingsPages method.
	DescribeReservedInstancesOfferingsPagesFunc func(in1 *ec2.DescribeReservedInstancesOfferingsInput, in2 func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool) error

	// DescribeReservedInstancesOfferingsPagesWithContextFunc mocks the DescribeReservedInstancesOfferingsPagesWithContext method.
	DescribeReservedInstancesOfferingsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeReservedInstancesOfferingsInput, in3 func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool, in4 ...request.Option) error

	// DescribeReservedInstancesOfferingsRequestFunc mocks the DescribeReservedInstancesOfferingsRequest method.
	DescribeReservedInstancesOfferingsRequestFunc func(in1 *ec2.DescribeReservedInstancesOfferingsInput) (*request.Request, *ec2.DescribeReservedInstancesOfferingsOutput)

	// DescribeReservedInstancesOfferingsWithContextFunc mocks the DescribeReservedInstancesOfferingsWithContext method.
	DescribeReservedInstancesOfferingsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeReservedInstancesOfferingsInput, in3 ...request.Option) (*ec2.DescribeReservedInstancesOfferingsOutput, error)

	// DescribeReservedInstancesRequestFunc mocks the DescribeReservedInstancesRequest method.
	DescribeReservedInstancesRequestFunc func(in1 *ec2.DescribeReservedInstancesInput) (*request.Request, *ec2.DescribeReservedInstancesOutput)

	// DescribeReservedInstancesWithContextFunc mocks the DescribeReservedInstancesWithContext method.
	DescribeReservedInstancesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeReservedInstancesInput, in3 ...request.Option) (*ec2.DescribeReservedInstancesOutput, error)

	// DescribeRouteTablesFunc mocks the DescribeRouteTables method.
	DescribeRouteTablesFunc func(in1 *ec2.DescribeRouteTablesInput) (*ec2.DescribeRouteTablesOutput, error)

	// DescribeRouteTablesPagesFunc mocks the DescribeRouteTablesPages method.
	DescribeRouteTablesPagesFunc func(in1 *ec2.DescribeRouteTablesInput, in2 func(*ec2.DescribeRouteTablesOutput, bool) bool) error

	// DescribeRouteTablesPagesWithContextFunc mocks the DescribeRouteTablesPagesWithContext method.
	DescribeRouteTablesPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeRouteTablesInput, in3 func(*ec2.DescribeRouteTablesOutput, bool) bool, in4 ...request.Option) error

	// DescribeRouteTablesRequestFunc mocks the DescribeRouteTablesRequest method.
	DescribeRouteTablesRequestFunc func(in1 *ec2.DescribeRouteTablesInput) (*request.Request, *ec2.DescribeRouteTablesOutput)

	// DescribeRouteTablesWithContextFunc mocks the DescribeRouteTablesWithContext method.
	DescribeRouteTablesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeRouteTablesInput, in3 ...request.Option) (*ec2.DescribeRouteTablesOutput, error)

	// DescribeScheduledInstanceAvailabilityFunc mocks the DescribeScheduledInstanceAvailability method.
	DescribeScheduledInstanceAvailabilityFunc func(in1 *ec2.DescribeScheduledInstanceAvailabilityInput) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error)

	// DescribeScheduledInstanceAvailabilityPagesFunc mocks the DescribeScheduledInstanceAvailabilityPages method.
	DescribeScheduledInstanceAvailabilityPagesFunc func(in1 *ec2.DescribeScheduledInstanceAvailabilityInput, in2 func(*ec2.DescribeScheduledInstanceAvailabilityOutput, bool) bool) error

	// DescribeScheduledInstanceAvailabilityPagesWithContextFunc mocks the DescribeScheduledInstanceAvailabilityPagesWithContext method.
	DescribeScheduledInstanceAvailabilityPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeScheduledInstanceAvailabilityInput, in3 func(*ec2.DescribeScheduledInstanceAvailabilityOutput, bool) bool, in4 ...request.Option) error

	// DescribeScheduledInstanceAvailabilityRequestFunc mocks the DescribeScheduledInstanceAvailabilityRequest method.
	DescribeScheduledInstanceAvailabilityRequestFunc func(in1 *ec2.DescribeScheduledInstanceAvailabilityInput) (*request.Request, *ec2.DescribeScheduledInstanceAvailabilityOutput)

	// DescribeScheduledInstanceAvailabilityWithContextFunc mocks the DescribeScheduledInstanceAvailabilityWithContext method.
	DescribeScheduledInstanceAvailabilityWithContextFunc func(in1 context.Context, in2 *ec2.DescribeScheduledInstanceAvailabilityInput, in3 ...request.Option) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error)

	// DescribeScheduledInstancesFunc mocks the DescribeScheduledInstances method.
	DescribeScheduledInstancesFunc func(in1 *ec2.DescribeScheduledInstancesInput) (*ec2.DescribeScheduledInstancesOutput, error)

	// DescribeScheduledInstancesPagesFunc mocks the DescribeScheduledInstancesPages method.
	DescribeScheduledInstancesPagesFunc func(in1 *ec2.DescribeScheduledInstancesInput, in2 func(*ec2.DescribeScheduledInstancesOutput, bool) bool) error

	// DescribeScheduledInstancesPagesWithContextFunc mocks the DescribeScheduledInstancesPagesWithContext method.
	DescribeScheduledInstancesPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeScheduledInstancesInput, in3 func(*ec2.DescribeScheduledInstancesOutput, bool) bool, in4 ...request.Option) error

	// DescribeScheduledInstancesRequestFunc mocks the DescribeScheduledInstancesRequest method.
	DescribeScheduledInstancesRequestFunc func(in1 *ec2.DescribeScheduledInstancesInput) (*request.Request, *ec2.DescribeScheduledInstancesOutput)

	// DescribeScheduledInstancesWithContextFunc mocks the DescribeScheduledInstancesWithContext method.
	DescribeScheduledInstancesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeScheduledInstancesInput, in3 ...request.Option) (*ec2.DescribeScheduledInstancesOutput, error)

	// DescribeSecurityGroupReferencesFunc mocks the DescribeSecurityGroupReferences method.
	DescribeSecurityGroupReferencesFunc func(in1 *ec2.DescribeSecurityGroupReferencesInput) (*ec2.DescribeSecurityGroupReferencesOutput, error)

	// DescribeSecurityGroupReferencesRequestFunc mocks the DescribeSecurityGroupReferencesRequest method.
	DescribeSecurityGroupReferencesRequestFunc func(in1 *ec2.DescribeSecurityGroupReferencesInput) (*request.Request, *ec2.DescribeSecurityGroupReferencesOutput)

	// DescribeSecurityGroupReferencesWithContextFunc mocks the DescribeSecurityGroupReferencesWithContext method.
	DescribeSecurityGroupReferencesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeSecurityGroupReferencesInput, in3 ...request.Option) (*ec2.DescribeSecurityGroupReferencesOutput, error)

	// DescribeSecurityGroupsFunc mocks the DescribeSecurityGroups method.
	DescribeSecurityGroupsFunc func(in1 *ec2.DescribeSecurityGroupsInput) (*ec2.DescribeSecurityGroupsOutput, error)

	// DescribeSecurityGroupsPagesFunc mocks the DescribeSecurityGroupsPages method.
	DescribeSecurityGroupsPagesFunc func(in1 *ec2.DescribeSecurityGroupsInput, in2 func(*ec2.DescribeSecurityGroupsOutput, bool) bool) error

	// DescribeSecurityGroupsPagesWithContextFunc mocks the DescribeSecurityGroupsPagesWithContext method.
	DescribeSecurityGroupsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeSecurityGroupsInput, in3 func(*ec2.DescribeSecurityGroupsOutput, bool) bool, in4 ...request.Option) error

	// DescribeSecurityGroupsRequestFunc mocks the DescribeSecurityGroupsRequest method.
	DescribeSecurityGroupsRequestFunc func(in1 *ec2.DescribeSecurityGroupsInput) (*request.Request, *ec2.DescribeSecurityGroupsOutput)

	// DescribeSecurityGroupsWithContextFunc mocks the DescribeSecurityGroupsWithContext method.
	DescribeSecurityGroupsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeSecurityGroupsInput, in3 ...request.Option) (*ec2.DescribeSecurityGroupsOutput, error)

	// DescribeSnapshotAttributeFunc mocks the DescribeSnapshotAttribute method.
	DescribeSnapshotAttributeFunc func(in1 *ec2.DescribeSnapshotAttributeInput) (*ec2.DescribeSnapshotAttributeOutput, error)

	// DescribeSnapshotAttributeRequestFunc mocks the DescribeSnapshotAttributeRequest method.
	DescribeSnapshotAttributeRequestFunc func(in1 *ec2.DescribeSnapshotAttributeInput) (*request.Request, *ec2.DescribeSnapshotAttributeOutput)

	// DescribeSnapshotAttributeWithContextFunc mocks the DescribeSnapshotAttributeWithContext method.
	DescribeSnapshotAttributeWithContextFunc func(in1 context.Context, in2 *ec2.DescribeSnapshotAttributeInput, in3 ...request.Option) (*ec2.DescribeSnapshotAttributeOutput, error)

	// DescribeSnapshotsFunc mocks the DescribeSnapshots method.
	DescribeSnapshotsFunc func(in1 *ec2.DescribeSnapshotsInput) (*ec2.DescribeSnapshotsOutput, error)

	// DescribeSnapshotsPagesFunc mocks the DescribeSnapshotsPages method.
	DescribeSnapshotsPagesFunc func(in1 *ec2.DescribeSnapshotsInput, in2 func(*ec2.DescribeSnapshotsOutput, bool) bool) error

	// DescribeSnapshotsPagesWithContextFunc mocks the DescribeSnapshotsPagesWithContext method.
	DescribeSnapshotsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeSnapshotsInput, in3 func(*ec2.DescribeSnapshotsOutput, bool) bool, in4 ...request.Option) error

	// DescribeSnapshotsRequestFunc mocks the DescribeSnapshotsRequest method.
	DescribeSnapshotsRequestFunc func(in1 *ec2.DescribeSnapshotsInput) (*request.Request, *ec2.DescribeSnapshotsOutput)

	// DescribeSnapshotsWithContextFunc mocks the DescribeSnapshotsWithContext method.
	DescribeSnapshotsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeSnapshotsInput, in3 ...request.Option) (*ec2.DescribeSnapshotsOutput, error)

	// DescribeSpotDatafeedSubscriptionFunc mocks the DescribeSpotDatafeedSubscription method.
	DescribeSpotDatafeedSubscriptionFunc func(in1 *ec2.DescribeSpotDatafeedSubscriptionInput) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error)

	// DescribeSpotDatafeedSubscriptionRequestFunc mocks the DescribeSpotDatafeedSubscriptionRequest method.
	DescribeSpotDatafeedSubscriptionRequestFunc func(in1 *ec2.DescribeSpotDatafeedSubscriptionInput) (*request.Request, *ec2.DescribeSpotDatafeedSubscriptionOutput)

	// DescribeSpotDatafeedSubscriptionWithContextFunc mocks the DescribeSpotDatafeedSubscriptionWithContext method.
	DescribeSpotDatafeedSubscriptionWithContextFunc func(in1 context.Context, in2 *ec2.DescribeSpotDatafeedSubscriptionInput, in3 ...request.Option) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error)

	// DescribeSpotFleetInstancesFunc mocks the DescribeSpotFleetInstances method.
	DescribeSpotFleetInstancesFunc func(in1 *ec2.DescribeSpotFleetInstancesInput) (*ec2.DescribeSpotFleetInstancesOutput, error)

	// DescribeSpotFleetInstancesRequestFunc mocks the DescribeSpotFleetInstancesRequest method.
	DescribeSpotFleetInstancesRequestFunc func(in1 *ec2.DescribeSpotFleetInstancesInput) (*request.Request, *ec2.DescribeSpotFleetInstancesOutput)

	// DescribeSpotFleetInstancesWithContextFunc mocks the DescribeSpotFleetInstancesWithContext method.
	DescribeSpotFleetInstancesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeSpotFleetInstancesInput, in3 ...request.Option) (*ec2.DescribeSpotFleetInstancesOutput, error)

	// DescribeSpotFleetRequestHistoryFunc mocks the DescribeSpotFleetRequestHistory method.
	DescribeSpotFleetRequestHistoryFunc func(in1 *ec2.DescribeSpotFleetRequestHistoryInput) (*ec2.DescribeSpotFleetRequestHistoryOutput, error)

	// DescribeSpotFleetRequestHistoryRequestFunc mocks the DescribeSpotFleetRequestHistoryRequest method.
	DescribeSpotFleetRequestHistoryRequestFunc func(in1 *ec2.DescribeSpotFleetRequestHistoryInput) (*request.Request, *ec2.DescribeSpotFleetRequestHistoryOutput)

	// DescribeSpotFleetRequestHistoryWithContextFunc mocks the DescribeSpotFleetRequestHistoryWithContext method.
	DescribeSpotFleetRequestHistoryWithContextFunc func(in1 context.Context, in2 *ec2.DescribeSpotFleetRequestHistoryInput, in3 ...request.Option) (*ec2.DescribeSpotFleetRequestHistoryOutput, error)

	// DescribeSpotFleetRequestsFunc mocks the DescribeSpotFleetRequests method.
	DescribeSpotFleetRequestsFunc func(in1 *ec2.DescribeSpotFleetRequestsInput) (*ec2.DescribeSpotFleetRequestsOutput, error)

	// DescribeSpotFleetRequestsPagesFunc mocks the DescribeSpotFleetRequestsPages method.
	DescribeSpotFleetRequestsPagesFunc func(in1 *ec2.DescribeSpotFleetRequestsInput, in2 func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool) error

	// DescribeSpotFleetRequestsPagesWithContextFunc mocks the DescribeSpotFleetRequestsPagesWithContext method.
	DescribeSpotFleetRequestsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeSpotFleetRequestsInput, in3 func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool, in4 ...request.Option) error

	// DescribeSpotFleetRequestsRequestFunc mocks the DescribeSpotFleetRequestsRequest method.
	DescribeSpotFleetRequestsRequestFunc func(in1 *ec2.DescribeSpotFleetRequestsInput) (*request.Request, *ec2.DescribeSpotFleetRequestsOutput)

	// DescribeSpotFleetRequestsWithContextFunc mocks the DescribeSpotFleetRequestsWithContext method.
	DescribeSpotFleetRequestsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeSpotFleetRequestsInput, in3 ...request.Option) (*ec2.DescribeSpotFleetRequestsOutput, error)

	// DescribeSpotInstanceRequestsFunc mocks the DescribeSpotInstanceRequests method.
	DescribeSpotInstanceRequestsFunc func(in1 *ec2.DescribeSpotInstanceRequestsInput) (*ec2.DescribeSpotInstanceRequestsOutput, error)

	// DescribeSpotInstanceRequestsPagesFunc mocks the DescribeSpotInstanceRequestsPages method.
	DescribeSpotInstanceRequestsPagesFunc func(in1 *ec2.DescribeSpotInstanceRequestsInput, in2 func(*ec2.DescribeSpotInstanceRequestsOutput, bool) bool) error

	// DescribeSpotInstanceRequestsPagesWithContextFunc mocks the DescribeSpotInstanceRequestsPagesWithContext method.
	DescribeSpotInstanceRequestsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeSpotInstanceRequestsInput, in3 func(*ec2.DescribeSpotInstanceRequestsOutput, bool) bool, in4 ...request.Option) error

	// DescribeSpotInstanceRequestsRequestFunc mocks the DescribeSpotInstanceRequestsRequest method.
	DescribeSpotInstanceRequestsRequestFunc func(in1 *ec2.DescribeSpotInstanceRequestsInput) (*request.Request, *ec2.DescribeSpotInstanceRequestsOutput)

	// DescribeSpotInstanceRequestsWithContextFunc mocks the DescribeSpotInstanceRequestsWithContext method.
	DescribeSpotInstanceRequestsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeSpotInstanceRequestsInput, in3 ...request.Option) (*ec2.DescribeSpotInstanceRequestsOutput, error)

	// DescribeSpotPriceHistoryFunc mocks the DescribeSpotPriceHistory method.
	DescribeSpotPriceHistoryFunc func(in1 *ec2.DescribeSpotPriceHistoryInput) (*ec2.DescribeSpotPriceHistoryOutput, error)

	// DescribeSpotPriceHistoryPagesFunc mocks the DescribeSpotPriceHistoryPages method.
	DescribeSpotPriceHistoryPagesFunc func(in1 *ec2.DescribeSpotPriceHistoryInput, in2 func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool) error

	// DescribeSpotPriceHistoryPagesWithContextFunc mocks the DescribeSpotPriceHistoryPagesWithContext method.
	DescribeSpotPriceHistoryPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeSpotPriceHistoryInput, in3 func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool, in4 ...request.Option) error

	// DescribeSpotPriceHistoryRequestFunc mocks the DescribeSpotPriceHistoryRequest method.
	DescribeSpotPriceHistoryRequestFunc func(in1 *ec2.DescribeSpotPriceHistoryInput) (*request.Request, *ec2.DescribeSpotPriceHistoryOutput)

	// DescribeSpotPriceHistoryWithContextFunc mocks the DescribeSpotPriceHistoryWithContext method.
	DescribeSpotPriceHistoryWithContextFunc func(in1 context.Context, in2 *ec2.DescribeSpotPriceHistoryInput, in3 ...request.Option) (*ec2.DescribeSpotPriceHistoryOutput, error)

	// DescribeStaleSecurityGroupsFunc mocks the DescribeStaleSecurityGroups method.
	DescribeStaleSecurityGroupsFunc func(in1 *ec2.DescribeStaleSecurityGroupsInput) (*ec2.DescribeStaleSecurityGroupsOutput, error)

	// DescribeStaleSecurityGroupsPagesFunc mocks the DescribeStaleSecurityGroupsPages method.
	DescribeStaleSecurityGroupsPagesFunc func(in1 *ec2.DescribeStaleSecurityGroupsInput, in2 func(*ec2.DescribeStaleSecurityGroupsOutput, bool) bool) error

	// DescribeStaleSecurityGroupsPagesWithContextFunc mocks the DescribeStaleSecurityGroupsPagesWithContext method.
	DescribeStaleSecurityGroupsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeStaleSecurityGroupsInput, in3 func(*ec2.DescribeStaleSecurityGroupsOutput, bool) bool, in4 ...request.Option) error

	// DescribeStaleSecurityGroupsRequestFunc mocks the DescribeStaleSecurityGroupsRequest method.
	DescribeStaleSecurityGroupsRequestFunc func(in1 *ec2.DescribeStaleSecurityGroupsInput) (*request.Request, *ec2.DescribeStaleSecurityGroupsOutput)

	// DescribeStaleSecurityGroupsWithContextFunc mocks the DescribeStaleSecurityGroupsWithContext method.
	DescribeStaleSecurityGroupsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeStaleSecurityGroupsInput, in3 ...request.Option) (*ec2.DescribeStaleSecurityGroupsOutput, error)

	// DescribeSubnetsFunc mocks the DescribeSubnets method.
	DescribeSubnetsFunc func(in1 *ec2.DescribeSubnetsInput) (*ec2.DescribeSubnetsOutput, error)

	// DescribeSubnetsPagesFunc mocks the DescribeSubnetsPages method.
	DescribeSubnetsPagesFunc func(in1 *ec2.DescribeSubnetsInput, in2 func(*ec2.DescribeSubnetsOutput, bool) bool) error

	// DescribeSubnetsPagesWithContextFunc mocks the DescribeSubnetsPagesWithContext method.
	DescribeSubnetsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeSubnetsInput, in3 func(*ec2.DescribeSubnetsOutput, bool) bool, in4 ...request.Option) error

	// DescribeSubnetsRequestFunc mocks the DescribeSubnetsRequest method.
	DescribeSubnetsRequestFunc func(in1 *ec2.DescribeSubnetsInput) (*request.Request, *ec2.DescribeSubnetsOutput)

	// DescribeSubnetsWithContextFunc mocks the DescribeSubnetsWithContext method.
	DescribeSubnetsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeSubnetsInput, in3 ...request.Option) (*ec2.DescribeSubnetsOutput, error)

	// DescribeTagsFunc mocks the DescribeTags method.
	DescribeTagsFunc func(in1 *ec2.DescribeTagsInput) (*ec2.DescribeTagsOutput, error)

	// DescribeTagsPagesFunc mocks the DescribeTagsPages method.
	DescribeTagsPagesFunc func(in1 *ec2.DescribeTagsInput, in2 func(*ec2.DescribeTagsOutput, bool) bool) error

	// DescribeTagsPagesWithContextFunc mocks the DescribeTagsPagesWithContext method.
	DescribeTagsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeTagsInput, in3 func(*ec2.DescribeTagsOutput, bool) bool, in4 ...request.Option) error

	// DescribeTagsRequestFunc mocks the DescribeTagsRequest method.
	DescribeTagsRequestFunc func(in1 *ec2.DescribeTagsInput) (*request.Request, *ec2.DescribeTagsOutput)

	// DescribeTagsWithContextFunc mocks the DescribeTagsWithContext method.
	DescribeTagsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeTagsInput, in3 ...request.Option) (*ec2.DescribeTagsOutput, error)

	// DescribeTrafficMirrorFiltersFunc mocks the DescribeTrafficMirrorFilters method.
	DescribeTrafficMirrorFiltersFunc func(in1 *ec2.DescribeTrafficMirrorFiltersInput) (*ec2.DescribeTrafficMirrorFiltersOutput, error)

	// DescribeTrafficMirrorFiltersPagesFunc mocks the DescribeTrafficMirrorFiltersPages method.
	DescribeTrafficMirrorFiltersPagesFunc func(in1 *ec2.DescribeTrafficMirrorFiltersInput, in2 func(*ec2.DescribeTrafficMirrorFiltersOutput, bool) bool) error

	// DescribeTrafficMirrorFiltersPagesWithContextFunc mocks the DescribeTrafficMirrorFiltersPagesWithContext method.
	DescribeTrafficMirrorFiltersPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeTrafficMirrorFiltersInput, in3 func(*ec2.DescribeTrafficMirrorFiltersOutput, bool) bool, in4 ...request.Option) error

	// DescribeTrafficMirrorFiltersRequestFunc mocks the DescribeTrafficMirrorFiltersRequest method.
	DescribeTrafficMirrorFiltersRequestFunc func(in1 *ec2.DescribeTrafficMirrorFiltersInput) (*request.Request, *ec2.DescribeTrafficMirrorFiltersOutput)

	// DescribeTrafficMirrorFiltersWithContextFunc mocks the DescribeTrafficMirrorFiltersWithContext method.
	DescribeTrafficMirrorFiltersWithContextFunc func(in1 context.Context, in2 *ec2.DescribeTrafficMirrorFiltersInput, in3 ...request.Option) (*ec2.DescribeTrafficMirrorFiltersOutput, error)

	// DescribeTrafficMirrorSessionsFunc mocks the DescribeTrafficMirrorSessions method.
	DescribeTrafficMirrorSessionsFunc func(in1 *ec2.DescribeTrafficMirrorSessionsInput) (*ec2.DescribeTrafficMirrorSessionsOutput, error)

	// DescribeTrafficMirrorSessionsPagesFunc mocks the DescribeTrafficMirrorSessionsPages method.
	DescribeTrafficMirrorSessionsPagesFunc func(in1 *ec2.DescribeTrafficMirrorSessionsInput, in2 func(*ec2.DescribeTrafficMirrorSessionsOutput, bool) bool) error

	// DescribeTrafficMirrorSessionsPagesWithContextFunc mocks the DescribeTrafficMirrorSessionsPagesWithContext method.
	DescribeTrafficMirrorSessionsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeTrafficMirrorSessionsInput, in3 func(*ec2.DescribeTrafficMirrorSessionsOutput, bool) bool, in4 ...request.Option) error

	// DescribeTrafficMirrorSessionsRequestFunc mocks the DescribeTrafficMirrorSessionsRequest method.
	DescribeTrafficMirrorSessionsRequestFunc func(in1 *ec2.DescribeTrafficMirrorSessionsInput) (*request.Request, *ec2.DescribeTrafficMirrorSessionsOutput)

	// DescribeTrafficMirrorSessionsWithContextFunc mocks the DescribeTrafficMirrorSessionsWithContext method.
	DescribeTrafficMirrorSessionsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeTrafficMirrorSessionsInput, in3 ...request.Option) (*ec2.DescribeTrafficMirrorSessionsOutput, error)

	// DescribeTrafficMirrorTargetsFunc mocks the DescribeTrafficMirrorTargets method.
	DescribeTrafficMirrorTargetsFunc func(in1 *ec2.DescribeTrafficMirrorTargetsInput) (*ec2.DescribeTrafficMirrorTargetsOutput, error)

	// DescribeTrafficMirrorTargetsPagesFunc mocks the DescribeTrafficMirrorTargetsPages method.
	DescribeTrafficMirrorTargetsPagesFunc func(in1 *ec2.DescribeTrafficMirrorTargetsInput, in2 func(*ec2.DescribeTrafficMirrorTargetsOutput, bool) bool) error

	// DescribeTrafficMirrorTargetsPagesWithContextFunc mocks the DescribeTrafficMirrorTargetsPagesWithContext method.
	DescribeTrafficMirrorTargetsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeTrafficMirrorTargetsInput, in3 func(*ec2.DescribeTrafficMirrorTargetsOutput, bool) bool, in4 ...request.Option) error

	// DescribeTrafficMirrorTargetsRequestFunc mocks the DescribeTrafficMirrorTargetsRequest method.
	DescribeTrafficMirrorTargetsRequestFunc func(in1 *ec2.DescribeTrafficMirrorTargetsInput) (*request.Request, *ec2.DescribeTrafficMirrorTargetsOutput)

	// DescribeTrafficMirrorTargetsWithContextFunc mocks the DescribeTrafficMirrorTargetsWithContext method.
	DescribeTrafficMirrorTargetsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeTrafficMirrorTargetsInput, in3 ...request.Option) (*ec2.DescribeTrafficMirrorTargetsOutput, error)

	// DescribeTransitGatewayAttachmentsFunc mocks the DescribeTransitGatewayAttachments method.
	DescribeTransitGatewayAttachmentsFunc func(in1 *ec2.DescribeTransitGatewayAttachmentsInput) (*ec2.DescribeTransitGatewayAttachmentsOutput, error)

	// DescribeTransitGatewayAttachmentsPagesFunc mocks the DescribeTransitGatewayAttachmentsPages method.
	DescribeTransitGatewayAttachmentsPagesFunc func(in1 *ec2.DescribeTransitGatewayAttachmentsInput, in2 func(*ec2.DescribeTransitGatewayAttachmentsOutput, bool) bool) error

	// DescribeTransitGatewayAttachmentsPagesWithContextFunc mocks the DescribeTransitGatewayAttachmentsPagesWithContext method.
	DescribeTransitGatewayAttachmentsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeTransitGatewayAttachmentsInput, in3 func(*ec2.DescribeTransitGatewayAttachmentsOutput, bool) bool, in4 ...request.Option) error

	// DescribeTransitGatewayAttachmentsRequestFunc mocks the DescribeTransitGatewayAttachmentsRequest method.
	DescribeTransitGatewayAttachmentsRequestFunc func(in1 *ec2.DescribeTransitGatewayAttachmentsInput) (*request.Request, *ec2.DescribeTransitGatewayAttachmentsOutput)

	// DescribeTransitGatewayAttachmentsWithContextFunc mocks the DescribeTransitGatewayAttachmentsWithContext method.
	DescribeTransitGatewayAttachmentsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeTransitGatewayAttachmentsInput, in3 ...request.Option) (*ec2.DescribeTransitGatewayAttachmentsOutput, error)

	// DescribeTransitGatewayMulticastDomainsFunc mocks the DescribeTransitGatewayMulticastDomains method.
	DescribeTransitGatewayMulticastDomainsFunc func(in1 *ec2.DescribeTransitGatewayMulticastDomainsInput) (*ec2.DescribeTransitGatewayMulticastDomainsOutput, error)

	// DescribeTransitGatewayMulticastDomainsRequestFunc mocks the DescribeTransitGatewayMulticastDomainsRequest method.
	DescribeTransitGatewayMulticastDomainsRequestFunc func(in1 *ec2.DescribeTransitGatewayMulticastDomainsInput) (*request.Request, *ec2.DescribeTransitGatewayMulticastDomainsOutput)

	// DescribeTransitGatewayMulticastDomainsWithContextFunc mocks the DescribeTransitGatewayMulticastDomainsWithContext method.
	DescribeTransitGatewayMulticastDomainsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeTransitGatewayMulticastDomainsInput, in3 ...request.Option) (*ec2.DescribeTransitGatewayMulticastDomainsOutput, error)

	// DescribeTransitGatewayPeeringAttachmentsFunc mocks the DescribeTransitGatewayPeeringAttachments method.
	DescribeTransitGatewayPeeringAttachmentsFunc func(in1 *ec2.DescribeTransitGatewayPeeringAttachmentsInput) (*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, error)

	// DescribeTransitGatewayPeeringAttachmentsRequestFunc mocks the DescribeTransitGatewayPeeringAttachmentsRequest method.
	DescribeTransitGatewayPeeringAttachmentsRequestFunc func(in1 *ec2.DescribeTransitGatewayPeeringAttachmentsInput) (*request.Request, *ec2.DescribeTransitGatewayPeeringAttachmentsOutput)

	// DescribeTransitGatewayPeeringAttachmentsWithContextFunc mocks the DescribeTransitGatewayPeeringAttachmentsWithContext method.
	DescribeTransitGatewayPeeringAttachmentsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeTransitGatewayPeeringAttachmentsInput, in3 ...request.Option) (*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, error)

	// DescribeTransitGatewayRouteTablesFunc mocks the DescribeTransitGatewayRouteTables method.
	DescribeTransitGatewayRouteTablesFunc func(in1 *ec2.DescribeTransitGatewayRouteTablesInput) (*ec2.DescribeTransitGatewayRouteTablesOutput, error)

	// DescribeTransitGatewayRouteTablesPagesFunc mocks the DescribeTransitGatewayRouteTablesPages method.
	DescribeTransitGatewayRouteTablesPagesFunc func(in1 *ec2.DescribeTransitGatewayRouteTablesInput, in2 func(*ec2.DescribeTransitGatewayRouteTablesOutput, bool) bool) error

	// DescribeTransitGatewayRouteTablesPagesWithContextFunc mocks the DescribeTransitGatewayRouteTablesPagesWithContext method.
	DescribeTransitGatewayRouteTablesPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeTransitGatewayRouteTablesInput, in3 func(*ec2.DescribeTransitGatewayRouteTablesOutput, bool) bool, in4 ...request.Option) error

	// DescribeTransitGatewayRouteTablesRequestFunc mocks the DescribeTransitGatewayRouteTablesRequest method.
	DescribeTransitGatewayRouteTablesRequestFunc func(in1 *ec2.DescribeTransitGatewayRouteTablesInput) (*request.Request, *ec2.DescribeTransitGatewayRouteTablesOutput)

	// DescribeTransitGatewayRouteTablesWithContextFunc mocks the DescribeTransitGatewayRouteTablesWithContext method.
	DescribeTransitGatewayRouteTablesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeTransitGatewayRouteTablesInput, in3 ...request.Option) (*ec2.DescribeTransitGatewayRouteTablesOutput, error)

	// DescribeTransitGatewayVpcAttachmentsFunc mocks the DescribeTransitGatewayVpcAttachments method.
	DescribeTransitGatewayVpcAttachmentsFunc func(in1 *ec2.DescribeTransitGatewayVpcAttachmentsInput) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error)

	// DescribeTransitGatewayVpcAttachmentsPagesFunc mocks the DescribeTransitGatewayVpcAttachmentsPages method.
	DescribeTransitGatewayVpcAttachmentsPagesFunc func(in1 *ec2.DescribeTransitGatewayVpcAttachmentsInput, in2 func(*ec2.DescribeTransitGatewayVpcAttachmentsOutput, bool) bool) error

	// DescribeTransitGatewayVpcAttachmentsPagesWithContextFunc mocks the DescribeTransitGatewayVpcAttachmentsPagesWithContext method.
	DescribeTransitGatewayVpcAttachmentsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeTransitGatewayVpcAttachmentsInput, in3 func(*ec2.DescribeTransitGatewayVpcAttachmentsOutput, bool) bool, in4 ...request.Option) error

	// DescribeTransitGatewayVpcAttachmentsRequestFunc mocks the DescribeTransitGatewayVpcAttachmentsRequest method.
	DescribeTransitGatewayVpcAttachmentsRequestFunc func(in1 *ec2.DescribeTransitGatewayVpcAttachmentsInput) (*request.Request, *ec2.DescribeTransitGatewayVpcAttachmentsOutput)

	// DescribeTransitGatewayVpcAttachmentsWithContextFunc mocks the DescribeTransitGatewayVpcAttachmentsWithContext method.
	DescribeTransitGatewayVpcAttachmentsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeTransitGatewayVpcAttachmentsInput, in3 ...request.Option) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error)

	// DescribeTransitGatewaysFunc mocks the DescribeTransitGateways method.
	DescribeTransitGatewaysFunc func(in1 *ec2.DescribeTransitGatewaysInput) (*ec2.DescribeTransitGatewaysOutput, error)

	// DescribeTransitGatewaysPagesFunc mocks the DescribeTransitGatewaysPages method.
	DescribeTransitGatewaysPagesFunc func(in1 *ec2.DescribeTransitGatewaysInput, in2 func(*ec2.DescribeTransitGatewaysOutput, bool) bool) error

	// DescribeTransitGatewaysPagesWithContextFunc mocks the DescribeTransitGatewaysPagesWithContext method.
	DescribeTransitGatewaysPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeTransitGatewaysInput, in3 func(*ec2.DescribeTransitGatewaysOutput, bool) bool, in4 ...request.Option) error

	// DescribeTransitGatewaysRequestFunc mocks the DescribeTransitGatewaysRequest method.
	DescribeTransitGatewaysRequestFunc func(in1 *ec2.DescribeTransitGatewaysInput) (*request.Request, *ec2.DescribeTransitGatewaysOutput)

	// DescribeTransitGatewaysWithContextFunc mocks the DescribeTransitGatewaysWithContext method.
	DescribeTransitGatewaysWithContextFunc func(in1 context.Context, in2 *ec2.DescribeTransitGatewaysInput, in3 ...request.Option) (*ec2.DescribeTransitGatewaysOutput, error)

	// DescribeVolumeAttributeFunc mocks the DescribeVolumeAttribute method.
	DescribeVolumeAttributeFunc func(in1 *ec2.DescribeVolumeAttributeInput) (*ec2.DescribeVolumeAttributeOutput, error)

	// DescribeVolumeAttributeRequestFunc mocks the DescribeVolumeAttributeRequest method.
	DescribeVolumeAttributeRequestFunc func(in1 *ec2.DescribeVolumeAttributeInput) (*request.Request, *ec2.DescribeVolumeAttributeOutput)

	// DescribeVolumeAttributeWithContextFunc mocks the DescribeVolumeAttributeWithContext method.
	DescribeVolumeAttributeWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVolumeAttributeInput, in3 ...request.Option) (*ec2.DescribeVolumeAttributeOutput, error)

	// DescribeVolumeStatusFunc mocks the DescribeVolumeStatus method.
	DescribeVolumeStatusFunc func(in1 *ec2.DescribeVolumeStatusInput) (*ec2.DescribeVolumeStatusOutput, error)

	// DescribeVolumeStatusPagesFunc mocks the DescribeVolumeStatusPages method.
	DescribeVolumeStatusPagesFunc func(in1 *ec2.DescribeVolumeStatusInput, in2 func(*ec2.DescribeVolumeStatusOutput, bool) bool) error

	// DescribeVolumeStatusPagesWithContextFunc mocks the DescribeVolumeStatusPagesWithContext method.
	DescribeVolumeStatusPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVolumeStatusInput, in3 func(*ec2.DescribeVolumeStatusOutput, bool) bool, in4 ...request.Option) error

	// DescribeVolumeStatusRequestFunc mocks the DescribeVolumeStatusRequest method.
	DescribeVolumeStatusRequestFunc func(in1 *ec2.DescribeVolumeStatusInput) (*request.Request, *ec2.DescribeVolumeStatusOutput)

	// DescribeVolumeStatusWithContextFunc mocks the DescribeVolumeStatusWithContext method.
	DescribeVolumeStatusWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVolumeStatusInput, in3 ...request.Option) (*ec2.DescribeVolumeStatusOutput, error)

	// DescribeVolumesFunc mocks the DescribeVolumes method.
	DescribeVolumesFunc func(in1 *ec2.DescribeVolumesInput) (*ec2.DescribeVolumesOutput, error)

	// DescribeVolumesModificationsFunc mocks the DescribeVolumesModifications method.
	DescribeVolumesModificationsFunc func(in1 *ec2.DescribeVolumesModificationsInput) (*ec2.DescribeVolumesModificationsOutput, error)

	// DescribeVolumesModificationsPagesFunc mocks the DescribeVolumesModificationsPages method.
	DescribeVolumesModificationsPagesFunc func(in1 *ec2.DescribeVolumesModificationsInput, in2 func(*ec2.DescribeVolumesModificationsOutput, bool) bool) error

	// DescribeVolumesModificationsPagesWithContextFunc mocks the DescribeVolumesModificationsPagesWithContext method.
	DescribeVolumesModificationsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVolumesModificationsInput, in3 func(*ec2.DescribeVolumesModificationsOutput, bool) bool, in4 ...request.Option) error

	// DescribeVolumesModificationsRequestFunc mocks the DescribeVolumesModificationsRequest method.
	DescribeVolumesModificationsRequestFunc func(in1 *ec2.DescribeVolumesModificationsInput) (*request.Request, *ec2.DescribeVolumesModificationsOutput)

	// DescribeVolumesModificationsWithContextFunc mocks the DescribeVolumesModificationsWithContext method.
	DescribeVolumesModificationsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVolumesModificationsInput, in3 ...request.Option) (*ec2.DescribeVolumesModificationsOutput, error)

	// DescribeVolumesPagesFunc mocks the DescribeVolumesPages method.
	DescribeVolumesPagesFunc func(in1 *ec2.DescribeVolumesInput, in2 func(*ec2.DescribeVolumesOutput, bool) bool) error

	// DescribeVolumesPagesWithContextFunc mocks the DescribeVolumesPagesWithContext method.
	DescribeVolumesPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVolumesInput, in3 func(*ec2.DescribeVolumesOutput, bool) bool, in4 ...request.Option) error

	// DescribeVolumesRequestFunc mocks the DescribeVolumesRequest method.
	DescribeVolumesRequestFunc func(in1 *ec2.DescribeVolumesInput) (*request.Request, *ec2.DescribeVolumesOutput)

	// DescribeVolumesWithContextFunc mocks the DescribeVolumesWithContext method.
	DescribeVolumesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVolumesInput, in3 ...request.Option) (*ec2.DescribeVolumesOutput, error)

	// DescribeVpcAttributeFunc mocks the DescribeVpcAttribute method.
	DescribeVpcAttributeFunc func(in1 *ec2.DescribeVpcAttributeInput) (*ec2.DescribeVpcAttributeOutput, error)

	// DescribeVpcAttributeRequestFunc mocks the DescribeVpcAttributeRequest method.
	DescribeVpcAttributeRequestFunc func(in1 *ec2.DescribeVpcAttributeInput) (*request.Request, *ec2.DescribeVpcAttributeOutput)

	// DescribeVpcAttributeWithContextFunc mocks the DescribeVpcAttributeWithContext method.
	DescribeVpcAttributeWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpcAttributeInput, in3 ...request.Option) (*ec2.DescribeVpcAttributeOutput, error)

	// DescribeVpcClassicLinkFunc mocks the DescribeVpcClassicLink method.
	DescribeVpcClassicLinkFunc func(in1 *ec2.DescribeVpcClassicLinkInput) (*ec2.DescribeVpcClassicLinkOutput, error)

	// DescribeVpcClassicLinkDnsSupportFunc mocks the DescribeVpcClassicLinkDnsSupport method.
	DescribeVpcClassicLinkDnsSupportFunc func(in1 *ec2.DescribeVpcClassicLinkDnsSupportInput) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error)

	// DescribeVpcClassicLinkDnsSupportPagesFunc mocks the DescribeVpcClassicLinkDnsSupportPages method.
	DescribeVpcClassicLinkDnsSupportPagesFunc func(in1 *ec2.DescribeVpcClassicLinkDnsSupportInput, in2 func(*ec2.DescribeVpcClassicLinkDnsSupportOutput, bool) bool) error

	// DescribeVpcClassicLinkDnsSupportPagesWithContextFunc mocks the DescribeVpcClassicLinkDnsSupportPagesWithContext method.
	DescribeVpcClassicLinkDnsSupportPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpcClassicLinkDnsSupportInput, in3 func(*ec2.DescribeVpcClassicLinkDnsSupportOutput, bool) bool, in4 ...request.Option) error

	// DescribeVpcClassicLinkDnsSupportRequestFunc mocks the DescribeVpcClassicLinkDnsSupportRequest method.
	DescribeVpcClassicLinkDnsSupportRequestFunc func(in1 *ec2.DescribeVpcClassicLinkDnsSupportInput) (*request.Request, *ec2.DescribeVpcClassicLinkDnsSupportOutput)

	// DescribeVpcClassicLinkDnsSupportWithContextFunc mocks the DescribeVpcClassicLinkDnsSupportWithContext method.
	DescribeVpcClassicLinkDnsSupportWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpcClassicLinkDnsSupportInput, in3 ...request.Option) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error)

	// DescribeVpcClassicLinkRequestFunc mocks the DescribeVpcClassicLinkRequest method.
	DescribeVpcClassicLinkRequestFunc func(in1 *ec2.DescribeVpcClassicLinkInput) (*request.Request, *ec2.DescribeVpcClassicLinkOutput)

	// DescribeVpcClassicLinkWithContextFunc mocks the DescribeVpcClassicLinkWithContext method.
	DescribeVpcClassicLinkWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpcClassicLinkInput, in3 ...request.Option) (*ec2.DescribeVpcClassicLinkOutput, error)

	// DescribeVpcEndpointConnectionNotificationsFunc mocks the DescribeVpcEndpointConnectionNotifications method.
	DescribeVpcEndpointConnectionNotificationsFunc func(in1 *ec2.DescribeVpcEndpointConnectionNotificationsInput) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error)

	// DescribeVpcEndpointConnectionNotificationsPagesFunc mocks the DescribeVpcEndpointConnectionNotificationsPages method.
	DescribeVpcEndpointConnectionNotificationsPagesFunc func(in1 *ec2.DescribeVpcEndpointConnectionNotificationsInput, in2 func(*ec2.DescribeVpcEndpointConnectionNotificationsOutput, bool) bool) error

	// DescribeVpcEndpointConnectionNotificationsPagesWithContextFunc mocks the DescribeVpcEndpointConnectionNotificationsPagesWithContext method.
	DescribeVpcEndpointConnectionNotificationsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpcEndpointConnectionNotificationsInput, in3 func(*ec2.DescribeVpcEndpointConnectionNotificationsOutput, bool) bool, in4 ...request.Option) error

	// DescribeVpcEndpointConnectionNotificationsRequestFunc mocks the DescribeVpcEndpointConnectionNotificationsRequest method.
	DescribeVpcEndpointConnectionNotificationsRequestFunc func(in1 *ec2.DescribeVpcEndpointConnectionNotificationsInput) (*request.Request, *ec2.DescribeVpcEndpointConnectionNotificationsOutput)

	// DescribeVpcEndpointConnectionNotificationsWithContextFunc mocks the DescribeVpcEndpointConnectionNotificationsWithContext method.
	DescribeVpcEndpointConnectionNotificationsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpcEndpointConnectionNotificationsInput, in3 ...request.Option) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error)

	// DescribeVpcEndpointConnectionsFunc mocks the DescribeVpcEndpointConnections method.
	DescribeVpcEndpointConnectionsFunc func(in1 *ec2.DescribeVpcEndpointConnectionsInput) (*ec2.DescribeVpcEndpointConnectionsOutput, error)

	// DescribeVpcEndpointConnectionsPagesFunc mocks the DescribeVpcEndpointConnectionsPages method.
	DescribeVpcEndpointConnectionsPagesFunc func(in1 *ec2.DescribeVpcEndpointConnectionsInput, in2 func(*ec2.DescribeVpcEndpointConnectionsOutput, bool) bool) error

	// DescribeVpcEndpointConnectionsPagesWithContextFunc mocks the DescribeVpcEndpointConnectionsPagesWithContext method.
	DescribeVpcEndpointConnectionsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpcEndpointConnectionsInput, in3 func(*ec2.DescribeVpcEndpointConnectionsOutput, bool) bool, in4 ...request.Option) error

	// DescribeVpcEndpointConnectionsRequestFunc mocks the DescribeVpcEndpointConnectionsRequest method.
	DescribeVpcEndpointConnectionsRequestFunc func(in1 *ec2.DescribeVpcEndpointConnectionsInput) (*request.Request, *ec2.DescribeVpcEndpointConnectionsOutput)

	// DescribeVpcEndpointConnectionsWithContextFunc mocks the DescribeVpcEndpointConnectionsWithContext method.
	DescribeVpcEndpointConnectionsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpcEndpointConnectionsInput, in3 ...request.Option) (*ec2.DescribeVpcEndpointConnectionsOutput, error)

	// DescribeVpcEndpointServiceConfigurationsFunc mocks the DescribeVpcEndpointServiceConfigurations method.
	DescribeVpcEndpointServiceConfigurationsFunc func(in1 *ec2.DescribeVpcEndpointServiceConfigurationsInput) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error)

	// DescribeVpcEndpointServiceConfigurationsPagesFunc mocks the DescribeVpcEndpointServiceConfigurationsPages method.
	DescribeVpcEndpointServiceConfigurationsPagesFunc func(in1 *ec2.DescribeVpcEndpointServiceConfigurationsInput, in2 func(*ec2.DescribeVpcEndpointServiceConfigurationsOutput, bool) bool) error

	// DescribeVpcEndpointServiceConfigurationsPagesWithContextFunc mocks the DescribeVpcEndpointServiceConfigurationsPagesWithContext method.
	DescribeVpcEndpointServiceConfigurationsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpcEndpointServiceConfigurationsInput, in3 func(*ec2.DescribeVpcEndpointServiceConfigurationsOutput, bool) bool, in4 ...request.Option) error

	// DescribeVpcEndpointServiceConfigurationsRequestFunc mocks the DescribeVpcEndpointServiceConfigurationsRequest method.
	DescribeVpcEndpointServiceConfigurationsRequestFunc func(in1 *ec2.DescribeVpcEndpointServiceConfigurationsInput) (*request.Request, *ec2.DescribeVpcEndpointServiceConfigurationsOutput)

	// DescribeVpcEndpointServiceConfigurationsWithContextFunc mocks the DescribeVpcEndpointServiceConfigurationsWithContext method.
	DescribeVpcEndpointServiceConfigurationsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpcEndpointServiceConfigurationsInput, in3 ...request.Option) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error)

	// DescribeVpcEndpointServicePermissionsFunc mocks the DescribeVpcEndpointServicePermissions method.
	DescribeVpcEndpointServicePermissionsFunc func(in1 *ec2.DescribeVpcEndpointServicePermissionsInput) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error)

	// DescribeVpcEndpointServicePermissionsPagesFunc mocks the DescribeVpcEndpointServicePermissionsPages method.
	DescribeVpcEndpointServicePermissionsPagesFunc func(in1 *ec2.DescribeVpcEndpointServicePermissionsInput, in2 func(*ec2.DescribeVpcEndpointServicePermissionsOutput, bool) bool) error

	// DescribeVpcEndpointServicePermissionsPagesWithContextFunc mocks the DescribeVpcEndpointServicePermissionsPagesWithContext method.
	DescribeVpcEndpointServicePermissionsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpcEndpointServicePermissionsInput, in3 func(*ec2.DescribeVpcEndpointServicePermissionsOutput, bool) bool, in4 ...request.Option) error

	// DescribeVpcEndpointServicePermissionsRequestFunc mocks the DescribeVpcEndpointServicePermissionsRequest method.
	DescribeVpcEndpointServicePermissionsRequestFunc func(in1 *ec2.DescribeVpcEndpointServicePermissionsInput) (*request.Request, *ec2.DescribeVpcEndpointServicePermissionsOutput)

	// DescribeVpcEndpointServicePermissionsWithContextFunc mocks the DescribeVpcEndpointServicePermissionsWithContext method.
	DescribeVpcEndpointServicePermissionsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpcEndpointServicePermissionsInput, in3 ...request.Option) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error)

	// DescribeVpcEndpointServicesFunc mocks the DescribeVpcEndpointServices method.
	DescribeVpcEndpointServicesFunc func(in1 *ec2.DescribeVpcEndpointServicesInput) (*ec2.DescribeVpcEndpointServicesOutput, error)

	// DescribeVpcEndpointServicesRequestFunc mocks the DescribeVpcEndpointServicesRequest method.
	DescribeVpcEndpointServicesRequestFunc func(in1 *ec2.DescribeVpcEndpointServicesInput) (*request.Request, *ec2.DescribeVpcEndpointServicesOutput)

	// DescribeVpcEndpointServicesWithContextFunc mocks the DescribeVpcEndpointServicesWithContext method.
	DescribeVpcEndpointServicesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpcEndpointServicesInput, in3 ...request.Option) (*ec2.DescribeVpcEndpointServicesOutput, error)

	// DescribeVpcEndpointsFunc mocks the DescribeVpcEndpoints method.
	DescribeVpcEndpointsFunc func(in1 *ec2.DescribeVpcEndpointsInput) (*ec2.DescribeVpcEndpointsOutput, error)

	// DescribeVpcEndpointsPagesFunc mocks the DescribeVpcEndpointsPages method.
	DescribeVpcEndpointsPagesFunc func(in1 *ec2.DescribeVpcEndpointsInput, in2 func(*ec2.DescribeVpcEndpointsOutput, bool) bool) error

	// DescribeVpcEndpointsPagesWithContextFunc mocks the DescribeVpcEndpointsPagesWithContext method.
	DescribeVpcEndpointsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpcEndpointsInput, in3 func(*ec2.DescribeVpcEndpointsOutput, bool) bool, in4 ...request.Option) error

	// DescribeVpcEndpointsRequestFunc mocks the DescribeVpcEndpointsRequest method.
	DescribeVpcEndpointsRequestFunc func(in1 *ec2.DescribeVpcEndpointsInput) (*request.Request, *ec2.DescribeVpcEndpointsOutput)

	// DescribeVpcEndpointsWithContextFunc mocks the DescribeVpcEndpointsWithContext method.
	DescribeVpcEndpointsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpcEndpointsInput, in3 ...request.Option) (*ec2.DescribeVpcEndpointsOutput, error)

	// DescribeVpcPeeringConnectionsFunc mocks the DescribeVpcPeeringConnections method.
	DescribeVpcPeeringConnectionsFunc func(in1 *ec2.DescribeVpcPeeringConnectionsInput) (*ec2.DescribeVpcPeeringConnectionsOutput, error)

	// DescribeVpcPeeringConnectionsPagesFunc mocks the DescribeVpcPeeringConnectionsPages method.
	DescribeVpcPeeringConnectionsPagesFunc func(in1 *ec2.DescribeVpcPeeringConnectionsInput, in2 func(*ec2.DescribeVpcPeeringConnectionsOutput, bool) bool) error

	// DescribeVpcPeeringConnectionsPagesWithContextFunc mocks the DescribeVpcPeeringConnectionsPagesWithContext method.
	DescribeVpcPeeringConnectionsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpcPeeringConnectionsInput, in3 func(*ec2.DescribeVpcPeeringConnectionsOutput, bool) bool, in4 ...request.Option) error

	// DescribeVpcPeeringConnectionsRequestFunc mocks the DescribeVpcPeeringConnectionsRequest method.
	DescribeVpcPeeringConnectionsRequestFunc func(in1 *ec2.DescribeVpcPeeringConnectionsInput) (*request.Request, *ec2.DescribeVpcPeeringConnectionsOutput)

	// DescribeVpcPeeringConnectionsWithContextFunc mocks the DescribeVpcPeeringConnectionsWithContext method.
	DescribeVpcPeeringConnectionsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpcPeeringConnectionsInput, in3 ...request.Option) (*ec2.DescribeVpcPeeringConnectionsOutput, error)

	// DescribeVpcsFunc mocks the DescribeVpcs method.
	DescribeVpcsFunc func(in1 *ec2.DescribeVpcsInput) (*ec2.DescribeVpcsOutput, error)

	// DescribeVpcsPagesFunc mocks the DescribeVpcsPages method.
	DescribeVpcsPagesFunc func(in1 *ec2.DescribeVpcsInput, in2 func(*ec2.DescribeVpcsOutput, bool) bool) error

	// DescribeVpcsPagesWithContextFunc mocks the DescribeVpcsPagesWithContext method.
	DescribeVpcsPagesWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpcsInput, in3 func(*ec2.DescribeVpcsOutput, bool) bool, in4 ...request.Option) error

	// DescribeVpcsRequestFunc mocks the DescribeVpcsRequest method.
	DescribeVpcsRequestFunc func(in1 *ec2.DescribeVpcsInput) (*request.Request, *ec2.DescribeVpcsOutput)

	// DescribeVpcsWithContextFunc mocks the DescribeVpcsWithContext method.
	DescribeVpcsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpcsInput, in3 ...request.Option) (*ec2.DescribeVpcsOutput, error)

	// DescribeVpnConnectionsFunc mocks the DescribeVpnConnections method.
	DescribeVpnConnectionsFunc func(in1 *ec2.DescribeVpnConnectionsInput) (*ec2.DescribeVpnConnectionsOutput, error)

	// DescribeVpnConnectionsRequestFunc mocks the DescribeVpnConnectionsRequest method.
	DescribeVpnConnectionsRequestFunc func(in1 *ec2.DescribeVpnConnectionsInput) (*request.Request, *ec2.DescribeVpnConnectionsOutput)

	// DescribeVpnConnectionsWithContextFunc mocks the DescribeVpnConnectionsWithContext method.
	DescribeVpnConnectionsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpnConnectionsInput, in3 ...request.Option) (*ec2.DescribeVpnConnectionsOutput, error)

	// DescribeVpnGatewaysFunc mocks the DescribeVpnGateways method.
	DescribeVpnGatewaysFunc func(in1 *ec2.DescribeVpnGatewaysInput) (*ec2.DescribeVpnGatewaysOutput, error)

	// DescribeVpnGatewaysRequestFunc mocks the DescribeVpnGatewaysRequest method.
	DescribeVpnGatewaysRequestFunc func(in1 *ec2.DescribeVpnGatewaysInput) (*request.Request, *ec2.DescribeVpnGatewaysOutput)

	// DescribeVpnGatewaysWithContextFunc mocks the DescribeVpnGatewaysWithContext method.
	DescribeVpnGatewaysWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpnGatewaysInput, in3 ...request.Option) (*ec2.DescribeVpnGatewaysOutput, error)

	// DetachClassicLinkVpcFunc mocks the DetachClassicLinkVpc method.
	DetachClassicLinkVpcFunc func(in1 *ec2.DetachClassicLinkVpcInput) (*ec2.DetachClassicLinkVpcOutput, error)

	// DetachClassicLinkVpcRequestFunc mocks the DetachClassicLinkVpcRequest method.
	DetachClassicLinkVpcRequestFunc func(in1 *ec2.DetachClassicLinkVpcInput) (*request.Request, *ec2.DetachClassicLinkVpcOutput)

	// DetachClassicLinkVpcWithContextFunc mocks the DetachClassicLinkVpcWithContext method.
	DetachClassicLinkVpcWithContextFunc func(in1 context.Context, in2 *ec2.DetachClassicLinkVpcInput, in3 ...request.Option) (*ec2.DetachClassicLinkVpcOutput, error)

	// DetachInternetGatewayFunc mocks the DetachInternetGateway method.
	DetachInternetGatewayFunc func(in1 *ec2.DetachInternetGatewayInput) (*ec2.DetachInternetGatewayOutput, error)

	// DetachInternetGatewayRequestFunc mocks the DetachInternetGatewayRequest method.
	DetachInternetGatewayRequestFunc func(in1 *ec2.DetachInternetGatewayInput) (*request.Request, *ec2.DetachInternetGatewayOutput)

	// DetachInternetGatewayWithContextFunc mocks the DetachInternetGatewayWithContext method.
	DetachInternetGatewayWithContextFunc func(in1 context.Context, in2 *ec2.DetachInternetGatewayInput, in3 ...request.Option) (*ec2.DetachInternetGatewayOutput, error)

	// DetachNetworkInterfaceFunc mocks the DetachNetworkInterface method.
	DetachNetworkInterfaceFunc func(in1 *ec2.DetachNetworkInterfaceInput) (*ec2.DetachNetworkInterfaceOutput, error)

	// DetachNetworkInterfaceRequestFunc mocks the DetachNetworkInterfaceRequest method.
	DetachNetworkInterfaceRequestFunc func(in1 *ec2.DetachNetworkInterfaceInput) (*request.Request, *ec2.DetachNetworkInterfaceOutput)

	// DetachNetworkInterfaceWithContextFunc mocks the DetachNetworkInterfaceWithContext method.
	DetachNetworkInterfaceWithContextFunc func(in1 context.Context, in2 *ec2.DetachNetworkInterfaceInput, in3 ...request.Option) (*ec2.DetachNetworkInterfaceOutput, error)

	// DetachVolumeFunc mocks the DetachVolume method.
	DetachVolumeFunc func(in1 *ec2.DetachVolumeInput) (*ec2.VolumeAttachment, error)

	// DetachVolumeRequestFunc mocks the DetachVolumeRequest method.
	DetachVolumeRequestFunc func(in1 *ec2.DetachVolumeInput) (*request.Request, *ec2.VolumeAttachment)

	// DetachVolumeWithContextFunc mocks the DetachVolumeWithContext method.
	DetachVolumeWithContextFunc func(in1 context.Context, in2 *ec2.DetachVolumeInput, in3 ...request.Option) (*ec2.VolumeAttachment, error)

	// DetachVpnGatewayFunc mocks the DetachVpnGateway method.
	DetachVpnGatewayFunc func(in1 *ec2.DetachVpnGatewayInput) (*ec2.DetachVpnGatewayOutput, error)

	// DetachVpnGatewayRequestFunc mocks the DetachVpnGatewayRequest method.
	DetachVpnGatewayRequestFunc func(in1 *ec2.DetachVpnGatewayInput) (*request.Request, *ec2.DetachVpnGatewayOutput)

	// DetachVpnGatewayWithContextFunc mocks the DetachVpnGatewayWithContext method.
	DetachVpnGatewayWithContextFunc func(in1 context.Context, in2 *ec2.DetachVpnGatewayInput, in3 ...request.Option) (*ec2.DetachVpnGatewayOutput, error)

	// DisableEbsEncryptionByDefaultFunc mocks the DisableEbsEncryptionByDefault method.
	DisableEbsEncryptionByDefaultFunc func(in1 *ec2.DisableEbsEncryptionByDefaultInput) (*ec2.DisableEbsEncryptionByDefaultOutput, error)

	// DisableEbsEncryptionByDefaultRequestFunc mocks the DisableEbsEncryptionByDefaultRequest method.
	DisableEbsEncryptionByDefaultRequestFunc func(in1 *ec2.DisableEbsEncryptionByDefaultInput) (*request.Request, *ec2.DisableEbsEncryptionByDefaultOutput)

	// DisableEbsEncryptionByDefaultWithContextFunc mocks the DisableEbsEncryptionByDefaultWithContext method.
	DisableEbsEncryptionByDefaultWithContextFunc func(in1 context.Context, in2 *ec2.DisableEbsEncryptionByDefaultInput, in3 ...request.Option) (*ec2.DisableEbsEncryptionByDefaultOutput, error)

	// DisableFastSnapshotRestoresFunc mocks the DisableFastSnapshotRestores method.
	DisableFastSnapshotRestoresFunc func(in1 *ec2.DisableFastSnapshotRestoresInput) (*ec2.DisableFastSnapshotRestoresOutput, error)

	// DisableFastSnapshotRestoresRequestFunc mocks the DisableFastSnapshotRestoresRequest method.
	DisableFastSnapshotRestoresRequestFunc func(in1 *ec2.DisableFastSnapshotRestoresInput) (*request.Request, *ec2.DisableFastSnapshotRestoresOutput)

	// DisableFastSnapshotRestoresWithContextFunc mocks the DisableFastSnapshotRestoresWithContext method.
	DisableFastSnapshotRestoresWithContextFunc func(in1 context.Context, in2 *ec2.DisableFastSnapshotRestoresInput, in3 ...request.Option) (*ec2.DisableFastSnapshotRestoresOutput, error)

	// DisableTransitGatewayRouteTablePropagationFunc mocks the DisableTransitGatewayRouteTablePropagation method.
	DisableTransitGatewayRouteTablePropagationFunc func(in1 *ec2.DisableTransitGatewayRouteTablePropagationInput) (*ec2.DisableTransitGatewayRouteTablePropagationOutput, error)

	// DisableTransitGatewayRouteTablePropagationRequestFunc mocks the DisableTransitGatewayRouteTablePropagationRequest method.
	DisableTransitGatewayRouteTablePropagationRequestFunc func(in1 *ec2.DisableTransitGatewayRouteTablePropagationInput) (*request.Request, *ec2.DisableTransitGatewayRouteTablePropagationOutput)

	// DisableTransitGatewayRouteTablePropagationWithContextFunc mocks the DisableTransitGatewayRouteTablePropagationWithContext method.
	DisableTransitGatewayRouteTablePropagationWithContextFunc func(in1 context.Context, in2 *ec2.DisableTransitGatewayRouteTablePropagationInput, in3 ...request.Option) (*ec2.DisableTransitGatewayRouteTablePropagationOutput, error)

	// DisableVgwRoutePropagationFunc mocks the DisableVgwRoutePropagation method.
	DisableVgwRoutePropagationFunc func(in1 *ec2.DisableVgwRoutePropagationInput) (*ec2.DisableVgwRoutePropagationOutput, error)

	// DisableVgwRoutePropagationRequestFunc mocks the DisableVgwRoutePropagationRequest method.
	DisableVgwRoutePropagationRequestFunc func(in1 *ec2.DisableVgwRoutePropagationInput) (*request.Request, *ec2.DisableVgwRoutePropagationOutput)

	// DisableVgwRoutePropagationWithContextFunc mocks the DisableVgwRoutePropagationWithContext method.
	DisableVgwRoutePropagationWithContextFunc func(in1 context.Context, in2 *ec2.DisableVgwRoutePropagationInput, in3 ...request.Option) (*ec2.DisableVgwRoutePropagationOutput, error)

	// DisableVpcClassicLinkFunc mocks the DisableVpcClassicLink method.
	DisableVpcClassicLinkFunc func(in1 *ec2.DisableVpcClassicLinkInput) (*ec2.DisableVpcClassicLinkOutput, error)

	// DisableVpcClassicLinkDnsSupportFunc mocks the DisableVpcClassicLinkDnsSupport method.
	DisableVpcClassicLinkDnsSupportFunc func(in1 *ec2.DisableVpcClassicLinkDnsSupportInput) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error)

	// DisableVpcClassicLinkDnsSupportRequestFunc mocks the DisableVpcClassicLinkDnsSupportRequest method.
	DisableVpcClassicLinkDnsSupportRequestFunc func(in1 *ec2.DisableVpcClassicLinkDnsSupportInput) (*request.Request, *ec2.DisableVpcClassicLinkDnsSupportOutput)

	// DisableVpcClassicLinkDnsSupportWithContextFunc mocks the DisableVpcClassicLinkDnsSupportWithContext method.
	DisableVpcClassicLinkDnsSupportWithContextFunc func(in1 context.Context, in2 *ec2.DisableVpcClassicLinkDnsSupportInput, in3 ...request.Option) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error)

	// DisableVpcClassicLinkRequestFunc mocks the DisableVpcClassicLinkRequest method.
	DisableVpcClassicLinkRequestFunc func(in1 *ec2.DisableVpcClassicLinkInput) (*request.Request, *ec2.DisableVpcClassicLinkOutput)

	// DisableVpcClassicLinkWithContextFunc mocks the DisableVpcClassicLinkWithContext method.
	DisableVpcClassicLinkWithContextFunc func(in1 context.Context, in2 *ec2.DisableVpcClassicLinkInput, in3 ...request.Option) (*ec2.DisableVpcClassicLinkOutput, error)

	// DisassociateAddressFunc mocks the DisassociateAddress method.
	DisassociateAddressFunc func(in1 *ec2.DisassociateAddressInput) (*ec2.DisassociateAddressOutput, error)

	// DisassociateAddressRequestFunc mocks the DisassociateAddressRequest method.
	DisassociateAddressRequestFunc func(in1 *ec2.DisassociateAddressInput) (*request.Request, *ec2.DisassociateAddressOutput)

	// DisassociateAddressWithContextFunc mocks the DisassociateAddressWithContext method.
	DisassociateAddressWithContextFunc func(in1 context.Context, in2 *ec2.DisassociateAddressInput, in3 ...request.Option) (*ec2.DisassociateAddressOutput, error)

	// DisassociateClientVpnTargetNetworkFunc mocks the DisassociateClientVpnTargetNetwork method.
	DisassociateClientVpnTargetNetworkFunc func(in1 *ec2.DisassociateClientVpnTargetNetworkInput) (*ec2.DisassociateClientVpnTargetNetworkOutput, error)

	// DisassociateClientVpnTargetNetworkRequestFunc mocks the DisassociateClientVpnTargetNetworkRequest method.
	DisassociateClientVpnTargetNetworkRequestFunc func(in1 *ec2.DisassociateClientVpnTargetNetworkInput) (*request.Request, *ec2.DisassociateClientVpnTargetNetworkOutput)

	// DisassociateClientVpnTargetNetworkWithContextFunc mocks the DisassociateClientVpnTargetNetworkWithContext method.
	DisassociateClientVpnTargetNetworkWithContextFunc func(in1 context.Context, in2 *ec2.DisassociateClientVpnTargetNetworkInput, in3 ...request.Option) (*ec2.DisassociateClientVpnTargetNetworkOutput, error)

	// DisassociateIamInstanceProfileFunc mocks the DisassociateIamInstanceProfile method.
	DisassociateIamInstanceProfileFunc func(in1 *ec2.DisassociateIamInstanceProfileInput) (*ec2.DisassociateIamInstanceProfileOutput, error)

	// DisassociateIamInstanceProfileRequestFunc mocks the DisassociateIamInstanceProfileRequest method.
	DisassociateIamInstanceProfileRequestFunc func(in1 *ec2.DisassociateIamInstanceProfileInput) (*request.Request, *ec2.DisassociateIamInstanceProfileOutput)

	// DisassociateIamInstanceProfileWithContextFunc mocks the DisassociateIamInstanceProfileWithContext method.
	DisassociateIamInstanceProfileWithContextFunc func(in1 context.Context, in2 *ec2.DisassociateIamInstanceProfileInput, in3 ...request.Option) (*ec2.DisassociateIamInstanceProfileOutput, error)

	// DisassociateRouteTableFunc mocks the DisassociateRouteTable method.
	DisassociateRouteTableFunc func(in1 *ec2.DisassociateRouteTableInput) (*ec2.DisassociateRouteTableOutput, error)

	// DisassociateRouteTableRequestFunc mocks the DisassociateRouteTableRequest method.
	DisassociateRouteTableRequestFunc func(in1 *ec2.DisassociateRouteTableInput) (*request.Request, *ec2.DisassociateRouteTableOutput)

	// DisassociateRouteTableWithContextFunc mocks the DisassociateRouteTableWithContext method.
	DisassociateRouteTableWithContextFunc func(in1 context.Context, in2 *ec2.DisassociateRouteTableInput, in3 ...request.Option) (*ec2.DisassociateRouteTableOutput, error)

	// DisassociateSubnetCidrBlockFunc mocks the DisassociateSubnetCidrBlock method.
	DisassociateSubnetCidrBlockFunc func(in1 *ec2.DisassociateSubnetCidrBlockInput) (*ec2.DisassociateSubnetCidrBlockOutput, error)

	// DisassociateSubnetCidrBlockRequestFunc mocks the DisassociateSubnetCidrBlockRequest method.
	DisassociateSubnetCidrBlockRequestFunc func(in1 *ec2.DisassociateSubnetCidrBlockInput) (*request.Request, *ec2.DisassociateSubnetCidrBlockOutput)

	// DisassociateSubnetCidrBlockWithContextFunc mocks the DisassociateSubnetCidrBlockWithContext method.
	DisassociateSubnetCidrBlockWithContextFunc func(in1 context.Context, in2 *ec2.DisassociateSubnetCidrBlockInput, in3 ...request.Option) (*ec2.DisassociateSubnetCidrBlockOutput, error)

	// DisassociateTransitGatewayMulticastDomainFunc mocks the DisassociateTransitGatewayMulticastDomain method.
	DisassociateTransitGatewayMulticastDomainFunc func(in1 *ec2.DisassociateTransitGatewayMulticastDomainInput) (*ec2.DisassociateTransitGatewayMulticastDomainOutput, error)

	// DisassociateTransitGatewayMulticastDomainRequestFunc mocks the DisassociateTransitGatewayMulticastDomainRequest method.
	DisassociateTransitGatewayMulticastDomainRequestFunc func(in1 *ec2.DisassociateTransitGatewayMulticastDomainInput) (*request.Request, *ec2.DisassociateTransitGatewayMulticastDomainOutput)

	// DisassociateTransitGatewayMulticastDomainWithContextFunc mocks the DisassociateTransitGatewayMulticastDomainWithContext method.
	DisassociateTransitGatewayMulticastDomainWithContextFunc func(in1 context.Context, in2 *ec2.DisassociateTransitGatewayMulticastDomainInput, in3 ...request.Option) (*ec2.DisassociateTransitGatewayMulticastDomainOutput, error)

	// DisassociateTransitGatewayRouteTableFunc mocks the DisassociateTransitGatewayRouteTable method.
	DisassociateTransitGatewayRouteTableFunc func(in1 *ec2.DisassociateTransitGatewayRouteTableInput) (*ec2.DisassociateTransitGatewayRouteTableOutput, error)

	// DisassociateTransitGatewayRouteTableRequestFunc mocks the DisassociateTransitGatewayRouteTableRequest method.
	DisassociateTransitGatewayRouteTableRequestFunc func(in1 *ec2.DisassociateTransitGatewayRouteTableInput) (*request.Request, *ec2.DisassociateTransitGatewayRouteTableOutput)

	// DisassociateTransitGatewayRouteTableWithContextFunc mocks the DisassociateTransitGatewayRouteTableWithContext method.
	DisassociateTransitGatewayRouteTableWithContextFunc func(in1 context.Context, in2 *ec2.DisassociateTransitGatewayRouteTableInput, in3 ...request.Option) (*ec2.DisassociateTransitGatewayRouteTableOutput, error)

	// DisassociateVpcCidrBlockFunc mocks the DisassociateVpcCidrBlock method.
	DisassociateVpcCidrBlockFunc func(in1 *ec2.DisassociateVpcCidrBlockInput) (*ec2.DisassociateVpcCidrBlockOutput, error)

	// DisassociateVpcCidrBlockRequestFunc mocks the DisassociateVpcCidrBlockRequest method.
	DisassociateVpcCidrBlockRequestFunc func(in1 *ec2.DisassociateVpcCidrBlockInput) (*request.Request, *ec2.DisassociateVpcCidrBlockOutput)

	// DisassociateVpcCidrBlockWithContextFunc mocks the DisassociateVpcCidrBlockWithContext method.
	DisassociateVpcCidrBlockWithContextFunc func(in1 context.Context, in2 *ec2.DisassociateVpcCidrBlockInput, in3 ...request.Option) (*ec2.DisassociateVpcCidrBlockOutput, error)

	// EnableEbsEncryptionByDefaultFunc mocks the EnableEbsEncryptionByDefault method.
	EnableEbsEncryptionByDefaultFunc func(in1 *ec2.EnableEbsEncryptionByDefaultInput) (*ec2.EnableEbsEncryptionByDefaultOutput, error)

	// EnableEbsEncryptionByDefaultRequestFunc mocks the EnableEbsEncryptionByDefaultRequest method.
	EnableEbsEncryptionByDefaultRequestFunc func(in1 *ec2.EnableEbsEncryptionByDefaultInput) (*request.Request, *ec2.EnableEbsEncryptionByDefaultOutput)

	// EnableEbsEncryptionByDefaultWithContextFunc mocks the EnableEbsEncryptionByDefaultWithContext method.
	EnableEbsEncryptionByDefaultWithContextFunc func(in1 context.Context, in2 *ec2.EnableEbsEncryptionByDefaultInput, in3 ...request.Option) (*ec2.EnableEbsEncryptionByDefaultOutput, error)

	// EnableFastSnapshotRestoresFunc mocks the EnableFastSnapshotRestores method.
	EnableFastSnapshotRestoresFunc func(in1 *ec2.EnableFastSnapshotRestoresInput) (*ec2.EnableFastSnapshotRestoresOutput, error)

	// EnableFastSnapshotRestoresRequestFunc mocks the EnableFastSnapshotRestoresRequest method.
	EnableFastSnapshotRestoresRequestFunc func(in1 *ec2.EnableFastSnapshotRestoresInput) (*request.Request, *ec2.EnableFastSnapshotRestoresOutput)

	// EnableFastSnapshotRestoresWithContextFunc mocks the EnableFastSnapshotRestoresWithContext method.
	EnableFastSnapshotRestoresWithContextFunc func(in1 context.Context, in2 *ec2.EnableFastSnapshotRestoresInput, in3 ...request.Option) (*ec2.EnableFastSnapshotRestoresOutput, error)

	// EnableTransitGatewayRouteTablePropagationFunc mocks the EnableTransitGatewayRouteTablePropagation method.
	EnableTransitGatewayRouteTablePropagationFunc func(in1 *ec2.EnableTransitGatewayRouteTablePropagationInput) (*ec2.EnableTransitGatewayRouteTablePropagationOutput, error)

	// EnableTransitGatewayRouteTablePropagationRequestFunc mocks the EnableTransitGatewayRouteTablePropagationRequest method.
	EnableTransitGatewayRouteTablePropagationRequestFunc func(in1 *ec2.EnableTransitGatewayRouteTablePropagationInput) (*request.Request, *ec2.EnableTransitGatewayRouteTablePropagationOutput)

	// EnableTransitGatewayRouteTablePropagationWithContextFunc mocks the EnableTransitGatewayRouteTablePropagationWithContext method.
	EnableTransitGatewayRouteTablePropagationWithContextFunc func(in1 context.Context, in2 *ec2.EnableTransitGatewayRouteTablePropagationInput, in3 ...request.Option) (*ec2.EnableTransitGatewayRouteTablePropagationOutput, error)

	// EnableVgwRoutePropagationFunc mocks the EnableVgwRoutePropagation method.
	EnableVgwRoutePropagationFunc func(in1 *ec2.EnableVgwRoutePropagationInput) (*ec2.EnableVgwRoutePropagationOutput, error)

	// EnableVgwRoutePropagationRequestFunc mocks the EnableVgwRoutePropagationRequest method.
	EnableVgwRoutePropagationRequestFunc func(in1 *ec2.EnableVgwRoutePropagationInput) (*request.Request, *ec2.EnableVgwRoutePropagationOutput)

	// EnableVgwRoutePropagationWithContextFunc mocks the EnableVgwRoutePropagationWithContext method.
	EnableVgwRoutePropagationWithContextFunc func(in1 context.Context, in2 *ec2.EnableVgwRoutePropagationInput, in3 ...request.Option) (*ec2.EnableVgwRoutePropagationOutput, error)

	// EnableVolumeIOFunc mocks the EnableVolumeIO method.
	EnableVolumeIOFunc func(in1 *ec2.EnableVolumeIOInput) (*ec2.EnableVolumeIOOutput, error)

	// EnableVolumeIORequestFunc mocks the EnableVolumeIORequest method.
	EnableVolumeIORequestFunc func(in1 *ec2.EnableVolumeIOInput) (*request.Request, *ec2.EnableVolumeIOOutput)

	// EnableVolumeIOWithContextFunc mocks the EnableVolumeIOWithContext method.
	EnableVolumeIOWithContextFunc func(in1 context.Context, in2 *ec2.EnableVolumeIOInput, in3 ...request.Option) (*ec2.EnableVolumeIOOutput, error)

	// EnableVpcClassicLinkFunc mocks the EnableVpcClassicLink method.
	EnableVpcClassicLinkFunc func(in1 *ec2.EnableVpcClassicLinkInput) (*ec2.EnableVpcClassicLinkOutput, error)

	// EnableVpcClassicLinkDnsSupportFunc mocks the EnableVpcClassicLinkDnsSupport method.
	EnableVpcClassicLinkDnsSupportFunc func(in1 *ec2.EnableVpcClassicLinkDnsSupportInput) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error)

	// EnableVpcClassicLinkDnsSupportRequestFunc mocks the EnableVpcClassicLinkDnsSupportRequest method.
	EnableVpcClassicLinkDnsSupportRequestFunc func(in1 *ec2.EnableVpcClassicLinkDnsSupportInput) (*request.Request, *ec2.EnableVpcClassicLinkDnsSupportOutput)

	// EnableVpcClassicLinkDnsSupportWithContextFunc mocks the EnableVpcClassicLinkDnsSupportWithContext method.
	EnableVpcClassicLinkDnsSupportWithContextFunc func(in1 context.Context, in2 *ec2.EnableVpcClassicLinkDnsSupportInput, in3 ...request.Option) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error)

	// EnableVpcClassicLinkRequestFunc mocks the EnableVpcClassicLinkRequest method.
	EnableVpcClassicLinkRequestFunc func(in1 *ec2.EnableVpcClassicLinkInput) (*request.Request, *ec2.EnableVpcClassicLinkOutput)

	// EnableVpcClassicLinkWithContextFunc mocks the EnableVpcClassicLinkWithContext method.
	EnableVpcClassicLinkWithContextFunc func(in1 context.Context, in2 *ec2.EnableVpcClassicLinkInput, in3 ...request.Option) (*ec2.EnableVpcClassicLinkOutput, error)

	// ExportClientVpnClientCertificateRevocationListFunc mocks the ExportClientVpnClientCertificateRevocationList method.
	ExportClientVpnClientCertificateRevocationListFunc func(in1 *ec2.ExportClientVpnClientCertificateRevocationListInput) (*ec2.ExportClientVpnClientCertificateRevocationListOutput, error)

	// ExportClientVpnClientCertificateRevocationListRequestFunc mocks the ExportClientVpnClientCertificateRevocationListRequest method.
	ExportClientVpnClientCertificateRevocationListRequestFunc func(in1 *ec2.ExportClientVpnClientCertificateRevocationListInput) (*request.Request, *ec2.ExportClientVpnClientCertificateRevocationListOutput)

	// ExportClientVpnClientCertificateRevocationListWithContextFunc mocks the ExportClientVpnClientCertificateRevocationListWithContext method.
	ExportClientVpnClientCertificateRevocationListWithContextFunc func(in1 context.Context, in2 *ec2.ExportClientVpnClientCertificateRevocationListInput, in3 ...request.Option) (*ec2.ExportClientVpnClientCertificateRevocationListOutput, error)

	// ExportClientVpnClientConfigurationFunc mocks the ExportClientVpnClientConfiguration method.
	ExportClientVpnClientConfigurationFunc func(in1 *ec2.ExportClientVpnClientConfigurationInput) (*ec2.ExportClientVpnClientConfigurationOutput, error)

	// ExportClientVpnClientConfigurationRequestFunc mocks the ExportClientVpnClientConfigurationRequest method.
	ExportClientVpnClientConfigurationRequestFunc func(in1 *ec2.ExportClientVpnClientConfigurationInput) (*request.Request, *ec2.ExportClientVpnClientConfigurationOutput)

	// ExportClientVpnClientConfigurationWithContextFunc mocks the ExportClientVpnClientConfigurationWithContext method.
	ExportClientVpnClientConfigurationWithContextFunc func(in1 context.Context, in2 *ec2.ExportClientVpnClientConfigurationInput, in3 ...request.Option) (*ec2.ExportClientVpnClientConfigurationOutput, error)

	// ExportImageFunc mocks the ExportImage method.
	ExportImageFunc func(in1 *ec2.ExportImageInput) (*ec2.ExportImageOutput, error)

	// ExportImageRequestFunc mocks the ExportImageRequest method.
	ExportImageRequestFunc func(in1 *ec2.ExportImageInput) (*request.Request, *ec2.ExportImageOutput)

	// ExportImageWithContextFunc mocks the ExportImageWithContext method.
	ExportImageWithContextFunc func(in1 context.Context, in2 *ec2.ExportImageInput, in3 ...request.Option) (*ec2.ExportImageOutput, error)

	// ExportTransitGatewayRoutesFunc mocks the ExportTransitGatewayRoutes method.
	ExportTransitGatewayRoutesFunc func(in1 *ec2.ExportTransitGatewayRoutesInput) (*ec2.ExportTransitGatewayRoutesOutput, error)

	// ExportTransitGatewayRoutesRequestFunc mocks the ExportTransitGatewayRoutesRequest method.
	ExportTransitGatewayRoutesRequestFunc func(in1 *ec2.ExportTransitGatewayRoutesInput) (*request.Request, *ec2.ExportTransitGatewayRoutesOutput)

	// ExportTransitGatewayRoutesWithContextFunc mocks the ExportTransitGatewayRoutesWithContext method.
	ExportTransitGatewayRoutesWithContextFunc func(in1 context.Context, in2 *ec2.ExportTransitGatewayRoutesInput, in3 ...request.Option) (*ec2.ExportTransitGatewayRoutesOutput, error)

	// GetAssociatedIpv6PoolCidrsFunc mocks the GetAssociatedIpv6PoolCidrs method.
	GetAssociatedIpv6PoolCidrsFunc func(in1 *ec2.GetAssociatedIpv6PoolCidrsInput) (*ec2.GetAssociatedIpv6PoolCidrsOutput, error)

	// GetAssociatedIpv6PoolCidrsPagesFunc mocks the GetAssociatedIpv6PoolCidrsPages method.
	GetAssociatedIpv6PoolCidrsPagesFunc func(in1 *ec2.GetAssociatedIpv6PoolCidrsInput, in2 func(*ec2.GetAssociatedIpv6PoolCidrsOutput, bool) bool) error

	// GetAssociatedIpv6PoolCidrsPagesWithContextFunc mocks the GetAssociatedIpv6PoolCidrsPagesWithContext method.
	GetAssociatedIpv6PoolCidrsPagesWithContextFunc func(in1 context.Context, in2 *ec2.GetAssociatedIpv6PoolCidrsInput, in3 func(*ec2.GetAssociatedIpv6PoolCidrsOutput, bool) bool, in4 ...request.Option) error

	// GetAssociatedIpv6PoolCidrsRequestFunc mocks the GetAssociatedIpv6PoolCidrsRequest method.
	GetAssociatedIpv6PoolCidrsRequestFunc func(in1 *ec2.GetAssociatedIpv6PoolCidrsInput) (*request.Request, *ec2.GetAssociatedIpv6PoolCidrsOutput)

	// GetAssociatedIpv6PoolCidrsWithContextFunc mocks the GetAssociatedIpv6PoolCidrsWithContext method.
	GetAssociatedIpv6PoolCidrsWithContextFunc func(in1 context.Context, in2 *ec2.GetAssociatedIpv6PoolCidrsInput, in3 ...request.Option) (*ec2.GetAssociatedIpv6PoolCidrsOutput, error)

	// GetCapacityReservationUsageFunc mocks the GetCapacityReservationUsage method.
	GetCapacityReservationUsageFunc func(in1 *ec2.GetCapacityReservationUsageInput) (*ec2.GetCapacityReservationUsageOutput, error)

	// GetCapacityReservationUsageRequestFunc mocks the GetCapacityReservationUsageRequest method.
	GetCapacityReservationUsageRequestFunc func(in1 *ec2.GetCapacityReservationUsageInput) (*request.Request, *ec2.GetCapacityReservationUsageOutput)

	// GetCapacityReservationUsageWithContextFunc mocks the GetCapacityReservationUsageWithContext method.
	GetCapacityReservationUsageWithContextFunc func(in1 context.Context, in2 *ec2.GetCapacityReservationUsageInput, in3 ...request.Option) (*ec2.GetCapacityReservationUsageOutput, error)

	// GetCoipPoolUsageFunc mocks the GetCoipPoolUsage method.
	GetCoipPoolUsageFunc func(in1 *ec2.GetCoipPoolUsageInput) (*ec2.GetCoipPoolUsageOutput, error)

	// GetCoipPoolUsageRequestFunc mocks the GetCoipPoolUsageRequest method.
	GetCoipPoolUsageRequestFunc func(in1 *ec2.GetCoipPoolUsageInput) (*request.Request, *ec2.GetCoipPoolUsageOutput)

	// GetCoipPoolUsageWithContextFunc mocks the GetCoipPoolUsageWithContext method.
	GetCoipPoolUsageWithContextFunc func(in1 context.Context, in2 *ec2.GetCoipPoolUsageInput, in3 ...request.Option) (*ec2.GetCoipPoolUsageOutput, error)

	// GetConsoleOutputFunc mocks the GetConsoleOutput method.
	GetConsoleOutputFunc func(in1 *ec2.GetConsoleOutputInput) (*ec2.GetConsoleOutputOutput, error)

	// GetConsoleOutputRequestFunc mocks the GetConsoleOutputRequest method.
	GetConsoleOutputRequestFunc func(in1 *ec2.GetConsoleOutputInput) (*request.Request, *ec2.GetConsoleOutputOutput)

	// GetConsoleOutputWithContextFunc mocks the GetConsoleOutputWithContext method.
	GetConsoleOutputWithContextFunc func(in1 context.Context, in2 *ec2.GetConsoleOutputInput, in3 ...request.Option) (*ec2.GetConsoleOutputOutput, error)

	// GetConsoleScreenshotFunc mocks the GetConsoleScreenshot method.
	GetConsoleScreenshotFunc func(in1 *ec2.GetConsoleScreenshotInput) (*ec2.GetConsoleScreenshotOutput, error)

	// GetConsoleScreenshotRequestFunc mocks the GetConsoleScreenshotRequest method.
	GetConsoleScreenshotRequestFunc func(in1 *ec2.GetConsoleScreenshotInput) (*request.Request, *ec2.GetConsoleScreenshotOutput)

	// GetConsoleScreenshotWithContextFunc mocks the GetConsoleScreenshotWithContext method.
	GetConsoleScreenshotWithContextFunc func(in1 context.Context, in2 *ec2.GetConsoleScreenshotInput, in3 ...request.Option) (*ec2.GetConsoleScreenshotOutput, error)

	// GetDefaultCreditSpecificationFunc mocks the GetDefaultCreditSpecification method.
	GetDefaultCreditSpecificationFunc func(in1 *ec2.GetDefaultCreditSpecificationInput) (*ec2.GetDefaultCreditSpecificationOutput, error)

	// GetDefaultCreditSpecificationRequestFunc mocks the GetDefaultCreditSpecificationRequest method.
	GetDefaultCreditSpecificationRequestFunc func(in1 *ec2.GetDefaultCreditSpecificationInput) (*request.Request, *ec2.GetDefaultCreditSpecificationOutput)

	// GetDefaultCreditSpecificationWithContextFunc mocks the GetDefaultCreditSpecificationWithContext method.
	GetDefaultCreditSpecificationWithContextFunc func(in1 context.Context, in2 *ec2.GetDefaultCreditSpecificationInput, in3 ...request.Option) (*ec2.GetDefaultCreditSpecificationOutput, error)

	// GetEbsDefaultKmsKeyIdFunc mocks the GetEbsDefaultKmsKeyId method.
	GetEbsDefaultKmsKeyIdFunc func(in1 *ec2.GetEbsDefaultKmsKeyIdInput) (*ec2.GetEbsDefaultKmsKeyIdOutput, error)

	// GetEbsDefaultKmsKeyIdRequestFunc mocks the GetEbsDefaultKmsKeyIdRequest method.
	GetEbsDefaultKmsKeyIdRequestFunc func(in1 *ec2.GetEbsDefaultKmsKeyIdInput) (*request.Request, *ec2.GetEbsDefaultKmsKeyIdOutput)

	// GetEbsDefaultKmsKeyIdWithContextFunc mocks the GetEbsDefaultKmsKeyIdWithContext method.
	GetEbsDefaultKmsKeyIdWithContextFunc func(in1 context.Context, in2 *ec2.GetEbsDefaultKmsKeyIdInput, in3 ...request.Option) (*ec2.GetEbsDefaultKmsKeyIdOutput, error)

	// GetEbsEncryptionByDefaultFunc mocks the GetEbsEncryptionByDefault method.
	GetEbsEncryptionByDefaultFunc func(in1 *ec2.GetEbsEncryptionByDefaultInput) (*ec2.GetEbsEncryptionByDefaultOutput, error)

	// GetEbsEncryptionByDefaultRequestFunc mocks the GetEbsEncryptionByDefaultRequest method.
	GetEbsEncryptionByDefaultRequestFunc func(in1 *ec2.GetEbsEncryptionByDefaultInput) (*request.Request, *ec2.GetEbsEncryptionByDefaultOutput)

	// GetEbsEncryptionByDefaultWithContextFunc mocks the GetEbsEncryptionByDefaultWithContext method.
	GetEbsEncryptionByDefaultWithContextFunc func(in1 context.Context, in2 *ec2.GetEbsEncryptionByDefaultInput, in3 ...request.Option) (*ec2.GetEbsEncryptionByDefaultOutput, error)

	// GetHostReservationPurchasePreviewFunc mocks the GetHostReservationPurchasePreview method.
	GetHostReservationPurchasePreviewFunc func(in1 *ec2.GetHostReservationPurchasePreviewInput) (*ec2.GetHostReservationPurchasePreviewOutput, error)

	// GetHostReservationPurchasePreviewRequestFunc mocks the GetHostReservationPurchasePreviewRequest method.
	GetHostReservationPurchasePreviewRequestFunc func(in1 *ec2.GetHostReservationPurchasePreviewInput) (*request.Request, *ec2.GetHostReservationPurchasePreviewOutput)

	// GetHostReservationPurchasePreviewWithContextFunc mocks the GetHostReservationPurchasePreviewWithContext method.
	GetHostReservationPurchasePreviewWithContextFunc func(in1 context.Context, in2 *ec2.GetHostReservationPurchasePreviewInput, in3 ...request.Option) (*ec2.GetHostReservationPurchasePreviewOutput, error)

	// GetLaunchTemplateDataFunc mocks the GetLaunchTemplateData method.
	GetLaunchTemplateDataFunc func(in1 *ec2.GetLaunchTemplateDataInput) (*ec2.GetLaunchTemplateDataOutput, error)

	// GetLaunchTemplateDataRequestFunc mocks the GetLaunchTemplateDataRequest method.
	GetLaunchTemplateDataRequestFunc func(in1 *ec2.GetLaunchTemplateDataInput) (*request.Request, *ec2.GetLaunchTemplateDataOutput)

	// GetLaunchTemplateDataWithContextFunc mocks the GetLaunchTemplateDataWithContext method.
	GetLaunchTemplateDataWithContextFunc func(in1 context.Context, in2 *ec2.GetLaunchTemplateDataInput, in3 ...request.Option) (*ec2.GetLaunchTemplateDataOutput, error)

	// GetPasswordDataFunc mocks the GetPasswordData method.
	GetPasswordDataFunc func(in1 *ec2.GetPasswordDataInput) (*ec2.GetPasswordDataOutput, error)

	// GetPasswordDataRequestFunc mocks the GetPasswordDataRequest method.
	GetPasswordDataRequestFunc func(in1 *ec2.GetPasswordDataInput) (*request.Request, *ec2.GetPasswordDataOutput)

	// GetPasswordDataWithContextFunc mocks the GetPasswordDataWithContext method.
	GetPasswordDataWithContextFunc func(in1 context.Context, in2 *ec2.GetPasswordDataInput, in3 ...request.Option) (*ec2.GetPasswordDataOutput, error)

	// GetReservedInstancesExchangeQuoteFunc mocks the GetReservedInstancesExchangeQuote method.
	GetReservedInstancesExchangeQuoteFunc func(in1 *ec2.GetReservedInstancesExchangeQuoteInput) (*ec2.GetReservedInstancesExchangeQuoteOutput, error)

	// GetReservedInstancesExchangeQuoteRequestFunc mocks the GetReservedInstancesExchangeQuoteRequest method.
	GetReservedInstancesExchangeQuoteRequestFunc func(in1 *ec2.GetReservedInstancesExchangeQuoteInput) (*request.Request, *ec2.GetReservedInstancesExchangeQuoteOutput)

	// GetReservedInstancesExchangeQuoteWithContextFunc mocks the GetReservedInstancesExchangeQuoteWithContext method.
	GetReservedInstancesExchangeQuoteWithContextFunc func(in1 context.Context, in2 *ec2.GetReservedInstancesExchangeQuoteInput, in3 ...request.Option) (*ec2.GetReservedInstancesExchangeQuoteOutput, error)

	// GetTransitGatewayAttachmentPropagationsFunc mocks the GetTransitGatewayAttachmentPropagations method.
	GetTransitGatewayAttachmentPropagationsFunc func(in1 *ec2.GetTransitGatewayAttachmentPropagationsInput) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error)

	// GetTransitGatewayAttachmentPropagationsPagesFunc mocks the GetTransitGatewayAttachmentPropagationsPages method.
	GetTransitGatewayAttachmentPropagationsPagesFunc func(in1 *ec2.GetTransitGatewayAttachmentPropagationsInput, in2 func(*ec2.GetTransitGatewayAttachmentPropagationsOutput, bool) bool) error

	// GetTransitGatewayAttachmentPropagationsPagesWithContextFunc mocks the GetTransitGatewayAttachmentPropagationsPagesWithContext method.
	GetTransitGatewayAttachmentPropagationsPagesWithContextFunc func(in1 context.Context, in2 *ec2.GetTransitGatewayAttachmentPropagationsInput, in3 func(*ec2.GetTransitGatewayAttachmentPropagationsOutput, bool) bool, in4 ...request.Option) error

	// GetTransitGatewayAttachmentPropagationsRequestFunc mocks the GetTransitGatewayAttachmentPropagationsRequest method.
	GetTransitGatewayAttachmentPropagationsRequestFunc func(in1 *ec2.GetTransitGatewayAttachmentPropagationsInput) (*request.Request, *ec2.GetTransitGatewayAttachmentPropagationsOutput)

	// GetTransitGatewayAttachmentPropagationsWithContextFunc mocks the GetTransitGatewayAttachmentPropagationsWithContext method.
	GetTransitGatewayAttachmentPropagationsWithContextFunc func(in1 context.Context, in2 *ec2.GetTransitGatewayAttachmentPropagationsInput, in3 ...request.Option) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error)

	// GetTransitGatewayMulticastDomainAssociationsFunc mocks the GetTransitGatewayMulticastDomainAssociations method.
	GetTransitGatewayMulticastDomainAssociationsFunc func(in1 *ec2.GetTransitGatewayMulticastDomainAssociationsInput) (*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, error)

	// GetTransitGatewayMulticastDomainAssociationsRequestFunc mocks the GetTransitGatewayMulticastDomainAssociationsRequest method.
	GetTransitGatewayMulticastDomainAssociationsRequestFunc func(in1 *ec2.GetTransitGatewayMulticastDomainAssociationsInput) (*request.Request, *ec2.GetTransitGatewayMulticastDomainAssociationsOutput)

	// GetTransitGatewayMulticastDomainAssociationsWithContextFunc mocks the GetTransitGatewayMulticastDomainAssociationsWithContext method.
	GetTransitGatewayMulticastDomainAssociationsWithContextFunc func(in1 context.Context, in2 *ec2.GetTransitGatewayMulticastDomainAssociationsInput, in3 ...request.Option) (*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, error)

	// GetTransitGatewayRouteTableAssociationsFunc mocks the GetTransitGatewayRouteTableAssociations method.
	GetTransitGatewayRouteTableAssociationsFunc func(in1 *ec2.GetTransitGatewayRouteTableAssociationsInput) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error)

	// GetTransitGatewayRouteTableAssociationsPagesFunc mocks the GetTransitGatewayRouteTableAssociationsPages method.
	GetTransitGatewayRouteTableAssociationsPagesFunc func(in1 *ec2.GetTransitGatewayRouteTableAssociationsInput, in2 func(*ec2.GetTransitGatewayRouteTableAssociationsOutput, bool) bool) error

	// GetTransitGatewayRouteTableAssociationsPagesWithContextFunc mocks the GetTransitGatewayRouteTableAssociationsPagesWithContext method.
	GetTransitGatewayRouteTableAssociationsPagesWithContextFunc func(in1 context.Context, in2 *ec2.GetTransitGatewayRouteTableAssociationsInput, in3 func(*ec2.GetTransitGatewayRouteTableAssociationsOutput, bool) bool, in4 ...request.Option) error

	// GetTransitGatewayRouteTableAssociationsRequestFunc mocks the GetTransitGatewayRouteTableAssociationsRequest method.
	GetTransitGatewayRouteTableAssociationsRequestFunc func(in1 *ec2.GetTransitGatewayRouteTableAssociationsInput) (*request.Request, *ec2.GetTransitGatewayRouteTableAssociationsOutput)

	// GetTransitGatewayRouteTableAssociationsWithContextFunc mocks the GetTransitGatewayRouteTableAssociationsWithContext method.
	GetTransitGatewayRouteTableAssociationsWithContextFunc func(in1 context.Context, in2 *ec2.GetTransitGatewayRouteTableAssociationsInput, in3 ...request.Option) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error)

	// GetTransitGatewayRouteTablePropagationsFunc mocks the GetTransitGatewayRouteTablePropagations method.
	GetTransitGatewayRouteTablePropagationsFunc func(in1 *ec2.GetTransitGatewayRouteTablePropagationsInput) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error)

	// GetTransitGatewayRouteTablePropagationsPagesFunc mocks the GetTransitGatewayRouteTablePropagationsPages method.
	GetTransitGatewayRouteTablePropagationsPagesFunc func(in1 *ec2.GetTransitGatewayRouteTablePropagationsInput, in2 func(*ec2.GetTransitGatewayRouteTablePropagationsOutput, bool) bool) error

	// GetTransitGatewayRouteTablePropagationsPagesWithContextFunc mocks the GetTransitGatewayRouteTablePropagationsPagesWithContext method.
	GetTransitGatewayRouteTablePropagationsPagesWithContextFunc func(in1 context.Context, in2 *ec2.GetTransitGatewayRouteTablePropagationsInput, in3 func(*ec2.GetTransitGatewayRouteTablePropagationsOutput, bool) bool, in4 ...request.Option) error

	// GetTransitGatewayRouteTablePropagationsRequestFunc mocks the GetTransitGatewayRouteTablePropagationsRequest method.
	GetTransitGatewayRouteTablePropagationsRequestFunc func(in1 *ec2.GetTransitGatewayRouteTablePropagationsInput) (*request.Request, *ec2.GetTransitGatewayRouteTablePropagationsOutput)

	// GetTransitGatewayRouteTablePropagationsWithContextFunc mocks the GetTransitGatewayRouteTablePropagationsWithContext method.
	GetTransitGatewayRouteTablePropagationsWithContextFunc func(in1 context.Context, in2 *ec2.GetTransitGatewayRouteTablePropagationsInput, in3 ...request.Option) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error)

	// ImportClientVpnClientCertificateRevocationListFunc mocks the ImportClientVpnClientCertificateRevocationList method.
	ImportClientVpnClientCertificateRevocationListFunc func(in1 *ec2.ImportClientVpnClientCertificateRevocationListInput) (*ec2.ImportClientVpnClientCertificateRevocationListOutput, error)

	// ImportClientVpnClientCertificateRevocationListRequestFunc mocks the ImportClientVpnClientCertificateRevocationListRequest method.
	ImportClientVpnClientCertificateRevocationListRequestFunc func(in1 *ec2.ImportClientVpnClientCertificateRevocationListInput) (*request.Request, *ec2.ImportClientVpnClientCertificateRevocationListOutput)

	// ImportClientVpnClientCertificateRevocationListWithContextFunc mocks the ImportClientVpnClientCertificateRevocationListWithContext method.
	ImportClientVpnClientCertificateRevocationListWithContextFunc func(in1 context.Context, in2 *ec2.ImportClientVpnClientCertificateRevocationListInput, in3 ...request.Option) (*ec2.ImportClientVpnClientCertificateRevocationListOutput, error)

	// ImportImageFunc mocks the ImportImage method.
	ImportImageFunc func(in1 *ec2.ImportImageInput) (*ec2.ImportImageOutput, error)

	// ImportImageRequestFunc mocks the ImportImageRequest method.
	ImportImageRequestFunc func(in1 *ec2.ImportImageInput) (*request.Request, *ec2.ImportImageOutput)

	// ImportImageWithContextFunc mocks the ImportImageWithContext method.
	ImportImageWithContextFunc func(in1 context.Context, in2 *ec2.ImportImageInput, in3 ...request.Option) (*ec2.ImportImageOutput, error)

	// ImportInstanceFunc mocks the ImportInstance method.
	ImportInstanceFunc func(in1 *ec2.ImportInstanceInput) (*ec2.ImportInstanceOutput, error)

	// ImportInstanceRequestFunc mocks the ImportInstanceRequest method.
	ImportInstanceRequestFunc func(in1 *ec2.ImportInstanceInput) (*request.Request, *ec2.ImportInstanceOutput)

	// ImportInstanceWithContextFunc mocks the ImportInstanceWithContext method.
	ImportInstanceWithContextFunc func(in1 context.Context, in2 *ec2.ImportInstanceInput, in3 ...request.Option) (*ec2.ImportInstanceOutput, error)

	// ImportKeyPairFunc mocks the ImportKeyPair method.
	ImportKeyPairFunc func(in1 *ec2.ImportKeyPairInput) (*ec2.ImportKeyPairOutput, error)

	// ImportKeyPairRequestFunc mocks the ImportKeyPairRequest method.
	ImportKeyPairRequestFunc func(in1 *ec2.ImportKeyPairInput) (*request.Request, *ec2.ImportKeyPairOutput)

	// ImportKeyPairWithContextFunc mocks the ImportKeyPairWithContext method.
	ImportKeyPairWithContextFunc func(in1 context.Context, in2 *ec2.ImportKeyPairInput, in3 ...request.Option) (*ec2.ImportKeyPairOutput, error)

	// ImportSnapshotFunc mocks the ImportSnapshot method.
	ImportSnapshotFunc func(in1 *ec2.ImportSnapshotInput) (*ec2.ImportSnapshotOutput, error)

	// ImportSnapshotRequestFunc mocks the ImportSnapshotRequest method.
	ImportSnapshotRequestFunc func(in1 *ec2.ImportSnapshotInput) (*request.Request, *ec2.ImportSnapshotOutput)

	// ImportSnapshotWithContextFunc mocks the ImportSnapshotWithContext method.
	ImportSnapshotWithContextFunc func(in1 context.Context, in2 *ec2.ImportSnapshotInput, in3 ...request.Option) (*ec2.ImportSnapshotOutput, error)

	// ImportVolumeFunc mocks the ImportVolume method.
	ImportVolumeFunc func(in1 *ec2.ImportVolumeInput) (*ec2.ImportVolumeOutput, error)

	// ImportVolumeRequestFunc mocks the ImportVolumeRequest method.
	ImportVolumeRequestFunc func(in1 *ec2.ImportVolumeInput) (*request.Request, *ec2.ImportVolumeOutput)

	// ImportVolumeWithContextFunc mocks the ImportVolumeWithContext method.
	ImportVolumeWithContextFunc func(in1 context.Context, in2 *ec2.ImportVolumeInput, in3 ...request.Option) (*ec2.ImportVolumeOutput, error)

	// ModifyCapacityReservationFunc mocks the ModifyCapacityReservation method.
	ModifyCapacityReservationFunc func(in1 *ec2.ModifyCapacityReservationInput) (*ec2.ModifyCapacityReservationOutput, error)

	// ModifyCapacityReservationRequestFunc mocks the ModifyCapacityReservationRequest method.
	ModifyCapacityReservationRequestFunc func(in1 *ec2.ModifyCapacityReservationInput) (*request.Request, *ec2.ModifyCapacityReservationOutput)

	// ModifyCapacityReservationWithContextFunc mocks the ModifyCapacityReservationWithContext method.
	ModifyCapacityReservationWithContextFunc func(in1 context.Context, in2 *ec2.ModifyCapacityReservationInput, in3 ...request.Option) (*ec2.ModifyCapacityReservationOutput, error)

	// ModifyClientVpnEndpointFunc mocks the ModifyClientVpnEndpoint method.
	ModifyClientVpnEndpointFunc func(in1 *ec2.ModifyClientVpnEndpointInput) (*ec2.ModifyClientVpnEndpointOutput, error)

	// ModifyClientVpnEndpointRequestFunc mocks the ModifyClientVpnEndpointRequest method.
	ModifyClientVpnEndpointRequestFunc func(in1 *ec2.ModifyClientVpnEndpointInput) (*request.Request, *ec2.ModifyClientVpnEndpointOutput)

	// ModifyClientVpnEndpointWithContextFunc mocks the ModifyClientVpnEndpointWithContext method.
	ModifyClientVpnEndpointWithContextFunc func(in1 context.Context, in2 *ec2.ModifyClientVpnEndpointInput, in3 ...request.Option) (*ec2.ModifyClientVpnEndpointOutput, error)

	// ModifyDefaultCreditSpecificationFunc mocks the ModifyDefaultCreditSpecification method.
	ModifyDefaultCreditSpecificationFunc func(in1 *ec2.ModifyDefaultCreditSpecificationInput) (*ec2.ModifyDefaultCreditSpecificationOutput, error)

	// ModifyDefaultCreditSpecificationRequestFunc mocks the ModifyDefaultCreditSpecificationRequest method.
	ModifyDefaultCreditSpecificationRequestFunc func(in1 *ec2.ModifyDefaultCreditSpecificationInput) (*request.Request, *ec2.ModifyDefaultCreditSpecificationOutput)

	// ModifyDefaultCreditSpecificationWithContextFunc mocks the ModifyDefaultCreditSpecificationWithContext method.
	ModifyDefaultCreditSpecificationWithContextFunc func(in1 context.Context, in2 *ec2.ModifyDefaultCreditSpecificationInput, in3 ...request.Option) (*ec2.ModifyDefaultCreditSpecificationOutput, error)

	// ModifyEbsDefaultKmsKeyIdFunc mocks the ModifyEbsDefaultKmsKeyId method.
	ModifyEbsDefaultKmsKeyIdFunc func(in1 *ec2.ModifyEbsDefaultKmsKeyIdInput) (*ec2.ModifyEbsDefaultKmsKeyIdOutput, error)

	// ModifyEbsDefaultKmsKeyIdRequestFunc mocks the ModifyEbsDefaultKmsKeyIdRequest method.
	ModifyEbsDefaultKmsKeyIdRequestFunc func(in1 *ec2.ModifyEbsDefaultKmsKeyIdInput) (*request.Request, *ec2.ModifyEbsDefaultKmsKeyIdOutput)

	// ModifyEbsDefaultKmsKeyIdWithContextFunc mocks the ModifyEbsDefaultKmsKeyIdWithContext method.
	ModifyEbsDefaultKmsKeyIdWithContextFunc func(in1 context.Context, in2 *ec2.ModifyEbsDefaultKmsKeyIdInput, in3 ...request.Option) (*ec2.ModifyEbsDefaultKmsKeyIdOutput, error)

	// ModifyFleetFunc mocks the ModifyFleet method.
	ModifyFleetFunc func(in1 *ec2.ModifyFleetInput) (*ec2.ModifyFleetOutput, error)

	// ModifyFleetRequestFunc mocks the ModifyFleetRequest method.
	ModifyFleetRequestFunc func(in1 *ec2.ModifyFleetInput) (*request.Request, *ec2.ModifyFleetOutput)

	// ModifyFleetWithContextFunc mocks the ModifyFleetWithContext method.
	ModifyFleetWithContextFunc func(in1 context.Context, in2 *ec2.ModifyFleetInput, in3 ...request.Option) (*ec2.ModifyFleetOutput, error)

	// ModifyFpgaImageAttributeFunc mocks the ModifyFpgaImageAttribute method.
	ModifyFpgaImageAttributeFunc func(in1 *ec2.ModifyFpgaImageAttributeInput) (*ec2.ModifyFpgaImageAttributeOutput, error)

	// ModifyFpgaImageAttributeRequestFunc mocks the ModifyFpgaImageAttributeRequest method.
	ModifyFpgaImageAttributeRequestFunc func(in1 *ec2.ModifyFpgaImageAttributeInput) (*request.Request, *ec2.ModifyFpgaImageAttributeOutput)

	// ModifyFpgaImageAttributeWithContextFunc mocks the ModifyFpgaImageAttributeWithContext method.
	ModifyFpgaImageAttributeWithContextFunc func(in1 context.Context, in2 *ec2.ModifyFpgaImageAttributeInput, in3 ...request.Option) (*ec2.ModifyFpgaImageAttributeOutput, error)

	// ModifyHostsFunc mocks the ModifyHosts method.
	ModifyHostsFunc func(in1 *ec2.ModifyHostsInput) (*ec2.ModifyHostsOutput, error)

	// ModifyHostsRequestFunc mocks the ModifyHostsRequest method.
	ModifyHostsRequestFunc func(in1 *ec2.ModifyHostsInput) (*request.Request, *ec2.ModifyHostsOutput)

	// ModifyHostsWithContextFunc mocks the ModifyHostsWithContext method.
	ModifyHostsWithContextFunc func(in1 context.Context, in2 *ec2.ModifyHostsInput, in3 ...request.Option) (*ec2.ModifyHostsOutput, error)

	// ModifyIdFormatFunc mocks the ModifyIdFormat method.
	ModifyIdFormatFunc func(in1 *ec2.ModifyIdFormatInput) (*ec2.ModifyIdFormatOutput, error)

	// ModifyIdFormatRequestFunc mocks the ModifyIdFormatRequest method.
	ModifyIdFormatRequestFunc func(in1 *ec2.ModifyIdFormatInput) (*request.Request, *ec2.ModifyIdFormatOutput)

	// ModifyIdFormatWithContextFunc mocks the ModifyIdFormatWithContext method.
	ModifyIdFormatWithContextFunc func(in1 context.Context, in2 *ec2.ModifyIdFormatInput, in3 ...request.Option) (*ec2.ModifyIdFormatOutput, error)

	// ModifyIdentityIdFormatFunc mocks the ModifyIdentityIdFormat method.
	ModifyIdentityIdFormatFunc func(in1 *ec2.ModifyIdentityIdFormatInput) (*ec2.ModifyIdentityIdFormatOutput, error)

	// ModifyIdentityIdFormatRequestFunc mocks the ModifyIdentityIdFormatRequest method.
	ModifyIdentityIdFormatRequestFunc func(in1 *ec2.ModifyIdentityIdFormatInput) (*request.Request, *ec2.ModifyIdentityIdFormatOutput)

	// ModifyIdentityIdFormatWithContextFunc mocks the ModifyIdentityIdFormatWithContext method.
	ModifyIdentityIdFormatWithContextFunc func(in1 context.Context, in2 *ec2.ModifyIdentityIdFormatInput, in3 ...request.Option) (*ec2.ModifyIdentityIdFormatOutput, error)

	// ModifyImageAttributeFunc mocks the ModifyImageAttribute method.
	ModifyImageAttributeFunc func(in1 *ec2.ModifyImageAttributeInput) (*ec2.ModifyImageAttributeOutput, error)

	// ModifyImageAttributeRequestFunc mocks the ModifyImageAttributeRequest method.
	ModifyImageAttributeRequestFunc func(in1 *ec2.ModifyImageAttributeInput) (*request.Request, *ec2.ModifyImageAttributeOutput)

	// ModifyImageAttributeWithContextFunc mocks the ModifyImageAttributeWithContext method.
	ModifyImageAttributeWithContextFunc func(in1 context.Context, in2 *ec2.ModifyImageAttributeInput, in3 ...request.Option) (*ec2.ModifyImageAttributeOutput, error)

	// ModifyInstanceAttributeFunc mocks the ModifyInstanceAttribute method.
	ModifyInstanceAttributeFunc func(in1 *ec2.ModifyInstanceAttributeInput) (*ec2.ModifyInstanceAttributeOutput, error)

	// ModifyInstanceAttributeRequestFunc mocks the ModifyInstanceAttributeRequest method.
	ModifyInstanceAttributeRequestFunc func(in1 *ec2.ModifyInstanceAttributeInput) (*request.Request, *ec2.ModifyInstanceAttributeOutput)

	// ModifyInstanceAttributeWithContextFunc mocks the ModifyInstanceAttributeWithContext method.
	ModifyInstanceAttributeWithContextFunc func(in1 context.Context, in2 *ec2.ModifyInstanceAttributeInput, in3 ...request.Option) (*ec2.ModifyInstanceAttributeOutput, error)

	// ModifyInstanceCapacityReservationAttributesFunc mocks the ModifyInstanceCapacityReservationAttributes method.
	ModifyInstanceCapacityReservationAttributesFunc func(in1 *ec2.ModifyInstanceCapacityReservationAttributesInput) (*ec2.ModifyInstanceCapacityReservationAttributesOutput, error)

	// ModifyInstanceCapacityReservationAttributesRequestFunc mocks the ModifyInstanceCapacityReservationAttributesRequest method.
	ModifyInstanceCapacityReservationAttributesRequestFunc func(in1 *ec2.ModifyInstanceCapacityReservationAttributesInput) (*request.Request, *ec2.ModifyInstanceCapacityReservationAttributesOutput)

	// ModifyInstanceCapacityReservationAttributesWithContextFunc mocks the ModifyInstanceCapacityReservationAttributesWithContext method.
	ModifyInstanceCapacityReservationAttributesWithContextFunc func(in1 context.Context, in2 *ec2.ModifyInstanceCapacityReservationAttributesInput, in3 ...request.Option) (*ec2.ModifyInstanceCapacityReservationAttributesOutput, error)

	// ModifyInstanceCreditSpecificationFunc mocks the ModifyInstanceCreditSpecification method.
	ModifyInstanceCreditSpecificationFunc func(in1 *ec2.ModifyInstanceCreditSpecificationInput) (*ec2.ModifyInstanceCreditSpecificationOutput, error)

	// ModifyInstanceCreditSpecificationRequestFunc mocks the ModifyInstanceCreditSpecificationRequest method.
	ModifyInstanceCreditSpecificationRequestFunc func(in1 *ec2.ModifyInstanceCreditSpecificationInput) (*request.Request, *ec2.ModifyInstanceCreditSpecificationOutput)

	// ModifyInstanceCreditSpecificationWithContextFunc mocks the ModifyInstanceCreditSpecificationWithContext method.
	ModifyInstanceCreditSpecificationWithContextFunc func(in1 context.Context, in2 *ec2.ModifyInstanceCreditSpecificationInput, in3 ...request.Option) (*ec2.ModifyInstanceCreditSpecificationOutput, error)

	// ModifyInstanceEventStartTimeFunc mocks the ModifyInstanceEventStartTime method.
	ModifyInstanceEventStartTimeFunc func(in1 *ec2.ModifyInstanceEventStartTimeInput) (*ec2.ModifyInstanceEventStartTimeOutput, error)

	// ModifyInstanceEventStartTimeRequestFunc mocks the ModifyInstanceEventStartTimeRequest method.
	ModifyInstanceEventStartTimeRequestFunc func(in1 *ec2.ModifyInstanceEventStartTimeInput) (*request.Request, *ec2.ModifyInstanceEventStartTimeOutput)

	// ModifyInstanceEventStartTimeWithContextFunc mocks the ModifyInstanceEventStartTimeWithContext method.
	ModifyInstanceEventStartTimeWithContextFunc func(in1 context.Context, in2 *ec2.ModifyInstanceEventStartTimeInput, in3 ...request.Option) (*ec2.ModifyInstanceEventStartTimeOutput, error)

	// ModifyInstanceMetadataOptionsFunc mocks the ModifyInstanceMetadataOptions method.
	ModifyInstanceMetadataOptionsFunc func(in1 *ec2.ModifyInstanceMetadataOptionsInput) (*ec2.ModifyInstanceMetadataOptionsOutput, error)

	// ModifyInstanceMetadataOptionsRequestFunc mocks the ModifyInstanceMetadataOptionsRequest method.
	ModifyInstanceMetadataOptionsRequestFunc func(in1 *ec2.ModifyInstanceMetadataOptionsInput) (*request.Request, *ec2.ModifyInstanceMetadataOptionsOutput)

	// ModifyInstanceMetadataOptionsWithContextFunc mocks the ModifyInstanceMetadataOptionsWithContext method.
	ModifyInstanceMetadataOptionsWithContextFunc func(in1 context.Context, in2 *ec2.ModifyInstanceMetadataOptionsInput, in3 ...request.Option) (*ec2.ModifyInstanceMetadataOptionsOutput, error)

	// ModifyInstancePlacementFunc mocks the ModifyInstancePlacement method.
	ModifyInstancePlacementFunc func(in1 *ec2.ModifyInstancePlacementInput) (*ec2.ModifyInstancePlacementOutput, error)

	// ModifyInstancePlacementRequestFunc mocks the ModifyInstancePlacementRequest method.
	ModifyInstancePlacementRequestFunc func(in1 *ec2.ModifyInstancePlacementInput) (*request.Request, *ec2.ModifyInstancePlacementOutput)

	// ModifyInstancePlacementWithContextFunc mocks the ModifyInstancePlacementWithContext method.
	ModifyInstancePlacementWithContextFunc func(in1 context.Context, in2 *ec2.ModifyInstancePlacementInput, in3 ...request.Option) (*ec2.ModifyInstancePlacementOutput, error)

	// ModifyLaunchTemplateFunc mocks the ModifyLaunchTemplate method.
	ModifyLaunchTemplateFunc func(in1 *ec2.ModifyLaunchTemplateInput) (*ec2.ModifyLaunchTemplateOutput, error)

	// ModifyLaunchTemplateRequestFunc mocks the ModifyLaunchTemplateRequest method.
	ModifyLaunchTemplateRequestFunc func(in1 *ec2.ModifyLaunchTemplateInput) (*request.Request, *ec2.ModifyLaunchTemplateOutput)

	// ModifyLaunchTemplateWithContextFunc mocks the ModifyLaunchTemplateWithContext method.
	ModifyLaunchTemplateWithContextFunc func(in1 context.Context, in2 *ec2.ModifyLaunchTemplateInput, in3 ...request.Option) (*ec2.ModifyLaunchTemplateOutput, error)

	// ModifyNetworkInterfaceAttributeFunc mocks the ModifyNetworkInterfaceAttribute method.
	ModifyNetworkInterfaceAttributeFunc func(in1 *ec2.ModifyNetworkInterfaceAttributeInput) (*ec2.ModifyNetworkInterfaceAttributeOutput, error)

	// ModifyNetworkInterfaceAttributeRequestFunc mocks the ModifyNetworkInterfaceAttributeRequest method.
	ModifyNetworkInterfaceAttributeRequestFunc func(in1 *ec2.ModifyNetworkInterfaceAttributeInput) (*request.Request, *ec2.ModifyNetworkInterfaceAttributeOutput)

	// ModifyNetworkInterfaceAttributeWithContextFunc mocks the ModifyNetworkInterfaceAttributeWithContext method.
	ModifyNetworkInterfaceAttributeWithContextFunc func(in1 context.Context, in2 *ec2.ModifyNetworkInterfaceAttributeInput, in3 ...request.Option) (*ec2.ModifyNetworkInterfaceAttributeOutput, error)

	// ModifyReservedInstancesFunc mocks the ModifyReservedInstances method.
	ModifyReservedInstancesFunc func(in1 *ec2.ModifyReservedInstancesInput) (*ec2.ModifyReservedInstancesOutput, error)

	// ModifyReservedInstancesRequestFunc mocks the ModifyReservedInstancesRequest method.
	ModifyReservedInstancesRequestFunc func(in1 *ec2.ModifyReservedInstancesInput) (*request.Request, *ec2.ModifyReservedInstancesOutput)

	// ModifyReservedInstancesWithContextFunc mocks the ModifyReservedInstancesWithContext method.
	ModifyReservedInstancesWithContextFunc func(in1 context.Context, in2 *ec2.ModifyReservedInstancesInput, in3 ...request.Option) (*ec2.ModifyReservedInstancesOutput, error)

	// ModifySnapshotAttributeFunc mocks the ModifySnapshotAttribute method.
	ModifySnapshotAttributeFunc func(in1 *ec2.ModifySnapshotAttributeInput) (*ec2.ModifySnapshotAttributeOutput, error)

	// ModifySnapshotAttributeRequestFunc mocks the ModifySnapshotAttributeRequest method.
	ModifySnapshotAttributeRequestFunc func(in1 *ec2.ModifySnapshotAttributeInput) (*request.Request, *ec2.ModifySnapshotAttributeOutput)

	// ModifySnapshotAttributeWithContextFunc mocks the ModifySnapshotAttributeWithContext method.
	ModifySnapshotAttributeWithContextFunc func(in1 context.Context, in2 *ec2.ModifySnapshotAttributeInput, in3 ...request.Option) (*ec2.ModifySnapshotAttributeOutput, error)

	// ModifySpotFleetRequestFunc mocks the ModifySpotFleetRequest method.
	ModifySpotFleetRequestFunc func(in1 *ec2.ModifySpotFleetRequestInput) (*ec2.ModifySpotFleetRequestOutput, error)

	// ModifySpotFleetRequestRequestFunc mocks the ModifySpotFleetRequestRequest method.
	ModifySpotFleetRequestRequestFunc func(in1 *ec2.ModifySpotFleetRequestInput) (*request.Request, *ec2.ModifySpotFleetRequestOutput)

	// ModifySpotFleetRequestWithContextFunc mocks the ModifySpotFleetRequestWithContext method.
	ModifySpotFleetRequestWithContextFunc func(in1 context.Context, in2 *ec2.ModifySpotFleetRequestInput, in3 ...request.Option) (*ec2.ModifySpotFleetRequestOutput, error)

	// ModifySubnetAttributeFunc mocks the ModifySubnetAttribute method.
	ModifySubnetAttributeFunc func(in1 *ec2.ModifySubnetAttributeInput) (*ec2.ModifySubnetAttributeOutput, error)

	// ModifySubnetAttributeRequestFunc mocks the ModifySubnetAttributeRequest method.
	ModifySubnetAttributeRequestFunc func(in1 *ec2.ModifySubnetAttributeInput) (*request.Request, *ec2.ModifySubnetAttributeOutput)

	// ModifySubnetAttributeWithContextFunc mocks the ModifySubnetAttributeWithContext method.
	ModifySubnetAttributeWithContextFunc func(in1 context.Context, in2 *ec2.ModifySubnetAttributeInput, in3 ...request.Option) (*ec2.ModifySubnetAttributeOutput, error)

	// ModifyTrafficMirrorFilterNetworkServicesFunc mocks the ModifyTrafficMirrorFilterNetworkServices method.
	ModifyTrafficMirrorFilterNetworkServicesFunc func(in1 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput) (*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput, error)

	// ModifyTrafficMirrorFilterNetworkServicesRequestFunc mocks the ModifyTrafficMirrorFilterNetworkServicesRequest method.
	ModifyTrafficMirrorFilterNetworkServicesRequestFunc func(in1 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput) (*request.Request, *ec2.ModifyTrafficMirrorFilterNetworkServicesOutput)

	// ModifyTrafficMirrorFilterNetworkServicesWithContextFunc mocks the ModifyTrafficMirrorFilterNetworkServicesWithContext method.
	ModifyTrafficMirrorFilterNetworkServicesWithContextFunc func(in1 context.Context, in2 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput, in3 ...request.Option) (*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput, error)

	// ModifyTrafficMirrorFilterRuleFunc mocks the ModifyTrafficMirrorFilterRule method.
	ModifyTrafficMirrorFilterRuleFunc func(in1 *ec2.ModifyTrafficMirrorFilterRuleInput) (*ec2.ModifyTrafficMirrorFilterRuleOutput, error)

	// ModifyTrafficMirrorFilterRuleRequestFunc mocks the ModifyTrafficMirrorFilterRuleRequest method.
	ModifyTrafficMirrorFilterRuleRequestFunc func(in1 *ec2.ModifyTrafficMirrorFilterRuleInput) (*request.Request, *ec2.ModifyTrafficMirrorFilterRuleOutput)

	// ModifyTrafficMirrorFilterRuleWithContextFunc mocks the ModifyTrafficMirrorFilterRuleWithContext method.
	ModifyTrafficMirrorFilterRuleWithContextFunc func(in1 context.Context, in2 *ec2.ModifyTrafficMirrorFilterRuleInput, in3 ...request.Option) (*ec2.ModifyTrafficMirrorFilterRuleOutput, error)

	// ModifyTrafficMirrorSessionFunc mocks the ModifyTrafficMirrorSession method.
	ModifyTrafficMirrorSessionFunc func(in1 *ec2.ModifyTrafficMirrorSessionInput) (*ec2.ModifyTrafficMirrorSessionOutput, error)

	// ModifyTrafficMirrorSessionRequestFunc mocks the ModifyTrafficMirrorSessionRequest method.
	ModifyTrafficMirrorSessionRequestFunc func(in1 *ec2.ModifyTrafficMirrorSessionInput) (*request.Request, *ec2.ModifyTrafficMirrorSessionOutput)

	// ModifyTrafficMirrorSessionWithContextFunc mocks the ModifyTrafficMirrorSessionWithContext method.
	ModifyTrafficMirrorSessionWithContextFunc func(in1 context.Context, in2 *ec2.ModifyTrafficMirrorSessionInput, in3 ...request.Option) (*ec2.ModifyTrafficMirrorSessionOutput, error)

	// ModifyTransitGatewayVpcAttachmentFunc mocks the ModifyTransitGatewayVpcAttachment method.
	ModifyTransitGatewayVpcAttachmentFunc func(in1 *ec2.ModifyTransitGatewayVpcAttachmentInput) (*ec2.ModifyTransitGatewayVpcAttachmentOutput, error)

	// ModifyTransitGatewayVpcAttachmentRequestFunc mocks the ModifyTransitGatewayVpcAttachmentRequest method.
	ModifyTransitGatewayVpcAttachmentRequestFunc func(in1 *ec2.ModifyTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.ModifyTransitGatewayVpcAttachmentOutput)

	// ModifyTransitGatewayVpcAttachmentWithContextFunc mocks the ModifyTransitGatewayVpcAttachmentWithContext method.
	ModifyTransitGatewayVpcAttachmentWithContextFunc func(in1 context.Context, in2 *ec2.ModifyTransitGatewayVpcAttachmentInput, in3 ...request.Option) (*ec2.ModifyTransitGatewayVpcAttachmentOutput, error)

	// ModifyVolumeFunc mocks the ModifyVolume method.
	ModifyVolumeFunc func(in1 *ec2.ModifyVolumeInput) (*ec2.ModifyVolumeOutput, error)

	// ModifyVolumeAttributeFunc mocks the ModifyVolumeAttribute method.
	ModifyVolumeAttributeFunc func(in1 *ec2.ModifyVolumeAttributeInput) (*ec2.ModifyVolumeAttributeOutput, error)

	// ModifyVolumeAttributeRequestFunc mocks the ModifyVolumeAttributeRequest method.
	ModifyVolumeAttributeRequestFunc func(in1 *ec2.ModifyVolumeAttributeInput) (*request.Request, *ec2.ModifyVolumeAttributeOutput)

	// ModifyVolumeAttributeWithContextFunc mocks the ModifyVolumeAttributeWithContext method.
	ModifyVolumeAttributeWithContextFunc func(in1 context.Context, in2 *ec2.ModifyVolumeAttributeInput, in3 ...request.Option) (*ec2.ModifyVolumeAttributeOutput, error)

	// ModifyVolumeRequestFunc mocks the ModifyVolumeRequest method.
	ModifyVolumeRequestFunc func(in1 *ec2.ModifyVolumeInput) (*request.Request, *ec2.ModifyVolumeOutput)

	// ModifyVolumeWithContextFunc mocks the ModifyVolumeWithContext method.
	ModifyVolumeWithContextFunc func(in1 context.Context, in2 *ec2.ModifyVolumeInput, in3 ...request.Option) (*ec2.ModifyVolumeOutput, error)

	// ModifyVpcAttributeFunc mocks the ModifyVpcAttribute method.
	ModifyVpcAttributeFunc func(in1 *ec2.ModifyVpcAttributeInput) (*ec2.ModifyVpcAttributeOutput, error)

	// ModifyVpcAttributeRequestFunc mocks the ModifyVpcAttributeRequest method.
	ModifyVpcAttributeRequestFunc func(in1 *ec2.ModifyVpcAttributeInput) (*request.Request, *ec2.ModifyVpcAttributeOutput)

	// ModifyVpcAttributeWithContextFunc mocks the ModifyVpcAttributeWithContext method.
	ModifyVpcAttributeWithContextFunc func(in1 context.Context, in2 *ec2.ModifyVpcAttributeInput, in3 ...request.Option) (*ec2.ModifyVpcAttributeOutput, error)

	// ModifyVpcEndpointFunc mocks the ModifyVpcEndpoint method.
	ModifyVpcEndpointFunc func(in1 *ec2.ModifyVpcEndpointInput) (*ec2.ModifyVpcEndpointOutput, error)

	// ModifyVpcEndpointConnectionNotificationFunc mocks the ModifyVpcEndpointConnectionNotification method.
	ModifyVpcEndpointConnectionNotificationFunc func(in1 *ec2.ModifyVpcEndpointConnectionNotificationInput) (*ec2.ModifyVpcEndpointConnectionNotificationOutput, error)

	// ModifyVpcEndpointConnectionNotificationRequestFunc mocks the ModifyVpcEndpointConnectionNotificationRequest method.
	ModifyVpcEndpointConnectionNotificationRequestFunc func(in1 *ec2.ModifyVpcEndpointConnectionNotificationInput) (*request.Request, *ec2.ModifyVpcEndpointConnectionNotificationOutput)

	// ModifyVpcEndpointConnectionNotificationWithContextFunc mocks the ModifyVpcEndpointConnectionNotificationWithContext method.
	ModifyVpcEndpointConnectionNotificationWithContextFunc func(in1 context.Context, in2 *ec2.ModifyVpcEndpointConnectionNotificationInput, in3 ...request.Option) (*ec2.ModifyVpcEndpointConnectionNotificationOutput, error)

	// ModifyVpcEndpointRequestFunc mocks the ModifyVpcEndpointRequest method.
	ModifyVpcEndpointRequestFunc func(in1 *ec2.ModifyVpcEndpointInput) (*request.Request, *ec2.ModifyVpcEndpointOutput)

	// ModifyVpcEndpointServiceConfigurationFunc mocks the ModifyVpcEndpointServiceConfiguration method.
	ModifyVpcEndpointServiceConfigurationFunc func(in1 *ec2.ModifyVpcEndpointServiceConfigurationInput) (*ec2.ModifyVpcEndpointServiceConfigurationOutput, error)

	// ModifyVpcEndpointServiceConfigurationRequestFunc mocks the ModifyVpcEndpointServiceConfigurationRequest method.
	ModifyVpcEndpointServiceConfigurationRequestFunc func(in1 *ec2.ModifyVpcEndpointServiceConfigurationInput) (*request.Request, *ec2.ModifyVpcEndpointServiceConfigurationOutput)

	// ModifyVpcEndpointServiceConfigurationWithContextFunc mocks the ModifyVpcEndpointServiceConfigurationWithContext method.
	ModifyVpcEndpointServiceConfigurationWithContextFunc func(in1 context.Context, in2 *ec2.ModifyVpcEndpointServiceConfigurationInput, in3 ...request.Option) (*ec2.ModifyVpcEndpointServiceConfigurationOutput, error)

	// ModifyVpcEndpointServicePermissionsFunc mocks the ModifyVpcEndpointServicePermissions method.
	ModifyVpcEndpointServicePermissionsFunc func(in1 *ec2.ModifyVpcEndpointServicePermissionsInput) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error)

	// ModifyVpcEndpointServicePermissionsRequestFunc mocks the ModifyVpcEndpointServicePermissionsRequest method.
	ModifyVpcEndpointServicePermissionsRequestFunc func(in1 *ec2.ModifyVpcEndpointServicePermissionsInput) (*request.Request, *ec2.ModifyVpcEndpointServicePermissionsOutput)

	// ModifyVpcEndpointServicePermissionsWithContextFunc mocks the ModifyVpcEndpointServicePermissionsWithContext method.
	ModifyVpcEndpointServicePermissionsWithContextFunc func(in1 context.Context, in2 *ec2.ModifyVpcEndpointServicePermissionsInput, in3 ...request.Option) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error)

	// ModifyVpcEndpointWithContextFunc mocks the ModifyVpcEndpointWithContext method.
	ModifyVpcEndpointWithContextFunc func(in1 context.Context, in2 *ec2.ModifyVpcEndpointInput, in3 ...request.Option) (*ec2.ModifyVpcEndpointOutput, error)

	// ModifyVpcPeeringConnectionOptionsFunc mocks the ModifyVpcPeeringConnectionOptions method.
	ModifyVpcPeeringConnectionOptionsFunc func(in1 *ec2.ModifyVpcPeeringConnectionOptionsInput) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error)

	// ModifyVpcPeeringConnectionOptionsRequestFunc mocks the ModifyVpcPeeringConnectionOptionsRequest method.
	ModifyVpcPeeringConnectionOptionsRequestFunc func(in1 *ec2.ModifyVpcPeeringConnectionOptionsInput) (*request.Request, *ec2.ModifyVpcPeeringConnectionOptionsOutput)

	// ModifyVpcPeeringConnectionOptionsWithContextFunc mocks the ModifyVpcPeeringConnectionOptionsWithContext method.
	ModifyVpcPeeringConnectionOptionsWithContextFunc func(in1 context.Context, in2 *ec2.ModifyVpcPeeringConnectionOptionsInput, in3 ...request.Option) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error)

	// ModifyVpcTenancyFunc mocks the ModifyVpcTenancy method.
	ModifyVpcTenancyFunc func(in1 *ec2.ModifyVpcTenancyInput) (*ec2.ModifyVpcTenancyOutput, error)

	// ModifyVpcTenancyRequestFunc mocks the ModifyVpcTenancyRequest method.
	ModifyVpcTenancyRequestFunc func(in1 *ec2.ModifyVpcTenancyInput) (*request.Request, *ec2.ModifyVpcTenancyOutput)

	// ModifyVpcTenancyWithContextFunc mocks the ModifyVpcTenancyWithContext method.
	ModifyVpcTenancyWithContextFunc func(in1 context.Context, in2 *ec2.ModifyVpcTenancyInput, in3 ...request.Option) (*ec2.ModifyVpcTenancyOutput, error)

	// ModifyVpnConnectionFunc mocks the ModifyVpnConnection method.
	ModifyVpnConnectionFunc func(in1 *ec2.ModifyVpnConnectionInput) (*ec2.ModifyVpnConnectionOutput, error)

	// ModifyVpnConnectionRequestFunc mocks the ModifyVpnConnectionRequest method.
	ModifyVpnConnectionRequestFunc func(in1 *ec2.ModifyVpnConnectionInput) (*request.Request, *ec2.ModifyVpnConnectionOutput)

	// ModifyVpnConnectionWithContextFunc mocks the ModifyVpnConnectionWithContext method.
	ModifyVpnConnectionWithContextFunc func(in1 context.Context, in2 *ec2.ModifyVpnConnectionInput, in3 ...request.Option) (*ec2.ModifyVpnConnectionOutput, error)

	// ModifyVpnTunnelCertificateFunc mocks the ModifyVpnTunnelCertificate method.
	ModifyVpnTunnelCertificateFunc func(in1 *ec2.ModifyVpnTunnelCertificateInput) (*ec2.ModifyVpnTunnelCertificateOutput, error)

	// ModifyVpnTunnelCertificateRequestFunc mocks the ModifyVpnTunnelCertificateRequest method.
	ModifyVpnTunnelCertificateRequestFunc func(in1 *ec2.ModifyVpnTunnelCertificateInput) (*request.Request, *ec2.ModifyVpnTunnelCertificateOutput)

	// ModifyVpnTunnelCertificateWithContextFunc mocks the ModifyVpnTunnelCertificateWithContext method.
	ModifyVpnTunnelCertificateWithContextFunc func(in1 context.Context, in2 *ec2.ModifyVpnTunnelCertificateInput, in3 ...request.Option) (*ec2.ModifyVpnTunnelCertificateOutput, error)

	// ModifyVpnTunnelOptionsFunc mocks the ModifyVpnTunnelOptions method.
	ModifyVpnTunnelOptionsFunc func(in1 *ec2.ModifyVpnTunnelOptionsInput) (*ec2.ModifyVpnTunnelOptionsOutput, error)

	// ModifyVpnTunnelOptionsRequestFunc mocks the ModifyVpnTunnelOptionsRequest method.
	ModifyVpnTunnelOptionsRequestFunc func(in1 *ec2.ModifyVpnTunnelOptionsInput) (*request.Request, *ec2.ModifyVpnTunnelOptionsOutput)

	// ModifyVpnTunnelOptionsWithContextFunc mocks the ModifyVpnTunnelOptionsWithContext method.
	ModifyVpnTunnelOptionsWithContextFunc func(in1 context.Context, in2 *ec2.ModifyVpnTunnelOptionsInput, in3 ...request.Option) (*ec2.ModifyVpnTunnelOptionsOutput, error)

	// MonitorInstancesFunc mocks the MonitorInstances method.
	MonitorInstancesFunc func(in1 *ec2.MonitorInstancesInput) (*ec2.MonitorInstancesOutput, error)

	// MonitorInstancesRequestFunc mocks the MonitorInstancesRequest method.
	MonitorInstancesRequestFunc func(in1 *ec2.MonitorInstancesInput) (*request.Request, *ec2.MonitorInstancesOutput)

	// MonitorInstancesWithContextFunc mocks the MonitorInstancesWithContext method.
	MonitorInstancesWithContextFunc func(in1 context.Context, in2 *ec2.MonitorInstancesInput, in3 ...request.Option) (*ec2.MonitorInstancesOutput, error)

	// MoveAddressToVpcFunc mocks the MoveAddressToVpc method.
	MoveAddressToVpcFunc func(in1 *ec2.MoveAddressToVpcInput) (*ec2.MoveAddressToVpcOutput, error)

	// MoveAddressToVpcRequestFunc mocks the MoveAddressToVpcRequest method.
	MoveAddressToVpcRequestFunc func(in1 *ec2.MoveAddressToVpcInput) (*request.Request, *ec2.MoveAddressToVpcOutput)

	// MoveAddressToVpcWithContextFunc mocks the MoveAddressToVpcWithContext method.
	MoveAddressToVpcWithContextFunc func(in1 context.Context, in2 *ec2.MoveAddressToVpcInput, in3 ...request.Option) (*ec2.MoveAddressToVpcOutput, error)

	// ProvisionByoipCidrFunc mocks the ProvisionByoipCidr method.
	ProvisionByoipCidrFunc func(in1 *ec2.ProvisionByoipCidrInput) (*ec2.ProvisionByoipCidrOutput, error)

	// ProvisionByoipCidrRequestFunc mocks the ProvisionByoipCidrRequest method.
	ProvisionByoipCidrRequestFunc func(in1 *ec2.ProvisionByoipCidrInput) (*request.Request, *ec2.ProvisionByoipCidrOutput)

	// ProvisionByoipCidrWithContextFunc mocks the ProvisionByoipCidrWithContext method.
	ProvisionByoipCidrWithContextFunc func(in1 context.Context, in2 *ec2.ProvisionByoipCidrInput, in3 ...request.Option) (*ec2.ProvisionByoipCidrOutput, error)

	// PurchaseHostReservationFunc mocks the PurchaseHostReservation method.
	PurchaseHostReservationFunc func(in1 *ec2.PurchaseHostReservationInput) (*ec2.PurchaseHostReservationOutput, error)

	// PurchaseHostReservationRequestFunc mocks the PurchaseHostReservationRequest method.
	PurchaseHostReservationRequestFunc func(in1 *ec2.PurchaseHostReservationInput) (*request.Request, *ec2.PurchaseHostReservationOutput)

	// PurchaseHostReservationWithContextFunc mocks the PurchaseHostReservationWithContext method.
	PurchaseHostReservationWithContextFunc func(in1 context.Context, in2 *ec2.PurchaseHostReservationInput, in3 ...request.Option) (*ec2.PurchaseHostReservationOutput, error)

	// PurchaseReservedInstancesOfferingFunc mocks the PurchaseReservedInstancesOffering method.
	PurchaseReservedInstancesOfferingFunc func(in1 *ec2.PurchaseReservedInstancesOfferingInput) (*ec2.PurchaseReservedInstancesOfferingOutput, error)

	// PurchaseReservedInstancesOfferingRequestFunc mocks the PurchaseReservedInstancesOfferingRequest method.
	PurchaseReservedInstancesOfferingRequestFunc func(in1 *ec2.PurchaseReservedInstancesOfferingInput) (*request.Request, *ec2.PurchaseReservedInstancesOfferingOutput)

	// PurchaseReservedInstancesOfferingWithContextFunc mocks the PurchaseReservedInstancesOfferingWithContext method.
	PurchaseReservedInstancesOfferingWithContextFunc func(in1 context.Context, in2 *ec2.PurchaseReservedInstancesOfferingInput, in3 ...request.Option) (*ec2.PurchaseReservedInstancesOfferingOutput, error)

	// PurchaseScheduledInstancesFunc mocks the PurchaseScheduledInstances method.
	PurchaseScheduledInstancesFunc func(in1 *ec2.PurchaseScheduledInstancesInput) (*ec2.PurchaseScheduledInstancesOutput, error)

	// PurchaseScheduledInstancesRequestFunc mocks the PurchaseScheduledInstancesRequest method.
	PurchaseScheduledInstancesRequestFunc func(in1 *ec2.PurchaseScheduledInstancesInput) (*request.Request, *ec2.PurchaseScheduledInstancesOutput)

	// PurchaseScheduledInstancesWithContextFunc mocks the PurchaseScheduledInstancesWithContext method.
	PurchaseScheduledInstancesWithContextFunc func(in1 context.Context, in2 *ec2.PurchaseScheduledInstancesInput, in3 ...request.Option) (*ec2.PurchaseScheduledInstancesOutput, error)

	// RebootInstancesFunc mocks the RebootInstances method.
	RebootInstancesFunc func(in1 *ec2.RebootInstancesInput) (*ec2.RebootInstancesOutput, error)

	// RebootInstancesRequestFunc mocks the RebootInstancesRequest method.
	RebootInstancesRequestFunc func(in1 *ec2.RebootInstancesInput) (*request.Request, *ec2.RebootInstancesOutput)

	// RebootInstancesWithContextFunc mocks the RebootInstancesWithContext method.
	RebootInstancesWithContextFunc func(in1 context.Context, in2 *ec2.RebootInstancesInput, in3 ...request.Option) (*ec2.RebootInstancesOutput, error)

	// RegisterImageFunc mocks the RegisterImage method.
	RegisterImageFunc func(in1 *ec2.RegisterImageInput) (*ec2.RegisterImageOutput, error)

	// RegisterImageRequestFunc mocks the RegisterImageRequest method.
	RegisterImageRequestFunc func(in1 *ec2.RegisterImageInput) (*request.Request, *ec2.RegisterImageOutput)

	// RegisterImageWithContextFunc mocks the RegisterImageWithContext method.
	RegisterImageWithContextFunc func(in1 context.Context, in2 *ec2.RegisterImageInput, in3 ...request.Option) (*ec2.RegisterImageOutput, error)

	// RegisterTransitGatewayMulticastGroupMembersFunc mocks the RegisterTransitGatewayMulticastGroupMembers method.
	RegisterTransitGatewayMulticastGroupMembersFunc func(in1 *ec2.RegisterTransitGatewayMulticastGroupMembersInput) (*ec2.RegisterTransitGatewayMulticastGroupMembersOutput, error)

	// RegisterTransitGatewayMulticastGroupMembersRequestFunc mocks the RegisterTransitGatewayMulticastGroupMembersRequest method.
	RegisterTransitGatewayMulticastGroupMembersRequestFunc func(in1 *ec2.RegisterTransitGatewayMulticastGroupMembersInput) (*request.Request, *ec2.RegisterTransitGatewayMulticastGroupMembersOutput)

	// RegisterTransitGatewayMulticastGroupMembersWithContextFunc mocks the RegisterTransitGatewayMulticastGroupMembersWithContext method.
	RegisterTransitGatewayMulticastGroupMembersWithContextFunc func(in1 context.Context, in2 *ec2.RegisterTransitGatewayMulticastGroupMembersInput, in3 ...request.Option) (*ec2.RegisterTransitGatewayMulticastGroupMembersOutput, error)

	// RegisterTransitGatewayMulticastGroupSourcesFunc mocks the RegisterTransitGatewayMulticastGroupSources method.
	RegisterTransitGatewayMulticastGroupSourcesFunc func(in1 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput) (*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput, error)

	// RegisterTransitGatewayMulticastGroupSourcesRequestFunc mocks the RegisterTransitGatewayMulticastGroupSourcesRequest method.
	RegisterTransitGatewayMulticastGroupSourcesRequestFunc func(in1 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput) (*request.Request, *ec2.RegisterTransitGatewayMulticastGroupSourcesOutput)

	// RegisterTransitGatewayMulticastGroupSourcesWithContextFunc mocks the RegisterTransitGatewayMulticastGroupSourcesWithContext method.
	RegisterTransitGatewayMulticastGroupSourcesWithContextFunc func(in1 context.Context, in2 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput, in3 ...request.Option) (*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput, error)

	// RejectTransitGatewayPeeringAttachmentFunc mocks the RejectTransitGatewayPeeringAttachment method.
	RejectTransitGatewayPeeringAttachmentFunc func(in1 *ec2.RejectTransitGatewayPeeringAttachmentInput) (*ec2.RejectTransitGatewayPeeringAttachmentOutput, error)

	// RejectTransitGatewayPeeringAttachmentRequestFunc mocks the RejectTransitGatewayPeeringAttachmentRequest method.
	RejectTransitGatewayPeeringAttachmentRequestFunc func(in1 *ec2.RejectTransitGatewayPeeringAttachmentInput) (*request.Request, *ec2.RejectTransitGatewayPeeringAttachmentOutput)

	// RejectTransitGatewayPeeringAttachmentWithContextFunc mocks the RejectTransitGatewayPeeringAttachmentWithContext method.
	RejectTransitGatewayPeeringAttachmentWithContextFunc func(in1 context.Context, in2 *ec2.RejectTransitGatewayPeeringAttachmentInput, in3 ...request.Option) (*ec2.RejectTransitGatewayPeeringAttachmentOutput, error)

	// RejectTransitGatewayVpcAttachmentFunc mocks the RejectTransitGatewayVpcAttachment method.
	RejectTransitGatewayVpcAttachmentFunc func(in1 *ec2.RejectTransitGatewayVpcAttachmentInput) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error)

	// RejectTransitGatewayVpcAttachmentRequestFunc mocks the RejectTransitGatewayVpcAttachmentRequest method.
	RejectTransitGatewayVpcAttachmentRequestFunc func(in1 *ec2.RejectTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.RejectTransitGatewayVpcAttachmentOutput)

	// RejectTransitGatewayVpcAttachmentWithContextFunc mocks the RejectTransitGatewayVpcAttachmentWithContext method.
	RejectTransitGatewayVpcAttachmentWithContextFunc func(in1 context.Context, in2 *ec2.RejectTransitGatewayVpcAttachmentInput, in3 ...request.Option) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error)

	// RejectVpcEndpointConnectionsFunc mocks the RejectVpcEndpointConnections method.
	RejectVpcEndpointConnectionsFunc func(in1 *ec2.RejectVpcEndpointConnectionsInput) (*ec2.RejectVpcEndpointConnectionsOutput, error)

	// RejectVpcEndpointConnectionsRequestFunc mocks the RejectVpcEndpointConnectionsRequest method.
	RejectVpcEndpointConnectionsRequestFunc func(in1 *ec2.RejectVpcEndpointConnectionsInput) (*request.Request, *ec2.RejectVpcEndpointConnectionsOutput)

	// RejectVpcEndpointConnectionsWithContextFunc mocks the RejectVpcEndpointConnectionsWithContext method.
	RejectVpcEndpointConnectionsWithContextFunc func(in1 context.Context, in2 *ec2.RejectVpcEndpointConnectionsInput, in3 ...request.Option) (*ec2.RejectVpcEndpointConnectionsOutput, error)

	// RejectVpcPeeringConnectionFunc mocks the RejectVpcPeeringConnection method.
	RejectVpcPeeringConnectionFunc func(in1 *ec2.RejectVpcPeeringConnectionInput) (*ec2.RejectVpcPeeringConnectionOutput, error)

	// RejectVpcPeeringConnectionRequestFunc mocks the RejectVpcPeeringConnectionRequest method.
	RejectVpcPeeringConnectionRequestFunc func(in1 *ec2.RejectVpcPeeringConnectionInput) (*request.Request, *ec2.RejectVpcPeeringConnectionOutput)

	// RejectVpcPeeringConnectionWithContextFunc mocks the RejectVpcPeeringConnectionWithContext method.
	RejectVpcPeeringConnectionWithContextFunc func(in1 context.Context, in2 *ec2.RejectVpcPeeringConnectionInput, in3 ...request.Option) (*ec2.RejectVpcPeeringConnectionOutput, error)

	// ReleaseAddressFunc mocks the ReleaseAddress method.
	ReleaseAddressFunc func(in1 *ec2.ReleaseAddressInput) (*ec2.ReleaseAddressOutput, error)

	// ReleaseAddressRequestFunc mocks the ReleaseAddressRequest method.
	ReleaseAddressRequestFunc func(in1 *ec2.ReleaseAddressInput) (*request.Request, *ec2.ReleaseAddressOutput)

	// ReleaseAddressWithContextFunc mocks the ReleaseAddressWithContext method.
	ReleaseAddressWithContextFunc func(in1 context.Context, in2 *ec2.ReleaseAddressInput, in3 ...request.Option) (*ec2.ReleaseAddressOutput, error)

	// ReleaseHostsFunc mocks the ReleaseHosts method.
	ReleaseHostsFunc func(in1 *ec2.ReleaseHostsInput) (*ec2.ReleaseHostsOutput, error)

	// ReleaseHostsRequestFunc mocks the ReleaseHostsRequest method.
	ReleaseHostsRequestFunc func(in1 *ec2.ReleaseHostsInput) (*request.Request, *ec2.ReleaseHostsOutput)

	// ReleaseHostsWithContextFunc mocks the ReleaseHostsWithContext method.
	ReleaseHostsWithContextFunc func(in1 context.Context, in2 *ec2.ReleaseHostsInput, in3 ...request.Option) (*ec2.ReleaseHostsOutput, error)

	// ReplaceIamInstanceProfileAssociationFunc mocks the ReplaceIamInstanceProfileAssociation method.
	ReplaceIamInstanceProfileAssociationFunc func(in1 *ec2.ReplaceIamInstanceProfileAssociationInput) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error)

	// ReplaceIamInstanceProfileAssociationRequestFunc mocks the ReplaceIamInstanceProfileAssociationRequest method.
	ReplaceIamInstanceProfileAssociationRequestFunc func(in1 *ec2.ReplaceIamInstanceProfileAssociationInput) (*request.Request, *ec2.ReplaceIamInstanceProfileAssociationOutput)

	// ReplaceIamInstanceProfileAssociationWithContextFunc mocks the ReplaceIamInstanceProfileAssociationWithContext method.
	ReplaceIamInstanceProfileAssociationWithContextFunc func(in1 context.Context, in2 *ec2.ReplaceIamInstanceProfileAssociationInput, in3 ...request.Option) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error)

	// ReplaceNetworkAclAssociationFunc mocks the ReplaceNetworkAclAssociation method.
	ReplaceNetworkAclAssociationFunc func(in1 *ec2.ReplaceNetworkAclAssociationInput) (*ec2.ReplaceNetworkAclAssociationOutput, error)

	// ReplaceNetworkAclAssociationRequestFunc mocks the ReplaceNetworkAclAssociationRequest method.
	ReplaceNetworkAclAssociationRequestFunc func(in1 *ec2.ReplaceNetworkAclAssociationInput) (*request.Request, *ec2.ReplaceNetworkAclAssociationOutput)

	// ReplaceNetworkAclAssociationWithContextFunc mocks the ReplaceNetworkAclAssociationWithContext method.
	ReplaceNetworkAclAssociationWithContextFunc func(in1 context.Context, in2 *ec2.ReplaceNetworkAclAssociationInput, in3 ...request.Option) (*ec2.ReplaceNetworkAclAssociationOutput, error)

	// ReplaceNetworkAclEntryFunc mocks the ReplaceNetworkAclEntry method.
	ReplaceNetworkAclEntryFunc func(in1 *ec2.ReplaceNetworkAclEntryInput) (*ec2.ReplaceNetworkAclEntryOutput, error)

	// ReplaceNetworkAclEntryRequestFunc mocks the ReplaceNetworkAclEntryRequest method.
	ReplaceNetworkAclEntryRequestFunc func(in1 *ec2.ReplaceNetworkAclEntryInput) (*request.Request, *ec2.ReplaceNetworkAclEntryOutput)

	// ReplaceNetworkAclEntryWithContextFunc mocks the ReplaceNetworkAclEntryWithContext method.
	ReplaceNetworkAclEntryWithContextFunc func(in1 context.Context, in2 *ec2.ReplaceNetworkAclEntryInput, in3 ...request.Option) (*ec2.ReplaceNetworkAclEntryOutput, error)

	// ReplaceRouteFunc mocks the ReplaceRoute method.
	ReplaceRouteFunc func(in1 *ec2.ReplaceRouteInput) (*ec2.ReplaceRouteOutput, error)

	// ReplaceRouteRequestFunc mocks the ReplaceRouteRequest method.
	ReplaceRouteRequestFunc func(in1 *ec2.ReplaceRouteInput) (*request.Request, *ec2.ReplaceRouteOutput)

	// ReplaceRouteTableAssociationFunc mocks the ReplaceRouteTableAssociation method.
	ReplaceRouteTableAssociationFunc func(in1 *ec2.ReplaceRouteTableAssociationInput) (*ec2.ReplaceRouteTableAssociationOutput, error)

	// ReplaceRouteTableAssociationRequestFunc mocks the ReplaceRouteTableAssociationRequest method.
	ReplaceRouteTableAssociationRequestFunc func(in1 *ec2.ReplaceRouteTableAssociationInput) (*request.Request, *ec2.ReplaceRouteTableAssociationOutput)

	// ReplaceRouteTableAssociationWithContextFunc mocks the ReplaceRouteTableAssociationWithContext method.
	ReplaceRouteTableAssociationWithContextFunc func(in1 context.Context, in2 *ec2.ReplaceRouteTableAssociationInput, in3 ...request.Option) (*ec2.ReplaceRouteTableAssociationOutput, error)

	// ReplaceRouteWithContextFunc mocks the ReplaceRouteWithContext method.
	ReplaceRouteWithContextFunc func(in1 context.Context, in2 *ec2.ReplaceRouteInput, in3 ...request.Option) (*ec2.ReplaceRouteOutput, error)

	// ReplaceTransitGatewayRouteFunc mocks the ReplaceTransitGatewayRoute method.
	ReplaceTransitGatewayRouteFunc func(in1 *ec2.ReplaceTransitGatewayRouteInput) (*ec2.ReplaceTransitGatewayRouteOutput, error)

	// ReplaceTransitGatewayRouteRequestFunc mocks the ReplaceTransitGatewayRouteRequest method.
	ReplaceTransitGatewayRouteRequestFunc func(in1 *ec2.ReplaceTransitGatewayRouteInput) (*request.Request, *ec2.ReplaceTransitGatewayRouteOutput)

	// ReplaceTransitGatewayRouteWithContextFunc mocks the ReplaceTransitGatewayRouteWithContext method.
	ReplaceTransitGatewayRouteWithContextFunc func(in1 context.Context, in2 *ec2.ReplaceTransitGatewayRouteInput, in3 ...request.Option) (*ec2.ReplaceTransitGatewayRouteOutput, error)

	// ReportInstanceStatusFunc mocks the ReportInstanceStatus method.
	ReportInstanceStatusFunc func(in1 *ec2.ReportInstanceStatusInput) (*ec2.ReportInstanceStatusOutput, error)

	// ReportInstanceStatusRequestFunc mocks the ReportInstanceStatusRequest method.
	ReportInstanceStatusRequestFunc func(in1 *ec2.ReportInstanceStatusInput) (*request.Request, *ec2.ReportInstanceStatusOutput)

	// ReportInstanceStatusWithContextFunc mocks the ReportInstanceStatusWithContext method.
	ReportInstanceStatusWithContextFunc func(in1 context.Context, in2 *ec2.ReportInstanceStatusInput, in3 ...request.Option) (*ec2.ReportInstanceStatusOutput, error)

	// RequestSpotFleetFunc mocks the RequestSpotFleet method.
	RequestSpotFleetFunc func(in1 *ec2.RequestSpotFleetInput) (*ec2.RequestSpotFleetOutput, error)

	// RequestSpotFleetRequestFunc mocks the RequestSpotFleetRequest method.
	RequestSpotFleetRequestFunc func(in1 *ec2.RequestSpotFleetInput) (*request.Request, *ec2.RequestSpotFleetOutput)

	// RequestSpotFleetWithContextFunc mocks the RequestSpotFleetWithContext method.
	RequestSpotFleetWithContextFunc func(in1 context.Context, in2 *ec2.RequestSpotFleetInput, in3 ...request.Option) (*ec2.RequestSpotFleetOutput, error)

	// RequestSpotInstancesFunc mocks the RequestSpotInstances method.
	RequestSpotInstancesFunc func(in1 *ec2.RequestSpotInstancesInput) (*ec2.RequestSpotInstancesOutput, error)

	// RequestSpotInstancesRequestFunc mocks the RequestSpotInstancesRequest method.
	RequestSpotInstancesRequestFunc func(in1 *ec2.RequestSpotInstancesInput) (*request.Request, *ec2.RequestSpotInstancesOutput)

	// RequestSpotInstancesWithContextFunc mocks the RequestSpotInstancesWithContext method.
	RequestSpotInstancesWithContextFunc func(in1 context.Context, in2 *ec2.RequestSpotInstancesInput, in3 ...request.Option) (*ec2.RequestSpotInstancesOutput, error)

	// ResetEbsDefaultKmsKeyIdFunc mocks the ResetEbsDefaultKmsKeyId method.
	ResetEbsDefaultKmsKeyIdFunc func(in1 *ec2.ResetEbsDefaultKmsKeyIdInput) (*ec2.ResetEbsDefaultKmsKeyIdOutput, error)

	// ResetEbsDefaultKmsKeyIdRequestFunc mocks the ResetEbsDefaultKmsKeyIdRequest method.
	ResetEbsDefaultKmsKeyIdRequestFunc func(in1 *ec2.ResetEbsDefaultKmsKeyIdInput) (*request.Request, *ec2.ResetEbsDefaultKmsKeyIdOutput)

	// ResetEbsDefaultKmsKeyIdWithContextFunc mocks the ResetEbsDefaultKmsKeyIdWithContext method.
	ResetEbsDefaultKmsKeyIdWithContextFunc func(in1 context.Context, in2 *ec2.ResetEbsDefaultKmsKeyIdInput, in3 ...request.Option) (*ec2.ResetEbsDefaultKmsKeyIdOutput, error)

	// ResetFpgaImageAttributeFunc mocks the ResetFpgaImageAttribute method.
	ResetFpgaImageAttributeFunc func(in1 *ec2.ResetFpgaImageAttributeInput) (*ec2.ResetFpgaImageAttributeOutput, error)

	// ResetFpgaImageAttributeRequestFunc mocks the ResetFpgaImageAttributeRequest method.
	ResetFpgaImageAttributeRequestFunc func(in1 *ec2.ResetFpgaImageAttributeInput) (*request.Request, *ec2.ResetFpgaImageAttributeOutput)

	// ResetFpgaImageAttributeWithContextFunc mocks the ResetFpgaImageAttributeWithContext method.
	ResetFpgaImageAttributeWithContextFunc func(in1 context.Context, in2 *ec2.ResetFpgaImageAttributeInput, in3 ...request.Option) (*ec2.ResetFpgaImageAttributeOutput, error)

	// ResetImageAttributeFunc mocks the ResetImageAttribute method.
	ResetImageAttributeFunc func(in1 *ec2.ResetImageAttributeInput) (*ec2.ResetImageAttributeOutput, error)

	// ResetImageAttributeRequestFunc mocks the ResetImageAttributeRequest method.
	ResetImageAttributeRequestFunc func(in1 *ec2.ResetImageAttributeInput) (*request.Request, *ec2.ResetImageAttributeOutput)

	// ResetImageAttributeWithContextFunc mocks the ResetImageAttributeWithContext method.
	ResetImageAttributeWithContextFunc func(in1 context.Context, in2 *ec2.ResetImageAttributeInput, in3 ...request.Option) (*ec2.ResetImageAttributeOutput, error)

	// ResetInstanceAttributeFunc mocks the ResetInstanceAttribute method.
	ResetInstanceAttributeFunc func(in1 *ec2.ResetInstanceAttributeInput) (*ec2.ResetInstanceAttributeOutput, error)

	// ResetInstanceAttributeRequestFunc mocks the ResetInstanceAttributeRequest method.
	ResetInstanceAttributeRequestFunc func(in1 *ec2.ResetInstanceAttributeInput) (*request.Request, *ec2.ResetInstanceAttributeOutput)

	// ResetInstanceAttributeWithContextFunc mocks the ResetInstanceAttributeWithContext method.
	ResetInstanceAttributeWithContextFunc func(in1 context.Context, in2 *ec2.ResetInstanceAttributeInput, in3 ...request.Option) (*ec2.ResetInstanceAttributeOutput, error)

	// ResetNetworkInterfaceAttributeFunc mocks the ResetNetworkInterfaceAttribute method.
	ResetNetworkInterfaceAttributeFunc func(in1 *ec2.ResetNetworkInterfaceAttributeInput) (*ec2.ResetNetworkInterfaceAttributeOutput, error)

	// ResetNetworkInterfaceAttributeRequestFunc mocks the ResetNetworkInterfaceAttributeRequest method.
	ResetNetworkInterfaceAttributeRequestFunc func(in1 *ec2.ResetNetworkInterfaceAttributeInput) (*request.Request, *ec2.ResetNetworkInterfaceAttributeOutput)

	// ResetNetworkInterfaceAttributeWithContextFunc mocks the ResetNetworkInterfaceAttributeWithContext method.
	ResetNetworkInterfaceAttributeWithContextFunc func(in1 context.Context, in2 *ec2.ResetNetworkInterfaceAttributeInput, in3 ...request.Option) (*ec2.ResetNetworkInterfaceAttributeOutput, error)

	// ResetSnapshotAttributeFunc mocks the ResetSnapshotAttribute method.
	ResetSnapshotAttributeFunc func(in1 *ec2.ResetSnapshotAttributeInput) (*ec2.ResetSnapshotAttributeOutput, error)

	// ResetSnapshotAttributeRequestFunc mocks the ResetSnapshotAttributeRequest method.
	ResetSnapshotAttributeRequestFunc func(in1 *ec2.ResetSnapshotAttributeInput) (*request.Request, *ec2.ResetSnapshotAttributeOutput)

	// ResetSnapshotAttributeWithContextFunc mocks the ResetSnapshotAttributeWithContext method.
	ResetSnapshotAttributeWithContextFunc func(in1 context.Context, in2 *ec2.ResetSnapshotAttributeInput, in3 ...request.Option) (*ec2.ResetSnapshotAttributeOutput, error)

	// RestoreAddressToClassicFunc mocks the RestoreAddressToClassic method.
	RestoreAddressToClassicFunc func(in1 *ec2.RestoreAddressToClassicInput) (*ec2.RestoreAddressToClassicOutput, error)

	// RestoreAddressToClassicRequestFunc mocks the RestoreAddressToClassicRequest method.
	RestoreAddressToClassicRequestFunc func(in1 *ec2.RestoreAddressToClassicInput) (*request.Request, *ec2.RestoreAddressToClassicOutput)

	// RestoreAddressToClassicWithContextFunc mocks the RestoreAddressToClassicWithContext method.
	RestoreAddressToClassicWithContextFunc func(in1 context.Context, in2 *ec2.RestoreAddressToClassicInput, in3 ...request.Option) (*ec2.RestoreAddressToClassicOutput, error)

	// RevokeClientVpnIngressFunc mocks the RevokeClientVpnIngress method.
	RevokeClientVpnIngressFunc func(in1 *ec2.RevokeClientVpnIngressInput) (*ec2.RevokeClientVpnIngressOutput, error)

	// RevokeClientVpnIngressRequestFunc mocks the RevokeClientVpnIngressRequest method.
	RevokeClientVpnIngressRequestFunc func(in1 *ec2.RevokeClientVpnIngressInput) (*request.Request, *ec2.RevokeClientVpnIngressOutput)

	// RevokeClientVpnIngressWithContextFunc mocks the RevokeClientVpnIngressWithContext method.
	RevokeClientVpnIngressWithContextFunc func(in1 context.Context, in2 *ec2.RevokeClientVpnIngressInput, in3 ...request.Option) (*ec2.RevokeClientVpnIngressOutput, error)

	// RevokeSecurityGroupEgressFunc mocks the RevokeSecurityGroupEgress method.
	RevokeSecurityGroupEgressFunc func(in1 *ec2.RevokeSecurityGroupEgressInput) (*ec2.RevokeSecurityGroupEgressOutput, error)

	// RevokeSecurityGroupEgressRequestFunc mocks the RevokeSecurityGroupEgressRequest method.
	RevokeSecurityGroupEgressRequestFunc func(in1 *ec2.RevokeSecurityGroupEgressInput) (*request.Request, *ec2.RevokeSecurityGroupEgressOutput)

	// RevokeSecurityGroupEgressWithContextFunc mocks the RevokeSecurityGroupEgressWithContext method.
	RevokeSecurityGroupEgressWithContextFunc func(in1 context.Context, in2 *ec2.RevokeSecurityGroupEgressInput, in3 ...request.Option) (*ec2.RevokeSecurityGroupEgressOutput, error)

	// RevokeSecurityGroupIngressFunc mocks the RevokeSecurityGroupIngress method.
	RevokeSecurityGroupIngressFunc func(in1 *ec2.RevokeSecurityGroupIngressInput) (*ec2.RevokeSecurityGroupIngressOutput, error)

	// RevokeSecurityGroupIngressRequestFunc mocks the RevokeSecurityGroupIngressRequest method.
	RevokeSecurityGroupIngressRequestFunc func(in1 *ec2.RevokeSecurityGroupIngressInput) (*request.Request, *ec2.RevokeSecurityGroupIngressOutput)

	// RevokeSecurityGroupIngressWithContextFunc mocks the RevokeSecurityGroupIngressWithContext method.
	RevokeSecurityGroupIngressWithContextFunc func(in1 context.Context, in2 *ec2.RevokeSecurityGroupIngressInput, in3 ...request.Option) (*ec2.RevokeSecurityGroupIngressOutput, error)

	// RunInstancesFunc mocks the RunInstances method.
	RunInstancesFunc func(in1 *ec2.RunInstancesInput) (*ec2.Reservation, error)

	// RunInstancesRequestFunc mocks the RunInstancesRequest method.
	RunInstancesRequestFunc func(in1 *ec2.RunInstancesInput) (*request.Request, *ec2.Reservation)

	// RunInstancesWithContextFunc mocks the RunInstancesWithContext method.
	RunInstancesWithContextFunc func(in1 context.Context, in2 *ec2.RunInstancesInput, in3 ...request.Option) (*ec2.Reservation, error)

	// RunScheduledInstancesFunc mocks the RunScheduledInstances method.
	RunScheduledInstancesFunc func(in1 *ec2.RunScheduledInstancesInput) (*ec2.RunScheduledInstancesOutput, error)

	// RunScheduledInstancesRequestFunc mocks the RunScheduledInstancesRequest method.
	RunScheduledInstancesRequestFunc func(in1 *ec2.RunScheduledInstancesInput) (*request.Request, *ec2.RunScheduledInstancesOutput)

	// RunScheduledInstancesWithContextFunc mocks the RunScheduledInstancesWithContext method.
	RunScheduledInstancesWithContextFunc func(in1 context.Context, in2 *ec2.RunScheduledInstancesInput, in3 ...request.Option) (*ec2.RunScheduledInstancesOutput, error)

	// SearchLocalGatewayRoutesFunc mocks the SearchLocalGatewayRoutes method.
	SearchLocalGatewayRoutesFunc func(in1 *ec2.SearchLocalGatewayRoutesInput) (*ec2.SearchLocalGatewayRoutesOutput, error)

	// SearchLocalGatewayRoutesRequestFunc mocks the SearchLocalGatewayRoutesRequest method.
	SearchLocalGatewayRoutesRequestFunc func(in1 *ec2.SearchLocalGatewayRoutesInput) (*request.Request, *ec2.SearchLocalGatewayRoutesOutput)

	// SearchLocalGatewayRoutesWithContextFunc mocks the SearchLocalGatewayRoutesWithContext method.
	SearchLocalGatewayRoutesWithContextFunc func(in1 context.Context, in2 *ec2.SearchLocalGatewayRoutesInput, in3 ...request.Option) (*ec2.SearchLocalGatewayRoutesOutput, error)

	// SearchTransitGatewayMulticastGroupsFunc mocks the SearchTransitGatewayMulticastGroups method.
	SearchTransitGatewayMulticastGroupsFunc func(in1 *ec2.SearchTransitGatewayMulticastGroupsInput) (*ec2.SearchTransitGatewayMulticastGroupsOutput, error)

	// SearchTransitGatewayMulticastGroupsRequestFunc mocks the SearchTransitGatewayMulticastGroupsRequest method.
	SearchTransitGatewayMulticastGroupsRequestFunc func(in1 *ec2.SearchTransitGatewayMulticastGroupsInput) (*request.Request, *ec2.SearchTransitGatewayMulticastGroupsOutput)

	// SearchTransitGatewayMulticastGroupsWithContextFunc mocks the SearchTransitGatewayMulticastGroupsWithContext method.
	SearchTransitGatewayMulticastGroupsWithContextFunc func(in1 context.Context, in2 *ec2.SearchTransitGatewayMulticastGroupsInput, in3 ...request.Option) (*ec2.SearchTransitGatewayMulticastGroupsOutput, error)

	// SearchTransitGatewayRoutesFunc mocks the SearchTransitGatewayRoutes method.
	SearchTransitGatewayRoutesFunc func(in1 *ec2.SearchTransitGatewayRoutesInput) (*ec2.SearchTransitGatewayRoutesOutput, error)

	// SearchTransitGatewayRoutesRequestFunc mocks the SearchTransitGatewayRoutesRequest method.
	SearchTransitGatewayRoutesRequestFunc func(in1 *ec2.SearchTransitGatewayRoutesInput) (*request.Request, *ec2.SearchTransitGatewayRoutesOutput)

	// SearchTransitGatewayRoutesWithContextFunc mocks the SearchTransitGatewayRoutesWithContext method.
	SearchTransitGatewayRoutesWithContextFunc func(in1 context.Context, in2 *ec2.SearchTransitGatewayRoutesInput, in3 ...request.Option) (*ec2.SearchTransitGatewayRoutesOutput, error)

	// SendDiagnosticInterruptFunc mocks the SendDiagnosticInterrupt method.
	SendDiagnosticInterruptFunc func(in1 *ec2.SendDiagnosticInterruptInput) (*ec2.SendDiagnosticInterruptOutput, error)

	// SendDiagnosticInterruptRequestFunc mocks the SendDiagnosticInterruptRequest method.
	SendDiagnosticInterruptRequestFunc func(in1 *ec2.SendDiagnosticInterruptInput) (*request.Request, *ec2.SendDiagnosticInterruptOutput)

	// SendDiagnosticInterruptWithContextFunc mocks the SendDiagnosticInterruptWithContext method.
	SendDiagnosticInterruptWithContextFunc func(in1 context.Context, in2 *ec2.SendDiagnosticInterruptInput, in3 ...request.Option) (*ec2.SendDiagnosticInterruptOutput, error)

	// StartInstancesFunc mocks the StartInstances method.
	StartInstancesFunc func(in1 *ec2.StartInstancesInput) (*ec2.StartInstancesOutput, error)

	// StartInstancesRequestFunc mocks the StartInstancesRequest method.
	StartInstancesRequestFunc func(in1 *ec2.StartInstancesInput) (*request.Request, *ec2.StartInstancesOutput)

	// StartInstancesWithContextFunc mocks the StartInstancesWithContext method.
	StartInstancesWithContextFunc func(in1 context.Context, in2 *ec2.StartInstancesInput, in3 ...request.Option) (*ec2.StartInstancesOutput, error)

	// StartVpcEndpointServicePrivateDnsVerificationFunc mocks the StartVpcEndpointServicePrivateDnsVerification method.
	StartVpcEndpointServicePrivateDnsVerificationFunc func(in1 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput) (*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput, error)

	// StartVpcEndpointServicePrivateDnsVerificationRequestFunc mocks the StartVpcEndpointServicePrivateDnsVerificationRequest method.
	StartVpcEndpointServicePrivateDnsVerificationRequestFunc func(in1 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput) (*request.Request, *ec2.StartVpcEndpointServicePrivateDnsVerificationOutput)

	// StartVpcEndpointServicePrivateDnsVerificationWithContextFunc mocks the StartVpcEndpointServicePrivateDnsVerificationWithContext method.
	StartVpcEndpointServicePrivateDnsVerificationWithContextFunc func(in1 context.Context, in2 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput, in3 ...request.Option) (*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput, error)

	// StopInstancesFunc mocks the StopInstances method.
	StopInstancesFunc func(in1 *ec2.StopInstancesInput) (*ec2.StopInstancesOutput, error)

	// StopInstancesRequestFunc mocks the StopInstancesRequest method.
	StopInstancesRequestFunc func(in1 *ec2.StopInstancesInput) (*request.Request, *ec2.StopInstancesOutput)

	// StopInstancesWithContextFunc mocks the StopInstancesWithContext method.
	StopInstancesWithContextFunc func(in1 context.Context, in2 *ec2.StopInstancesInput, in3 ...request.Option) (*ec2.StopInstancesOutput, error)

	// TerminateClientVpnConnectionsFunc mocks the TerminateClientVpnConnections method.
	TerminateClientVpnConnectionsFunc func(in1 *ec2.TerminateClientVpnConnectionsInput) (*ec2.TerminateClientVpnConnectionsOutput, error)

	// TerminateClientVpnConnectionsRequestFunc mocks the TerminateClientVpnConnectionsRequest method.
	TerminateClientVpnConnectionsRequestFunc func(in1 *ec2.TerminateClientVpnConnectionsInput) (*request.Request, *ec2.TerminateClientVpnConnectionsOutput)

	// TerminateClientVpnConnectionsWithContextFunc mocks the TerminateClientVpnConnectionsWithContext method.
	TerminateClientVpnConnectionsWithContextFunc func(in1 context.Context, in2 *ec2.TerminateClientVpnConnectionsInput, in3 ...request.Option) (*ec2.TerminateClientVpnConnectionsOutput, error)

	// TerminateInstancesFunc mocks the TerminateInstances method.
	TerminateInstancesFunc func(in1 *ec2.TerminateInstancesInput) (*ec2.TerminateInstancesOutput, error)

	// TerminateInstancesRequestFunc mocks the TerminateInstancesRequest method.
	TerminateInstancesRequestFunc func(in1 *ec2.TerminateInstancesInput) (*request.Request, *ec2.TerminateInstancesOutput)

	// TerminateInstancesWithContextFunc mocks the TerminateInstancesWithContext method.
	TerminateInstancesWithContextFunc func(in1 context.Context, in2 *ec2.TerminateInstancesInput, in3 ...request.Option) (*ec2.TerminateInstancesOutput, error)

	// UnassignIpv6AddressesFunc mocks the UnassignIpv6Addresses method.
	UnassignIpv6AddressesFunc func(in1 *ec2.UnassignIpv6AddressesInput) (*ec2.UnassignIpv6AddressesOutput, error)

	// UnassignIpv6AddressesRequestFunc mocks the UnassignIpv6AddressesRequest method.
	UnassignIpv6AddressesRequestFunc func(in1 *ec2.UnassignIpv6AddressesInput) (*request.Request, *ec2.UnassignIpv6AddressesOutput)

	// UnassignIpv6AddressesWithContextFunc mocks the UnassignIpv6AddressesWithContext method.
	UnassignIpv6AddressesWithContextFunc func(in1 context.Context, in2 *ec2.UnassignIpv6AddressesInput, in3 ...request.Option) (*ec2.UnassignIpv6AddressesOutput, error)

	// UnassignPrivateIpAddressesFunc mocks the UnassignPrivateIpAddresses method.
	UnassignPrivateIpAddressesFunc func(in1 *ec2.UnassignPrivateIpAddressesInput) (*ec2.UnassignPrivateIpAddressesOutput, error)

	// UnassignPrivateIpAddressesRequestFunc mocks the UnassignPrivateIpAddressesRequest method.
	UnassignPrivateIpAddressesRequestFunc func(in1 *ec2.UnassignPrivateIpAddressesInput) (*request.Request, *ec2.UnassignPrivateIpAddressesOutput)

	// UnassignPrivateIpAddressesWithContextFunc mocks the UnassignPrivateIpAddressesWithContext method.
	UnassignPrivateIpAddressesWithContextFunc func(in1 context.Context, in2 *ec2.UnassignPrivateIpAddressesInput, in3 ...request.Option) (*ec2.UnassignPrivateIpAddressesOutput, error)

	// UnmonitorInstancesFunc mocks the UnmonitorInstances method.
	UnmonitorInstancesFunc func(in1 *ec2.UnmonitorInstancesInput) (*ec2.UnmonitorInstancesOutput, error)

	// UnmonitorInstancesRequestFunc mocks the UnmonitorInstancesRequest method.
	UnmonitorInstancesRequestFunc func(in1 *ec2.UnmonitorInstancesInput) (*request.Request, *ec2.UnmonitorInstancesOutput)

	// UnmonitorInstancesWithContextFunc mocks the UnmonitorInstancesWithContext method.
	UnmonitorInstancesWithContextFunc func(in1 context.Context, in2 *ec2.UnmonitorInstancesInput, in3 ...request.Option) (*ec2.UnmonitorInstancesOutput, error)

	// UpdateSecurityGroupRuleDescriptionsEgressFunc mocks the UpdateSecurityGroupRuleDescriptionsEgress method.
	UpdateSecurityGroupRuleDescriptionsEgressFunc func(in1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error)

	// UpdateSecurityGroupRuleDescriptionsEgressRequestFunc mocks the UpdateSecurityGroupRuleDescriptionsEgressRequest method.
	UpdateSecurityGroupRuleDescriptionsEgressRequestFunc func(in1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) (*request.Request, *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput)

	// UpdateSecurityGroupRuleDescriptionsEgressWithContextFunc mocks the UpdateSecurityGroupRuleDescriptionsEgressWithContext method.
	UpdateSecurityGroupRuleDescriptionsEgressWithContextFunc func(in1 context.Context, in2 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput, in3 ...request.Option) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error)

	// UpdateSecurityGroupRuleDescriptionsIngressFunc mocks the UpdateSecurityGroupRuleDescriptionsIngress method.
	UpdateSecurityGroupRuleDescriptionsIngressFunc func(in1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error)

	// UpdateSecurityGroupRuleDescriptionsIngressRequestFunc mocks the UpdateSecurityGroupRuleDescriptionsIngressRequest method.
	UpdateSecurityGroupRuleDescriptionsIngressRequestFunc func(in1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) (*request.Request, *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput)

	// UpdateSecurityGroupRuleDescriptionsIngressWithContextFunc mocks the UpdateSecurityGroupRuleDescriptionsIngressWithContext method.
	UpdateSecurityGroupRuleDescriptionsIngressWithContextFunc func(in1 context.Context, in2 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput, in3 ...request.Option) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error)

	// WaitUntilBundleTaskCompleteFunc mocks the WaitUntilBundleTaskComplete method.
	WaitUntilBundleTaskCompleteFunc func(in1 *ec2.DescribeBundleTasksInput) error

	// WaitUntilBundleTaskCompleteWithContextFunc mocks the WaitUntilBundleTaskCompleteWithContext method.
	WaitUntilBundleTaskCompleteWithContextFunc func(in1 context.Context, in2 *ec2.DescribeBundleTasksInput, in3 ...request.WaiterOption) error

	// WaitUntilConversionTaskCancelledFunc mocks the WaitUntilConversionTaskCancelled method.
	WaitUntilConversionTaskCancelledFunc func(in1 *ec2.DescribeConversionTasksInput) error

	// WaitUntilConversionTaskCancelledWithContextFunc mocks the WaitUntilConversionTaskCancelledWithContext method.
	WaitUntilConversionTaskCancelledWithContextFunc func(in1 context.Context, in2 *ec2.DescribeConversionTasksInput, in3 ...request.WaiterOption) error

	// WaitUntilConversionTaskCompletedFunc mocks the WaitUntilConversionTaskCompleted method.
	WaitUntilConversionTaskCompletedFunc func(in1 *ec2.DescribeConversionTasksInput) error

	// WaitUntilConversionTaskCompletedWithContextFunc mocks the WaitUntilConversionTaskCompletedWithContext method.
	WaitUntilConversionTaskCompletedWithContextFunc func(in1 context.Context, in2 *ec2.DescribeConversionTasksInput, in3 ...request.WaiterOption) error

	// WaitUntilConversionTaskDeletedFunc mocks the WaitUntilConversionTaskDeleted method.
	WaitUntilConversionTaskDeletedFunc func(in1 *ec2.DescribeConversionTasksInput) error

	// WaitUntilConversionTaskDeletedWithContextFunc mocks the WaitUntilConversionTaskDeletedWithContext method.
	WaitUntilConversionTaskDeletedWithContextFunc func(in1 context.Context, in2 *ec2.DescribeConversionTasksInput, in3 ...request.WaiterOption) error

	// WaitUntilCustomerGatewayAvailableFunc mocks the WaitUntilCustomerGatewayAvailable method.
	WaitUntilCustomerGatewayAvailableFunc func(in1 *ec2.DescribeCustomerGatewaysInput) error

	// WaitUntilCustomerGatewayAvailableWithContextFunc mocks the WaitUntilCustomerGatewayAvailableWithContext method.
	WaitUntilCustomerGatewayAvailableWithContextFunc func(in1 context.Context, in2 *ec2.DescribeCustomerGatewaysInput, in3 ...request.WaiterOption) error

	// WaitUntilExportTaskCancelledFunc mocks the WaitUntilExportTaskCancelled method.
	WaitUntilExportTaskCancelledFunc func(in1 *ec2.DescribeExportTasksInput) error

	// WaitUntilExportTaskCancelledWithContextFunc mocks the WaitUntilExportTaskCancelledWithContext method.
	WaitUntilExportTaskCancelledWithContextFunc func(in1 context.Context, in2 *ec2.DescribeExportTasksInput, in3 ...request.WaiterOption) error

	// WaitUntilExportTaskCompletedFunc mocks the WaitUntilExportTaskCompleted method.
	WaitUntilExportTaskCompletedFunc func(in1 *ec2.DescribeExportTasksInput) error

	// WaitUntilExportTaskCompletedWithContextFunc mocks the WaitUntilExportTaskCompletedWithContext method.
	WaitUntilExportTaskCompletedWithContextFunc func(in1 context.Context, in2 *ec2.DescribeExportTasksInput, in3 ...request.WaiterOption) error

	// WaitUntilImageAvailableFunc mocks the WaitUntilImageAvailable method.
	WaitUntilImageAvailableFunc func(in1 *ec2.DescribeImagesInput) error

	// WaitUntilImageAvailableWithContextFunc mocks the WaitUntilImageAvailableWithContext method.
	WaitUntilImageAvailableWithContextFunc func(in1 context.Context, in2 *ec2.DescribeImagesInput, in3 ...request.WaiterOption) error

	// WaitUntilImageExistsFunc mocks the WaitUntilImageExists method.
	WaitUntilImageExistsFunc func(in1 *ec2.DescribeImagesInput) error

	// WaitUntilImageExistsWithContextFunc mocks the WaitUntilImageExistsWithContext method.
	WaitUntilImageExistsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeImagesInput, in3 ...request.WaiterOption) error

	// WaitUntilInstanceExistsFunc mocks the WaitUntilInstanceExists method.
	WaitUntilInstanceExistsFunc func(in1 *ec2.DescribeInstancesInput) error

	// WaitUntilInstanceExistsWithContextFunc mocks the WaitUntilInstanceExistsWithContext method.
	WaitUntilInstanceExistsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeInstancesInput, in3 ...request.WaiterOption) error

	// WaitUntilInstanceRunningFunc mocks the WaitUntilInstanceRunning method.
	WaitUntilInstanceRunningFunc func(in1 *ec2.DescribeInstancesInput) error

	// WaitUntilInstanceRunningWithContextFunc mocks the WaitUntilInstanceRunningWithContext method.
	WaitUntilInstanceRunningWithContextFunc func(in1 context.Context, in2 *ec2.DescribeInstancesInput, in3 ...request.WaiterOption) error

	// WaitUntilInstanceStatusOkFunc mocks the WaitUntilInstanceStatusOk method.
	WaitUntilInstanceStatusOkFunc func(in1 *ec2.DescribeInstanceStatusInput) error

	// WaitUntilInstanceStatusOkWithContextFunc mocks the WaitUntilInstanceStatusOkWithContext method.
	WaitUntilInstanceStatusOkWithContextFunc func(in1 context.Context, in2 *ec2.DescribeInstanceStatusInput, in3 ...request.WaiterOption) error

	// WaitUntilInstanceStoppedFunc mocks the WaitUntilInstanceStopped method.
	WaitUntilInstanceStoppedFunc func(in1 *ec2.DescribeInstancesInput) error

	// WaitUntilInstanceStoppedWithContextFunc mocks the WaitUntilInstanceStoppedWithContext method.
	WaitUntilInstanceStoppedWithContextFunc func(in1 context.Context, in2 *ec2.DescribeInstancesInput, in3 ...request.WaiterOption) error

	// WaitUntilInstanceTerminatedFunc mocks the WaitUntilInstanceTerminated method.
	WaitUntilInstanceTerminatedFunc func(in1 *ec2.DescribeInstancesInput) error

	// WaitUntilInstanceTerminatedWithContextFunc mocks the WaitUntilInstanceTerminatedWithContext method.
	WaitUntilInstanceTerminatedWithContextFunc func(in1 context.Context, in2 *ec2.DescribeInstancesInput, in3 ...request.WaiterOption) error

	// WaitUntilKeyPairExistsFunc mocks the WaitUntilKeyPairExists method.
	WaitUntilKeyPairExistsFunc func(in1 *ec2.DescribeKeyPairsInput) error

	// WaitUntilKeyPairExistsWithContextFunc mocks the WaitUntilKeyPairExistsWithContext method.
	WaitUntilKeyPairExistsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeKeyPairsInput, in3 ...request.WaiterOption) error

	// WaitUntilNatGatewayAvailableFunc mocks the WaitUntilNatGatewayAvailable method.
	WaitUntilNatGatewayAvailableFunc func(in1 *ec2.DescribeNatGatewaysInput) error

	// WaitUntilNatGatewayAvailableWithContextFunc mocks the WaitUntilNatGatewayAvailableWithContext method.
	WaitUntilNatGatewayAvailableWithContextFunc func(in1 context.Context, in2 *ec2.DescribeNatGatewaysInput, in3 ...request.WaiterOption) error

	// WaitUntilNetworkInterfaceAvailableFunc mocks the WaitUntilNetworkInterfaceAvailable method.
	WaitUntilNetworkInterfaceAvailableFunc func(in1 *ec2.DescribeNetworkInterfacesInput) error

	// WaitUntilNetworkInterfaceAvailableWithContextFunc mocks the WaitUntilNetworkInterfaceAvailableWithContext method.
	WaitUntilNetworkInterfaceAvailableWithContextFunc func(in1 context.Context, in2 *ec2.DescribeNetworkInterfacesInput, in3 ...request.WaiterOption) error

	// WaitUntilPasswordDataAvailableFunc mocks the WaitUntilPasswordDataAvailable method.
	WaitUntilPasswordDataAvailableFunc func(in1 *ec2.GetPasswordDataInput) error

	// WaitUntilPasswordDataAvailableWithContextFunc mocks the WaitUntilPasswordDataAvailableWithContext method.
	WaitUntilPasswordDataAvailableWithContextFunc func(in1 context.Context, in2 *ec2.GetPasswordDataInput, in3 ...request.WaiterOption) error

	// WaitUntilSecurityGroupExistsFunc mocks the WaitUntilSecurityGroupExists method.
	WaitUntilSecurityGroupExistsFunc func(in1 *ec2.DescribeSecurityGroupsInput) error

	// WaitUntilSecurityGroupExistsWithContextFunc mocks the WaitUntilSecurityGroupExistsWithContext method.
	WaitUntilSecurityGroupExistsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeSecurityGroupsInput, in3 ...request.WaiterOption) error

	// WaitUntilSnapshotCompletedFunc mocks the WaitUntilSnapshotCompleted method.
	WaitUntilSnapshotCompletedFunc func(in1 *ec2.DescribeSnapshotsInput) error

	// WaitUntilSnapshotCompletedWithContextFunc mocks the WaitUntilSnapshotCompletedWithContext method.
	WaitUntilSnapshotCompletedWithContextFunc func(in1 context.Context, in2 *ec2.DescribeSnapshotsInput, in3 ...request.WaiterOption) error

	// WaitUntilSpotInstanceRequestFulfilledFunc mocks the WaitUntilSpotInstanceRequestFulfilled method.
	WaitUntilSpotInstanceRequestFulfilledFunc func(in1 *ec2.DescribeSpotInstanceRequestsInput) error

	// WaitUntilSpotInstanceRequestFulfilledWithContextFunc mocks the WaitUntilSpotInstanceRequestFulfilledWithContext method.
	WaitUntilSpotInstanceRequestFulfilledWithContextFunc func(in1 context.Context, in2 *ec2.DescribeSpotInstanceRequestsInput, in3 ...request.WaiterOption) error

	// WaitUntilSubnetAvailableFunc mocks the WaitUntilSubnetAvailable method.
	WaitUntilSubnetAvailableFunc func(in1 *ec2.DescribeSubnetsInput) error

	// WaitUntilSubnetAvailableWithContextFunc mocks the WaitUntilSubnetAvailableWithContext method.
	WaitUntilSubnetAvailableWithContextFunc func(in1 context.Context, in2 *ec2.DescribeSubnetsInput, in3 ...request.WaiterOption) error

	// WaitUntilSystemStatusOkFunc mocks the WaitUntilSystemStatusOk method.
	WaitUntilSystemStatusOkFunc func(in1 *ec2.DescribeInstanceStatusInput) error

	// WaitUntilSystemStatusOkWithContextFunc mocks the WaitUntilSystemStatusOkWithContext method.
	WaitUntilSystemStatusOkWithContextFunc func(in1 context.Context, in2 *ec2.DescribeInstanceStatusInput, in3 ...request.WaiterOption) error

	// WaitUntilVolumeAvailableFunc mocks the WaitUntilVolumeAvailable method.
	WaitUntilVolumeAvailableFunc func(in1 *ec2.DescribeVolumesInput) error

	// WaitUntilVolumeAvailableWithContextFunc mocks the WaitUntilVolumeAvailableWithContext method.
	WaitUntilVolumeAvailableWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVolumesInput, in3 ...request.WaiterOption) error

	// WaitUntilVolumeDeletedFunc mocks the WaitUntilVolumeDeleted method.
	WaitUntilVolumeDeletedFunc func(in1 *ec2.DescribeVolumesInput) error

	// WaitUntilVolumeDeletedWithContextFunc mocks the WaitUntilVolumeDeletedWithContext method.
	WaitUntilVolumeDeletedWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVolumesInput, in3 ...request.WaiterOption) error

	// WaitUntilVolumeInUseFunc mocks the WaitUntilVolumeInUse method.
	WaitUntilVolumeInUseFunc func(in1 *ec2.DescribeVolumesInput) error

	// WaitUntilVolumeInUseWithContextFunc mocks the WaitUntilVolumeInUseWithContext method.
	WaitUntilVolumeInUseWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVolumesInput, in3 ...request.WaiterOption) error

	// WaitUntilVpcAvailableFunc mocks the WaitUntilVpcAvailable method.
	WaitUntilVpcAvailableFunc func(in1 *ec2.DescribeVpcsInput) error

	// WaitUntilVpcAvailableWithContextFunc mocks the WaitUntilVpcAvailableWithContext method.
	WaitUntilVpcAvailableWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpcsInput, in3 ...request.WaiterOption) error

	// WaitUntilVpcExistsFunc mocks the WaitUntilVpcExists method.
	WaitUntilVpcExistsFunc func(in1 *ec2.DescribeVpcsInput) error

	// WaitUntilVpcExistsWithContextFunc mocks the WaitUntilVpcExistsWithContext method.
	WaitUntilVpcExistsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpcsInput, in3 ...request.WaiterOption) error

	// WaitUntilVpcPeeringConnectionDeletedFunc mocks the WaitUntilVpcPeeringConnectionDeleted method.
	WaitUntilVpcPeeringConnectionDeletedFunc func(in1 *ec2.DescribeVpcPeeringConnectionsInput) error

	// WaitUntilVpcPeeringConnectionDeletedWithContextFunc mocks the WaitUntilVpcPeeringConnectionDeletedWithContext method.
	WaitUntilVpcPeeringConnectionDeletedWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpcPeeringConnectionsInput, in3 ...request.WaiterOption) error

	// WaitUntilVpcPeeringConnectionExistsFunc mocks the WaitUntilVpcPeeringConnectionExists method.
	WaitUntilVpcPeeringConnectionExistsFunc func(in1 *ec2.DescribeVpcPeeringConnectionsInput) error

	// WaitUntilVpcPeeringConnectionExistsWithContextFunc mocks the WaitUntilVpcPeeringConnectionExistsWithContext method.
	WaitUntilVpcPeeringConnectionExistsWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpcPeeringConnectionsInput, in3 ...request.WaiterOption) error

	// WaitUntilVpnConnectionAvailableFunc mocks the WaitUntilVpnConnectionAvailable method.
	WaitUntilVpnConnectionAvailableFunc func(in1 *ec2.DescribeVpnConnectionsInput) error

	// WaitUntilVpnConnectionAvailableWithContextFunc mocks the WaitUntilVpnConnectionAvailableWithContext method.
	WaitUntilVpnConnectionAvailableWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpnConnectionsInput, in3 ...request.WaiterOption) error

	// WaitUntilVpnConnectionDeletedFunc mocks the WaitUntilVpnConnectionDeleted method.
	WaitUntilVpnConnectionDeletedFunc func(in1 *ec2.DescribeVpnConnectionsInput) error

	// WaitUntilVpnConnectionDeletedWithContextFunc mocks the WaitUntilVpnConnectionDeletedWithContext method.
	WaitUntilVpnConnectionDeletedWithContextFunc func(in1 context.Context, in2 *ec2.DescribeVpnConnectionsInput, in3 ...request.WaiterOption) error

	// WithdrawByoipCidrFunc mocks the WithdrawByoipCidr method.
	WithdrawByoipCidrFunc func(in1 *ec2.WithdrawByoipCidrInput) (*ec2.WithdrawByoipCidrOutput, error)

	// WithdrawByoipCidrRequestFunc mocks the WithdrawByoipCidrRequest method.
	WithdrawByoipCidrRequestFunc func(in1 *ec2.WithdrawByoipCidrInput) (*request.Request, *ec2.WithdrawByoipCidrOutput)

	// WithdrawByoipCidrWithContextFunc mocks the WithdrawByoipCidrWithContext method.
	WithdrawByoipCidrWithContextFunc func(in1 context.Context, in2 *ec2.WithdrawByoipCidrInput, in3 ...request.Option) (*ec2.WithdrawByoipCidrOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// AcceptReservedInstancesExchangeQuote holds details about calls to the AcceptReservedInstancesExchangeQuote method.
		AcceptReservedInstancesExchangeQuote []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AcceptReservedInstancesExchangeQuoteInput
		}
		// AcceptReservedInstancesExchangeQuoteRequest holds details about calls to the AcceptReservedInstancesExchangeQuoteRequest method.
		AcceptReservedInstancesExchangeQuoteRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AcceptReservedInstancesExchangeQuoteInput
		}
		// AcceptReservedInstancesExchangeQuoteWithContext holds details about calls to the AcceptReservedInstancesExchangeQuoteWithContext method.
		AcceptReservedInstancesExchangeQuoteWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AcceptReservedInstancesExchangeQuoteInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AcceptTransitGatewayPeeringAttachment holds details about calls to the AcceptTransitGatewayPeeringAttachment method.
		AcceptTransitGatewayPeeringAttachment []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AcceptTransitGatewayPeeringAttachmentInput
		}
		// AcceptTransitGatewayPeeringAttachmentRequest holds details about calls to the AcceptTransitGatewayPeeringAttachmentRequest method.
		AcceptTransitGatewayPeeringAttachmentRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AcceptTransitGatewayPeeringAttachmentInput
		}
		// AcceptTransitGatewayPeeringAttachmentWithContext holds details about calls to the AcceptTransitGatewayPeeringAttachmentWithContext method.
		AcceptTransitGatewayPeeringAttachmentWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AcceptTransitGatewayPeeringAttachmentInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AcceptTransitGatewayVpcAttachment holds details about calls to the AcceptTransitGatewayVpcAttachment method.
		AcceptTransitGatewayVpcAttachment []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AcceptTransitGatewayVpcAttachmentInput
		}
		// AcceptTransitGatewayVpcAttachmentRequest holds details about calls to the AcceptTransitGatewayVpcAttachmentRequest method.
		AcceptTransitGatewayVpcAttachmentRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AcceptTransitGatewayVpcAttachmentInput
		}
		// AcceptTransitGatewayVpcAttachmentWithContext holds details about calls to the AcceptTransitGatewayVpcAttachmentWithContext method.
		AcceptTransitGatewayVpcAttachmentWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AcceptTransitGatewayVpcAttachmentInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AcceptVpcEndpointConnections holds details about calls to the AcceptVpcEndpointConnections method.
		AcceptVpcEndpointConnections []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AcceptVpcEndpointConnectionsInput
		}
		// AcceptVpcEndpointConnectionsRequest holds details about calls to the AcceptVpcEndpointConnectionsRequest method.
		AcceptVpcEndpointConnectionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AcceptVpcEndpointConnectionsInput
		}
		// AcceptVpcEndpointConnectionsWithContext holds details about calls to the AcceptVpcEndpointConnectionsWithContext method.
		AcceptVpcEndpointConnectionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AcceptVpcEndpointConnectionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AcceptVpcPeeringConnection holds details about calls to the AcceptVpcPeeringConnection method.
		AcceptVpcPeeringConnection []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AcceptVpcPeeringConnectionInput
		}
		// AcceptVpcPeeringConnectionRequest holds details about calls to the AcceptVpcPeeringConnectionRequest method.
		AcceptVpcPeeringConnectionRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AcceptVpcPeeringConnectionInput
		}
		// AcceptVpcPeeringConnectionWithContext holds details about calls to the AcceptVpcPeeringConnectionWithContext method.
		AcceptVpcPeeringConnectionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AcceptVpcPeeringConnectionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AdvertiseByoipCidr holds details about calls to the AdvertiseByoipCidr method.
		AdvertiseByoipCidr []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AdvertiseByoipCidrInput
		}
		// AdvertiseByoipCidrRequest holds details about calls to the AdvertiseByoipCidrRequest method.
		AdvertiseByoipCidrRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AdvertiseByoipCidrInput
		}
		// AdvertiseByoipCidrWithContext holds details about calls to the AdvertiseByoipCidrWithContext method.
		AdvertiseByoipCidrWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AdvertiseByoipCidrInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AllocateAddress holds details about calls to the AllocateAddress method.
		AllocateAddress []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AllocateAddressInput
		}
		// AllocateAddressRequest holds details about calls to the AllocateAddressRequest method.
		AllocateAddressRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AllocateAddressInput
		}
		// AllocateAddressWithContext holds details about calls to the AllocateAddressWithContext method.
		AllocateAddressWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AllocateAddressInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AllocateHosts holds details about calls to the AllocateHosts method.
		AllocateHosts []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AllocateHostsInput
		}
		// AllocateHostsRequest holds details about calls to the AllocateHostsRequest method.
		AllocateHostsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AllocateHostsInput
		}
		// AllocateHostsWithContext holds details about calls to the AllocateHostsWithContext method.
		AllocateHostsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AllocateHostsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ApplySecurityGroupsToClientVpnTargetNetwork holds details about calls to the ApplySecurityGroupsToClientVpnTargetNetwork method.
		ApplySecurityGroupsToClientVpnTargetNetwork []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput
		}
		// ApplySecurityGroupsToClientVpnTargetNetworkRequest holds details about calls to the ApplySecurityGroupsToClientVpnTargetNetworkRequest method.
		ApplySecurityGroupsToClientVpnTargetNetworkRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput
		}
		// ApplySecurityGroupsToClientVpnTargetNetworkWithContext holds details about calls to the ApplySecurityGroupsToClientVpnTargetNetworkWithContext method.
		ApplySecurityGroupsToClientVpnTargetNetworkWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AssignIpv6Addresses holds details about calls to the AssignIpv6Addresses method.
		AssignIpv6Addresses []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AssignIpv6AddressesInput
		}
		// AssignIpv6AddressesRequest holds details about calls to the AssignIpv6AddressesRequest method.
		AssignIpv6AddressesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AssignIpv6AddressesInput
		}
		// AssignIpv6AddressesWithContext holds details about calls to the AssignIpv6AddressesWithContext method.
		AssignIpv6AddressesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AssignIpv6AddressesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AssignPrivateIpAddresses holds details about calls to the AssignPrivateIpAddresses method.
		AssignPrivateIpAddresses []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AssignPrivateIpAddressesInput
		}
		// AssignPrivateIpAddressesRequest holds details about calls to the AssignPrivateIpAddressesRequest method.
		AssignPrivateIpAddressesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AssignPrivateIpAddressesInput
		}
		// AssignPrivateIpAddressesWithContext holds details about calls to the AssignPrivateIpAddressesWithContext method.
		AssignPrivateIpAddressesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AssignPrivateIpAddressesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AssociateAddress holds details about calls to the AssociateAddress method.
		AssociateAddress []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AssociateAddressInput
		}
		// AssociateAddressRequest holds details about calls to the AssociateAddressRequest method.
		AssociateAddressRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AssociateAddressInput
		}
		// AssociateAddressWithContext holds details about calls to the AssociateAddressWithContext method.
		AssociateAddressWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AssociateAddressInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AssociateClientVpnTargetNetwork holds details about calls to the AssociateClientVpnTargetNetwork method.
		AssociateClientVpnTargetNetwork []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AssociateClientVpnTargetNetworkInput
		}
		// AssociateClientVpnTargetNetworkRequest holds details about calls to the AssociateClientVpnTargetNetworkRequest method.
		AssociateClientVpnTargetNetworkRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AssociateClientVpnTargetNetworkInput
		}
		// AssociateClientVpnTargetNetworkWithContext holds details about calls to the AssociateClientVpnTargetNetworkWithContext method.
		AssociateClientVpnTargetNetworkWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AssociateClientVpnTargetNetworkInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AssociateDhcpOptions holds details about calls to the AssociateDhcpOptions method.
		AssociateDhcpOptions []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AssociateDhcpOptionsInput
		}
		// AssociateDhcpOptionsRequest holds details about calls to the AssociateDhcpOptionsRequest method.
		AssociateDhcpOptionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AssociateDhcpOptionsInput
		}
		// AssociateDhcpOptionsWithContext holds details about calls to the AssociateDhcpOptionsWithContext method.
		AssociateDhcpOptionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AssociateDhcpOptionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AssociateIamInstanceProfile holds details about calls to the AssociateIamInstanceProfile method.
		AssociateIamInstanceProfile []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AssociateIamInstanceProfileInput
		}
		// AssociateIamInstanceProfileRequest holds details about calls to the AssociateIamInstanceProfileRequest method.
		AssociateIamInstanceProfileRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AssociateIamInstanceProfileInput
		}
		// AssociateIamInstanceProfileWithContext holds details about calls to the AssociateIamInstanceProfileWithContext method.
		AssociateIamInstanceProfileWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AssociateIamInstanceProfileInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AssociateRouteTable holds details about calls to the AssociateRouteTable method.
		AssociateRouteTable []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AssociateRouteTableInput
		}
		// AssociateRouteTableRequest holds details about calls to the AssociateRouteTableRequest method.
		AssociateRouteTableRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AssociateRouteTableInput
		}
		// AssociateRouteTableWithContext holds details about calls to the AssociateRouteTableWithContext method.
		AssociateRouteTableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AssociateRouteTableInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AssociateSubnetCidrBlock holds details about calls to the AssociateSubnetCidrBlock method.
		AssociateSubnetCidrBlock []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AssociateSubnetCidrBlockInput
		}
		// AssociateSubnetCidrBlockRequest holds details about calls to the AssociateSubnetCidrBlockRequest method.
		AssociateSubnetCidrBlockRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AssociateSubnetCidrBlockInput
		}
		// AssociateSubnetCidrBlockWithContext holds details about calls to the AssociateSubnetCidrBlockWithContext method.
		AssociateSubnetCidrBlockWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AssociateSubnetCidrBlockInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AssociateTransitGatewayMulticastDomain holds details about calls to the AssociateTransitGatewayMulticastDomain method.
		AssociateTransitGatewayMulticastDomain []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AssociateTransitGatewayMulticastDomainInput
		}
		// AssociateTransitGatewayMulticastDomainRequest holds details about calls to the AssociateTransitGatewayMulticastDomainRequest method.
		AssociateTransitGatewayMulticastDomainRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AssociateTransitGatewayMulticastDomainInput
		}
		// AssociateTransitGatewayMulticastDomainWithContext holds details about calls to the AssociateTransitGatewayMulticastDomainWithContext method.
		AssociateTransitGatewayMulticastDomainWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AssociateTransitGatewayMulticastDomainInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AssociateTransitGatewayRouteTable holds details about calls to the AssociateTransitGatewayRouteTable method.
		AssociateTransitGatewayRouteTable []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AssociateTransitGatewayRouteTableInput
		}
		// AssociateTransitGatewayRouteTableRequest holds details about calls to the AssociateTransitGatewayRouteTableRequest method.
		AssociateTransitGatewayRouteTableRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AssociateTransitGatewayRouteTableInput
		}
		// AssociateTransitGatewayRouteTableWithContext holds details about calls to the AssociateTransitGatewayRouteTableWithContext method.
		AssociateTransitGatewayRouteTableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AssociateTransitGatewayRouteTableInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AssociateVpcCidrBlock holds details about calls to the AssociateVpcCidrBlock method.
		AssociateVpcCidrBlock []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AssociateVpcCidrBlockInput
		}
		// AssociateVpcCidrBlockRequest holds details about calls to the AssociateVpcCidrBlockRequest method.
		AssociateVpcCidrBlockRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AssociateVpcCidrBlockInput
		}
		// AssociateVpcCidrBlockWithContext holds details about calls to the AssociateVpcCidrBlockWithContext method.
		AssociateVpcCidrBlockWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AssociateVpcCidrBlockInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AttachClassicLinkVpc holds details about calls to the AttachClassicLinkVpc method.
		AttachClassicLinkVpc []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AttachClassicLinkVpcInput
		}
		// AttachClassicLinkVpcRequest holds details about calls to the AttachClassicLinkVpcRequest method.
		AttachClassicLinkVpcRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AttachClassicLinkVpcInput
		}
		// AttachClassicLinkVpcWithContext holds details about calls to the AttachClassicLinkVpcWithContext method.
		AttachClassicLinkVpcWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AttachClassicLinkVpcInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AttachInternetGateway holds details about calls to the AttachInternetGateway method.
		AttachInternetGateway []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AttachInternetGatewayInput
		}
		// AttachInternetGatewayRequest holds details about calls to the AttachInternetGatewayRequest method.
		AttachInternetGatewayRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AttachInternetGatewayInput
		}
		// AttachInternetGatewayWithContext holds details about calls to the AttachInternetGatewayWithContext method.
		AttachInternetGatewayWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AttachInternetGatewayInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AttachNetworkInterface holds details about calls to the AttachNetworkInterface method.
		AttachNetworkInterface []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AttachNetworkInterfaceInput
		}
		// AttachNetworkInterfaceRequest holds details about calls to the AttachNetworkInterfaceRequest method.
		AttachNetworkInterfaceRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AttachNetworkInterfaceInput
		}
		// AttachNetworkInterfaceWithContext holds details about calls to the AttachNetworkInterfaceWithContext method.
		AttachNetworkInterfaceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AttachNetworkInterfaceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AttachVolume holds details about calls to the AttachVolume method.
		AttachVolume []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AttachVolumeInput
		}
		// AttachVolumeRequest holds details about calls to the AttachVolumeRequest method.
		AttachVolumeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AttachVolumeInput
		}
		// AttachVolumeWithContext holds details about calls to the AttachVolumeWithContext method.
		AttachVolumeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AttachVolumeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AttachVpnGateway holds details about calls to the AttachVpnGateway method.
		AttachVpnGateway []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AttachVpnGatewayInput
		}
		// AttachVpnGatewayRequest holds details about calls to the AttachVpnGatewayRequest method.
		AttachVpnGatewayRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AttachVpnGatewayInput
		}
		// AttachVpnGatewayWithContext holds details about calls to the AttachVpnGatewayWithContext method.
		AttachVpnGatewayWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AttachVpnGatewayInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AuthorizeClientVpnIngress holds details about calls to the AuthorizeClientVpnIngress method.
		AuthorizeClientVpnIngress []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AuthorizeClientVpnIngressInput
		}
		// AuthorizeClientVpnIngressRequest holds details about calls to the AuthorizeClientVpnIngressRequest method.
		AuthorizeClientVpnIngressRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AuthorizeClientVpnIngressInput
		}
		// AuthorizeClientVpnIngressWithContext holds details about calls to the AuthorizeClientVpnIngressWithContext method.
		AuthorizeClientVpnIngressWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AuthorizeClientVpnIngressInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AuthorizeSecurityGroupEgress holds details about calls to the AuthorizeSecurityGroupEgress method.
		AuthorizeSecurityGroupEgress []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AuthorizeSecurityGroupEgressInput
		}
		// AuthorizeSecurityGroupEgressRequest holds details about calls to the AuthorizeSecurityGroupEgressRequest method.
		AuthorizeSecurityGroupEgressRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AuthorizeSecurityGroupEgressInput
		}
		// AuthorizeSecurityGroupEgressWithContext holds details about calls to the AuthorizeSecurityGroupEgressWithContext method.
		AuthorizeSecurityGroupEgressWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AuthorizeSecurityGroupEgressInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AuthorizeSecurityGroupIngress holds details about calls to the AuthorizeSecurityGroupIngress method.
		AuthorizeSecurityGroupIngress []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AuthorizeSecurityGroupIngressInput
		}
		// AuthorizeSecurityGroupIngressRequest holds details about calls to the AuthorizeSecurityGroupIngressRequest method.
		AuthorizeSecurityGroupIngressRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.AuthorizeSecurityGroupIngressInput
		}
		// AuthorizeSecurityGroupIngressWithContext holds details about calls to the AuthorizeSecurityGroupIngressWithContext method.
		AuthorizeSecurityGroupIngressWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.AuthorizeSecurityGroupIngressInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// BundleInstance holds details about calls to the BundleInstance method.
		BundleInstance []struct {
			// In1 is the in1 argument value.
			In1 *ec2.BundleInstanceInput
		}
		// BundleInstanceRequest holds details about calls to the BundleInstanceRequest method.
		BundleInstanceRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.BundleInstanceInput
		}
		// BundleInstanceWithContext holds details about calls to the BundleInstanceWithContext method.
		BundleInstanceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.BundleInstanceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CancelBundleTask holds details about calls to the CancelBundleTask method.
		CancelBundleTask []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CancelBundleTaskInput
		}
		// CancelBundleTaskRequest holds details about calls to the CancelBundleTaskRequest method.
		CancelBundleTaskRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CancelBundleTaskInput
		}
		// CancelBundleTaskWithContext holds details about calls to the CancelBundleTaskWithContext method.
		CancelBundleTaskWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CancelBundleTaskInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CancelCapacityReservation holds details about calls to the CancelCapacityReservation method.
		CancelCapacityReservation []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CancelCapacityReservationInput
		}
		// CancelCapacityReservationRequest holds details about calls to the CancelCapacityReservationRequest method.
		CancelCapacityReservationRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CancelCapacityReservationInput
		}
		// CancelCapacityReservationWithContext holds details about calls to the CancelCapacityReservationWithContext method.
		CancelCapacityReservationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CancelCapacityReservationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CancelConversionTask holds details about calls to the CancelConversionTask method.
		CancelConversionTask []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CancelConversionTaskInput
		}
		// CancelConversionTaskRequest holds details about calls to the CancelConversionTaskRequest method.
		CancelConversionTaskRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CancelConversionTaskInput
		}
		// CancelConversionTaskWithContext holds details about calls to the CancelConversionTaskWithContext method.
		CancelConversionTaskWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CancelConversionTaskInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CancelExportTask holds details about calls to the CancelExportTask method.
		CancelExportTask []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CancelExportTaskInput
		}
		// CancelExportTaskRequest holds details about calls to the CancelExportTaskRequest method.
		CancelExportTaskRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CancelExportTaskInput
		}
		// CancelExportTaskWithContext holds details about calls to the CancelExportTaskWithContext method.
		CancelExportTaskWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CancelExportTaskInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CancelImportTask holds details about calls to the CancelImportTask method.
		CancelImportTask []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CancelImportTaskInput
		}
		// CancelImportTaskRequest holds details about calls to the CancelImportTaskRequest method.
		CancelImportTaskRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CancelImportTaskInput
		}
		// CancelImportTaskWithContext holds details about calls to the CancelImportTaskWithContext method.
		CancelImportTaskWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CancelImportTaskInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CancelReservedInstancesListing holds details about calls to the CancelReservedInstancesListing method.
		CancelReservedInstancesListing []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CancelReservedInstancesListingInput
		}
		// CancelReservedInstancesListingRequest holds details about calls to the CancelReservedInstancesListingRequest method.
		CancelReservedInstancesListingRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CancelReservedInstancesListingInput
		}
		// CancelReservedInstancesListingWithContext holds details about calls to the CancelReservedInstancesListingWithContext method.
		CancelReservedInstancesListingWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CancelReservedInstancesListingInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CancelSpotFleetRequests holds details about calls to the CancelSpotFleetRequests method.
		CancelSpotFleetRequests []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CancelSpotFleetRequestsInput
		}
		// CancelSpotFleetRequestsRequest holds details about calls to the CancelSpotFleetRequestsRequest method.
		CancelSpotFleetRequestsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CancelSpotFleetRequestsInput
		}
		// CancelSpotFleetRequestsWithContext holds details about calls to the CancelSpotFleetRequestsWithContext method.
		CancelSpotFleetRequestsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CancelSpotFleetRequestsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CancelSpotInstanceRequests holds details about calls to the CancelSpotInstanceRequests method.
		CancelSpotInstanceRequests []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CancelSpotInstanceRequestsInput
		}
		// CancelSpotInstanceRequestsRequest holds details about calls to the CancelSpotInstanceRequestsRequest method.
		CancelSpotInstanceRequestsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CancelSpotInstanceRequestsInput
		}
		// CancelSpotInstanceRequestsWithContext holds details about calls to the CancelSpotInstanceRequestsWithContext method.
		CancelSpotInstanceRequestsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CancelSpotInstanceRequestsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ConfirmProductInstance holds details about calls to the ConfirmProductInstance method.
		ConfirmProductInstance []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ConfirmProductInstanceInput
		}
		// ConfirmProductInstanceRequest holds details about calls to the ConfirmProductInstanceRequest method.
		ConfirmProductInstanceRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ConfirmProductInstanceInput
		}
		// ConfirmProductInstanceWithContext holds details about calls to the ConfirmProductInstanceWithContext method.
		ConfirmProductInstanceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ConfirmProductInstanceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CopyFpgaImage holds details about calls to the CopyFpgaImage method.
		CopyFpgaImage []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CopyFpgaImageInput
		}
		// CopyFpgaImageRequest holds details about calls to the CopyFpgaImageRequest method.
		CopyFpgaImageRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CopyFpgaImageInput
		}
		// CopyFpgaImageWithContext holds details about calls to the CopyFpgaImageWithContext method.
		CopyFpgaImageWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CopyFpgaImageInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CopyImage holds details about calls to the CopyImage method.
		CopyImage []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CopyImageInput
		}
		// CopyImageRequest holds details about calls to the CopyImageRequest method.
		CopyImageRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CopyImageInput
		}
		// CopyImageWithContext holds details about calls to the CopyImageWithContext method.
		CopyImageWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CopyImageInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CopySnapshot holds details about calls to the CopySnapshot method.
		CopySnapshot []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CopySnapshotInput
		}
		// CopySnapshotRequest holds details about calls to the CopySnapshotRequest method.
		CopySnapshotRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CopySnapshotInput
		}
		// CopySnapshotWithContext holds details about calls to the CopySnapshotWithContext method.
		CopySnapshotWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CopySnapshotInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateCapacityReservation holds details about calls to the CreateCapacityReservation method.
		CreateCapacityReservation []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateCapacityReservationInput
		}
		// CreateCapacityReservationRequest holds details about calls to the CreateCapacityReservationRequest method.
		CreateCapacityReservationRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateCapacityReservationInput
		}
		// CreateCapacityReservationWithContext holds details about calls to the CreateCapacityReservationWithContext method.
		CreateCapacityReservationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateCapacityReservationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateClientVpnEndpoint holds details about calls to the CreateClientVpnEndpoint method.
		CreateClientVpnEndpoint []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateClientVpnEndpointInput
		}
		// CreateClientVpnEndpointRequest holds details about calls to the CreateClientVpnEndpointRequest method.
		CreateClientVpnEndpointRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateClientVpnEndpointInput
		}
		// CreateClientVpnEndpointWithContext holds details about calls to the CreateClientVpnEndpointWithContext method.
		CreateClientVpnEndpointWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateClientVpnEndpointInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateClientVpnRoute holds details about calls to the CreateClientVpnRoute method.
		CreateClientVpnRoute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateClientVpnRouteInput
		}
		// CreateClientVpnRouteRequest holds details about calls to the CreateClientVpnRouteRequest method.
		CreateClientVpnRouteRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateClientVpnRouteInput
		}
		// CreateClientVpnRouteWithContext holds details about calls to the CreateClientVpnRouteWithContext method.
		CreateClientVpnRouteWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateClientVpnRouteInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateCustomerGateway holds details about calls to the CreateCustomerGateway method.
		CreateCustomerGateway []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateCustomerGatewayInput
		}
		// CreateCustomerGatewayRequest holds details about calls to the CreateCustomerGatewayRequest method.
		CreateCustomerGatewayRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateCustomerGatewayInput
		}
		// CreateCustomerGatewayWithContext holds details about calls to the CreateCustomerGatewayWithContext method.
		CreateCustomerGatewayWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateCustomerGatewayInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateDefaultSubnet holds details about calls to the CreateDefaultSubnet method.
		CreateDefaultSubnet []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateDefaultSubnetInput
		}
		// CreateDefaultSubnetRequest holds details about calls to the CreateDefaultSubnetRequest method.
		CreateDefaultSubnetRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateDefaultSubnetInput
		}
		// CreateDefaultSubnetWithContext holds details about calls to the CreateDefaultSubnetWithContext method.
		CreateDefaultSubnetWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateDefaultSubnetInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateDefaultVpc holds details about calls to the CreateDefaultVpc method.
		CreateDefaultVpc []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateDefaultVpcInput
		}
		// CreateDefaultVpcRequest holds details about calls to the CreateDefaultVpcRequest method.
		CreateDefaultVpcRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateDefaultVpcInput
		}
		// CreateDefaultVpcWithContext holds details about calls to the CreateDefaultVpcWithContext method.
		CreateDefaultVpcWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateDefaultVpcInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateDhcpOptions holds details about calls to the CreateDhcpOptions method.
		CreateDhcpOptions []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateDhcpOptionsInput
		}
		// CreateDhcpOptionsRequest holds details about calls to the CreateDhcpOptionsRequest method.
		CreateDhcpOptionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateDhcpOptionsInput
		}
		// CreateDhcpOptionsWithContext holds details about calls to the CreateDhcpOptionsWithContext method.
		CreateDhcpOptionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateDhcpOptionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateEgressOnlyInternetGateway holds details about calls to the CreateEgressOnlyInternetGateway method.
		CreateEgressOnlyInternetGateway []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateEgressOnlyInternetGatewayInput
		}
		// CreateEgressOnlyInternetGatewayRequest holds details about calls to the CreateEgressOnlyInternetGatewayRequest method.
		CreateEgressOnlyInternetGatewayRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateEgressOnlyInternetGatewayInput
		}
		// CreateEgressOnlyInternetGatewayWithContext holds details about calls to the CreateEgressOnlyInternetGatewayWithContext method.
		CreateEgressOnlyInternetGatewayWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateEgressOnlyInternetGatewayInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateFleet holds details about calls to the CreateFleet method.
		CreateFleet []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateFleetInput
		}
		// CreateFleetRequest holds details about calls to the CreateFleetRequest method.
		CreateFleetRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateFleetInput
		}
		// CreateFleetWithContext holds details about calls to the CreateFleetWithContext method.
		CreateFleetWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateFleetInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateFlowLogs holds details about calls to the CreateFlowLogs method.
		CreateFlowLogs []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateFlowLogsInput
		}
		// CreateFlowLogsRequest holds details about calls to the CreateFlowLogsRequest method.
		CreateFlowLogsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateFlowLogsInput
		}
		// CreateFlowLogsWithContext holds details about calls to the CreateFlowLogsWithContext method.
		CreateFlowLogsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateFlowLogsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateFpgaImage holds details about calls to the CreateFpgaImage method.
		CreateFpgaImage []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateFpgaImageInput
		}
		// CreateFpgaImageRequest holds details about calls to the CreateFpgaImageRequest method.
		CreateFpgaImageRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateFpgaImageInput
		}
		// CreateFpgaImageWithContext holds details about calls to the CreateFpgaImageWithContext method.
		CreateFpgaImageWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateFpgaImageInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateImage holds details about calls to the CreateImage method.
		CreateImage []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateImageInput
		}
		// CreateImageRequest holds details about calls to the CreateImageRequest method.
		CreateImageRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateImageInput
		}
		// CreateImageWithContext holds details about calls to the CreateImageWithContext method.
		CreateImageWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateImageInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateInstanceExportTask holds details about calls to the CreateInstanceExportTask method.
		CreateInstanceExportTask []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateInstanceExportTaskInput
		}
		// CreateInstanceExportTaskRequest holds details about calls to the CreateInstanceExportTaskRequest method.
		CreateInstanceExportTaskRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateInstanceExportTaskInput
		}
		// CreateInstanceExportTaskWithContext holds details about calls to the CreateInstanceExportTaskWithContext method.
		CreateInstanceExportTaskWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateInstanceExportTaskInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateInternetGateway holds details about calls to the CreateInternetGateway method.
		CreateInternetGateway []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateInternetGatewayInput
		}
		// CreateInternetGatewayRequest holds details about calls to the CreateInternetGatewayRequest method.
		CreateInternetGatewayRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateInternetGatewayInput
		}
		// CreateInternetGatewayWithContext holds details about calls to the CreateInternetGatewayWithContext method.
		CreateInternetGatewayWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateInternetGatewayInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateKeyPair holds details about calls to the CreateKeyPair method.
		CreateKeyPair []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateKeyPairInput
		}
		// CreateKeyPairRequest holds details about calls to the CreateKeyPairRequest method.
		CreateKeyPairRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateKeyPairInput
		}
		// CreateKeyPairWithContext holds details about calls to the CreateKeyPairWithContext method.
		CreateKeyPairWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateKeyPairInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateLaunchTemplate holds details about calls to the CreateLaunchTemplate method.
		CreateLaunchTemplate []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateLaunchTemplateInput
		}
		// CreateLaunchTemplateRequest holds details about calls to the CreateLaunchTemplateRequest method.
		CreateLaunchTemplateRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateLaunchTemplateInput
		}
		// CreateLaunchTemplateVersion holds details about calls to the CreateLaunchTemplateVersion method.
		CreateLaunchTemplateVersion []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateLaunchTemplateVersionInput
		}
		// CreateLaunchTemplateVersionRequest holds details about calls to the CreateLaunchTemplateVersionRequest method.
		CreateLaunchTemplateVersionRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateLaunchTemplateVersionInput
		}
		// CreateLaunchTemplateVersionWithContext holds details about calls to the CreateLaunchTemplateVersionWithContext method.
		CreateLaunchTemplateVersionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateLaunchTemplateVersionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateLaunchTemplateWithContext holds details about calls to the CreateLaunchTemplateWithContext method.
		CreateLaunchTemplateWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateLaunchTemplateInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateLocalGatewayRoute holds details about calls to the CreateLocalGatewayRoute method.
		CreateLocalGatewayRoute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateLocalGatewayRouteInput
		}
		// CreateLocalGatewayRouteRequest holds details about calls to the CreateLocalGatewayRouteRequest method.
		CreateLocalGatewayRouteRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateLocalGatewayRouteInput
		}
		// CreateLocalGatewayRouteTableVpcAssociation holds details about calls to the CreateLocalGatewayRouteTableVpcAssociation method.
		CreateLocalGatewayRouteTableVpcAssociation []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput
		}
		// CreateLocalGatewayRouteTableVpcAssociationRequest holds details about calls to the CreateLocalGatewayRouteTableVpcAssociationRequest method.
		CreateLocalGatewayRouteTableVpcAssociationRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput
		}
		// CreateLocalGatewayRouteTableVpcAssociationWithContext holds details about calls to the CreateLocalGatewayRouteTableVpcAssociationWithContext method.
		CreateLocalGatewayRouteTableVpcAssociationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateLocalGatewayRouteWithContext holds details about calls to the CreateLocalGatewayRouteWithContext method.
		CreateLocalGatewayRouteWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateLocalGatewayRouteInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateNatGateway holds details about calls to the CreateNatGateway method.
		CreateNatGateway []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateNatGatewayInput
		}
		// CreateNatGatewayRequest holds details about calls to the CreateNatGatewayRequest method.
		CreateNatGatewayRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateNatGatewayInput
		}
		// CreateNatGatewayWithContext holds details about calls to the CreateNatGatewayWithContext method.
		CreateNatGatewayWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateNatGatewayInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateNetworkAcl holds details about calls to the CreateNetworkAcl method.
		CreateNetworkAcl []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateNetworkAclInput
		}
		// CreateNetworkAclEntry holds details about calls to the CreateNetworkAclEntry method.
		CreateNetworkAclEntry []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateNetworkAclEntryInput
		}
		// CreateNetworkAclEntryRequest holds details about calls to the CreateNetworkAclEntryRequest method.
		CreateNetworkAclEntryRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateNetworkAclEntryInput
		}
		// CreateNetworkAclEntryWithContext holds details about calls to the CreateNetworkAclEntryWithContext method.
		CreateNetworkAclEntryWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateNetworkAclEntryInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateNetworkAclRequest holds details about calls to the CreateNetworkAclRequest method.
		CreateNetworkAclRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateNetworkAclInput
		}
		// CreateNetworkAclWithContext holds details about calls to the CreateNetworkAclWithContext method.
		CreateNetworkAclWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateNetworkAclInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateNetworkInterface holds details about calls to the CreateNetworkInterface method.
		CreateNetworkInterface []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateNetworkInterfaceInput
		}
		// CreateNetworkInterfacePermission holds details about calls to the CreateNetworkInterfacePermission method.
		CreateNetworkInterfacePermission []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateNetworkInterfacePermissionInput
		}
		// CreateNetworkInterfacePermissionRequest holds details about calls to the CreateNetworkInterfacePermissionRequest method.
		CreateNetworkInterfacePermissionRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateNetworkInterfacePermissionInput
		}
		// CreateNetworkInterfacePermissionWithContext holds details about calls to the CreateNetworkInterfacePermissionWithContext method.
		CreateNetworkInterfacePermissionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateNetworkInterfacePermissionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateNetworkInterfaceRequest holds details about calls to the CreateNetworkInterfaceRequest method.
		CreateNetworkInterfaceRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateNetworkInterfaceInput
		}
		// CreateNetworkInterfaceWithContext holds details about calls to the CreateNetworkInterfaceWithContext method.
		CreateNetworkInterfaceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateNetworkInterfaceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreatePlacementGroup holds details about calls to the CreatePlacementGroup method.
		CreatePlacementGroup []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreatePlacementGroupInput
		}
		// CreatePlacementGroupRequest holds details about calls to the CreatePlacementGroupRequest method.
		CreatePlacementGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreatePlacementGroupInput
		}
		// CreatePlacementGroupWithContext holds details about calls to the CreatePlacementGroupWithContext method.
		CreatePlacementGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreatePlacementGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateReservedInstancesListing holds details about calls to the CreateReservedInstancesListing method.
		CreateReservedInstancesListing []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateReservedInstancesListingInput
		}
		// CreateReservedInstancesListingRequest holds details about calls to the CreateReservedInstancesListingRequest method.
		CreateReservedInstancesListingRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateReservedInstancesListingInput
		}
		// CreateReservedInstancesListingWithContext holds details about calls to the CreateReservedInstancesListingWithContext method.
		CreateReservedInstancesListingWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateReservedInstancesListingInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateRoute holds details about calls to the CreateRoute method.
		CreateRoute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateRouteInput
		}
		// CreateRouteRequest holds details about calls to the CreateRouteRequest method.
		CreateRouteRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateRouteInput
		}
		// CreateRouteTable holds details about calls to the CreateRouteTable method.
		CreateRouteTable []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateRouteTableInput
		}
		// CreateRouteTableRequest holds details about calls to the CreateRouteTableRequest method.
		CreateRouteTableRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateRouteTableInput
		}
		// CreateRouteTableWithContext holds details about calls to the CreateRouteTableWithContext method.
		CreateRouteTableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateRouteTableInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateRouteWithContext holds details about calls to the CreateRouteWithContext method.
		CreateRouteWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateRouteInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateSecurityGroup holds details about calls to the CreateSecurityGroup method.
		CreateSecurityGroup []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateSecurityGroupInput
		}
		// CreateSecurityGroupRequest holds details about calls to the CreateSecurityGroupRequest method.
		CreateSecurityGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateSecurityGroupInput
		}
		// CreateSecurityGroupWithContext holds details about calls to the CreateSecurityGroupWithContext method.
		CreateSecurityGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateSecurityGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateSnapshot holds details about calls to the CreateSnapshot method.
		CreateSnapshot []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateSnapshotInput
		}
		// CreateSnapshotRequest holds details about calls to the CreateSnapshotRequest method.
		CreateSnapshotRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateSnapshotInput
		}
		// CreateSnapshotWithContext holds details about calls to the CreateSnapshotWithContext method.
		CreateSnapshotWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateSnapshotInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateSnapshots holds details about calls to the CreateSnapshots method.
		CreateSnapshots []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateSnapshotsInput
		}
		// CreateSnapshotsRequest holds details about calls to the CreateSnapshotsRequest method.
		CreateSnapshotsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateSnapshotsInput
		}
		// CreateSnapshotsWithContext holds details about calls to the CreateSnapshotsWithContext method.
		CreateSnapshotsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateSnapshotsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateSpotDatafeedSubscription holds details about calls to the CreateSpotDatafeedSubscription method.
		CreateSpotDatafeedSubscription []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateSpotDatafeedSubscriptionInput
		}
		// CreateSpotDatafeedSubscriptionRequest holds details about calls to the CreateSpotDatafeedSubscriptionRequest method.
		CreateSpotDatafeedSubscriptionRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateSpotDatafeedSubscriptionInput
		}
		// CreateSpotDatafeedSubscriptionWithContext holds details about calls to the CreateSpotDatafeedSubscriptionWithContext method.
		CreateSpotDatafeedSubscriptionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateSpotDatafeedSubscriptionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateSubnet holds details about calls to the CreateSubnet method.
		CreateSubnet []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateSubnetInput
		}
		// CreateSubnetRequest holds details about calls to the CreateSubnetRequest method.
		CreateSubnetRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateSubnetInput
		}
		// CreateSubnetWithContext holds details about calls to the CreateSubnetWithContext method.
		CreateSubnetWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateSubnetInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateTags holds details about calls to the CreateTags method.
		CreateTags []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateTagsInput
		}
		// CreateTagsRequest holds details about calls to the CreateTagsRequest method.
		CreateTagsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateTagsInput
		}
		// CreateTagsWithContext holds details about calls to the CreateTagsWithContext method.
		CreateTagsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateTagsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateTrafficMirrorFilter holds details about calls to the CreateTrafficMirrorFilter method.
		CreateTrafficMirrorFilter []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateTrafficMirrorFilterInput
		}
		// CreateTrafficMirrorFilterRequest holds details about calls to the CreateTrafficMirrorFilterRequest method.
		CreateTrafficMirrorFilterRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateTrafficMirrorFilterInput
		}
		// CreateTrafficMirrorFilterRule holds details about calls to the CreateTrafficMirrorFilterRule method.
		CreateTrafficMirrorFilterRule []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateTrafficMirrorFilterRuleInput
		}
		// CreateTrafficMirrorFilterRuleRequest holds details about calls to the CreateTrafficMirrorFilterRuleRequest method.
		CreateTrafficMirrorFilterRuleRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateTrafficMirrorFilterRuleInput
		}
		// CreateTrafficMirrorFilterRuleWithContext holds details about calls to the CreateTrafficMirrorFilterRuleWithContext method.
		CreateTrafficMirrorFilterRuleWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateTrafficMirrorFilterRuleInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateTrafficMirrorFilterWithContext holds details about calls to the CreateTrafficMirrorFilterWithContext method.
		CreateTrafficMirrorFilterWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateTrafficMirrorFilterInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateTrafficMirrorSession holds details about calls to the CreateTrafficMirrorSession method.
		CreateTrafficMirrorSession []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateTrafficMirrorSessionInput
		}
		// CreateTrafficMirrorSessionRequest holds details about calls to the CreateTrafficMirrorSessionRequest method.
		CreateTrafficMirrorSessionRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateTrafficMirrorSessionInput
		}
		// CreateTrafficMirrorSessionWithContext holds details about calls to the CreateTrafficMirrorSessionWithContext method.
		CreateTrafficMirrorSessionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateTrafficMirrorSessionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateTrafficMirrorTarget holds details about calls to the CreateTrafficMirrorTarget method.
		CreateTrafficMirrorTarget []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateTrafficMirrorTargetInput
		}
		// CreateTrafficMirrorTargetRequest holds details about calls to the CreateTrafficMirrorTargetRequest method.
		CreateTrafficMirrorTargetRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateTrafficMirrorTargetInput
		}
		// CreateTrafficMirrorTargetWithContext holds details about calls to the CreateTrafficMirrorTargetWithContext method.
		CreateTrafficMirrorTargetWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateTrafficMirrorTargetInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateTransitGateway holds details about calls to the CreateTransitGateway method.
		CreateTransitGateway []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateTransitGatewayInput
		}
		// CreateTransitGatewayMulticastDomain holds details about calls to the CreateTransitGatewayMulticastDomain method.
		CreateTransitGatewayMulticastDomain []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateTransitGatewayMulticastDomainInput
		}
		// CreateTransitGatewayMulticastDomainRequest holds details about calls to the CreateTransitGatewayMulticastDomainRequest method.
		CreateTransitGatewayMulticastDomainRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateTransitGatewayMulticastDomainInput
		}
		// CreateTransitGatewayMulticastDomainWithContext holds details about calls to the CreateTransitGatewayMulticastDomainWithContext method.
		CreateTransitGatewayMulticastDomainWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateTransitGatewayMulticastDomainInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateTransitGatewayPeeringAttachment holds details about calls to the CreateTransitGatewayPeeringAttachment method.
		CreateTransitGatewayPeeringAttachment []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateTransitGatewayPeeringAttachmentInput
		}
		// CreateTransitGatewayPeeringAttachmentRequest holds details about calls to the CreateTransitGatewayPeeringAttachmentRequest method.
		CreateTransitGatewayPeeringAttachmentRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateTransitGatewayPeeringAttachmentInput
		}
		// CreateTransitGatewayPeeringAttachmentWithContext holds details about calls to the CreateTransitGatewayPeeringAttachmentWithContext method.
		CreateTransitGatewayPeeringAttachmentWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateTransitGatewayPeeringAttachmentInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateTransitGatewayRequest holds details about calls to the CreateTransitGatewayRequest method.
		CreateTransitGatewayRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateTransitGatewayInput
		}
		// CreateTransitGatewayRoute holds details about calls to the CreateTransitGatewayRoute method.
		CreateTransitGatewayRoute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateTransitGatewayRouteInput
		}
		// CreateTransitGatewayRouteRequest holds details about calls to the CreateTransitGatewayRouteRequest method.
		CreateTransitGatewayRouteRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateTransitGatewayRouteInput
		}
		// CreateTransitGatewayRouteTable holds details about calls to the CreateTransitGatewayRouteTable method.
		CreateTransitGatewayRouteTable []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateTransitGatewayRouteTableInput
		}
		// CreateTransitGatewayRouteTableRequest holds details about calls to the CreateTransitGatewayRouteTableRequest method.
		CreateTransitGatewayRouteTableRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateTransitGatewayRouteTableInput
		}
		// CreateTransitGatewayRouteTableWithContext holds details about calls to the CreateTransitGatewayRouteTableWithContext method.
		CreateTransitGatewayRouteTableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateTransitGatewayRouteTableInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateTransitGatewayRouteWithContext holds details about calls to the CreateTransitGatewayRouteWithContext method.
		CreateTransitGatewayRouteWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateTransitGatewayRouteInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateTransitGatewayVpcAttachment holds details about calls to the CreateTransitGatewayVpcAttachment method.
		CreateTransitGatewayVpcAttachment []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateTransitGatewayVpcAttachmentInput
		}
		// CreateTransitGatewayVpcAttachmentRequest holds details about calls to the CreateTransitGatewayVpcAttachmentRequest method.
		CreateTransitGatewayVpcAttachmentRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateTransitGatewayVpcAttachmentInput
		}
		// CreateTransitGatewayVpcAttachmentWithContext holds details about calls to the CreateTransitGatewayVpcAttachmentWithContext method.
		CreateTransitGatewayVpcAttachmentWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateTransitGatewayVpcAttachmentInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateTransitGatewayWithContext holds details about calls to the CreateTransitGatewayWithContext method.
		CreateTransitGatewayWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateTransitGatewayInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateVolume holds details about calls to the CreateVolume method.
		CreateVolume []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateVolumeInput
		}
		// CreateVolumeRequest holds details about calls to the CreateVolumeRequest method.
		CreateVolumeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateVolumeInput
		}
		// CreateVolumeWithContext holds details about calls to the CreateVolumeWithContext method.
		CreateVolumeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateVolumeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateVpc holds details about calls to the CreateVpc method.
		CreateVpc []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateVpcInput
		}
		// CreateVpcEndpoint holds details about calls to the CreateVpcEndpoint method.
		CreateVpcEndpoint []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateVpcEndpointInput
		}
		// CreateVpcEndpointConnectionNotification holds details about calls to the CreateVpcEndpointConnectionNotification method.
		CreateVpcEndpointConnectionNotification []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateVpcEndpointConnectionNotificationInput
		}
		// CreateVpcEndpointConnectionNotificationRequest holds details about calls to the CreateVpcEndpointConnectionNotificationRequest method.
		CreateVpcEndpointConnectionNotificationRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateVpcEndpointConnectionNotificationInput
		}
		// CreateVpcEndpointConnectionNotificationWithContext holds details about calls to the CreateVpcEndpointConnectionNotificationWithContext method.
		CreateVpcEndpointConnectionNotificationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateVpcEndpointConnectionNotificationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateVpcEndpointRequest holds details about calls to the CreateVpcEndpointRequest method.
		CreateVpcEndpointRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateVpcEndpointInput
		}
		// CreateVpcEndpointServiceConfiguration holds details about calls to the CreateVpcEndpointServiceConfiguration method.
		CreateVpcEndpointServiceConfiguration []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateVpcEndpointServiceConfigurationInput
		}
		// CreateVpcEndpointServiceConfigurationRequest holds details about calls to the CreateVpcEndpointServiceConfigurationRequest method.
		CreateVpcEndpointServiceConfigurationRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateVpcEndpointServiceConfigurationInput
		}
		// CreateVpcEndpointServiceConfigurationWithContext holds details about calls to the CreateVpcEndpointServiceConfigurationWithContext method.
		CreateVpcEndpointServiceConfigurationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateVpcEndpointServiceConfigurationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateVpcEndpointWithContext holds details about calls to the CreateVpcEndpointWithContext method.
		CreateVpcEndpointWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateVpcEndpointInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateVpcPeeringConnection holds details about calls to the CreateVpcPeeringConnection method.
		CreateVpcPeeringConnection []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateVpcPeeringConnectionInput
		}
		// CreateVpcPeeringConnectionRequest holds details about calls to the CreateVpcPeeringConnectionRequest method.
		CreateVpcPeeringConnectionRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateVpcPeeringConnectionInput
		}
		// CreateVpcPeeringConnectionWithContext holds details about calls to the CreateVpcPeeringConnectionWithContext method.
		CreateVpcPeeringConnectionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateVpcPeeringConnectionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateVpcRequest holds details about calls to the CreateVpcRequest method.
		CreateVpcRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateVpcInput
		}
		// CreateVpcWithContext holds details about calls to the CreateVpcWithContext method.
		CreateVpcWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateVpcInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateVpnConnection holds details about calls to the CreateVpnConnection method.
		CreateVpnConnection []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateVpnConnectionInput
		}
		// CreateVpnConnectionRequest holds details about calls to the CreateVpnConnectionRequest method.
		CreateVpnConnectionRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateVpnConnectionInput
		}
		// CreateVpnConnectionRoute holds details about calls to the CreateVpnConnectionRoute method.
		CreateVpnConnectionRoute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateVpnConnectionRouteInput
		}
		// CreateVpnConnectionRouteRequest holds details about calls to the CreateVpnConnectionRouteRequest method.
		CreateVpnConnectionRouteRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateVpnConnectionRouteInput
		}
		// CreateVpnConnectionRouteWithContext holds details about calls to the CreateVpnConnectionRouteWithContext method.
		CreateVpnConnectionRouteWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateVpnConnectionRouteInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateVpnConnectionWithContext holds details about calls to the CreateVpnConnectionWithContext method.
		CreateVpnConnectionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateVpnConnectionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateVpnGateway holds details about calls to the CreateVpnGateway method.
		CreateVpnGateway []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateVpnGatewayInput
		}
		// CreateVpnGatewayRequest holds details about calls to the CreateVpnGatewayRequest method.
		CreateVpnGatewayRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.CreateVpnGatewayInput
		}
		// CreateVpnGatewayWithContext holds details about calls to the CreateVpnGatewayWithContext method.
		CreateVpnGatewayWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.CreateVpnGatewayInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteClientVpnEndpoint holds details about calls to the DeleteClientVpnEndpoint method.
		DeleteClientVpnEndpoint []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteClientVpnEndpointInput
		}
		// DeleteClientVpnEndpointRequest holds details about calls to the DeleteClientVpnEndpointRequest method.
		DeleteClientVpnEndpointRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteClientVpnEndpointInput
		}
		// DeleteClientVpnEndpointWithContext holds details about calls to the DeleteClientVpnEndpointWithContext method.
		DeleteClientVpnEndpointWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteClientVpnEndpointInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteClientVpnRoute holds details about calls to the DeleteClientVpnRoute method.
		DeleteClientVpnRoute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteClientVpnRouteInput
		}
		// DeleteClientVpnRouteRequest holds details about calls to the DeleteClientVpnRouteRequest method.
		DeleteClientVpnRouteRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteClientVpnRouteInput
		}
		// DeleteClientVpnRouteWithContext holds details about calls to the DeleteClientVpnRouteWithContext method.
		DeleteClientVpnRouteWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteClientVpnRouteInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteCustomerGateway holds details about calls to the DeleteCustomerGateway method.
		DeleteCustomerGateway []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteCustomerGatewayInput
		}
		// DeleteCustomerGatewayRequest holds details about calls to the DeleteCustomerGatewayRequest method.
		DeleteCustomerGatewayRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteCustomerGatewayInput
		}
		// DeleteCustomerGatewayWithContext holds details about calls to the DeleteCustomerGatewayWithContext method.
		DeleteCustomerGatewayWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteCustomerGatewayInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteDhcpOptions holds details about calls to the DeleteDhcpOptions method.
		DeleteDhcpOptions []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteDhcpOptionsInput
		}
		// DeleteDhcpOptionsRequest holds details about calls to the DeleteDhcpOptionsRequest method.
		DeleteDhcpOptionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteDhcpOptionsInput
		}
		// DeleteDhcpOptionsWithContext holds details about calls to the DeleteDhcpOptionsWithContext method.
		DeleteDhcpOptionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteDhcpOptionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteEgressOnlyInternetGateway holds details about calls to the DeleteEgressOnlyInternetGateway method.
		DeleteEgressOnlyInternetGateway []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteEgressOnlyInternetGatewayInput
		}
		// DeleteEgressOnlyInternetGatewayRequest holds details about calls to the DeleteEgressOnlyInternetGatewayRequest method.
		DeleteEgressOnlyInternetGatewayRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteEgressOnlyInternetGatewayInput
		}
		// DeleteEgressOnlyInternetGatewayWithContext holds details about calls to the DeleteEgressOnlyInternetGatewayWithContext method.
		DeleteEgressOnlyInternetGatewayWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteEgressOnlyInternetGatewayInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteFleets holds details about calls to the DeleteFleets method.
		DeleteFleets []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteFleetsInput
		}
		// DeleteFleetsRequest holds details about calls to the DeleteFleetsRequest method.
		DeleteFleetsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteFleetsInput
		}
		// DeleteFleetsWithContext holds details about calls to the DeleteFleetsWithContext method.
		DeleteFleetsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteFleetsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteFlowLogs holds details about calls to the DeleteFlowLogs method.
		DeleteFlowLogs []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteFlowLogsInput
		}
		// DeleteFlowLogsRequest holds details about calls to the DeleteFlowLogsRequest method.
		DeleteFlowLogsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteFlowLogsInput
		}
		// DeleteFlowLogsWithContext holds details about calls to the DeleteFlowLogsWithContext method.
		DeleteFlowLogsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteFlowLogsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteFpgaImage holds details about calls to the DeleteFpgaImage method.
		DeleteFpgaImage []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteFpgaImageInput
		}
		// DeleteFpgaImageRequest holds details about calls to the DeleteFpgaImageRequest method.
		DeleteFpgaImageRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteFpgaImageInput
		}
		// DeleteFpgaImageWithContext holds details about calls to the DeleteFpgaImageWithContext method.
		DeleteFpgaImageWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteFpgaImageInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteInternetGateway holds details about calls to the DeleteInternetGateway method.
		DeleteInternetGateway []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteInternetGatewayInput
		}
		// DeleteInternetGatewayRequest holds details about calls to the DeleteInternetGatewayRequest method.
		DeleteInternetGatewayRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteInternetGatewayInput
		}
		// DeleteInternetGatewayWithContext holds details about calls to the DeleteInternetGatewayWithContext method.
		DeleteInternetGatewayWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteInternetGatewayInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteKeyPair holds details about calls to the DeleteKeyPair method.
		DeleteKeyPair []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteKeyPairInput
		}
		// DeleteKeyPairRequest holds details about calls to the DeleteKeyPairRequest method.
		DeleteKeyPairRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteKeyPairInput
		}
		// DeleteKeyPairWithContext holds details about calls to the DeleteKeyPairWithContext method.
		DeleteKeyPairWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteKeyPairInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteLaunchTemplate holds details about calls to the DeleteLaunchTemplate method.
		DeleteLaunchTemplate []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteLaunchTemplateInput
		}
		// DeleteLaunchTemplateRequest holds details about calls to the DeleteLaunchTemplateRequest method.
		DeleteLaunchTemplateRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteLaunchTemplateInput
		}
		// DeleteLaunchTemplateVersions holds details about calls to the DeleteLaunchTemplateVersions method.
		DeleteLaunchTemplateVersions []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteLaunchTemplateVersionsInput
		}
		// DeleteLaunchTemplateVersionsRequest holds details about calls to the DeleteLaunchTemplateVersionsRequest method.
		DeleteLaunchTemplateVersionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteLaunchTemplateVersionsInput
		}
		// DeleteLaunchTemplateVersionsWithContext holds details about calls to the DeleteLaunchTemplateVersionsWithContext method.
		DeleteLaunchTemplateVersionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteLaunchTemplateVersionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteLaunchTemplateWithContext holds details about calls to the DeleteLaunchTemplateWithContext method.
		DeleteLaunchTemplateWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteLaunchTemplateInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteLocalGatewayRoute holds details about calls to the DeleteLocalGatewayRoute method.
		DeleteLocalGatewayRoute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteLocalGatewayRouteInput
		}
		// DeleteLocalGatewayRouteRequest holds details about calls to the DeleteLocalGatewayRouteRequest method.
		DeleteLocalGatewayRouteRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteLocalGatewayRouteInput
		}
		// DeleteLocalGatewayRouteTableVpcAssociation holds details about calls to the DeleteLocalGatewayRouteTableVpcAssociation method.
		DeleteLocalGatewayRouteTableVpcAssociation []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput
		}
		// DeleteLocalGatewayRouteTableVpcAssociationRequest holds details about calls to the DeleteLocalGatewayRouteTableVpcAssociationRequest method.
		DeleteLocalGatewayRouteTableVpcAssociationRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput
		}
		// DeleteLocalGatewayRouteTableVpcAssociationWithContext holds details about calls to the DeleteLocalGatewayRouteTableVpcAssociationWithContext method.
		DeleteLocalGatewayRouteTableVpcAssociationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteLocalGatewayRouteWithContext holds details about calls to the DeleteLocalGatewayRouteWithContext method.
		DeleteLocalGatewayRouteWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteLocalGatewayRouteInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteNatGateway holds details about calls to the DeleteNatGateway method.
		DeleteNatGateway []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteNatGatewayInput
		}
		// DeleteNatGatewayRequest holds details about calls to the DeleteNatGatewayRequest method.
		DeleteNatGatewayRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteNatGatewayInput
		}
		// DeleteNatGatewayWithContext holds details about calls to the DeleteNatGatewayWithContext method.
		DeleteNatGatewayWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteNatGatewayInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteNetworkAcl holds details about calls to the DeleteNetworkAcl method.
		DeleteNetworkAcl []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteNetworkAclInput
		}
		// DeleteNetworkAclEntry holds details about calls to the DeleteNetworkAclEntry method.
		DeleteNetworkAclEntry []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteNetworkAclEntryInput
		}
		// DeleteNetworkAclEntryRequest holds details about calls to the DeleteNetworkAclEntryRequest method.
		DeleteNetworkAclEntryRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteNetworkAclEntryInput
		}
		// DeleteNetworkAclEntryWithContext holds details about calls to the DeleteNetworkAclEntryWithContext method.
		DeleteNetworkAclEntryWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteNetworkAclEntryInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteNetworkAclRequest holds details about calls to the DeleteNetworkAclRequest method.
		DeleteNetworkAclRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteNetworkAclInput
		}
		// DeleteNetworkAclWithContext holds details about calls to the DeleteNetworkAclWithContext method.
		DeleteNetworkAclWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteNetworkAclInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteNetworkInterface holds details about calls to the DeleteNetworkInterface method.
		DeleteNetworkInterface []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteNetworkInterfaceInput
		}
		// DeleteNetworkInterfacePermission holds details about calls to the DeleteNetworkInterfacePermission method.
		DeleteNetworkInterfacePermission []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteNetworkInterfacePermissionInput
		}
		// DeleteNetworkInterfacePermissionRequest holds details about calls to the DeleteNetworkInterfacePermissionRequest method.
		DeleteNetworkInterfacePermissionRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteNetworkInterfacePermissionInput
		}
		// DeleteNetworkInterfacePermissionWithContext holds details about calls to the DeleteNetworkInterfacePermissionWithContext method.
		DeleteNetworkInterfacePermissionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteNetworkInterfacePermissionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteNetworkInterfaceRequest holds details about calls to the DeleteNetworkInterfaceRequest method.
		DeleteNetworkInterfaceRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteNetworkInterfaceInput
		}
		// DeleteNetworkInterfaceWithContext holds details about calls to the DeleteNetworkInterfaceWithContext method.
		DeleteNetworkInterfaceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteNetworkInterfaceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeletePlacementGroup holds details about calls to the DeletePlacementGroup method.
		DeletePlacementGroup []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeletePlacementGroupInput
		}
		// DeletePlacementGroupRequest holds details about calls to the DeletePlacementGroupRequest method.
		DeletePlacementGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeletePlacementGroupInput
		}
		// DeletePlacementGroupWithContext holds details about calls to the DeletePlacementGroupWithContext method.
		DeletePlacementGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeletePlacementGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteQueuedReservedInstances holds details about calls to the DeleteQueuedReservedInstances method.
		DeleteQueuedReservedInstances []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteQueuedReservedInstancesInput
		}
		// DeleteQueuedReservedInstancesRequest holds details about calls to the DeleteQueuedReservedInstancesRequest method.
		DeleteQueuedReservedInstancesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteQueuedReservedInstancesInput
		}
		// DeleteQueuedReservedInstancesWithContext holds details about calls to the DeleteQueuedReservedInstancesWithContext method.
		DeleteQueuedReservedInstancesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteQueuedReservedInstancesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteRoute holds details about calls to the DeleteRoute method.
		DeleteRoute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteRouteInput
		}
		// DeleteRouteRequest holds details about calls to the DeleteRouteRequest method.
		DeleteRouteRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteRouteInput
		}
		// DeleteRouteTable holds details about calls to the DeleteRouteTable method.
		DeleteRouteTable []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteRouteTableInput
		}
		// DeleteRouteTableRequest holds details about calls to the DeleteRouteTableRequest method.
		DeleteRouteTableRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteRouteTableInput
		}
		// DeleteRouteTableWithContext holds details about calls to the DeleteRouteTableWithContext method.
		DeleteRouteTableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteRouteTableInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteRouteWithContext holds details about calls to the DeleteRouteWithContext method.
		DeleteRouteWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteRouteInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteSecurityGroup holds details about calls to the DeleteSecurityGroup method.
		DeleteSecurityGroup []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteSecurityGroupInput
		}
		// DeleteSecurityGroupRequest holds details about calls to the DeleteSecurityGroupRequest method.
		DeleteSecurityGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteSecurityGroupInput
		}
		// DeleteSecurityGroupWithContext holds details about calls to the DeleteSecurityGroupWithContext method.
		DeleteSecurityGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteSecurityGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteSnapshot holds details about calls to the DeleteSnapshot method.
		DeleteSnapshot []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteSnapshotInput
		}
		// DeleteSnapshotRequest holds details about calls to the DeleteSnapshotRequest method.
		DeleteSnapshotRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteSnapshotInput
		}
		// DeleteSnapshotWithContext holds details about calls to the DeleteSnapshotWithContext method.
		DeleteSnapshotWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteSnapshotInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteSpotDatafeedSubscription holds details about calls to the DeleteSpotDatafeedSubscription method.
		DeleteSpotDatafeedSubscription []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteSpotDatafeedSubscriptionInput
		}
		// DeleteSpotDatafeedSubscriptionRequest holds details about calls to the DeleteSpotDatafeedSubscriptionRequest method.
		DeleteSpotDatafeedSubscriptionRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteSpotDatafeedSubscriptionInput
		}
		// DeleteSpotDatafeedSubscriptionWithContext holds details about calls to the DeleteSpotDatafeedSubscriptionWithContext method.
		DeleteSpotDatafeedSubscriptionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteSpotDatafeedSubscriptionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteSubnet holds details about calls to the DeleteSubnet method.
		DeleteSubnet []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteSubnetInput
		}
		// DeleteSubnetRequest holds details about calls to the DeleteSubnetRequest method.
		DeleteSubnetRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteSubnetInput
		}
		// DeleteSubnetWithContext holds details about calls to the DeleteSubnetWithContext method.
		DeleteSubnetWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteSubnetInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteTags holds details about calls to the DeleteTags method.
		DeleteTags []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteTagsInput
		}
		// DeleteTagsRequest holds details about calls to the DeleteTagsRequest method.
		DeleteTagsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteTagsInput
		}
		// DeleteTagsWithContext holds details about calls to the DeleteTagsWithContext method.
		DeleteTagsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteTagsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteTrafficMirrorFilter holds details about calls to the DeleteTrafficMirrorFilter method.
		DeleteTrafficMirrorFilter []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteTrafficMirrorFilterInput
		}
		// DeleteTrafficMirrorFilterRequest holds details about calls to the DeleteTrafficMirrorFilterRequest method.
		DeleteTrafficMirrorFilterRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteTrafficMirrorFilterInput
		}
		// DeleteTrafficMirrorFilterRule holds details about calls to the DeleteTrafficMirrorFilterRule method.
		DeleteTrafficMirrorFilterRule []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteTrafficMirrorFilterRuleInput
		}
		// DeleteTrafficMirrorFilterRuleRequest holds details about calls to the DeleteTrafficMirrorFilterRuleRequest method.
		DeleteTrafficMirrorFilterRuleRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteTrafficMirrorFilterRuleInput
		}
		// DeleteTrafficMirrorFilterRuleWithContext holds details about calls to the DeleteTrafficMirrorFilterRuleWithContext method.
		DeleteTrafficMirrorFilterRuleWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteTrafficMirrorFilterRuleInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteTrafficMirrorFilterWithContext holds details about calls to the DeleteTrafficMirrorFilterWithContext method.
		DeleteTrafficMirrorFilterWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteTrafficMirrorFilterInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteTrafficMirrorSession holds details about calls to the DeleteTrafficMirrorSession method.
		DeleteTrafficMirrorSession []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteTrafficMirrorSessionInput
		}
		// DeleteTrafficMirrorSessionRequest holds details about calls to the DeleteTrafficMirrorSessionRequest method.
		DeleteTrafficMirrorSessionRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteTrafficMirrorSessionInput
		}
		// DeleteTrafficMirrorSessionWithContext holds details about calls to the DeleteTrafficMirrorSessionWithContext method.
		DeleteTrafficMirrorSessionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteTrafficMirrorSessionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteTrafficMirrorTarget holds details about calls to the DeleteTrafficMirrorTarget method.
		DeleteTrafficMirrorTarget []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteTrafficMirrorTargetInput
		}
		// DeleteTrafficMirrorTargetRequest holds details about calls to the DeleteTrafficMirrorTargetRequest method.
		DeleteTrafficMirrorTargetRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteTrafficMirrorTargetInput
		}
		// DeleteTrafficMirrorTargetWithContext holds details about calls to the DeleteTrafficMirrorTargetWithContext method.
		DeleteTrafficMirrorTargetWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteTrafficMirrorTargetInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteTransitGateway holds details about calls to the DeleteTransitGateway method.
		DeleteTransitGateway []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteTransitGatewayInput
		}
		// DeleteTransitGatewayMulticastDomain holds details about calls to the DeleteTransitGatewayMulticastDomain method.
		DeleteTransitGatewayMulticastDomain []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteTransitGatewayMulticastDomainInput
		}
		// DeleteTransitGatewayMulticastDomainRequest holds details about calls to the DeleteTransitGatewayMulticastDomainRequest method.
		DeleteTransitGatewayMulticastDomainRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteTransitGatewayMulticastDomainInput
		}
		// DeleteTransitGatewayMulticastDomainWithContext holds details about calls to the DeleteTransitGatewayMulticastDomainWithContext method.
		DeleteTransitGatewayMulticastDomainWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteTransitGatewayMulticastDomainInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteTransitGatewayPeeringAttachment holds details about calls to the DeleteTransitGatewayPeeringAttachment method.
		DeleteTransitGatewayPeeringAttachment []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteTransitGatewayPeeringAttachmentInput
		}
		// DeleteTransitGatewayPeeringAttachmentRequest holds details about calls to the DeleteTransitGatewayPeeringAttachmentRequest method.
		DeleteTransitGatewayPeeringAttachmentRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteTransitGatewayPeeringAttachmentInput
		}
		// DeleteTransitGatewayPeeringAttachmentWithContext holds details about calls to the DeleteTransitGatewayPeeringAttachmentWithContext method.
		DeleteTransitGatewayPeeringAttachmentWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteTransitGatewayPeeringAttachmentInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteTransitGatewayRequest holds details about calls to the DeleteTransitGatewayRequest method.
		DeleteTransitGatewayRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteTransitGatewayInput
		}
		// DeleteTransitGatewayRoute holds details about calls to the DeleteTransitGatewayRoute method.
		DeleteTransitGatewayRoute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteTransitGatewayRouteInput
		}
		// DeleteTransitGatewayRouteRequest holds details about calls to the DeleteTransitGatewayRouteRequest method.
		DeleteTransitGatewayRouteRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteTransitGatewayRouteInput
		}
		// DeleteTransitGatewayRouteTable holds details about calls to the DeleteTransitGatewayRouteTable method.
		DeleteTransitGatewayRouteTable []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteTransitGatewayRouteTableInput
		}
		// DeleteTransitGatewayRouteTableRequest holds details about calls to the DeleteTransitGatewayRouteTableRequest method.
		DeleteTransitGatewayRouteTableRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteTransitGatewayRouteTableInput
		}
		// DeleteTransitGatewayRouteTableWithContext holds details about calls to the DeleteTransitGatewayRouteTableWithContext method.
		DeleteTransitGatewayRouteTableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteTransitGatewayRouteTableInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteTransitGatewayRouteWithContext holds details about calls to the DeleteTransitGatewayRouteWithContext method.
		DeleteTransitGatewayRouteWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteTransitGatewayRouteInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteTransitGatewayVpcAttachment holds details about calls to the DeleteTransitGatewayVpcAttachment method.
		DeleteTransitGatewayVpcAttachment []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteTransitGatewayVpcAttachmentInput
		}
		// DeleteTransitGatewayVpcAttachmentRequest holds details about calls to the DeleteTransitGatewayVpcAttachmentRequest method.
		DeleteTransitGatewayVpcAttachmentRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteTransitGatewayVpcAttachmentInput
		}
		// DeleteTransitGatewayVpcAttachmentWithContext holds details about calls to the DeleteTransitGatewayVpcAttachmentWithContext method.
		DeleteTransitGatewayVpcAttachmentWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteTransitGatewayVpcAttachmentInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteTransitGatewayWithContext holds details about calls to the DeleteTransitGatewayWithContext method.
		DeleteTransitGatewayWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteTransitGatewayInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteVolume holds details about calls to the DeleteVolume method.
		DeleteVolume []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteVolumeInput
		}
		// DeleteVolumeRequest holds details about calls to the DeleteVolumeRequest method.
		DeleteVolumeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteVolumeInput
		}
		// DeleteVolumeWithContext holds details about calls to the DeleteVolumeWithContext method.
		DeleteVolumeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteVolumeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteVpc holds details about calls to the DeleteVpc method.
		DeleteVpc []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteVpcInput
		}
		// DeleteVpcEndpointConnectionNotifications holds details about calls to the DeleteVpcEndpointConnectionNotifications method.
		DeleteVpcEndpointConnectionNotifications []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteVpcEndpointConnectionNotificationsInput
		}
		// DeleteVpcEndpointConnectionNotificationsRequest holds details about calls to the DeleteVpcEndpointConnectionNotificationsRequest method.
		DeleteVpcEndpointConnectionNotificationsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteVpcEndpointConnectionNotificationsInput
		}
		// DeleteVpcEndpointConnectionNotificationsWithContext holds details about calls to the DeleteVpcEndpointConnectionNotificationsWithContext method.
		DeleteVpcEndpointConnectionNotificationsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteVpcEndpointConnectionNotificationsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteVpcEndpointServiceConfigurations holds details about calls to the DeleteVpcEndpointServiceConfigurations method.
		DeleteVpcEndpointServiceConfigurations []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteVpcEndpointServiceConfigurationsInput
		}
		// DeleteVpcEndpointServiceConfigurationsRequest holds details about calls to the DeleteVpcEndpointServiceConfigurationsRequest method.
		DeleteVpcEndpointServiceConfigurationsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteVpcEndpointServiceConfigurationsInput
		}
		// DeleteVpcEndpointServiceConfigurationsWithContext holds details about calls to the DeleteVpcEndpointServiceConfigurationsWithContext method.
		DeleteVpcEndpointServiceConfigurationsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteVpcEndpointServiceConfigurationsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteVpcEndpoints holds details about calls to the DeleteVpcEndpoints method.
		DeleteVpcEndpoints []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteVpcEndpointsInput
		}
		// DeleteVpcEndpointsRequest holds details about calls to the DeleteVpcEndpointsRequest method.
		DeleteVpcEndpointsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteVpcEndpointsInput
		}
		// DeleteVpcEndpointsWithContext holds details about calls to the DeleteVpcEndpointsWithContext method.
		DeleteVpcEndpointsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteVpcEndpointsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteVpcPeeringConnection holds details about calls to the DeleteVpcPeeringConnection method.
		DeleteVpcPeeringConnection []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteVpcPeeringConnectionInput
		}
		// DeleteVpcPeeringConnectionRequest holds details about calls to the DeleteVpcPeeringConnectionRequest method.
		DeleteVpcPeeringConnectionRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteVpcPeeringConnectionInput
		}
		// DeleteVpcPeeringConnectionWithContext holds details about calls to the DeleteVpcPeeringConnectionWithContext method.
		DeleteVpcPeeringConnectionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteVpcPeeringConnectionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteVpcRequest holds details about calls to the DeleteVpcRequest method.
		DeleteVpcRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteVpcInput
		}
		// DeleteVpcWithContext holds details about calls to the DeleteVpcWithContext method.
		DeleteVpcWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteVpcInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteVpnConnection holds details about calls to the DeleteVpnConnection method.
		DeleteVpnConnection []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteVpnConnectionInput
		}
		// DeleteVpnConnectionRequest holds details about calls to the DeleteVpnConnectionRequest method.
		DeleteVpnConnectionRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteVpnConnectionInput
		}
		// DeleteVpnConnectionRoute holds details about calls to the DeleteVpnConnectionRoute method.
		DeleteVpnConnectionRoute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteVpnConnectionRouteInput
		}
		// DeleteVpnConnectionRouteRequest holds details about calls to the DeleteVpnConnectionRouteRequest method.
		DeleteVpnConnectionRouteRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteVpnConnectionRouteInput
		}
		// DeleteVpnConnectionRouteWithContext holds details about calls to the DeleteVpnConnectionRouteWithContext method.
		DeleteVpnConnectionRouteWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteVpnConnectionRouteInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteVpnConnectionWithContext holds details about calls to the DeleteVpnConnectionWithContext method.
		DeleteVpnConnectionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteVpnConnectionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteVpnGateway holds details about calls to the DeleteVpnGateway method.
		DeleteVpnGateway []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteVpnGatewayInput
		}
		// DeleteVpnGatewayRequest holds details about calls to the DeleteVpnGatewayRequest method.
		DeleteVpnGatewayRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeleteVpnGatewayInput
		}
		// DeleteVpnGatewayWithContext holds details about calls to the DeleteVpnGatewayWithContext method.
		DeleteVpnGatewayWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeleteVpnGatewayInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeprovisionByoipCidr holds details about calls to the DeprovisionByoipCidr method.
		DeprovisionByoipCidr []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeprovisionByoipCidrInput
		}
		// DeprovisionByoipCidrRequest holds details about calls to the DeprovisionByoipCidrRequest method.
		DeprovisionByoipCidrRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeprovisionByoipCidrInput
		}
		// DeprovisionByoipCidrWithContext holds details about calls to the DeprovisionByoipCidrWithContext method.
		DeprovisionByoipCidrWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeprovisionByoipCidrInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeregisterImage holds details about calls to the DeregisterImage method.
		DeregisterImage []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeregisterImageInput
		}
		// DeregisterImageRequest holds details about calls to the DeregisterImageRequest method.
		DeregisterImageRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeregisterImageInput
		}
		// DeregisterImageWithContext holds details about calls to the DeregisterImageWithContext method.
		DeregisterImageWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeregisterImageInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeregisterTransitGatewayMulticastGroupMembers holds details about calls to the DeregisterTransitGatewayMulticastGroupMembers method.
		DeregisterTransitGatewayMulticastGroupMembers []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput
		}
		// DeregisterTransitGatewayMulticastGroupMembersRequest holds details about calls to the DeregisterTransitGatewayMulticastGroupMembersRequest method.
		DeregisterTransitGatewayMulticastGroupMembersRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput
		}
		// DeregisterTransitGatewayMulticastGroupMembersWithContext holds details about calls to the DeregisterTransitGatewayMulticastGroupMembersWithContext method.
		DeregisterTransitGatewayMulticastGroupMembersWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeregisterTransitGatewayMulticastGroupSources holds details about calls to the DeregisterTransitGatewayMulticastGroupSources method.
		DeregisterTransitGatewayMulticastGroupSources []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput
		}
		// DeregisterTransitGatewayMulticastGroupSourcesRequest holds details about calls to the DeregisterTransitGatewayMulticastGroupSourcesRequest method.
		DeregisterTransitGatewayMulticastGroupSourcesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput
		}
		// DeregisterTransitGatewayMulticastGroupSourcesWithContext holds details about calls to the DeregisterTransitGatewayMulticastGroupSourcesWithContext method.
		DeregisterTransitGatewayMulticastGroupSourcesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeAccountAttributes holds details about calls to the DescribeAccountAttributes method.
		DescribeAccountAttributes []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeAccountAttributesInput
		}
		// DescribeAccountAttributesRequest holds details about calls to the DescribeAccountAttributesRequest method.
		DescribeAccountAttributesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeAccountAttributesInput
		}
		// DescribeAccountAttributesWithContext holds details about calls to the DescribeAccountAttributesWithContext method.
		DescribeAccountAttributesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeAccountAttributesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeAddresses holds details about calls to the DescribeAddresses method.
		DescribeAddresses []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeAddressesInput
		}
		// DescribeAddressesRequest holds details about calls to the DescribeAddressesRequest method.
		DescribeAddressesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeAddressesInput
		}
		// DescribeAddressesWithContext holds details about calls to the DescribeAddressesWithContext method.
		DescribeAddressesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeAddressesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeAggregateIdFormat holds details about calls to the DescribeAggregateIdFormat method.
		DescribeAggregateIdFormat []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeAggregateIdFormatInput
		}
		// DescribeAggregateIdFormatRequest holds details about calls to the DescribeAggregateIdFormatRequest method.
		DescribeAggregateIdFormatRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeAggregateIdFormatInput
		}
		// DescribeAggregateIdFormatWithContext holds details about calls to the DescribeAggregateIdFormatWithContext method.
		DescribeAggregateIdFormatWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeAggregateIdFormatInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeAvailabilityZones holds details about calls to the DescribeAvailabilityZones method.
		DescribeAvailabilityZones []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeAvailabilityZonesInput
		}
		// DescribeAvailabilityZonesRequest holds details about calls to the DescribeAvailabilityZonesRequest method.
		DescribeAvailabilityZonesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeAvailabilityZonesInput
		}
		// DescribeAvailabilityZonesWithContext holds details about calls to the DescribeAvailabilityZonesWithContext method.
		DescribeAvailabilityZonesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeAvailabilityZonesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeBundleTasks holds details about calls to the DescribeBundleTasks method.
		DescribeBundleTasks []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeBundleTasksInput
		}
		// DescribeBundleTasksRequest holds details about calls to the DescribeBundleTasksRequest method.
		DescribeBundleTasksRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeBundleTasksInput
		}
		// DescribeBundleTasksWithContext holds details about calls to the DescribeBundleTasksWithContext method.
		DescribeBundleTasksWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeBundleTasksInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeByoipCidrs holds details about calls to the DescribeByoipCidrs method.
		DescribeByoipCidrs []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeByoipCidrsInput
		}
		// DescribeByoipCidrsPages holds details about calls to the DescribeByoipCidrsPages method.
		DescribeByoipCidrsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeByoipCidrsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeByoipCidrsOutput, bool) bool
		}
		// DescribeByoipCidrsPagesWithContext holds details about calls to the DescribeByoipCidrsPagesWithContext method.
		DescribeByoipCidrsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeByoipCidrsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeByoipCidrsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeByoipCidrsRequest holds details about calls to the DescribeByoipCidrsRequest method.
		DescribeByoipCidrsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeByoipCidrsInput
		}
		// DescribeByoipCidrsWithContext holds details about calls to the DescribeByoipCidrsWithContext method.
		DescribeByoipCidrsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeByoipCidrsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeCapacityReservations holds details about calls to the DescribeCapacityReservations method.
		DescribeCapacityReservations []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeCapacityReservationsInput
		}
		// DescribeCapacityReservationsPages holds details about calls to the DescribeCapacityReservationsPages method.
		DescribeCapacityReservationsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeCapacityReservationsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeCapacityReservationsOutput, bool) bool
		}
		// DescribeCapacityReservationsPagesWithContext holds details about calls to the DescribeCapacityReservationsPagesWithContext method.
		DescribeCapacityReservationsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeCapacityReservationsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeCapacityReservationsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeCapacityReservationsRequest holds details about calls to the DescribeCapacityReservationsRequest method.
		DescribeCapacityReservationsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeCapacityReservationsInput
		}
		// DescribeCapacityReservationsWithContext holds details about calls to the DescribeCapacityReservationsWithContext method.
		DescribeCapacityReservationsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeCapacityReservationsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeClassicLinkInstances holds details about calls to the DescribeClassicLinkInstances method.
		DescribeClassicLinkInstances []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeClassicLinkInstancesInput
		}
		// DescribeClassicLinkInstancesPages holds details about calls to the DescribeClassicLinkInstancesPages method.
		DescribeClassicLinkInstancesPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeClassicLinkInstancesInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeClassicLinkInstancesOutput, bool) bool
		}
		// DescribeClassicLinkInstancesPagesWithContext holds details about calls to the DescribeClassicLinkInstancesPagesWithContext method.
		DescribeClassicLinkInstancesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeClassicLinkInstancesInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeClassicLinkInstancesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeClassicLinkInstancesRequest holds details about calls to the DescribeClassicLinkInstancesRequest method.
		DescribeClassicLinkInstancesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeClassicLinkInstancesInput
		}
		// DescribeClassicLinkInstancesWithContext holds details about calls to the DescribeClassicLinkInstancesWithContext method.
		DescribeClassicLinkInstancesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeClassicLinkInstancesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeClientVpnAuthorizationRules holds details about calls to the DescribeClientVpnAuthorizationRules method.
		DescribeClientVpnAuthorizationRules []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeClientVpnAuthorizationRulesInput
		}
		// DescribeClientVpnAuthorizationRulesPages holds details about calls to the DescribeClientVpnAuthorizationRulesPages method.
		DescribeClientVpnAuthorizationRulesPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeClientVpnAuthorizationRulesInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeClientVpnAuthorizationRulesOutput, bool) bool
		}
		// DescribeClientVpnAuthorizationRulesPagesWithContext holds details about calls to the DescribeClientVpnAuthorizationRulesPagesWithContext method.
		DescribeClientVpnAuthorizationRulesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeClientVpnAuthorizationRulesInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeClientVpnAuthorizationRulesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeClientVpnAuthorizationRulesRequest holds details about calls to the DescribeClientVpnAuthorizationRulesRequest method.
		DescribeClientVpnAuthorizationRulesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeClientVpnAuthorizationRulesInput
		}
		// DescribeClientVpnAuthorizationRulesWithContext holds details about calls to the DescribeClientVpnAuthorizationRulesWithContext method.
		DescribeClientVpnAuthorizationRulesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeClientVpnAuthorizationRulesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeClientVpnConnections holds details about calls to the DescribeClientVpnConnections method.
		DescribeClientVpnConnections []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeClientVpnConnectionsInput
		}
		// DescribeClientVpnConnectionsPages holds details about calls to the DescribeClientVpnConnectionsPages method.
		DescribeClientVpnConnectionsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeClientVpnConnectionsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeClientVpnConnectionsOutput, bool) bool
		}
		// DescribeClientVpnConnectionsPagesWithContext holds details about calls to the DescribeClientVpnConnectionsPagesWithContext method.
		DescribeClientVpnConnectionsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeClientVpnConnectionsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeClientVpnConnectionsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeClientVpnConnectionsRequest holds details about calls to the DescribeClientVpnConnectionsRequest method.
		DescribeClientVpnConnectionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeClientVpnConnectionsInput
		}
		// DescribeClientVpnConnectionsWithContext holds details about calls to the DescribeClientVpnConnectionsWithContext method.
		DescribeClientVpnConnectionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeClientVpnConnectionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeClientVpnEndpoints holds details about calls to the DescribeClientVpnEndpoints method.
		DescribeClientVpnEndpoints []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeClientVpnEndpointsInput
		}
		// DescribeClientVpnEndpointsPages holds details about calls to the DescribeClientVpnEndpointsPages method.
		DescribeClientVpnEndpointsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeClientVpnEndpointsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeClientVpnEndpointsOutput, bool) bool
		}
		// DescribeClientVpnEndpointsPagesWithContext holds details about calls to the DescribeClientVpnEndpointsPagesWithContext method.
		DescribeClientVpnEndpointsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeClientVpnEndpointsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeClientVpnEndpointsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeClientVpnEndpointsRequest holds details about calls to the DescribeClientVpnEndpointsRequest method.
		DescribeClientVpnEndpointsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeClientVpnEndpointsInput
		}
		// DescribeClientVpnEndpointsWithContext holds details about calls to the DescribeClientVpnEndpointsWithContext method.
		DescribeClientVpnEndpointsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeClientVpnEndpointsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeClientVpnRoutes holds details about calls to the DescribeClientVpnRoutes method.
		DescribeClientVpnRoutes []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeClientVpnRoutesInput
		}
		// DescribeClientVpnRoutesPages holds details about calls to the DescribeClientVpnRoutesPages method.
		DescribeClientVpnRoutesPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeClientVpnRoutesInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeClientVpnRoutesOutput, bool) bool
		}
		// DescribeClientVpnRoutesPagesWithContext holds details about calls to the DescribeClientVpnRoutesPagesWithContext method.
		DescribeClientVpnRoutesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeClientVpnRoutesInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeClientVpnRoutesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeClientVpnRoutesRequest holds details about calls to the DescribeClientVpnRoutesRequest method.
		DescribeClientVpnRoutesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeClientVpnRoutesInput
		}
		// DescribeClientVpnRoutesWithContext holds details about calls to the DescribeClientVpnRoutesWithContext method.
		DescribeClientVpnRoutesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeClientVpnRoutesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeClientVpnTargetNetworks holds details about calls to the DescribeClientVpnTargetNetworks method.
		DescribeClientVpnTargetNetworks []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeClientVpnTargetNetworksInput
		}
		// DescribeClientVpnTargetNetworksPages holds details about calls to the DescribeClientVpnTargetNetworksPages method.
		DescribeClientVpnTargetNetworksPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeClientVpnTargetNetworksInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeClientVpnTargetNetworksOutput, bool) bool
		}
		// DescribeClientVpnTargetNetworksPagesWithContext holds details about calls to the DescribeClientVpnTargetNetworksPagesWithContext method.
		DescribeClientVpnTargetNetworksPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeClientVpnTargetNetworksInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeClientVpnTargetNetworksOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeClientVpnTargetNetworksRequest holds details about calls to the DescribeClientVpnTargetNetworksRequest method.
		DescribeClientVpnTargetNetworksRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeClientVpnTargetNetworksInput
		}
		// DescribeClientVpnTargetNetworksWithContext holds details about calls to the DescribeClientVpnTargetNetworksWithContext method.
		DescribeClientVpnTargetNetworksWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeClientVpnTargetNetworksInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeCoipPools holds details about calls to the DescribeCoipPools method.
		DescribeCoipPools []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeCoipPoolsInput
		}
		// DescribeCoipPoolsRequest holds details about calls to the DescribeCoipPoolsRequest method.
		DescribeCoipPoolsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeCoipPoolsInput
		}
		// DescribeCoipPoolsWithContext holds details about calls to the DescribeCoipPoolsWithContext method.
		DescribeCoipPoolsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeCoipPoolsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeConversionTasks holds details about calls to the DescribeConversionTasks method.
		DescribeConversionTasks []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeConversionTasksInput
		}
		// DescribeConversionTasksRequest holds details about calls to the DescribeConversionTasksRequest method.
		DescribeConversionTasksRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeConversionTasksInput
		}
		// DescribeConversionTasksWithContext holds details about calls to the DescribeConversionTasksWithContext method.
		DescribeConversionTasksWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeConversionTasksInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeCustomerGateways holds details about calls to the DescribeCustomerGateways method.
		DescribeCustomerGateways []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeCustomerGatewaysInput
		}
		// DescribeCustomerGatewaysRequest holds details about calls to the DescribeCustomerGatewaysRequest method.
		DescribeCustomerGatewaysRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeCustomerGatewaysInput
		}
		// DescribeCustomerGatewaysWithContext holds details about calls to the DescribeCustomerGatewaysWithContext method.
		DescribeCustomerGatewaysWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeCustomerGatewaysInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeDhcpOptions holds details about calls to the DescribeDhcpOptions method.
		DescribeDhcpOptions []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeDhcpOptionsInput
		}
		// DescribeDhcpOptionsPages holds details about calls to the DescribeDhcpOptionsPages method.
		DescribeDhcpOptionsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeDhcpOptionsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeDhcpOptionsOutput, bool) bool
		}
		// DescribeDhcpOptionsPagesWithContext holds details about calls to the DescribeDhcpOptionsPagesWithContext method.
		DescribeDhcpOptionsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeDhcpOptionsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeDhcpOptionsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeDhcpOptionsRequest holds details about calls to the DescribeDhcpOptionsRequest method.
		DescribeDhcpOptionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeDhcpOptionsInput
		}
		// DescribeDhcpOptionsWithContext holds details about calls to the DescribeDhcpOptionsWithContext method.
		DescribeDhcpOptionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeDhcpOptionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeEgressOnlyInternetGateways holds details about calls to the DescribeEgressOnlyInternetGateways method.
		DescribeEgressOnlyInternetGateways []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeEgressOnlyInternetGatewaysInput
		}
		// DescribeEgressOnlyInternetGatewaysPages holds details about calls to the DescribeEgressOnlyInternetGatewaysPages method.
		DescribeEgressOnlyInternetGatewaysPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeEgressOnlyInternetGatewaysInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeEgressOnlyInternetGatewaysOutput, bool) bool
		}
		// DescribeEgressOnlyInternetGatewaysPagesWithContext holds details about calls to the DescribeEgressOnlyInternetGatewaysPagesWithContext method.
		DescribeEgressOnlyInternetGatewaysPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeEgressOnlyInternetGatewaysInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeEgressOnlyInternetGatewaysOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeEgressOnlyInternetGatewaysRequest holds details about calls to the DescribeEgressOnlyInternetGatewaysRequest method.
		DescribeEgressOnlyInternetGatewaysRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeEgressOnlyInternetGatewaysInput
		}
		// DescribeEgressOnlyInternetGatewaysWithContext holds details about calls to the DescribeEgressOnlyInternetGatewaysWithContext method.
		DescribeEgressOnlyInternetGatewaysWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeEgressOnlyInternetGatewaysInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeElasticGpus holds details about calls to the DescribeElasticGpus method.
		DescribeElasticGpus []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeElasticGpusInput
		}
		// DescribeElasticGpusRequest holds details about calls to the DescribeElasticGpusRequest method.
		DescribeElasticGpusRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeElasticGpusInput
		}
		// DescribeElasticGpusWithContext holds details about calls to the DescribeElasticGpusWithContext method.
		DescribeElasticGpusWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeElasticGpusInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeExportImageTasks holds details about calls to the DescribeExportImageTasks method.
		DescribeExportImageTasks []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeExportImageTasksInput
		}
		// DescribeExportImageTasksPages holds details about calls to the DescribeExportImageTasksPages method.
		DescribeExportImageTasksPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeExportImageTasksInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeExportImageTasksOutput, bool) bool
		}
		// DescribeExportImageTasksPagesWithContext holds details about calls to the DescribeExportImageTasksPagesWithContext method.
		DescribeExportImageTasksPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeExportImageTasksInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeExportImageTasksOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeExportImageTasksRequest holds details about calls to the DescribeExportImageTasksRequest method.
		DescribeExportImageTasksRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeExportImageTasksInput
		}
		// DescribeExportImageTasksWithContext holds details about calls to the DescribeExportImageTasksWithContext method.
		DescribeExportImageTasksWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeExportImageTasksInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeExportTasks holds details about calls to the DescribeExportTasks method.
		DescribeExportTasks []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeExportTasksInput
		}
		// DescribeExportTasksRequest holds details about calls to the DescribeExportTasksRequest method.
		DescribeExportTasksRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeExportTasksInput
		}
		// DescribeExportTasksWithContext holds details about calls to the DescribeExportTasksWithContext method.
		DescribeExportTasksWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeExportTasksInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeFastSnapshotRestores holds details about calls to the DescribeFastSnapshotRestores method.
		DescribeFastSnapshotRestores []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeFastSnapshotRestoresInput
		}
		// DescribeFastSnapshotRestoresPages holds details about calls to the DescribeFastSnapshotRestoresPages method.
		DescribeFastSnapshotRestoresPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeFastSnapshotRestoresInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeFastSnapshotRestoresOutput, bool) bool
		}
		// DescribeFastSnapshotRestoresPagesWithContext holds details about calls to the DescribeFastSnapshotRestoresPagesWithContext method.
		DescribeFastSnapshotRestoresPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeFastSnapshotRestoresInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeFastSnapshotRestoresOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeFastSnapshotRestoresRequest holds details about calls to the DescribeFastSnapshotRestoresRequest method.
		DescribeFastSnapshotRestoresRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeFastSnapshotRestoresInput
		}
		// DescribeFastSnapshotRestoresWithContext holds details about calls to the DescribeFastSnapshotRestoresWithContext method.
		DescribeFastSnapshotRestoresWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeFastSnapshotRestoresInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeFleetHistory holds details about calls to the DescribeFleetHistory method.
		DescribeFleetHistory []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeFleetHistoryInput
		}
		// DescribeFleetHistoryRequest holds details about calls to the DescribeFleetHistoryRequest method.
		DescribeFleetHistoryRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeFleetHistoryInput
		}
		// DescribeFleetHistoryWithContext holds details about calls to the DescribeFleetHistoryWithContext method.
		DescribeFleetHistoryWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeFleetHistoryInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeFleetInstances holds details about calls to the DescribeFleetInstances method.
		DescribeFleetInstances []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeFleetInstancesInput
		}
		// DescribeFleetInstancesRequest holds details about calls to the DescribeFleetInstancesRequest method.
		DescribeFleetInstancesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeFleetInstancesInput
		}
		// DescribeFleetInstancesWithContext holds details about calls to the DescribeFleetInstancesWithContext method.
		DescribeFleetInstancesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeFleetInstancesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeFleets holds details about calls to the DescribeFleets method.
		DescribeFleets []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeFleetsInput
		}
		// DescribeFleetsPages holds details about calls to the DescribeFleetsPages method.
		DescribeFleetsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeFleetsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeFleetsOutput, bool) bool
		}
		// DescribeFleetsPagesWithContext holds details about calls to the DescribeFleetsPagesWithContext method.
		DescribeFleetsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeFleetsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeFleetsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeFleetsRequest holds details about calls to the DescribeFleetsRequest method.
		DescribeFleetsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeFleetsInput
		}
		// DescribeFleetsWithContext holds details about calls to the DescribeFleetsWithContext method.
		DescribeFleetsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeFleetsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeFlowLogs holds details about calls to the DescribeFlowLogs method.
		DescribeFlowLogs []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeFlowLogsInput
		}
		// DescribeFlowLogsPages holds details about calls to the DescribeFlowLogsPages method.
		DescribeFlowLogsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeFlowLogsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeFlowLogsOutput, bool) bool
		}
		// DescribeFlowLogsPagesWithContext holds details about calls to the DescribeFlowLogsPagesWithContext method.
		DescribeFlowLogsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeFlowLogsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeFlowLogsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeFlowLogsRequest holds details about calls to the DescribeFlowLogsRequest method.
		DescribeFlowLogsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeFlowLogsInput
		}
		// DescribeFlowLogsWithContext holds details about calls to the DescribeFlowLogsWithContext method.
		DescribeFlowLogsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeFlowLogsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeFpgaImageAttribute holds details about calls to the DescribeFpgaImageAttribute method.
		DescribeFpgaImageAttribute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeFpgaImageAttributeInput
		}
		// DescribeFpgaImageAttributeRequest holds details about calls to the DescribeFpgaImageAttributeRequest method.
		DescribeFpgaImageAttributeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeFpgaImageAttributeInput
		}
		// DescribeFpgaImageAttributeWithContext holds details about calls to the DescribeFpgaImageAttributeWithContext method.
		DescribeFpgaImageAttributeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeFpgaImageAttributeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeFpgaImages holds details about calls to the DescribeFpgaImages method.
		DescribeFpgaImages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeFpgaImagesInput
		}
		// DescribeFpgaImagesPages holds details about calls to the DescribeFpgaImagesPages method.
		DescribeFpgaImagesPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeFpgaImagesInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeFpgaImagesOutput, bool) bool
		}
		// DescribeFpgaImagesPagesWithContext holds details about calls to the DescribeFpgaImagesPagesWithContext method.
		DescribeFpgaImagesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeFpgaImagesInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeFpgaImagesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeFpgaImagesRequest holds details about calls to the DescribeFpgaImagesRequest method.
		DescribeFpgaImagesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeFpgaImagesInput
		}
		// DescribeFpgaImagesWithContext holds details about calls to the DescribeFpgaImagesWithContext method.
		DescribeFpgaImagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeFpgaImagesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeHostReservationOfferings holds details about calls to the DescribeHostReservationOfferings method.
		DescribeHostReservationOfferings []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeHostReservationOfferingsInput
		}
		// DescribeHostReservationOfferingsPages holds details about calls to the DescribeHostReservationOfferingsPages method.
		DescribeHostReservationOfferingsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeHostReservationOfferingsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeHostReservationOfferingsOutput, bool) bool
		}
		// DescribeHostReservationOfferingsPagesWithContext holds details about calls to the DescribeHostReservationOfferingsPagesWithContext method.
		DescribeHostReservationOfferingsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeHostReservationOfferingsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeHostReservationOfferingsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeHostReservationOfferingsRequest holds details about calls to the DescribeHostReservationOfferingsRequest method.
		DescribeHostReservationOfferingsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeHostReservationOfferingsInput
		}
		// DescribeHostReservationOfferingsWithContext holds details about calls to the DescribeHostReservationOfferingsWithContext method.
		DescribeHostReservationOfferingsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeHostReservationOfferingsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeHostReservations holds details about calls to the DescribeHostReservations method.
		DescribeHostReservations []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeHostReservationsInput
		}
		// DescribeHostReservationsPages holds details about calls to the DescribeHostReservationsPages method.
		DescribeHostReservationsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeHostReservationsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeHostReservationsOutput, bool) bool
		}
		// DescribeHostReservationsPagesWithContext holds details about calls to the DescribeHostReservationsPagesWithContext method.
		DescribeHostReservationsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeHostReservationsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeHostReservationsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeHostReservationsRequest holds details about calls to the DescribeHostReservationsRequest method.
		DescribeHostReservationsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeHostReservationsInput
		}
		// DescribeHostReservationsWithContext holds details about calls to the DescribeHostReservationsWithContext method.
		DescribeHostReservationsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeHostReservationsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeHosts holds details about calls to the DescribeHosts method.
		DescribeHosts []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeHostsInput
		}
		// DescribeHostsPages holds details about calls to the DescribeHostsPages method.
		DescribeHostsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeHostsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeHostsOutput, bool) bool
		}
		// DescribeHostsPagesWithContext holds details about calls to the DescribeHostsPagesWithContext method.
		DescribeHostsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeHostsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeHostsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeHostsRequest holds details about calls to the DescribeHostsRequest method.
		DescribeHostsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeHostsInput
		}
		// DescribeHostsWithContext holds details about calls to the DescribeHostsWithContext method.
		DescribeHostsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeHostsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeIamInstanceProfileAssociations holds details about calls to the DescribeIamInstanceProfileAssociations method.
		DescribeIamInstanceProfileAssociations []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeIamInstanceProfileAssociationsInput
		}
		// DescribeIamInstanceProfileAssociationsPages holds details about calls to the DescribeIamInstanceProfileAssociationsPages method.
		DescribeIamInstanceProfileAssociationsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeIamInstanceProfileAssociationsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeIamInstanceProfileAssociationsOutput, bool) bool
		}
		// DescribeIamInstanceProfileAssociationsPagesWithContext holds details about calls to the DescribeIamInstanceProfileAssociationsPagesWithContext method.
		DescribeIamInstanceProfileAssociationsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeIamInstanceProfileAssociationsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeIamInstanceProfileAssociationsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeIamInstanceProfileAssociationsRequest holds details about calls to the DescribeIamInstanceProfileAssociationsRequest method.
		DescribeIamInstanceProfileAssociationsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeIamInstanceProfileAssociationsInput
		}
		// DescribeIamInstanceProfileAssociationsWithContext holds details about calls to the DescribeIamInstanceProfileAssociationsWithContext method.
		DescribeIamInstanceProfileAssociationsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeIamInstanceProfileAssociationsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeIdFormat holds details about calls to the DescribeIdFormat method.
		DescribeIdFormat []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeIdFormatInput
		}
		// DescribeIdFormatRequest holds details about calls to the DescribeIdFormatRequest method.
		DescribeIdFormatRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeIdFormatInput
		}
		// DescribeIdFormatWithContext holds details about calls to the DescribeIdFormatWithContext method.
		DescribeIdFormatWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeIdFormatInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeIdentityIdFormat holds details about calls to the DescribeIdentityIdFormat method.
		DescribeIdentityIdFormat []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeIdentityIdFormatInput
		}
		// DescribeIdentityIdFormatRequest holds details about calls to the DescribeIdentityIdFormatRequest method.
		DescribeIdentityIdFormatRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeIdentityIdFormatInput
		}
		// DescribeIdentityIdFormatWithContext holds details about calls to the DescribeIdentityIdFormatWithContext method.
		DescribeIdentityIdFormatWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeIdentityIdFormatInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeImageAttribute holds details about calls to the DescribeImageAttribute method.
		DescribeImageAttribute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeImageAttributeInput
		}
		// DescribeImageAttributeRequest holds details about calls to the DescribeImageAttributeRequest method.
		DescribeImageAttributeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeImageAttributeInput
		}
		// DescribeImageAttributeWithContext holds details about calls to the DescribeImageAttributeWithContext method.
		DescribeImageAttributeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeImageAttributeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeImages holds details about calls to the DescribeImages method.
		DescribeImages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeImagesInput
		}
		// DescribeImagesRequest holds details about calls to the DescribeImagesRequest method.
		DescribeImagesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeImagesInput
		}
		// DescribeImagesWithContext holds details about calls to the DescribeImagesWithContext method.
		DescribeImagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeImagesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeImportImageTasks holds details about calls to the DescribeImportImageTasks method.
		DescribeImportImageTasks []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeImportImageTasksInput
		}
		// DescribeImportImageTasksPages holds details about calls to the DescribeImportImageTasksPages method.
		DescribeImportImageTasksPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeImportImageTasksInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeImportImageTasksOutput, bool) bool
		}
		// DescribeImportImageTasksPagesWithContext holds details about calls to the DescribeImportImageTasksPagesWithContext method.
		DescribeImportImageTasksPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeImportImageTasksInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeImportImageTasksOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeImportImageTasksRequest holds details about calls to the DescribeImportImageTasksRequest method.
		DescribeImportImageTasksRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeImportImageTasksInput
		}
		// DescribeImportImageTasksWithContext holds details about calls to the DescribeImportImageTasksWithContext method.
		DescribeImportImageTasksWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeImportImageTasksInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeImportSnapshotTasks holds details about calls to the DescribeImportSnapshotTasks method.
		DescribeImportSnapshotTasks []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeImportSnapshotTasksInput
		}
		// DescribeImportSnapshotTasksPages holds details about calls to the DescribeImportSnapshotTasksPages method.
		DescribeImportSnapshotTasksPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeImportSnapshotTasksInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeImportSnapshotTasksOutput, bool) bool
		}
		// DescribeImportSnapshotTasksPagesWithContext holds details about calls to the DescribeImportSnapshotTasksPagesWithContext method.
		DescribeImportSnapshotTasksPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeImportSnapshotTasksInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeImportSnapshotTasksOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeImportSnapshotTasksRequest holds details about calls to the DescribeImportSnapshotTasksRequest method.
		DescribeImportSnapshotTasksRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeImportSnapshotTasksInput
		}
		// DescribeImportSnapshotTasksWithContext holds details about calls to the DescribeImportSnapshotTasksWithContext method.
		DescribeImportSnapshotTasksWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeImportSnapshotTasksInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeInstanceAttribute holds details about calls to the DescribeInstanceAttribute method.
		DescribeInstanceAttribute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeInstanceAttributeInput
		}
		// DescribeInstanceAttributeRequest holds details about calls to the DescribeInstanceAttributeRequest method.
		DescribeInstanceAttributeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeInstanceAttributeInput
		}
		// DescribeInstanceAttributeWithContext holds details about calls to the DescribeInstanceAttributeWithContext method.
		DescribeInstanceAttributeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeInstanceAttributeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeInstanceCreditSpecifications holds details about calls to the DescribeInstanceCreditSpecifications method.
		DescribeInstanceCreditSpecifications []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeInstanceCreditSpecificationsInput
		}
		// DescribeInstanceCreditSpecificationsPages holds details about calls to the DescribeInstanceCreditSpecificationsPages method.
		DescribeInstanceCreditSpecificationsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeInstanceCreditSpecificationsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeInstanceCreditSpecificationsOutput, bool) bool
		}
		// DescribeInstanceCreditSpecificationsPagesWithContext holds details about calls to the DescribeInstanceCreditSpecificationsPagesWithContext method.
		DescribeInstanceCreditSpecificationsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeInstanceCreditSpecificationsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeInstanceCreditSpecificationsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeInstanceCreditSpecificationsRequest holds details about calls to the DescribeInstanceCreditSpecificationsRequest method.
		DescribeInstanceCreditSpecificationsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeInstanceCreditSpecificationsInput
		}
		// DescribeInstanceCreditSpecificationsWithContext holds details about calls to the DescribeInstanceCreditSpecificationsWithContext method.
		DescribeInstanceCreditSpecificationsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeInstanceCreditSpecificationsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeInstanceStatus holds details about calls to the DescribeInstanceStatus method.
		DescribeInstanceStatus []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeInstanceStatusInput
		}
		// DescribeInstanceStatusPages holds details about calls to the DescribeInstanceStatusPages method.
		DescribeInstanceStatusPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeInstanceStatusInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeInstanceStatusOutput, bool) bool
		}
		// DescribeInstanceStatusPagesWithContext holds details about calls to the DescribeInstanceStatusPagesWithContext method.
		DescribeInstanceStatusPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeInstanceStatusInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeInstanceStatusOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeInstanceStatusRequest holds details about calls to the DescribeInstanceStatusRequest method.
		DescribeInstanceStatusRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeInstanceStatusInput
		}
		// DescribeInstanceStatusWithContext holds details about calls to the DescribeInstanceStatusWithContext method.
		DescribeInstanceStatusWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeInstanceStatusInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeInstanceTypeOfferings holds details about calls to the DescribeInstanceTypeOfferings method.
		DescribeInstanceTypeOfferings []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeInstanceTypeOfferingsInput
		}
		// DescribeInstanceTypeOfferingsRequest holds details about calls to the DescribeInstanceTypeOfferingsRequest method.
		DescribeInstanceTypeOfferingsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeInstanceTypeOfferingsInput
		}
		// DescribeInstanceTypeOfferingsWithContext holds details about calls to the DescribeInstanceTypeOfferingsWithContext method.
		DescribeInstanceTypeOfferingsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeInstanceTypeOfferingsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeInstanceTypes holds details about calls to the DescribeInstanceTypes method.
		DescribeInstanceTypes []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeInstanceTypesInput
		}
		// DescribeInstanceTypesRequest holds details about calls to the DescribeInstanceTypesRequest method.
		DescribeInstanceTypesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeInstanceTypesInput
		}
		// DescribeInstanceTypesWithContext holds details about calls to the DescribeInstanceTypesWithContext method.
		DescribeInstanceTypesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeInstanceTypesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeInstances holds details about calls to the DescribeInstances method.
		DescribeInstances []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeInstancesInput
		}
		// DescribeInstancesPages holds details about calls to the DescribeInstancesPages method.
		DescribeInstancesPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeInstancesInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeInstancesOutput, bool) bool
		}
		// DescribeInstancesPagesWithContext holds details about calls to the DescribeInstancesPagesWithContext method.
		DescribeInstancesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeInstancesInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeInstancesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeInstancesRequest holds details about calls to the DescribeInstancesRequest method.
		DescribeInstancesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeInstancesInput
		}
		// DescribeInstancesWithContext holds details about calls to the DescribeInstancesWithContext method.
		DescribeInstancesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeInstancesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeInternetGateways holds details about calls to the DescribeInternetGateways method.
		DescribeInternetGateways []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeInternetGatewaysInput
		}
		// DescribeInternetGatewaysPages holds details about calls to the DescribeInternetGatewaysPages method.
		DescribeInternetGatewaysPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeInternetGatewaysInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeInternetGatewaysOutput, bool) bool
		}
		// DescribeInternetGatewaysPagesWithContext holds details about calls to the DescribeInternetGatewaysPagesWithContext method.
		DescribeInternetGatewaysPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeInternetGatewaysInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeInternetGatewaysOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeInternetGatewaysRequest holds details about calls to the DescribeInternetGatewaysRequest method.
		DescribeInternetGatewaysRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeInternetGatewaysInput
		}
		// DescribeInternetGatewaysWithContext holds details about calls to the DescribeInternetGatewaysWithContext method.
		DescribeInternetGatewaysWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeInternetGatewaysInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeIpv6Pools holds details about calls to the DescribeIpv6Pools method.
		DescribeIpv6Pools []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeIpv6PoolsInput
		}
		// DescribeIpv6PoolsPages holds details about calls to the DescribeIpv6PoolsPages method.
		DescribeIpv6PoolsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeIpv6PoolsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeIpv6PoolsOutput, bool) bool
		}
		// DescribeIpv6PoolsPagesWithContext holds details about calls to the DescribeIpv6PoolsPagesWithContext method.
		DescribeIpv6PoolsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeIpv6PoolsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeIpv6PoolsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeIpv6PoolsRequest holds details about calls to the DescribeIpv6PoolsRequest method.
		DescribeIpv6PoolsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeIpv6PoolsInput
		}
		// DescribeIpv6PoolsWithContext holds details about calls to the DescribeIpv6PoolsWithContext method.
		DescribeIpv6PoolsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeIpv6PoolsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeKeyPairs holds details about calls to the DescribeKeyPairs method.
		DescribeKeyPairs []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeKeyPairsInput
		}
		// DescribeKeyPairsRequest holds details about calls to the DescribeKeyPairsRequest method.
		DescribeKeyPairsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeKeyPairsInput
		}
		// DescribeKeyPairsWithContext holds details about calls to the DescribeKeyPairsWithContext method.
		DescribeKeyPairsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeKeyPairsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeLaunchTemplateVersions holds details about calls to the DescribeLaunchTemplateVersions method.
		DescribeLaunchTemplateVersions []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeLaunchTemplateVersionsInput
		}
		// DescribeLaunchTemplateVersionsPages holds details about calls to the DescribeLaunchTemplateVersionsPages method.
		DescribeLaunchTemplateVersionsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeLaunchTemplateVersionsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeLaunchTemplateVersionsOutput, bool) bool
		}
		// DescribeLaunchTemplateVersionsPagesWithContext holds details about calls to the DescribeLaunchTemplateVersionsPagesWithContext method.
		DescribeLaunchTemplateVersionsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeLaunchTemplateVersionsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeLaunchTemplateVersionsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeLaunchTemplateVersionsRequest holds details about calls to the DescribeLaunchTemplateVersionsRequest method.
		DescribeLaunchTemplateVersionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeLaunchTemplateVersionsInput
		}
		// DescribeLaunchTemplateVersionsWithContext holds details about calls to the DescribeLaunchTemplateVersionsWithContext method.
		DescribeLaunchTemplateVersionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeLaunchTemplateVersionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeLaunchTemplates holds details about calls to the DescribeLaunchTemplates method.
		DescribeLaunchTemplates []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeLaunchTemplatesInput
		}
		// DescribeLaunchTemplatesPages holds details about calls to the DescribeLaunchTemplatesPages method.
		DescribeLaunchTemplatesPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeLaunchTemplatesInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeLaunchTemplatesOutput, bool) bool
		}
		// DescribeLaunchTemplatesPagesWithContext holds details about calls to the DescribeLaunchTemplatesPagesWithContext method.
		DescribeLaunchTemplatesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeLaunchTemplatesInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeLaunchTemplatesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeLaunchTemplatesRequest holds details about calls to the DescribeLaunchTemplatesRequest method.
		DescribeLaunchTemplatesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeLaunchTemplatesInput
		}
		// DescribeLaunchTemplatesWithContext holds details about calls to the DescribeLaunchTemplatesWithContext method.
		DescribeLaunchTemplatesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeLaunchTemplatesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations holds details about calls to the DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations method.
		DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput
		}
		// DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest holds details about calls to the DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest method.
		DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput
		}
		// DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext holds details about calls to the DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext method.
		DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeLocalGatewayRouteTableVpcAssociations holds details about calls to the DescribeLocalGatewayRouteTableVpcAssociations method.
		DescribeLocalGatewayRouteTableVpcAssociations []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput
		}
		// DescribeLocalGatewayRouteTableVpcAssociationsRequest holds details about calls to the DescribeLocalGatewayRouteTableVpcAssociationsRequest method.
		DescribeLocalGatewayRouteTableVpcAssociationsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput
		}
		// DescribeLocalGatewayRouteTableVpcAssociationsWithContext holds details about calls to the DescribeLocalGatewayRouteTableVpcAssociationsWithContext method.
		DescribeLocalGatewayRouteTableVpcAssociationsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeLocalGatewayRouteTables holds details about calls to the DescribeLocalGatewayRouteTables method.
		DescribeLocalGatewayRouteTables []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeLocalGatewayRouteTablesInput
		}
		// DescribeLocalGatewayRouteTablesRequest holds details about calls to the DescribeLocalGatewayRouteTablesRequest method.
		DescribeLocalGatewayRouteTablesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeLocalGatewayRouteTablesInput
		}
		// DescribeLocalGatewayRouteTablesWithContext holds details about calls to the DescribeLocalGatewayRouteTablesWithContext method.
		DescribeLocalGatewayRouteTablesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeLocalGatewayRouteTablesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeLocalGatewayVirtualInterfaceGroups holds details about calls to the DescribeLocalGatewayVirtualInterfaceGroups method.
		DescribeLocalGatewayVirtualInterfaceGroups []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput
		}
		// DescribeLocalGatewayVirtualInterfaceGroupsRequest holds details about calls to the DescribeLocalGatewayVirtualInterfaceGroupsRequest method.
		DescribeLocalGatewayVirtualInterfaceGroupsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput
		}
		// DescribeLocalGatewayVirtualInterfaceGroupsWithContext holds details about calls to the DescribeLocalGatewayVirtualInterfaceGroupsWithContext method.
		DescribeLocalGatewayVirtualInterfaceGroupsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeLocalGatewayVirtualInterfaces holds details about calls to the DescribeLocalGatewayVirtualInterfaces method.
		DescribeLocalGatewayVirtualInterfaces []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeLocalGatewayVirtualInterfacesInput
		}
		// DescribeLocalGatewayVirtualInterfacesRequest holds details about calls to the DescribeLocalGatewayVirtualInterfacesRequest method.
		DescribeLocalGatewayVirtualInterfacesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeLocalGatewayVirtualInterfacesInput
		}
		// DescribeLocalGatewayVirtualInterfacesWithContext holds details about calls to the DescribeLocalGatewayVirtualInterfacesWithContext method.
		DescribeLocalGatewayVirtualInterfacesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeLocalGatewayVirtualInterfacesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeLocalGateways holds details about calls to the DescribeLocalGateways method.
		DescribeLocalGateways []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeLocalGatewaysInput
		}
		// DescribeLocalGatewaysRequest holds details about calls to the DescribeLocalGatewaysRequest method.
		DescribeLocalGatewaysRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeLocalGatewaysInput
		}
		// DescribeLocalGatewaysWithContext holds details about calls to the DescribeLocalGatewaysWithContext method.
		DescribeLocalGatewaysWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeLocalGatewaysInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeMovingAddresses holds details about calls to the DescribeMovingAddresses method.
		DescribeMovingAddresses []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeMovingAddressesInput
		}
		// DescribeMovingAddressesPages holds details about calls to the DescribeMovingAddressesPages method.
		DescribeMovingAddressesPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeMovingAddressesInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeMovingAddressesOutput, bool) bool
		}
		// DescribeMovingAddressesPagesWithContext holds details about calls to the DescribeMovingAddressesPagesWithContext method.
		DescribeMovingAddressesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeMovingAddressesInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeMovingAddressesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeMovingAddressesRequest holds details about calls to the DescribeMovingAddressesRequest method.
		DescribeMovingAddressesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeMovingAddressesInput
		}
		// DescribeMovingAddressesWithContext holds details about calls to the DescribeMovingAddressesWithContext method.
		DescribeMovingAddressesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeMovingAddressesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeNatGateways holds details about calls to the DescribeNatGateways method.
		DescribeNatGateways []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeNatGatewaysInput
		}
		// DescribeNatGatewaysPages holds details about calls to the DescribeNatGatewaysPages method.
		DescribeNatGatewaysPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeNatGatewaysInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeNatGatewaysOutput, bool) bool
		}
		// DescribeNatGatewaysPagesWithContext holds details about calls to the DescribeNatGatewaysPagesWithContext method.
		DescribeNatGatewaysPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeNatGatewaysInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeNatGatewaysOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeNatGatewaysRequest holds details about calls to the DescribeNatGatewaysRequest method.
		DescribeNatGatewaysRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeNatGatewaysInput
		}
		// DescribeNatGatewaysWithContext holds details about calls to the DescribeNatGatewaysWithContext method.
		DescribeNatGatewaysWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeNatGatewaysInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeNetworkAcls holds details about calls to the DescribeNetworkAcls method.
		DescribeNetworkAcls []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeNetworkAclsInput
		}
		// DescribeNetworkAclsPages holds details about calls to the DescribeNetworkAclsPages method.
		DescribeNetworkAclsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeNetworkAclsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeNetworkAclsOutput, bool) bool
		}
		// DescribeNetworkAclsPagesWithContext holds details about calls to the DescribeNetworkAclsPagesWithContext method.
		DescribeNetworkAclsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeNetworkAclsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeNetworkAclsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeNetworkAclsRequest holds details about calls to the DescribeNetworkAclsRequest method.
		DescribeNetworkAclsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeNetworkAclsInput
		}
		// DescribeNetworkAclsWithContext holds details about calls to the DescribeNetworkAclsWithContext method.
		DescribeNetworkAclsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeNetworkAclsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeNetworkInterfaceAttribute holds details about calls to the DescribeNetworkInterfaceAttribute method.
		DescribeNetworkInterfaceAttribute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeNetworkInterfaceAttributeInput
		}
		// DescribeNetworkInterfaceAttributeRequest holds details about calls to the DescribeNetworkInterfaceAttributeRequest method.
		DescribeNetworkInterfaceAttributeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeNetworkInterfaceAttributeInput
		}
		// DescribeNetworkInterfaceAttributeWithContext holds details about calls to the DescribeNetworkInterfaceAttributeWithContext method.
		DescribeNetworkInterfaceAttributeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeNetworkInterfaceAttributeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeNetworkInterfacePermissions holds details about calls to the DescribeNetworkInterfacePermissions method.
		DescribeNetworkInterfacePermissions []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeNetworkInterfacePermissionsInput
		}
		// DescribeNetworkInterfacePermissionsPages holds details about calls to the DescribeNetworkInterfacePermissionsPages method.
		DescribeNetworkInterfacePermissionsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeNetworkInterfacePermissionsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeNetworkInterfacePermissionsOutput, bool) bool
		}
		// DescribeNetworkInterfacePermissionsPagesWithContext holds details about calls to the DescribeNetworkInterfacePermissionsPagesWithContext method.
		DescribeNetworkInterfacePermissionsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeNetworkInterfacePermissionsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeNetworkInterfacePermissionsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeNetworkInterfacePermissionsRequest holds details about calls to the DescribeNetworkInterfacePermissionsRequest method.
		DescribeNetworkInterfacePermissionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeNetworkInterfacePermissionsInput
		}
		// DescribeNetworkInterfacePermissionsWithContext holds details about calls to the DescribeNetworkInterfacePermissionsWithContext method.
		DescribeNetworkInterfacePermissionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeNetworkInterfacePermissionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeNetworkInterfaces holds details about calls to the DescribeNetworkInterfaces method.
		DescribeNetworkInterfaces []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeNetworkInterfacesInput
		}
		// DescribeNetworkInterfacesPages holds details about calls to the DescribeNetworkInterfacesPages method.
		DescribeNetworkInterfacesPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeNetworkInterfacesInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeNetworkInterfacesOutput, bool) bool
		}
		// DescribeNetworkInterfacesPagesWithContext holds details about calls to the DescribeNetworkInterfacesPagesWithContext method.
		DescribeNetworkInterfacesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeNetworkInterfacesInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeNetworkInterfacesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeNetworkInterfacesRequest holds details about calls to the DescribeNetworkInterfacesRequest method.
		DescribeNetworkInterfacesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeNetworkInterfacesInput
		}
		// DescribeNetworkInterfacesWithContext holds details about calls to the DescribeNetworkInterfacesWithContext method.
		DescribeNetworkInterfacesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeNetworkInterfacesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribePlacementGroups holds details about calls to the DescribePlacementGroups method.
		DescribePlacementGroups []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribePlacementGroupsInput
		}
		// DescribePlacementGroupsRequest holds details about calls to the DescribePlacementGroupsRequest method.
		DescribePlacementGroupsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribePlacementGroupsInput
		}
		// DescribePlacementGroupsWithContext holds details about calls to the DescribePlacementGroupsWithContext method.
		DescribePlacementGroupsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribePlacementGroupsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribePrefixLists holds details about calls to the DescribePrefixLists method.
		DescribePrefixLists []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribePrefixListsInput
		}
		// DescribePrefixListsPages holds details about calls to the DescribePrefixListsPages method.
		DescribePrefixListsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribePrefixListsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribePrefixListsOutput, bool) bool
		}
		// DescribePrefixListsPagesWithContext holds details about calls to the DescribePrefixListsPagesWithContext method.
		DescribePrefixListsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribePrefixListsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribePrefixListsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribePrefixListsRequest holds details about calls to the DescribePrefixListsRequest method.
		DescribePrefixListsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribePrefixListsInput
		}
		// DescribePrefixListsWithContext holds details about calls to the DescribePrefixListsWithContext method.
		DescribePrefixListsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribePrefixListsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribePrincipalIdFormat holds details about calls to the DescribePrincipalIdFormat method.
		DescribePrincipalIdFormat []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribePrincipalIdFormatInput
		}
		// DescribePrincipalIdFormatPages holds details about calls to the DescribePrincipalIdFormatPages method.
		DescribePrincipalIdFormatPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribePrincipalIdFormatInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribePrincipalIdFormatOutput, bool) bool
		}
		// DescribePrincipalIdFormatPagesWithContext holds details about calls to the DescribePrincipalIdFormatPagesWithContext method.
		DescribePrincipalIdFormatPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribePrincipalIdFormatInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribePrincipalIdFormatOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribePrincipalIdFormatRequest holds details about calls to the DescribePrincipalIdFormatRequest method.
		DescribePrincipalIdFormatRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribePrincipalIdFormatInput
		}
		// DescribePrincipalIdFormatWithContext holds details about calls to the DescribePrincipalIdFormatWithContext method.
		DescribePrincipalIdFormatWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribePrincipalIdFormatInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribePublicIpv4Pools holds details about calls to the DescribePublicIpv4Pools method.
		DescribePublicIpv4Pools []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribePublicIpv4PoolsInput
		}
		// DescribePublicIpv4PoolsPages holds details about calls to the DescribePublicIpv4PoolsPages method.
		DescribePublicIpv4PoolsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribePublicIpv4PoolsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribePublicIpv4PoolsOutput, bool) bool
		}
		// DescribePublicIpv4PoolsPagesWithContext holds details about calls to the DescribePublicIpv4PoolsPagesWithContext method.
		DescribePublicIpv4PoolsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribePublicIpv4PoolsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribePublicIpv4PoolsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribePublicIpv4PoolsRequest holds details about calls to the DescribePublicIpv4PoolsRequest method.
		DescribePublicIpv4PoolsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribePublicIpv4PoolsInput
		}
		// DescribePublicIpv4PoolsWithContext holds details about calls to the DescribePublicIpv4PoolsWithContext method.
		DescribePublicIpv4PoolsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribePublicIpv4PoolsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeRegions holds details about calls to the DescribeRegions method.
		DescribeRegions []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeRegionsInput
		}
		// DescribeRegionsRequest holds details about calls to the DescribeRegionsRequest method.
		DescribeRegionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeRegionsInput
		}
		// DescribeRegionsWithContext holds details about calls to the DescribeRegionsWithContext method.
		DescribeRegionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeRegionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeReservedInstances holds details about calls to the DescribeReservedInstances method.
		DescribeReservedInstances []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeReservedInstancesInput
		}
		// DescribeReservedInstancesListings holds details about calls to the DescribeReservedInstancesListings method.
		DescribeReservedInstancesListings []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeReservedInstancesListingsInput
		}
		// DescribeReservedInstancesListingsRequest holds details about calls to the DescribeReservedInstancesListingsRequest method.
		DescribeReservedInstancesListingsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeReservedInstancesListingsInput
		}
		// DescribeReservedInstancesListingsWithContext holds details about calls to the DescribeReservedInstancesListingsWithContext method.
		DescribeReservedInstancesListingsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeReservedInstancesListingsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeReservedInstancesModifications holds details about calls to the DescribeReservedInstancesModifications method.
		DescribeReservedInstancesModifications []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeReservedInstancesModificationsInput
		}
		// DescribeReservedInstancesModificationsPages holds details about calls to the DescribeReservedInstancesModificationsPages method.
		DescribeReservedInstancesModificationsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeReservedInstancesModificationsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool
		}
		// DescribeReservedInstancesModificationsPagesWithContext holds details about calls to the DescribeReservedInstancesModificationsPagesWithContext method.
		DescribeReservedInstancesModificationsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeReservedInstancesModificationsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeReservedInstancesModificationsRequest holds details about calls to the DescribeReservedInstancesModificationsRequest method.
		DescribeReservedInstancesModificationsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeReservedInstancesModificationsInput
		}
		// DescribeReservedInstancesModificationsWithContext holds details about calls to the DescribeReservedInstancesModificationsWithContext method.
		DescribeReservedInstancesModificationsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeReservedInstancesModificationsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeReservedInstancesOfferings holds details about calls to the DescribeReservedInstancesOfferings method.
		DescribeReservedInstancesOfferings []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeReservedInstancesOfferingsInput
		}
		// DescribeReservedInstancesOfferingsPages holds details about calls to the DescribeReservedInstancesOfferingsPages method.
		DescribeReservedInstancesOfferingsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeReservedInstancesOfferingsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool
		}
		// DescribeReservedInstancesOfferingsPagesWithContext holds details about calls to the DescribeReservedInstancesOfferingsPagesWithContext method.
		DescribeReservedInstancesOfferingsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeReservedInstancesOfferingsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeReservedInstancesOfferingsRequest holds details about calls to the DescribeReservedInstancesOfferingsRequest method.
		DescribeReservedInstancesOfferingsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeReservedInstancesOfferingsInput
		}
		// DescribeReservedInstancesOfferingsWithContext holds details about calls to the DescribeReservedInstancesOfferingsWithContext method.
		DescribeReservedInstancesOfferingsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeReservedInstancesOfferingsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeReservedInstancesRequest holds details about calls to the DescribeReservedInstancesRequest method.
		DescribeReservedInstancesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeReservedInstancesInput
		}
		// DescribeReservedInstancesWithContext holds details about calls to the DescribeReservedInstancesWithContext method.
		DescribeReservedInstancesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeReservedInstancesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeRouteTables holds details about calls to the DescribeRouteTables method.
		DescribeRouteTables []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeRouteTablesInput
		}
		// DescribeRouteTablesPages holds details about calls to the DescribeRouteTablesPages method.
		DescribeRouteTablesPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeRouteTablesInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeRouteTablesOutput, bool) bool
		}
		// DescribeRouteTablesPagesWithContext holds details about calls to the DescribeRouteTablesPagesWithContext method.
		DescribeRouteTablesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeRouteTablesInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeRouteTablesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeRouteTablesRequest holds details about calls to the DescribeRouteTablesRequest method.
		DescribeRouteTablesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeRouteTablesInput
		}
		// DescribeRouteTablesWithContext holds details about calls to the DescribeRouteTablesWithContext method.
		DescribeRouteTablesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeRouteTablesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeScheduledInstanceAvailability holds details about calls to the DescribeScheduledInstanceAvailability method.
		DescribeScheduledInstanceAvailability []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeScheduledInstanceAvailabilityInput
		}
		// DescribeScheduledInstanceAvailabilityPages holds details about calls to the DescribeScheduledInstanceAvailabilityPages method.
		DescribeScheduledInstanceAvailabilityPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeScheduledInstanceAvailabilityInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeScheduledInstanceAvailabilityOutput, bool) bool
		}
		// DescribeScheduledInstanceAvailabilityPagesWithContext holds details about calls to the DescribeScheduledInstanceAvailabilityPagesWithContext method.
		DescribeScheduledInstanceAvailabilityPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeScheduledInstanceAvailabilityInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeScheduledInstanceAvailabilityOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeScheduledInstanceAvailabilityRequest holds details about calls to the DescribeScheduledInstanceAvailabilityRequest method.
		DescribeScheduledInstanceAvailabilityRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeScheduledInstanceAvailabilityInput
		}
		// DescribeScheduledInstanceAvailabilityWithContext holds details about calls to the DescribeScheduledInstanceAvailabilityWithContext method.
		DescribeScheduledInstanceAvailabilityWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeScheduledInstanceAvailabilityInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeScheduledInstances holds details about calls to the DescribeScheduledInstances method.
		DescribeScheduledInstances []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeScheduledInstancesInput
		}
		// DescribeScheduledInstancesPages holds details about calls to the DescribeScheduledInstancesPages method.
		DescribeScheduledInstancesPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeScheduledInstancesInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeScheduledInstancesOutput, bool) bool
		}
		// DescribeScheduledInstancesPagesWithContext holds details about calls to the DescribeScheduledInstancesPagesWithContext method.
		DescribeScheduledInstancesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeScheduledInstancesInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeScheduledInstancesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeScheduledInstancesRequest holds details about calls to the DescribeScheduledInstancesRequest method.
		DescribeScheduledInstancesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeScheduledInstancesInput
		}
		// DescribeScheduledInstancesWithContext holds details about calls to the DescribeScheduledInstancesWithContext method.
		DescribeScheduledInstancesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeScheduledInstancesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeSecurityGroupReferences holds details about calls to the DescribeSecurityGroupReferences method.
		DescribeSecurityGroupReferences []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSecurityGroupReferencesInput
		}
		// DescribeSecurityGroupReferencesRequest holds details about calls to the DescribeSecurityGroupReferencesRequest method.
		DescribeSecurityGroupReferencesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSecurityGroupReferencesInput
		}
		// DescribeSecurityGroupReferencesWithContext holds details about calls to the DescribeSecurityGroupReferencesWithContext method.
		DescribeSecurityGroupReferencesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeSecurityGroupReferencesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeSecurityGroups holds details about calls to the DescribeSecurityGroups method.
		DescribeSecurityGroups []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSecurityGroupsInput
		}
		// DescribeSecurityGroupsPages holds details about calls to the DescribeSecurityGroupsPages method.
		DescribeSecurityGroupsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSecurityGroupsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeSecurityGroupsOutput, bool) bool
		}
		// DescribeSecurityGroupsPagesWithContext holds details about calls to the DescribeSecurityGroupsPagesWithContext method.
		DescribeSecurityGroupsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeSecurityGroupsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeSecurityGroupsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeSecurityGroupsRequest holds details about calls to the DescribeSecurityGroupsRequest method.
		DescribeSecurityGroupsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSecurityGroupsInput
		}
		// DescribeSecurityGroupsWithContext holds details about calls to the DescribeSecurityGroupsWithContext method.
		DescribeSecurityGroupsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeSecurityGroupsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeSnapshotAttribute holds details about calls to the DescribeSnapshotAttribute method.
		DescribeSnapshotAttribute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSnapshotAttributeInput
		}
		// DescribeSnapshotAttributeRequest holds details about calls to the DescribeSnapshotAttributeRequest method.
		DescribeSnapshotAttributeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSnapshotAttributeInput
		}
		// DescribeSnapshotAttributeWithContext holds details about calls to the DescribeSnapshotAttributeWithContext method.
		DescribeSnapshotAttributeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeSnapshotAttributeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeSnapshots holds details about calls to the DescribeSnapshots method.
		DescribeSnapshots []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSnapshotsInput
		}
		// DescribeSnapshotsPages holds details about calls to the DescribeSnapshotsPages method.
		DescribeSnapshotsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSnapshotsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeSnapshotsOutput, bool) bool
		}
		// DescribeSnapshotsPagesWithContext holds details about calls to the DescribeSnapshotsPagesWithContext method.
		DescribeSnapshotsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeSnapshotsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeSnapshotsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeSnapshotsRequest holds details about calls to the DescribeSnapshotsRequest method.
		DescribeSnapshotsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSnapshotsInput
		}
		// DescribeSnapshotsWithContext holds details about calls to the DescribeSnapshotsWithContext method.
		DescribeSnapshotsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeSnapshotsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeSpotDatafeedSubscription holds details about calls to the DescribeSpotDatafeedSubscription method.
		DescribeSpotDatafeedSubscription []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSpotDatafeedSubscriptionInput
		}
		// DescribeSpotDatafeedSubscriptionRequest holds details about calls to the DescribeSpotDatafeedSubscriptionRequest method.
		DescribeSpotDatafeedSubscriptionRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSpotDatafeedSubscriptionInput
		}
		// DescribeSpotDatafeedSubscriptionWithContext holds details about calls to the DescribeSpotDatafeedSubscriptionWithContext method.
		DescribeSpotDatafeedSubscriptionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeSpotDatafeedSubscriptionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeSpotFleetInstances holds details about calls to the DescribeSpotFleetInstances method.
		DescribeSpotFleetInstances []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSpotFleetInstancesInput
		}
		// DescribeSpotFleetInstancesRequest holds details about calls to the DescribeSpotFleetInstancesRequest method.
		DescribeSpotFleetInstancesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSpotFleetInstancesInput
		}
		// DescribeSpotFleetInstancesWithContext holds details about calls to the DescribeSpotFleetInstancesWithContext method.
		DescribeSpotFleetInstancesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeSpotFleetInstancesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeSpotFleetRequestHistory holds details about calls to the DescribeSpotFleetRequestHistory method.
		DescribeSpotFleetRequestHistory []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSpotFleetRequestHistoryInput
		}
		// DescribeSpotFleetRequestHistoryRequest holds details about calls to the DescribeSpotFleetRequestHistoryRequest method.
		DescribeSpotFleetRequestHistoryRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSpotFleetRequestHistoryInput
		}
		// DescribeSpotFleetRequestHistoryWithContext holds details about calls to the DescribeSpotFleetRequestHistoryWithContext method.
		DescribeSpotFleetRequestHistoryWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeSpotFleetRequestHistoryInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeSpotFleetRequests holds details about calls to the DescribeSpotFleetRequests method.
		DescribeSpotFleetRequests []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSpotFleetRequestsInput
		}
		// DescribeSpotFleetRequestsPages holds details about calls to the DescribeSpotFleetRequestsPages method.
		DescribeSpotFleetRequestsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSpotFleetRequestsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool
		}
		// DescribeSpotFleetRequestsPagesWithContext holds details about calls to the DescribeSpotFleetRequestsPagesWithContext method.
		DescribeSpotFleetRequestsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeSpotFleetRequestsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeSpotFleetRequestsRequest holds details about calls to the DescribeSpotFleetRequestsRequest method.
		DescribeSpotFleetRequestsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSpotFleetRequestsInput
		}
		// DescribeSpotFleetRequestsWithContext holds details about calls to the DescribeSpotFleetRequestsWithContext method.
		DescribeSpotFleetRequestsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeSpotFleetRequestsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeSpotInstanceRequests holds details about calls to the DescribeSpotInstanceRequests method.
		DescribeSpotInstanceRequests []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSpotInstanceRequestsInput
		}
		// DescribeSpotInstanceRequestsPages holds details about calls to the DescribeSpotInstanceRequestsPages method.
		DescribeSpotInstanceRequestsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSpotInstanceRequestsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeSpotInstanceRequestsOutput, bool) bool
		}
		// DescribeSpotInstanceRequestsPagesWithContext holds details about calls to the DescribeSpotInstanceRequestsPagesWithContext method.
		DescribeSpotInstanceRequestsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeSpotInstanceRequestsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeSpotInstanceRequestsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeSpotInstanceRequestsRequest holds details about calls to the DescribeSpotInstanceRequestsRequest method.
		DescribeSpotInstanceRequestsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSpotInstanceRequestsInput
		}
		// DescribeSpotInstanceRequestsWithContext holds details about calls to the DescribeSpotInstanceRequestsWithContext method.
		DescribeSpotInstanceRequestsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeSpotInstanceRequestsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeSpotPriceHistory holds details about calls to the DescribeSpotPriceHistory method.
		DescribeSpotPriceHistory []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSpotPriceHistoryInput
		}
		// DescribeSpotPriceHistoryPages holds details about calls to the DescribeSpotPriceHistoryPages method.
		DescribeSpotPriceHistoryPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSpotPriceHistoryInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool
		}
		// DescribeSpotPriceHistoryPagesWithContext holds details about calls to the DescribeSpotPriceHistoryPagesWithContext method.
		DescribeSpotPriceHistoryPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeSpotPriceHistoryInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeSpotPriceHistoryRequest holds details about calls to the DescribeSpotPriceHistoryRequest method.
		DescribeSpotPriceHistoryRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSpotPriceHistoryInput
		}
		// DescribeSpotPriceHistoryWithContext holds details about calls to the DescribeSpotPriceHistoryWithContext method.
		DescribeSpotPriceHistoryWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeSpotPriceHistoryInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeStaleSecurityGroups holds details about calls to the DescribeStaleSecurityGroups method.
		DescribeStaleSecurityGroups []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeStaleSecurityGroupsInput
		}
		// DescribeStaleSecurityGroupsPages holds details about calls to the DescribeStaleSecurityGroupsPages method.
		DescribeStaleSecurityGroupsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeStaleSecurityGroupsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeStaleSecurityGroupsOutput, bool) bool
		}
		// DescribeStaleSecurityGroupsPagesWithContext holds details about calls to the DescribeStaleSecurityGroupsPagesWithContext method.
		DescribeStaleSecurityGroupsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeStaleSecurityGroupsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeStaleSecurityGroupsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeStaleSecurityGroupsRequest holds details about calls to the DescribeStaleSecurityGroupsRequest method.
		DescribeStaleSecurityGroupsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeStaleSecurityGroupsInput
		}
		// DescribeStaleSecurityGroupsWithContext holds details about calls to the DescribeStaleSecurityGroupsWithContext method.
		DescribeStaleSecurityGroupsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeStaleSecurityGroupsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeSubnets holds details about calls to the DescribeSubnets method.
		DescribeSubnets []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSubnetsInput
		}
		// DescribeSubnetsPages holds details about calls to the DescribeSubnetsPages method.
		DescribeSubnetsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSubnetsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeSubnetsOutput, bool) bool
		}
		// DescribeSubnetsPagesWithContext holds details about calls to the DescribeSubnetsPagesWithContext method.
		DescribeSubnetsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeSubnetsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeSubnetsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeSubnetsRequest holds details about calls to the DescribeSubnetsRequest method.
		DescribeSubnetsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSubnetsInput
		}
		// DescribeSubnetsWithContext holds details about calls to the DescribeSubnetsWithContext method.
		DescribeSubnetsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeSubnetsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeTags holds details about calls to the DescribeTags method.
		DescribeTags []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTagsInput
		}
		// DescribeTagsPages holds details about calls to the DescribeTagsPages method.
		DescribeTagsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTagsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeTagsOutput, bool) bool
		}
		// DescribeTagsPagesWithContext holds details about calls to the DescribeTagsPagesWithContext method.
		DescribeTagsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeTagsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeTagsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeTagsRequest holds details about calls to the DescribeTagsRequest method.
		DescribeTagsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTagsInput
		}
		// DescribeTagsWithContext holds details about calls to the DescribeTagsWithContext method.
		DescribeTagsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeTagsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeTrafficMirrorFilters holds details about calls to the DescribeTrafficMirrorFilters method.
		DescribeTrafficMirrorFilters []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTrafficMirrorFiltersInput
		}
		// DescribeTrafficMirrorFiltersPages holds details about calls to the DescribeTrafficMirrorFiltersPages method.
		DescribeTrafficMirrorFiltersPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTrafficMirrorFiltersInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeTrafficMirrorFiltersOutput, bool) bool
		}
		// DescribeTrafficMirrorFiltersPagesWithContext holds details about calls to the DescribeTrafficMirrorFiltersPagesWithContext method.
		DescribeTrafficMirrorFiltersPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeTrafficMirrorFiltersInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeTrafficMirrorFiltersOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeTrafficMirrorFiltersRequest holds details about calls to the DescribeTrafficMirrorFiltersRequest method.
		DescribeTrafficMirrorFiltersRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTrafficMirrorFiltersInput
		}
		// DescribeTrafficMirrorFiltersWithContext holds details about calls to the DescribeTrafficMirrorFiltersWithContext method.
		DescribeTrafficMirrorFiltersWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeTrafficMirrorFiltersInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeTrafficMirrorSessions holds details about calls to the DescribeTrafficMirrorSessions method.
		DescribeTrafficMirrorSessions []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTrafficMirrorSessionsInput
		}
		// DescribeTrafficMirrorSessionsPages holds details about calls to the DescribeTrafficMirrorSessionsPages method.
		DescribeTrafficMirrorSessionsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTrafficMirrorSessionsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeTrafficMirrorSessionsOutput, bool) bool
		}
		// DescribeTrafficMirrorSessionsPagesWithContext holds details about calls to the DescribeTrafficMirrorSessionsPagesWithContext method.
		DescribeTrafficMirrorSessionsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeTrafficMirrorSessionsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeTrafficMirrorSessionsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeTrafficMirrorSessionsRequest holds details about calls to the DescribeTrafficMirrorSessionsRequest method.
		DescribeTrafficMirrorSessionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTrafficMirrorSessionsInput
		}
		// DescribeTrafficMirrorSessionsWithContext holds details about calls to the DescribeTrafficMirrorSessionsWithContext method.
		DescribeTrafficMirrorSessionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeTrafficMirrorSessionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeTrafficMirrorTargets holds details about calls to the DescribeTrafficMirrorTargets method.
		DescribeTrafficMirrorTargets []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTrafficMirrorTargetsInput
		}
		// DescribeTrafficMirrorTargetsPages holds details about calls to the DescribeTrafficMirrorTargetsPages method.
		DescribeTrafficMirrorTargetsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTrafficMirrorTargetsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeTrafficMirrorTargetsOutput, bool) bool
		}
		// DescribeTrafficMirrorTargetsPagesWithContext holds details about calls to the DescribeTrafficMirrorTargetsPagesWithContext method.
		DescribeTrafficMirrorTargetsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeTrafficMirrorTargetsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeTrafficMirrorTargetsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeTrafficMirrorTargetsRequest holds details about calls to the DescribeTrafficMirrorTargetsRequest method.
		DescribeTrafficMirrorTargetsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTrafficMirrorTargetsInput
		}
		// DescribeTrafficMirrorTargetsWithContext holds details about calls to the DescribeTrafficMirrorTargetsWithContext method.
		DescribeTrafficMirrorTargetsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeTrafficMirrorTargetsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeTransitGatewayAttachments holds details about calls to the DescribeTransitGatewayAttachments method.
		DescribeTransitGatewayAttachments []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTransitGatewayAttachmentsInput
		}
		// DescribeTransitGatewayAttachmentsPages holds details about calls to the DescribeTransitGatewayAttachmentsPages method.
		DescribeTransitGatewayAttachmentsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTransitGatewayAttachmentsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeTransitGatewayAttachmentsOutput, bool) bool
		}
		// DescribeTransitGatewayAttachmentsPagesWithContext holds details about calls to the DescribeTransitGatewayAttachmentsPagesWithContext method.
		DescribeTransitGatewayAttachmentsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeTransitGatewayAttachmentsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeTransitGatewayAttachmentsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeTransitGatewayAttachmentsRequest holds details about calls to the DescribeTransitGatewayAttachmentsRequest method.
		DescribeTransitGatewayAttachmentsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTransitGatewayAttachmentsInput
		}
		// DescribeTransitGatewayAttachmentsWithContext holds details about calls to the DescribeTransitGatewayAttachmentsWithContext method.
		DescribeTransitGatewayAttachmentsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeTransitGatewayAttachmentsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeTransitGatewayMulticastDomains holds details about calls to the DescribeTransitGatewayMulticastDomains method.
		DescribeTransitGatewayMulticastDomains []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTransitGatewayMulticastDomainsInput
		}
		// DescribeTransitGatewayMulticastDomainsRequest holds details about calls to the DescribeTransitGatewayMulticastDomainsRequest method.
		DescribeTransitGatewayMulticastDomainsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTransitGatewayMulticastDomainsInput
		}
		// DescribeTransitGatewayMulticastDomainsWithContext holds details about calls to the DescribeTransitGatewayMulticastDomainsWithContext method.
		DescribeTransitGatewayMulticastDomainsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeTransitGatewayMulticastDomainsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeTransitGatewayPeeringAttachments holds details about calls to the DescribeTransitGatewayPeeringAttachments method.
		DescribeTransitGatewayPeeringAttachments []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTransitGatewayPeeringAttachmentsInput
		}
		// DescribeTransitGatewayPeeringAttachmentsRequest holds details about calls to the DescribeTransitGatewayPeeringAttachmentsRequest method.
		DescribeTransitGatewayPeeringAttachmentsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTransitGatewayPeeringAttachmentsInput
		}
		// DescribeTransitGatewayPeeringAttachmentsWithContext holds details about calls to the DescribeTransitGatewayPeeringAttachmentsWithContext method.
		DescribeTransitGatewayPeeringAttachmentsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeTransitGatewayPeeringAttachmentsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeTransitGatewayRouteTables holds details about calls to the DescribeTransitGatewayRouteTables method.
		DescribeTransitGatewayRouteTables []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTransitGatewayRouteTablesInput
		}
		// DescribeTransitGatewayRouteTablesPages holds details about calls to the DescribeTransitGatewayRouteTablesPages method.
		DescribeTransitGatewayRouteTablesPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTransitGatewayRouteTablesInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeTransitGatewayRouteTablesOutput, bool) bool
		}
		// DescribeTransitGatewayRouteTablesPagesWithContext holds details about calls to the DescribeTransitGatewayRouteTablesPagesWithContext method.
		DescribeTransitGatewayRouteTablesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeTransitGatewayRouteTablesInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeTransitGatewayRouteTablesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeTransitGatewayRouteTablesRequest holds details about calls to the DescribeTransitGatewayRouteTablesRequest method.
		DescribeTransitGatewayRouteTablesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTransitGatewayRouteTablesInput
		}
		// DescribeTransitGatewayRouteTablesWithContext holds details about calls to the DescribeTransitGatewayRouteTablesWithContext method.
		DescribeTransitGatewayRouteTablesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeTransitGatewayRouteTablesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeTransitGatewayVpcAttachments holds details about calls to the DescribeTransitGatewayVpcAttachments method.
		DescribeTransitGatewayVpcAttachments []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTransitGatewayVpcAttachmentsInput
		}
		// DescribeTransitGatewayVpcAttachmentsPages holds details about calls to the DescribeTransitGatewayVpcAttachmentsPages method.
		DescribeTransitGatewayVpcAttachmentsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTransitGatewayVpcAttachmentsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeTransitGatewayVpcAttachmentsOutput, bool) bool
		}
		// DescribeTransitGatewayVpcAttachmentsPagesWithContext holds details about calls to the DescribeTransitGatewayVpcAttachmentsPagesWithContext method.
		DescribeTransitGatewayVpcAttachmentsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeTransitGatewayVpcAttachmentsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeTransitGatewayVpcAttachmentsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeTransitGatewayVpcAttachmentsRequest holds details about calls to the DescribeTransitGatewayVpcAttachmentsRequest method.
		DescribeTransitGatewayVpcAttachmentsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTransitGatewayVpcAttachmentsInput
		}
		// DescribeTransitGatewayVpcAttachmentsWithContext holds details about calls to the DescribeTransitGatewayVpcAttachmentsWithContext method.
		DescribeTransitGatewayVpcAttachmentsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeTransitGatewayVpcAttachmentsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeTransitGateways holds details about calls to the DescribeTransitGateways method.
		DescribeTransitGateways []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTransitGatewaysInput
		}
		// DescribeTransitGatewaysPages holds details about calls to the DescribeTransitGatewaysPages method.
		DescribeTransitGatewaysPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTransitGatewaysInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeTransitGatewaysOutput, bool) bool
		}
		// DescribeTransitGatewaysPagesWithContext holds details about calls to the DescribeTransitGatewaysPagesWithContext method.
		DescribeTransitGatewaysPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeTransitGatewaysInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeTransitGatewaysOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeTransitGatewaysRequest holds details about calls to the DescribeTransitGatewaysRequest method.
		DescribeTransitGatewaysRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeTransitGatewaysInput
		}
		// DescribeTransitGatewaysWithContext holds details about calls to the DescribeTransitGatewaysWithContext method.
		DescribeTransitGatewaysWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeTransitGatewaysInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeVolumeAttribute holds details about calls to the DescribeVolumeAttribute method.
		DescribeVolumeAttribute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVolumeAttributeInput
		}
		// DescribeVolumeAttributeRequest holds details about calls to the DescribeVolumeAttributeRequest method.
		DescribeVolumeAttributeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVolumeAttributeInput
		}
		// DescribeVolumeAttributeWithContext holds details about calls to the DescribeVolumeAttributeWithContext method.
		DescribeVolumeAttributeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVolumeAttributeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeVolumeStatus holds details about calls to the DescribeVolumeStatus method.
		DescribeVolumeStatus []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVolumeStatusInput
		}
		// DescribeVolumeStatusPages holds details about calls to the DescribeVolumeStatusPages method.
		DescribeVolumeStatusPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVolumeStatusInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeVolumeStatusOutput, bool) bool
		}
		// DescribeVolumeStatusPagesWithContext holds details about calls to the DescribeVolumeStatusPagesWithContext method.
		DescribeVolumeStatusPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVolumeStatusInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeVolumeStatusOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeVolumeStatusRequest holds details about calls to the DescribeVolumeStatusRequest method.
		DescribeVolumeStatusRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVolumeStatusInput
		}
		// DescribeVolumeStatusWithContext holds details about calls to the DescribeVolumeStatusWithContext method.
		DescribeVolumeStatusWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVolumeStatusInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeVolumes holds details about calls to the DescribeVolumes method.
		DescribeVolumes []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVolumesInput
		}
		// DescribeVolumesModifications holds details about calls to the DescribeVolumesModifications method.
		DescribeVolumesModifications []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVolumesModificationsInput
		}
		// DescribeVolumesModificationsPages holds details about calls to the DescribeVolumesModificationsPages method.
		DescribeVolumesModificationsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVolumesModificationsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeVolumesModificationsOutput, bool) bool
		}
		// DescribeVolumesModificationsPagesWithContext holds details about calls to the DescribeVolumesModificationsPagesWithContext method.
		DescribeVolumesModificationsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVolumesModificationsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeVolumesModificationsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeVolumesModificationsRequest holds details about calls to the DescribeVolumesModificationsRequest method.
		DescribeVolumesModificationsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVolumesModificationsInput
		}
		// DescribeVolumesModificationsWithContext holds details about calls to the DescribeVolumesModificationsWithContext method.
		DescribeVolumesModificationsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVolumesModificationsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeVolumesPages holds details about calls to the DescribeVolumesPages method.
		DescribeVolumesPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVolumesInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeVolumesOutput, bool) bool
		}
		// DescribeVolumesPagesWithContext holds details about calls to the DescribeVolumesPagesWithContext method.
		DescribeVolumesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVolumesInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeVolumesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeVolumesRequest holds details about calls to the DescribeVolumesRequest method.
		DescribeVolumesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVolumesInput
		}
		// DescribeVolumesWithContext holds details about calls to the DescribeVolumesWithContext method.
		DescribeVolumesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVolumesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeVpcAttribute holds details about calls to the DescribeVpcAttribute method.
		DescribeVpcAttribute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcAttributeInput
		}
		// DescribeVpcAttributeRequest holds details about calls to the DescribeVpcAttributeRequest method.
		DescribeVpcAttributeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcAttributeInput
		}
		// DescribeVpcAttributeWithContext holds details about calls to the DescribeVpcAttributeWithContext method.
		DescribeVpcAttributeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpcAttributeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeVpcClassicLink holds details about calls to the DescribeVpcClassicLink method.
		DescribeVpcClassicLink []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcClassicLinkInput
		}
		// DescribeVpcClassicLinkDnsSupport holds details about calls to the DescribeVpcClassicLinkDnsSupport method.
		DescribeVpcClassicLinkDnsSupport []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcClassicLinkDnsSupportInput
		}
		// DescribeVpcClassicLinkDnsSupportPages holds details about calls to the DescribeVpcClassicLinkDnsSupportPages method.
		DescribeVpcClassicLinkDnsSupportPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcClassicLinkDnsSupportInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeVpcClassicLinkDnsSupportOutput, bool) bool
		}
		// DescribeVpcClassicLinkDnsSupportPagesWithContext holds details about calls to the DescribeVpcClassicLinkDnsSupportPagesWithContext method.
		DescribeVpcClassicLinkDnsSupportPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpcClassicLinkDnsSupportInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeVpcClassicLinkDnsSupportOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeVpcClassicLinkDnsSupportRequest holds details about calls to the DescribeVpcClassicLinkDnsSupportRequest method.
		DescribeVpcClassicLinkDnsSupportRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcClassicLinkDnsSupportInput
		}
		// DescribeVpcClassicLinkDnsSupportWithContext holds details about calls to the DescribeVpcClassicLinkDnsSupportWithContext method.
		DescribeVpcClassicLinkDnsSupportWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpcClassicLinkDnsSupportInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeVpcClassicLinkRequest holds details about calls to the DescribeVpcClassicLinkRequest method.
		DescribeVpcClassicLinkRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcClassicLinkInput
		}
		// DescribeVpcClassicLinkWithContext holds details about calls to the DescribeVpcClassicLinkWithContext method.
		DescribeVpcClassicLinkWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpcClassicLinkInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeVpcEndpointConnectionNotifications holds details about calls to the DescribeVpcEndpointConnectionNotifications method.
		DescribeVpcEndpointConnectionNotifications []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcEndpointConnectionNotificationsInput
		}
		// DescribeVpcEndpointConnectionNotificationsPages holds details about calls to the DescribeVpcEndpointConnectionNotificationsPages method.
		DescribeVpcEndpointConnectionNotificationsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcEndpointConnectionNotificationsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeVpcEndpointConnectionNotificationsOutput, bool) bool
		}
		// DescribeVpcEndpointConnectionNotificationsPagesWithContext holds details about calls to the DescribeVpcEndpointConnectionNotificationsPagesWithContext method.
		DescribeVpcEndpointConnectionNotificationsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpcEndpointConnectionNotificationsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeVpcEndpointConnectionNotificationsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeVpcEndpointConnectionNotificationsRequest holds details about calls to the DescribeVpcEndpointConnectionNotificationsRequest method.
		DescribeVpcEndpointConnectionNotificationsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcEndpointConnectionNotificationsInput
		}
		// DescribeVpcEndpointConnectionNotificationsWithContext holds details about calls to the DescribeVpcEndpointConnectionNotificationsWithContext method.
		DescribeVpcEndpointConnectionNotificationsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpcEndpointConnectionNotificationsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeVpcEndpointConnections holds details about calls to the DescribeVpcEndpointConnections method.
		DescribeVpcEndpointConnections []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcEndpointConnectionsInput
		}
		// DescribeVpcEndpointConnectionsPages holds details about calls to the DescribeVpcEndpointConnectionsPages method.
		DescribeVpcEndpointConnectionsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcEndpointConnectionsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeVpcEndpointConnectionsOutput, bool) bool
		}
		// DescribeVpcEndpointConnectionsPagesWithContext holds details about calls to the DescribeVpcEndpointConnectionsPagesWithContext method.
		DescribeVpcEndpointConnectionsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpcEndpointConnectionsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeVpcEndpointConnectionsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeVpcEndpointConnectionsRequest holds details about calls to the DescribeVpcEndpointConnectionsRequest method.
		DescribeVpcEndpointConnectionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcEndpointConnectionsInput
		}
		// DescribeVpcEndpointConnectionsWithContext holds details about calls to the DescribeVpcEndpointConnectionsWithContext method.
		DescribeVpcEndpointConnectionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpcEndpointConnectionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeVpcEndpointServiceConfigurations holds details about calls to the DescribeVpcEndpointServiceConfigurations method.
		DescribeVpcEndpointServiceConfigurations []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcEndpointServiceConfigurationsInput
		}
		// DescribeVpcEndpointServiceConfigurationsPages holds details about calls to the DescribeVpcEndpointServiceConfigurationsPages method.
		DescribeVpcEndpointServiceConfigurationsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcEndpointServiceConfigurationsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeVpcEndpointServiceConfigurationsOutput, bool) bool
		}
		// DescribeVpcEndpointServiceConfigurationsPagesWithContext holds details about calls to the DescribeVpcEndpointServiceConfigurationsPagesWithContext method.
		DescribeVpcEndpointServiceConfigurationsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpcEndpointServiceConfigurationsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeVpcEndpointServiceConfigurationsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeVpcEndpointServiceConfigurationsRequest holds details about calls to the DescribeVpcEndpointServiceConfigurationsRequest method.
		DescribeVpcEndpointServiceConfigurationsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcEndpointServiceConfigurationsInput
		}
		// DescribeVpcEndpointServiceConfigurationsWithContext holds details about calls to the DescribeVpcEndpointServiceConfigurationsWithContext method.
		DescribeVpcEndpointServiceConfigurationsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpcEndpointServiceConfigurationsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeVpcEndpointServicePermissions holds details about calls to the DescribeVpcEndpointServicePermissions method.
		DescribeVpcEndpointServicePermissions []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcEndpointServicePermissionsInput
		}
		// DescribeVpcEndpointServicePermissionsPages holds details about calls to the DescribeVpcEndpointServicePermissionsPages method.
		DescribeVpcEndpointServicePermissionsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcEndpointServicePermissionsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeVpcEndpointServicePermissionsOutput, bool) bool
		}
		// DescribeVpcEndpointServicePermissionsPagesWithContext holds details about calls to the DescribeVpcEndpointServicePermissionsPagesWithContext method.
		DescribeVpcEndpointServicePermissionsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpcEndpointServicePermissionsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeVpcEndpointServicePermissionsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeVpcEndpointServicePermissionsRequest holds details about calls to the DescribeVpcEndpointServicePermissionsRequest method.
		DescribeVpcEndpointServicePermissionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcEndpointServicePermissionsInput
		}
		// DescribeVpcEndpointServicePermissionsWithContext holds details about calls to the DescribeVpcEndpointServicePermissionsWithContext method.
		DescribeVpcEndpointServicePermissionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpcEndpointServicePermissionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeVpcEndpointServices holds details about calls to the DescribeVpcEndpointServices method.
		DescribeVpcEndpointServices []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcEndpointServicesInput
		}
		// DescribeVpcEndpointServicesRequest holds details about calls to the DescribeVpcEndpointServicesRequest method.
		DescribeVpcEndpointServicesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcEndpointServicesInput
		}
		// DescribeVpcEndpointServicesWithContext holds details about calls to the DescribeVpcEndpointServicesWithContext method.
		DescribeVpcEndpointServicesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpcEndpointServicesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeVpcEndpoints holds details about calls to the DescribeVpcEndpoints method.
		DescribeVpcEndpoints []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcEndpointsInput
		}
		// DescribeVpcEndpointsPages holds details about calls to the DescribeVpcEndpointsPages method.
		DescribeVpcEndpointsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcEndpointsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeVpcEndpointsOutput, bool) bool
		}
		// DescribeVpcEndpointsPagesWithContext holds details about calls to the DescribeVpcEndpointsPagesWithContext method.
		DescribeVpcEndpointsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpcEndpointsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeVpcEndpointsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeVpcEndpointsRequest holds details about calls to the DescribeVpcEndpointsRequest method.
		DescribeVpcEndpointsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcEndpointsInput
		}
		// DescribeVpcEndpointsWithContext holds details about calls to the DescribeVpcEndpointsWithContext method.
		DescribeVpcEndpointsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpcEndpointsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeVpcPeeringConnections holds details about calls to the DescribeVpcPeeringConnections method.
		DescribeVpcPeeringConnections []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcPeeringConnectionsInput
		}
		// DescribeVpcPeeringConnectionsPages holds details about calls to the DescribeVpcPeeringConnectionsPages method.
		DescribeVpcPeeringConnectionsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcPeeringConnectionsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeVpcPeeringConnectionsOutput, bool) bool
		}
		// DescribeVpcPeeringConnectionsPagesWithContext holds details about calls to the DescribeVpcPeeringConnectionsPagesWithContext method.
		DescribeVpcPeeringConnectionsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpcPeeringConnectionsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeVpcPeeringConnectionsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeVpcPeeringConnectionsRequest holds details about calls to the DescribeVpcPeeringConnectionsRequest method.
		DescribeVpcPeeringConnectionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcPeeringConnectionsInput
		}
		// DescribeVpcPeeringConnectionsWithContext holds details about calls to the DescribeVpcPeeringConnectionsWithContext method.
		DescribeVpcPeeringConnectionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpcPeeringConnectionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeVpcs holds details about calls to the DescribeVpcs method.
		DescribeVpcs []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcsInput
		}
		// DescribeVpcsPages holds details about calls to the DescribeVpcsPages method.
		DescribeVpcsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.DescribeVpcsOutput, bool) bool
		}
		// DescribeVpcsPagesWithContext holds details about calls to the DescribeVpcsPagesWithContext method.
		DescribeVpcsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpcsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.DescribeVpcsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeVpcsRequest holds details about calls to the DescribeVpcsRequest method.
		DescribeVpcsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcsInput
		}
		// DescribeVpcsWithContext holds details about calls to the DescribeVpcsWithContext method.
		DescribeVpcsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpcsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeVpnConnections holds details about calls to the DescribeVpnConnections method.
		DescribeVpnConnections []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpnConnectionsInput
		}
		// DescribeVpnConnectionsRequest holds details about calls to the DescribeVpnConnectionsRequest method.
		DescribeVpnConnectionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpnConnectionsInput
		}
		// DescribeVpnConnectionsWithContext holds details about calls to the DescribeVpnConnectionsWithContext method.
		DescribeVpnConnectionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpnConnectionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeVpnGateways holds details about calls to the DescribeVpnGateways method.
		DescribeVpnGateways []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpnGatewaysInput
		}
		// DescribeVpnGatewaysRequest holds details about calls to the DescribeVpnGatewaysRequest method.
		DescribeVpnGatewaysRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpnGatewaysInput
		}
		// DescribeVpnGatewaysWithContext holds details about calls to the DescribeVpnGatewaysWithContext method.
		DescribeVpnGatewaysWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpnGatewaysInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DetachClassicLinkVpc holds details about calls to the DetachClassicLinkVpc method.
		DetachClassicLinkVpc []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DetachClassicLinkVpcInput
		}
		// DetachClassicLinkVpcRequest holds details about calls to the DetachClassicLinkVpcRequest method.
		DetachClassicLinkVpcRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DetachClassicLinkVpcInput
		}
		// DetachClassicLinkVpcWithContext holds details about calls to the DetachClassicLinkVpcWithContext method.
		DetachClassicLinkVpcWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DetachClassicLinkVpcInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DetachInternetGateway holds details about calls to the DetachInternetGateway method.
		DetachInternetGateway []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DetachInternetGatewayInput
		}
		// DetachInternetGatewayRequest holds details about calls to the DetachInternetGatewayRequest method.
		DetachInternetGatewayRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DetachInternetGatewayInput
		}
		// DetachInternetGatewayWithContext holds details about calls to the DetachInternetGatewayWithContext method.
		DetachInternetGatewayWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DetachInternetGatewayInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DetachNetworkInterface holds details about calls to the DetachNetworkInterface method.
		DetachNetworkInterface []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DetachNetworkInterfaceInput
		}
		// DetachNetworkInterfaceRequest holds details about calls to the DetachNetworkInterfaceRequest method.
		DetachNetworkInterfaceRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DetachNetworkInterfaceInput
		}
		// DetachNetworkInterfaceWithContext holds details about calls to the DetachNetworkInterfaceWithContext method.
		DetachNetworkInterfaceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DetachNetworkInterfaceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DetachVolume holds details about calls to the DetachVolume method.
		DetachVolume []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DetachVolumeInput
		}
		// DetachVolumeRequest holds details about calls to the DetachVolumeRequest method.
		DetachVolumeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DetachVolumeInput
		}
		// DetachVolumeWithContext holds details about calls to the DetachVolumeWithContext method.
		DetachVolumeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DetachVolumeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DetachVpnGateway holds details about calls to the DetachVpnGateway method.
		DetachVpnGateway []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DetachVpnGatewayInput
		}
		// DetachVpnGatewayRequest holds details about calls to the DetachVpnGatewayRequest method.
		DetachVpnGatewayRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DetachVpnGatewayInput
		}
		// DetachVpnGatewayWithContext holds details about calls to the DetachVpnGatewayWithContext method.
		DetachVpnGatewayWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DetachVpnGatewayInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DisableEbsEncryptionByDefault holds details about calls to the DisableEbsEncryptionByDefault method.
		DisableEbsEncryptionByDefault []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisableEbsEncryptionByDefaultInput
		}
		// DisableEbsEncryptionByDefaultRequest holds details about calls to the DisableEbsEncryptionByDefaultRequest method.
		DisableEbsEncryptionByDefaultRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisableEbsEncryptionByDefaultInput
		}
		// DisableEbsEncryptionByDefaultWithContext holds details about calls to the DisableEbsEncryptionByDefaultWithContext method.
		DisableEbsEncryptionByDefaultWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DisableEbsEncryptionByDefaultInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DisableFastSnapshotRestores holds details about calls to the DisableFastSnapshotRestores method.
		DisableFastSnapshotRestores []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisableFastSnapshotRestoresInput
		}
		// DisableFastSnapshotRestoresRequest holds details about calls to the DisableFastSnapshotRestoresRequest method.
		DisableFastSnapshotRestoresRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisableFastSnapshotRestoresInput
		}
		// DisableFastSnapshotRestoresWithContext holds details about calls to the DisableFastSnapshotRestoresWithContext method.
		DisableFastSnapshotRestoresWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DisableFastSnapshotRestoresInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DisableTransitGatewayRouteTablePropagation holds details about calls to the DisableTransitGatewayRouteTablePropagation method.
		DisableTransitGatewayRouteTablePropagation []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisableTransitGatewayRouteTablePropagationInput
		}
		// DisableTransitGatewayRouteTablePropagationRequest holds details about calls to the DisableTransitGatewayRouteTablePropagationRequest method.
		DisableTransitGatewayRouteTablePropagationRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisableTransitGatewayRouteTablePropagationInput
		}
		// DisableTransitGatewayRouteTablePropagationWithContext holds details about calls to the DisableTransitGatewayRouteTablePropagationWithContext method.
		DisableTransitGatewayRouteTablePropagationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DisableTransitGatewayRouteTablePropagationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DisableVgwRoutePropagation holds details about calls to the DisableVgwRoutePropagation method.
		DisableVgwRoutePropagation []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisableVgwRoutePropagationInput
		}
		// DisableVgwRoutePropagationRequest holds details about calls to the DisableVgwRoutePropagationRequest method.
		DisableVgwRoutePropagationRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisableVgwRoutePropagationInput
		}
		// DisableVgwRoutePropagationWithContext holds details about calls to the DisableVgwRoutePropagationWithContext method.
		DisableVgwRoutePropagationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DisableVgwRoutePropagationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DisableVpcClassicLink holds details about calls to the DisableVpcClassicLink method.
		DisableVpcClassicLink []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisableVpcClassicLinkInput
		}
		// DisableVpcClassicLinkDnsSupport holds details about calls to the DisableVpcClassicLinkDnsSupport method.
		DisableVpcClassicLinkDnsSupport []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisableVpcClassicLinkDnsSupportInput
		}
		// DisableVpcClassicLinkDnsSupportRequest holds details about calls to the DisableVpcClassicLinkDnsSupportRequest method.
		DisableVpcClassicLinkDnsSupportRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisableVpcClassicLinkDnsSupportInput
		}
		// DisableVpcClassicLinkDnsSupportWithContext holds details about calls to the DisableVpcClassicLinkDnsSupportWithContext method.
		DisableVpcClassicLinkDnsSupportWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DisableVpcClassicLinkDnsSupportInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DisableVpcClassicLinkRequest holds details about calls to the DisableVpcClassicLinkRequest method.
		DisableVpcClassicLinkRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisableVpcClassicLinkInput
		}
		// DisableVpcClassicLinkWithContext holds details about calls to the DisableVpcClassicLinkWithContext method.
		DisableVpcClassicLinkWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DisableVpcClassicLinkInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DisassociateAddress holds details about calls to the DisassociateAddress method.
		DisassociateAddress []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisassociateAddressInput
		}
		// DisassociateAddressRequest holds details about calls to the DisassociateAddressRequest method.
		DisassociateAddressRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisassociateAddressInput
		}
		// DisassociateAddressWithContext holds details about calls to the DisassociateAddressWithContext method.
		DisassociateAddressWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DisassociateAddressInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DisassociateClientVpnTargetNetwork holds details about calls to the DisassociateClientVpnTargetNetwork method.
		DisassociateClientVpnTargetNetwork []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisassociateClientVpnTargetNetworkInput
		}
		// DisassociateClientVpnTargetNetworkRequest holds details about calls to the DisassociateClientVpnTargetNetworkRequest method.
		DisassociateClientVpnTargetNetworkRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisassociateClientVpnTargetNetworkInput
		}
		// DisassociateClientVpnTargetNetworkWithContext holds details about calls to the DisassociateClientVpnTargetNetworkWithContext method.
		DisassociateClientVpnTargetNetworkWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DisassociateClientVpnTargetNetworkInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DisassociateIamInstanceProfile holds details about calls to the DisassociateIamInstanceProfile method.
		DisassociateIamInstanceProfile []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisassociateIamInstanceProfileInput
		}
		// DisassociateIamInstanceProfileRequest holds details about calls to the DisassociateIamInstanceProfileRequest method.
		DisassociateIamInstanceProfileRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisassociateIamInstanceProfileInput
		}
		// DisassociateIamInstanceProfileWithContext holds details about calls to the DisassociateIamInstanceProfileWithContext method.
		DisassociateIamInstanceProfileWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DisassociateIamInstanceProfileInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DisassociateRouteTable holds details about calls to the DisassociateRouteTable method.
		DisassociateRouteTable []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisassociateRouteTableInput
		}
		// DisassociateRouteTableRequest holds details about calls to the DisassociateRouteTableRequest method.
		DisassociateRouteTableRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisassociateRouteTableInput
		}
		// DisassociateRouteTableWithContext holds details about calls to the DisassociateRouteTableWithContext method.
		DisassociateRouteTableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DisassociateRouteTableInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DisassociateSubnetCidrBlock holds details about calls to the DisassociateSubnetCidrBlock method.
		DisassociateSubnetCidrBlock []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisassociateSubnetCidrBlockInput
		}
		// DisassociateSubnetCidrBlockRequest holds details about calls to the DisassociateSubnetCidrBlockRequest method.
		DisassociateSubnetCidrBlockRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisassociateSubnetCidrBlockInput
		}
		// DisassociateSubnetCidrBlockWithContext holds details about calls to the DisassociateSubnetCidrBlockWithContext method.
		DisassociateSubnetCidrBlockWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DisassociateSubnetCidrBlockInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DisassociateTransitGatewayMulticastDomain holds details about calls to the DisassociateTransitGatewayMulticastDomain method.
		DisassociateTransitGatewayMulticastDomain []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisassociateTransitGatewayMulticastDomainInput
		}
		// DisassociateTransitGatewayMulticastDomainRequest holds details about calls to the DisassociateTransitGatewayMulticastDomainRequest method.
		DisassociateTransitGatewayMulticastDomainRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisassociateTransitGatewayMulticastDomainInput
		}
		// DisassociateTransitGatewayMulticastDomainWithContext holds details about calls to the DisassociateTransitGatewayMulticastDomainWithContext method.
		DisassociateTransitGatewayMulticastDomainWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DisassociateTransitGatewayMulticastDomainInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DisassociateTransitGatewayRouteTable holds details about calls to the DisassociateTransitGatewayRouteTable method.
		DisassociateTransitGatewayRouteTable []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisassociateTransitGatewayRouteTableInput
		}
		// DisassociateTransitGatewayRouteTableRequest holds details about calls to the DisassociateTransitGatewayRouteTableRequest method.
		DisassociateTransitGatewayRouteTableRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisassociateTransitGatewayRouteTableInput
		}
		// DisassociateTransitGatewayRouteTableWithContext holds details about calls to the DisassociateTransitGatewayRouteTableWithContext method.
		DisassociateTransitGatewayRouteTableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DisassociateTransitGatewayRouteTableInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DisassociateVpcCidrBlock holds details about calls to the DisassociateVpcCidrBlock method.
		DisassociateVpcCidrBlock []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisassociateVpcCidrBlockInput
		}
		// DisassociateVpcCidrBlockRequest holds details about calls to the DisassociateVpcCidrBlockRequest method.
		DisassociateVpcCidrBlockRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DisassociateVpcCidrBlockInput
		}
		// DisassociateVpcCidrBlockWithContext holds details about calls to the DisassociateVpcCidrBlockWithContext method.
		DisassociateVpcCidrBlockWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DisassociateVpcCidrBlockInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// EnableEbsEncryptionByDefault holds details about calls to the EnableEbsEncryptionByDefault method.
		EnableEbsEncryptionByDefault []struct {
			// In1 is the in1 argument value.
			In1 *ec2.EnableEbsEncryptionByDefaultInput
		}
		// EnableEbsEncryptionByDefaultRequest holds details about calls to the EnableEbsEncryptionByDefaultRequest method.
		EnableEbsEncryptionByDefaultRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.EnableEbsEncryptionByDefaultInput
		}
		// EnableEbsEncryptionByDefaultWithContext holds details about calls to the EnableEbsEncryptionByDefaultWithContext method.
		EnableEbsEncryptionByDefaultWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.EnableEbsEncryptionByDefaultInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// EnableFastSnapshotRestores holds details about calls to the EnableFastSnapshotRestores method.
		EnableFastSnapshotRestores []struct {
			// In1 is the in1 argument value.
			In1 *ec2.EnableFastSnapshotRestoresInput
		}
		// EnableFastSnapshotRestoresRequest holds details about calls to the EnableFastSnapshotRestoresRequest method.
		EnableFastSnapshotRestoresRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.EnableFastSnapshotRestoresInput
		}
		// EnableFastSnapshotRestoresWithContext holds details about calls to the EnableFastSnapshotRestoresWithContext method.
		EnableFastSnapshotRestoresWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.EnableFastSnapshotRestoresInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// EnableTransitGatewayRouteTablePropagation holds details about calls to the EnableTransitGatewayRouteTablePropagation method.
		EnableTransitGatewayRouteTablePropagation []struct {
			// In1 is the in1 argument value.
			In1 *ec2.EnableTransitGatewayRouteTablePropagationInput
		}
		// EnableTransitGatewayRouteTablePropagationRequest holds details about calls to the EnableTransitGatewayRouteTablePropagationRequest method.
		EnableTransitGatewayRouteTablePropagationRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.EnableTransitGatewayRouteTablePropagationInput
		}
		// EnableTransitGatewayRouteTablePropagationWithContext holds details about calls to the EnableTransitGatewayRouteTablePropagationWithContext method.
		EnableTransitGatewayRouteTablePropagationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.EnableTransitGatewayRouteTablePropagationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// EnableVgwRoutePropagation holds details about calls to the EnableVgwRoutePropagation method.
		EnableVgwRoutePropagation []struct {
			// In1 is the in1 argument value.
			In1 *ec2.EnableVgwRoutePropagationInput
		}
		// EnableVgwRoutePropagationRequest holds details about calls to the EnableVgwRoutePropagationRequest method.
		EnableVgwRoutePropagationRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.EnableVgwRoutePropagationInput
		}
		// EnableVgwRoutePropagationWithContext holds details about calls to the EnableVgwRoutePropagationWithContext method.
		EnableVgwRoutePropagationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.EnableVgwRoutePropagationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// EnableVolumeIO holds details about calls to the EnableVolumeIO method.
		EnableVolumeIO []struct {
			// In1 is the in1 argument value.
			In1 *ec2.EnableVolumeIOInput
		}
		// EnableVolumeIORequest holds details about calls to the EnableVolumeIORequest method.
		EnableVolumeIORequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.EnableVolumeIOInput
		}
		// EnableVolumeIOWithContext holds details about calls to the EnableVolumeIOWithContext method.
		EnableVolumeIOWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.EnableVolumeIOInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// EnableVpcClassicLink holds details about calls to the EnableVpcClassicLink method.
		EnableVpcClassicLink []struct {
			// In1 is the in1 argument value.
			In1 *ec2.EnableVpcClassicLinkInput
		}
		// EnableVpcClassicLinkDnsSupport holds details about calls to the EnableVpcClassicLinkDnsSupport method.
		EnableVpcClassicLinkDnsSupport []struct {
			// In1 is the in1 argument value.
			In1 *ec2.EnableVpcClassicLinkDnsSupportInput
		}
		// EnableVpcClassicLinkDnsSupportRequest holds details about calls to the EnableVpcClassicLinkDnsSupportRequest method.
		EnableVpcClassicLinkDnsSupportRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.EnableVpcClassicLinkDnsSupportInput
		}
		// EnableVpcClassicLinkDnsSupportWithContext holds details about calls to the EnableVpcClassicLinkDnsSupportWithContext method.
		EnableVpcClassicLinkDnsSupportWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.EnableVpcClassicLinkDnsSupportInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// EnableVpcClassicLinkRequest holds details about calls to the EnableVpcClassicLinkRequest method.
		EnableVpcClassicLinkRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.EnableVpcClassicLinkInput
		}
		// EnableVpcClassicLinkWithContext holds details about calls to the EnableVpcClassicLinkWithContext method.
		EnableVpcClassicLinkWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.EnableVpcClassicLinkInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ExportClientVpnClientCertificateRevocationList holds details about calls to the ExportClientVpnClientCertificateRevocationList method.
		ExportClientVpnClientCertificateRevocationList []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ExportClientVpnClientCertificateRevocationListInput
		}
		// ExportClientVpnClientCertificateRevocationListRequest holds details about calls to the ExportClientVpnClientCertificateRevocationListRequest method.
		ExportClientVpnClientCertificateRevocationListRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ExportClientVpnClientCertificateRevocationListInput
		}
		// ExportClientVpnClientCertificateRevocationListWithContext holds details about calls to the ExportClientVpnClientCertificateRevocationListWithContext method.
		ExportClientVpnClientCertificateRevocationListWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ExportClientVpnClientCertificateRevocationListInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ExportClientVpnClientConfiguration holds details about calls to the ExportClientVpnClientConfiguration method.
		ExportClientVpnClientConfiguration []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ExportClientVpnClientConfigurationInput
		}
		// ExportClientVpnClientConfigurationRequest holds details about calls to the ExportClientVpnClientConfigurationRequest method.
		ExportClientVpnClientConfigurationRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ExportClientVpnClientConfigurationInput
		}
		// ExportClientVpnClientConfigurationWithContext holds details about calls to the ExportClientVpnClientConfigurationWithContext method.
		ExportClientVpnClientConfigurationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ExportClientVpnClientConfigurationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ExportImage holds details about calls to the ExportImage method.
		ExportImage []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ExportImageInput
		}
		// ExportImageRequest holds details about calls to the ExportImageRequest method.
		ExportImageRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ExportImageInput
		}
		// ExportImageWithContext holds details about calls to the ExportImageWithContext method.
		ExportImageWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ExportImageInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ExportTransitGatewayRoutes holds details about calls to the ExportTransitGatewayRoutes method.
		ExportTransitGatewayRoutes []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ExportTransitGatewayRoutesInput
		}
		// ExportTransitGatewayRoutesRequest holds details about calls to the ExportTransitGatewayRoutesRequest method.
		ExportTransitGatewayRoutesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ExportTransitGatewayRoutesInput
		}
		// ExportTransitGatewayRoutesWithContext holds details about calls to the ExportTransitGatewayRoutesWithContext method.
		ExportTransitGatewayRoutesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ExportTransitGatewayRoutesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetAssociatedIpv6PoolCidrs holds details about calls to the GetAssociatedIpv6PoolCidrs method.
		GetAssociatedIpv6PoolCidrs []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetAssociatedIpv6PoolCidrsInput
		}
		// GetAssociatedIpv6PoolCidrsPages holds details about calls to the GetAssociatedIpv6PoolCidrsPages method.
		GetAssociatedIpv6PoolCidrsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetAssociatedIpv6PoolCidrsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.GetAssociatedIpv6PoolCidrsOutput, bool) bool
		}
		// GetAssociatedIpv6PoolCidrsPagesWithContext holds details about calls to the GetAssociatedIpv6PoolCidrsPagesWithContext method.
		GetAssociatedIpv6PoolCidrsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.GetAssociatedIpv6PoolCidrsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.GetAssociatedIpv6PoolCidrsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// GetAssociatedIpv6PoolCidrsRequest holds details about calls to the GetAssociatedIpv6PoolCidrsRequest method.
		GetAssociatedIpv6PoolCidrsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetAssociatedIpv6PoolCidrsInput
		}
		// GetAssociatedIpv6PoolCidrsWithContext holds details about calls to the GetAssociatedIpv6PoolCidrsWithContext method.
		GetAssociatedIpv6PoolCidrsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.GetAssociatedIpv6PoolCidrsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetCapacityReservationUsage holds details about calls to the GetCapacityReservationUsage method.
		GetCapacityReservationUsage []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetCapacityReservationUsageInput
		}
		// GetCapacityReservationUsageRequest holds details about calls to the GetCapacityReservationUsageRequest method.
		GetCapacityReservationUsageRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetCapacityReservationUsageInput
		}
		// GetCapacityReservationUsageWithContext holds details about calls to the GetCapacityReservationUsageWithContext method.
		GetCapacityReservationUsageWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.GetCapacityReservationUsageInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetCoipPoolUsage holds details about calls to the GetCoipPoolUsage method.
		GetCoipPoolUsage []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetCoipPoolUsageInput
		}
		// GetCoipPoolUsageRequest holds details about calls to the GetCoipPoolUsageRequest method.
		GetCoipPoolUsageRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetCoipPoolUsageInput
		}
		// GetCoipPoolUsageWithContext holds details about calls to the GetCoipPoolUsageWithContext method.
		GetCoipPoolUsageWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.GetCoipPoolUsageInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetConsoleOutput holds details about calls to the GetConsoleOutput method.
		GetConsoleOutput []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetConsoleOutputInput
		}
		// GetConsoleOutputRequest holds details about calls to the GetConsoleOutputRequest method.
		GetConsoleOutputRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetConsoleOutputInput
		}
		// GetConsoleOutputWithContext holds details about calls to the GetConsoleOutputWithContext method.
		GetConsoleOutputWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.GetConsoleOutputInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetConsoleScreenshot holds details about calls to the GetConsoleScreenshot method.
		GetConsoleScreenshot []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetConsoleScreenshotInput
		}
		// GetConsoleScreenshotRequest holds details about calls to the GetConsoleScreenshotRequest method.
		GetConsoleScreenshotRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetConsoleScreenshotInput
		}
		// GetConsoleScreenshotWithContext holds details about calls to the GetConsoleScreenshotWithContext method.
		GetConsoleScreenshotWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.GetConsoleScreenshotInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetDefaultCreditSpecification holds details about calls to the GetDefaultCreditSpecification method.
		GetDefaultCreditSpecification []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetDefaultCreditSpecificationInput
		}
		// GetDefaultCreditSpecificationRequest holds details about calls to the GetDefaultCreditSpecificationRequest method.
		GetDefaultCreditSpecificationRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetDefaultCreditSpecificationInput
		}
		// GetDefaultCreditSpecificationWithContext holds details about calls to the GetDefaultCreditSpecificationWithContext method.
		GetDefaultCreditSpecificationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.GetDefaultCreditSpecificationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetEbsDefaultKmsKeyId holds details about calls to the GetEbsDefaultKmsKeyId method.
		GetEbsDefaultKmsKeyId []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetEbsDefaultKmsKeyIdInput
		}
		// GetEbsDefaultKmsKeyIdRequest holds details about calls to the GetEbsDefaultKmsKeyIdRequest method.
		GetEbsDefaultKmsKeyIdRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetEbsDefaultKmsKeyIdInput
		}
		// GetEbsDefaultKmsKeyIdWithContext holds details about calls to the GetEbsDefaultKmsKeyIdWithContext method.
		GetEbsDefaultKmsKeyIdWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.GetEbsDefaultKmsKeyIdInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetEbsEncryptionByDefault holds details about calls to the GetEbsEncryptionByDefault method.
		GetEbsEncryptionByDefault []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetEbsEncryptionByDefaultInput
		}
		// GetEbsEncryptionByDefaultRequest holds details about calls to the GetEbsEncryptionByDefaultRequest method.
		GetEbsEncryptionByDefaultRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetEbsEncryptionByDefaultInput
		}
		// GetEbsEncryptionByDefaultWithContext holds details about calls to the GetEbsEncryptionByDefaultWithContext method.
		GetEbsEncryptionByDefaultWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.GetEbsEncryptionByDefaultInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetHostReservationPurchasePreview holds details about calls to the GetHostReservationPurchasePreview method.
		GetHostReservationPurchasePreview []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetHostReservationPurchasePreviewInput
		}
		// GetHostReservationPurchasePreviewRequest holds details about calls to the GetHostReservationPurchasePreviewRequest method.
		GetHostReservationPurchasePreviewRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetHostReservationPurchasePreviewInput
		}
		// GetHostReservationPurchasePreviewWithContext holds details about calls to the GetHostReservationPurchasePreviewWithContext method.
		GetHostReservationPurchasePreviewWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.GetHostReservationPurchasePreviewInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetLaunchTemplateData holds details about calls to the GetLaunchTemplateData method.
		GetLaunchTemplateData []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetLaunchTemplateDataInput
		}
		// GetLaunchTemplateDataRequest holds details about calls to the GetLaunchTemplateDataRequest method.
		GetLaunchTemplateDataRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetLaunchTemplateDataInput
		}
		// GetLaunchTemplateDataWithContext holds details about calls to the GetLaunchTemplateDataWithContext method.
		GetLaunchTemplateDataWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.GetLaunchTemplateDataInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetPasswordData holds details about calls to the GetPasswordData method.
		GetPasswordData []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetPasswordDataInput
		}
		// GetPasswordDataRequest holds details about calls to the GetPasswordDataRequest method.
		GetPasswordDataRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetPasswordDataInput
		}
		// GetPasswordDataWithContext holds details about calls to the GetPasswordDataWithContext method.
		GetPasswordDataWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.GetPasswordDataInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetReservedInstancesExchangeQuote holds details about calls to the GetReservedInstancesExchangeQuote method.
		GetReservedInstancesExchangeQuote []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetReservedInstancesExchangeQuoteInput
		}
		// GetReservedInstancesExchangeQuoteRequest holds details about calls to the GetReservedInstancesExchangeQuoteRequest method.
		GetReservedInstancesExchangeQuoteRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetReservedInstancesExchangeQuoteInput
		}
		// GetReservedInstancesExchangeQuoteWithContext holds details about calls to the GetReservedInstancesExchangeQuoteWithContext method.
		GetReservedInstancesExchangeQuoteWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.GetReservedInstancesExchangeQuoteInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetTransitGatewayAttachmentPropagations holds details about calls to the GetTransitGatewayAttachmentPropagations method.
		GetTransitGatewayAttachmentPropagations []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetTransitGatewayAttachmentPropagationsInput
		}
		// GetTransitGatewayAttachmentPropagationsPages holds details about calls to the GetTransitGatewayAttachmentPropagationsPages method.
		GetTransitGatewayAttachmentPropagationsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetTransitGatewayAttachmentPropagationsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.GetTransitGatewayAttachmentPropagationsOutput, bool) bool
		}
		// GetTransitGatewayAttachmentPropagationsPagesWithContext holds details about calls to the GetTransitGatewayAttachmentPropagationsPagesWithContext method.
		GetTransitGatewayAttachmentPropagationsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.GetTransitGatewayAttachmentPropagationsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.GetTransitGatewayAttachmentPropagationsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// GetTransitGatewayAttachmentPropagationsRequest holds details about calls to the GetTransitGatewayAttachmentPropagationsRequest method.
		GetTransitGatewayAttachmentPropagationsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetTransitGatewayAttachmentPropagationsInput
		}
		// GetTransitGatewayAttachmentPropagationsWithContext holds details about calls to the GetTransitGatewayAttachmentPropagationsWithContext method.
		GetTransitGatewayAttachmentPropagationsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.GetTransitGatewayAttachmentPropagationsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetTransitGatewayMulticastDomainAssociations holds details about calls to the GetTransitGatewayMulticastDomainAssociations method.
		GetTransitGatewayMulticastDomainAssociations []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetTransitGatewayMulticastDomainAssociationsInput
		}
		// GetTransitGatewayMulticastDomainAssociationsRequest holds details about calls to the GetTransitGatewayMulticastDomainAssociationsRequest method.
		GetTransitGatewayMulticastDomainAssociationsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetTransitGatewayMulticastDomainAssociationsInput
		}
		// GetTransitGatewayMulticastDomainAssociationsWithContext holds details about calls to the GetTransitGatewayMulticastDomainAssociationsWithContext method.
		GetTransitGatewayMulticastDomainAssociationsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.GetTransitGatewayMulticastDomainAssociationsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetTransitGatewayRouteTableAssociations holds details about calls to the GetTransitGatewayRouteTableAssociations method.
		GetTransitGatewayRouteTableAssociations []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetTransitGatewayRouteTableAssociationsInput
		}
		// GetTransitGatewayRouteTableAssociationsPages holds details about calls to the GetTransitGatewayRouteTableAssociationsPages method.
		GetTransitGatewayRouteTableAssociationsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetTransitGatewayRouteTableAssociationsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.GetTransitGatewayRouteTableAssociationsOutput, bool) bool
		}
		// GetTransitGatewayRouteTableAssociationsPagesWithContext holds details about calls to the GetTransitGatewayRouteTableAssociationsPagesWithContext method.
		GetTransitGatewayRouteTableAssociationsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.GetTransitGatewayRouteTableAssociationsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.GetTransitGatewayRouteTableAssociationsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// GetTransitGatewayRouteTableAssociationsRequest holds details about calls to the GetTransitGatewayRouteTableAssociationsRequest method.
		GetTransitGatewayRouteTableAssociationsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetTransitGatewayRouteTableAssociationsInput
		}
		// GetTransitGatewayRouteTableAssociationsWithContext holds details about calls to the GetTransitGatewayRouteTableAssociationsWithContext method.
		GetTransitGatewayRouteTableAssociationsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.GetTransitGatewayRouteTableAssociationsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetTransitGatewayRouteTablePropagations holds details about calls to the GetTransitGatewayRouteTablePropagations method.
		GetTransitGatewayRouteTablePropagations []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetTransitGatewayRouteTablePropagationsInput
		}
		// GetTransitGatewayRouteTablePropagationsPages holds details about calls to the GetTransitGatewayRouteTablePropagationsPages method.
		GetTransitGatewayRouteTablePropagationsPages []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetTransitGatewayRouteTablePropagationsInput
			// In2 is the in2 argument value.
			In2 func(*ec2.GetTransitGatewayRouteTablePropagationsOutput, bool) bool
		}
		// GetTransitGatewayRouteTablePropagationsPagesWithContext holds details about calls to the GetTransitGatewayRouteTablePropagationsPagesWithContext method.
		GetTransitGatewayRouteTablePropagationsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.GetTransitGatewayRouteTablePropagationsInput
			// In3 is the in3 argument value.
			In3 func(*ec2.GetTransitGatewayRouteTablePropagationsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// GetTransitGatewayRouteTablePropagationsRequest holds details about calls to the GetTransitGatewayRouteTablePropagationsRequest method.
		GetTransitGatewayRouteTablePropagationsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetTransitGatewayRouteTablePropagationsInput
		}
		// GetTransitGatewayRouteTablePropagationsWithContext holds details about calls to the GetTransitGatewayRouteTablePropagationsWithContext method.
		GetTransitGatewayRouteTablePropagationsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.GetTransitGatewayRouteTablePropagationsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ImportClientVpnClientCertificateRevocationList holds details about calls to the ImportClientVpnClientCertificateRevocationList method.
		ImportClientVpnClientCertificateRevocationList []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ImportClientVpnClientCertificateRevocationListInput
		}
		// ImportClientVpnClientCertificateRevocationListRequest holds details about calls to the ImportClientVpnClientCertificateRevocationListRequest method.
		ImportClientVpnClientCertificateRevocationListRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ImportClientVpnClientCertificateRevocationListInput
		}
		// ImportClientVpnClientCertificateRevocationListWithContext holds details about calls to the ImportClientVpnClientCertificateRevocationListWithContext method.
		ImportClientVpnClientCertificateRevocationListWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ImportClientVpnClientCertificateRevocationListInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ImportImage holds details about calls to the ImportImage method.
		ImportImage []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ImportImageInput
		}
		// ImportImageRequest holds details about calls to the ImportImageRequest method.
		ImportImageRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ImportImageInput
		}
		// ImportImageWithContext holds details about calls to the ImportImageWithContext method.
		ImportImageWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ImportImageInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ImportInstance holds details about calls to the ImportInstance method.
		ImportInstance []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ImportInstanceInput
		}
		// ImportInstanceRequest holds details about calls to the ImportInstanceRequest method.
		ImportInstanceRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ImportInstanceInput
		}
		// ImportInstanceWithContext holds details about calls to the ImportInstanceWithContext method.
		ImportInstanceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ImportInstanceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ImportKeyPair holds details about calls to the ImportKeyPair method.
		ImportKeyPair []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ImportKeyPairInput
		}
		// ImportKeyPairRequest holds details about calls to the ImportKeyPairRequest method.
		ImportKeyPairRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ImportKeyPairInput
		}
		// ImportKeyPairWithContext holds details about calls to the ImportKeyPairWithContext method.
		ImportKeyPairWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ImportKeyPairInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ImportSnapshot holds details about calls to the ImportSnapshot method.
		ImportSnapshot []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ImportSnapshotInput
		}
		// ImportSnapshotRequest holds details about calls to the ImportSnapshotRequest method.
		ImportSnapshotRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ImportSnapshotInput
		}
		// ImportSnapshotWithContext holds details about calls to the ImportSnapshotWithContext method.
		ImportSnapshotWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ImportSnapshotInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ImportVolume holds details about calls to the ImportVolume method.
		ImportVolume []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ImportVolumeInput
		}
		// ImportVolumeRequest holds details about calls to the ImportVolumeRequest method.
		ImportVolumeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ImportVolumeInput
		}
		// ImportVolumeWithContext holds details about calls to the ImportVolumeWithContext method.
		ImportVolumeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ImportVolumeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyCapacityReservation holds details about calls to the ModifyCapacityReservation method.
		ModifyCapacityReservation []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyCapacityReservationInput
		}
		// ModifyCapacityReservationRequest holds details about calls to the ModifyCapacityReservationRequest method.
		ModifyCapacityReservationRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyCapacityReservationInput
		}
		// ModifyCapacityReservationWithContext holds details about calls to the ModifyCapacityReservationWithContext method.
		ModifyCapacityReservationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyCapacityReservationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyClientVpnEndpoint holds details about calls to the ModifyClientVpnEndpoint method.
		ModifyClientVpnEndpoint []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyClientVpnEndpointInput
		}
		// ModifyClientVpnEndpointRequest holds details about calls to the ModifyClientVpnEndpointRequest method.
		ModifyClientVpnEndpointRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyClientVpnEndpointInput
		}
		// ModifyClientVpnEndpointWithContext holds details about calls to the ModifyClientVpnEndpointWithContext method.
		ModifyClientVpnEndpointWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyClientVpnEndpointInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyDefaultCreditSpecification holds details about calls to the ModifyDefaultCreditSpecification method.
		ModifyDefaultCreditSpecification []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyDefaultCreditSpecificationInput
		}
		// ModifyDefaultCreditSpecificationRequest holds details about calls to the ModifyDefaultCreditSpecificationRequest method.
		ModifyDefaultCreditSpecificationRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyDefaultCreditSpecificationInput
		}
		// ModifyDefaultCreditSpecificationWithContext holds details about calls to the ModifyDefaultCreditSpecificationWithContext method.
		ModifyDefaultCreditSpecificationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyDefaultCreditSpecificationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyEbsDefaultKmsKeyId holds details about calls to the ModifyEbsDefaultKmsKeyId method.
		ModifyEbsDefaultKmsKeyId []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyEbsDefaultKmsKeyIdInput
		}
		// ModifyEbsDefaultKmsKeyIdRequest holds details about calls to the ModifyEbsDefaultKmsKeyIdRequest method.
		ModifyEbsDefaultKmsKeyIdRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyEbsDefaultKmsKeyIdInput
		}
		// ModifyEbsDefaultKmsKeyIdWithContext holds details about calls to the ModifyEbsDefaultKmsKeyIdWithContext method.
		ModifyEbsDefaultKmsKeyIdWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyEbsDefaultKmsKeyIdInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyFleet holds details about calls to the ModifyFleet method.
		ModifyFleet []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyFleetInput
		}
		// ModifyFleetRequest holds details about calls to the ModifyFleetRequest method.
		ModifyFleetRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyFleetInput
		}
		// ModifyFleetWithContext holds details about calls to the ModifyFleetWithContext method.
		ModifyFleetWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyFleetInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyFpgaImageAttribute holds details about calls to the ModifyFpgaImageAttribute method.
		ModifyFpgaImageAttribute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyFpgaImageAttributeInput
		}
		// ModifyFpgaImageAttributeRequest holds details about calls to the ModifyFpgaImageAttributeRequest method.
		ModifyFpgaImageAttributeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyFpgaImageAttributeInput
		}
		// ModifyFpgaImageAttributeWithContext holds details about calls to the ModifyFpgaImageAttributeWithContext method.
		ModifyFpgaImageAttributeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyFpgaImageAttributeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyHosts holds details about calls to the ModifyHosts method.
		ModifyHosts []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyHostsInput
		}
		// ModifyHostsRequest holds details about calls to the ModifyHostsRequest method.
		ModifyHostsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyHostsInput
		}
		// ModifyHostsWithContext holds details about calls to the ModifyHostsWithContext method.
		ModifyHostsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyHostsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyIdFormat holds details about calls to the ModifyIdFormat method.
		ModifyIdFormat []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyIdFormatInput
		}
		// ModifyIdFormatRequest holds details about calls to the ModifyIdFormatRequest method.
		ModifyIdFormatRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyIdFormatInput
		}
		// ModifyIdFormatWithContext holds details about calls to the ModifyIdFormatWithContext method.
		ModifyIdFormatWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyIdFormatInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyIdentityIdFormat holds details about calls to the ModifyIdentityIdFormat method.
		ModifyIdentityIdFormat []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyIdentityIdFormatInput
		}
		// ModifyIdentityIdFormatRequest holds details about calls to the ModifyIdentityIdFormatRequest method.
		ModifyIdentityIdFormatRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyIdentityIdFormatInput
		}
		// ModifyIdentityIdFormatWithContext holds details about calls to the ModifyIdentityIdFormatWithContext method.
		ModifyIdentityIdFormatWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyIdentityIdFormatInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyImageAttribute holds details about calls to the ModifyImageAttribute method.
		ModifyImageAttribute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyImageAttributeInput
		}
		// ModifyImageAttributeRequest holds details about calls to the ModifyImageAttributeRequest method.
		ModifyImageAttributeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyImageAttributeInput
		}
		// ModifyImageAttributeWithContext holds details about calls to the ModifyImageAttributeWithContext method.
		ModifyImageAttributeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyImageAttributeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyInstanceAttribute holds details about calls to the ModifyInstanceAttribute method.
		ModifyInstanceAttribute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyInstanceAttributeInput
		}
		// ModifyInstanceAttributeRequest holds details about calls to the ModifyInstanceAttributeRequest method.
		ModifyInstanceAttributeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyInstanceAttributeInput
		}
		// ModifyInstanceAttributeWithContext holds details about calls to the ModifyInstanceAttributeWithContext method.
		ModifyInstanceAttributeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyInstanceAttributeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyInstanceCapacityReservationAttributes holds details about calls to the ModifyInstanceCapacityReservationAttributes method.
		ModifyInstanceCapacityReservationAttributes []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyInstanceCapacityReservationAttributesInput
		}
		// ModifyInstanceCapacityReservationAttributesRequest holds details about calls to the ModifyInstanceCapacityReservationAttributesRequest method.
		ModifyInstanceCapacityReservationAttributesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyInstanceCapacityReservationAttributesInput
		}
		// ModifyInstanceCapacityReservationAttributesWithContext holds details about calls to the ModifyInstanceCapacityReservationAttributesWithContext method.
		ModifyInstanceCapacityReservationAttributesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyInstanceCapacityReservationAttributesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyInstanceCreditSpecification holds details about calls to the ModifyInstanceCreditSpecification method.
		ModifyInstanceCreditSpecification []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyInstanceCreditSpecificationInput
		}
		// ModifyInstanceCreditSpecificationRequest holds details about calls to the ModifyInstanceCreditSpecificationRequest method.
		ModifyInstanceCreditSpecificationRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyInstanceCreditSpecificationInput
		}
		// ModifyInstanceCreditSpecificationWithContext holds details about calls to the ModifyInstanceCreditSpecificationWithContext method.
		ModifyInstanceCreditSpecificationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyInstanceCreditSpecificationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyInstanceEventStartTime holds details about calls to the ModifyInstanceEventStartTime method.
		ModifyInstanceEventStartTime []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyInstanceEventStartTimeInput
		}
		// ModifyInstanceEventStartTimeRequest holds details about calls to the ModifyInstanceEventStartTimeRequest method.
		ModifyInstanceEventStartTimeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyInstanceEventStartTimeInput
		}
		// ModifyInstanceEventStartTimeWithContext holds details about calls to the ModifyInstanceEventStartTimeWithContext method.
		ModifyInstanceEventStartTimeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyInstanceEventStartTimeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyInstanceMetadataOptions holds details about calls to the ModifyInstanceMetadataOptions method.
		ModifyInstanceMetadataOptions []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyInstanceMetadataOptionsInput
		}
		// ModifyInstanceMetadataOptionsRequest holds details about calls to the ModifyInstanceMetadataOptionsRequest method.
		ModifyInstanceMetadataOptionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyInstanceMetadataOptionsInput
		}
		// ModifyInstanceMetadataOptionsWithContext holds details about calls to the ModifyInstanceMetadataOptionsWithContext method.
		ModifyInstanceMetadataOptionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyInstanceMetadataOptionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyInstancePlacement holds details about calls to the ModifyInstancePlacement method.
		ModifyInstancePlacement []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyInstancePlacementInput
		}
		// ModifyInstancePlacementRequest holds details about calls to the ModifyInstancePlacementRequest method.
		ModifyInstancePlacementRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyInstancePlacementInput
		}
		// ModifyInstancePlacementWithContext holds details about calls to the ModifyInstancePlacementWithContext method.
		ModifyInstancePlacementWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyInstancePlacementInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyLaunchTemplate holds details about calls to the ModifyLaunchTemplate method.
		ModifyLaunchTemplate []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyLaunchTemplateInput
		}
		// ModifyLaunchTemplateRequest holds details about calls to the ModifyLaunchTemplateRequest method.
		ModifyLaunchTemplateRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyLaunchTemplateInput
		}
		// ModifyLaunchTemplateWithContext holds details about calls to the ModifyLaunchTemplateWithContext method.
		ModifyLaunchTemplateWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyLaunchTemplateInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyNetworkInterfaceAttribute holds details about calls to the ModifyNetworkInterfaceAttribute method.
		ModifyNetworkInterfaceAttribute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyNetworkInterfaceAttributeInput
		}
		// ModifyNetworkInterfaceAttributeRequest holds details about calls to the ModifyNetworkInterfaceAttributeRequest method.
		ModifyNetworkInterfaceAttributeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyNetworkInterfaceAttributeInput
		}
		// ModifyNetworkInterfaceAttributeWithContext holds details about calls to the ModifyNetworkInterfaceAttributeWithContext method.
		ModifyNetworkInterfaceAttributeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyNetworkInterfaceAttributeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyReservedInstances holds details about calls to the ModifyReservedInstances method.
		ModifyReservedInstances []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyReservedInstancesInput
		}
		// ModifyReservedInstancesRequest holds details about calls to the ModifyReservedInstancesRequest method.
		ModifyReservedInstancesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyReservedInstancesInput
		}
		// ModifyReservedInstancesWithContext holds details about calls to the ModifyReservedInstancesWithContext method.
		ModifyReservedInstancesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyReservedInstancesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifySnapshotAttribute holds details about calls to the ModifySnapshotAttribute method.
		ModifySnapshotAttribute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifySnapshotAttributeInput
		}
		// ModifySnapshotAttributeRequest holds details about calls to the ModifySnapshotAttributeRequest method.
		ModifySnapshotAttributeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifySnapshotAttributeInput
		}
		// ModifySnapshotAttributeWithContext holds details about calls to the ModifySnapshotAttributeWithContext method.
		ModifySnapshotAttributeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifySnapshotAttributeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifySpotFleetRequest holds details about calls to the ModifySpotFleetRequest method.
		ModifySpotFleetRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifySpotFleetRequestInput
		}
		// ModifySpotFleetRequestRequest holds details about calls to the ModifySpotFleetRequestRequest method.
		ModifySpotFleetRequestRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifySpotFleetRequestInput
		}
		// ModifySpotFleetRequestWithContext holds details about calls to the ModifySpotFleetRequestWithContext method.
		ModifySpotFleetRequestWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifySpotFleetRequestInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifySubnetAttribute holds details about calls to the ModifySubnetAttribute method.
		ModifySubnetAttribute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifySubnetAttributeInput
		}
		// ModifySubnetAttributeRequest holds details about calls to the ModifySubnetAttributeRequest method.
		ModifySubnetAttributeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifySubnetAttributeInput
		}
		// ModifySubnetAttributeWithContext holds details about calls to the ModifySubnetAttributeWithContext method.
		ModifySubnetAttributeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifySubnetAttributeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyTrafficMirrorFilterNetworkServices holds details about calls to the ModifyTrafficMirrorFilterNetworkServices method.
		ModifyTrafficMirrorFilterNetworkServices []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput
		}
		// ModifyTrafficMirrorFilterNetworkServicesRequest holds details about calls to the ModifyTrafficMirrorFilterNetworkServicesRequest method.
		ModifyTrafficMirrorFilterNetworkServicesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput
		}
		// ModifyTrafficMirrorFilterNetworkServicesWithContext holds details about calls to the ModifyTrafficMirrorFilterNetworkServicesWithContext method.
		ModifyTrafficMirrorFilterNetworkServicesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyTrafficMirrorFilterRule holds details about calls to the ModifyTrafficMirrorFilterRule method.
		ModifyTrafficMirrorFilterRule []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyTrafficMirrorFilterRuleInput
		}
		// ModifyTrafficMirrorFilterRuleRequest holds details about calls to the ModifyTrafficMirrorFilterRuleRequest method.
		ModifyTrafficMirrorFilterRuleRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyTrafficMirrorFilterRuleInput
		}
		// ModifyTrafficMirrorFilterRuleWithContext holds details about calls to the ModifyTrafficMirrorFilterRuleWithContext method.
		ModifyTrafficMirrorFilterRuleWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyTrafficMirrorFilterRuleInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyTrafficMirrorSession holds details about calls to the ModifyTrafficMirrorSession method.
		ModifyTrafficMirrorSession []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyTrafficMirrorSessionInput
		}
		// ModifyTrafficMirrorSessionRequest holds details about calls to the ModifyTrafficMirrorSessionRequest method.
		ModifyTrafficMirrorSessionRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyTrafficMirrorSessionInput
		}
		// ModifyTrafficMirrorSessionWithContext holds details about calls to the ModifyTrafficMirrorSessionWithContext method.
		ModifyTrafficMirrorSessionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyTrafficMirrorSessionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyTransitGatewayVpcAttachment holds details about calls to the ModifyTransitGatewayVpcAttachment method.
		ModifyTransitGatewayVpcAttachment []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyTransitGatewayVpcAttachmentInput
		}
		// ModifyTransitGatewayVpcAttachmentRequest holds details about calls to the ModifyTransitGatewayVpcAttachmentRequest method.
		ModifyTransitGatewayVpcAttachmentRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyTransitGatewayVpcAttachmentInput
		}
		// ModifyTransitGatewayVpcAttachmentWithContext holds details about calls to the ModifyTransitGatewayVpcAttachmentWithContext method.
		ModifyTransitGatewayVpcAttachmentWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyTransitGatewayVpcAttachmentInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyVolume holds details about calls to the ModifyVolume method.
		ModifyVolume []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyVolumeInput
		}
		// ModifyVolumeAttribute holds details about calls to the ModifyVolumeAttribute method.
		ModifyVolumeAttribute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyVolumeAttributeInput
		}
		// ModifyVolumeAttributeRequest holds details about calls to the ModifyVolumeAttributeRequest method.
		ModifyVolumeAttributeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyVolumeAttributeInput
		}
		// ModifyVolumeAttributeWithContext holds details about calls to the ModifyVolumeAttributeWithContext method.
		ModifyVolumeAttributeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyVolumeAttributeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyVolumeRequest holds details about calls to the ModifyVolumeRequest method.
		ModifyVolumeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyVolumeInput
		}
		// ModifyVolumeWithContext holds details about calls to the ModifyVolumeWithContext method.
		ModifyVolumeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyVolumeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyVpcAttribute holds details about calls to the ModifyVpcAttribute method.
		ModifyVpcAttribute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyVpcAttributeInput
		}
		// ModifyVpcAttributeRequest holds details about calls to the ModifyVpcAttributeRequest method.
		ModifyVpcAttributeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyVpcAttributeInput
		}
		// ModifyVpcAttributeWithContext holds details about calls to the ModifyVpcAttributeWithContext method.
		ModifyVpcAttributeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyVpcAttributeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyVpcEndpoint holds details about calls to the ModifyVpcEndpoint method.
		ModifyVpcEndpoint []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyVpcEndpointInput
		}
		// ModifyVpcEndpointConnectionNotification holds details about calls to the ModifyVpcEndpointConnectionNotification method.
		ModifyVpcEndpointConnectionNotification []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyVpcEndpointConnectionNotificationInput
		}
		// ModifyVpcEndpointConnectionNotificationRequest holds details about calls to the ModifyVpcEndpointConnectionNotificationRequest method.
		ModifyVpcEndpointConnectionNotificationRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyVpcEndpointConnectionNotificationInput
		}
		// ModifyVpcEndpointConnectionNotificationWithContext holds details about calls to the ModifyVpcEndpointConnectionNotificationWithContext method.
		ModifyVpcEndpointConnectionNotificationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyVpcEndpointConnectionNotificationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyVpcEndpointRequest holds details about calls to the ModifyVpcEndpointRequest method.
		ModifyVpcEndpointRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyVpcEndpointInput
		}
		// ModifyVpcEndpointServiceConfiguration holds details about calls to the ModifyVpcEndpointServiceConfiguration method.
		ModifyVpcEndpointServiceConfiguration []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyVpcEndpointServiceConfigurationInput
		}
		// ModifyVpcEndpointServiceConfigurationRequest holds details about calls to the ModifyVpcEndpointServiceConfigurationRequest method.
		ModifyVpcEndpointServiceConfigurationRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyVpcEndpointServiceConfigurationInput
		}
		// ModifyVpcEndpointServiceConfigurationWithContext holds details about calls to the ModifyVpcEndpointServiceConfigurationWithContext method.
		ModifyVpcEndpointServiceConfigurationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyVpcEndpointServiceConfigurationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyVpcEndpointServicePermissions holds details about calls to the ModifyVpcEndpointServicePermissions method.
		ModifyVpcEndpointServicePermissions []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyVpcEndpointServicePermissionsInput
		}
		// ModifyVpcEndpointServicePermissionsRequest holds details about calls to the ModifyVpcEndpointServicePermissionsRequest method.
		ModifyVpcEndpointServicePermissionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyVpcEndpointServicePermissionsInput
		}
		// ModifyVpcEndpointServicePermissionsWithContext holds details about calls to the ModifyVpcEndpointServicePermissionsWithContext method.
		ModifyVpcEndpointServicePermissionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyVpcEndpointServicePermissionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyVpcEndpointWithContext holds details about calls to the ModifyVpcEndpointWithContext method.
		ModifyVpcEndpointWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyVpcEndpointInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyVpcPeeringConnectionOptions holds details about calls to the ModifyVpcPeeringConnectionOptions method.
		ModifyVpcPeeringConnectionOptions []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyVpcPeeringConnectionOptionsInput
		}
		// ModifyVpcPeeringConnectionOptionsRequest holds details about calls to the ModifyVpcPeeringConnectionOptionsRequest method.
		ModifyVpcPeeringConnectionOptionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyVpcPeeringConnectionOptionsInput
		}
		// ModifyVpcPeeringConnectionOptionsWithContext holds details about calls to the ModifyVpcPeeringConnectionOptionsWithContext method.
		ModifyVpcPeeringConnectionOptionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyVpcPeeringConnectionOptionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyVpcTenancy holds details about calls to the ModifyVpcTenancy method.
		ModifyVpcTenancy []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyVpcTenancyInput
		}
		// ModifyVpcTenancyRequest holds details about calls to the ModifyVpcTenancyRequest method.
		ModifyVpcTenancyRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyVpcTenancyInput
		}
		// ModifyVpcTenancyWithContext holds details about calls to the ModifyVpcTenancyWithContext method.
		ModifyVpcTenancyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyVpcTenancyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyVpnConnection holds details about calls to the ModifyVpnConnection method.
		ModifyVpnConnection []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyVpnConnectionInput
		}
		// ModifyVpnConnectionRequest holds details about calls to the ModifyVpnConnectionRequest method.
		ModifyVpnConnectionRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyVpnConnectionInput
		}
		// ModifyVpnConnectionWithContext holds details about calls to the ModifyVpnConnectionWithContext method.
		ModifyVpnConnectionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyVpnConnectionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyVpnTunnelCertificate holds details about calls to the ModifyVpnTunnelCertificate method.
		ModifyVpnTunnelCertificate []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyVpnTunnelCertificateInput
		}
		// ModifyVpnTunnelCertificateRequest holds details about calls to the ModifyVpnTunnelCertificateRequest method.
		ModifyVpnTunnelCertificateRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyVpnTunnelCertificateInput
		}
		// ModifyVpnTunnelCertificateWithContext holds details about calls to the ModifyVpnTunnelCertificateWithContext method.
		ModifyVpnTunnelCertificateWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyVpnTunnelCertificateInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyVpnTunnelOptions holds details about calls to the ModifyVpnTunnelOptions method.
		ModifyVpnTunnelOptions []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyVpnTunnelOptionsInput
		}
		// ModifyVpnTunnelOptionsRequest holds details about calls to the ModifyVpnTunnelOptionsRequest method.
		ModifyVpnTunnelOptionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ModifyVpnTunnelOptionsInput
		}
		// ModifyVpnTunnelOptionsWithContext holds details about calls to the ModifyVpnTunnelOptionsWithContext method.
		ModifyVpnTunnelOptionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ModifyVpnTunnelOptionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// MonitorInstances holds details about calls to the MonitorInstances method.
		MonitorInstances []struct {
			// In1 is the in1 argument value.
			In1 *ec2.MonitorInstancesInput
		}
		// MonitorInstancesRequest holds details about calls to the MonitorInstancesRequest method.
		MonitorInstancesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.MonitorInstancesInput
		}
		// MonitorInstancesWithContext holds details about calls to the MonitorInstancesWithContext method.
		MonitorInstancesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.MonitorInstancesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// MoveAddressToVpc holds details about calls to the MoveAddressToVpc method.
		MoveAddressToVpc []struct {
			// In1 is the in1 argument value.
			In1 *ec2.MoveAddressToVpcInput
		}
		// MoveAddressToVpcRequest holds details about calls to the MoveAddressToVpcRequest method.
		MoveAddressToVpcRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.MoveAddressToVpcInput
		}
		// MoveAddressToVpcWithContext holds details about calls to the MoveAddressToVpcWithContext method.
		MoveAddressToVpcWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.MoveAddressToVpcInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ProvisionByoipCidr holds details about calls to the ProvisionByoipCidr method.
		ProvisionByoipCidr []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ProvisionByoipCidrInput
		}
		// ProvisionByoipCidrRequest holds details about calls to the ProvisionByoipCidrRequest method.
		ProvisionByoipCidrRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ProvisionByoipCidrInput
		}
		// ProvisionByoipCidrWithContext holds details about calls to the ProvisionByoipCidrWithContext method.
		ProvisionByoipCidrWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ProvisionByoipCidrInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PurchaseHostReservation holds details about calls to the PurchaseHostReservation method.
		PurchaseHostReservation []struct {
			// In1 is the in1 argument value.
			In1 *ec2.PurchaseHostReservationInput
		}
		// PurchaseHostReservationRequest holds details about calls to the PurchaseHostReservationRequest method.
		PurchaseHostReservationRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.PurchaseHostReservationInput
		}
		// PurchaseHostReservationWithContext holds details about calls to the PurchaseHostReservationWithContext method.
		PurchaseHostReservationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.PurchaseHostReservationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PurchaseReservedInstancesOffering holds details about calls to the PurchaseReservedInstancesOffering method.
		PurchaseReservedInstancesOffering []struct {
			// In1 is the in1 argument value.
			In1 *ec2.PurchaseReservedInstancesOfferingInput
		}
		// PurchaseReservedInstancesOfferingRequest holds details about calls to the PurchaseReservedInstancesOfferingRequest method.
		PurchaseReservedInstancesOfferingRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.PurchaseReservedInstancesOfferingInput
		}
		// PurchaseReservedInstancesOfferingWithContext holds details about calls to the PurchaseReservedInstancesOfferingWithContext method.
		PurchaseReservedInstancesOfferingWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.PurchaseReservedInstancesOfferingInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PurchaseScheduledInstances holds details about calls to the PurchaseScheduledInstances method.
		PurchaseScheduledInstances []struct {
			// In1 is the in1 argument value.
			In1 *ec2.PurchaseScheduledInstancesInput
		}
		// PurchaseScheduledInstancesRequest holds details about calls to the PurchaseScheduledInstancesRequest method.
		PurchaseScheduledInstancesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.PurchaseScheduledInstancesInput
		}
		// PurchaseScheduledInstancesWithContext holds details about calls to the PurchaseScheduledInstancesWithContext method.
		PurchaseScheduledInstancesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.PurchaseScheduledInstancesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RebootInstances holds details about calls to the RebootInstances method.
		RebootInstances []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RebootInstancesInput
		}
		// RebootInstancesRequest holds details about calls to the RebootInstancesRequest method.
		RebootInstancesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RebootInstancesInput
		}
		// RebootInstancesWithContext holds details about calls to the RebootInstancesWithContext method.
		RebootInstancesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.RebootInstancesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RegisterImage holds details about calls to the RegisterImage method.
		RegisterImage []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RegisterImageInput
		}
		// RegisterImageRequest holds details about calls to the RegisterImageRequest method.
		RegisterImageRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RegisterImageInput
		}
		// RegisterImageWithContext holds details about calls to the RegisterImageWithContext method.
		RegisterImageWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.RegisterImageInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RegisterTransitGatewayMulticastGroupMembers holds details about calls to the RegisterTransitGatewayMulticastGroupMembers method.
		RegisterTransitGatewayMulticastGroupMembers []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RegisterTransitGatewayMulticastGroupMembersInput
		}
		// RegisterTransitGatewayMulticastGroupMembersRequest holds details about calls to the RegisterTransitGatewayMulticastGroupMembersRequest method.
		RegisterTransitGatewayMulticastGroupMembersRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RegisterTransitGatewayMulticastGroupMembersInput
		}
		// RegisterTransitGatewayMulticastGroupMembersWithContext holds details about calls to the RegisterTransitGatewayMulticastGroupMembersWithContext method.
		RegisterTransitGatewayMulticastGroupMembersWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.RegisterTransitGatewayMulticastGroupMembersInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RegisterTransitGatewayMulticastGroupSources holds details about calls to the RegisterTransitGatewayMulticastGroupSources method.
		RegisterTransitGatewayMulticastGroupSources []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput
		}
		// RegisterTransitGatewayMulticastGroupSourcesRequest holds details about calls to the RegisterTransitGatewayMulticastGroupSourcesRequest method.
		RegisterTransitGatewayMulticastGroupSourcesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput
		}
		// RegisterTransitGatewayMulticastGroupSourcesWithContext holds details about calls to the RegisterTransitGatewayMulticastGroupSourcesWithContext method.
		RegisterTransitGatewayMulticastGroupSourcesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RejectTransitGatewayPeeringAttachment holds details about calls to the RejectTransitGatewayPeeringAttachment method.
		RejectTransitGatewayPeeringAttachment []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RejectTransitGatewayPeeringAttachmentInput
		}
		// RejectTransitGatewayPeeringAttachmentRequest holds details about calls to the RejectTransitGatewayPeeringAttachmentRequest method.
		RejectTransitGatewayPeeringAttachmentRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RejectTransitGatewayPeeringAttachmentInput
		}
		// RejectTransitGatewayPeeringAttachmentWithContext holds details about calls to the RejectTransitGatewayPeeringAttachmentWithContext method.
		RejectTransitGatewayPeeringAttachmentWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.RejectTransitGatewayPeeringAttachmentInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RejectTransitGatewayVpcAttachment holds details about calls to the RejectTransitGatewayVpcAttachment method.
		RejectTransitGatewayVpcAttachment []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RejectTransitGatewayVpcAttachmentInput
		}
		// RejectTransitGatewayVpcAttachmentRequest holds details about calls to the RejectTransitGatewayVpcAttachmentRequest method.
		RejectTransitGatewayVpcAttachmentRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RejectTransitGatewayVpcAttachmentInput
		}
		// RejectTransitGatewayVpcAttachmentWithContext holds details about calls to the RejectTransitGatewayVpcAttachmentWithContext method.
		RejectTransitGatewayVpcAttachmentWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.RejectTransitGatewayVpcAttachmentInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RejectVpcEndpointConnections holds details about calls to the RejectVpcEndpointConnections method.
		RejectVpcEndpointConnections []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RejectVpcEndpointConnectionsInput
		}
		// RejectVpcEndpointConnectionsRequest holds details about calls to the RejectVpcEndpointConnectionsRequest method.
		RejectVpcEndpointConnectionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RejectVpcEndpointConnectionsInput
		}
		// RejectVpcEndpointConnectionsWithContext holds details about calls to the RejectVpcEndpointConnectionsWithContext method.
		RejectVpcEndpointConnectionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.RejectVpcEndpointConnectionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RejectVpcPeeringConnection holds details about calls to the RejectVpcPeeringConnection method.
		RejectVpcPeeringConnection []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RejectVpcPeeringConnectionInput
		}
		// RejectVpcPeeringConnectionRequest holds details about calls to the RejectVpcPeeringConnectionRequest method.
		RejectVpcPeeringConnectionRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RejectVpcPeeringConnectionInput
		}
		// RejectVpcPeeringConnectionWithContext holds details about calls to the RejectVpcPeeringConnectionWithContext method.
		RejectVpcPeeringConnectionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.RejectVpcPeeringConnectionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ReleaseAddress holds details about calls to the ReleaseAddress method.
		ReleaseAddress []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ReleaseAddressInput
		}
		// ReleaseAddressRequest holds details about calls to the ReleaseAddressRequest method.
		ReleaseAddressRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ReleaseAddressInput
		}
		// ReleaseAddressWithContext holds details about calls to the ReleaseAddressWithContext method.
		ReleaseAddressWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ReleaseAddressInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ReleaseHosts holds details about calls to the ReleaseHosts method.
		ReleaseHosts []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ReleaseHostsInput
		}
		// ReleaseHostsRequest holds details about calls to the ReleaseHostsRequest method.
		ReleaseHostsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ReleaseHostsInput
		}
		// ReleaseHostsWithContext holds details about calls to the ReleaseHostsWithContext method.
		ReleaseHostsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ReleaseHostsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ReplaceIamInstanceProfileAssociation holds details about calls to the ReplaceIamInstanceProfileAssociation method.
		ReplaceIamInstanceProfileAssociation []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ReplaceIamInstanceProfileAssociationInput
		}
		// ReplaceIamInstanceProfileAssociationRequest holds details about calls to the ReplaceIamInstanceProfileAssociationRequest method.
		ReplaceIamInstanceProfileAssociationRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ReplaceIamInstanceProfileAssociationInput
		}
		// ReplaceIamInstanceProfileAssociationWithContext holds details about calls to the ReplaceIamInstanceProfileAssociationWithContext method.
		ReplaceIamInstanceProfileAssociationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ReplaceIamInstanceProfileAssociationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ReplaceNetworkAclAssociation holds details about calls to the ReplaceNetworkAclAssociation method.
		ReplaceNetworkAclAssociation []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ReplaceNetworkAclAssociationInput
		}
		// ReplaceNetworkAclAssociationRequest holds details about calls to the ReplaceNetworkAclAssociationRequest method.
		ReplaceNetworkAclAssociationRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ReplaceNetworkAclAssociationInput
		}
		// ReplaceNetworkAclAssociationWithContext holds details about calls to the ReplaceNetworkAclAssociationWithContext method.
		ReplaceNetworkAclAssociationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ReplaceNetworkAclAssociationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ReplaceNetworkAclEntry holds details about calls to the ReplaceNetworkAclEntry method.
		ReplaceNetworkAclEntry []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ReplaceNetworkAclEntryInput
		}
		// ReplaceNetworkAclEntryRequest holds details about calls to the ReplaceNetworkAclEntryRequest method.
		ReplaceNetworkAclEntryRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ReplaceNetworkAclEntryInput
		}
		// ReplaceNetworkAclEntryWithContext holds details about calls to the ReplaceNetworkAclEntryWithContext method.
		ReplaceNetworkAclEntryWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ReplaceNetworkAclEntryInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ReplaceRoute holds details about calls to the ReplaceRoute method.
		ReplaceRoute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ReplaceRouteInput
		}
		// ReplaceRouteRequest holds details about calls to the ReplaceRouteRequest method.
		ReplaceRouteRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ReplaceRouteInput
		}
		// ReplaceRouteTableAssociation holds details about calls to the ReplaceRouteTableAssociation method.
		ReplaceRouteTableAssociation []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ReplaceRouteTableAssociationInput
		}
		// ReplaceRouteTableAssociationRequest holds details about calls to the ReplaceRouteTableAssociationRequest method.
		ReplaceRouteTableAssociationRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ReplaceRouteTableAssociationInput
		}
		// ReplaceRouteTableAssociationWithContext holds details about calls to the ReplaceRouteTableAssociationWithContext method.
		ReplaceRouteTableAssociationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ReplaceRouteTableAssociationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ReplaceRouteWithContext holds details about calls to the ReplaceRouteWithContext method.
		ReplaceRouteWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ReplaceRouteInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ReplaceTransitGatewayRoute holds details about calls to the ReplaceTransitGatewayRoute method.
		ReplaceTransitGatewayRoute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ReplaceTransitGatewayRouteInput
		}
		// ReplaceTransitGatewayRouteRequest holds details about calls to the ReplaceTransitGatewayRouteRequest method.
		ReplaceTransitGatewayRouteRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ReplaceTransitGatewayRouteInput
		}
		// ReplaceTransitGatewayRouteWithContext holds details about calls to the ReplaceTransitGatewayRouteWithContext method.
		ReplaceTransitGatewayRouteWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ReplaceTransitGatewayRouteInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ReportInstanceStatus holds details about calls to the ReportInstanceStatus method.
		ReportInstanceStatus []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ReportInstanceStatusInput
		}
		// ReportInstanceStatusRequest holds details about calls to the ReportInstanceStatusRequest method.
		ReportInstanceStatusRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ReportInstanceStatusInput
		}
		// ReportInstanceStatusWithContext holds details about calls to the ReportInstanceStatusWithContext method.
		ReportInstanceStatusWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ReportInstanceStatusInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RequestSpotFleet holds details about calls to the RequestSpotFleet method.
		RequestSpotFleet []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RequestSpotFleetInput
		}
		// RequestSpotFleetRequest holds details about calls to the RequestSpotFleetRequest method.
		RequestSpotFleetRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RequestSpotFleetInput
		}
		// RequestSpotFleetWithContext holds details about calls to the RequestSpotFleetWithContext method.
		RequestSpotFleetWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.RequestSpotFleetInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RequestSpotInstances holds details about calls to the RequestSpotInstances method.
		RequestSpotInstances []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RequestSpotInstancesInput
		}
		// RequestSpotInstancesRequest holds details about calls to the RequestSpotInstancesRequest method.
		RequestSpotInstancesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RequestSpotInstancesInput
		}
		// RequestSpotInstancesWithContext holds details about calls to the RequestSpotInstancesWithContext method.
		RequestSpotInstancesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.RequestSpotInstancesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ResetEbsDefaultKmsKeyId holds details about calls to the ResetEbsDefaultKmsKeyId method.
		ResetEbsDefaultKmsKeyId []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ResetEbsDefaultKmsKeyIdInput
		}
		// ResetEbsDefaultKmsKeyIdRequest holds details about calls to the ResetEbsDefaultKmsKeyIdRequest method.
		ResetEbsDefaultKmsKeyIdRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ResetEbsDefaultKmsKeyIdInput
		}
		// ResetEbsDefaultKmsKeyIdWithContext holds details about calls to the ResetEbsDefaultKmsKeyIdWithContext method.
		ResetEbsDefaultKmsKeyIdWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ResetEbsDefaultKmsKeyIdInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ResetFpgaImageAttribute holds details about calls to the ResetFpgaImageAttribute method.
		ResetFpgaImageAttribute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ResetFpgaImageAttributeInput
		}
		// ResetFpgaImageAttributeRequest holds details about calls to the ResetFpgaImageAttributeRequest method.
		ResetFpgaImageAttributeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ResetFpgaImageAttributeInput
		}
		// ResetFpgaImageAttributeWithContext holds details about calls to the ResetFpgaImageAttributeWithContext method.
		ResetFpgaImageAttributeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ResetFpgaImageAttributeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ResetImageAttribute holds details about calls to the ResetImageAttribute method.
		ResetImageAttribute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ResetImageAttributeInput
		}
		// ResetImageAttributeRequest holds details about calls to the ResetImageAttributeRequest method.
		ResetImageAttributeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ResetImageAttributeInput
		}
		// ResetImageAttributeWithContext holds details about calls to the ResetImageAttributeWithContext method.
		ResetImageAttributeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ResetImageAttributeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ResetInstanceAttribute holds details about calls to the ResetInstanceAttribute method.
		ResetInstanceAttribute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ResetInstanceAttributeInput
		}
		// ResetInstanceAttributeRequest holds details about calls to the ResetInstanceAttributeRequest method.
		ResetInstanceAttributeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ResetInstanceAttributeInput
		}
		// ResetInstanceAttributeWithContext holds details about calls to the ResetInstanceAttributeWithContext method.
		ResetInstanceAttributeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ResetInstanceAttributeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ResetNetworkInterfaceAttribute holds details about calls to the ResetNetworkInterfaceAttribute method.
		ResetNetworkInterfaceAttribute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ResetNetworkInterfaceAttributeInput
		}
		// ResetNetworkInterfaceAttributeRequest holds details about calls to the ResetNetworkInterfaceAttributeRequest method.
		ResetNetworkInterfaceAttributeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ResetNetworkInterfaceAttributeInput
		}
		// ResetNetworkInterfaceAttributeWithContext holds details about calls to the ResetNetworkInterfaceAttributeWithContext method.
		ResetNetworkInterfaceAttributeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ResetNetworkInterfaceAttributeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ResetSnapshotAttribute holds details about calls to the ResetSnapshotAttribute method.
		ResetSnapshotAttribute []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ResetSnapshotAttributeInput
		}
		// ResetSnapshotAttributeRequest holds details about calls to the ResetSnapshotAttributeRequest method.
		ResetSnapshotAttributeRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.ResetSnapshotAttributeInput
		}
		// ResetSnapshotAttributeWithContext holds details about calls to the ResetSnapshotAttributeWithContext method.
		ResetSnapshotAttributeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.ResetSnapshotAttributeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RestoreAddressToClassic holds details about calls to the RestoreAddressToClassic method.
		RestoreAddressToClassic []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RestoreAddressToClassicInput
		}
		// RestoreAddressToClassicRequest holds details about calls to the RestoreAddressToClassicRequest method.
		RestoreAddressToClassicRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RestoreAddressToClassicInput
		}
		// RestoreAddressToClassicWithContext holds details about calls to the RestoreAddressToClassicWithContext method.
		RestoreAddressToClassicWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.RestoreAddressToClassicInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RevokeClientVpnIngress holds details about calls to the RevokeClientVpnIngress method.
		RevokeClientVpnIngress []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RevokeClientVpnIngressInput
		}
		// RevokeClientVpnIngressRequest holds details about calls to the RevokeClientVpnIngressRequest method.
		RevokeClientVpnIngressRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RevokeClientVpnIngressInput
		}
		// RevokeClientVpnIngressWithContext holds details about calls to the RevokeClientVpnIngressWithContext method.
		RevokeClientVpnIngressWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.RevokeClientVpnIngressInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RevokeSecurityGroupEgress holds details about calls to the RevokeSecurityGroupEgress method.
		RevokeSecurityGroupEgress []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RevokeSecurityGroupEgressInput
		}
		// RevokeSecurityGroupEgressRequest holds details about calls to the RevokeSecurityGroupEgressRequest method.
		RevokeSecurityGroupEgressRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RevokeSecurityGroupEgressInput
		}
		// RevokeSecurityGroupEgressWithContext holds details about calls to the RevokeSecurityGroupEgressWithContext method.
		RevokeSecurityGroupEgressWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.RevokeSecurityGroupEgressInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RevokeSecurityGroupIngress holds details about calls to the RevokeSecurityGroupIngress method.
		RevokeSecurityGroupIngress []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RevokeSecurityGroupIngressInput
		}
		// RevokeSecurityGroupIngressRequest holds details about calls to the RevokeSecurityGroupIngressRequest method.
		RevokeSecurityGroupIngressRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RevokeSecurityGroupIngressInput
		}
		// RevokeSecurityGroupIngressWithContext holds details about calls to the RevokeSecurityGroupIngressWithContext method.
		RevokeSecurityGroupIngressWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.RevokeSecurityGroupIngressInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RunInstances holds details about calls to the RunInstances method.
		RunInstances []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RunInstancesInput
		}
		// RunInstancesRequest holds details about calls to the RunInstancesRequest method.
		RunInstancesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RunInstancesInput
		}
		// RunInstancesWithContext holds details about calls to the RunInstancesWithContext method.
		RunInstancesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.RunInstancesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RunScheduledInstances holds details about calls to the RunScheduledInstances method.
		RunScheduledInstances []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RunScheduledInstancesInput
		}
		// RunScheduledInstancesRequest holds details about calls to the RunScheduledInstancesRequest method.
		RunScheduledInstancesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.RunScheduledInstancesInput
		}
		// RunScheduledInstancesWithContext holds details about calls to the RunScheduledInstancesWithContext method.
		RunScheduledInstancesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.RunScheduledInstancesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// SearchLocalGatewayRoutes holds details about calls to the SearchLocalGatewayRoutes method.
		SearchLocalGatewayRoutes []struct {
			// In1 is the in1 argument value.
			In1 *ec2.SearchLocalGatewayRoutesInput
		}
		// SearchLocalGatewayRoutesRequest holds details about calls to the SearchLocalGatewayRoutesRequest method.
		SearchLocalGatewayRoutesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.SearchLocalGatewayRoutesInput
		}
		// SearchLocalGatewayRoutesWithContext holds details about calls to the SearchLocalGatewayRoutesWithContext method.
		SearchLocalGatewayRoutesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.SearchLocalGatewayRoutesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// SearchTransitGatewayMulticastGroups holds details about calls to the SearchTransitGatewayMulticastGroups method.
		SearchTransitGatewayMulticastGroups []struct {
			// In1 is the in1 argument value.
			In1 *ec2.SearchTransitGatewayMulticastGroupsInput
		}
		// SearchTransitGatewayMulticastGroupsRequest holds details about calls to the SearchTransitGatewayMulticastGroupsRequest method.
		SearchTransitGatewayMulticastGroupsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.SearchTransitGatewayMulticastGroupsInput
		}
		// SearchTransitGatewayMulticastGroupsWithContext holds details about calls to the SearchTransitGatewayMulticastGroupsWithContext method.
		SearchTransitGatewayMulticastGroupsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.SearchTransitGatewayMulticastGroupsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// SearchTransitGatewayRoutes holds details about calls to the SearchTransitGatewayRoutes method.
		SearchTransitGatewayRoutes []struct {
			// In1 is the in1 argument value.
			In1 *ec2.SearchTransitGatewayRoutesInput
		}
		// SearchTransitGatewayRoutesRequest holds details about calls to the SearchTransitGatewayRoutesRequest method.
		SearchTransitGatewayRoutesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.SearchTransitGatewayRoutesInput
		}
		// SearchTransitGatewayRoutesWithContext holds details about calls to the SearchTransitGatewayRoutesWithContext method.
		SearchTransitGatewayRoutesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.SearchTransitGatewayRoutesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// SendDiagnosticInterrupt holds details about calls to the SendDiagnosticInterrupt method.
		SendDiagnosticInterrupt []struct {
			// In1 is the in1 argument value.
			In1 *ec2.SendDiagnosticInterruptInput
		}
		// SendDiagnosticInterruptRequest holds details about calls to the SendDiagnosticInterruptRequest method.
		SendDiagnosticInterruptRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.SendDiagnosticInterruptInput
		}
		// SendDiagnosticInterruptWithContext holds details about calls to the SendDiagnosticInterruptWithContext method.
		SendDiagnosticInterruptWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.SendDiagnosticInterruptInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// StartInstances holds details about calls to the StartInstances method.
		StartInstances []struct {
			// In1 is the in1 argument value.
			In1 *ec2.StartInstancesInput
		}
		// StartInstancesRequest holds details about calls to the StartInstancesRequest method.
		StartInstancesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.StartInstancesInput
		}
		// StartInstancesWithContext holds details about calls to the StartInstancesWithContext method.
		StartInstancesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.StartInstancesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// StartVpcEndpointServicePrivateDnsVerification holds details about calls to the StartVpcEndpointServicePrivateDnsVerification method.
		StartVpcEndpointServicePrivateDnsVerification []struct {
			// In1 is the in1 argument value.
			In1 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput
		}
		// StartVpcEndpointServicePrivateDnsVerificationRequest holds details about calls to the StartVpcEndpointServicePrivateDnsVerificationRequest method.
		StartVpcEndpointServicePrivateDnsVerificationRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput
		}
		// StartVpcEndpointServicePrivateDnsVerificationWithContext holds details about calls to the StartVpcEndpointServicePrivateDnsVerificationWithContext method.
		StartVpcEndpointServicePrivateDnsVerificationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// StopInstances holds details about calls to the StopInstances method.
		StopInstances []struct {
			// In1 is the in1 argument value.
			In1 *ec2.StopInstancesInput
		}
		// StopInstancesRequest holds details about calls to the StopInstancesRequest method.
		StopInstancesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.StopInstancesInput
		}
		// StopInstancesWithContext holds details about calls to the StopInstancesWithContext method.
		StopInstancesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.StopInstancesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// TerminateClientVpnConnections holds details about calls to the TerminateClientVpnConnections method.
		TerminateClientVpnConnections []struct {
			// In1 is the in1 argument value.
			In1 *ec2.TerminateClientVpnConnectionsInput
		}
		// TerminateClientVpnConnectionsRequest holds details about calls to the TerminateClientVpnConnectionsRequest method.
		TerminateClientVpnConnectionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.TerminateClientVpnConnectionsInput
		}
		// TerminateClientVpnConnectionsWithContext holds details about calls to the TerminateClientVpnConnectionsWithContext method.
		TerminateClientVpnConnectionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.TerminateClientVpnConnectionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// TerminateInstances holds details about calls to the TerminateInstances method.
		TerminateInstances []struct {
			// In1 is the in1 argument value.
			In1 *ec2.TerminateInstancesInput
		}
		// TerminateInstancesRequest holds details about calls to the TerminateInstancesRequest method.
		TerminateInstancesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.TerminateInstancesInput
		}
		// TerminateInstancesWithContext holds details about calls to the TerminateInstancesWithContext method.
		TerminateInstancesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.TerminateInstancesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UnassignIpv6Addresses holds details about calls to the UnassignIpv6Addresses method.
		UnassignIpv6Addresses []struct {
			// In1 is the in1 argument value.
			In1 *ec2.UnassignIpv6AddressesInput
		}
		// UnassignIpv6AddressesRequest holds details about calls to the UnassignIpv6AddressesRequest method.
		UnassignIpv6AddressesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.UnassignIpv6AddressesInput
		}
		// UnassignIpv6AddressesWithContext holds details about calls to the UnassignIpv6AddressesWithContext method.
		UnassignIpv6AddressesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.UnassignIpv6AddressesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UnassignPrivateIpAddresses holds details about calls to the UnassignPrivateIpAddresses method.
		UnassignPrivateIpAddresses []struct {
			// In1 is the in1 argument value.
			In1 *ec2.UnassignPrivateIpAddressesInput
		}
		// UnassignPrivateIpAddressesRequest holds details about calls to the UnassignPrivateIpAddressesRequest method.
		UnassignPrivateIpAddressesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.UnassignPrivateIpAddressesInput
		}
		// UnassignPrivateIpAddressesWithContext holds details about calls to the UnassignPrivateIpAddressesWithContext method.
		UnassignPrivateIpAddressesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.UnassignPrivateIpAddressesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UnmonitorInstances holds details about calls to the UnmonitorInstances method.
		UnmonitorInstances []struct {
			// In1 is the in1 argument value.
			In1 *ec2.UnmonitorInstancesInput
		}
		// UnmonitorInstancesRequest holds details about calls to the UnmonitorInstancesRequest method.
		UnmonitorInstancesRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.UnmonitorInstancesInput
		}
		// UnmonitorInstancesWithContext holds details about calls to the UnmonitorInstancesWithContext method.
		UnmonitorInstancesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.UnmonitorInstancesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateSecurityGroupRuleDescriptionsEgress holds details about calls to the UpdateSecurityGroupRuleDescriptionsEgress method.
		UpdateSecurityGroupRuleDescriptionsEgress []struct {
			// In1 is the in1 argument value.
			In1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput
		}
		// UpdateSecurityGroupRuleDescriptionsEgressRequest holds details about calls to the UpdateSecurityGroupRuleDescriptionsEgressRequest method.
		UpdateSecurityGroupRuleDescriptionsEgressRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput
		}
		// UpdateSecurityGroupRuleDescriptionsEgressWithContext holds details about calls to the UpdateSecurityGroupRuleDescriptionsEgressWithContext method.
		UpdateSecurityGroupRuleDescriptionsEgressWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateSecurityGroupRuleDescriptionsIngress holds details about calls to the UpdateSecurityGroupRuleDescriptionsIngress method.
		UpdateSecurityGroupRuleDescriptionsIngress []struct {
			// In1 is the in1 argument value.
			In1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput
		}
		// UpdateSecurityGroupRuleDescriptionsIngressRequest holds details about calls to the UpdateSecurityGroupRuleDescriptionsIngressRequest method.
		UpdateSecurityGroupRuleDescriptionsIngressRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput
		}
		// UpdateSecurityGroupRuleDescriptionsIngressWithContext holds details about calls to the UpdateSecurityGroupRuleDescriptionsIngressWithContext method.
		UpdateSecurityGroupRuleDescriptionsIngressWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// WaitUntilBundleTaskComplete holds details about calls to the WaitUntilBundleTaskComplete method.
		WaitUntilBundleTaskComplete []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeBundleTasksInput
		}
		// WaitUntilBundleTaskCompleteWithContext holds details about calls to the WaitUntilBundleTaskCompleteWithContext method.
		WaitUntilBundleTaskCompleteWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeBundleTasksInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilConversionTaskCancelled holds details about calls to the WaitUntilConversionTaskCancelled method.
		WaitUntilConversionTaskCancelled []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeConversionTasksInput
		}
		// WaitUntilConversionTaskCancelledWithContext holds details about calls to the WaitUntilConversionTaskCancelledWithContext method.
		WaitUntilConversionTaskCancelledWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeConversionTasksInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilConversionTaskCompleted holds details about calls to the WaitUntilConversionTaskCompleted method.
		WaitUntilConversionTaskCompleted []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeConversionTasksInput
		}
		// WaitUntilConversionTaskCompletedWithContext holds details about calls to the WaitUntilConversionTaskCompletedWithContext method.
		WaitUntilConversionTaskCompletedWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeConversionTasksInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilConversionTaskDeleted holds details about calls to the WaitUntilConversionTaskDeleted method.
		WaitUntilConversionTaskDeleted []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeConversionTasksInput
		}
		// WaitUntilConversionTaskDeletedWithContext holds details about calls to the WaitUntilConversionTaskDeletedWithContext method.
		WaitUntilConversionTaskDeletedWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeConversionTasksInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilCustomerGatewayAvailable holds details about calls to the WaitUntilCustomerGatewayAvailable method.
		WaitUntilCustomerGatewayAvailable []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeCustomerGatewaysInput
		}
		// WaitUntilCustomerGatewayAvailableWithContext holds details about calls to the WaitUntilCustomerGatewayAvailableWithContext method.
		WaitUntilCustomerGatewayAvailableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeCustomerGatewaysInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilExportTaskCancelled holds details about calls to the WaitUntilExportTaskCancelled method.
		WaitUntilExportTaskCancelled []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeExportTasksInput
		}
		// WaitUntilExportTaskCancelledWithContext holds details about calls to the WaitUntilExportTaskCancelledWithContext method.
		WaitUntilExportTaskCancelledWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeExportTasksInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilExportTaskCompleted holds details about calls to the WaitUntilExportTaskCompleted method.
		WaitUntilExportTaskCompleted []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeExportTasksInput
		}
		// WaitUntilExportTaskCompletedWithContext holds details about calls to the WaitUntilExportTaskCompletedWithContext method.
		WaitUntilExportTaskCompletedWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeExportTasksInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilImageAvailable holds details about calls to the WaitUntilImageAvailable method.
		WaitUntilImageAvailable []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeImagesInput
		}
		// WaitUntilImageAvailableWithContext holds details about calls to the WaitUntilImageAvailableWithContext method.
		WaitUntilImageAvailableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeImagesInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilImageExists holds details about calls to the WaitUntilImageExists method.
		WaitUntilImageExists []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeImagesInput
		}
		// WaitUntilImageExistsWithContext holds details about calls to the WaitUntilImageExistsWithContext method.
		WaitUntilImageExistsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeImagesInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilInstanceExists holds details about calls to the WaitUntilInstanceExists method.
		WaitUntilInstanceExists []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeInstancesInput
		}
		// WaitUntilInstanceExistsWithContext holds details about calls to the WaitUntilInstanceExistsWithContext method.
		WaitUntilInstanceExistsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeInstancesInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilInstanceRunning holds details about calls to the WaitUntilInstanceRunning method.
		WaitUntilInstanceRunning []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeInstancesInput
		}
		// WaitUntilInstanceRunningWithContext holds details about calls to the WaitUntilInstanceRunningWithContext method.
		WaitUntilInstanceRunningWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeInstancesInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilInstanceStatusOk holds details about calls to the WaitUntilInstanceStatusOk method.
		WaitUntilInstanceStatusOk []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeInstanceStatusInput
		}
		// WaitUntilInstanceStatusOkWithContext holds details about calls to the WaitUntilInstanceStatusOkWithContext method.
		WaitUntilInstanceStatusOkWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeInstanceStatusInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilInstanceStopped holds details about calls to the WaitUntilInstanceStopped method.
		WaitUntilInstanceStopped []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeInstancesInput
		}
		// WaitUntilInstanceStoppedWithContext holds details about calls to the WaitUntilInstanceStoppedWithContext method.
		WaitUntilInstanceStoppedWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeInstancesInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilInstanceTerminated holds details about calls to the WaitUntilInstanceTerminated method.
		WaitUntilInstanceTerminated []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeInstancesInput
		}
		// WaitUntilInstanceTerminatedWithContext holds details about calls to the WaitUntilInstanceTerminatedWithContext method.
		WaitUntilInstanceTerminatedWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeInstancesInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilKeyPairExists holds details about calls to the WaitUntilKeyPairExists method.
		WaitUntilKeyPairExists []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeKeyPairsInput
		}
		// WaitUntilKeyPairExistsWithContext holds details about calls to the WaitUntilKeyPairExistsWithContext method.
		WaitUntilKeyPairExistsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeKeyPairsInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilNatGatewayAvailable holds details about calls to the WaitUntilNatGatewayAvailable method.
		WaitUntilNatGatewayAvailable []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeNatGatewaysInput
		}
		// WaitUntilNatGatewayAvailableWithContext holds details about calls to the WaitUntilNatGatewayAvailableWithContext method.
		WaitUntilNatGatewayAvailableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeNatGatewaysInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilNetworkInterfaceAvailable holds details about calls to the WaitUntilNetworkInterfaceAvailable method.
		WaitUntilNetworkInterfaceAvailable []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeNetworkInterfacesInput
		}
		// WaitUntilNetworkInterfaceAvailableWithContext holds details about calls to the WaitUntilNetworkInterfaceAvailableWithContext method.
		WaitUntilNetworkInterfaceAvailableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeNetworkInterfacesInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilPasswordDataAvailable holds details about calls to the WaitUntilPasswordDataAvailable method.
		WaitUntilPasswordDataAvailable []struct {
			// In1 is the in1 argument value.
			In1 *ec2.GetPasswordDataInput
		}
		// WaitUntilPasswordDataAvailableWithContext holds details about calls to the WaitUntilPasswordDataAvailableWithContext method.
		WaitUntilPasswordDataAvailableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.GetPasswordDataInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilSecurityGroupExists holds details about calls to the WaitUntilSecurityGroupExists method.
		WaitUntilSecurityGroupExists []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSecurityGroupsInput
		}
		// WaitUntilSecurityGroupExistsWithContext holds details about calls to the WaitUntilSecurityGroupExistsWithContext method.
		WaitUntilSecurityGroupExistsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeSecurityGroupsInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilSnapshotCompleted holds details about calls to the WaitUntilSnapshotCompleted method.
		WaitUntilSnapshotCompleted []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSnapshotsInput
		}
		// WaitUntilSnapshotCompletedWithContext holds details about calls to the WaitUntilSnapshotCompletedWithContext method.
		WaitUntilSnapshotCompletedWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeSnapshotsInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilSpotInstanceRequestFulfilled holds details about calls to the WaitUntilSpotInstanceRequestFulfilled method.
		WaitUntilSpotInstanceRequestFulfilled []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSpotInstanceRequestsInput
		}
		// WaitUntilSpotInstanceRequestFulfilledWithContext holds details about calls to the WaitUntilSpotInstanceRequestFulfilledWithContext method.
		WaitUntilSpotInstanceRequestFulfilledWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeSpotInstanceRequestsInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilSubnetAvailable holds details about calls to the WaitUntilSubnetAvailable method.
		WaitUntilSubnetAvailable []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeSubnetsInput
		}
		// WaitUntilSubnetAvailableWithContext holds details about calls to the WaitUntilSubnetAvailableWithContext method.
		WaitUntilSubnetAvailableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeSubnetsInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilSystemStatusOk holds details about calls to the WaitUntilSystemStatusOk method.
		WaitUntilSystemStatusOk []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeInstanceStatusInput
		}
		// WaitUntilSystemStatusOkWithContext holds details about calls to the WaitUntilSystemStatusOkWithContext method.
		WaitUntilSystemStatusOkWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeInstanceStatusInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilVolumeAvailable holds details about calls to the WaitUntilVolumeAvailable method.
		WaitUntilVolumeAvailable []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVolumesInput
		}
		// WaitUntilVolumeAvailableWithContext holds details about calls to the WaitUntilVolumeAvailableWithContext method.
		WaitUntilVolumeAvailableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVolumesInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilVolumeDeleted holds details about calls to the WaitUntilVolumeDeleted method.
		WaitUntilVolumeDeleted []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVolumesInput
		}
		// WaitUntilVolumeDeletedWithContext holds details about calls to the WaitUntilVolumeDeletedWithContext method.
		WaitUntilVolumeDeletedWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVolumesInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilVolumeInUse holds details about calls to the WaitUntilVolumeInUse method.
		WaitUntilVolumeInUse []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVolumesInput
		}
		// WaitUntilVolumeInUseWithContext holds details about calls to the WaitUntilVolumeInUseWithContext method.
		WaitUntilVolumeInUseWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVolumesInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilVpcAvailable holds details about calls to the WaitUntilVpcAvailable method.
		WaitUntilVpcAvailable []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcsInput
		}
		// WaitUntilVpcAvailableWithContext holds details about calls to the WaitUntilVpcAvailableWithContext method.
		WaitUntilVpcAvailableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpcsInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilVpcExists holds details about calls to the WaitUntilVpcExists method.
		WaitUntilVpcExists []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcsInput
		}
		// WaitUntilVpcExistsWithContext holds details about calls to the WaitUntilVpcExistsWithContext method.
		WaitUntilVpcExistsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpcsInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilVpcPeeringConnectionDeleted holds details about calls to the WaitUntilVpcPeeringConnectionDeleted method.
		WaitUntilVpcPeeringConnectionDeleted []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcPeeringConnectionsInput
		}
		// WaitUntilVpcPeeringConnectionDeletedWithContext holds details about calls to the WaitUntilVpcPeeringConnectionDeletedWithContext method.
		WaitUntilVpcPeeringConnectionDeletedWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpcPeeringConnectionsInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilVpcPeeringConnectionExists holds details about calls to the WaitUntilVpcPeeringConnectionExists method.
		WaitUntilVpcPeeringConnectionExists []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpcPeeringConnectionsInput
		}
		// WaitUntilVpcPeeringConnectionExistsWithContext holds details about calls to the WaitUntilVpcPeeringConnectionExistsWithContext method.
		WaitUntilVpcPeeringConnectionExistsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpcPeeringConnectionsInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilVpnConnectionAvailable holds details about calls to the WaitUntilVpnConnectionAvailable method.
		WaitUntilVpnConnectionAvailable []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpnConnectionsInput
		}
		// WaitUntilVpnConnectionAvailableWithContext holds details about calls to the WaitUntilVpnConnectionAvailableWithContext method.
		WaitUntilVpnConnectionAvailableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpnConnectionsInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilVpnConnectionDeleted holds details about calls to the WaitUntilVpnConnectionDeleted method.
		WaitUntilVpnConnectionDeleted []struct {
			// In1 is the in1 argument value.
			In1 *ec2.DescribeVpnConnectionsInput
		}
		// WaitUntilVpnConnectionDeletedWithContext holds details about calls to the WaitUntilVpnConnectionDeletedWithContext method.
		WaitUntilVpnConnectionDeletedWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.DescribeVpnConnectionsInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WithdrawByoipCidr holds details about calls to the WithdrawByoipCidr method.
		WithdrawByoipCidr []struct {
			// In1 is the in1 argument value.
			In1 *ec2.WithdrawByoipCidrInput
		}
		// WithdrawByoipCidrRequest holds details about calls to the WithdrawByoipCidrRequest method.
		WithdrawByoipCidrRequest []struct {
			// In1 is the in1 argument value.
			In1 *ec2.WithdrawByoipCidrInput
		}
		// WithdrawByoipCidrWithContext holds details about calls to the WithdrawByoipCidrWithContext method.
		WithdrawByoipCidrWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ec2.WithdrawByoipCidrInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
	}
}

// AcceptReservedInstancesExchangeQuote calls AcceptReservedInstancesExchangeQuoteFunc.
func (mock *ec2ClientMock) AcceptReservedInstancesExchangeQuote(in1 *ec2.AcceptReservedInstancesExchangeQuoteInput) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error) {
	if mock.AcceptReservedInstancesExchangeQuoteFunc == nil {
		panic("ec2ClientMock.AcceptReservedInstancesExchangeQuoteFunc: method is nil but ec2Client.AcceptReservedInstancesExchangeQuote was just called")
	}
	callInfo := struct {
		In1 *ec2.AcceptReservedInstancesExchangeQuoteInput
	}{
		In1: in1,
	}
	lockec2ClientMockAcceptReservedInstancesExchangeQuote.Lock()
	mock.calls.AcceptReservedInstancesExchangeQuote = append(mock.calls.AcceptReservedInstancesExchangeQuote, callInfo)
	lockec2ClientMockAcceptReservedInstancesExchangeQuote.Unlock()
	return mock.AcceptReservedInstancesExchangeQuoteFunc(in1)
}

// AcceptReservedInstancesExchangeQuoteCalls gets all the calls that were made to AcceptReservedInstancesExchangeQuote.
// Check the length with:
//     len(mockedec2Client.AcceptReservedInstancesExchangeQuoteCalls())
func (mock *ec2ClientMock) AcceptReservedInstancesExchangeQuoteCalls() []struct {
	In1 *ec2.AcceptReservedInstancesExchangeQuoteInput
} {
	var calls []struct {
		In1 *ec2.AcceptReservedInstancesExchangeQuoteInput
	}
	lockec2ClientMockAcceptReservedInstancesExchangeQuote.RLock()
	calls = mock.calls.AcceptReservedInstancesExchangeQuote
	lockec2ClientMockAcceptReservedInstancesExchangeQuote.RUnlock()
	return calls
}

// AcceptReservedInstancesExchangeQuoteRequest calls AcceptReservedInstancesExchangeQuoteRequestFunc.
func (mock *ec2ClientMock) AcceptReservedInstancesExchangeQuoteRequest(in1 *ec2.AcceptReservedInstancesExchangeQuoteInput) (*request.Request, *ec2.AcceptReservedInstancesExchangeQuoteOutput) {
	if mock.AcceptReservedInstancesExchangeQuoteRequestFunc == nil {
		panic("ec2ClientMock.AcceptReservedInstancesExchangeQuoteRequestFunc: method is nil but ec2Client.AcceptReservedInstancesExchangeQuoteRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AcceptReservedInstancesExchangeQuoteInput
	}{
		In1: in1,
	}
	lockec2ClientMockAcceptReservedInstancesExchangeQuoteRequest.Lock()
	mock.calls.AcceptReservedInstancesExchangeQuoteRequest = append(mock.calls.AcceptReservedInstancesExchangeQuoteRequest, callInfo)
	lockec2ClientMockAcceptReservedInstancesExchangeQuoteRequest.Unlock()
	return mock.AcceptReservedInstancesExchangeQuoteRequestFunc(in1)
}

// AcceptReservedInstancesExchangeQuoteRequestCalls gets all the calls that were made to AcceptReservedInstancesExchangeQuoteRequest.
// Check the length with:
//     len(mockedec2Client.AcceptReservedInstancesExchangeQuoteRequestCalls())
func (mock *ec2ClientMock) AcceptReservedInstancesExchangeQuoteRequestCalls() []struct {
	In1 *ec2.AcceptReservedInstancesExchangeQuoteInput
} {
	var calls []struct {
		In1 *ec2.AcceptReservedInstancesExchangeQuoteInput
	}
	lockec2ClientMockAcceptReservedInstancesExchangeQuoteRequest.RLock()
	calls = mock.calls.AcceptReservedInstancesExchangeQuoteRequest
	lockec2ClientMockAcceptReservedInstancesExchangeQuoteRequest.RUnlock()
	return calls
}

// AcceptReservedInstancesExchangeQuoteWithContext calls AcceptReservedInstancesExchangeQuoteWithContextFunc.
func (mock *ec2ClientMock) AcceptReservedInstancesExchangeQuoteWithContext(in1 context.Context, in2 *ec2.AcceptReservedInstancesExchangeQuoteInput, in3 ...request.Option) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error) {
	if mock.AcceptReservedInstancesExchangeQuoteWithContextFunc == nil {
		panic("ec2ClientMock.AcceptReservedInstancesExchangeQuoteWithContextFunc: method is nil but ec2Client.AcceptReservedInstancesExchangeQuoteWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AcceptReservedInstancesExchangeQuoteInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAcceptReservedInstancesExchangeQuoteWithContext.Lock()
	mock.calls.AcceptReservedInstancesExchangeQuoteWithContext = append(mock.calls.AcceptReservedInstancesExchangeQuoteWithContext, callInfo)
	lockec2ClientMockAcceptReservedInstancesExchangeQuoteWithContext.Unlock()
	return mock.AcceptReservedInstancesExchangeQuoteWithContextFunc(in1, in2, in3...)
}

// AcceptReservedInstancesExchangeQuoteWithContextCalls gets all the calls that were made to AcceptReservedInstancesExchangeQuoteWithContext.
// Check the length with:
//     len(mockedec2Client.AcceptReservedInstancesExchangeQuoteWithContextCalls())
func (mock *ec2ClientMock) AcceptReservedInstancesExchangeQuoteWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AcceptReservedInstancesExchangeQuoteInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AcceptReservedInstancesExchangeQuoteInput
		In3 []request.Option
	}
	lockec2ClientMockAcceptReservedInstancesExchangeQuoteWithContext.RLock()
	calls = mock.calls.AcceptReservedInstancesExchangeQuoteWithContext
	lockec2ClientMockAcceptReservedInstancesExchangeQuoteWithContext.RUnlock()
	return calls
}

// AcceptTransitGatewayPeeringAttachment calls AcceptTransitGatewayPeeringAttachmentFunc.
func (mock *ec2ClientMock) AcceptTransitGatewayPeeringAttachment(in1 *ec2.AcceptTransitGatewayPeeringAttachmentInput) (*ec2.AcceptTransitGatewayPeeringAttachmentOutput, error) {
	if mock.AcceptTransitGatewayPeeringAttachmentFunc == nil {
		panic("ec2ClientMock.AcceptTransitGatewayPeeringAttachmentFunc: method is nil but ec2Client.AcceptTransitGatewayPeeringAttachment was just called")
	}
	callInfo := struct {
		In1 *ec2.AcceptTransitGatewayPeeringAttachmentInput
	}{
		In1: in1,
	}
	lockec2ClientMockAcceptTransitGatewayPeeringAttachment.Lock()
	mock.calls.AcceptTransitGatewayPeeringAttachment = append(mock.calls.AcceptTransitGatewayPeeringAttachment, callInfo)
	lockec2ClientMockAcceptTransitGatewayPeeringAttachment.Unlock()
	return mock.AcceptTransitGatewayPeeringAttachmentFunc(in1)
}

// AcceptTransitGatewayPeeringAttachmentCalls gets all the calls that were made to AcceptTransitGatewayPeeringAttachment.
// Check the length with:
//     len(mockedec2Client.AcceptTransitGatewayPeeringAttachmentCalls())
func (mock *ec2ClientMock) AcceptTransitGatewayPeeringAttachmentCalls() []struct {
	In1 *ec2.AcceptTransitGatewayPeeringAttachmentInput
} {
	var calls []struct {
		In1 *ec2.AcceptTransitGatewayPeeringAttachmentInput
	}
	lockec2ClientMockAcceptTransitGatewayPeeringAttachment.RLock()
	calls = mock.calls.AcceptTransitGatewayPeeringAttachment
	lockec2ClientMockAcceptTransitGatewayPeeringAttachment.RUnlock()
	return calls
}

// AcceptTransitGatewayPeeringAttachmentRequest calls AcceptTransitGatewayPeeringAttachmentRequestFunc.
func (mock *ec2ClientMock) AcceptTransitGatewayPeeringAttachmentRequest(in1 *ec2.AcceptTransitGatewayPeeringAttachmentInput) (*request.Request, *ec2.AcceptTransitGatewayPeeringAttachmentOutput) {
	if mock.AcceptTransitGatewayPeeringAttachmentRequestFunc == nil {
		panic("ec2ClientMock.AcceptTransitGatewayPeeringAttachmentRequestFunc: method is nil but ec2Client.AcceptTransitGatewayPeeringAttachmentRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AcceptTransitGatewayPeeringAttachmentInput
	}{
		In1: in1,
	}
	lockec2ClientMockAcceptTransitGatewayPeeringAttachmentRequest.Lock()
	mock.calls.AcceptTransitGatewayPeeringAttachmentRequest = append(mock.calls.AcceptTransitGatewayPeeringAttachmentRequest, callInfo)
	lockec2ClientMockAcceptTransitGatewayPeeringAttachmentRequest.Unlock()
	return mock.AcceptTransitGatewayPeeringAttachmentRequestFunc(in1)
}

// AcceptTransitGatewayPeeringAttachmentRequestCalls gets all the calls that were made to AcceptTransitGatewayPeeringAttachmentRequest.
// Check the length with:
//     len(mockedec2Client.AcceptTransitGatewayPeeringAttachmentRequestCalls())
func (mock *ec2ClientMock) AcceptTransitGatewayPeeringAttachmentRequestCalls() []struct {
	In1 *ec2.AcceptTransitGatewayPeeringAttachmentInput
} {
	var calls []struct {
		In1 *ec2.AcceptTransitGatewayPeeringAttachmentInput
	}
	lockec2ClientMockAcceptTransitGatewayPeeringAttachmentRequest.RLock()
	calls = mock.calls.AcceptTransitGatewayPeeringAttachmentRequest
	lockec2ClientMockAcceptTransitGatewayPeeringAttachmentRequest.RUnlock()
	return calls
}

// AcceptTransitGatewayPeeringAttachmentWithContext calls AcceptTransitGatewayPeeringAttachmentWithContextFunc.
func (mock *ec2ClientMock) AcceptTransitGatewayPeeringAttachmentWithContext(in1 context.Context, in2 *ec2.AcceptTransitGatewayPeeringAttachmentInput, in3 ...request.Option) (*ec2.AcceptTransitGatewayPeeringAttachmentOutput, error) {
	if mock.AcceptTransitGatewayPeeringAttachmentWithContextFunc == nil {
		panic("ec2ClientMock.AcceptTransitGatewayPeeringAttachmentWithContextFunc: method is nil but ec2Client.AcceptTransitGatewayPeeringAttachmentWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AcceptTransitGatewayPeeringAttachmentInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAcceptTransitGatewayPeeringAttachmentWithContext.Lock()
	mock.calls.AcceptTransitGatewayPeeringAttachmentWithContext = append(mock.calls.AcceptTransitGatewayPeeringAttachmentWithContext, callInfo)
	lockec2ClientMockAcceptTransitGatewayPeeringAttachmentWithContext.Unlock()
	return mock.AcceptTransitGatewayPeeringAttachmentWithContextFunc(in1, in2, in3...)
}

// AcceptTransitGatewayPeeringAttachmentWithContextCalls gets all the calls that were made to AcceptTransitGatewayPeeringAttachmentWithContext.
// Check the length with:
//     len(mockedec2Client.AcceptTransitGatewayPeeringAttachmentWithContextCalls())
func (mock *ec2ClientMock) AcceptTransitGatewayPeeringAttachmentWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AcceptTransitGatewayPeeringAttachmentInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AcceptTransitGatewayPeeringAttachmentInput
		In3 []request.Option
	}
	lockec2ClientMockAcceptTransitGatewayPeeringAttachmentWithContext.RLock()
	calls = mock.calls.AcceptTransitGatewayPeeringAttachmentWithContext
	lockec2ClientMockAcceptTransitGatewayPeeringAttachmentWithContext.RUnlock()
	return calls
}

// AcceptTransitGatewayVpcAttachment calls AcceptTransitGatewayVpcAttachmentFunc.
func (mock *ec2ClientMock) AcceptTransitGatewayVpcAttachment(in1 *ec2.AcceptTransitGatewayVpcAttachmentInput) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error) {
	if mock.AcceptTransitGatewayVpcAttachmentFunc == nil {
		panic("ec2ClientMock.AcceptTransitGatewayVpcAttachmentFunc: method is nil but ec2Client.AcceptTransitGatewayVpcAttachment was just called")
	}
	callInfo := struct {
		In1 *ec2.AcceptTransitGatewayVpcAttachmentInput
	}{
		In1: in1,
	}
	lockec2ClientMockAcceptTransitGatewayVpcAttachment.Lock()
	mock.calls.AcceptTransitGatewayVpcAttachment = append(mock.calls.AcceptTransitGatewayVpcAttachment, callInfo)
	lockec2ClientMockAcceptTransitGatewayVpcAttachment.Unlock()
	return mock.AcceptTransitGatewayVpcAttachmentFunc(in1)
}

// AcceptTransitGatewayVpcAttachmentCalls gets all the calls that were made to AcceptTransitGatewayVpcAttachment.
// Check the length with:
//     len(mockedec2Client.AcceptTransitGatewayVpcAttachmentCalls())
func (mock *ec2ClientMock) AcceptTransitGatewayVpcAttachmentCalls() []struct {
	In1 *ec2.AcceptTransitGatewayVpcAttachmentInput
} {
	var calls []struct {
		In1 *ec2.AcceptTransitGatewayVpcAttachmentInput
	}
	lockec2ClientMockAcceptTransitGatewayVpcAttachment.RLock()
	calls = mock.calls.AcceptTransitGatewayVpcAttachment
	lockec2ClientMockAcceptTransitGatewayVpcAttachment.RUnlock()
	return calls
}

// AcceptTransitGatewayVpcAttachmentRequest calls AcceptTransitGatewayVpcAttachmentRequestFunc.
func (mock *ec2ClientMock) AcceptTransitGatewayVpcAttachmentRequest(in1 *ec2.AcceptTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.AcceptTransitGatewayVpcAttachmentOutput) {
	if mock.AcceptTransitGatewayVpcAttachmentRequestFunc == nil {
		panic("ec2ClientMock.AcceptTransitGatewayVpcAttachmentRequestFunc: method is nil but ec2Client.AcceptTransitGatewayVpcAttachmentRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AcceptTransitGatewayVpcAttachmentInput
	}{
		In1: in1,
	}
	lockec2ClientMockAcceptTransitGatewayVpcAttachmentRequest.Lock()
	mock.calls.AcceptTransitGatewayVpcAttachmentRequest = append(mock.calls.AcceptTransitGatewayVpcAttachmentRequest, callInfo)
	lockec2ClientMockAcceptTransitGatewayVpcAttachmentRequest.Unlock()
	return mock.AcceptTransitGatewayVpcAttachmentRequestFunc(in1)
}

// AcceptTransitGatewayVpcAttachmentRequestCalls gets all the calls that were made to AcceptTransitGatewayVpcAttachmentRequest.
// Check the length with:
//     len(mockedec2Client.AcceptTransitGatewayVpcAttachmentRequestCalls())
func (mock *ec2ClientMock) AcceptTransitGatewayVpcAttachmentRequestCalls() []struct {
	In1 *ec2.AcceptTransitGatewayVpcAttachmentInput
} {
	var calls []struct {
		In1 *ec2.AcceptTransitGatewayVpcAttachmentInput
	}
	lockec2ClientMockAcceptTransitGatewayVpcAttachmentRequest.RLock()
	calls = mock.calls.AcceptTransitGatewayVpcAttachmentRequest
	lockec2ClientMockAcceptTransitGatewayVpcAttachmentRequest.RUnlock()
	return calls
}

// AcceptTransitGatewayVpcAttachmentWithContext calls AcceptTransitGatewayVpcAttachmentWithContextFunc.
func (mock *ec2ClientMock) AcceptTransitGatewayVpcAttachmentWithContext(in1 context.Context, in2 *ec2.AcceptTransitGatewayVpcAttachmentInput, in3 ...request.Option) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error) {
	if mock.AcceptTransitGatewayVpcAttachmentWithContextFunc == nil {
		panic("ec2ClientMock.AcceptTransitGatewayVpcAttachmentWithContextFunc: method is nil but ec2Client.AcceptTransitGatewayVpcAttachmentWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AcceptTransitGatewayVpcAttachmentInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAcceptTransitGatewayVpcAttachmentWithContext.Lock()
	mock.calls.AcceptTransitGatewayVpcAttachmentWithContext = append(mock.calls.AcceptTransitGatewayVpcAttachmentWithContext, callInfo)
	lockec2ClientMockAcceptTransitGatewayVpcAttachmentWithContext.Unlock()
	return mock.AcceptTransitGatewayVpcAttachmentWithContextFunc(in1, in2, in3...)
}

// AcceptTransitGatewayVpcAttachmentWithContextCalls gets all the calls that were made to AcceptTransitGatewayVpcAttachmentWithContext.
// Check the length with:
//     len(mockedec2Client.AcceptTransitGatewayVpcAttachmentWithContextCalls())
func (mock *ec2ClientMock) AcceptTransitGatewayVpcAttachmentWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AcceptTransitGatewayVpcAttachmentInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AcceptTransitGatewayVpcAttachmentInput
		In3 []request.Option
	}
	lockec2ClientMockAcceptTransitGatewayVpcAttachmentWithContext.RLock()
	calls = mock.calls.AcceptTransitGatewayVpcAttachmentWithContext
	lockec2ClientMockAcceptTransitGatewayVpcAttachmentWithContext.RUnlock()
	return calls
}

// AcceptVpcEndpointConnections calls AcceptVpcEndpointConnectionsFunc.
func (mock *ec2ClientMock) AcceptVpcEndpointConnections(in1 *ec2.AcceptVpcEndpointConnectionsInput) (*ec2.AcceptVpcEndpointConnectionsOutput, error) {
	if mock.AcceptVpcEndpointConnectionsFunc == nil {
		panic("ec2ClientMock.AcceptVpcEndpointConnectionsFunc: method is nil but ec2Client.AcceptVpcEndpointConnections was just called")
	}
	callInfo := struct {
		In1 *ec2.AcceptVpcEndpointConnectionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockAcceptVpcEndpointConnections.Lock()
	mock.calls.AcceptVpcEndpointConnections = append(mock.calls.AcceptVpcEndpointConnections, callInfo)
	lockec2ClientMockAcceptVpcEndpointConnections.Unlock()
	return mock.AcceptVpcEndpointConnectionsFunc(in1)
}

// AcceptVpcEndpointConnectionsCalls gets all the calls that were made to AcceptVpcEndpointConnections.
// Check the length with:
//     len(mockedec2Client.AcceptVpcEndpointConnectionsCalls())
func (mock *ec2ClientMock) AcceptVpcEndpointConnectionsCalls() []struct {
	In1 *ec2.AcceptVpcEndpointConnectionsInput
} {
	var calls []struct {
		In1 *ec2.AcceptVpcEndpointConnectionsInput
	}
	lockec2ClientMockAcceptVpcEndpointConnections.RLock()
	calls = mock.calls.AcceptVpcEndpointConnections
	lockec2ClientMockAcceptVpcEndpointConnections.RUnlock()
	return calls
}

// AcceptVpcEndpointConnectionsRequest calls AcceptVpcEndpointConnectionsRequestFunc.
func (mock *ec2ClientMock) AcceptVpcEndpointConnectionsRequest(in1 *ec2.AcceptVpcEndpointConnectionsInput) (*request.Request, *ec2.AcceptVpcEndpointConnectionsOutput) {
	if mock.AcceptVpcEndpointConnectionsRequestFunc == nil {
		panic("ec2ClientMock.AcceptVpcEndpointConnectionsRequestFunc: method is nil but ec2Client.AcceptVpcEndpointConnectionsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AcceptVpcEndpointConnectionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockAcceptVpcEndpointConnectionsRequest.Lock()
	mock.calls.AcceptVpcEndpointConnectionsRequest = append(mock.calls.AcceptVpcEndpointConnectionsRequest, callInfo)
	lockec2ClientMockAcceptVpcEndpointConnectionsRequest.Unlock()
	return mock.AcceptVpcEndpointConnectionsRequestFunc(in1)
}

// AcceptVpcEndpointConnectionsRequestCalls gets all the calls that were made to AcceptVpcEndpointConnectionsRequest.
// Check the length with:
//     len(mockedec2Client.AcceptVpcEndpointConnectionsRequestCalls())
func (mock *ec2ClientMock) AcceptVpcEndpointConnectionsRequestCalls() []struct {
	In1 *ec2.AcceptVpcEndpointConnectionsInput
} {
	var calls []struct {
		In1 *ec2.AcceptVpcEndpointConnectionsInput
	}
	lockec2ClientMockAcceptVpcEndpointConnectionsRequest.RLock()
	calls = mock.calls.AcceptVpcEndpointConnectionsRequest
	lockec2ClientMockAcceptVpcEndpointConnectionsRequest.RUnlock()
	return calls
}

// AcceptVpcEndpointConnectionsWithContext calls AcceptVpcEndpointConnectionsWithContextFunc.
func (mock *ec2ClientMock) AcceptVpcEndpointConnectionsWithContext(in1 context.Context, in2 *ec2.AcceptVpcEndpointConnectionsInput, in3 ...request.Option) (*ec2.AcceptVpcEndpointConnectionsOutput, error) {
	if mock.AcceptVpcEndpointConnectionsWithContextFunc == nil {
		panic("ec2ClientMock.AcceptVpcEndpointConnectionsWithContextFunc: method is nil but ec2Client.AcceptVpcEndpointConnectionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AcceptVpcEndpointConnectionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAcceptVpcEndpointConnectionsWithContext.Lock()
	mock.calls.AcceptVpcEndpointConnectionsWithContext = append(mock.calls.AcceptVpcEndpointConnectionsWithContext, callInfo)
	lockec2ClientMockAcceptVpcEndpointConnectionsWithContext.Unlock()
	return mock.AcceptVpcEndpointConnectionsWithContextFunc(in1, in2, in3...)
}

// AcceptVpcEndpointConnectionsWithContextCalls gets all the calls that were made to AcceptVpcEndpointConnectionsWithContext.
// Check the length with:
//     len(mockedec2Client.AcceptVpcEndpointConnectionsWithContextCalls())
func (mock *ec2ClientMock) AcceptVpcEndpointConnectionsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AcceptVpcEndpointConnectionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AcceptVpcEndpointConnectionsInput
		In3 []request.Option
	}
	lockec2ClientMockAcceptVpcEndpointConnectionsWithContext.RLock()
	calls = mock.calls.AcceptVpcEndpointConnectionsWithContext
	lockec2ClientMockAcceptVpcEndpointConnectionsWithContext.RUnlock()
	return calls
}

// AcceptVpcPeeringConnection calls AcceptVpcPeeringConnectionFunc.
func (mock *ec2ClientMock) AcceptVpcPeeringConnection(in1 *ec2.AcceptVpcPeeringConnectionInput) (*ec2.AcceptVpcPeeringConnectionOutput, error) {
	if mock.AcceptVpcPeeringConnectionFunc == nil {
		panic("ec2ClientMock.AcceptVpcPeeringConnectionFunc: method is nil but ec2Client.AcceptVpcPeeringConnection was just called")
	}
	callInfo := struct {
		In1 *ec2.AcceptVpcPeeringConnectionInput
	}{
		In1: in1,
	}
	lockec2ClientMockAcceptVpcPeeringConnection.Lock()
	mock.calls.AcceptVpcPeeringConnection = append(mock.calls.AcceptVpcPeeringConnection, callInfo)
	lockec2ClientMockAcceptVpcPeeringConnection.Unlock()
	return mock.AcceptVpcPeeringConnectionFunc(in1)
}

// AcceptVpcPeeringConnectionCalls gets all the calls that were made to AcceptVpcPeeringConnection.
// Check the length with:
//     len(mockedec2Client.AcceptVpcPeeringConnectionCalls())
func (mock *ec2ClientMock) AcceptVpcPeeringConnectionCalls() []struct {
	In1 *ec2.AcceptVpcPeeringConnectionInput
} {
	var calls []struct {
		In1 *ec2.AcceptVpcPeeringConnectionInput
	}
	lockec2ClientMockAcceptVpcPeeringConnection.RLock()
	calls = mock.calls.AcceptVpcPeeringConnection
	lockec2ClientMockAcceptVpcPeeringConnection.RUnlock()
	return calls
}

// AcceptVpcPeeringConnectionRequest calls AcceptVpcPeeringConnectionRequestFunc.
func (mock *ec2ClientMock) AcceptVpcPeeringConnectionRequest(in1 *ec2.AcceptVpcPeeringConnectionInput) (*request.Request, *ec2.AcceptVpcPeeringConnectionOutput) {
	if mock.AcceptVpcPeeringConnectionRequestFunc == nil {
		panic("ec2ClientMock.AcceptVpcPeeringConnectionRequestFunc: method is nil but ec2Client.AcceptVpcPeeringConnectionRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AcceptVpcPeeringConnectionInput
	}{
		In1: in1,
	}
	lockec2ClientMockAcceptVpcPeeringConnectionRequest.Lock()
	mock.calls.AcceptVpcPeeringConnectionRequest = append(mock.calls.AcceptVpcPeeringConnectionRequest, callInfo)
	lockec2ClientMockAcceptVpcPeeringConnectionRequest.Unlock()
	return mock.AcceptVpcPeeringConnectionRequestFunc(in1)
}

// AcceptVpcPeeringConnectionRequestCalls gets all the calls that were made to AcceptVpcPeeringConnectionRequest.
// Check the length with:
//     len(mockedec2Client.AcceptVpcPeeringConnectionRequestCalls())
func (mock *ec2ClientMock) AcceptVpcPeeringConnectionRequestCalls() []struct {
	In1 *ec2.AcceptVpcPeeringConnectionInput
} {
	var calls []struct {
		In1 *ec2.AcceptVpcPeeringConnectionInput
	}
	lockec2ClientMockAcceptVpcPeeringConnectionRequest.RLock()
	calls = mock.calls.AcceptVpcPeeringConnectionRequest
	lockec2ClientMockAcceptVpcPeeringConnectionRequest.RUnlock()
	return calls
}

// AcceptVpcPeeringConnectionWithContext calls AcceptVpcPeeringConnectionWithContextFunc.
func (mock *ec2ClientMock) AcceptVpcPeeringConnectionWithContext(in1 context.Context, in2 *ec2.AcceptVpcPeeringConnectionInput, in3 ...request.Option) (*ec2.AcceptVpcPeeringConnectionOutput, error) {
	if mock.AcceptVpcPeeringConnectionWithContextFunc == nil {
		panic("ec2ClientMock.AcceptVpcPeeringConnectionWithContextFunc: method is nil but ec2Client.AcceptVpcPeeringConnectionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AcceptVpcPeeringConnectionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAcceptVpcPeeringConnectionWithContext.Lock()
	mock.calls.AcceptVpcPeeringConnectionWithContext = append(mock.calls.AcceptVpcPeeringConnectionWithContext, callInfo)
	lockec2ClientMockAcceptVpcPeeringConnectionWithContext.Unlock()
	return mock.AcceptVpcPeeringConnectionWithContextFunc(in1, in2, in3...)
}

// AcceptVpcPeeringConnectionWithContextCalls gets all the calls that were made to AcceptVpcPeeringConnectionWithContext.
// Check the length with:
//     len(mockedec2Client.AcceptVpcPeeringConnectionWithContextCalls())
func (mock *ec2ClientMock) AcceptVpcPeeringConnectionWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AcceptVpcPeeringConnectionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AcceptVpcPeeringConnectionInput
		In3 []request.Option
	}
	lockec2ClientMockAcceptVpcPeeringConnectionWithContext.RLock()
	calls = mock.calls.AcceptVpcPeeringConnectionWithContext
	lockec2ClientMockAcceptVpcPeeringConnectionWithContext.RUnlock()
	return calls
}

// AdvertiseByoipCidr calls AdvertiseByoipCidrFunc.
func (mock *ec2ClientMock) AdvertiseByoipCidr(in1 *ec2.AdvertiseByoipCidrInput) (*ec2.AdvertiseByoipCidrOutput, error) {
	if mock.AdvertiseByoipCidrFunc == nil {
		panic("ec2ClientMock.AdvertiseByoipCidrFunc: method is nil but ec2Client.AdvertiseByoipCidr was just called")
	}
	callInfo := struct {
		In1 *ec2.AdvertiseByoipCidrInput
	}{
		In1: in1,
	}
	lockec2ClientMockAdvertiseByoipCidr.Lock()
	mock.calls.AdvertiseByoipCidr = append(mock.calls.AdvertiseByoipCidr, callInfo)
	lockec2ClientMockAdvertiseByoipCidr.Unlock()
	return mock.AdvertiseByoipCidrFunc(in1)
}

// AdvertiseByoipCidrCalls gets all the calls that were made to AdvertiseByoipCidr.
// Check the length with:
//     len(mockedec2Client.AdvertiseByoipCidrCalls())
func (mock *ec2ClientMock) AdvertiseByoipCidrCalls() []struct {
	In1 *ec2.AdvertiseByoipCidrInput
} {
	var calls []struct {
		In1 *ec2.AdvertiseByoipCidrInput
	}
	lockec2ClientMockAdvertiseByoipCidr.RLock()
	calls = mock.calls.AdvertiseByoipCidr
	lockec2ClientMockAdvertiseByoipCidr.RUnlock()
	return calls
}

// AdvertiseByoipCidrRequest calls AdvertiseByoipCidrRequestFunc.
func (mock *ec2ClientMock) AdvertiseByoipCidrRequest(in1 *ec2.AdvertiseByoipCidrInput) (*request.Request, *ec2.AdvertiseByoipCidrOutput) {
	if mock.AdvertiseByoipCidrRequestFunc == nil {
		panic("ec2ClientMock.AdvertiseByoipCidrRequestFunc: method is nil but ec2Client.AdvertiseByoipCidrRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AdvertiseByoipCidrInput
	}{
		In1: in1,
	}
	lockec2ClientMockAdvertiseByoipCidrRequest.Lock()
	mock.calls.AdvertiseByoipCidrRequest = append(mock.calls.AdvertiseByoipCidrRequest, callInfo)
	lockec2ClientMockAdvertiseByoipCidrRequest.Unlock()
	return mock.AdvertiseByoipCidrRequestFunc(in1)
}

// AdvertiseByoipCidrRequestCalls gets all the calls that were made to AdvertiseByoipCidrRequest.
// Check the length with:
//     len(mockedec2Client.AdvertiseByoipCidrRequestCalls())
func (mock *ec2ClientMock) AdvertiseByoipCidrRequestCalls() []struct {
	In1 *ec2.AdvertiseByoipCidrInput
} {
	var calls []struct {
		In1 *ec2.AdvertiseByoipCidrInput
	}
	lockec2ClientMockAdvertiseByoipCidrRequest.RLock()
	calls = mock.calls.AdvertiseByoipCidrRequest
	lockec2ClientMockAdvertiseByoipCidrRequest.RUnlock()
	return calls
}

// AdvertiseByoipCidrWithContext calls AdvertiseByoipCidrWithContextFunc.
func (mock *ec2ClientMock) AdvertiseByoipCidrWithContext(in1 context.Context, in2 *ec2.AdvertiseByoipCidrInput, in3 ...request.Option) (*ec2.AdvertiseByoipCidrOutput, error) {
	if mock.AdvertiseByoipCidrWithContextFunc == nil {
		panic("ec2ClientMock.AdvertiseByoipCidrWithContextFunc: method is nil but ec2Client.AdvertiseByoipCidrWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AdvertiseByoipCidrInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAdvertiseByoipCidrWithContext.Lock()
	mock.calls.AdvertiseByoipCidrWithContext = append(mock.calls.AdvertiseByoipCidrWithContext, callInfo)
	lockec2ClientMockAdvertiseByoipCidrWithContext.Unlock()
	return mock.AdvertiseByoipCidrWithContextFunc(in1, in2, in3...)
}

// AdvertiseByoipCidrWithContextCalls gets all the calls that were made to AdvertiseByoipCidrWithContext.
// Check the length with:
//     len(mockedec2Client.AdvertiseByoipCidrWithContextCalls())
func (mock *ec2ClientMock) AdvertiseByoipCidrWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AdvertiseByoipCidrInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AdvertiseByoipCidrInput
		In3 []request.Option
	}
	lockec2ClientMockAdvertiseByoipCidrWithContext.RLock()
	calls = mock.calls.AdvertiseByoipCidrWithContext
	lockec2ClientMockAdvertiseByoipCidrWithContext.RUnlock()
	return calls
}

// AllocateAddress calls AllocateAddressFunc.
func (mock *ec2ClientMock) AllocateAddress(in1 *ec2.AllocateAddressInput) (*ec2.AllocateAddressOutput, error) {
	if mock.AllocateAddressFunc == nil {
		panic("ec2ClientMock.AllocateAddressFunc: method is nil but ec2Client.AllocateAddress was just called")
	}
	callInfo := struct {
		In1 *ec2.AllocateAddressInput
	}{
		In1: in1,
	}
	lockec2ClientMockAllocateAddress.Lock()
	mock.calls.AllocateAddress = append(mock.calls.AllocateAddress, callInfo)
	lockec2ClientMockAllocateAddress.Unlock()
	return mock.AllocateAddressFunc(in1)
}

// AllocateAddressCalls gets all the calls that were made to AllocateAddress.
// Check the length with:
//     len(mockedec2Client.AllocateAddressCalls())
func (mock *ec2ClientMock) AllocateAddressCalls() []struct {
	In1 *ec2.AllocateAddressInput
} {
	var calls []struct {
		In1 *ec2.AllocateAddressInput
	}
	lockec2ClientMockAllocateAddress.RLock()
	calls = mock.calls.AllocateAddress
	lockec2ClientMockAllocateAddress.RUnlock()
	return calls
}

// AllocateAddressRequest calls AllocateAddressRequestFunc.
func (mock *ec2ClientMock) AllocateAddressRequest(in1 *ec2.AllocateAddressInput) (*request.Request, *ec2.AllocateAddressOutput) {
	if mock.AllocateAddressRequestFunc == nil {
		panic("ec2ClientMock.AllocateAddressRequestFunc: method is nil but ec2Client.AllocateAddressRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AllocateAddressInput
	}{
		In1: in1,
	}
	lockec2ClientMockAllocateAddressRequest.Lock()
	mock.calls.AllocateAddressRequest = append(mock.calls.AllocateAddressRequest, callInfo)
	lockec2ClientMockAllocateAddressRequest.Unlock()
	return mock.AllocateAddressRequestFunc(in1)
}

// AllocateAddressRequestCalls gets all the calls that were made to AllocateAddressRequest.
// Check the length with:
//     len(mockedec2Client.AllocateAddressRequestCalls())
func (mock *ec2ClientMock) AllocateAddressRequestCalls() []struct {
	In1 *ec2.AllocateAddressInput
} {
	var calls []struct {
		In1 *ec2.AllocateAddressInput
	}
	lockec2ClientMockAllocateAddressRequest.RLock()
	calls = mock.calls.AllocateAddressRequest
	lockec2ClientMockAllocateAddressRequest.RUnlock()
	return calls
}

// AllocateAddressWithContext calls AllocateAddressWithContextFunc.
func (mock *ec2ClientMock) AllocateAddressWithContext(in1 context.Context, in2 *ec2.AllocateAddressInput, in3 ...request.Option) (*ec2.AllocateAddressOutput, error) {
	if mock.AllocateAddressWithContextFunc == nil {
		panic("ec2ClientMock.AllocateAddressWithContextFunc: method is nil but ec2Client.AllocateAddressWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AllocateAddressInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAllocateAddressWithContext.Lock()
	mock.calls.AllocateAddressWithContext = append(mock.calls.AllocateAddressWithContext, callInfo)
	lockec2ClientMockAllocateAddressWithContext.Unlock()
	return mock.AllocateAddressWithContextFunc(in1, in2, in3...)
}

// AllocateAddressWithContextCalls gets all the calls that were made to AllocateAddressWithContext.
// Check the length with:
//     len(mockedec2Client.AllocateAddressWithContextCalls())
func (mock *ec2ClientMock) AllocateAddressWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AllocateAddressInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AllocateAddressInput
		In3 []request.Option
	}
	lockec2ClientMockAllocateAddressWithContext.RLock()
	calls = mock.calls.AllocateAddressWithContext
	lockec2ClientMockAllocateAddressWithContext.RUnlock()
	return calls
}

// AllocateHosts calls AllocateHostsFunc.
func (mock *ec2ClientMock) AllocateHosts(in1 *ec2.AllocateHostsInput) (*ec2.AllocateHostsOutput, error) {
	if mock.AllocateHostsFunc == nil {
		panic("ec2ClientMock.AllocateHostsFunc: method is nil but ec2Client.AllocateHosts was just called")
	}
	callInfo := struct {
		In1 *ec2.AllocateHostsInput
	}{
		In1: in1,
	}
	lockec2ClientMockAllocateHosts.Lock()
	mock.calls.AllocateHosts = append(mock.calls.AllocateHosts, callInfo)
	lockec2ClientMockAllocateHosts.Unlock()
	return mock.AllocateHostsFunc(in1)
}

// AllocateHostsCalls gets all the calls that were made to AllocateHosts.
// Check the length with:
//     len(mockedec2Client.AllocateHostsCalls())
func (mock *ec2ClientMock) AllocateHostsCalls() []struct {
	In1 *ec2.AllocateHostsInput
} {
	var calls []struct {
		In1 *ec2.AllocateHostsInput
	}
	lockec2ClientMockAllocateHosts.RLock()
	calls = mock.calls.AllocateHosts
	lockec2ClientMockAllocateHosts.RUnlock()
	return calls
}

// AllocateHostsRequest calls AllocateHostsRequestFunc.
func (mock *ec2ClientMock) AllocateHostsRequest(in1 *ec2.AllocateHostsInput) (*request.Request, *ec2.AllocateHostsOutput) {
	if mock.AllocateHostsRequestFunc == nil {
		panic("ec2ClientMock.AllocateHostsRequestFunc: method is nil but ec2Client.AllocateHostsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AllocateHostsInput
	}{
		In1: in1,
	}
	lockec2ClientMockAllocateHostsRequest.Lock()
	mock.calls.AllocateHostsRequest = append(mock.calls.AllocateHostsRequest, callInfo)
	lockec2ClientMockAllocateHostsRequest.Unlock()
	return mock.AllocateHostsRequestFunc(in1)
}

// AllocateHostsRequestCalls gets all the calls that were made to AllocateHostsRequest.
// Check the length with:
//     len(mockedec2Client.AllocateHostsRequestCalls())
func (mock *ec2ClientMock) AllocateHostsRequestCalls() []struct {
	In1 *ec2.AllocateHostsInput
} {
	var calls []struct {
		In1 *ec2.AllocateHostsInput
	}
	lockec2ClientMockAllocateHostsRequest.RLock()
	calls = mock.calls.AllocateHostsRequest
	lockec2ClientMockAllocateHostsRequest.RUnlock()
	return calls
}

// AllocateHostsWithContext calls AllocateHostsWithContextFunc.
func (mock *ec2ClientMock) AllocateHostsWithContext(in1 context.Context, in2 *ec2.AllocateHostsInput, in3 ...request.Option) (*ec2.AllocateHostsOutput, error) {
	if mock.AllocateHostsWithContextFunc == nil {
		panic("ec2ClientMock.AllocateHostsWithContextFunc: method is nil but ec2Client.AllocateHostsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AllocateHostsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAllocateHostsWithContext.Lock()
	mock.calls.AllocateHostsWithContext = append(mock.calls.AllocateHostsWithContext, callInfo)
	lockec2ClientMockAllocateHostsWithContext.Unlock()
	return mock.AllocateHostsWithContextFunc(in1, in2, in3...)
}

// AllocateHostsWithContextCalls gets all the calls that were made to AllocateHostsWithContext.
// Check the length with:
//     len(mockedec2Client.AllocateHostsWithContextCalls())
func (mock *ec2ClientMock) AllocateHostsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AllocateHostsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AllocateHostsInput
		In3 []request.Option
	}
	lockec2ClientMockAllocateHostsWithContext.RLock()
	calls = mock.calls.AllocateHostsWithContext
	lockec2ClientMockAllocateHostsWithContext.RUnlock()
	return calls
}

// ApplySecurityGroupsToClientVpnTargetNetwork calls ApplySecurityGroupsToClientVpnTargetNetworkFunc.
func (mock *ec2ClientMock) ApplySecurityGroupsToClientVpnTargetNetwork(in1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, error) {
	if mock.ApplySecurityGroupsToClientVpnTargetNetworkFunc == nil {
		panic("ec2ClientMock.ApplySecurityGroupsToClientVpnTargetNetworkFunc: method is nil but ec2Client.ApplySecurityGroupsToClientVpnTargetNetwork was just called")
	}
	callInfo := struct {
		In1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput
	}{
		In1: in1,
	}
	lockec2ClientMockApplySecurityGroupsToClientVpnTargetNetwork.Lock()
	mock.calls.ApplySecurityGroupsToClientVpnTargetNetwork = append(mock.calls.ApplySecurityGroupsToClientVpnTargetNetwork, callInfo)
	lockec2ClientMockApplySecurityGroupsToClientVpnTargetNetwork.Unlock()
	return mock.ApplySecurityGroupsToClientVpnTargetNetworkFunc(in1)
}

// ApplySecurityGroupsToClientVpnTargetNetworkCalls gets all the calls that were made to ApplySecurityGroupsToClientVpnTargetNetwork.
// Check the length with:
//     len(mockedec2Client.ApplySecurityGroupsToClientVpnTargetNetworkCalls())
func (mock *ec2ClientMock) ApplySecurityGroupsToClientVpnTargetNetworkCalls() []struct {
	In1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput
} {
	var calls []struct {
		In1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput
	}
	lockec2ClientMockApplySecurityGroupsToClientVpnTargetNetwork.RLock()
	calls = mock.calls.ApplySecurityGroupsToClientVpnTargetNetwork
	lockec2ClientMockApplySecurityGroupsToClientVpnTargetNetwork.RUnlock()
	return calls
}

// ApplySecurityGroupsToClientVpnTargetNetworkRequest calls ApplySecurityGroupsToClientVpnTargetNetworkRequestFunc.
func (mock *ec2ClientMock) ApplySecurityGroupsToClientVpnTargetNetworkRequest(in1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) (*request.Request, *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput) {
	if mock.ApplySecurityGroupsToClientVpnTargetNetworkRequestFunc == nil {
		panic("ec2ClientMock.ApplySecurityGroupsToClientVpnTargetNetworkRequestFunc: method is nil but ec2Client.ApplySecurityGroupsToClientVpnTargetNetworkRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput
	}{
		In1: in1,
	}
	lockec2ClientMockApplySecurityGroupsToClientVpnTargetNetworkRequest.Lock()
	mock.calls.ApplySecurityGroupsToClientVpnTargetNetworkRequest = append(mock.calls.ApplySecurityGroupsToClientVpnTargetNetworkRequest, callInfo)
	lockec2ClientMockApplySecurityGroupsToClientVpnTargetNetworkRequest.Unlock()
	return mock.ApplySecurityGroupsToClientVpnTargetNetworkRequestFunc(in1)
}

// ApplySecurityGroupsToClientVpnTargetNetworkRequestCalls gets all the calls that were made to ApplySecurityGroupsToClientVpnTargetNetworkRequest.
// Check the length with:
//     len(mockedec2Client.ApplySecurityGroupsToClientVpnTargetNetworkRequestCalls())
func (mock *ec2ClientMock) ApplySecurityGroupsToClientVpnTargetNetworkRequestCalls() []struct {
	In1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput
} {
	var calls []struct {
		In1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput
	}
	lockec2ClientMockApplySecurityGroupsToClientVpnTargetNetworkRequest.RLock()
	calls = mock.calls.ApplySecurityGroupsToClientVpnTargetNetworkRequest
	lockec2ClientMockApplySecurityGroupsToClientVpnTargetNetworkRequest.RUnlock()
	return calls
}

// ApplySecurityGroupsToClientVpnTargetNetworkWithContext calls ApplySecurityGroupsToClientVpnTargetNetworkWithContextFunc.
func (mock *ec2ClientMock) ApplySecurityGroupsToClientVpnTargetNetworkWithContext(in1 context.Context, in2 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput, in3 ...request.Option) (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, error) {
	if mock.ApplySecurityGroupsToClientVpnTargetNetworkWithContextFunc == nil {
		panic("ec2ClientMock.ApplySecurityGroupsToClientVpnTargetNetworkWithContextFunc: method is nil but ec2Client.ApplySecurityGroupsToClientVpnTargetNetworkWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockApplySecurityGroupsToClientVpnTargetNetworkWithContext.Lock()
	mock.calls.ApplySecurityGroupsToClientVpnTargetNetworkWithContext = append(mock.calls.ApplySecurityGroupsToClientVpnTargetNetworkWithContext, callInfo)
	lockec2ClientMockApplySecurityGroupsToClientVpnTargetNetworkWithContext.Unlock()
	return mock.ApplySecurityGroupsToClientVpnTargetNetworkWithContextFunc(in1, in2, in3...)
}

// ApplySecurityGroupsToClientVpnTargetNetworkWithContextCalls gets all the calls that were made to ApplySecurityGroupsToClientVpnTargetNetworkWithContext.
// Check the length with:
//     len(mockedec2Client.ApplySecurityGroupsToClientVpnTargetNetworkWithContextCalls())
func (mock *ec2ClientMock) ApplySecurityGroupsToClientVpnTargetNetworkWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput
		In3 []request.Option
	}
	lockec2ClientMockApplySecurityGroupsToClientVpnTargetNetworkWithContext.RLock()
	calls = mock.calls.ApplySecurityGroupsToClientVpnTargetNetworkWithContext
	lockec2ClientMockApplySecurityGroupsToClientVpnTargetNetworkWithContext.RUnlock()
	return calls
}

// AssignIpv6Addresses calls AssignIpv6AddressesFunc.
func (mock *ec2ClientMock) AssignIpv6Addresses(in1 *ec2.AssignIpv6AddressesInput) (*ec2.AssignIpv6AddressesOutput, error) {
	if mock.AssignIpv6AddressesFunc == nil {
		panic("ec2ClientMock.AssignIpv6AddressesFunc: method is nil but ec2Client.AssignIpv6Addresses was just called")
	}
	callInfo := struct {
		In1 *ec2.AssignIpv6AddressesInput
	}{
		In1: in1,
	}
	lockec2ClientMockAssignIpv6Addresses.Lock()
	mock.calls.AssignIpv6Addresses = append(mock.calls.AssignIpv6Addresses, callInfo)
	lockec2ClientMockAssignIpv6Addresses.Unlock()
	return mock.AssignIpv6AddressesFunc(in1)
}

// AssignIpv6AddressesCalls gets all the calls that were made to AssignIpv6Addresses.
// Check the length with:
//     len(mockedec2Client.AssignIpv6AddressesCalls())
func (mock *ec2ClientMock) AssignIpv6AddressesCalls() []struct {
	In1 *ec2.AssignIpv6AddressesInput
} {
	var calls []struct {
		In1 *ec2.AssignIpv6AddressesInput
	}
	lockec2ClientMockAssignIpv6Addresses.RLock()
	calls = mock.calls.AssignIpv6Addresses
	lockec2ClientMockAssignIpv6Addresses.RUnlock()
	return calls
}

// AssignIpv6AddressesRequest calls AssignIpv6AddressesRequestFunc.
func (mock *ec2ClientMock) AssignIpv6AddressesRequest(in1 *ec2.AssignIpv6AddressesInput) (*request.Request, *ec2.AssignIpv6AddressesOutput) {
	if mock.AssignIpv6AddressesRequestFunc == nil {
		panic("ec2ClientMock.AssignIpv6AddressesRequestFunc: method is nil but ec2Client.AssignIpv6AddressesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AssignIpv6AddressesInput
	}{
		In1: in1,
	}
	lockec2ClientMockAssignIpv6AddressesRequest.Lock()
	mock.calls.AssignIpv6AddressesRequest = append(mock.calls.AssignIpv6AddressesRequest, callInfo)
	lockec2ClientMockAssignIpv6AddressesRequest.Unlock()
	return mock.AssignIpv6AddressesRequestFunc(in1)
}

// AssignIpv6AddressesRequestCalls gets all the calls that were made to AssignIpv6AddressesRequest.
// Check the length with:
//     len(mockedec2Client.AssignIpv6AddressesRequestCalls())
func (mock *ec2ClientMock) AssignIpv6AddressesRequestCalls() []struct {
	In1 *ec2.AssignIpv6AddressesInput
} {
	var calls []struct {
		In1 *ec2.AssignIpv6AddressesInput
	}
	lockec2ClientMockAssignIpv6AddressesRequest.RLock()
	calls = mock.calls.AssignIpv6AddressesRequest
	lockec2ClientMockAssignIpv6AddressesRequest.RUnlock()
	return calls
}

// AssignIpv6AddressesWithContext calls AssignIpv6AddressesWithContextFunc.
func (mock *ec2ClientMock) AssignIpv6AddressesWithContext(in1 context.Context, in2 *ec2.AssignIpv6AddressesInput, in3 ...request.Option) (*ec2.AssignIpv6AddressesOutput, error) {
	if mock.AssignIpv6AddressesWithContextFunc == nil {
		panic("ec2ClientMock.AssignIpv6AddressesWithContextFunc: method is nil but ec2Client.AssignIpv6AddressesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AssignIpv6AddressesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAssignIpv6AddressesWithContext.Lock()
	mock.calls.AssignIpv6AddressesWithContext = append(mock.calls.AssignIpv6AddressesWithContext, callInfo)
	lockec2ClientMockAssignIpv6AddressesWithContext.Unlock()
	return mock.AssignIpv6AddressesWithContextFunc(in1, in2, in3...)
}

// AssignIpv6AddressesWithContextCalls gets all the calls that were made to AssignIpv6AddressesWithContext.
// Check the length with:
//     len(mockedec2Client.AssignIpv6AddressesWithContextCalls())
func (mock *ec2ClientMock) AssignIpv6AddressesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AssignIpv6AddressesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AssignIpv6AddressesInput
		In3 []request.Option
	}
	lockec2ClientMockAssignIpv6AddressesWithContext.RLock()
	calls = mock.calls.AssignIpv6AddressesWithContext
	lockec2ClientMockAssignIpv6AddressesWithContext.RUnlock()
	return calls
}

// AssignPrivateIpAddresses calls AssignPrivateIpAddressesFunc.
func (mock *ec2ClientMock) AssignPrivateIpAddresses(in1 *ec2.AssignPrivateIpAddressesInput) (*ec2.AssignPrivateIpAddressesOutput, error) {
	if mock.AssignPrivateIpAddressesFunc == nil {
		panic("ec2ClientMock.AssignPrivateIpAddressesFunc: method is nil but ec2Client.AssignPrivateIpAddresses was just called")
	}
	callInfo := struct {
		In1 *ec2.AssignPrivateIpAddressesInput
	}{
		In1: in1,
	}
	lockec2ClientMockAssignPrivateIpAddresses.Lock()
	mock.calls.AssignPrivateIpAddresses = append(mock.calls.AssignPrivateIpAddresses, callInfo)
	lockec2ClientMockAssignPrivateIpAddresses.Unlock()
	return mock.AssignPrivateIpAddressesFunc(in1)
}

// AssignPrivateIpAddressesCalls gets all the calls that were made to AssignPrivateIpAddresses.
// Check the length with:
//     len(mockedec2Client.AssignPrivateIpAddressesCalls())
func (mock *ec2ClientMock) AssignPrivateIpAddressesCalls() []struct {
	In1 *ec2.AssignPrivateIpAddressesInput
} {
	var calls []struct {
		In1 *ec2.AssignPrivateIpAddressesInput
	}
	lockec2ClientMockAssignPrivateIpAddresses.RLock()
	calls = mock.calls.AssignPrivateIpAddresses
	lockec2ClientMockAssignPrivateIpAddresses.RUnlock()
	return calls
}

// AssignPrivateIpAddressesRequest calls AssignPrivateIpAddressesRequestFunc.
func (mock *ec2ClientMock) AssignPrivateIpAddressesRequest(in1 *ec2.AssignPrivateIpAddressesInput) (*request.Request, *ec2.AssignPrivateIpAddressesOutput) {
	if mock.AssignPrivateIpAddressesRequestFunc == nil {
		panic("ec2ClientMock.AssignPrivateIpAddressesRequestFunc: method is nil but ec2Client.AssignPrivateIpAddressesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AssignPrivateIpAddressesInput
	}{
		In1: in1,
	}
	lockec2ClientMockAssignPrivateIpAddressesRequest.Lock()
	mock.calls.AssignPrivateIpAddressesRequest = append(mock.calls.AssignPrivateIpAddressesRequest, callInfo)
	lockec2ClientMockAssignPrivateIpAddressesRequest.Unlock()
	return mock.AssignPrivateIpAddressesRequestFunc(in1)
}

// AssignPrivateIpAddressesRequestCalls gets all the calls that were made to AssignPrivateIpAddressesRequest.
// Check the length with:
//     len(mockedec2Client.AssignPrivateIpAddressesRequestCalls())
func (mock *ec2ClientMock) AssignPrivateIpAddressesRequestCalls() []struct {
	In1 *ec2.AssignPrivateIpAddressesInput
} {
	var calls []struct {
		In1 *ec2.AssignPrivateIpAddressesInput
	}
	lockec2ClientMockAssignPrivateIpAddressesRequest.RLock()
	calls = mock.calls.AssignPrivateIpAddressesRequest
	lockec2ClientMockAssignPrivateIpAddressesRequest.RUnlock()
	return calls
}

// AssignPrivateIpAddressesWithContext calls AssignPrivateIpAddressesWithContextFunc.
func (mock *ec2ClientMock) AssignPrivateIpAddressesWithContext(in1 context.Context, in2 *ec2.AssignPrivateIpAddressesInput, in3 ...request.Option) (*ec2.AssignPrivateIpAddressesOutput, error) {
	if mock.AssignPrivateIpAddressesWithContextFunc == nil {
		panic("ec2ClientMock.AssignPrivateIpAddressesWithContextFunc: method is nil but ec2Client.AssignPrivateIpAddressesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AssignPrivateIpAddressesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAssignPrivateIpAddressesWithContext.Lock()
	mock.calls.AssignPrivateIpAddressesWithContext = append(mock.calls.AssignPrivateIpAddressesWithContext, callInfo)
	lockec2ClientMockAssignPrivateIpAddressesWithContext.Unlock()
	return mock.AssignPrivateIpAddressesWithContextFunc(in1, in2, in3...)
}

// AssignPrivateIpAddressesWithContextCalls gets all the calls that were made to AssignPrivateIpAddressesWithContext.
// Check the length with:
//     len(mockedec2Client.AssignPrivateIpAddressesWithContextCalls())
func (mock *ec2ClientMock) AssignPrivateIpAddressesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AssignPrivateIpAddressesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AssignPrivateIpAddressesInput
		In3 []request.Option
	}
	lockec2ClientMockAssignPrivateIpAddressesWithContext.RLock()
	calls = mock.calls.AssignPrivateIpAddressesWithContext
	lockec2ClientMockAssignPrivateIpAddressesWithContext.RUnlock()
	return calls
}

// AssociateAddress calls AssociateAddressFunc.
func (mock *ec2ClientMock) AssociateAddress(in1 *ec2.AssociateAddressInput) (*ec2.AssociateAddressOutput, error) {
	if mock.AssociateAddressFunc == nil {
		panic("ec2ClientMock.AssociateAddressFunc: method is nil but ec2Client.AssociateAddress was just called")
	}
	callInfo := struct {
		In1 *ec2.AssociateAddressInput
	}{
		In1: in1,
	}
	lockec2ClientMockAssociateAddress.Lock()
	mock.calls.AssociateAddress = append(mock.calls.AssociateAddress, callInfo)
	lockec2ClientMockAssociateAddress.Unlock()
	return mock.AssociateAddressFunc(in1)
}

// AssociateAddressCalls gets all the calls that were made to AssociateAddress.
// Check the length with:
//     len(mockedec2Client.AssociateAddressCalls())
func (mock *ec2ClientMock) AssociateAddressCalls() []struct {
	In1 *ec2.AssociateAddressInput
} {
	var calls []struct {
		In1 *ec2.AssociateAddressInput
	}
	lockec2ClientMockAssociateAddress.RLock()
	calls = mock.calls.AssociateAddress
	lockec2ClientMockAssociateAddress.RUnlock()
	return calls
}

// AssociateAddressRequest calls AssociateAddressRequestFunc.
func (mock *ec2ClientMock) AssociateAddressRequest(in1 *ec2.AssociateAddressInput) (*request.Request, *ec2.AssociateAddressOutput) {
	if mock.AssociateAddressRequestFunc == nil {
		panic("ec2ClientMock.AssociateAddressRequestFunc: method is nil but ec2Client.AssociateAddressRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AssociateAddressInput
	}{
		In1: in1,
	}
	lockec2ClientMockAssociateAddressRequest.Lock()
	mock.calls.AssociateAddressRequest = append(mock.calls.AssociateAddressRequest, callInfo)
	lockec2ClientMockAssociateAddressRequest.Unlock()
	return mock.AssociateAddressRequestFunc(in1)
}

// AssociateAddressRequestCalls gets all the calls that were made to AssociateAddressRequest.
// Check the length with:
//     len(mockedec2Client.AssociateAddressRequestCalls())
func (mock *ec2ClientMock) AssociateAddressRequestCalls() []struct {
	In1 *ec2.AssociateAddressInput
} {
	var calls []struct {
		In1 *ec2.AssociateAddressInput
	}
	lockec2ClientMockAssociateAddressRequest.RLock()
	calls = mock.calls.AssociateAddressRequest
	lockec2ClientMockAssociateAddressRequest.RUnlock()
	return calls
}

// AssociateAddressWithContext calls AssociateAddressWithContextFunc.
func (mock *ec2ClientMock) AssociateAddressWithContext(in1 context.Context, in2 *ec2.AssociateAddressInput, in3 ...request.Option) (*ec2.AssociateAddressOutput, error) {
	if mock.AssociateAddressWithContextFunc == nil {
		panic("ec2ClientMock.AssociateAddressWithContextFunc: method is nil but ec2Client.AssociateAddressWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AssociateAddressInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAssociateAddressWithContext.Lock()
	mock.calls.AssociateAddressWithContext = append(mock.calls.AssociateAddressWithContext, callInfo)
	lockec2ClientMockAssociateAddressWithContext.Unlock()
	return mock.AssociateAddressWithContextFunc(in1, in2, in3...)
}

// AssociateAddressWithContextCalls gets all the calls that were made to AssociateAddressWithContext.
// Check the length with:
//     len(mockedec2Client.AssociateAddressWithContextCalls())
func (mock *ec2ClientMock) AssociateAddressWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AssociateAddressInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AssociateAddressInput
		In3 []request.Option
	}
	lockec2ClientMockAssociateAddressWithContext.RLock()
	calls = mock.calls.AssociateAddressWithContext
	lockec2ClientMockAssociateAddressWithContext.RUnlock()
	return calls
}

// AssociateClientVpnTargetNetwork calls AssociateClientVpnTargetNetworkFunc.
func (mock *ec2ClientMock) AssociateClientVpnTargetNetwork(in1 *ec2.AssociateClientVpnTargetNetworkInput) (*ec2.AssociateClientVpnTargetNetworkOutput, error) {
	if mock.AssociateClientVpnTargetNetworkFunc == nil {
		panic("ec2ClientMock.AssociateClientVpnTargetNetworkFunc: method is nil but ec2Client.AssociateClientVpnTargetNetwork was just called")
	}
	callInfo := struct {
		In1 *ec2.AssociateClientVpnTargetNetworkInput
	}{
		In1: in1,
	}
	lockec2ClientMockAssociateClientVpnTargetNetwork.Lock()
	mock.calls.AssociateClientVpnTargetNetwork = append(mock.calls.AssociateClientVpnTargetNetwork, callInfo)
	lockec2ClientMockAssociateClientVpnTargetNetwork.Unlock()
	return mock.AssociateClientVpnTargetNetworkFunc(in1)
}

// AssociateClientVpnTargetNetworkCalls gets all the calls that were made to AssociateClientVpnTargetNetwork.
// Check the length with:
//     len(mockedec2Client.AssociateClientVpnTargetNetworkCalls())
func (mock *ec2ClientMock) AssociateClientVpnTargetNetworkCalls() []struct {
	In1 *ec2.AssociateClientVpnTargetNetworkInput
} {
	var calls []struct {
		In1 *ec2.AssociateClientVpnTargetNetworkInput
	}
	lockec2ClientMockAssociateClientVpnTargetNetwork.RLock()
	calls = mock.calls.AssociateClientVpnTargetNetwork
	lockec2ClientMockAssociateClientVpnTargetNetwork.RUnlock()
	return calls
}

// AssociateClientVpnTargetNetworkRequest calls AssociateClientVpnTargetNetworkRequestFunc.
func (mock *ec2ClientMock) AssociateClientVpnTargetNetworkRequest(in1 *ec2.AssociateClientVpnTargetNetworkInput) (*request.Request, *ec2.AssociateClientVpnTargetNetworkOutput) {
	if mock.AssociateClientVpnTargetNetworkRequestFunc == nil {
		panic("ec2ClientMock.AssociateClientVpnTargetNetworkRequestFunc: method is nil but ec2Client.AssociateClientVpnTargetNetworkRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AssociateClientVpnTargetNetworkInput
	}{
		In1: in1,
	}
	lockec2ClientMockAssociateClientVpnTargetNetworkRequest.Lock()
	mock.calls.AssociateClientVpnTargetNetworkRequest = append(mock.calls.AssociateClientVpnTargetNetworkRequest, callInfo)
	lockec2ClientMockAssociateClientVpnTargetNetworkRequest.Unlock()
	return mock.AssociateClientVpnTargetNetworkRequestFunc(in1)
}

// AssociateClientVpnTargetNetworkRequestCalls gets all the calls that were made to AssociateClientVpnTargetNetworkRequest.
// Check the length with:
//     len(mockedec2Client.AssociateClientVpnTargetNetworkRequestCalls())
func (mock *ec2ClientMock) AssociateClientVpnTargetNetworkRequestCalls() []struct {
	In1 *ec2.AssociateClientVpnTargetNetworkInput
} {
	var calls []struct {
		In1 *ec2.AssociateClientVpnTargetNetworkInput
	}
	lockec2ClientMockAssociateClientVpnTargetNetworkRequest.RLock()
	calls = mock.calls.AssociateClientVpnTargetNetworkRequest
	lockec2ClientMockAssociateClientVpnTargetNetworkRequest.RUnlock()
	return calls
}

// AssociateClientVpnTargetNetworkWithContext calls AssociateClientVpnTargetNetworkWithContextFunc.
func (mock *ec2ClientMock) AssociateClientVpnTargetNetworkWithContext(in1 context.Context, in2 *ec2.AssociateClientVpnTargetNetworkInput, in3 ...request.Option) (*ec2.AssociateClientVpnTargetNetworkOutput, error) {
	if mock.AssociateClientVpnTargetNetworkWithContextFunc == nil {
		panic("ec2ClientMock.AssociateClientVpnTargetNetworkWithContextFunc: method is nil but ec2Client.AssociateClientVpnTargetNetworkWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AssociateClientVpnTargetNetworkInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAssociateClientVpnTargetNetworkWithContext.Lock()
	mock.calls.AssociateClientVpnTargetNetworkWithContext = append(mock.calls.AssociateClientVpnTargetNetworkWithContext, callInfo)
	lockec2ClientMockAssociateClientVpnTargetNetworkWithContext.Unlock()
	return mock.AssociateClientVpnTargetNetworkWithContextFunc(in1, in2, in3...)
}

// AssociateClientVpnTargetNetworkWithContextCalls gets all the calls that were made to AssociateClientVpnTargetNetworkWithContext.
// Check the length with:
//     len(mockedec2Client.AssociateClientVpnTargetNetworkWithContextCalls())
func (mock *ec2ClientMock) AssociateClientVpnTargetNetworkWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AssociateClientVpnTargetNetworkInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AssociateClientVpnTargetNetworkInput
		In3 []request.Option
	}
	lockec2ClientMockAssociateClientVpnTargetNetworkWithContext.RLock()
	calls = mock.calls.AssociateClientVpnTargetNetworkWithContext
	lockec2ClientMockAssociateClientVpnTargetNetworkWithContext.RUnlock()
	return calls
}

// AssociateDhcpOptions calls AssociateDhcpOptionsFunc.
func (mock *ec2ClientMock) AssociateDhcpOptions(in1 *ec2.AssociateDhcpOptionsInput) (*ec2.AssociateDhcpOptionsOutput, error) {
	if mock.AssociateDhcpOptionsFunc == nil {
		panic("ec2ClientMock.AssociateDhcpOptionsFunc: method is nil but ec2Client.AssociateDhcpOptions was just called")
	}
	callInfo := struct {
		In1 *ec2.AssociateDhcpOptionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockAssociateDhcpOptions.Lock()
	mock.calls.AssociateDhcpOptions = append(mock.calls.AssociateDhcpOptions, callInfo)
	lockec2ClientMockAssociateDhcpOptions.Unlock()
	return mock.AssociateDhcpOptionsFunc(in1)
}

// AssociateDhcpOptionsCalls gets all the calls that were made to AssociateDhcpOptions.
// Check the length with:
//     len(mockedec2Client.AssociateDhcpOptionsCalls())
func (mock *ec2ClientMock) AssociateDhcpOptionsCalls() []struct {
	In1 *ec2.AssociateDhcpOptionsInput
} {
	var calls []struct {
		In1 *ec2.AssociateDhcpOptionsInput
	}
	lockec2ClientMockAssociateDhcpOptions.RLock()
	calls = mock.calls.AssociateDhcpOptions
	lockec2ClientMockAssociateDhcpOptions.RUnlock()
	return calls
}

// AssociateDhcpOptionsRequest calls AssociateDhcpOptionsRequestFunc.
func (mock *ec2ClientMock) AssociateDhcpOptionsRequest(in1 *ec2.AssociateDhcpOptionsInput) (*request.Request, *ec2.AssociateDhcpOptionsOutput) {
	if mock.AssociateDhcpOptionsRequestFunc == nil {
		panic("ec2ClientMock.AssociateDhcpOptionsRequestFunc: method is nil but ec2Client.AssociateDhcpOptionsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AssociateDhcpOptionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockAssociateDhcpOptionsRequest.Lock()
	mock.calls.AssociateDhcpOptionsRequest = append(mock.calls.AssociateDhcpOptionsRequest, callInfo)
	lockec2ClientMockAssociateDhcpOptionsRequest.Unlock()
	return mock.AssociateDhcpOptionsRequestFunc(in1)
}

// AssociateDhcpOptionsRequestCalls gets all the calls that were made to AssociateDhcpOptionsRequest.
// Check the length with:
//     len(mockedec2Client.AssociateDhcpOptionsRequestCalls())
func (mock *ec2ClientMock) AssociateDhcpOptionsRequestCalls() []struct {
	In1 *ec2.AssociateDhcpOptionsInput
} {
	var calls []struct {
		In1 *ec2.AssociateDhcpOptionsInput
	}
	lockec2ClientMockAssociateDhcpOptionsRequest.RLock()
	calls = mock.calls.AssociateDhcpOptionsRequest
	lockec2ClientMockAssociateDhcpOptionsRequest.RUnlock()
	return calls
}

// AssociateDhcpOptionsWithContext calls AssociateDhcpOptionsWithContextFunc.
func (mock *ec2ClientMock) AssociateDhcpOptionsWithContext(in1 context.Context, in2 *ec2.AssociateDhcpOptionsInput, in3 ...request.Option) (*ec2.AssociateDhcpOptionsOutput, error) {
	if mock.AssociateDhcpOptionsWithContextFunc == nil {
		panic("ec2ClientMock.AssociateDhcpOptionsWithContextFunc: method is nil but ec2Client.AssociateDhcpOptionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AssociateDhcpOptionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAssociateDhcpOptionsWithContext.Lock()
	mock.calls.AssociateDhcpOptionsWithContext = append(mock.calls.AssociateDhcpOptionsWithContext, callInfo)
	lockec2ClientMockAssociateDhcpOptionsWithContext.Unlock()
	return mock.AssociateDhcpOptionsWithContextFunc(in1, in2, in3...)
}

// AssociateDhcpOptionsWithContextCalls gets all the calls that were made to AssociateDhcpOptionsWithContext.
// Check the length with:
//     len(mockedec2Client.AssociateDhcpOptionsWithContextCalls())
func (mock *ec2ClientMock) AssociateDhcpOptionsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AssociateDhcpOptionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AssociateDhcpOptionsInput
		In3 []request.Option
	}
	lockec2ClientMockAssociateDhcpOptionsWithContext.RLock()
	calls = mock.calls.AssociateDhcpOptionsWithContext
	lockec2ClientMockAssociateDhcpOptionsWithContext.RUnlock()
	return calls
}

// AssociateIamInstanceProfile calls AssociateIamInstanceProfileFunc.
func (mock *ec2ClientMock) AssociateIamInstanceProfile(in1 *ec2.AssociateIamInstanceProfileInput) (*ec2.AssociateIamInstanceProfileOutput, error) {
	if mock.AssociateIamInstanceProfileFunc == nil {
		panic("ec2ClientMock.AssociateIamInstanceProfileFunc: method is nil but ec2Client.AssociateIamInstanceProfile was just called")
	}
	callInfo := struct {
		In1 *ec2.AssociateIamInstanceProfileInput
	}{
		In1: in1,
	}
	lockec2ClientMockAssociateIamInstanceProfile.Lock()
	mock.calls.AssociateIamInstanceProfile = append(mock.calls.AssociateIamInstanceProfile, callInfo)
	lockec2ClientMockAssociateIamInstanceProfile.Unlock()
	return mock.AssociateIamInstanceProfileFunc(in1)
}

// AssociateIamInstanceProfileCalls gets all the calls that were made to AssociateIamInstanceProfile.
// Check the length with:
//     len(mockedec2Client.AssociateIamInstanceProfileCalls())
func (mock *ec2ClientMock) AssociateIamInstanceProfileCalls() []struct {
	In1 *ec2.AssociateIamInstanceProfileInput
} {
	var calls []struct {
		In1 *ec2.AssociateIamInstanceProfileInput
	}
	lockec2ClientMockAssociateIamInstanceProfile.RLock()
	calls = mock.calls.AssociateIamInstanceProfile
	lockec2ClientMockAssociateIamInstanceProfile.RUnlock()
	return calls
}

// AssociateIamInstanceProfileRequest calls AssociateIamInstanceProfileRequestFunc.
func (mock *ec2ClientMock) AssociateIamInstanceProfileRequest(in1 *ec2.AssociateIamInstanceProfileInput) (*request.Request, *ec2.AssociateIamInstanceProfileOutput) {
	if mock.AssociateIamInstanceProfileRequestFunc == nil {
		panic("ec2ClientMock.AssociateIamInstanceProfileRequestFunc: method is nil but ec2Client.AssociateIamInstanceProfileRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AssociateIamInstanceProfileInput
	}{
		In1: in1,
	}
	lockec2ClientMockAssociateIamInstanceProfileRequest.Lock()
	mock.calls.AssociateIamInstanceProfileRequest = append(mock.calls.AssociateIamInstanceProfileRequest, callInfo)
	lockec2ClientMockAssociateIamInstanceProfileRequest.Unlock()
	return mock.AssociateIamInstanceProfileRequestFunc(in1)
}

// AssociateIamInstanceProfileRequestCalls gets all the calls that were made to AssociateIamInstanceProfileRequest.
// Check the length with:
//     len(mockedec2Client.AssociateIamInstanceProfileRequestCalls())
func (mock *ec2ClientMock) AssociateIamInstanceProfileRequestCalls() []struct {
	In1 *ec2.AssociateIamInstanceProfileInput
} {
	var calls []struct {
		In1 *ec2.AssociateIamInstanceProfileInput
	}
	lockec2ClientMockAssociateIamInstanceProfileRequest.RLock()
	calls = mock.calls.AssociateIamInstanceProfileRequest
	lockec2ClientMockAssociateIamInstanceProfileRequest.RUnlock()
	return calls
}

// AssociateIamInstanceProfileWithContext calls AssociateIamInstanceProfileWithContextFunc.
func (mock *ec2ClientMock) AssociateIamInstanceProfileWithContext(in1 context.Context, in2 *ec2.AssociateIamInstanceProfileInput, in3 ...request.Option) (*ec2.AssociateIamInstanceProfileOutput, error) {
	if mock.AssociateIamInstanceProfileWithContextFunc == nil {
		panic("ec2ClientMock.AssociateIamInstanceProfileWithContextFunc: method is nil but ec2Client.AssociateIamInstanceProfileWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AssociateIamInstanceProfileInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAssociateIamInstanceProfileWithContext.Lock()
	mock.calls.AssociateIamInstanceProfileWithContext = append(mock.calls.AssociateIamInstanceProfileWithContext, callInfo)
	lockec2ClientMockAssociateIamInstanceProfileWithContext.Unlock()
	return mock.AssociateIamInstanceProfileWithContextFunc(in1, in2, in3...)
}

// AssociateIamInstanceProfileWithContextCalls gets all the calls that were made to AssociateIamInstanceProfileWithContext.
// Check the length with:
//     len(mockedec2Client.AssociateIamInstanceProfileWithContextCalls())
func (mock *ec2ClientMock) AssociateIamInstanceProfileWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AssociateIamInstanceProfileInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AssociateIamInstanceProfileInput
		In3 []request.Option
	}
	lockec2ClientMockAssociateIamInstanceProfileWithContext.RLock()
	calls = mock.calls.AssociateIamInstanceProfileWithContext
	lockec2ClientMockAssociateIamInstanceProfileWithContext.RUnlock()
	return calls
}

// AssociateRouteTable calls AssociateRouteTableFunc.
func (mock *ec2ClientMock) AssociateRouteTable(in1 *ec2.AssociateRouteTableInput) (*ec2.AssociateRouteTableOutput, error) {
	if mock.AssociateRouteTableFunc == nil {
		panic("ec2ClientMock.AssociateRouteTableFunc: method is nil but ec2Client.AssociateRouteTable was just called")
	}
	callInfo := struct {
		In1 *ec2.AssociateRouteTableInput
	}{
		In1: in1,
	}
	lockec2ClientMockAssociateRouteTable.Lock()
	mock.calls.AssociateRouteTable = append(mock.calls.AssociateRouteTable, callInfo)
	lockec2ClientMockAssociateRouteTable.Unlock()
	return mock.AssociateRouteTableFunc(in1)
}

// AssociateRouteTableCalls gets all the calls that were made to AssociateRouteTable.
// Check the length with:
//     len(mockedec2Client.AssociateRouteTableCalls())
func (mock *ec2ClientMock) AssociateRouteTableCalls() []struct {
	In1 *ec2.AssociateRouteTableInput
} {
	var calls []struct {
		In1 *ec2.AssociateRouteTableInput
	}
	lockec2ClientMockAssociateRouteTable.RLock()
	calls = mock.calls.AssociateRouteTable
	lockec2ClientMockAssociateRouteTable.RUnlock()
	return calls
}

// AssociateRouteTableRequest calls AssociateRouteTableRequestFunc.
func (mock *ec2ClientMock) AssociateRouteTableRequest(in1 *ec2.AssociateRouteTableInput) (*request.Request, *ec2.AssociateRouteTableOutput) {
	if mock.AssociateRouteTableRequestFunc == nil {
		panic("ec2ClientMock.AssociateRouteTableRequestFunc: method is nil but ec2Client.AssociateRouteTableRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AssociateRouteTableInput
	}{
		In1: in1,
	}
	lockec2ClientMockAssociateRouteTableRequest.Lock()
	mock.calls.AssociateRouteTableRequest = append(mock.calls.AssociateRouteTableRequest, callInfo)
	lockec2ClientMockAssociateRouteTableRequest.Unlock()
	return mock.AssociateRouteTableRequestFunc(in1)
}

// AssociateRouteTableRequestCalls gets all the calls that were made to AssociateRouteTableRequest.
// Check the length with:
//     len(mockedec2Client.AssociateRouteTableRequestCalls())
func (mock *ec2ClientMock) AssociateRouteTableRequestCalls() []struct {
	In1 *ec2.AssociateRouteTableInput
} {
	var calls []struct {
		In1 *ec2.AssociateRouteTableInput
	}
	lockec2ClientMockAssociateRouteTableRequest.RLock()
	calls = mock.calls.AssociateRouteTableRequest
	lockec2ClientMockAssociateRouteTableRequest.RUnlock()
	return calls
}

// AssociateRouteTableWithContext calls AssociateRouteTableWithContextFunc.
func (mock *ec2ClientMock) AssociateRouteTableWithContext(in1 context.Context, in2 *ec2.AssociateRouteTableInput, in3 ...request.Option) (*ec2.AssociateRouteTableOutput, error) {
	if mock.AssociateRouteTableWithContextFunc == nil {
		panic("ec2ClientMock.AssociateRouteTableWithContextFunc: method is nil but ec2Client.AssociateRouteTableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AssociateRouteTableInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAssociateRouteTableWithContext.Lock()
	mock.calls.AssociateRouteTableWithContext = append(mock.calls.AssociateRouteTableWithContext, callInfo)
	lockec2ClientMockAssociateRouteTableWithContext.Unlock()
	return mock.AssociateRouteTableWithContextFunc(in1, in2, in3...)
}

// AssociateRouteTableWithContextCalls gets all the calls that were made to AssociateRouteTableWithContext.
// Check the length with:
//     len(mockedec2Client.AssociateRouteTableWithContextCalls())
func (mock *ec2ClientMock) AssociateRouteTableWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AssociateRouteTableInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AssociateRouteTableInput
		In3 []request.Option
	}
	lockec2ClientMockAssociateRouteTableWithContext.RLock()
	calls = mock.calls.AssociateRouteTableWithContext
	lockec2ClientMockAssociateRouteTableWithContext.RUnlock()
	return calls
}

// AssociateSubnetCidrBlock calls AssociateSubnetCidrBlockFunc.
func (mock *ec2ClientMock) AssociateSubnetCidrBlock(in1 *ec2.AssociateSubnetCidrBlockInput) (*ec2.AssociateSubnetCidrBlockOutput, error) {
	if mock.AssociateSubnetCidrBlockFunc == nil {
		panic("ec2ClientMock.AssociateSubnetCidrBlockFunc: method is nil but ec2Client.AssociateSubnetCidrBlock was just called")
	}
	callInfo := struct {
		In1 *ec2.AssociateSubnetCidrBlockInput
	}{
		In1: in1,
	}
	lockec2ClientMockAssociateSubnetCidrBlock.Lock()
	mock.calls.AssociateSubnetCidrBlock = append(mock.calls.AssociateSubnetCidrBlock, callInfo)
	lockec2ClientMockAssociateSubnetCidrBlock.Unlock()
	return mock.AssociateSubnetCidrBlockFunc(in1)
}

// AssociateSubnetCidrBlockCalls gets all the calls that were made to AssociateSubnetCidrBlock.
// Check the length with:
//     len(mockedec2Client.AssociateSubnetCidrBlockCalls())
func (mock *ec2ClientMock) AssociateSubnetCidrBlockCalls() []struct {
	In1 *ec2.AssociateSubnetCidrBlockInput
} {
	var calls []struct {
		In1 *ec2.AssociateSubnetCidrBlockInput
	}
	lockec2ClientMockAssociateSubnetCidrBlock.RLock()
	calls = mock.calls.AssociateSubnetCidrBlock
	lockec2ClientMockAssociateSubnetCidrBlock.RUnlock()
	return calls
}

// AssociateSubnetCidrBlockRequest calls AssociateSubnetCidrBlockRequestFunc.
func (mock *ec2ClientMock) AssociateSubnetCidrBlockRequest(in1 *ec2.AssociateSubnetCidrBlockInput) (*request.Request, *ec2.AssociateSubnetCidrBlockOutput) {
	if mock.AssociateSubnetCidrBlockRequestFunc == nil {
		panic("ec2ClientMock.AssociateSubnetCidrBlockRequestFunc: method is nil but ec2Client.AssociateSubnetCidrBlockRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AssociateSubnetCidrBlockInput
	}{
		In1: in1,
	}
	lockec2ClientMockAssociateSubnetCidrBlockRequest.Lock()
	mock.calls.AssociateSubnetCidrBlockRequest = append(mock.calls.AssociateSubnetCidrBlockRequest, callInfo)
	lockec2ClientMockAssociateSubnetCidrBlockRequest.Unlock()
	return mock.AssociateSubnetCidrBlockRequestFunc(in1)
}

// AssociateSubnetCidrBlockRequestCalls gets all the calls that were made to AssociateSubnetCidrBlockRequest.
// Check the length with:
//     len(mockedec2Client.AssociateSubnetCidrBlockRequestCalls())
func (mock *ec2ClientMock) AssociateSubnetCidrBlockRequestCalls() []struct {
	In1 *ec2.AssociateSubnetCidrBlockInput
} {
	var calls []struct {
		In1 *ec2.AssociateSubnetCidrBlockInput
	}
	lockec2ClientMockAssociateSubnetCidrBlockRequest.RLock()
	calls = mock.calls.AssociateSubnetCidrBlockRequest
	lockec2ClientMockAssociateSubnetCidrBlockRequest.RUnlock()
	return calls
}

// AssociateSubnetCidrBlockWithContext calls AssociateSubnetCidrBlockWithContextFunc.
func (mock *ec2ClientMock) AssociateSubnetCidrBlockWithContext(in1 context.Context, in2 *ec2.AssociateSubnetCidrBlockInput, in3 ...request.Option) (*ec2.AssociateSubnetCidrBlockOutput, error) {
	if mock.AssociateSubnetCidrBlockWithContextFunc == nil {
		panic("ec2ClientMock.AssociateSubnetCidrBlockWithContextFunc: method is nil but ec2Client.AssociateSubnetCidrBlockWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AssociateSubnetCidrBlockInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAssociateSubnetCidrBlockWithContext.Lock()
	mock.calls.AssociateSubnetCidrBlockWithContext = append(mock.calls.AssociateSubnetCidrBlockWithContext, callInfo)
	lockec2ClientMockAssociateSubnetCidrBlockWithContext.Unlock()
	return mock.AssociateSubnetCidrBlockWithContextFunc(in1, in2, in3...)
}

// AssociateSubnetCidrBlockWithContextCalls gets all the calls that were made to AssociateSubnetCidrBlockWithContext.
// Check the length with:
//     len(mockedec2Client.AssociateSubnetCidrBlockWithContextCalls())
func (mock *ec2ClientMock) AssociateSubnetCidrBlockWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AssociateSubnetCidrBlockInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AssociateSubnetCidrBlockInput
		In3 []request.Option
	}
	lockec2ClientMockAssociateSubnetCidrBlockWithContext.RLock()
	calls = mock.calls.AssociateSubnetCidrBlockWithContext
	lockec2ClientMockAssociateSubnetCidrBlockWithContext.RUnlock()
	return calls
}

// AssociateTransitGatewayMulticastDomain calls AssociateTransitGatewayMulticastDomainFunc.
func (mock *ec2ClientMock) AssociateTransitGatewayMulticastDomain(in1 *ec2.AssociateTransitGatewayMulticastDomainInput) (*ec2.AssociateTransitGatewayMulticastDomainOutput, error) {
	if mock.AssociateTransitGatewayMulticastDomainFunc == nil {
		panic("ec2ClientMock.AssociateTransitGatewayMulticastDomainFunc: method is nil but ec2Client.AssociateTransitGatewayMulticastDomain was just called")
	}
	callInfo := struct {
		In1 *ec2.AssociateTransitGatewayMulticastDomainInput
	}{
		In1: in1,
	}
	lockec2ClientMockAssociateTransitGatewayMulticastDomain.Lock()
	mock.calls.AssociateTransitGatewayMulticastDomain = append(mock.calls.AssociateTransitGatewayMulticastDomain, callInfo)
	lockec2ClientMockAssociateTransitGatewayMulticastDomain.Unlock()
	return mock.AssociateTransitGatewayMulticastDomainFunc(in1)
}

// AssociateTransitGatewayMulticastDomainCalls gets all the calls that were made to AssociateTransitGatewayMulticastDomain.
// Check the length with:
//     len(mockedec2Client.AssociateTransitGatewayMulticastDomainCalls())
func (mock *ec2ClientMock) AssociateTransitGatewayMulticastDomainCalls() []struct {
	In1 *ec2.AssociateTransitGatewayMulticastDomainInput
} {
	var calls []struct {
		In1 *ec2.AssociateTransitGatewayMulticastDomainInput
	}
	lockec2ClientMockAssociateTransitGatewayMulticastDomain.RLock()
	calls = mock.calls.AssociateTransitGatewayMulticastDomain
	lockec2ClientMockAssociateTransitGatewayMulticastDomain.RUnlock()
	return calls
}

// AssociateTransitGatewayMulticastDomainRequest calls AssociateTransitGatewayMulticastDomainRequestFunc.
func (mock *ec2ClientMock) AssociateTransitGatewayMulticastDomainRequest(in1 *ec2.AssociateTransitGatewayMulticastDomainInput) (*request.Request, *ec2.AssociateTransitGatewayMulticastDomainOutput) {
	if mock.AssociateTransitGatewayMulticastDomainRequestFunc == nil {
		panic("ec2ClientMock.AssociateTransitGatewayMulticastDomainRequestFunc: method is nil but ec2Client.AssociateTransitGatewayMulticastDomainRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AssociateTransitGatewayMulticastDomainInput
	}{
		In1: in1,
	}
	lockec2ClientMockAssociateTransitGatewayMulticastDomainRequest.Lock()
	mock.calls.AssociateTransitGatewayMulticastDomainRequest = append(mock.calls.AssociateTransitGatewayMulticastDomainRequest, callInfo)
	lockec2ClientMockAssociateTransitGatewayMulticastDomainRequest.Unlock()
	return mock.AssociateTransitGatewayMulticastDomainRequestFunc(in1)
}

// AssociateTransitGatewayMulticastDomainRequestCalls gets all the calls that were made to AssociateTransitGatewayMulticastDomainRequest.
// Check the length with:
//     len(mockedec2Client.AssociateTransitGatewayMulticastDomainRequestCalls())
func (mock *ec2ClientMock) AssociateTransitGatewayMulticastDomainRequestCalls() []struct {
	In1 *ec2.AssociateTransitGatewayMulticastDomainInput
} {
	var calls []struct {
		In1 *ec2.AssociateTransitGatewayMulticastDomainInput
	}
	lockec2ClientMockAssociateTransitGatewayMulticastDomainRequest.RLock()
	calls = mock.calls.AssociateTransitGatewayMulticastDomainRequest
	lockec2ClientMockAssociateTransitGatewayMulticastDomainRequest.RUnlock()
	return calls
}

// AssociateTransitGatewayMulticastDomainWithContext calls AssociateTransitGatewayMulticastDomainWithContextFunc.
func (mock *ec2ClientMock) AssociateTransitGatewayMulticastDomainWithContext(in1 context.Context, in2 *ec2.AssociateTransitGatewayMulticastDomainInput, in3 ...request.Option) (*ec2.AssociateTransitGatewayMulticastDomainOutput, error) {
	if mock.AssociateTransitGatewayMulticastDomainWithContextFunc == nil {
		panic("ec2ClientMock.AssociateTransitGatewayMulticastDomainWithContextFunc: method is nil but ec2Client.AssociateTransitGatewayMulticastDomainWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AssociateTransitGatewayMulticastDomainInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAssociateTransitGatewayMulticastDomainWithContext.Lock()
	mock.calls.AssociateTransitGatewayMulticastDomainWithContext = append(mock.calls.AssociateTransitGatewayMulticastDomainWithContext, callInfo)
	lockec2ClientMockAssociateTransitGatewayMulticastDomainWithContext.Unlock()
	return mock.AssociateTransitGatewayMulticastDomainWithContextFunc(in1, in2, in3...)
}

// AssociateTransitGatewayMulticastDomainWithContextCalls gets all the calls that were made to AssociateTransitGatewayMulticastDomainWithContext.
// Check the length with:
//     len(mockedec2Client.AssociateTransitGatewayMulticastDomainWithContextCalls())
func (mock *ec2ClientMock) AssociateTransitGatewayMulticastDomainWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AssociateTransitGatewayMulticastDomainInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AssociateTransitGatewayMulticastDomainInput
		In3 []request.Option
	}
	lockec2ClientMockAssociateTransitGatewayMulticastDomainWithContext.RLock()
	calls = mock.calls.AssociateTransitGatewayMulticastDomainWithContext
	lockec2ClientMockAssociateTransitGatewayMulticastDomainWithContext.RUnlock()
	return calls
}

// AssociateTransitGatewayRouteTable calls AssociateTransitGatewayRouteTableFunc.
func (mock *ec2ClientMock) AssociateTransitGatewayRouteTable(in1 *ec2.AssociateTransitGatewayRouteTableInput) (*ec2.AssociateTransitGatewayRouteTableOutput, error) {
	if mock.AssociateTransitGatewayRouteTableFunc == nil {
		panic("ec2ClientMock.AssociateTransitGatewayRouteTableFunc: method is nil but ec2Client.AssociateTransitGatewayRouteTable was just called")
	}
	callInfo := struct {
		In1 *ec2.AssociateTransitGatewayRouteTableInput
	}{
		In1: in1,
	}
	lockec2ClientMockAssociateTransitGatewayRouteTable.Lock()
	mock.calls.AssociateTransitGatewayRouteTable = append(mock.calls.AssociateTransitGatewayRouteTable, callInfo)
	lockec2ClientMockAssociateTransitGatewayRouteTable.Unlock()
	return mock.AssociateTransitGatewayRouteTableFunc(in1)
}

// AssociateTransitGatewayRouteTableCalls gets all the calls that were made to AssociateTransitGatewayRouteTable.
// Check the length with:
//     len(mockedec2Client.AssociateTransitGatewayRouteTableCalls())
func (mock *ec2ClientMock) AssociateTransitGatewayRouteTableCalls() []struct {
	In1 *ec2.AssociateTransitGatewayRouteTableInput
} {
	var calls []struct {
		In1 *ec2.AssociateTransitGatewayRouteTableInput
	}
	lockec2ClientMockAssociateTransitGatewayRouteTable.RLock()
	calls = mock.calls.AssociateTransitGatewayRouteTable
	lockec2ClientMockAssociateTransitGatewayRouteTable.RUnlock()
	return calls
}

// AssociateTransitGatewayRouteTableRequest calls AssociateTransitGatewayRouteTableRequestFunc.
func (mock *ec2ClientMock) AssociateTransitGatewayRouteTableRequest(in1 *ec2.AssociateTransitGatewayRouteTableInput) (*request.Request, *ec2.AssociateTransitGatewayRouteTableOutput) {
	if mock.AssociateTransitGatewayRouteTableRequestFunc == nil {
		panic("ec2ClientMock.AssociateTransitGatewayRouteTableRequestFunc: method is nil but ec2Client.AssociateTransitGatewayRouteTableRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AssociateTransitGatewayRouteTableInput
	}{
		In1: in1,
	}
	lockec2ClientMockAssociateTransitGatewayRouteTableRequest.Lock()
	mock.calls.AssociateTransitGatewayRouteTableRequest = append(mock.calls.AssociateTransitGatewayRouteTableRequest, callInfo)
	lockec2ClientMockAssociateTransitGatewayRouteTableRequest.Unlock()
	return mock.AssociateTransitGatewayRouteTableRequestFunc(in1)
}

// AssociateTransitGatewayRouteTableRequestCalls gets all the calls that were made to AssociateTransitGatewayRouteTableRequest.
// Check the length with:
//     len(mockedec2Client.AssociateTransitGatewayRouteTableRequestCalls())
func (mock *ec2ClientMock) AssociateTransitGatewayRouteTableRequestCalls() []struct {
	In1 *ec2.AssociateTransitGatewayRouteTableInput
} {
	var calls []struct {
		In1 *ec2.AssociateTransitGatewayRouteTableInput
	}
	lockec2ClientMockAssociateTransitGatewayRouteTableRequest.RLock()
	calls = mock.calls.AssociateTransitGatewayRouteTableRequest
	lockec2ClientMockAssociateTransitGatewayRouteTableRequest.RUnlock()
	return calls
}

// AssociateTransitGatewayRouteTableWithContext calls AssociateTransitGatewayRouteTableWithContextFunc.
func (mock *ec2ClientMock) AssociateTransitGatewayRouteTableWithContext(in1 context.Context, in2 *ec2.AssociateTransitGatewayRouteTableInput, in3 ...request.Option) (*ec2.AssociateTransitGatewayRouteTableOutput, error) {
	if mock.AssociateTransitGatewayRouteTableWithContextFunc == nil {
		panic("ec2ClientMock.AssociateTransitGatewayRouteTableWithContextFunc: method is nil but ec2Client.AssociateTransitGatewayRouteTableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AssociateTransitGatewayRouteTableInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAssociateTransitGatewayRouteTableWithContext.Lock()
	mock.calls.AssociateTransitGatewayRouteTableWithContext = append(mock.calls.AssociateTransitGatewayRouteTableWithContext, callInfo)
	lockec2ClientMockAssociateTransitGatewayRouteTableWithContext.Unlock()
	return mock.AssociateTransitGatewayRouteTableWithContextFunc(in1, in2, in3...)
}

// AssociateTransitGatewayRouteTableWithContextCalls gets all the calls that were made to AssociateTransitGatewayRouteTableWithContext.
// Check the length with:
//     len(mockedec2Client.AssociateTransitGatewayRouteTableWithContextCalls())
func (mock *ec2ClientMock) AssociateTransitGatewayRouteTableWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AssociateTransitGatewayRouteTableInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AssociateTransitGatewayRouteTableInput
		In3 []request.Option
	}
	lockec2ClientMockAssociateTransitGatewayRouteTableWithContext.RLock()
	calls = mock.calls.AssociateTransitGatewayRouteTableWithContext
	lockec2ClientMockAssociateTransitGatewayRouteTableWithContext.RUnlock()
	return calls
}

// AssociateVpcCidrBlock calls AssociateVpcCidrBlockFunc.
func (mock *ec2ClientMock) AssociateVpcCidrBlock(in1 *ec2.AssociateVpcCidrBlockInput) (*ec2.AssociateVpcCidrBlockOutput, error) {
	if mock.AssociateVpcCidrBlockFunc == nil {
		panic("ec2ClientMock.AssociateVpcCidrBlockFunc: method is nil but ec2Client.AssociateVpcCidrBlock was just called")
	}
	callInfo := struct {
		In1 *ec2.AssociateVpcCidrBlockInput
	}{
		In1: in1,
	}
	lockec2ClientMockAssociateVpcCidrBlock.Lock()
	mock.calls.AssociateVpcCidrBlock = append(mock.calls.AssociateVpcCidrBlock, callInfo)
	lockec2ClientMockAssociateVpcCidrBlock.Unlock()
	return mock.AssociateVpcCidrBlockFunc(in1)
}

// AssociateVpcCidrBlockCalls gets all the calls that were made to AssociateVpcCidrBlock.
// Check the length with:
//     len(mockedec2Client.AssociateVpcCidrBlockCalls())
func (mock *ec2ClientMock) AssociateVpcCidrBlockCalls() []struct {
	In1 *ec2.AssociateVpcCidrBlockInput
} {
	var calls []struct {
		In1 *ec2.AssociateVpcCidrBlockInput
	}
	lockec2ClientMockAssociateVpcCidrBlock.RLock()
	calls = mock.calls.AssociateVpcCidrBlock
	lockec2ClientMockAssociateVpcCidrBlock.RUnlock()
	return calls
}

// AssociateVpcCidrBlockRequest calls AssociateVpcCidrBlockRequestFunc.
func (mock *ec2ClientMock) AssociateVpcCidrBlockRequest(in1 *ec2.AssociateVpcCidrBlockInput) (*request.Request, *ec2.AssociateVpcCidrBlockOutput) {
	if mock.AssociateVpcCidrBlockRequestFunc == nil {
		panic("ec2ClientMock.AssociateVpcCidrBlockRequestFunc: method is nil but ec2Client.AssociateVpcCidrBlockRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AssociateVpcCidrBlockInput
	}{
		In1: in1,
	}
	lockec2ClientMockAssociateVpcCidrBlockRequest.Lock()
	mock.calls.AssociateVpcCidrBlockRequest = append(mock.calls.AssociateVpcCidrBlockRequest, callInfo)
	lockec2ClientMockAssociateVpcCidrBlockRequest.Unlock()
	return mock.AssociateVpcCidrBlockRequestFunc(in1)
}

// AssociateVpcCidrBlockRequestCalls gets all the calls that were made to AssociateVpcCidrBlockRequest.
// Check the length with:
//     len(mockedec2Client.AssociateVpcCidrBlockRequestCalls())
func (mock *ec2ClientMock) AssociateVpcCidrBlockRequestCalls() []struct {
	In1 *ec2.AssociateVpcCidrBlockInput
} {
	var calls []struct {
		In1 *ec2.AssociateVpcCidrBlockInput
	}
	lockec2ClientMockAssociateVpcCidrBlockRequest.RLock()
	calls = mock.calls.AssociateVpcCidrBlockRequest
	lockec2ClientMockAssociateVpcCidrBlockRequest.RUnlock()
	return calls
}

// AssociateVpcCidrBlockWithContext calls AssociateVpcCidrBlockWithContextFunc.
func (mock *ec2ClientMock) AssociateVpcCidrBlockWithContext(in1 context.Context, in2 *ec2.AssociateVpcCidrBlockInput, in3 ...request.Option) (*ec2.AssociateVpcCidrBlockOutput, error) {
	if mock.AssociateVpcCidrBlockWithContextFunc == nil {
		panic("ec2ClientMock.AssociateVpcCidrBlockWithContextFunc: method is nil but ec2Client.AssociateVpcCidrBlockWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AssociateVpcCidrBlockInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAssociateVpcCidrBlockWithContext.Lock()
	mock.calls.AssociateVpcCidrBlockWithContext = append(mock.calls.AssociateVpcCidrBlockWithContext, callInfo)
	lockec2ClientMockAssociateVpcCidrBlockWithContext.Unlock()
	return mock.AssociateVpcCidrBlockWithContextFunc(in1, in2, in3...)
}

// AssociateVpcCidrBlockWithContextCalls gets all the calls that were made to AssociateVpcCidrBlockWithContext.
// Check the length with:
//     len(mockedec2Client.AssociateVpcCidrBlockWithContextCalls())
func (mock *ec2ClientMock) AssociateVpcCidrBlockWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AssociateVpcCidrBlockInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AssociateVpcCidrBlockInput
		In3 []request.Option
	}
	lockec2ClientMockAssociateVpcCidrBlockWithContext.RLock()
	calls = mock.calls.AssociateVpcCidrBlockWithContext
	lockec2ClientMockAssociateVpcCidrBlockWithContext.RUnlock()
	return calls
}

// AttachClassicLinkVpc calls AttachClassicLinkVpcFunc.
func (mock *ec2ClientMock) AttachClassicLinkVpc(in1 *ec2.AttachClassicLinkVpcInput) (*ec2.AttachClassicLinkVpcOutput, error) {
	if mock.AttachClassicLinkVpcFunc == nil {
		panic("ec2ClientMock.AttachClassicLinkVpcFunc: method is nil but ec2Client.AttachClassicLinkVpc was just called")
	}
	callInfo := struct {
		In1 *ec2.AttachClassicLinkVpcInput
	}{
		In1: in1,
	}
	lockec2ClientMockAttachClassicLinkVpc.Lock()
	mock.calls.AttachClassicLinkVpc = append(mock.calls.AttachClassicLinkVpc, callInfo)
	lockec2ClientMockAttachClassicLinkVpc.Unlock()
	return mock.AttachClassicLinkVpcFunc(in1)
}

// AttachClassicLinkVpcCalls gets all the calls that were made to AttachClassicLinkVpc.
// Check the length with:
//     len(mockedec2Client.AttachClassicLinkVpcCalls())
func (mock *ec2ClientMock) AttachClassicLinkVpcCalls() []struct {
	In1 *ec2.AttachClassicLinkVpcInput
} {
	var calls []struct {
		In1 *ec2.AttachClassicLinkVpcInput
	}
	lockec2ClientMockAttachClassicLinkVpc.RLock()
	calls = mock.calls.AttachClassicLinkVpc
	lockec2ClientMockAttachClassicLinkVpc.RUnlock()
	return calls
}

// AttachClassicLinkVpcRequest calls AttachClassicLinkVpcRequestFunc.
func (mock *ec2ClientMock) AttachClassicLinkVpcRequest(in1 *ec2.AttachClassicLinkVpcInput) (*request.Request, *ec2.AttachClassicLinkVpcOutput) {
	if mock.AttachClassicLinkVpcRequestFunc == nil {
		panic("ec2ClientMock.AttachClassicLinkVpcRequestFunc: method is nil but ec2Client.AttachClassicLinkVpcRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AttachClassicLinkVpcInput
	}{
		In1: in1,
	}
	lockec2ClientMockAttachClassicLinkVpcRequest.Lock()
	mock.calls.AttachClassicLinkVpcRequest = append(mock.calls.AttachClassicLinkVpcRequest, callInfo)
	lockec2ClientMockAttachClassicLinkVpcRequest.Unlock()
	return mock.AttachClassicLinkVpcRequestFunc(in1)
}

// AttachClassicLinkVpcRequestCalls gets all the calls that were made to AttachClassicLinkVpcRequest.
// Check the length with:
//     len(mockedec2Client.AttachClassicLinkVpcRequestCalls())
func (mock *ec2ClientMock) AttachClassicLinkVpcRequestCalls() []struct {
	In1 *ec2.AttachClassicLinkVpcInput
} {
	var calls []struct {
		In1 *ec2.AttachClassicLinkVpcInput
	}
	lockec2ClientMockAttachClassicLinkVpcRequest.RLock()
	calls = mock.calls.AttachClassicLinkVpcRequest
	lockec2ClientMockAttachClassicLinkVpcRequest.RUnlock()
	return calls
}

// AttachClassicLinkVpcWithContext calls AttachClassicLinkVpcWithContextFunc.
func (mock *ec2ClientMock) AttachClassicLinkVpcWithContext(in1 context.Context, in2 *ec2.AttachClassicLinkVpcInput, in3 ...request.Option) (*ec2.AttachClassicLinkVpcOutput, error) {
	if mock.AttachClassicLinkVpcWithContextFunc == nil {
		panic("ec2ClientMock.AttachClassicLinkVpcWithContextFunc: method is nil but ec2Client.AttachClassicLinkVpcWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AttachClassicLinkVpcInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAttachClassicLinkVpcWithContext.Lock()
	mock.calls.AttachClassicLinkVpcWithContext = append(mock.calls.AttachClassicLinkVpcWithContext, callInfo)
	lockec2ClientMockAttachClassicLinkVpcWithContext.Unlock()
	return mock.AttachClassicLinkVpcWithContextFunc(in1, in2, in3...)
}

// AttachClassicLinkVpcWithContextCalls gets all the calls that were made to AttachClassicLinkVpcWithContext.
// Check the length with:
//     len(mockedec2Client.AttachClassicLinkVpcWithContextCalls())
func (mock *ec2ClientMock) AttachClassicLinkVpcWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AttachClassicLinkVpcInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AttachClassicLinkVpcInput
		In3 []request.Option
	}
	lockec2ClientMockAttachClassicLinkVpcWithContext.RLock()
	calls = mock.calls.AttachClassicLinkVpcWithContext
	lockec2ClientMockAttachClassicLinkVpcWithContext.RUnlock()
	return calls
}

// AttachInternetGateway calls AttachInternetGatewayFunc.
func (mock *ec2ClientMock) AttachInternetGateway(in1 *ec2.AttachInternetGatewayInput) (*ec2.AttachInternetGatewayOutput, error) {
	if mock.AttachInternetGatewayFunc == nil {
		panic("ec2ClientMock.AttachInternetGatewayFunc: method is nil but ec2Client.AttachInternetGateway was just called")
	}
	callInfo := struct {
		In1 *ec2.AttachInternetGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockAttachInternetGateway.Lock()
	mock.calls.AttachInternetGateway = append(mock.calls.AttachInternetGateway, callInfo)
	lockec2ClientMockAttachInternetGateway.Unlock()
	return mock.AttachInternetGatewayFunc(in1)
}

// AttachInternetGatewayCalls gets all the calls that were made to AttachInternetGateway.
// Check the length with:
//     len(mockedec2Client.AttachInternetGatewayCalls())
func (mock *ec2ClientMock) AttachInternetGatewayCalls() []struct {
	In1 *ec2.AttachInternetGatewayInput
} {
	var calls []struct {
		In1 *ec2.AttachInternetGatewayInput
	}
	lockec2ClientMockAttachInternetGateway.RLock()
	calls = mock.calls.AttachInternetGateway
	lockec2ClientMockAttachInternetGateway.RUnlock()
	return calls
}

// AttachInternetGatewayRequest calls AttachInternetGatewayRequestFunc.
func (mock *ec2ClientMock) AttachInternetGatewayRequest(in1 *ec2.AttachInternetGatewayInput) (*request.Request, *ec2.AttachInternetGatewayOutput) {
	if mock.AttachInternetGatewayRequestFunc == nil {
		panic("ec2ClientMock.AttachInternetGatewayRequestFunc: method is nil but ec2Client.AttachInternetGatewayRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AttachInternetGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockAttachInternetGatewayRequest.Lock()
	mock.calls.AttachInternetGatewayRequest = append(mock.calls.AttachInternetGatewayRequest, callInfo)
	lockec2ClientMockAttachInternetGatewayRequest.Unlock()
	return mock.AttachInternetGatewayRequestFunc(in1)
}

// AttachInternetGatewayRequestCalls gets all the calls that were made to AttachInternetGatewayRequest.
// Check the length with:
//     len(mockedec2Client.AttachInternetGatewayRequestCalls())
func (mock *ec2ClientMock) AttachInternetGatewayRequestCalls() []struct {
	In1 *ec2.AttachInternetGatewayInput
} {
	var calls []struct {
		In1 *ec2.AttachInternetGatewayInput
	}
	lockec2ClientMockAttachInternetGatewayRequest.RLock()
	calls = mock.calls.AttachInternetGatewayRequest
	lockec2ClientMockAttachInternetGatewayRequest.RUnlock()
	return calls
}

// AttachInternetGatewayWithContext calls AttachInternetGatewayWithContextFunc.
func (mock *ec2ClientMock) AttachInternetGatewayWithContext(in1 context.Context, in2 *ec2.AttachInternetGatewayInput, in3 ...request.Option) (*ec2.AttachInternetGatewayOutput, error) {
	if mock.AttachInternetGatewayWithContextFunc == nil {
		panic("ec2ClientMock.AttachInternetGatewayWithContextFunc: method is nil but ec2Client.AttachInternetGatewayWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AttachInternetGatewayInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAttachInternetGatewayWithContext.Lock()
	mock.calls.AttachInternetGatewayWithContext = append(mock.calls.AttachInternetGatewayWithContext, callInfo)
	lockec2ClientMockAttachInternetGatewayWithContext.Unlock()
	return mock.AttachInternetGatewayWithContextFunc(in1, in2, in3...)
}

// AttachInternetGatewayWithContextCalls gets all the calls that were made to AttachInternetGatewayWithContext.
// Check the length with:
//     len(mockedec2Client.AttachInternetGatewayWithContextCalls())
func (mock *ec2ClientMock) AttachInternetGatewayWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AttachInternetGatewayInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AttachInternetGatewayInput
		In3 []request.Option
	}
	lockec2ClientMockAttachInternetGatewayWithContext.RLock()
	calls = mock.calls.AttachInternetGatewayWithContext
	lockec2ClientMockAttachInternetGatewayWithContext.RUnlock()
	return calls
}

// AttachNetworkInterface calls AttachNetworkInterfaceFunc.
func (mock *ec2ClientMock) AttachNetworkInterface(in1 *ec2.AttachNetworkInterfaceInput) (*ec2.AttachNetworkInterfaceOutput, error) {
	if mock.AttachNetworkInterfaceFunc == nil {
		panic("ec2ClientMock.AttachNetworkInterfaceFunc: method is nil but ec2Client.AttachNetworkInterface was just called")
	}
	callInfo := struct {
		In1 *ec2.AttachNetworkInterfaceInput
	}{
		In1: in1,
	}
	lockec2ClientMockAttachNetworkInterface.Lock()
	mock.calls.AttachNetworkInterface = append(mock.calls.AttachNetworkInterface, callInfo)
	lockec2ClientMockAttachNetworkInterface.Unlock()
	return mock.AttachNetworkInterfaceFunc(in1)
}

// AttachNetworkInterfaceCalls gets all the calls that were made to AttachNetworkInterface.
// Check the length with:
//     len(mockedec2Client.AttachNetworkInterfaceCalls())
func (mock *ec2ClientMock) AttachNetworkInterfaceCalls() []struct {
	In1 *ec2.AttachNetworkInterfaceInput
} {
	var calls []struct {
		In1 *ec2.AttachNetworkInterfaceInput
	}
	lockec2ClientMockAttachNetworkInterface.RLock()
	calls = mock.calls.AttachNetworkInterface
	lockec2ClientMockAttachNetworkInterface.RUnlock()
	return calls
}

// AttachNetworkInterfaceRequest calls AttachNetworkInterfaceRequestFunc.
func (mock *ec2ClientMock) AttachNetworkInterfaceRequest(in1 *ec2.AttachNetworkInterfaceInput) (*request.Request, *ec2.AttachNetworkInterfaceOutput) {
	if mock.AttachNetworkInterfaceRequestFunc == nil {
		panic("ec2ClientMock.AttachNetworkInterfaceRequestFunc: method is nil but ec2Client.AttachNetworkInterfaceRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AttachNetworkInterfaceInput
	}{
		In1: in1,
	}
	lockec2ClientMockAttachNetworkInterfaceRequest.Lock()
	mock.calls.AttachNetworkInterfaceRequest = append(mock.calls.AttachNetworkInterfaceRequest, callInfo)
	lockec2ClientMockAttachNetworkInterfaceRequest.Unlock()
	return mock.AttachNetworkInterfaceRequestFunc(in1)
}

// AttachNetworkInterfaceRequestCalls gets all the calls that were made to AttachNetworkInterfaceRequest.
// Check the length with:
//     len(mockedec2Client.AttachNetworkInterfaceRequestCalls())
func (mock *ec2ClientMock) AttachNetworkInterfaceRequestCalls() []struct {
	In1 *ec2.AttachNetworkInterfaceInput
} {
	var calls []struct {
		In1 *ec2.AttachNetworkInterfaceInput
	}
	lockec2ClientMockAttachNetworkInterfaceRequest.RLock()
	calls = mock.calls.AttachNetworkInterfaceRequest
	lockec2ClientMockAttachNetworkInterfaceRequest.RUnlock()
	return calls
}

// AttachNetworkInterfaceWithContext calls AttachNetworkInterfaceWithContextFunc.
func (mock *ec2ClientMock) AttachNetworkInterfaceWithContext(in1 context.Context, in2 *ec2.AttachNetworkInterfaceInput, in3 ...request.Option) (*ec2.AttachNetworkInterfaceOutput, error) {
	if mock.AttachNetworkInterfaceWithContextFunc == nil {
		panic("ec2ClientMock.AttachNetworkInterfaceWithContextFunc: method is nil but ec2Client.AttachNetworkInterfaceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AttachNetworkInterfaceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAttachNetworkInterfaceWithContext.Lock()
	mock.calls.AttachNetworkInterfaceWithContext = append(mock.calls.AttachNetworkInterfaceWithContext, callInfo)
	lockec2ClientMockAttachNetworkInterfaceWithContext.Unlock()
	return mock.AttachNetworkInterfaceWithContextFunc(in1, in2, in3...)
}

// AttachNetworkInterfaceWithContextCalls gets all the calls that were made to AttachNetworkInterfaceWithContext.
// Check the length with:
//     len(mockedec2Client.AttachNetworkInterfaceWithContextCalls())
func (mock *ec2ClientMock) AttachNetworkInterfaceWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AttachNetworkInterfaceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AttachNetworkInterfaceInput
		In3 []request.Option
	}
	lockec2ClientMockAttachNetworkInterfaceWithContext.RLock()
	calls = mock.calls.AttachNetworkInterfaceWithContext
	lockec2ClientMockAttachNetworkInterfaceWithContext.RUnlock()
	return calls
}

// AttachVolume calls AttachVolumeFunc.
func (mock *ec2ClientMock) AttachVolume(in1 *ec2.AttachVolumeInput) (*ec2.VolumeAttachment, error) {
	if mock.AttachVolumeFunc == nil {
		panic("ec2ClientMock.AttachVolumeFunc: method is nil but ec2Client.AttachVolume was just called")
	}
	callInfo := struct {
		In1 *ec2.AttachVolumeInput
	}{
		In1: in1,
	}
	lockec2ClientMockAttachVolume.Lock()
	mock.calls.AttachVolume = append(mock.calls.AttachVolume, callInfo)
	lockec2ClientMockAttachVolume.Unlock()
	return mock.AttachVolumeFunc(in1)
}

// AttachVolumeCalls gets all the calls that were made to AttachVolume.
// Check the length with:
//     len(mockedec2Client.AttachVolumeCalls())
func (mock *ec2ClientMock) AttachVolumeCalls() []struct {
	In1 *ec2.AttachVolumeInput
} {
	var calls []struct {
		In1 *ec2.AttachVolumeInput
	}
	lockec2ClientMockAttachVolume.RLock()
	calls = mock.calls.AttachVolume
	lockec2ClientMockAttachVolume.RUnlock()
	return calls
}

// AttachVolumeRequest calls AttachVolumeRequestFunc.
func (mock *ec2ClientMock) AttachVolumeRequest(in1 *ec2.AttachVolumeInput) (*request.Request, *ec2.VolumeAttachment) {
	if mock.AttachVolumeRequestFunc == nil {
		panic("ec2ClientMock.AttachVolumeRequestFunc: method is nil but ec2Client.AttachVolumeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AttachVolumeInput
	}{
		In1: in1,
	}
	lockec2ClientMockAttachVolumeRequest.Lock()
	mock.calls.AttachVolumeRequest = append(mock.calls.AttachVolumeRequest, callInfo)
	lockec2ClientMockAttachVolumeRequest.Unlock()
	return mock.AttachVolumeRequestFunc(in1)
}

// AttachVolumeRequestCalls gets all the calls that were made to AttachVolumeRequest.
// Check the length with:
//     len(mockedec2Client.AttachVolumeRequestCalls())
func (mock *ec2ClientMock) AttachVolumeRequestCalls() []struct {
	In1 *ec2.AttachVolumeInput
} {
	var calls []struct {
		In1 *ec2.AttachVolumeInput
	}
	lockec2ClientMockAttachVolumeRequest.RLock()
	calls = mock.calls.AttachVolumeRequest
	lockec2ClientMockAttachVolumeRequest.RUnlock()
	return calls
}

// AttachVolumeWithContext calls AttachVolumeWithContextFunc.
func (mock *ec2ClientMock) AttachVolumeWithContext(in1 context.Context, in2 *ec2.AttachVolumeInput, in3 ...request.Option) (*ec2.VolumeAttachment, error) {
	if mock.AttachVolumeWithContextFunc == nil {
		panic("ec2ClientMock.AttachVolumeWithContextFunc: method is nil but ec2Client.AttachVolumeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AttachVolumeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAttachVolumeWithContext.Lock()
	mock.calls.AttachVolumeWithContext = append(mock.calls.AttachVolumeWithContext, callInfo)
	lockec2ClientMockAttachVolumeWithContext.Unlock()
	return mock.AttachVolumeWithContextFunc(in1, in2, in3...)
}

// AttachVolumeWithContextCalls gets all the calls that were made to AttachVolumeWithContext.
// Check the length with:
//     len(mockedec2Client.AttachVolumeWithContextCalls())
func (mock *ec2ClientMock) AttachVolumeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AttachVolumeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AttachVolumeInput
		In3 []request.Option
	}
	lockec2ClientMockAttachVolumeWithContext.RLock()
	calls = mock.calls.AttachVolumeWithContext
	lockec2ClientMockAttachVolumeWithContext.RUnlock()
	return calls
}

// AttachVpnGateway calls AttachVpnGatewayFunc.
func (mock *ec2ClientMock) AttachVpnGateway(in1 *ec2.AttachVpnGatewayInput) (*ec2.AttachVpnGatewayOutput, error) {
	if mock.AttachVpnGatewayFunc == nil {
		panic("ec2ClientMock.AttachVpnGatewayFunc: method is nil but ec2Client.AttachVpnGateway was just called")
	}
	callInfo := struct {
		In1 *ec2.AttachVpnGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockAttachVpnGateway.Lock()
	mock.calls.AttachVpnGateway = append(mock.calls.AttachVpnGateway, callInfo)
	lockec2ClientMockAttachVpnGateway.Unlock()
	return mock.AttachVpnGatewayFunc(in1)
}

// AttachVpnGatewayCalls gets all the calls that were made to AttachVpnGateway.
// Check the length with:
//     len(mockedec2Client.AttachVpnGatewayCalls())
func (mock *ec2ClientMock) AttachVpnGatewayCalls() []struct {
	In1 *ec2.AttachVpnGatewayInput
} {
	var calls []struct {
		In1 *ec2.AttachVpnGatewayInput
	}
	lockec2ClientMockAttachVpnGateway.RLock()
	calls = mock.calls.AttachVpnGateway
	lockec2ClientMockAttachVpnGateway.RUnlock()
	return calls
}

// AttachVpnGatewayRequest calls AttachVpnGatewayRequestFunc.
func (mock *ec2ClientMock) AttachVpnGatewayRequest(in1 *ec2.AttachVpnGatewayInput) (*request.Request, *ec2.AttachVpnGatewayOutput) {
	if mock.AttachVpnGatewayRequestFunc == nil {
		panic("ec2ClientMock.AttachVpnGatewayRequestFunc: method is nil but ec2Client.AttachVpnGatewayRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AttachVpnGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockAttachVpnGatewayRequest.Lock()
	mock.calls.AttachVpnGatewayRequest = append(mock.calls.AttachVpnGatewayRequest, callInfo)
	lockec2ClientMockAttachVpnGatewayRequest.Unlock()
	return mock.AttachVpnGatewayRequestFunc(in1)
}

// AttachVpnGatewayRequestCalls gets all the calls that were made to AttachVpnGatewayRequest.
// Check the length with:
//     len(mockedec2Client.AttachVpnGatewayRequestCalls())
func (mock *ec2ClientMock) AttachVpnGatewayRequestCalls() []struct {
	In1 *ec2.AttachVpnGatewayInput
} {
	var calls []struct {
		In1 *ec2.AttachVpnGatewayInput
	}
	lockec2ClientMockAttachVpnGatewayRequest.RLock()
	calls = mock.calls.AttachVpnGatewayRequest
	lockec2ClientMockAttachVpnGatewayRequest.RUnlock()
	return calls
}

// AttachVpnGatewayWithContext calls AttachVpnGatewayWithContextFunc.
func (mock *ec2ClientMock) AttachVpnGatewayWithContext(in1 context.Context, in2 *ec2.AttachVpnGatewayInput, in3 ...request.Option) (*ec2.AttachVpnGatewayOutput, error) {
	if mock.AttachVpnGatewayWithContextFunc == nil {
		panic("ec2ClientMock.AttachVpnGatewayWithContextFunc: method is nil but ec2Client.AttachVpnGatewayWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AttachVpnGatewayInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAttachVpnGatewayWithContext.Lock()
	mock.calls.AttachVpnGatewayWithContext = append(mock.calls.AttachVpnGatewayWithContext, callInfo)
	lockec2ClientMockAttachVpnGatewayWithContext.Unlock()
	return mock.AttachVpnGatewayWithContextFunc(in1, in2, in3...)
}

// AttachVpnGatewayWithContextCalls gets all the calls that were made to AttachVpnGatewayWithContext.
// Check the length with:
//     len(mockedec2Client.AttachVpnGatewayWithContextCalls())
func (mock *ec2ClientMock) AttachVpnGatewayWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AttachVpnGatewayInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AttachVpnGatewayInput
		In3 []request.Option
	}
	lockec2ClientMockAttachVpnGatewayWithContext.RLock()
	calls = mock.calls.AttachVpnGatewayWithContext
	lockec2ClientMockAttachVpnGatewayWithContext.RUnlock()
	return calls
}

// AuthorizeClientVpnIngress calls AuthorizeClientVpnIngressFunc.
func (mock *ec2ClientMock) AuthorizeClientVpnIngress(in1 *ec2.AuthorizeClientVpnIngressInput) (*ec2.AuthorizeClientVpnIngressOutput, error) {
	if mock.AuthorizeClientVpnIngressFunc == nil {
		panic("ec2ClientMock.AuthorizeClientVpnIngressFunc: method is nil but ec2Client.AuthorizeClientVpnIngress was just called")
	}
	callInfo := struct {
		In1 *ec2.AuthorizeClientVpnIngressInput
	}{
		In1: in1,
	}
	lockec2ClientMockAuthorizeClientVpnIngress.Lock()
	mock.calls.AuthorizeClientVpnIngress = append(mock.calls.AuthorizeClientVpnIngress, callInfo)
	lockec2ClientMockAuthorizeClientVpnIngress.Unlock()
	return mock.AuthorizeClientVpnIngressFunc(in1)
}

// AuthorizeClientVpnIngressCalls gets all the calls that were made to AuthorizeClientVpnIngress.
// Check the length with:
//     len(mockedec2Client.AuthorizeClientVpnIngressCalls())
func (mock *ec2ClientMock) AuthorizeClientVpnIngressCalls() []struct {
	In1 *ec2.AuthorizeClientVpnIngressInput
} {
	var calls []struct {
		In1 *ec2.AuthorizeClientVpnIngressInput
	}
	lockec2ClientMockAuthorizeClientVpnIngress.RLock()
	calls = mock.calls.AuthorizeClientVpnIngress
	lockec2ClientMockAuthorizeClientVpnIngress.RUnlock()
	return calls
}

// AuthorizeClientVpnIngressRequest calls AuthorizeClientVpnIngressRequestFunc.
func (mock *ec2ClientMock) AuthorizeClientVpnIngressRequest(in1 *ec2.AuthorizeClientVpnIngressInput) (*request.Request, *ec2.AuthorizeClientVpnIngressOutput) {
	if mock.AuthorizeClientVpnIngressRequestFunc == nil {
		panic("ec2ClientMock.AuthorizeClientVpnIngressRequestFunc: method is nil but ec2Client.AuthorizeClientVpnIngressRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AuthorizeClientVpnIngressInput
	}{
		In1: in1,
	}
	lockec2ClientMockAuthorizeClientVpnIngressRequest.Lock()
	mock.calls.AuthorizeClientVpnIngressRequest = append(mock.calls.AuthorizeClientVpnIngressRequest, callInfo)
	lockec2ClientMockAuthorizeClientVpnIngressRequest.Unlock()
	return mock.AuthorizeClientVpnIngressRequestFunc(in1)
}

// AuthorizeClientVpnIngressRequestCalls gets all the calls that were made to AuthorizeClientVpnIngressRequest.
// Check the length with:
//     len(mockedec2Client.AuthorizeClientVpnIngressRequestCalls())
func (mock *ec2ClientMock) AuthorizeClientVpnIngressRequestCalls() []struct {
	In1 *ec2.AuthorizeClientVpnIngressInput
} {
	var calls []struct {
		In1 *ec2.AuthorizeClientVpnIngressInput
	}
	lockec2ClientMockAuthorizeClientVpnIngressRequest.RLock()
	calls = mock.calls.AuthorizeClientVpnIngressRequest
	lockec2ClientMockAuthorizeClientVpnIngressRequest.RUnlock()
	return calls
}

// AuthorizeClientVpnIngressWithContext calls AuthorizeClientVpnIngressWithContextFunc.
func (mock *ec2ClientMock) AuthorizeClientVpnIngressWithContext(in1 context.Context, in2 *ec2.AuthorizeClientVpnIngressInput, in3 ...request.Option) (*ec2.AuthorizeClientVpnIngressOutput, error) {
	if mock.AuthorizeClientVpnIngressWithContextFunc == nil {
		panic("ec2ClientMock.AuthorizeClientVpnIngressWithContextFunc: method is nil but ec2Client.AuthorizeClientVpnIngressWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AuthorizeClientVpnIngressInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAuthorizeClientVpnIngressWithContext.Lock()
	mock.calls.AuthorizeClientVpnIngressWithContext = append(mock.calls.AuthorizeClientVpnIngressWithContext, callInfo)
	lockec2ClientMockAuthorizeClientVpnIngressWithContext.Unlock()
	return mock.AuthorizeClientVpnIngressWithContextFunc(in1, in2, in3...)
}

// AuthorizeClientVpnIngressWithContextCalls gets all the calls that were made to AuthorizeClientVpnIngressWithContext.
// Check the length with:
//     len(mockedec2Client.AuthorizeClientVpnIngressWithContextCalls())
func (mock *ec2ClientMock) AuthorizeClientVpnIngressWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AuthorizeClientVpnIngressInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AuthorizeClientVpnIngressInput
		In3 []request.Option
	}
	lockec2ClientMockAuthorizeClientVpnIngressWithContext.RLock()
	calls = mock.calls.AuthorizeClientVpnIngressWithContext
	lockec2ClientMockAuthorizeClientVpnIngressWithContext.RUnlock()
	return calls
}

// AuthorizeSecurityGroupEgress calls AuthorizeSecurityGroupEgressFunc.
func (mock *ec2ClientMock) AuthorizeSecurityGroupEgress(in1 *ec2.AuthorizeSecurityGroupEgressInput) (*ec2.AuthorizeSecurityGroupEgressOutput, error) {
	if mock.AuthorizeSecurityGroupEgressFunc == nil {
		panic("ec2ClientMock.AuthorizeSecurityGroupEgressFunc: method is nil but ec2Client.AuthorizeSecurityGroupEgress was just called")
	}
	callInfo := struct {
		In1 *ec2.AuthorizeSecurityGroupEgressInput
	}{
		In1: in1,
	}
	lockec2ClientMockAuthorizeSecurityGroupEgress.Lock()
	mock.calls.AuthorizeSecurityGroupEgress = append(mock.calls.AuthorizeSecurityGroupEgress, callInfo)
	lockec2ClientMockAuthorizeSecurityGroupEgress.Unlock()
	return mock.AuthorizeSecurityGroupEgressFunc(in1)
}

// AuthorizeSecurityGroupEgressCalls gets all the calls that were made to AuthorizeSecurityGroupEgress.
// Check the length with:
//     len(mockedec2Client.AuthorizeSecurityGroupEgressCalls())
func (mock *ec2ClientMock) AuthorizeSecurityGroupEgressCalls() []struct {
	In1 *ec2.AuthorizeSecurityGroupEgressInput
} {
	var calls []struct {
		In1 *ec2.AuthorizeSecurityGroupEgressInput
	}
	lockec2ClientMockAuthorizeSecurityGroupEgress.RLock()
	calls = mock.calls.AuthorizeSecurityGroupEgress
	lockec2ClientMockAuthorizeSecurityGroupEgress.RUnlock()
	return calls
}

// AuthorizeSecurityGroupEgressRequest calls AuthorizeSecurityGroupEgressRequestFunc.
func (mock *ec2ClientMock) AuthorizeSecurityGroupEgressRequest(in1 *ec2.AuthorizeSecurityGroupEgressInput) (*request.Request, *ec2.AuthorizeSecurityGroupEgressOutput) {
	if mock.AuthorizeSecurityGroupEgressRequestFunc == nil {
		panic("ec2ClientMock.AuthorizeSecurityGroupEgressRequestFunc: method is nil but ec2Client.AuthorizeSecurityGroupEgressRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AuthorizeSecurityGroupEgressInput
	}{
		In1: in1,
	}
	lockec2ClientMockAuthorizeSecurityGroupEgressRequest.Lock()
	mock.calls.AuthorizeSecurityGroupEgressRequest = append(mock.calls.AuthorizeSecurityGroupEgressRequest, callInfo)
	lockec2ClientMockAuthorizeSecurityGroupEgressRequest.Unlock()
	return mock.AuthorizeSecurityGroupEgressRequestFunc(in1)
}

// AuthorizeSecurityGroupEgressRequestCalls gets all the calls that were made to AuthorizeSecurityGroupEgressRequest.
// Check the length with:
//     len(mockedec2Client.AuthorizeSecurityGroupEgressRequestCalls())
func (mock *ec2ClientMock) AuthorizeSecurityGroupEgressRequestCalls() []struct {
	In1 *ec2.AuthorizeSecurityGroupEgressInput
} {
	var calls []struct {
		In1 *ec2.AuthorizeSecurityGroupEgressInput
	}
	lockec2ClientMockAuthorizeSecurityGroupEgressRequest.RLock()
	calls = mock.calls.AuthorizeSecurityGroupEgressRequest
	lockec2ClientMockAuthorizeSecurityGroupEgressRequest.RUnlock()
	return calls
}

// AuthorizeSecurityGroupEgressWithContext calls AuthorizeSecurityGroupEgressWithContextFunc.
func (mock *ec2ClientMock) AuthorizeSecurityGroupEgressWithContext(in1 context.Context, in2 *ec2.AuthorizeSecurityGroupEgressInput, in3 ...request.Option) (*ec2.AuthorizeSecurityGroupEgressOutput, error) {
	if mock.AuthorizeSecurityGroupEgressWithContextFunc == nil {
		panic("ec2ClientMock.AuthorizeSecurityGroupEgressWithContextFunc: method is nil but ec2Client.AuthorizeSecurityGroupEgressWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AuthorizeSecurityGroupEgressInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAuthorizeSecurityGroupEgressWithContext.Lock()
	mock.calls.AuthorizeSecurityGroupEgressWithContext = append(mock.calls.AuthorizeSecurityGroupEgressWithContext, callInfo)
	lockec2ClientMockAuthorizeSecurityGroupEgressWithContext.Unlock()
	return mock.AuthorizeSecurityGroupEgressWithContextFunc(in1, in2, in3...)
}

// AuthorizeSecurityGroupEgressWithContextCalls gets all the calls that were made to AuthorizeSecurityGroupEgressWithContext.
// Check the length with:
//     len(mockedec2Client.AuthorizeSecurityGroupEgressWithContextCalls())
func (mock *ec2ClientMock) AuthorizeSecurityGroupEgressWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AuthorizeSecurityGroupEgressInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AuthorizeSecurityGroupEgressInput
		In3 []request.Option
	}
	lockec2ClientMockAuthorizeSecurityGroupEgressWithContext.RLock()
	calls = mock.calls.AuthorizeSecurityGroupEgressWithContext
	lockec2ClientMockAuthorizeSecurityGroupEgressWithContext.RUnlock()
	return calls
}

// AuthorizeSecurityGroupIngress calls AuthorizeSecurityGroupIngressFunc.
func (mock *ec2ClientMock) AuthorizeSecurityGroupIngress(in1 *ec2.AuthorizeSecurityGroupIngressInput) (*ec2.AuthorizeSecurityGroupIngressOutput, error) {
	if mock.AuthorizeSecurityGroupIngressFunc == nil {
		panic("ec2ClientMock.AuthorizeSecurityGroupIngressFunc: method is nil but ec2Client.AuthorizeSecurityGroupIngress was just called")
	}
	callInfo := struct {
		In1 *ec2.AuthorizeSecurityGroupIngressInput
	}{
		In1: in1,
	}
	lockec2ClientMockAuthorizeSecurityGroupIngress.Lock()
	mock.calls.AuthorizeSecurityGroupIngress = append(mock.calls.AuthorizeSecurityGroupIngress, callInfo)
	lockec2ClientMockAuthorizeSecurityGroupIngress.Unlock()
	return mock.AuthorizeSecurityGroupIngressFunc(in1)
}

// AuthorizeSecurityGroupIngressCalls gets all the calls that were made to AuthorizeSecurityGroupIngress.
// Check the length with:
//     len(mockedec2Client.AuthorizeSecurityGroupIngressCalls())
func (mock *ec2ClientMock) AuthorizeSecurityGroupIngressCalls() []struct {
	In1 *ec2.AuthorizeSecurityGroupIngressInput
} {
	var calls []struct {
		In1 *ec2.AuthorizeSecurityGroupIngressInput
	}
	lockec2ClientMockAuthorizeSecurityGroupIngress.RLock()
	calls = mock.calls.AuthorizeSecurityGroupIngress
	lockec2ClientMockAuthorizeSecurityGroupIngress.RUnlock()
	return calls
}

// AuthorizeSecurityGroupIngressRequest calls AuthorizeSecurityGroupIngressRequestFunc.
func (mock *ec2ClientMock) AuthorizeSecurityGroupIngressRequest(in1 *ec2.AuthorizeSecurityGroupIngressInput) (*request.Request, *ec2.AuthorizeSecurityGroupIngressOutput) {
	if mock.AuthorizeSecurityGroupIngressRequestFunc == nil {
		panic("ec2ClientMock.AuthorizeSecurityGroupIngressRequestFunc: method is nil but ec2Client.AuthorizeSecurityGroupIngressRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.AuthorizeSecurityGroupIngressInput
	}{
		In1: in1,
	}
	lockec2ClientMockAuthorizeSecurityGroupIngressRequest.Lock()
	mock.calls.AuthorizeSecurityGroupIngressRequest = append(mock.calls.AuthorizeSecurityGroupIngressRequest, callInfo)
	lockec2ClientMockAuthorizeSecurityGroupIngressRequest.Unlock()
	return mock.AuthorizeSecurityGroupIngressRequestFunc(in1)
}

// AuthorizeSecurityGroupIngressRequestCalls gets all the calls that were made to AuthorizeSecurityGroupIngressRequest.
// Check the length with:
//     len(mockedec2Client.AuthorizeSecurityGroupIngressRequestCalls())
func (mock *ec2ClientMock) AuthorizeSecurityGroupIngressRequestCalls() []struct {
	In1 *ec2.AuthorizeSecurityGroupIngressInput
} {
	var calls []struct {
		In1 *ec2.AuthorizeSecurityGroupIngressInput
	}
	lockec2ClientMockAuthorizeSecurityGroupIngressRequest.RLock()
	calls = mock.calls.AuthorizeSecurityGroupIngressRequest
	lockec2ClientMockAuthorizeSecurityGroupIngressRequest.RUnlock()
	return calls
}

// AuthorizeSecurityGroupIngressWithContext calls AuthorizeSecurityGroupIngressWithContextFunc.
func (mock *ec2ClientMock) AuthorizeSecurityGroupIngressWithContext(in1 context.Context, in2 *ec2.AuthorizeSecurityGroupIngressInput, in3 ...request.Option) (*ec2.AuthorizeSecurityGroupIngressOutput, error) {
	if mock.AuthorizeSecurityGroupIngressWithContextFunc == nil {
		panic("ec2ClientMock.AuthorizeSecurityGroupIngressWithContextFunc: method is nil but ec2Client.AuthorizeSecurityGroupIngressWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.AuthorizeSecurityGroupIngressInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockAuthorizeSecurityGroupIngressWithContext.Lock()
	mock.calls.AuthorizeSecurityGroupIngressWithContext = append(mock.calls.AuthorizeSecurityGroupIngressWithContext, callInfo)
	lockec2ClientMockAuthorizeSecurityGroupIngressWithContext.Unlock()
	return mock.AuthorizeSecurityGroupIngressWithContextFunc(in1, in2, in3...)
}

// AuthorizeSecurityGroupIngressWithContextCalls gets all the calls that were made to AuthorizeSecurityGroupIngressWithContext.
// Check the length with:
//     len(mockedec2Client.AuthorizeSecurityGroupIngressWithContextCalls())
func (mock *ec2ClientMock) AuthorizeSecurityGroupIngressWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.AuthorizeSecurityGroupIngressInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.AuthorizeSecurityGroupIngressInput
		In3 []request.Option
	}
	lockec2ClientMockAuthorizeSecurityGroupIngressWithContext.RLock()
	calls = mock.calls.AuthorizeSecurityGroupIngressWithContext
	lockec2ClientMockAuthorizeSecurityGroupIngressWithContext.RUnlock()
	return calls
}

// BundleInstance calls BundleInstanceFunc.
func (mock *ec2ClientMock) BundleInstance(in1 *ec2.BundleInstanceInput) (*ec2.BundleInstanceOutput, error) {
	if mock.BundleInstanceFunc == nil {
		panic("ec2ClientMock.BundleInstanceFunc: method is nil but ec2Client.BundleInstance was just called")
	}
	callInfo := struct {
		In1 *ec2.BundleInstanceInput
	}{
		In1: in1,
	}
	lockec2ClientMockBundleInstance.Lock()
	mock.calls.BundleInstance = append(mock.calls.BundleInstance, callInfo)
	lockec2ClientMockBundleInstance.Unlock()
	return mock.BundleInstanceFunc(in1)
}

// BundleInstanceCalls gets all the calls that were made to BundleInstance.
// Check the length with:
//     len(mockedec2Client.BundleInstanceCalls())
func (mock *ec2ClientMock) BundleInstanceCalls() []struct {
	In1 *ec2.BundleInstanceInput
} {
	var calls []struct {
		In1 *ec2.BundleInstanceInput
	}
	lockec2ClientMockBundleInstance.RLock()
	calls = mock.calls.BundleInstance
	lockec2ClientMockBundleInstance.RUnlock()
	return calls
}

// BundleInstanceRequest calls BundleInstanceRequestFunc.
func (mock *ec2ClientMock) BundleInstanceRequest(in1 *ec2.BundleInstanceInput) (*request.Request, *ec2.BundleInstanceOutput) {
	if mock.BundleInstanceRequestFunc == nil {
		panic("ec2ClientMock.BundleInstanceRequestFunc: method is nil but ec2Client.BundleInstanceRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.BundleInstanceInput
	}{
		In1: in1,
	}
	lockec2ClientMockBundleInstanceRequest.Lock()
	mock.calls.BundleInstanceRequest = append(mock.calls.BundleInstanceRequest, callInfo)
	lockec2ClientMockBundleInstanceRequest.Unlock()
	return mock.BundleInstanceRequestFunc(in1)
}

// BundleInstanceRequestCalls gets all the calls that were made to BundleInstanceRequest.
// Check the length with:
//     len(mockedec2Client.BundleInstanceRequestCalls())
func (mock *ec2ClientMock) BundleInstanceRequestCalls() []struct {
	In1 *ec2.BundleInstanceInput
} {
	var calls []struct {
		In1 *ec2.BundleInstanceInput
	}
	lockec2ClientMockBundleInstanceRequest.RLock()
	calls = mock.calls.BundleInstanceRequest
	lockec2ClientMockBundleInstanceRequest.RUnlock()
	return calls
}

// BundleInstanceWithContext calls BundleInstanceWithContextFunc.
func (mock *ec2ClientMock) BundleInstanceWithContext(in1 context.Context, in2 *ec2.BundleInstanceInput, in3 ...request.Option) (*ec2.BundleInstanceOutput, error) {
	if mock.BundleInstanceWithContextFunc == nil {
		panic("ec2ClientMock.BundleInstanceWithContextFunc: method is nil but ec2Client.BundleInstanceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.BundleInstanceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockBundleInstanceWithContext.Lock()
	mock.calls.BundleInstanceWithContext = append(mock.calls.BundleInstanceWithContext, callInfo)
	lockec2ClientMockBundleInstanceWithContext.Unlock()
	return mock.BundleInstanceWithContextFunc(in1, in2, in3...)
}

// BundleInstanceWithContextCalls gets all the calls that were made to BundleInstanceWithContext.
// Check the length with:
//     len(mockedec2Client.BundleInstanceWithContextCalls())
func (mock *ec2ClientMock) BundleInstanceWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.BundleInstanceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.BundleInstanceInput
		In3 []request.Option
	}
	lockec2ClientMockBundleInstanceWithContext.RLock()
	calls = mock.calls.BundleInstanceWithContext
	lockec2ClientMockBundleInstanceWithContext.RUnlock()
	return calls
}

// CancelBundleTask calls CancelBundleTaskFunc.
func (mock *ec2ClientMock) CancelBundleTask(in1 *ec2.CancelBundleTaskInput) (*ec2.CancelBundleTaskOutput, error) {
	if mock.CancelBundleTaskFunc == nil {
		panic("ec2ClientMock.CancelBundleTaskFunc: method is nil but ec2Client.CancelBundleTask was just called")
	}
	callInfo := struct {
		In1 *ec2.CancelBundleTaskInput
	}{
		In1: in1,
	}
	lockec2ClientMockCancelBundleTask.Lock()
	mock.calls.CancelBundleTask = append(mock.calls.CancelBundleTask, callInfo)
	lockec2ClientMockCancelBundleTask.Unlock()
	return mock.CancelBundleTaskFunc(in1)
}

// CancelBundleTaskCalls gets all the calls that were made to CancelBundleTask.
// Check the length with:
//     len(mockedec2Client.CancelBundleTaskCalls())
func (mock *ec2ClientMock) CancelBundleTaskCalls() []struct {
	In1 *ec2.CancelBundleTaskInput
} {
	var calls []struct {
		In1 *ec2.CancelBundleTaskInput
	}
	lockec2ClientMockCancelBundleTask.RLock()
	calls = mock.calls.CancelBundleTask
	lockec2ClientMockCancelBundleTask.RUnlock()
	return calls
}

// CancelBundleTaskRequest calls CancelBundleTaskRequestFunc.
func (mock *ec2ClientMock) CancelBundleTaskRequest(in1 *ec2.CancelBundleTaskInput) (*request.Request, *ec2.CancelBundleTaskOutput) {
	if mock.CancelBundleTaskRequestFunc == nil {
		panic("ec2ClientMock.CancelBundleTaskRequestFunc: method is nil but ec2Client.CancelBundleTaskRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CancelBundleTaskInput
	}{
		In1: in1,
	}
	lockec2ClientMockCancelBundleTaskRequest.Lock()
	mock.calls.CancelBundleTaskRequest = append(mock.calls.CancelBundleTaskRequest, callInfo)
	lockec2ClientMockCancelBundleTaskRequest.Unlock()
	return mock.CancelBundleTaskRequestFunc(in1)
}

// CancelBundleTaskRequestCalls gets all the calls that were made to CancelBundleTaskRequest.
// Check the length with:
//     len(mockedec2Client.CancelBundleTaskRequestCalls())
func (mock *ec2ClientMock) CancelBundleTaskRequestCalls() []struct {
	In1 *ec2.CancelBundleTaskInput
} {
	var calls []struct {
		In1 *ec2.CancelBundleTaskInput
	}
	lockec2ClientMockCancelBundleTaskRequest.RLock()
	calls = mock.calls.CancelBundleTaskRequest
	lockec2ClientMockCancelBundleTaskRequest.RUnlock()
	return calls
}

// CancelBundleTaskWithContext calls CancelBundleTaskWithContextFunc.
func (mock *ec2ClientMock) CancelBundleTaskWithContext(in1 context.Context, in2 *ec2.CancelBundleTaskInput, in3 ...request.Option) (*ec2.CancelBundleTaskOutput, error) {
	if mock.CancelBundleTaskWithContextFunc == nil {
		panic("ec2ClientMock.CancelBundleTaskWithContextFunc: method is nil but ec2Client.CancelBundleTaskWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CancelBundleTaskInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCancelBundleTaskWithContext.Lock()
	mock.calls.CancelBundleTaskWithContext = append(mock.calls.CancelBundleTaskWithContext, callInfo)
	lockec2ClientMockCancelBundleTaskWithContext.Unlock()
	return mock.CancelBundleTaskWithContextFunc(in1, in2, in3...)
}

// CancelBundleTaskWithContextCalls gets all the calls that were made to CancelBundleTaskWithContext.
// Check the length with:
//     len(mockedec2Client.CancelBundleTaskWithContextCalls())
func (mock *ec2ClientMock) CancelBundleTaskWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CancelBundleTaskInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CancelBundleTaskInput
		In3 []request.Option
	}
	lockec2ClientMockCancelBundleTaskWithContext.RLock()
	calls = mock.calls.CancelBundleTaskWithContext
	lockec2ClientMockCancelBundleTaskWithContext.RUnlock()
	return calls
}

// CancelCapacityReservation calls CancelCapacityReservationFunc.
func (mock *ec2ClientMock) CancelCapacityReservation(in1 *ec2.CancelCapacityReservationInput) (*ec2.CancelCapacityReservationOutput, error) {
	if mock.CancelCapacityReservationFunc == nil {
		panic("ec2ClientMock.CancelCapacityReservationFunc: method is nil but ec2Client.CancelCapacityReservation was just called")
	}
	callInfo := struct {
		In1 *ec2.CancelCapacityReservationInput
	}{
		In1: in1,
	}
	lockec2ClientMockCancelCapacityReservation.Lock()
	mock.calls.CancelCapacityReservation = append(mock.calls.CancelCapacityReservation, callInfo)
	lockec2ClientMockCancelCapacityReservation.Unlock()
	return mock.CancelCapacityReservationFunc(in1)
}

// CancelCapacityReservationCalls gets all the calls that were made to CancelCapacityReservation.
// Check the length with:
//     len(mockedec2Client.CancelCapacityReservationCalls())
func (mock *ec2ClientMock) CancelCapacityReservationCalls() []struct {
	In1 *ec2.CancelCapacityReservationInput
} {
	var calls []struct {
		In1 *ec2.CancelCapacityReservationInput
	}
	lockec2ClientMockCancelCapacityReservation.RLock()
	calls = mock.calls.CancelCapacityReservation
	lockec2ClientMockCancelCapacityReservation.RUnlock()
	return calls
}

// CancelCapacityReservationRequest calls CancelCapacityReservationRequestFunc.
func (mock *ec2ClientMock) CancelCapacityReservationRequest(in1 *ec2.CancelCapacityReservationInput) (*request.Request, *ec2.CancelCapacityReservationOutput) {
	if mock.CancelCapacityReservationRequestFunc == nil {
		panic("ec2ClientMock.CancelCapacityReservationRequestFunc: method is nil but ec2Client.CancelCapacityReservationRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CancelCapacityReservationInput
	}{
		In1: in1,
	}
	lockec2ClientMockCancelCapacityReservationRequest.Lock()
	mock.calls.CancelCapacityReservationRequest = append(mock.calls.CancelCapacityReservationRequest, callInfo)
	lockec2ClientMockCancelCapacityReservationRequest.Unlock()
	return mock.CancelCapacityReservationRequestFunc(in1)
}

// CancelCapacityReservationRequestCalls gets all the calls that were made to CancelCapacityReservationRequest.
// Check the length with:
//     len(mockedec2Client.CancelCapacityReservationRequestCalls())
func (mock *ec2ClientMock) CancelCapacityReservationRequestCalls() []struct {
	In1 *ec2.CancelCapacityReservationInput
} {
	var calls []struct {
		In1 *ec2.CancelCapacityReservationInput
	}
	lockec2ClientMockCancelCapacityReservationRequest.RLock()
	calls = mock.calls.CancelCapacityReservationRequest
	lockec2ClientMockCancelCapacityReservationRequest.RUnlock()
	return calls
}

// CancelCapacityReservationWithContext calls CancelCapacityReservationWithContextFunc.
func (mock *ec2ClientMock) CancelCapacityReservationWithContext(in1 context.Context, in2 *ec2.CancelCapacityReservationInput, in3 ...request.Option) (*ec2.CancelCapacityReservationOutput, error) {
	if mock.CancelCapacityReservationWithContextFunc == nil {
		panic("ec2ClientMock.CancelCapacityReservationWithContextFunc: method is nil but ec2Client.CancelCapacityReservationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CancelCapacityReservationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCancelCapacityReservationWithContext.Lock()
	mock.calls.CancelCapacityReservationWithContext = append(mock.calls.CancelCapacityReservationWithContext, callInfo)
	lockec2ClientMockCancelCapacityReservationWithContext.Unlock()
	return mock.CancelCapacityReservationWithContextFunc(in1, in2, in3...)
}

// CancelCapacityReservationWithContextCalls gets all the calls that were made to CancelCapacityReservationWithContext.
// Check the length with:
//     len(mockedec2Client.CancelCapacityReservationWithContextCalls())
func (mock *ec2ClientMock) CancelCapacityReservationWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CancelCapacityReservationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CancelCapacityReservationInput
		In3 []request.Option
	}
	lockec2ClientMockCancelCapacityReservationWithContext.RLock()
	calls = mock.calls.CancelCapacityReservationWithContext
	lockec2ClientMockCancelCapacityReservationWithContext.RUnlock()
	return calls
}

// CancelConversionTask calls CancelConversionTaskFunc.
func (mock *ec2ClientMock) CancelConversionTask(in1 *ec2.CancelConversionTaskInput) (*ec2.CancelConversionTaskOutput, error) {
	if mock.CancelConversionTaskFunc == nil {
		panic("ec2ClientMock.CancelConversionTaskFunc: method is nil but ec2Client.CancelConversionTask was just called")
	}
	callInfo := struct {
		In1 *ec2.CancelConversionTaskInput
	}{
		In1: in1,
	}
	lockec2ClientMockCancelConversionTask.Lock()
	mock.calls.CancelConversionTask = append(mock.calls.CancelConversionTask, callInfo)
	lockec2ClientMockCancelConversionTask.Unlock()
	return mock.CancelConversionTaskFunc(in1)
}

// CancelConversionTaskCalls gets all the calls that were made to CancelConversionTask.
// Check the length with:
//     len(mockedec2Client.CancelConversionTaskCalls())
func (mock *ec2ClientMock) CancelConversionTaskCalls() []struct {
	In1 *ec2.CancelConversionTaskInput
} {
	var calls []struct {
		In1 *ec2.CancelConversionTaskInput
	}
	lockec2ClientMockCancelConversionTask.RLock()
	calls = mock.calls.CancelConversionTask
	lockec2ClientMockCancelConversionTask.RUnlock()
	return calls
}

// CancelConversionTaskRequest calls CancelConversionTaskRequestFunc.
func (mock *ec2ClientMock) CancelConversionTaskRequest(in1 *ec2.CancelConversionTaskInput) (*request.Request, *ec2.CancelConversionTaskOutput) {
	if mock.CancelConversionTaskRequestFunc == nil {
		panic("ec2ClientMock.CancelConversionTaskRequestFunc: method is nil but ec2Client.CancelConversionTaskRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CancelConversionTaskInput
	}{
		In1: in1,
	}
	lockec2ClientMockCancelConversionTaskRequest.Lock()
	mock.calls.CancelConversionTaskRequest = append(mock.calls.CancelConversionTaskRequest, callInfo)
	lockec2ClientMockCancelConversionTaskRequest.Unlock()
	return mock.CancelConversionTaskRequestFunc(in1)
}

// CancelConversionTaskRequestCalls gets all the calls that were made to CancelConversionTaskRequest.
// Check the length with:
//     len(mockedec2Client.CancelConversionTaskRequestCalls())
func (mock *ec2ClientMock) CancelConversionTaskRequestCalls() []struct {
	In1 *ec2.CancelConversionTaskInput
} {
	var calls []struct {
		In1 *ec2.CancelConversionTaskInput
	}
	lockec2ClientMockCancelConversionTaskRequest.RLock()
	calls = mock.calls.CancelConversionTaskRequest
	lockec2ClientMockCancelConversionTaskRequest.RUnlock()
	return calls
}

// CancelConversionTaskWithContext calls CancelConversionTaskWithContextFunc.
func (mock *ec2ClientMock) CancelConversionTaskWithContext(in1 context.Context, in2 *ec2.CancelConversionTaskInput, in3 ...request.Option) (*ec2.CancelConversionTaskOutput, error) {
	if mock.CancelConversionTaskWithContextFunc == nil {
		panic("ec2ClientMock.CancelConversionTaskWithContextFunc: method is nil but ec2Client.CancelConversionTaskWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CancelConversionTaskInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCancelConversionTaskWithContext.Lock()
	mock.calls.CancelConversionTaskWithContext = append(mock.calls.CancelConversionTaskWithContext, callInfo)
	lockec2ClientMockCancelConversionTaskWithContext.Unlock()
	return mock.CancelConversionTaskWithContextFunc(in1, in2, in3...)
}

// CancelConversionTaskWithContextCalls gets all the calls that were made to CancelConversionTaskWithContext.
// Check the length with:
//     len(mockedec2Client.CancelConversionTaskWithContextCalls())
func (mock *ec2ClientMock) CancelConversionTaskWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CancelConversionTaskInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CancelConversionTaskInput
		In3 []request.Option
	}
	lockec2ClientMockCancelConversionTaskWithContext.RLock()
	calls = mock.calls.CancelConversionTaskWithContext
	lockec2ClientMockCancelConversionTaskWithContext.RUnlock()
	return calls
}

// CancelExportTask calls CancelExportTaskFunc.
func (mock *ec2ClientMock) CancelExportTask(in1 *ec2.CancelExportTaskInput) (*ec2.CancelExportTaskOutput, error) {
	if mock.CancelExportTaskFunc == nil {
		panic("ec2ClientMock.CancelExportTaskFunc: method is nil but ec2Client.CancelExportTask was just called")
	}
	callInfo := struct {
		In1 *ec2.CancelExportTaskInput
	}{
		In1: in1,
	}
	lockec2ClientMockCancelExportTask.Lock()
	mock.calls.CancelExportTask = append(mock.calls.CancelExportTask, callInfo)
	lockec2ClientMockCancelExportTask.Unlock()
	return mock.CancelExportTaskFunc(in1)
}

// CancelExportTaskCalls gets all the calls that were made to CancelExportTask.
// Check the length with:
//     len(mockedec2Client.CancelExportTaskCalls())
func (mock *ec2ClientMock) CancelExportTaskCalls() []struct {
	In1 *ec2.CancelExportTaskInput
} {
	var calls []struct {
		In1 *ec2.CancelExportTaskInput
	}
	lockec2ClientMockCancelExportTask.RLock()
	calls = mock.calls.CancelExportTask
	lockec2ClientMockCancelExportTask.RUnlock()
	return calls
}

// CancelExportTaskRequest calls CancelExportTaskRequestFunc.
func (mock *ec2ClientMock) CancelExportTaskRequest(in1 *ec2.CancelExportTaskInput) (*request.Request, *ec2.CancelExportTaskOutput) {
	if mock.CancelExportTaskRequestFunc == nil {
		panic("ec2ClientMock.CancelExportTaskRequestFunc: method is nil but ec2Client.CancelExportTaskRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CancelExportTaskInput
	}{
		In1: in1,
	}
	lockec2ClientMockCancelExportTaskRequest.Lock()
	mock.calls.CancelExportTaskRequest = append(mock.calls.CancelExportTaskRequest, callInfo)
	lockec2ClientMockCancelExportTaskRequest.Unlock()
	return mock.CancelExportTaskRequestFunc(in1)
}

// CancelExportTaskRequestCalls gets all the calls that were made to CancelExportTaskRequest.
// Check the length with:
//     len(mockedec2Client.CancelExportTaskRequestCalls())
func (mock *ec2ClientMock) CancelExportTaskRequestCalls() []struct {
	In1 *ec2.CancelExportTaskInput
} {
	var calls []struct {
		In1 *ec2.CancelExportTaskInput
	}
	lockec2ClientMockCancelExportTaskRequest.RLock()
	calls = mock.calls.CancelExportTaskRequest
	lockec2ClientMockCancelExportTaskRequest.RUnlock()
	return calls
}

// CancelExportTaskWithContext calls CancelExportTaskWithContextFunc.
func (mock *ec2ClientMock) CancelExportTaskWithContext(in1 context.Context, in2 *ec2.CancelExportTaskInput, in3 ...request.Option) (*ec2.CancelExportTaskOutput, error) {
	if mock.CancelExportTaskWithContextFunc == nil {
		panic("ec2ClientMock.CancelExportTaskWithContextFunc: method is nil but ec2Client.CancelExportTaskWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CancelExportTaskInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCancelExportTaskWithContext.Lock()
	mock.calls.CancelExportTaskWithContext = append(mock.calls.CancelExportTaskWithContext, callInfo)
	lockec2ClientMockCancelExportTaskWithContext.Unlock()
	return mock.CancelExportTaskWithContextFunc(in1, in2, in3...)
}

// CancelExportTaskWithContextCalls gets all the calls that were made to CancelExportTaskWithContext.
// Check the length with:
//     len(mockedec2Client.CancelExportTaskWithContextCalls())
func (mock *ec2ClientMock) CancelExportTaskWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CancelExportTaskInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CancelExportTaskInput
		In3 []request.Option
	}
	lockec2ClientMockCancelExportTaskWithContext.RLock()
	calls = mock.calls.CancelExportTaskWithContext
	lockec2ClientMockCancelExportTaskWithContext.RUnlock()
	return calls
}

// CancelImportTask calls CancelImportTaskFunc.
func (mock *ec2ClientMock) CancelImportTask(in1 *ec2.CancelImportTaskInput) (*ec2.CancelImportTaskOutput, error) {
	if mock.CancelImportTaskFunc == nil {
		panic("ec2ClientMock.CancelImportTaskFunc: method is nil but ec2Client.CancelImportTask was just called")
	}
	callInfo := struct {
		In1 *ec2.CancelImportTaskInput
	}{
		In1: in1,
	}
	lockec2ClientMockCancelImportTask.Lock()
	mock.calls.CancelImportTask = append(mock.calls.CancelImportTask, callInfo)
	lockec2ClientMockCancelImportTask.Unlock()
	return mock.CancelImportTaskFunc(in1)
}

// CancelImportTaskCalls gets all the calls that were made to CancelImportTask.
// Check the length with:
//     len(mockedec2Client.CancelImportTaskCalls())
func (mock *ec2ClientMock) CancelImportTaskCalls() []struct {
	In1 *ec2.CancelImportTaskInput
} {
	var calls []struct {
		In1 *ec2.CancelImportTaskInput
	}
	lockec2ClientMockCancelImportTask.RLock()
	calls = mock.calls.CancelImportTask
	lockec2ClientMockCancelImportTask.RUnlock()
	return calls
}

// CancelImportTaskRequest calls CancelImportTaskRequestFunc.
func (mock *ec2ClientMock) CancelImportTaskRequest(in1 *ec2.CancelImportTaskInput) (*request.Request, *ec2.CancelImportTaskOutput) {
	if mock.CancelImportTaskRequestFunc == nil {
		panic("ec2ClientMock.CancelImportTaskRequestFunc: method is nil but ec2Client.CancelImportTaskRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CancelImportTaskInput
	}{
		In1: in1,
	}
	lockec2ClientMockCancelImportTaskRequest.Lock()
	mock.calls.CancelImportTaskRequest = append(mock.calls.CancelImportTaskRequest, callInfo)
	lockec2ClientMockCancelImportTaskRequest.Unlock()
	return mock.CancelImportTaskRequestFunc(in1)
}

// CancelImportTaskRequestCalls gets all the calls that were made to CancelImportTaskRequest.
// Check the length with:
//     len(mockedec2Client.CancelImportTaskRequestCalls())
func (mock *ec2ClientMock) CancelImportTaskRequestCalls() []struct {
	In1 *ec2.CancelImportTaskInput
} {
	var calls []struct {
		In1 *ec2.CancelImportTaskInput
	}
	lockec2ClientMockCancelImportTaskRequest.RLock()
	calls = mock.calls.CancelImportTaskRequest
	lockec2ClientMockCancelImportTaskRequest.RUnlock()
	return calls
}

// CancelImportTaskWithContext calls CancelImportTaskWithContextFunc.
func (mock *ec2ClientMock) CancelImportTaskWithContext(in1 context.Context, in2 *ec2.CancelImportTaskInput, in3 ...request.Option) (*ec2.CancelImportTaskOutput, error) {
	if mock.CancelImportTaskWithContextFunc == nil {
		panic("ec2ClientMock.CancelImportTaskWithContextFunc: method is nil but ec2Client.CancelImportTaskWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CancelImportTaskInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCancelImportTaskWithContext.Lock()
	mock.calls.CancelImportTaskWithContext = append(mock.calls.CancelImportTaskWithContext, callInfo)
	lockec2ClientMockCancelImportTaskWithContext.Unlock()
	return mock.CancelImportTaskWithContextFunc(in1, in2, in3...)
}

// CancelImportTaskWithContextCalls gets all the calls that were made to CancelImportTaskWithContext.
// Check the length with:
//     len(mockedec2Client.CancelImportTaskWithContextCalls())
func (mock *ec2ClientMock) CancelImportTaskWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CancelImportTaskInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CancelImportTaskInput
		In3 []request.Option
	}
	lockec2ClientMockCancelImportTaskWithContext.RLock()
	calls = mock.calls.CancelImportTaskWithContext
	lockec2ClientMockCancelImportTaskWithContext.RUnlock()
	return calls
}

// CancelReservedInstancesListing calls CancelReservedInstancesListingFunc.
func (mock *ec2ClientMock) CancelReservedInstancesListing(in1 *ec2.CancelReservedInstancesListingInput) (*ec2.CancelReservedInstancesListingOutput, error) {
	if mock.CancelReservedInstancesListingFunc == nil {
		panic("ec2ClientMock.CancelReservedInstancesListingFunc: method is nil but ec2Client.CancelReservedInstancesListing was just called")
	}
	callInfo := struct {
		In1 *ec2.CancelReservedInstancesListingInput
	}{
		In1: in1,
	}
	lockec2ClientMockCancelReservedInstancesListing.Lock()
	mock.calls.CancelReservedInstancesListing = append(mock.calls.CancelReservedInstancesListing, callInfo)
	lockec2ClientMockCancelReservedInstancesListing.Unlock()
	return mock.CancelReservedInstancesListingFunc(in1)
}

// CancelReservedInstancesListingCalls gets all the calls that were made to CancelReservedInstancesListing.
// Check the length with:
//     len(mockedec2Client.CancelReservedInstancesListingCalls())
func (mock *ec2ClientMock) CancelReservedInstancesListingCalls() []struct {
	In1 *ec2.CancelReservedInstancesListingInput
} {
	var calls []struct {
		In1 *ec2.CancelReservedInstancesListingInput
	}
	lockec2ClientMockCancelReservedInstancesListing.RLock()
	calls = mock.calls.CancelReservedInstancesListing
	lockec2ClientMockCancelReservedInstancesListing.RUnlock()
	return calls
}

// CancelReservedInstancesListingRequest calls CancelReservedInstancesListingRequestFunc.
func (mock *ec2ClientMock) CancelReservedInstancesListingRequest(in1 *ec2.CancelReservedInstancesListingInput) (*request.Request, *ec2.CancelReservedInstancesListingOutput) {
	if mock.CancelReservedInstancesListingRequestFunc == nil {
		panic("ec2ClientMock.CancelReservedInstancesListingRequestFunc: method is nil but ec2Client.CancelReservedInstancesListingRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CancelReservedInstancesListingInput
	}{
		In1: in1,
	}
	lockec2ClientMockCancelReservedInstancesListingRequest.Lock()
	mock.calls.CancelReservedInstancesListingRequest = append(mock.calls.CancelReservedInstancesListingRequest, callInfo)
	lockec2ClientMockCancelReservedInstancesListingRequest.Unlock()
	return mock.CancelReservedInstancesListingRequestFunc(in1)
}

// CancelReservedInstancesListingRequestCalls gets all the calls that were made to CancelReservedInstancesListingRequest.
// Check the length with:
//     len(mockedec2Client.CancelReservedInstancesListingRequestCalls())
func (mock *ec2ClientMock) CancelReservedInstancesListingRequestCalls() []struct {
	In1 *ec2.CancelReservedInstancesListingInput
} {
	var calls []struct {
		In1 *ec2.CancelReservedInstancesListingInput
	}
	lockec2ClientMockCancelReservedInstancesListingRequest.RLock()
	calls = mock.calls.CancelReservedInstancesListingRequest
	lockec2ClientMockCancelReservedInstancesListingRequest.RUnlock()
	return calls
}

// CancelReservedInstancesListingWithContext calls CancelReservedInstancesListingWithContextFunc.
func (mock *ec2ClientMock) CancelReservedInstancesListingWithContext(in1 context.Context, in2 *ec2.CancelReservedInstancesListingInput, in3 ...request.Option) (*ec2.CancelReservedInstancesListingOutput, error) {
	if mock.CancelReservedInstancesListingWithContextFunc == nil {
		panic("ec2ClientMock.CancelReservedInstancesListingWithContextFunc: method is nil but ec2Client.CancelReservedInstancesListingWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CancelReservedInstancesListingInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCancelReservedInstancesListingWithContext.Lock()
	mock.calls.CancelReservedInstancesListingWithContext = append(mock.calls.CancelReservedInstancesListingWithContext, callInfo)
	lockec2ClientMockCancelReservedInstancesListingWithContext.Unlock()
	return mock.CancelReservedInstancesListingWithContextFunc(in1, in2, in3...)
}

// CancelReservedInstancesListingWithContextCalls gets all the calls that were made to CancelReservedInstancesListingWithContext.
// Check the length with:
//     len(mockedec2Client.CancelReservedInstancesListingWithContextCalls())
func (mock *ec2ClientMock) CancelReservedInstancesListingWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CancelReservedInstancesListingInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CancelReservedInstancesListingInput
		In3 []request.Option
	}
	lockec2ClientMockCancelReservedInstancesListingWithContext.RLock()
	calls = mock.calls.CancelReservedInstancesListingWithContext
	lockec2ClientMockCancelReservedInstancesListingWithContext.RUnlock()
	return calls
}

// CancelSpotFleetRequests calls CancelSpotFleetRequestsFunc.
func (mock *ec2ClientMock) CancelSpotFleetRequests(in1 *ec2.CancelSpotFleetRequestsInput) (*ec2.CancelSpotFleetRequestsOutput, error) {
	if mock.CancelSpotFleetRequestsFunc == nil {
		panic("ec2ClientMock.CancelSpotFleetRequestsFunc: method is nil but ec2Client.CancelSpotFleetRequests was just called")
	}
	callInfo := struct {
		In1 *ec2.CancelSpotFleetRequestsInput
	}{
		In1: in1,
	}
	lockec2ClientMockCancelSpotFleetRequests.Lock()
	mock.calls.CancelSpotFleetRequests = append(mock.calls.CancelSpotFleetRequests, callInfo)
	lockec2ClientMockCancelSpotFleetRequests.Unlock()
	return mock.CancelSpotFleetRequestsFunc(in1)
}

// CancelSpotFleetRequestsCalls gets all the calls that were made to CancelSpotFleetRequests.
// Check the length with:
//     len(mockedec2Client.CancelSpotFleetRequestsCalls())
func (mock *ec2ClientMock) CancelSpotFleetRequestsCalls() []struct {
	In1 *ec2.CancelSpotFleetRequestsInput
} {
	var calls []struct {
		In1 *ec2.CancelSpotFleetRequestsInput
	}
	lockec2ClientMockCancelSpotFleetRequests.RLock()
	calls = mock.calls.CancelSpotFleetRequests
	lockec2ClientMockCancelSpotFleetRequests.RUnlock()
	return calls
}

// CancelSpotFleetRequestsRequest calls CancelSpotFleetRequestsRequestFunc.
func (mock *ec2ClientMock) CancelSpotFleetRequestsRequest(in1 *ec2.CancelSpotFleetRequestsInput) (*request.Request, *ec2.CancelSpotFleetRequestsOutput) {
	if mock.CancelSpotFleetRequestsRequestFunc == nil {
		panic("ec2ClientMock.CancelSpotFleetRequestsRequestFunc: method is nil but ec2Client.CancelSpotFleetRequestsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CancelSpotFleetRequestsInput
	}{
		In1: in1,
	}
	lockec2ClientMockCancelSpotFleetRequestsRequest.Lock()
	mock.calls.CancelSpotFleetRequestsRequest = append(mock.calls.CancelSpotFleetRequestsRequest, callInfo)
	lockec2ClientMockCancelSpotFleetRequestsRequest.Unlock()
	return mock.CancelSpotFleetRequestsRequestFunc(in1)
}

// CancelSpotFleetRequestsRequestCalls gets all the calls that were made to CancelSpotFleetRequestsRequest.
// Check the length with:
//     len(mockedec2Client.CancelSpotFleetRequestsRequestCalls())
func (mock *ec2ClientMock) CancelSpotFleetRequestsRequestCalls() []struct {
	In1 *ec2.CancelSpotFleetRequestsInput
} {
	var calls []struct {
		In1 *ec2.CancelSpotFleetRequestsInput
	}
	lockec2ClientMockCancelSpotFleetRequestsRequest.RLock()
	calls = mock.calls.CancelSpotFleetRequestsRequest
	lockec2ClientMockCancelSpotFleetRequestsRequest.RUnlock()
	return calls
}

// CancelSpotFleetRequestsWithContext calls CancelSpotFleetRequestsWithContextFunc.
func (mock *ec2ClientMock) CancelSpotFleetRequestsWithContext(in1 context.Context, in2 *ec2.CancelSpotFleetRequestsInput, in3 ...request.Option) (*ec2.CancelSpotFleetRequestsOutput, error) {
	if mock.CancelSpotFleetRequestsWithContextFunc == nil {
		panic("ec2ClientMock.CancelSpotFleetRequestsWithContextFunc: method is nil but ec2Client.CancelSpotFleetRequestsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CancelSpotFleetRequestsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCancelSpotFleetRequestsWithContext.Lock()
	mock.calls.CancelSpotFleetRequestsWithContext = append(mock.calls.CancelSpotFleetRequestsWithContext, callInfo)
	lockec2ClientMockCancelSpotFleetRequestsWithContext.Unlock()
	return mock.CancelSpotFleetRequestsWithContextFunc(in1, in2, in3...)
}

// CancelSpotFleetRequestsWithContextCalls gets all the calls that were made to CancelSpotFleetRequestsWithContext.
// Check the length with:
//     len(mockedec2Client.CancelSpotFleetRequestsWithContextCalls())
func (mock *ec2ClientMock) CancelSpotFleetRequestsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CancelSpotFleetRequestsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CancelSpotFleetRequestsInput
		In3 []request.Option
	}
	lockec2ClientMockCancelSpotFleetRequestsWithContext.RLock()
	calls = mock.calls.CancelSpotFleetRequestsWithContext
	lockec2ClientMockCancelSpotFleetRequestsWithContext.RUnlock()
	return calls
}

// CancelSpotInstanceRequests calls CancelSpotInstanceRequestsFunc.
func (mock *ec2ClientMock) CancelSpotInstanceRequests(in1 *ec2.CancelSpotInstanceRequestsInput) (*ec2.CancelSpotInstanceRequestsOutput, error) {
	if mock.CancelSpotInstanceRequestsFunc == nil {
		panic("ec2ClientMock.CancelSpotInstanceRequestsFunc: method is nil but ec2Client.CancelSpotInstanceRequests was just called")
	}
	callInfo := struct {
		In1 *ec2.CancelSpotInstanceRequestsInput
	}{
		In1: in1,
	}
	lockec2ClientMockCancelSpotInstanceRequests.Lock()
	mock.calls.CancelSpotInstanceRequests = append(mock.calls.CancelSpotInstanceRequests, callInfo)
	lockec2ClientMockCancelSpotInstanceRequests.Unlock()
	return mock.CancelSpotInstanceRequestsFunc(in1)
}

// CancelSpotInstanceRequestsCalls gets all the calls that were made to CancelSpotInstanceRequests.
// Check the length with:
//     len(mockedec2Client.CancelSpotInstanceRequestsCalls())
func (mock *ec2ClientMock) CancelSpotInstanceRequestsCalls() []struct {
	In1 *ec2.CancelSpotInstanceRequestsInput
} {
	var calls []struct {
		In1 *ec2.CancelSpotInstanceRequestsInput
	}
	lockec2ClientMockCancelSpotInstanceRequests.RLock()
	calls = mock.calls.CancelSpotInstanceRequests
	lockec2ClientMockCancelSpotInstanceRequests.RUnlock()
	return calls
}

// CancelSpotInstanceRequestsRequest calls CancelSpotInstanceRequestsRequestFunc.
func (mock *ec2ClientMock) CancelSpotInstanceRequestsRequest(in1 *ec2.CancelSpotInstanceRequestsInput) (*request.Request, *ec2.CancelSpotInstanceRequestsOutput) {
	if mock.CancelSpotInstanceRequestsRequestFunc == nil {
		panic("ec2ClientMock.CancelSpotInstanceRequestsRequestFunc: method is nil but ec2Client.CancelSpotInstanceRequestsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CancelSpotInstanceRequestsInput
	}{
		In1: in1,
	}
	lockec2ClientMockCancelSpotInstanceRequestsRequest.Lock()
	mock.calls.CancelSpotInstanceRequestsRequest = append(mock.calls.CancelSpotInstanceRequestsRequest, callInfo)
	lockec2ClientMockCancelSpotInstanceRequestsRequest.Unlock()
	return mock.CancelSpotInstanceRequestsRequestFunc(in1)
}

// CancelSpotInstanceRequestsRequestCalls gets all the calls that were made to CancelSpotInstanceRequestsRequest.
// Check the length with:
//     len(mockedec2Client.CancelSpotInstanceRequestsRequestCalls())
func (mock *ec2ClientMock) CancelSpotInstanceRequestsRequestCalls() []struct {
	In1 *ec2.CancelSpotInstanceRequestsInput
} {
	var calls []struct {
		In1 *ec2.CancelSpotInstanceRequestsInput
	}
	lockec2ClientMockCancelSpotInstanceRequestsRequest.RLock()
	calls = mock.calls.CancelSpotInstanceRequestsRequest
	lockec2ClientMockCancelSpotInstanceRequestsRequest.RUnlock()
	return calls
}

// CancelSpotInstanceRequestsWithContext calls CancelSpotInstanceRequestsWithContextFunc.
func (mock *ec2ClientMock) CancelSpotInstanceRequestsWithContext(in1 context.Context, in2 *ec2.CancelSpotInstanceRequestsInput, in3 ...request.Option) (*ec2.CancelSpotInstanceRequestsOutput, error) {
	if mock.CancelSpotInstanceRequestsWithContextFunc == nil {
		panic("ec2ClientMock.CancelSpotInstanceRequestsWithContextFunc: method is nil but ec2Client.CancelSpotInstanceRequestsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CancelSpotInstanceRequestsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCancelSpotInstanceRequestsWithContext.Lock()
	mock.calls.CancelSpotInstanceRequestsWithContext = append(mock.calls.CancelSpotInstanceRequestsWithContext, callInfo)
	lockec2ClientMockCancelSpotInstanceRequestsWithContext.Unlock()
	return mock.CancelSpotInstanceRequestsWithContextFunc(in1, in2, in3...)
}

// CancelSpotInstanceRequestsWithContextCalls gets all the calls that were made to CancelSpotInstanceRequestsWithContext.
// Check the length with:
//     len(mockedec2Client.CancelSpotInstanceRequestsWithContextCalls())
func (mock *ec2ClientMock) CancelSpotInstanceRequestsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CancelSpotInstanceRequestsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CancelSpotInstanceRequestsInput
		In3 []request.Option
	}
	lockec2ClientMockCancelSpotInstanceRequestsWithContext.RLock()
	calls = mock.calls.CancelSpotInstanceRequestsWithContext
	lockec2ClientMockCancelSpotInstanceRequestsWithContext.RUnlock()
	return calls
}

// ConfirmProductInstance calls ConfirmProductInstanceFunc.
func (mock *ec2ClientMock) ConfirmProductInstance(in1 *ec2.ConfirmProductInstanceInput) (*ec2.ConfirmProductInstanceOutput, error) {
	if mock.ConfirmProductInstanceFunc == nil {
		panic("ec2ClientMock.ConfirmProductInstanceFunc: method is nil but ec2Client.ConfirmProductInstance was just called")
	}
	callInfo := struct {
		In1 *ec2.ConfirmProductInstanceInput
	}{
		In1: in1,
	}
	lockec2ClientMockConfirmProductInstance.Lock()
	mock.calls.ConfirmProductInstance = append(mock.calls.ConfirmProductInstance, callInfo)
	lockec2ClientMockConfirmProductInstance.Unlock()
	return mock.ConfirmProductInstanceFunc(in1)
}

// ConfirmProductInstanceCalls gets all the calls that were made to ConfirmProductInstance.
// Check the length with:
//     len(mockedec2Client.ConfirmProductInstanceCalls())
func (mock *ec2ClientMock) ConfirmProductInstanceCalls() []struct {
	In1 *ec2.ConfirmProductInstanceInput
} {
	var calls []struct {
		In1 *ec2.ConfirmProductInstanceInput
	}
	lockec2ClientMockConfirmProductInstance.RLock()
	calls = mock.calls.ConfirmProductInstance
	lockec2ClientMockConfirmProductInstance.RUnlock()
	return calls
}

// ConfirmProductInstanceRequest calls ConfirmProductInstanceRequestFunc.
func (mock *ec2ClientMock) ConfirmProductInstanceRequest(in1 *ec2.ConfirmProductInstanceInput) (*request.Request, *ec2.ConfirmProductInstanceOutput) {
	if mock.ConfirmProductInstanceRequestFunc == nil {
		panic("ec2ClientMock.ConfirmProductInstanceRequestFunc: method is nil but ec2Client.ConfirmProductInstanceRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ConfirmProductInstanceInput
	}{
		In1: in1,
	}
	lockec2ClientMockConfirmProductInstanceRequest.Lock()
	mock.calls.ConfirmProductInstanceRequest = append(mock.calls.ConfirmProductInstanceRequest, callInfo)
	lockec2ClientMockConfirmProductInstanceRequest.Unlock()
	return mock.ConfirmProductInstanceRequestFunc(in1)
}

// ConfirmProductInstanceRequestCalls gets all the calls that were made to ConfirmProductInstanceRequest.
// Check the length with:
//     len(mockedec2Client.ConfirmProductInstanceRequestCalls())
func (mock *ec2ClientMock) ConfirmProductInstanceRequestCalls() []struct {
	In1 *ec2.ConfirmProductInstanceInput
} {
	var calls []struct {
		In1 *ec2.ConfirmProductInstanceInput
	}
	lockec2ClientMockConfirmProductInstanceRequest.RLock()
	calls = mock.calls.ConfirmProductInstanceRequest
	lockec2ClientMockConfirmProductInstanceRequest.RUnlock()
	return calls
}

// ConfirmProductInstanceWithContext calls ConfirmProductInstanceWithContextFunc.
func (mock *ec2ClientMock) ConfirmProductInstanceWithContext(in1 context.Context, in2 *ec2.ConfirmProductInstanceInput, in3 ...request.Option) (*ec2.ConfirmProductInstanceOutput, error) {
	if mock.ConfirmProductInstanceWithContextFunc == nil {
		panic("ec2ClientMock.ConfirmProductInstanceWithContextFunc: method is nil but ec2Client.ConfirmProductInstanceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ConfirmProductInstanceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockConfirmProductInstanceWithContext.Lock()
	mock.calls.ConfirmProductInstanceWithContext = append(mock.calls.ConfirmProductInstanceWithContext, callInfo)
	lockec2ClientMockConfirmProductInstanceWithContext.Unlock()
	return mock.ConfirmProductInstanceWithContextFunc(in1, in2, in3...)
}

// ConfirmProductInstanceWithContextCalls gets all the calls that were made to ConfirmProductInstanceWithContext.
// Check the length with:
//     len(mockedec2Client.ConfirmProductInstanceWithContextCalls())
func (mock *ec2ClientMock) ConfirmProductInstanceWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ConfirmProductInstanceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ConfirmProductInstanceInput
		In3 []request.Option
	}
	lockec2ClientMockConfirmProductInstanceWithContext.RLock()
	calls = mock.calls.ConfirmProductInstanceWithContext
	lockec2ClientMockConfirmProductInstanceWithContext.RUnlock()
	return calls
}

// CopyFpgaImage calls CopyFpgaImageFunc.
func (mock *ec2ClientMock) CopyFpgaImage(in1 *ec2.CopyFpgaImageInput) (*ec2.CopyFpgaImageOutput, error) {
	if mock.CopyFpgaImageFunc == nil {
		panic("ec2ClientMock.CopyFpgaImageFunc: method is nil but ec2Client.CopyFpgaImage was just called")
	}
	callInfo := struct {
		In1 *ec2.CopyFpgaImageInput
	}{
		In1: in1,
	}
	lockec2ClientMockCopyFpgaImage.Lock()
	mock.calls.CopyFpgaImage = append(mock.calls.CopyFpgaImage, callInfo)
	lockec2ClientMockCopyFpgaImage.Unlock()
	return mock.CopyFpgaImageFunc(in1)
}

// CopyFpgaImageCalls gets all the calls that were made to CopyFpgaImage.
// Check the length with:
//     len(mockedec2Client.CopyFpgaImageCalls())
func (mock *ec2ClientMock) CopyFpgaImageCalls() []struct {
	In1 *ec2.CopyFpgaImageInput
} {
	var calls []struct {
		In1 *ec2.CopyFpgaImageInput
	}
	lockec2ClientMockCopyFpgaImage.RLock()
	calls = mock.calls.CopyFpgaImage
	lockec2ClientMockCopyFpgaImage.RUnlock()
	return calls
}

// CopyFpgaImageRequest calls CopyFpgaImageRequestFunc.
func (mock *ec2ClientMock) CopyFpgaImageRequest(in1 *ec2.CopyFpgaImageInput) (*request.Request, *ec2.CopyFpgaImageOutput) {
	if mock.CopyFpgaImageRequestFunc == nil {
		panic("ec2ClientMock.CopyFpgaImageRequestFunc: method is nil but ec2Client.CopyFpgaImageRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CopyFpgaImageInput
	}{
		In1: in1,
	}
	lockec2ClientMockCopyFpgaImageRequest.Lock()
	mock.calls.CopyFpgaImageRequest = append(mock.calls.CopyFpgaImageRequest, callInfo)
	lockec2ClientMockCopyFpgaImageRequest.Unlock()
	return mock.CopyFpgaImageRequestFunc(in1)
}

// CopyFpgaImageRequestCalls gets all the calls that were made to CopyFpgaImageRequest.
// Check the length with:
//     len(mockedec2Client.CopyFpgaImageRequestCalls())
func (mock *ec2ClientMock) CopyFpgaImageRequestCalls() []struct {
	In1 *ec2.CopyFpgaImageInput
} {
	var calls []struct {
		In1 *ec2.CopyFpgaImageInput
	}
	lockec2ClientMockCopyFpgaImageRequest.RLock()
	calls = mock.calls.CopyFpgaImageRequest
	lockec2ClientMockCopyFpgaImageRequest.RUnlock()
	return calls
}

// CopyFpgaImageWithContext calls CopyFpgaImageWithContextFunc.
func (mock *ec2ClientMock) CopyFpgaImageWithContext(in1 context.Context, in2 *ec2.CopyFpgaImageInput, in3 ...request.Option) (*ec2.CopyFpgaImageOutput, error) {
	if mock.CopyFpgaImageWithContextFunc == nil {
		panic("ec2ClientMock.CopyFpgaImageWithContextFunc: method is nil but ec2Client.CopyFpgaImageWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CopyFpgaImageInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCopyFpgaImageWithContext.Lock()
	mock.calls.CopyFpgaImageWithContext = append(mock.calls.CopyFpgaImageWithContext, callInfo)
	lockec2ClientMockCopyFpgaImageWithContext.Unlock()
	return mock.CopyFpgaImageWithContextFunc(in1, in2, in3...)
}

// CopyFpgaImageWithContextCalls gets all the calls that were made to CopyFpgaImageWithContext.
// Check the length with:
//     len(mockedec2Client.CopyFpgaImageWithContextCalls())
func (mock *ec2ClientMock) CopyFpgaImageWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CopyFpgaImageInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CopyFpgaImageInput
		In3 []request.Option
	}
	lockec2ClientMockCopyFpgaImageWithContext.RLock()
	calls = mock.calls.CopyFpgaImageWithContext
	lockec2ClientMockCopyFpgaImageWithContext.RUnlock()
	return calls
}

// CopyImage calls CopyImageFunc.
func (mock *ec2ClientMock) CopyImage(in1 *ec2.CopyImageInput) (*ec2.CopyImageOutput, error) {
	if mock.CopyImageFunc == nil {
		panic("ec2ClientMock.CopyImageFunc: method is nil but ec2Client.CopyImage was just called")
	}
	callInfo := struct {
		In1 *ec2.CopyImageInput
	}{
		In1: in1,
	}
	lockec2ClientMockCopyImage.Lock()
	mock.calls.CopyImage = append(mock.calls.CopyImage, callInfo)
	lockec2ClientMockCopyImage.Unlock()
	return mock.CopyImageFunc(in1)
}

// CopyImageCalls gets all the calls that were made to CopyImage.
// Check the length with:
//     len(mockedec2Client.CopyImageCalls())
func (mock *ec2ClientMock) CopyImageCalls() []struct {
	In1 *ec2.CopyImageInput
} {
	var calls []struct {
		In1 *ec2.CopyImageInput
	}
	lockec2ClientMockCopyImage.RLock()
	calls = mock.calls.CopyImage
	lockec2ClientMockCopyImage.RUnlock()
	return calls
}

// CopyImageRequest calls CopyImageRequestFunc.
func (mock *ec2ClientMock) CopyImageRequest(in1 *ec2.CopyImageInput) (*request.Request, *ec2.CopyImageOutput) {
	if mock.CopyImageRequestFunc == nil {
		panic("ec2ClientMock.CopyImageRequestFunc: method is nil but ec2Client.CopyImageRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CopyImageInput
	}{
		In1: in1,
	}
	lockec2ClientMockCopyImageRequest.Lock()
	mock.calls.CopyImageRequest = append(mock.calls.CopyImageRequest, callInfo)
	lockec2ClientMockCopyImageRequest.Unlock()
	return mock.CopyImageRequestFunc(in1)
}

// CopyImageRequestCalls gets all the calls that were made to CopyImageRequest.
// Check the length with:
//     len(mockedec2Client.CopyImageRequestCalls())
func (mock *ec2ClientMock) CopyImageRequestCalls() []struct {
	In1 *ec2.CopyImageInput
} {
	var calls []struct {
		In1 *ec2.CopyImageInput
	}
	lockec2ClientMockCopyImageRequest.RLock()
	calls = mock.calls.CopyImageRequest
	lockec2ClientMockCopyImageRequest.RUnlock()
	return calls
}

// CopyImageWithContext calls CopyImageWithContextFunc.
func (mock *ec2ClientMock) CopyImageWithContext(in1 context.Context, in2 *ec2.CopyImageInput, in3 ...request.Option) (*ec2.CopyImageOutput, error) {
	if mock.CopyImageWithContextFunc == nil {
		panic("ec2ClientMock.CopyImageWithContextFunc: method is nil but ec2Client.CopyImageWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CopyImageInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCopyImageWithContext.Lock()
	mock.calls.CopyImageWithContext = append(mock.calls.CopyImageWithContext, callInfo)
	lockec2ClientMockCopyImageWithContext.Unlock()
	return mock.CopyImageWithContextFunc(in1, in2, in3...)
}

// CopyImageWithContextCalls gets all the calls that were made to CopyImageWithContext.
// Check the length with:
//     len(mockedec2Client.CopyImageWithContextCalls())
func (mock *ec2ClientMock) CopyImageWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CopyImageInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CopyImageInput
		In3 []request.Option
	}
	lockec2ClientMockCopyImageWithContext.RLock()
	calls = mock.calls.CopyImageWithContext
	lockec2ClientMockCopyImageWithContext.RUnlock()
	return calls
}

// CopySnapshot calls CopySnapshotFunc.
func (mock *ec2ClientMock) CopySnapshot(in1 *ec2.CopySnapshotInput) (*ec2.CopySnapshotOutput, error) {
	if mock.CopySnapshotFunc == nil {
		panic("ec2ClientMock.CopySnapshotFunc: method is nil but ec2Client.CopySnapshot was just called")
	}
	callInfo := struct {
		In1 *ec2.CopySnapshotInput
	}{
		In1: in1,
	}
	lockec2ClientMockCopySnapshot.Lock()
	mock.calls.CopySnapshot = append(mock.calls.CopySnapshot, callInfo)
	lockec2ClientMockCopySnapshot.Unlock()
	return mock.CopySnapshotFunc(in1)
}

// CopySnapshotCalls gets all the calls that were made to CopySnapshot.
// Check the length with:
//     len(mockedec2Client.CopySnapshotCalls())
func (mock *ec2ClientMock) CopySnapshotCalls() []struct {
	In1 *ec2.CopySnapshotInput
} {
	var calls []struct {
		In1 *ec2.CopySnapshotInput
	}
	lockec2ClientMockCopySnapshot.RLock()
	calls = mock.calls.CopySnapshot
	lockec2ClientMockCopySnapshot.RUnlock()
	return calls
}

// CopySnapshotRequest calls CopySnapshotRequestFunc.
func (mock *ec2ClientMock) CopySnapshotRequest(in1 *ec2.CopySnapshotInput) (*request.Request, *ec2.CopySnapshotOutput) {
	if mock.CopySnapshotRequestFunc == nil {
		panic("ec2ClientMock.CopySnapshotRequestFunc: method is nil but ec2Client.CopySnapshotRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CopySnapshotInput
	}{
		In1: in1,
	}
	lockec2ClientMockCopySnapshotRequest.Lock()
	mock.calls.CopySnapshotRequest = append(mock.calls.CopySnapshotRequest, callInfo)
	lockec2ClientMockCopySnapshotRequest.Unlock()
	return mock.CopySnapshotRequestFunc(in1)
}

// CopySnapshotRequestCalls gets all the calls that were made to CopySnapshotRequest.
// Check the length with:
//     len(mockedec2Client.CopySnapshotRequestCalls())
func (mock *ec2ClientMock) CopySnapshotRequestCalls() []struct {
	In1 *ec2.CopySnapshotInput
} {
	var calls []struct {
		In1 *ec2.CopySnapshotInput
	}
	lockec2ClientMockCopySnapshotRequest.RLock()
	calls = mock.calls.CopySnapshotRequest
	lockec2ClientMockCopySnapshotRequest.RUnlock()
	return calls
}

// CopySnapshotWithContext calls CopySnapshotWithContextFunc.
func (mock *ec2ClientMock) CopySnapshotWithContext(in1 context.Context, in2 *ec2.CopySnapshotInput, in3 ...request.Option) (*ec2.CopySnapshotOutput, error) {
	if mock.CopySnapshotWithContextFunc == nil {
		panic("ec2ClientMock.CopySnapshotWithContextFunc: method is nil but ec2Client.CopySnapshotWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CopySnapshotInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCopySnapshotWithContext.Lock()
	mock.calls.CopySnapshotWithContext = append(mock.calls.CopySnapshotWithContext, callInfo)
	lockec2ClientMockCopySnapshotWithContext.Unlock()
	return mock.CopySnapshotWithContextFunc(in1, in2, in3...)
}

// CopySnapshotWithContextCalls gets all the calls that were made to CopySnapshotWithContext.
// Check the length with:
//     len(mockedec2Client.CopySnapshotWithContextCalls())
func (mock *ec2ClientMock) CopySnapshotWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CopySnapshotInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CopySnapshotInput
		In3 []request.Option
	}
	lockec2ClientMockCopySnapshotWithContext.RLock()
	calls = mock.calls.CopySnapshotWithContext
	lockec2ClientMockCopySnapshotWithContext.RUnlock()
	return calls
}

// CreateCapacityReservation calls CreateCapacityReservationFunc.
func (mock *ec2ClientMock) CreateCapacityReservation(in1 *ec2.CreateCapacityReservationInput) (*ec2.CreateCapacityReservationOutput, error) {
	if mock.CreateCapacityReservationFunc == nil {
		panic("ec2ClientMock.CreateCapacityReservationFunc: method is nil but ec2Client.CreateCapacityReservation was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateCapacityReservationInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateCapacityReservation.Lock()
	mock.calls.CreateCapacityReservation = append(mock.calls.CreateCapacityReservation, callInfo)
	lockec2ClientMockCreateCapacityReservation.Unlock()
	return mock.CreateCapacityReservationFunc(in1)
}

// CreateCapacityReservationCalls gets all the calls that were made to CreateCapacityReservation.
// Check the length with:
//     len(mockedec2Client.CreateCapacityReservationCalls())
func (mock *ec2ClientMock) CreateCapacityReservationCalls() []struct {
	In1 *ec2.CreateCapacityReservationInput
} {
	var calls []struct {
		In1 *ec2.CreateCapacityReservationInput
	}
	lockec2ClientMockCreateCapacityReservation.RLock()
	calls = mock.calls.CreateCapacityReservation
	lockec2ClientMockCreateCapacityReservation.RUnlock()
	return calls
}

// CreateCapacityReservationRequest calls CreateCapacityReservationRequestFunc.
func (mock *ec2ClientMock) CreateCapacityReservationRequest(in1 *ec2.CreateCapacityReservationInput) (*request.Request, *ec2.CreateCapacityReservationOutput) {
	if mock.CreateCapacityReservationRequestFunc == nil {
		panic("ec2ClientMock.CreateCapacityReservationRequestFunc: method is nil but ec2Client.CreateCapacityReservationRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateCapacityReservationInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateCapacityReservationRequest.Lock()
	mock.calls.CreateCapacityReservationRequest = append(mock.calls.CreateCapacityReservationRequest, callInfo)
	lockec2ClientMockCreateCapacityReservationRequest.Unlock()
	return mock.CreateCapacityReservationRequestFunc(in1)
}

// CreateCapacityReservationRequestCalls gets all the calls that were made to CreateCapacityReservationRequest.
// Check the length with:
//     len(mockedec2Client.CreateCapacityReservationRequestCalls())
func (mock *ec2ClientMock) CreateCapacityReservationRequestCalls() []struct {
	In1 *ec2.CreateCapacityReservationInput
} {
	var calls []struct {
		In1 *ec2.CreateCapacityReservationInput
	}
	lockec2ClientMockCreateCapacityReservationRequest.RLock()
	calls = mock.calls.CreateCapacityReservationRequest
	lockec2ClientMockCreateCapacityReservationRequest.RUnlock()
	return calls
}

// CreateCapacityReservationWithContext calls CreateCapacityReservationWithContextFunc.
func (mock *ec2ClientMock) CreateCapacityReservationWithContext(in1 context.Context, in2 *ec2.CreateCapacityReservationInput, in3 ...request.Option) (*ec2.CreateCapacityReservationOutput, error) {
	if mock.CreateCapacityReservationWithContextFunc == nil {
		panic("ec2ClientMock.CreateCapacityReservationWithContextFunc: method is nil but ec2Client.CreateCapacityReservationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateCapacityReservationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateCapacityReservationWithContext.Lock()
	mock.calls.CreateCapacityReservationWithContext = append(mock.calls.CreateCapacityReservationWithContext, callInfo)
	lockec2ClientMockCreateCapacityReservationWithContext.Unlock()
	return mock.CreateCapacityReservationWithContextFunc(in1, in2, in3...)
}

// CreateCapacityReservationWithContextCalls gets all the calls that were made to CreateCapacityReservationWithContext.
// Check the length with:
//     len(mockedec2Client.CreateCapacityReservationWithContextCalls())
func (mock *ec2ClientMock) CreateCapacityReservationWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateCapacityReservationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateCapacityReservationInput
		In3 []request.Option
	}
	lockec2ClientMockCreateCapacityReservationWithContext.RLock()
	calls = mock.calls.CreateCapacityReservationWithContext
	lockec2ClientMockCreateCapacityReservationWithContext.RUnlock()
	return calls
}

// CreateClientVpnEndpoint calls CreateClientVpnEndpointFunc.
func (mock *ec2ClientMock) CreateClientVpnEndpoint(in1 *ec2.CreateClientVpnEndpointInput) (*ec2.CreateClientVpnEndpointOutput, error) {
	if mock.CreateClientVpnEndpointFunc == nil {
		panic("ec2ClientMock.CreateClientVpnEndpointFunc: method is nil but ec2Client.CreateClientVpnEndpoint was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateClientVpnEndpointInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateClientVpnEndpoint.Lock()
	mock.calls.CreateClientVpnEndpoint = append(mock.calls.CreateClientVpnEndpoint, callInfo)
	lockec2ClientMockCreateClientVpnEndpoint.Unlock()
	return mock.CreateClientVpnEndpointFunc(in1)
}

// CreateClientVpnEndpointCalls gets all the calls that were made to CreateClientVpnEndpoint.
// Check the length with:
//     len(mockedec2Client.CreateClientVpnEndpointCalls())
func (mock *ec2ClientMock) CreateClientVpnEndpointCalls() []struct {
	In1 *ec2.CreateClientVpnEndpointInput
} {
	var calls []struct {
		In1 *ec2.CreateClientVpnEndpointInput
	}
	lockec2ClientMockCreateClientVpnEndpoint.RLock()
	calls = mock.calls.CreateClientVpnEndpoint
	lockec2ClientMockCreateClientVpnEndpoint.RUnlock()
	return calls
}

// CreateClientVpnEndpointRequest calls CreateClientVpnEndpointRequestFunc.
func (mock *ec2ClientMock) CreateClientVpnEndpointRequest(in1 *ec2.CreateClientVpnEndpointInput) (*request.Request, *ec2.CreateClientVpnEndpointOutput) {
	if mock.CreateClientVpnEndpointRequestFunc == nil {
		panic("ec2ClientMock.CreateClientVpnEndpointRequestFunc: method is nil but ec2Client.CreateClientVpnEndpointRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateClientVpnEndpointInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateClientVpnEndpointRequest.Lock()
	mock.calls.CreateClientVpnEndpointRequest = append(mock.calls.CreateClientVpnEndpointRequest, callInfo)
	lockec2ClientMockCreateClientVpnEndpointRequest.Unlock()
	return mock.CreateClientVpnEndpointRequestFunc(in1)
}

// CreateClientVpnEndpointRequestCalls gets all the calls that were made to CreateClientVpnEndpointRequest.
// Check the length with:
//     len(mockedec2Client.CreateClientVpnEndpointRequestCalls())
func (mock *ec2ClientMock) CreateClientVpnEndpointRequestCalls() []struct {
	In1 *ec2.CreateClientVpnEndpointInput
} {
	var calls []struct {
		In1 *ec2.CreateClientVpnEndpointInput
	}
	lockec2ClientMockCreateClientVpnEndpointRequest.RLock()
	calls = mock.calls.CreateClientVpnEndpointRequest
	lockec2ClientMockCreateClientVpnEndpointRequest.RUnlock()
	return calls
}

// CreateClientVpnEndpointWithContext calls CreateClientVpnEndpointWithContextFunc.
func (mock *ec2ClientMock) CreateClientVpnEndpointWithContext(in1 context.Context, in2 *ec2.CreateClientVpnEndpointInput, in3 ...request.Option) (*ec2.CreateClientVpnEndpointOutput, error) {
	if mock.CreateClientVpnEndpointWithContextFunc == nil {
		panic("ec2ClientMock.CreateClientVpnEndpointWithContextFunc: method is nil but ec2Client.CreateClientVpnEndpointWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateClientVpnEndpointInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateClientVpnEndpointWithContext.Lock()
	mock.calls.CreateClientVpnEndpointWithContext = append(mock.calls.CreateClientVpnEndpointWithContext, callInfo)
	lockec2ClientMockCreateClientVpnEndpointWithContext.Unlock()
	return mock.CreateClientVpnEndpointWithContextFunc(in1, in2, in3...)
}

// CreateClientVpnEndpointWithContextCalls gets all the calls that were made to CreateClientVpnEndpointWithContext.
// Check the length with:
//     len(mockedec2Client.CreateClientVpnEndpointWithContextCalls())
func (mock *ec2ClientMock) CreateClientVpnEndpointWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateClientVpnEndpointInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateClientVpnEndpointInput
		In3 []request.Option
	}
	lockec2ClientMockCreateClientVpnEndpointWithContext.RLock()
	calls = mock.calls.CreateClientVpnEndpointWithContext
	lockec2ClientMockCreateClientVpnEndpointWithContext.RUnlock()
	return calls
}

// CreateClientVpnRoute calls CreateClientVpnRouteFunc.
func (mock *ec2ClientMock) CreateClientVpnRoute(in1 *ec2.CreateClientVpnRouteInput) (*ec2.CreateClientVpnRouteOutput, error) {
	if mock.CreateClientVpnRouteFunc == nil {
		panic("ec2ClientMock.CreateClientVpnRouteFunc: method is nil but ec2Client.CreateClientVpnRoute was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateClientVpnRouteInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateClientVpnRoute.Lock()
	mock.calls.CreateClientVpnRoute = append(mock.calls.CreateClientVpnRoute, callInfo)
	lockec2ClientMockCreateClientVpnRoute.Unlock()
	return mock.CreateClientVpnRouteFunc(in1)
}

// CreateClientVpnRouteCalls gets all the calls that were made to CreateClientVpnRoute.
// Check the length with:
//     len(mockedec2Client.CreateClientVpnRouteCalls())
func (mock *ec2ClientMock) CreateClientVpnRouteCalls() []struct {
	In1 *ec2.CreateClientVpnRouteInput
} {
	var calls []struct {
		In1 *ec2.CreateClientVpnRouteInput
	}
	lockec2ClientMockCreateClientVpnRoute.RLock()
	calls = mock.calls.CreateClientVpnRoute
	lockec2ClientMockCreateClientVpnRoute.RUnlock()
	return calls
}

// CreateClientVpnRouteRequest calls CreateClientVpnRouteRequestFunc.
func (mock *ec2ClientMock) CreateClientVpnRouteRequest(in1 *ec2.CreateClientVpnRouteInput) (*request.Request, *ec2.CreateClientVpnRouteOutput) {
	if mock.CreateClientVpnRouteRequestFunc == nil {
		panic("ec2ClientMock.CreateClientVpnRouteRequestFunc: method is nil but ec2Client.CreateClientVpnRouteRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateClientVpnRouteInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateClientVpnRouteRequest.Lock()
	mock.calls.CreateClientVpnRouteRequest = append(mock.calls.CreateClientVpnRouteRequest, callInfo)
	lockec2ClientMockCreateClientVpnRouteRequest.Unlock()
	return mock.CreateClientVpnRouteRequestFunc(in1)
}

// CreateClientVpnRouteRequestCalls gets all the calls that were made to CreateClientVpnRouteRequest.
// Check the length with:
//     len(mockedec2Client.CreateClientVpnRouteRequestCalls())
func (mock *ec2ClientMock) CreateClientVpnRouteRequestCalls() []struct {
	In1 *ec2.CreateClientVpnRouteInput
} {
	var calls []struct {
		In1 *ec2.CreateClientVpnRouteInput
	}
	lockec2ClientMockCreateClientVpnRouteRequest.RLock()
	calls = mock.calls.CreateClientVpnRouteRequest
	lockec2ClientMockCreateClientVpnRouteRequest.RUnlock()
	return calls
}

// CreateClientVpnRouteWithContext calls CreateClientVpnRouteWithContextFunc.
func (mock *ec2ClientMock) CreateClientVpnRouteWithContext(in1 context.Context, in2 *ec2.CreateClientVpnRouteInput, in3 ...request.Option) (*ec2.CreateClientVpnRouteOutput, error) {
	if mock.CreateClientVpnRouteWithContextFunc == nil {
		panic("ec2ClientMock.CreateClientVpnRouteWithContextFunc: method is nil but ec2Client.CreateClientVpnRouteWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateClientVpnRouteInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateClientVpnRouteWithContext.Lock()
	mock.calls.CreateClientVpnRouteWithContext = append(mock.calls.CreateClientVpnRouteWithContext, callInfo)
	lockec2ClientMockCreateClientVpnRouteWithContext.Unlock()
	return mock.CreateClientVpnRouteWithContextFunc(in1, in2, in3...)
}

// CreateClientVpnRouteWithContextCalls gets all the calls that were made to CreateClientVpnRouteWithContext.
// Check the length with:
//     len(mockedec2Client.CreateClientVpnRouteWithContextCalls())
func (mock *ec2ClientMock) CreateClientVpnRouteWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateClientVpnRouteInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateClientVpnRouteInput
		In3 []request.Option
	}
	lockec2ClientMockCreateClientVpnRouteWithContext.RLock()
	calls = mock.calls.CreateClientVpnRouteWithContext
	lockec2ClientMockCreateClientVpnRouteWithContext.RUnlock()
	return calls
}

// CreateCustomerGateway calls CreateCustomerGatewayFunc.
func (mock *ec2ClientMock) CreateCustomerGateway(in1 *ec2.CreateCustomerGatewayInput) (*ec2.CreateCustomerGatewayOutput, error) {
	if mock.CreateCustomerGatewayFunc == nil {
		panic("ec2ClientMock.CreateCustomerGatewayFunc: method is nil but ec2Client.CreateCustomerGateway was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateCustomerGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateCustomerGateway.Lock()
	mock.calls.CreateCustomerGateway = append(mock.calls.CreateCustomerGateway, callInfo)
	lockec2ClientMockCreateCustomerGateway.Unlock()
	return mock.CreateCustomerGatewayFunc(in1)
}

// CreateCustomerGatewayCalls gets all the calls that were made to CreateCustomerGateway.
// Check the length with:
//     len(mockedec2Client.CreateCustomerGatewayCalls())
func (mock *ec2ClientMock) CreateCustomerGatewayCalls() []struct {
	In1 *ec2.CreateCustomerGatewayInput
} {
	var calls []struct {
		In1 *ec2.CreateCustomerGatewayInput
	}
	lockec2ClientMockCreateCustomerGateway.RLock()
	calls = mock.calls.CreateCustomerGateway
	lockec2ClientMockCreateCustomerGateway.RUnlock()
	return calls
}

// CreateCustomerGatewayRequest calls CreateCustomerGatewayRequestFunc.
func (mock *ec2ClientMock) CreateCustomerGatewayRequest(in1 *ec2.CreateCustomerGatewayInput) (*request.Request, *ec2.CreateCustomerGatewayOutput) {
	if mock.CreateCustomerGatewayRequestFunc == nil {
		panic("ec2ClientMock.CreateCustomerGatewayRequestFunc: method is nil but ec2Client.CreateCustomerGatewayRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateCustomerGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateCustomerGatewayRequest.Lock()
	mock.calls.CreateCustomerGatewayRequest = append(mock.calls.CreateCustomerGatewayRequest, callInfo)
	lockec2ClientMockCreateCustomerGatewayRequest.Unlock()
	return mock.CreateCustomerGatewayRequestFunc(in1)
}

// CreateCustomerGatewayRequestCalls gets all the calls that were made to CreateCustomerGatewayRequest.
// Check the length with:
//     len(mockedec2Client.CreateCustomerGatewayRequestCalls())
func (mock *ec2ClientMock) CreateCustomerGatewayRequestCalls() []struct {
	In1 *ec2.CreateCustomerGatewayInput
} {
	var calls []struct {
		In1 *ec2.CreateCustomerGatewayInput
	}
	lockec2ClientMockCreateCustomerGatewayRequest.RLock()
	calls = mock.calls.CreateCustomerGatewayRequest
	lockec2ClientMockCreateCustomerGatewayRequest.RUnlock()
	return calls
}

// CreateCustomerGatewayWithContext calls CreateCustomerGatewayWithContextFunc.
func (mock *ec2ClientMock) CreateCustomerGatewayWithContext(in1 context.Context, in2 *ec2.CreateCustomerGatewayInput, in3 ...request.Option) (*ec2.CreateCustomerGatewayOutput, error) {
	if mock.CreateCustomerGatewayWithContextFunc == nil {
		panic("ec2ClientMock.CreateCustomerGatewayWithContextFunc: method is nil but ec2Client.CreateCustomerGatewayWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateCustomerGatewayInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateCustomerGatewayWithContext.Lock()
	mock.calls.CreateCustomerGatewayWithContext = append(mock.calls.CreateCustomerGatewayWithContext, callInfo)
	lockec2ClientMockCreateCustomerGatewayWithContext.Unlock()
	return mock.CreateCustomerGatewayWithContextFunc(in1, in2, in3...)
}

// CreateCustomerGatewayWithContextCalls gets all the calls that were made to CreateCustomerGatewayWithContext.
// Check the length with:
//     len(mockedec2Client.CreateCustomerGatewayWithContextCalls())
func (mock *ec2ClientMock) CreateCustomerGatewayWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateCustomerGatewayInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateCustomerGatewayInput
		In3 []request.Option
	}
	lockec2ClientMockCreateCustomerGatewayWithContext.RLock()
	calls = mock.calls.CreateCustomerGatewayWithContext
	lockec2ClientMockCreateCustomerGatewayWithContext.RUnlock()
	return calls
}

// CreateDefaultSubnet calls CreateDefaultSubnetFunc.
func (mock *ec2ClientMock) CreateDefaultSubnet(in1 *ec2.CreateDefaultSubnetInput) (*ec2.CreateDefaultSubnetOutput, error) {
	if mock.CreateDefaultSubnetFunc == nil {
		panic("ec2ClientMock.CreateDefaultSubnetFunc: method is nil but ec2Client.CreateDefaultSubnet was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateDefaultSubnetInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateDefaultSubnet.Lock()
	mock.calls.CreateDefaultSubnet = append(mock.calls.CreateDefaultSubnet, callInfo)
	lockec2ClientMockCreateDefaultSubnet.Unlock()
	return mock.CreateDefaultSubnetFunc(in1)
}

// CreateDefaultSubnetCalls gets all the calls that were made to CreateDefaultSubnet.
// Check the length with:
//     len(mockedec2Client.CreateDefaultSubnetCalls())
func (mock *ec2ClientMock) CreateDefaultSubnetCalls() []struct {
	In1 *ec2.CreateDefaultSubnetInput
} {
	var calls []struct {
		In1 *ec2.CreateDefaultSubnetInput
	}
	lockec2ClientMockCreateDefaultSubnet.RLock()
	calls = mock.calls.CreateDefaultSubnet
	lockec2ClientMockCreateDefaultSubnet.RUnlock()
	return calls
}

// CreateDefaultSubnetRequest calls CreateDefaultSubnetRequestFunc.
func (mock *ec2ClientMock) CreateDefaultSubnetRequest(in1 *ec2.CreateDefaultSubnetInput) (*request.Request, *ec2.CreateDefaultSubnetOutput) {
	if mock.CreateDefaultSubnetRequestFunc == nil {
		panic("ec2ClientMock.CreateDefaultSubnetRequestFunc: method is nil but ec2Client.CreateDefaultSubnetRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateDefaultSubnetInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateDefaultSubnetRequest.Lock()
	mock.calls.CreateDefaultSubnetRequest = append(mock.calls.CreateDefaultSubnetRequest, callInfo)
	lockec2ClientMockCreateDefaultSubnetRequest.Unlock()
	return mock.CreateDefaultSubnetRequestFunc(in1)
}

// CreateDefaultSubnetRequestCalls gets all the calls that were made to CreateDefaultSubnetRequest.
// Check the length with:
//     len(mockedec2Client.CreateDefaultSubnetRequestCalls())
func (mock *ec2ClientMock) CreateDefaultSubnetRequestCalls() []struct {
	In1 *ec2.CreateDefaultSubnetInput
} {
	var calls []struct {
		In1 *ec2.CreateDefaultSubnetInput
	}
	lockec2ClientMockCreateDefaultSubnetRequest.RLock()
	calls = mock.calls.CreateDefaultSubnetRequest
	lockec2ClientMockCreateDefaultSubnetRequest.RUnlock()
	return calls
}

// CreateDefaultSubnetWithContext calls CreateDefaultSubnetWithContextFunc.
func (mock *ec2ClientMock) CreateDefaultSubnetWithContext(in1 context.Context, in2 *ec2.CreateDefaultSubnetInput, in3 ...request.Option) (*ec2.CreateDefaultSubnetOutput, error) {
	if mock.CreateDefaultSubnetWithContextFunc == nil {
		panic("ec2ClientMock.CreateDefaultSubnetWithContextFunc: method is nil but ec2Client.CreateDefaultSubnetWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateDefaultSubnetInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateDefaultSubnetWithContext.Lock()
	mock.calls.CreateDefaultSubnetWithContext = append(mock.calls.CreateDefaultSubnetWithContext, callInfo)
	lockec2ClientMockCreateDefaultSubnetWithContext.Unlock()
	return mock.CreateDefaultSubnetWithContextFunc(in1, in2, in3...)
}

// CreateDefaultSubnetWithContextCalls gets all the calls that were made to CreateDefaultSubnetWithContext.
// Check the length with:
//     len(mockedec2Client.CreateDefaultSubnetWithContextCalls())
func (mock *ec2ClientMock) CreateDefaultSubnetWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateDefaultSubnetInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateDefaultSubnetInput
		In3 []request.Option
	}
	lockec2ClientMockCreateDefaultSubnetWithContext.RLock()
	calls = mock.calls.CreateDefaultSubnetWithContext
	lockec2ClientMockCreateDefaultSubnetWithContext.RUnlock()
	return calls
}

// CreateDefaultVpc calls CreateDefaultVpcFunc.
func (mock *ec2ClientMock) CreateDefaultVpc(in1 *ec2.CreateDefaultVpcInput) (*ec2.CreateDefaultVpcOutput, error) {
	if mock.CreateDefaultVpcFunc == nil {
		panic("ec2ClientMock.CreateDefaultVpcFunc: method is nil but ec2Client.CreateDefaultVpc was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateDefaultVpcInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateDefaultVpc.Lock()
	mock.calls.CreateDefaultVpc = append(mock.calls.CreateDefaultVpc, callInfo)
	lockec2ClientMockCreateDefaultVpc.Unlock()
	return mock.CreateDefaultVpcFunc(in1)
}

// CreateDefaultVpcCalls gets all the calls that were made to CreateDefaultVpc.
// Check the length with:
//     len(mockedec2Client.CreateDefaultVpcCalls())
func (mock *ec2ClientMock) CreateDefaultVpcCalls() []struct {
	In1 *ec2.CreateDefaultVpcInput
} {
	var calls []struct {
		In1 *ec2.CreateDefaultVpcInput
	}
	lockec2ClientMockCreateDefaultVpc.RLock()
	calls = mock.calls.CreateDefaultVpc
	lockec2ClientMockCreateDefaultVpc.RUnlock()
	return calls
}

// CreateDefaultVpcRequest calls CreateDefaultVpcRequestFunc.
func (mock *ec2ClientMock) CreateDefaultVpcRequest(in1 *ec2.CreateDefaultVpcInput) (*request.Request, *ec2.CreateDefaultVpcOutput) {
	if mock.CreateDefaultVpcRequestFunc == nil {
		panic("ec2ClientMock.CreateDefaultVpcRequestFunc: method is nil but ec2Client.CreateDefaultVpcRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateDefaultVpcInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateDefaultVpcRequest.Lock()
	mock.calls.CreateDefaultVpcRequest = append(mock.calls.CreateDefaultVpcRequest, callInfo)
	lockec2ClientMockCreateDefaultVpcRequest.Unlock()
	return mock.CreateDefaultVpcRequestFunc(in1)
}

// CreateDefaultVpcRequestCalls gets all the calls that were made to CreateDefaultVpcRequest.
// Check the length with:
//     len(mockedec2Client.CreateDefaultVpcRequestCalls())
func (mock *ec2ClientMock) CreateDefaultVpcRequestCalls() []struct {
	In1 *ec2.CreateDefaultVpcInput
} {
	var calls []struct {
		In1 *ec2.CreateDefaultVpcInput
	}
	lockec2ClientMockCreateDefaultVpcRequest.RLock()
	calls = mock.calls.CreateDefaultVpcRequest
	lockec2ClientMockCreateDefaultVpcRequest.RUnlock()
	return calls
}

// CreateDefaultVpcWithContext calls CreateDefaultVpcWithContextFunc.
func (mock *ec2ClientMock) CreateDefaultVpcWithContext(in1 context.Context, in2 *ec2.CreateDefaultVpcInput, in3 ...request.Option) (*ec2.CreateDefaultVpcOutput, error) {
	if mock.CreateDefaultVpcWithContextFunc == nil {
		panic("ec2ClientMock.CreateDefaultVpcWithContextFunc: method is nil but ec2Client.CreateDefaultVpcWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateDefaultVpcInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateDefaultVpcWithContext.Lock()
	mock.calls.CreateDefaultVpcWithContext = append(mock.calls.CreateDefaultVpcWithContext, callInfo)
	lockec2ClientMockCreateDefaultVpcWithContext.Unlock()
	return mock.CreateDefaultVpcWithContextFunc(in1, in2, in3...)
}

// CreateDefaultVpcWithContextCalls gets all the calls that were made to CreateDefaultVpcWithContext.
// Check the length with:
//     len(mockedec2Client.CreateDefaultVpcWithContextCalls())
func (mock *ec2ClientMock) CreateDefaultVpcWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateDefaultVpcInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateDefaultVpcInput
		In3 []request.Option
	}
	lockec2ClientMockCreateDefaultVpcWithContext.RLock()
	calls = mock.calls.CreateDefaultVpcWithContext
	lockec2ClientMockCreateDefaultVpcWithContext.RUnlock()
	return calls
}

// CreateDhcpOptions calls CreateDhcpOptionsFunc.
func (mock *ec2ClientMock) CreateDhcpOptions(in1 *ec2.CreateDhcpOptionsInput) (*ec2.CreateDhcpOptionsOutput, error) {
	if mock.CreateDhcpOptionsFunc == nil {
		panic("ec2ClientMock.CreateDhcpOptionsFunc: method is nil but ec2Client.CreateDhcpOptions was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateDhcpOptionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateDhcpOptions.Lock()
	mock.calls.CreateDhcpOptions = append(mock.calls.CreateDhcpOptions, callInfo)
	lockec2ClientMockCreateDhcpOptions.Unlock()
	return mock.CreateDhcpOptionsFunc(in1)
}

// CreateDhcpOptionsCalls gets all the calls that were made to CreateDhcpOptions.
// Check the length with:
//     len(mockedec2Client.CreateDhcpOptionsCalls())
func (mock *ec2ClientMock) CreateDhcpOptionsCalls() []struct {
	In1 *ec2.CreateDhcpOptionsInput
} {
	var calls []struct {
		In1 *ec2.CreateDhcpOptionsInput
	}
	lockec2ClientMockCreateDhcpOptions.RLock()
	calls = mock.calls.CreateDhcpOptions
	lockec2ClientMockCreateDhcpOptions.RUnlock()
	return calls
}

// CreateDhcpOptionsRequest calls CreateDhcpOptionsRequestFunc.
func (mock *ec2ClientMock) CreateDhcpOptionsRequest(in1 *ec2.CreateDhcpOptionsInput) (*request.Request, *ec2.CreateDhcpOptionsOutput) {
	if mock.CreateDhcpOptionsRequestFunc == nil {
		panic("ec2ClientMock.CreateDhcpOptionsRequestFunc: method is nil but ec2Client.CreateDhcpOptionsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateDhcpOptionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateDhcpOptionsRequest.Lock()
	mock.calls.CreateDhcpOptionsRequest = append(mock.calls.CreateDhcpOptionsRequest, callInfo)
	lockec2ClientMockCreateDhcpOptionsRequest.Unlock()
	return mock.CreateDhcpOptionsRequestFunc(in1)
}

// CreateDhcpOptionsRequestCalls gets all the calls that were made to CreateDhcpOptionsRequest.
// Check the length with:
//     len(mockedec2Client.CreateDhcpOptionsRequestCalls())
func (mock *ec2ClientMock) CreateDhcpOptionsRequestCalls() []struct {
	In1 *ec2.CreateDhcpOptionsInput
} {
	var calls []struct {
		In1 *ec2.CreateDhcpOptionsInput
	}
	lockec2ClientMockCreateDhcpOptionsRequest.RLock()
	calls = mock.calls.CreateDhcpOptionsRequest
	lockec2ClientMockCreateDhcpOptionsRequest.RUnlock()
	return calls
}

// CreateDhcpOptionsWithContext calls CreateDhcpOptionsWithContextFunc.
func (mock *ec2ClientMock) CreateDhcpOptionsWithContext(in1 context.Context, in2 *ec2.CreateDhcpOptionsInput, in3 ...request.Option) (*ec2.CreateDhcpOptionsOutput, error) {
	if mock.CreateDhcpOptionsWithContextFunc == nil {
		panic("ec2ClientMock.CreateDhcpOptionsWithContextFunc: method is nil but ec2Client.CreateDhcpOptionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateDhcpOptionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateDhcpOptionsWithContext.Lock()
	mock.calls.CreateDhcpOptionsWithContext = append(mock.calls.CreateDhcpOptionsWithContext, callInfo)
	lockec2ClientMockCreateDhcpOptionsWithContext.Unlock()
	return mock.CreateDhcpOptionsWithContextFunc(in1, in2, in3...)
}

// CreateDhcpOptionsWithContextCalls gets all the calls that were made to CreateDhcpOptionsWithContext.
// Check the length with:
//     len(mockedec2Client.CreateDhcpOptionsWithContextCalls())
func (mock *ec2ClientMock) CreateDhcpOptionsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateDhcpOptionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateDhcpOptionsInput
		In3 []request.Option
	}
	lockec2ClientMockCreateDhcpOptionsWithContext.RLock()
	calls = mock.calls.CreateDhcpOptionsWithContext
	lockec2ClientMockCreateDhcpOptionsWithContext.RUnlock()
	return calls
}

// CreateEgressOnlyInternetGateway calls CreateEgressOnlyInternetGatewayFunc.
func (mock *ec2ClientMock) CreateEgressOnlyInternetGateway(in1 *ec2.CreateEgressOnlyInternetGatewayInput) (*ec2.CreateEgressOnlyInternetGatewayOutput, error) {
	if mock.CreateEgressOnlyInternetGatewayFunc == nil {
		panic("ec2ClientMock.CreateEgressOnlyInternetGatewayFunc: method is nil but ec2Client.CreateEgressOnlyInternetGateway was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateEgressOnlyInternetGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateEgressOnlyInternetGateway.Lock()
	mock.calls.CreateEgressOnlyInternetGateway = append(mock.calls.CreateEgressOnlyInternetGateway, callInfo)
	lockec2ClientMockCreateEgressOnlyInternetGateway.Unlock()
	return mock.CreateEgressOnlyInternetGatewayFunc(in1)
}

// CreateEgressOnlyInternetGatewayCalls gets all the calls that were made to CreateEgressOnlyInternetGateway.
// Check the length with:
//     len(mockedec2Client.CreateEgressOnlyInternetGatewayCalls())
func (mock *ec2ClientMock) CreateEgressOnlyInternetGatewayCalls() []struct {
	In1 *ec2.CreateEgressOnlyInternetGatewayInput
} {
	var calls []struct {
		In1 *ec2.CreateEgressOnlyInternetGatewayInput
	}
	lockec2ClientMockCreateEgressOnlyInternetGateway.RLock()
	calls = mock.calls.CreateEgressOnlyInternetGateway
	lockec2ClientMockCreateEgressOnlyInternetGateway.RUnlock()
	return calls
}

// CreateEgressOnlyInternetGatewayRequest calls CreateEgressOnlyInternetGatewayRequestFunc.
func (mock *ec2ClientMock) CreateEgressOnlyInternetGatewayRequest(in1 *ec2.CreateEgressOnlyInternetGatewayInput) (*request.Request, *ec2.CreateEgressOnlyInternetGatewayOutput) {
	if mock.CreateEgressOnlyInternetGatewayRequestFunc == nil {
		panic("ec2ClientMock.CreateEgressOnlyInternetGatewayRequestFunc: method is nil but ec2Client.CreateEgressOnlyInternetGatewayRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateEgressOnlyInternetGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateEgressOnlyInternetGatewayRequest.Lock()
	mock.calls.CreateEgressOnlyInternetGatewayRequest = append(mock.calls.CreateEgressOnlyInternetGatewayRequest, callInfo)
	lockec2ClientMockCreateEgressOnlyInternetGatewayRequest.Unlock()
	return mock.CreateEgressOnlyInternetGatewayRequestFunc(in1)
}

// CreateEgressOnlyInternetGatewayRequestCalls gets all the calls that were made to CreateEgressOnlyInternetGatewayRequest.
// Check the length with:
//     len(mockedec2Client.CreateEgressOnlyInternetGatewayRequestCalls())
func (mock *ec2ClientMock) CreateEgressOnlyInternetGatewayRequestCalls() []struct {
	In1 *ec2.CreateEgressOnlyInternetGatewayInput
} {
	var calls []struct {
		In1 *ec2.CreateEgressOnlyInternetGatewayInput
	}
	lockec2ClientMockCreateEgressOnlyInternetGatewayRequest.RLock()
	calls = mock.calls.CreateEgressOnlyInternetGatewayRequest
	lockec2ClientMockCreateEgressOnlyInternetGatewayRequest.RUnlock()
	return calls
}

// CreateEgressOnlyInternetGatewayWithContext calls CreateEgressOnlyInternetGatewayWithContextFunc.
func (mock *ec2ClientMock) CreateEgressOnlyInternetGatewayWithContext(in1 context.Context, in2 *ec2.CreateEgressOnlyInternetGatewayInput, in3 ...request.Option) (*ec2.CreateEgressOnlyInternetGatewayOutput, error) {
	if mock.CreateEgressOnlyInternetGatewayWithContextFunc == nil {
		panic("ec2ClientMock.CreateEgressOnlyInternetGatewayWithContextFunc: method is nil but ec2Client.CreateEgressOnlyInternetGatewayWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateEgressOnlyInternetGatewayInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateEgressOnlyInternetGatewayWithContext.Lock()
	mock.calls.CreateEgressOnlyInternetGatewayWithContext = append(mock.calls.CreateEgressOnlyInternetGatewayWithContext, callInfo)
	lockec2ClientMockCreateEgressOnlyInternetGatewayWithContext.Unlock()
	return mock.CreateEgressOnlyInternetGatewayWithContextFunc(in1, in2, in3...)
}

// CreateEgressOnlyInternetGatewayWithContextCalls gets all the calls that were made to CreateEgressOnlyInternetGatewayWithContext.
// Check the length with:
//     len(mockedec2Client.CreateEgressOnlyInternetGatewayWithContextCalls())
func (mock *ec2ClientMock) CreateEgressOnlyInternetGatewayWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateEgressOnlyInternetGatewayInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateEgressOnlyInternetGatewayInput
		In3 []request.Option
	}
	lockec2ClientMockCreateEgressOnlyInternetGatewayWithContext.RLock()
	calls = mock.calls.CreateEgressOnlyInternetGatewayWithContext
	lockec2ClientMockCreateEgressOnlyInternetGatewayWithContext.RUnlock()
	return calls
}

// CreateFleet calls CreateFleetFunc.
func (mock *ec2ClientMock) CreateFleet(in1 *ec2.CreateFleetInput) (*ec2.CreateFleetOutput, error) {
	if mock.CreateFleetFunc == nil {
		panic("ec2ClientMock.CreateFleetFunc: method is nil but ec2Client.CreateFleet was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateFleetInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateFleet.Lock()
	mock.calls.CreateFleet = append(mock.calls.CreateFleet, callInfo)
	lockec2ClientMockCreateFleet.Unlock()
	return mock.CreateFleetFunc(in1)
}

// CreateFleetCalls gets all the calls that were made to CreateFleet.
// Check the length with:
//     len(mockedec2Client.CreateFleetCalls())
func (mock *ec2ClientMock) CreateFleetCalls() []struct {
	In1 *ec2.CreateFleetInput
} {
	var calls []struct {
		In1 *ec2.CreateFleetInput
	}
	lockec2ClientMockCreateFleet.RLock()
	calls = mock.calls.CreateFleet
	lockec2ClientMockCreateFleet.RUnlock()
	return calls
}

// CreateFleetRequest calls CreateFleetRequestFunc.
func (mock *ec2ClientMock) CreateFleetRequest(in1 *ec2.CreateFleetInput) (*request.Request, *ec2.CreateFleetOutput) {
	if mock.CreateFleetRequestFunc == nil {
		panic("ec2ClientMock.CreateFleetRequestFunc: method is nil but ec2Client.CreateFleetRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateFleetInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateFleetRequest.Lock()
	mock.calls.CreateFleetRequest = append(mock.calls.CreateFleetRequest, callInfo)
	lockec2ClientMockCreateFleetRequest.Unlock()
	return mock.CreateFleetRequestFunc(in1)
}

// CreateFleetRequestCalls gets all the calls that were made to CreateFleetRequest.
// Check the length with:
//     len(mockedec2Client.CreateFleetRequestCalls())
func (mock *ec2ClientMock) CreateFleetRequestCalls() []struct {
	In1 *ec2.CreateFleetInput
} {
	var calls []struct {
		In1 *ec2.CreateFleetInput
	}
	lockec2ClientMockCreateFleetRequest.RLock()
	calls = mock.calls.CreateFleetRequest
	lockec2ClientMockCreateFleetRequest.RUnlock()
	return calls
}

// CreateFleetWithContext calls CreateFleetWithContextFunc.
func (mock *ec2ClientMock) CreateFleetWithContext(in1 context.Context, in2 *ec2.CreateFleetInput, in3 ...request.Option) (*ec2.CreateFleetOutput, error) {
	if mock.CreateFleetWithContextFunc == nil {
		panic("ec2ClientMock.CreateFleetWithContextFunc: method is nil but ec2Client.CreateFleetWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateFleetInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateFleetWithContext.Lock()
	mock.calls.CreateFleetWithContext = append(mock.calls.CreateFleetWithContext, callInfo)
	lockec2ClientMockCreateFleetWithContext.Unlock()
	return mock.CreateFleetWithContextFunc(in1, in2, in3...)
}

// CreateFleetWithContextCalls gets all the calls that were made to CreateFleetWithContext.
// Check the length with:
//     len(mockedec2Client.CreateFleetWithContextCalls())
func (mock *ec2ClientMock) CreateFleetWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateFleetInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateFleetInput
		In3 []request.Option
	}
	lockec2ClientMockCreateFleetWithContext.RLock()
	calls = mock.calls.CreateFleetWithContext
	lockec2ClientMockCreateFleetWithContext.RUnlock()
	return calls
}

// CreateFlowLogs calls CreateFlowLogsFunc.
func (mock *ec2ClientMock) CreateFlowLogs(in1 *ec2.CreateFlowLogsInput) (*ec2.CreateFlowLogsOutput, error) {
	if mock.CreateFlowLogsFunc == nil {
		panic("ec2ClientMock.CreateFlowLogsFunc: method is nil but ec2Client.CreateFlowLogs was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateFlowLogsInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateFlowLogs.Lock()
	mock.calls.CreateFlowLogs = append(mock.calls.CreateFlowLogs, callInfo)
	lockec2ClientMockCreateFlowLogs.Unlock()
	return mock.CreateFlowLogsFunc(in1)
}

// CreateFlowLogsCalls gets all the calls that were made to CreateFlowLogs.
// Check the length with:
//     len(mockedec2Client.CreateFlowLogsCalls())
func (mock *ec2ClientMock) CreateFlowLogsCalls() []struct {
	In1 *ec2.CreateFlowLogsInput
} {
	var calls []struct {
		In1 *ec2.CreateFlowLogsInput
	}
	lockec2ClientMockCreateFlowLogs.RLock()
	calls = mock.calls.CreateFlowLogs
	lockec2ClientMockCreateFlowLogs.RUnlock()
	return calls
}

// CreateFlowLogsRequest calls CreateFlowLogsRequestFunc.
func (mock *ec2ClientMock) CreateFlowLogsRequest(in1 *ec2.CreateFlowLogsInput) (*request.Request, *ec2.CreateFlowLogsOutput) {
	if mock.CreateFlowLogsRequestFunc == nil {
		panic("ec2ClientMock.CreateFlowLogsRequestFunc: method is nil but ec2Client.CreateFlowLogsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateFlowLogsInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateFlowLogsRequest.Lock()
	mock.calls.CreateFlowLogsRequest = append(mock.calls.CreateFlowLogsRequest, callInfo)
	lockec2ClientMockCreateFlowLogsRequest.Unlock()
	return mock.CreateFlowLogsRequestFunc(in1)
}

// CreateFlowLogsRequestCalls gets all the calls that were made to CreateFlowLogsRequest.
// Check the length with:
//     len(mockedec2Client.CreateFlowLogsRequestCalls())
func (mock *ec2ClientMock) CreateFlowLogsRequestCalls() []struct {
	In1 *ec2.CreateFlowLogsInput
} {
	var calls []struct {
		In1 *ec2.CreateFlowLogsInput
	}
	lockec2ClientMockCreateFlowLogsRequest.RLock()
	calls = mock.calls.CreateFlowLogsRequest
	lockec2ClientMockCreateFlowLogsRequest.RUnlock()
	return calls
}

// CreateFlowLogsWithContext calls CreateFlowLogsWithContextFunc.
func (mock *ec2ClientMock) CreateFlowLogsWithContext(in1 context.Context, in2 *ec2.CreateFlowLogsInput, in3 ...request.Option) (*ec2.CreateFlowLogsOutput, error) {
	if mock.CreateFlowLogsWithContextFunc == nil {
		panic("ec2ClientMock.CreateFlowLogsWithContextFunc: method is nil but ec2Client.CreateFlowLogsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateFlowLogsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateFlowLogsWithContext.Lock()
	mock.calls.CreateFlowLogsWithContext = append(mock.calls.CreateFlowLogsWithContext, callInfo)
	lockec2ClientMockCreateFlowLogsWithContext.Unlock()
	return mock.CreateFlowLogsWithContextFunc(in1, in2, in3...)
}

// CreateFlowLogsWithContextCalls gets all the calls that were made to CreateFlowLogsWithContext.
// Check the length with:
//     len(mockedec2Client.CreateFlowLogsWithContextCalls())
func (mock *ec2ClientMock) CreateFlowLogsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateFlowLogsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateFlowLogsInput
		In3 []request.Option
	}
	lockec2ClientMockCreateFlowLogsWithContext.RLock()
	calls = mock.calls.CreateFlowLogsWithContext
	lockec2ClientMockCreateFlowLogsWithContext.RUnlock()
	return calls
}

// CreateFpgaImage calls CreateFpgaImageFunc.
func (mock *ec2ClientMock) CreateFpgaImage(in1 *ec2.CreateFpgaImageInput) (*ec2.CreateFpgaImageOutput, error) {
	if mock.CreateFpgaImageFunc == nil {
		panic("ec2ClientMock.CreateFpgaImageFunc: method is nil but ec2Client.CreateFpgaImage was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateFpgaImageInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateFpgaImage.Lock()
	mock.calls.CreateFpgaImage = append(mock.calls.CreateFpgaImage, callInfo)
	lockec2ClientMockCreateFpgaImage.Unlock()
	return mock.CreateFpgaImageFunc(in1)
}

// CreateFpgaImageCalls gets all the calls that were made to CreateFpgaImage.
// Check the length with:
//     len(mockedec2Client.CreateFpgaImageCalls())
func (mock *ec2ClientMock) CreateFpgaImageCalls() []struct {
	In1 *ec2.CreateFpgaImageInput
} {
	var calls []struct {
		In1 *ec2.CreateFpgaImageInput
	}
	lockec2ClientMockCreateFpgaImage.RLock()
	calls = mock.calls.CreateFpgaImage
	lockec2ClientMockCreateFpgaImage.RUnlock()
	return calls
}

// CreateFpgaImageRequest calls CreateFpgaImageRequestFunc.
func (mock *ec2ClientMock) CreateFpgaImageRequest(in1 *ec2.CreateFpgaImageInput) (*request.Request, *ec2.CreateFpgaImageOutput) {
	if mock.CreateFpgaImageRequestFunc == nil {
		panic("ec2ClientMock.CreateFpgaImageRequestFunc: method is nil but ec2Client.CreateFpgaImageRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateFpgaImageInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateFpgaImageRequest.Lock()
	mock.calls.CreateFpgaImageRequest = append(mock.calls.CreateFpgaImageRequest, callInfo)
	lockec2ClientMockCreateFpgaImageRequest.Unlock()
	return mock.CreateFpgaImageRequestFunc(in1)
}

// CreateFpgaImageRequestCalls gets all the calls that were made to CreateFpgaImageRequest.
// Check the length with:
//     len(mockedec2Client.CreateFpgaImageRequestCalls())
func (mock *ec2ClientMock) CreateFpgaImageRequestCalls() []struct {
	In1 *ec2.CreateFpgaImageInput
} {
	var calls []struct {
		In1 *ec2.CreateFpgaImageInput
	}
	lockec2ClientMockCreateFpgaImageRequest.RLock()
	calls = mock.calls.CreateFpgaImageRequest
	lockec2ClientMockCreateFpgaImageRequest.RUnlock()
	return calls
}

// CreateFpgaImageWithContext calls CreateFpgaImageWithContextFunc.
func (mock *ec2ClientMock) CreateFpgaImageWithContext(in1 context.Context, in2 *ec2.CreateFpgaImageInput, in3 ...request.Option) (*ec2.CreateFpgaImageOutput, error) {
	if mock.CreateFpgaImageWithContextFunc == nil {
		panic("ec2ClientMock.CreateFpgaImageWithContextFunc: method is nil but ec2Client.CreateFpgaImageWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateFpgaImageInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateFpgaImageWithContext.Lock()
	mock.calls.CreateFpgaImageWithContext = append(mock.calls.CreateFpgaImageWithContext, callInfo)
	lockec2ClientMockCreateFpgaImageWithContext.Unlock()
	return mock.CreateFpgaImageWithContextFunc(in1, in2, in3...)
}

// CreateFpgaImageWithContextCalls gets all the calls that were made to CreateFpgaImageWithContext.
// Check the length with:
//     len(mockedec2Client.CreateFpgaImageWithContextCalls())
func (mock *ec2ClientMock) CreateFpgaImageWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateFpgaImageInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateFpgaImageInput
		In3 []request.Option
	}
	lockec2ClientMockCreateFpgaImageWithContext.RLock()
	calls = mock.calls.CreateFpgaImageWithContext
	lockec2ClientMockCreateFpgaImageWithContext.RUnlock()
	return calls
}

// CreateImage calls CreateImageFunc.
func (mock *ec2ClientMock) CreateImage(in1 *ec2.CreateImageInput) (*ec2.CreateImageOutput, error) {
	if mock.CreateImageFunc == nil {
		panic("ec2ClientMock.CreateImageFunc: method is nil but ec2Client.CreateImage was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateImageInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateImage.Lock()
	mock.calls.CreateImage = append(mock.calls.CreateImage, callInfo)
	lockec2ClientMockCreateImage.Unlock()
	return mock.CreateImageFunc(in1)
}

// CreateImageCalls gets all the calls that were made to CreateImage.
// Check the length with:
//     len(mockedec2Client.CreateImageCalls())
func (mock *ec2ClientMock) CreateImageCalls() []struct {
	In1 *ec2.CreateImageInput
} {
	var calls []struct {
		In1 *ec2.CreateImageInput
	}
	lockec2ClientMockCreateImage.RLock()
	calls = mock.calls.CreateImage
	lockec2ClientMockCreateImage.RUnlock()
	return calls
}

// CreateImageRequest calls CreateImageRequestFunc.
func (mock *ec2ClientMock) CreateImageRequest(in1 *ec2.CreateImageInput) (*request.Request, *ec2.CreateImageOutput) {
	if mock.CreateImageRequestFunc == nil {
		panic("ec2ClientMock.CreateImageRequestFunc: method is nil but ec2Client.CreateImageRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateImageInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateImageRequest.Lock()
	mock.calls.CreateImageRequest = append(mock.calls.CreateImageRequest, callInfo)
	lockec2ClientMockCreateImageRequest.Unlock()
	return mock.CreateImageRequestFunc(in1)
}

// CreateImageRequestCalls gets all the calls that were made to CreateImageRequest.
// Check the length with:
//     len(mockedec2Client.CreateImageRequestCalls())
func (mock *ec2ClientMock) CreateImageRequestCalls() []struct {
	In1 *ec2.CreateImageInput
} {
	var calls []struct {
		In1 *ec2.CreateImageInput
	}
	lockec2ClientMockCreateImageRequest.RLock()
	calls = mock.calls.CreateImageRequest
	lockec2ClientMockCreateImageRequest.RUnlock()
	return calls
}

// CreateImageWithContext calls CreateImageWithContextFunc.
func (mock *ec2ClientMock) CreateImageWithContext(in1 context.Context, in2 *ec2.CreateImageInput, in3 ...request.Option) (*ec2.CreateImageOutput, error) {
	if mock.CreateImageWithContextFunc == nil {
		panic("ec2ClientMock.CreateImageWithContextFunc: method is nil but ec2Client.CreateImageWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateImageInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateImageWithContext.Lock()
	mock.calls.CreateImageWithContext = append(mock.calls.CreateImageWithContext, callInfo)
	lockec2ClientMockCreateImageWithContext.Unlock()
	return mock.CreateImageWithContextFunc(in1, in2, in3...)
}

// CreateImageWithContextCalls gets all the calls that were made to CreateImageWithContext.
// Check the length with:
//     len(mockedec2Client.CreateImageWithContextCalls())
func (mock *ec2ClientMock) CreateImageWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateImageInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateImageInput
		In3 []request.Option
	}
	lockec2ClientMockCreateImageWithContext.RLock()
	calls = mock.calls.CreateImageWithContext
	lockec2ClientMockCreateImageWithContext.RUnlock()
	return calls
}

// CreateInstanceExportTask calls CreateInstanceExportTaskFunc.
func (mock *ec2ClientMock) CreateInstanceExportTask(in1 *ec2.CreateInstanceExportTaskInput) (*ec2.CreateInstanceExportTaskOutput, error) {
	if mock.CreateInstanceExportTaskFunc == nil {
		panic("ec2ClientMock.CreateInstanceExportTaskFunc: method is nil but ec2Client.CreateInstanceExportTask was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateInstanceExportTaskInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateInstanceExportTask.Lock()
	mock.calls.CreateInstanceExportTask = append(mock.calls.CreateInstanceExportTask, callInfo)
	lockec2ClientMockCreateInstanceExportTask.Unlock()
	return mock.CreateInstanceExportTaskFunc(in1)
}

// CreateInstanceExportTaskCalls gets all the calls that were made to CreateInstanceExportTask.
// Check the length with:
//     len(mockedec2Client.CreateInstanceExportTaskCalls())
func (mock *ec2ClientMock) CreateInstanceExportTaskCalls() []struct {
	In1 *ec2.CreateInstanceExportTaskInput
} {
	var calls []struct {
		In1 *ec2.CreateInstanceExportTaskInput
	}
	lockec2ClientMockCreateInstanceExportTask.RLock()
	calls = mock.calls.CreateInstanceExportTask
	lockec2ClientMockCreateInstanceExportTask.RUnlock()
	return calls
}

// CreateInstanceExportTaskRequest calls CreateInstanceExportTaskRequestFunc.
func (mock *ec2ClientMock) CreateInstanceExportTaskRequest(in1 *ec2.CreateInstanceExportTaskInput) (*request.Request, *ec2.CreateInstanceExportTaskOutput) {
	if mock.CreateInstanceExportTaskRequestFunc == nil {
		panic("ec2ClientMock.CreateInstanceExportTaskRequestFunc: method is nil but ec2Client.CreateInstanceExportTaskRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateInstanceExportTaskInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateInstanceExportTaskRequest.Lock()
	mock.calls.CreateInstanceExportTaskRequest = append(mock.calls.CreateInstanceExportTaskRequest, callInfo)
	lockec2ClientMockCreateInstanceExportTaskRequest.Unlock()
	return mock.CreateInstanceExportTaskRequestFunc(in1)
}

// CreateInstanceExportTaskRequestCalls gets all the calls that were made to CreateInstanceExportTaskRequest.
// Check the length with:
//     len(mockedec2Client.CreateInstanceExportTaskRequestCalls())
func (mock *ec2ClientMock) CreateInstanceExportTaskRequestCalls() []struct {
	In1 *ec2.CreateInstanceExportTaskInput
} {
	var calls []struct {
		In1 *ec2.CreateInstanceExportTaskInput
	}
	lockec2ClientMockCreateInstanceExportTaskRequest.RLock()
	calls = mock.calls.CreateInstanceExportTaskRequest
	lockec2ClientMockCreateInstanceExportTaskRequest.RUnlock()
	return calls
}

// CreateInstanceExportTaskWithContext calls CreateInstanceExportTaskWithContextFunc.
func (mock *ec2ClientMock) CreateInstanceExportTaskWithContext(in1 context.Context, in2 *ec2.CreateInstanceExportTaskInput, in3 ...request.Option) (*ec2.CreateInstanceExportTaskOutput, error) {
	if mock.CreateInstanceExportTaskWithContextFunc == nil {
		panic("ec2ClientMock.CreateInstanceExportTaskWithContextFunc: method is nil but ec2Client.CreateInstanceExportTaskWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateInstanceExportTaskInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateInstanceExportTaskWithContext.Lock()
	mock.calls.CreateInstanceExportTaskWithContext = append(mock.calls.CreateInstanceExportTaskWithContext, callInfo)
	lockec2ClientMockCreateInstanceExportTaskWithContext.Unlock()
	return mock.CreateInstanceExportTaskWithContextFunc(in1, in2, in3...)
}

// CreateInstanceExportTaskWithContextCalls gets all the calls that were made to CreateInstanceExportTaskWithContext.
// Check the length with:
//     len(mockedec2Client.CreateInstanceExportTaskWithContextCalls())
func (mock *ec2ClientMock) CreateInstanceExportTaskWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateInstanceExportTaskInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateInstanceExportTaskInput
		In3 []request.Option
	}
	lockec2ClientMockCreateInstanceExportTaskWithContext.RLock()
	calls = mock.calls.CreateInstanceExportTaskWithContext
	lockec2ClientMockCreateInstanceExportTaskWithContext.RUnlock()
	return calls
}

// CreateInternetGateway calls CreateInternetGatewayFunc.
func (mock *ec2ClientMock) CreateInternetGateway(in1 *ec2.CreateInternetGatewayInput) (*ec2.CreateInternetGatewayOutput, error) {
	if mock.CreateInternetGatewayFunc == nil {
		panic("ec2ClientMock.CreateInternetGatewayFunc: method is nil but ec2Client.CreateInternetGateway was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateInternetGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateInternetGateway.Lock()
	mock.calls.CreateInternetGateway = append(mock.calls.CreateInternetGateway, callInfo)
	lockec2ClientMockCreateInternetGateway.Unlock()
	return mock.CreateInternetGatewayFunc(in1)
}

// CreateInternetGatewayCalls gets all the calls that were made to CreateInternetGateway.
// Check the length with:
//     len(mockedec2Client.CreateInternetGatewayCalls())
func (mock *ec2ClientMock) CreateInternetGatewayCalls() []struct {
	In1 *ec2.CreateInternetGatewayInput
} {
	var calls []struct {
		In1 *ec2.CreateInternetGatewayInput
	}
	lockec2ClientMockCreateInternetGateway.RLock()
	calls = mock.calls.CreateInternetGateway
	lockec2ClientMockCreateInternetGateway.RUnlock()
	return calls
}

// CreateInternetGatewayRequest calls CreateInternetGatewayRequestFunc.
func (mock *ec2ClientMock) CreateInternetGatewayRequest(in1 *ec2.CreateInternetGatewayInput) (*request.Request, *ec2.CreateInternetGatewayOutput) {
	if mock.CreateInternetGatewayRequestFunc == nil {
		panic("ec2ClientMock.CreateInternetGatewayRequestFunc: method is nil but ec2Client.CreateInternetGatewayRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateInternetGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateInternetGatewayRequest.Lock()
	mock.calls.CreateInternetGatewayRequest = append(mock.calls.CreateInternetGatewayRequest, callInfo)
	lockec2ClientMockCreateInternetGatewayRequest.Unlock()
	return mock.CreateInternetGatewayRequestFunc(in1)
}

// CreateInternetGatewayRequestCalls gets all the calls that were made to CreateInternetGatewayRequest.
// Check the length with:
//     len(mockedec2Client.CreateInternetGatewayRequestCalls())
func (mock *ec2ClientMock) CreateInternetGatewayRequestCalls() []struct {
	In1 *ec2.CreateInternetGatewayInput
} {
	var calls []struct {
		In1 *ec2.CreateInternetGatewayInput
	}
	lockec2ClientMockCreateInternetGatewayRequest.RLock()
	calls = mock.calls.CreateInternetGatewayRequest
	lockec2ClientMockCreateInternetGatewayRequest.RUnlock()
	return calls
}

// CreateInternetGatewayWithContext calls CreateInternetGatewayWithContextFunc.
func (mock *ec2ClientMock) CreateInternetGatewayWithContext(in1 context.Context, in2 *ec2.CreateInternetGatewayInput, in3 ...request.Option) (*ec2.CreateInternetGatewayOutput, error) {
	if mock.CreateInternetGatewayWithContextFunc == nil {
		panic("ec2ClientMock.CreateInternetGatewayWithContextFunc: method is nil but ec2Client.CreateInternetGatewayWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateInternetGatewayInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateInternetGatewayWithContext.Lock()
	mock.calls.CreateInternetGatewayWithContext = append(mock.calls.CreateInternetGatewayWithContext, callInfo)
	lockec2ClientMockCreateInternetGatewayWithContext.Unlock()
	return mock.CreateInternetGatewayWithContextFunc(in1, in2, in3...)
}

// CreateInternetGatewayWithContextCalls gets all the calls that were made to CreateInternetGatewayWithContext.
// Check the length with:
//     len(mockedec2Client.CreateInternetGatewayWithContextCalls())
func (mock *ec2ClientMock) CreateInternetGatewayWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateInternetGatewayInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateInternetGatewayInput
		In3 []request.Option
	}
	lockec2ClientMockCreateInternetGatewayWithContext.RLock()
	calls = mock.calls.CreateInternetGatewayWithContext
	lockec2ClientMockCreateInternetGatewayWithContext.RUnlock()
	return calls
}

// CreateKeyPair calls CreateKeyPairFunc.
func (mock *ec2ClientMock) CreateKeyPair(in1 *ec2.CreateKeyPairInput) (*ec2.CreateKeyPairOutput, error) {
	if mock.CreateKeyPairFunc == nil {
		panic("ec2ClientMock.CreateKeyPairFunc: method is nil but ec2Client.CreateKeyPair was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateKeyPairInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateKeyPair.Lock()
	mock.calls.CreateKeyPair = append(mock.calls.CreateKeyPair, callInfo)
	lockec2ClientMockCreateKeyPair.Unlock()
	return mock.CreateKeyPairFunc(in1)
}

// CreateKeyPairCalls gets all the calls that were made to CreateKeyPair.
// Check the length with:
//     len(mockedec2Client.CreateKeyPairCalls())
func (mock *ec2ClientMock) CreateKeyPairCalls() []struct {
	In1 *ec2.CreateKeyPairInput
} {
	var calls []struct {
		In1 *ec2.CreateKeyPairInput
	}
	lockec2ClientMockCreateKeyPair.RLock()
	calls = mock.calls.CreateKeyPair
	lockec2ClientMockCreateKeyPair.RUnlock()
	return calls
}

// CreateKeyPairRequest calls CreateKeyPairRequestFunc.
func (mock *ec2ClientMock) CreateKeyPairRequest(in1 *ec2.CreateKeyPairInput) (*request.Request, *ec2.CreateKeyPairOutput) {
	if mock.CreateKeyPairRequestFunc == nil {
		panic("ec2ClientMock.CreateKeyPairRequestFunc: method is nil but ec2Client.CreateKeyPairRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateKeyPairInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateKeyPairRequest.Lock()
	mock.calls.CreateKeyPairRequest = append(mock.calls.CreateKeyPairRequest, callInfo)
	lockec2ClientMockCreateKeyPairRequest.Unlock()
	return mock.CreateKeyPairRequestFunc(in1)
}

// CreateKeyPairRequestCalls gets all the calls that were made to CreateKeyPairRequest.
// Check the length with:
//     len(mockedec2Client.CreateKeyPairRequestCalls())
func (mock *ec2ClientMock) CreateKeyPairRequestCalls() []struct {
	In1 *ec2.CreateKeyPairInput
} {
	var calls []struct {
		In1 *ec2.CreateKeyPairInput
	}
	lockec2ClientMockCreateKeyPairRequest.RLock()
	calls = mock.calls.CreateKeyPairRequest
	lockec2ClientMockCreateKeyPairRequest.RUnlock()
	return calls
}

// CreateKeyPairWithContext calls CreateKeyPairWithContextFunc.
func (mock *ec2ClientMock) CreateKeyPairWithContext(in1 context.Context, in2 *ec2.CreateKeyPairInput, in3 ...request.Option) (*ec2.CreateKeyPairOutput, error) {
	if mock.CreateKeyPairWithContextFunc == nil {
		panic("ec2ClientMock.CreateKeyPairWithContextFunc: method is nil but ec2Client.CreateKeyPairWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateKeyPairInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateKeyPairWithContext.Lock()
	mock.calls.CreateKeyPairWithContext = append(mock.calls.CreateKeyPairWithContext, callInfo)
	lockec2ClientMockCreateKeyPairWithContext.Unlock()
	return mock.CreateKeyPairWithContextFunc(in1, in2, in3...)
}

// CreateKeyPairWithContextCalls gets all the calls that were made to CreateKeyPairWithContext.
// Check the length with:
//     len(mockedec2Client.CreateKeyPairWithContextCalls())
func (mock *ec2ClientMock) CreateKeyPairWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateKeyPairInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateKeyPairInput
		In3 []request.Option
	}
	lockec2ClientMockCreateKeyPairWithContext.RLock()
	calls = mock.calls.CreateKeyPairWithContext
	lockec2ClientMockCreateKeyPairWithContext.RUnlock()
	return calls
}

// CreateLaunchTemplate calls CreateLaunchTemplateFunc.
func (mock *ec2ClientMock) CreateLaunchTemplate(in1 *ec2.CreateLaunchTemplateInput) (*ec2.CreateLaunchTemplateOutput, error) {
	if mock.CreateLaunchTemplateFunc == nil {
		panic("ec2ClientMock.CreateLaunchTemplateFunc: method is nil but ec2Client.CreateLaunchTemplate was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateLaunchTemplateInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateLaunchTemplate.Lock()
	mock.calls.CreateLaunchTemplate = append(mock.calls.CreateLaunchTemplate, callInfo)
	lockec2ClientMockCreateLaunchTemplate.Unlock()
	return mock.CreateLaunchTemplateFunc(in1)
}

// CreateLaunchTemplateCalls gets all the calls that were made to CreateLaunchTemplate.
// Check the length with:
//     len(mockedec2Client.CreateLaunchTemplateCalls())
func (mock *ec2ClientMock) CreateLaunchTemplateCalls() []struct {
	In1 *ec2.CreateLaunchTemplateInput
} {
	var calls []struct {
		In1 *ec2.CreateLaunchTemplateInput
	}
	lockec2ClientMockCreateLaunchTemplate.RLock()
	calls = mock.calls.CreateLaunchTemplate
	lockec2ClientMockCreateLaunchTemplate.RUnlock()
	return calls
}

// CreateLaunchTemplateRequest calls CreateLaunchTemplateRequestFunc.
func (mock *ec2ClientMock) CreateLaunchTemplateRequest(in1 *ec2.CreateLaunchTemplateInput) (*request.Request, *ec2.CreateLaunchTemplateOutput) {
	if mock.CreateLaunchTemplateRequestFunc == nil {
		panic("ec2ClientMock.CreateLaunchTemplateRequestFunc: method is nil but ec2Client.CreateLaunchTemplateRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateLaunchTemplateInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateLaunchTemplateRequest.Lock()
	mock.calls.CreateLaunchTemplateRequest = append(mock.calls.CreateLaunchTemplateRequest, callInfo)
	lockec2ClientMockCreateLaunchTemplateRequest.Unlock()
	return mock.CreateLaunchTemplateRequestFunc(in1)
}

// CreateLaunchTemplateRequestCalls gets all the calls that were made to CreateLaunchTemplateRequest.
// Check the length with:
//     len(mockedec2Client.CreateLaunchTemplateRequestCalls())
func (mock *ec2ClientMock) CreateLaunchTemplateRequestCalls() []struct {
	In1 *ec2.CreateLaunchTemplateInput
} {
	var calls []struct {
		In1 *ec2.CreateLaunchTemplateInput
	}
	lockec2ClientMockCreateLaunchTemplateRequest.RLock()
	calls = mock.calls.CreateLaunchTemplateRequest
	lockec2ClientMockCreateLaunchTemplateRequest.RUnlock()
	return calls
}

// CreateLaunchTemplateVersion calls CreateLaunchTemplateVersionFunc.
func (mock *ec2ClientMock) CreateLaunchTemplateVersion(in1 *ec2.CreateLaunchTemplateVersionInput) (*ec2.CreateLaunchTemplateVersionOutput, error) {
	if mock.CreateLaunchTemplateVersionFunc == nil {
		panic("ec2ClientMock.CreateLaunchTemplateVersionFunc: method is nil but ec2Client.CreateLaunchTemplateVersion was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateLaunchTemplateVersionInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateLaunchTemplateVersion.Lock()
	mock.calls.CreateLaunchTemplateVersion = append(mock.calls.CreateLaunchTemplateVersion, callInfo)
	lockec2ClientMockCreateLaunchTemplateVersion.Unlock()
	return mock.CreateLaunchTemplateVersionFunc(in1)
}

// CreateLaunchTemplateVersionCalls gets all the calls that were made to CreateLaunchTemplateVersion.
// Check the length with:
//     len(mockedec2Client.CreateLaunchTemplateVersionCalls())
func (mock *ec2ClientMock) CreateLaunchTemplateVersionCalls() []struct {
	In1 *ec2.CreateLaunchTemplateVersionInput
} {
	var calls []struct {
		In1 *ec2.CreateLaunchTemplateVersionInput
	}
	lockec2ClientMockCreateLaunchTemplateVersion.RLock()
	calls = mock.calls.CreateLaunchTemplateVersion
	lockec2ClientMockCreateLaunchTemplateVersion.RUnlock()
	return calls
}

// CreateLaunchTemplateVersionRequest calls CreateLaunchTemplateVersionRequestFunc.
func (mock *ec2ClientMock) CreateLaunchTemplateVersionRequest(in1 *ec2.CreateLaunchTemplateVersionInput) (*request.Request, *ec2.CreateLaunchTemplateVersionOutput) {
	if mock.CreateLaunchTemplateVersionRequestFunc == nil {
		panic("ec2ClientMock.CreateLaunchTemplateVersionRequestFunc: method is nil but ec2Client.CreateLaunchTemplateVersionRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateLaunchTemplateVersionInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateLaunchTemplateVersionRequest.Lock()
	mock.calls.CreateLaunchTemplateVersionRequest = append(mock.calls.CreateLaunchTemplateVersionRequest, callInfo)
	lockec2ClientMockCreateLaunchTemplateVersionRequest.Unlock()
	return mock.CreateLaunchTemplateVersionRequestFunc(in1)
}

// CreateLaunchTemplateVersionRequestCalls gets all the calls that were made to CreateLaunchTemplateVersionRequest.
// Check the length with:
//     len(mockedec2Client.CreateLaunchTemplateVersionRequestCalls())
func (mock *ec2ClientMock) CreateLaunchTemplateVersionRequestCalls() []struct {
	In1 *ec2.CreateLaunchTemplateVersionInput
} {
	var calls []struct {
		In1 *ec2.CreateLaunchTemplateVersionInput
	}
	lockec2ClientMockCreateLaunchTemplateVersionRequest.RLock()
	calls = mock.calls.CreateLaunchTemplateVersionRequest
	lockec2ClientMockCreateLaunchTemplateVersionRequest.RUnlock()
	return calls
}

// CreateLaunchTemplateVersionWithContext calls CreateLaunchTemplateVersionWithContextFunc.
func (mock *ec2ClientMock) CreateLaunchTemplateVersionWithContext(in1 context.Context, in2 *ec2.CreateLaunchTemplateVersionInput, in3 ...request.Option) (*ec2.CreateLaunchTemplateVersionOutput, error) {
	if mock.CreateLaunchTemplateVersionWithContextFunc == nil {
		panic("ec2ClientMock.CreateLaunchTemplateVersionWithContextFunc: method is nil but ec2Client.CreateLaunchTemplateVersionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateLaunchTemplateVersionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateLaunchTemplateVersionWithContext.Lock()
	mock.calls.CreateLaunchTemplateVersionWithContext = append(mock.calls.CreateLaunchTemplateVersionWithContext, callInfo)
	lockec2ClientMockCreateLaunchTemplateVersionWithContext.Unlock()
	return mock.CreateLaunchTemplateVersionWithContextFunc(in1, in2, in3...)
}

// CreateLaunchTemplateVersionWithContextCalls gets all the calls that were made to CreateLaunchTemplateVersionWithContext.
// Check the length with:
//     len(mockedec2Client.CreateLaunchTemplateVersionWithContextCalls())
func (mock *ec2ClientMock) CreateLaunchTemplateVersionWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateLaunchTemplateVersionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateLaunchTemplateVersionInput
		In3 []request.Option
	}
	lockec2ClientMockCreateLaunchTemplateVersionWithContext.RLock()
	calls = mock.calls.CreateLaunchTemplateVersionWithContext
	lockec2ClientMockCreateLaunchTemplateVersionWithContext.RUnlock()
	return calls
}

// CreateLaunchTemplateWithContext calls CreateLaunchTemplateWithContextFunc.
func (mock *ec2ClientMock) CreateLaunchTemplateWithContext(in1 context.Context, in2 *ec2.CreateLaunchTemplateInput, in3 ...request.Option) (*ec2.CreateLaunchTemplateOutput, error) {
	if mock.CreateLaunchTemplateWithContextFunc == nil {
		panic("ec2ClientMock.CreateLaunchTemplateWithContextFunc: method is nil but ec2Client.CreateLaunchTemplateWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateLaunchTemplateInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateLaunchTemplateWithContext.Lock()
	mock.calls.CreateLaunchTemplateWithContext = append(mock.calls.CreateLaunchTemplateWithContext, callInfo)
	lockec2ClientMockCreateLaunchTemplateWithContext.Unlock()
	return mock.CreateLaunchTemplateWithContextFunc(in1, in2, in3...)
}

// CreateLaunchTemplateWithContextCalls gets all the calls that were made to CreateLaunchTemplateWithContext.
// Check the length with:
//     len(mockedec2Client.CreateLaunchTemplateWithContextCalls())
func (mock *ec2ClientMock) CreateLaunchTemplateWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateLaunchTemplateInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateLaunchTemplateInput
		In3 []request.Option
	}
	lockec2ClientMockCreateLaunchTemplateWithContext.RLock()
	calls = mock.calls.CreateLaunchTemplateWithContext
	lockec2ClientMockCreateLaunchTemplateWithContext.RUnlock()
	return calls
}

// CreateLocalGatewayRoute calls CreateLocalGatewayRouteFunc.
func (mock *ec2ClientMock) CreateLocalGatewayRoute(in1 *ec2.CreateLocalGatewayRouteInput) (*ec2.CreateLocalGatewayRouteOutput, error) {
	if mock.CreateLocalGatewayRouteFunc == nil {
		panic("ec2ClientMock.CreateLocalGatewayRouteFunc: method is nil but ec2Client.CreateLocalGatewayRoute was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateLocalGatewayRouteInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateLocalGatewayRoute.Lock()
	mock.calls.CreateLocalGatewayRoute = append(mock.calls.CreateLocalGatewayRoute, callInfo)
	lockec2ClientMockCreateLocalGatewayRoute.Unlock()
	return mock.CreateLocalGatewayRouteFunc(in1)
}

// CreateLocalGatewayRouteCalls gets all the calls that were made to CreateLocalGatewayRoute.
// Check the length with:
//     len(mockedec2Client.CreateLocalGatewayRouteCalls())
func (mock *ec2ClientMock) CreateLocalGatewayRouteCalls() []struct {
	In1 *ec2.CreateLocalGatewayRouteInput
} {
	var calls []struct {
		In1 *ec2.CreateLocalGatewayRouteInput
	}
	lockec2ClientMockCreateLocalGatewayRoute.RLock()
	calls = mock.calls.CreateLocalGatewayRoute
	lockec2ClientMockCreateLocalGatewayRoute.RUnlock()
	return calls
}

// CreateLocalGatewayRouteRequest calls CreateLocalGatewayRouteRequestFunc.
func (mock *ec2ClientMock) CreateLocalGatewayRouteRequest(in1 *ec2.CreateLocalGatewayRouteInput) (*request.Request, *ec2.CreateLocalGatewayRouteOutput) {
	if mock.CreateLocalGatewayRouteRequestFunc == nil {
		panic("ec2ClientMock.CreateLocalGatewayRouteRequestFunc: method is nil but ec2Client.CreateLocalGatewayRouteRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateLocalGatewayRouteInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateLocalGatewayRouteRequest.Lock()
	mock.calls.CreateLocalGatewayRouteRequest = append(mock.calls.CreateLocalGatewayRouteRequest, callInfo)
	lockec2ClientMockCreateLocalGatewayRouteRequest.Unlock()
	return mock.CreateLocalGatewayRouteRequestFunc(in1)
}

// CreateLocalGatewayRouteRequestCalls gets all the calls that were made to CreateLocalGatewayRouteRequest.
// Check the length with:
//     len(mockedec2Client.CreateLocalGatewayRouteRequestCalls())
func (mock *ec2ClientMock) CreateLocalGatewayRouteRequestCalls() []struct {
	In1 *ec2.CreateLocalGatewayRouteInput
} {
	var calls []struct {
		In1 *ec2.CreateLocalGatewayRouteInput
	}
	lockec2ClientMockCreateLocalGatewayRouteRequest.RLock()
	calls = mock.calls.CreateLocalGatewayRouteRequest
	lockec2ClientMockCreateLocalGatewayRouteRequest.RUnlock()
	return calls
}

// CreateLocalGatewayRouteTableVpcAssociation calls CreateLocalGatewayRouteTableVpcAssociationFunc.
func (mock *ec2ClientMock) CreateLocalGatewayRouteTableVpcAssociation(in1 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput) (*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput, error) {
	if mock.CreateLocalGatewayRouteTableVpcAssociationFunc == nil {
		panic("ec2ClientMock.CreateLocalGatewayRouteTableVpcAssociationFunc: method is nil but ec2Client.CreateLocalGatewayRouteTableVpcAssociation was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateLocalGatewayRouteTableVpcAssociation.Lock()
	mock.calls.CreateLocalGatewayRouteTableVpcAssociation = append(mock.calls.CreateLocalGatewayRouteTableVpcAssociation, callInfo)
	lockec2ClientMockCreateLocalGatewayRouteTableVpcAssociation.Unlock()
	return mock.CreateLocalGatewayRouteTableVpcAssociationFunc(in1)
}

// CreateLocalGatewayRouteTableVpcAssociationCalls gets all the calls that were made to CreateLocalGatewayRouteTableVpcAssociation.
// Check the length with:
//     len(mockedec2Client.CreateLocalGatewayRouteTableVpcAssociationCalls())
func (mock *ec2ClientMock) CreateLocalGatewayRouteTableVpcAssociationCalls() []struct {
	In1 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput
} {
	var calls []struct {
		In1 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput
	}
	lockec2ClientMockCreateLocalGatewayRouteTableVpcAssociation.RLock()
	calls = mock.calls.CreateLocalGatewayRouteTableVpcAssociation
	lockec2ClientMockCreateLocalGatewayRouteTableVpcAssociation.RUnlock()
	return calls
}

// CreateLocalGatewayRouteTableVpcAssociationRequest calls CreateLocalGatewayRouteTableVpcAssociationRequestFunc.
func (mock *ec2ClientMock) CreateLocalGatewayRouteTableVpcAssociationRequest(in1 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput) (*request.Request, *ec2.CreateLocalGatewayRouteTableVpcAssociationOutput) {
	if mock.CreateLocalGatewayRouteTableVpcAssociationRequestFunc == nil {
		panic("ec2ClientMock.CreateLocalGatewayRouteTableVpcAssociationRequestFunc: method is nil but ec2Client.CreateLocalGatewayRouteTableVpcAssociationRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateLocalGatewayRouteTableVpcAssociationRequest.Lock()
	mock.calls.CreateLocalGatewayRouteTableVpcAssociationRequest = append(mock.calls.CreateLocalGatewayRouteTableVpcAssociationRequest, callInfo)
	lockec2ClientMockCreateLocalGatewayRouteTableVpcAssociationRequest.Unlock()
	return mock.CreateLocalGatewayRouteTableVpcAssociationRequestFunc(in1)
}

// CreateLocalGatewayRouteTableVpcAssociationRequestCalls gets all the calls that were made to CreateLocalGatewayRouteTableVpcAssociationRequest.
// Check the length with:
//     len(mockedec2Client.CreateLocalGatewayRouteTableVpcAssociationRequestCalls())
func (mock *ec2ClientMock) CreateLocalGatewayRouteTableVpcAssociationRequestCalls() []struct {
	In1 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput
} {
	var calls []struct {
		In1 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput
	}
	lockec2ClientMockCreateLocalGatewayRouteTableVpcAssociationRequest.RLock()
	calls = mock.calls.CreateLocalGatewayRouteTableVpcAssociationRequest
	lockec2ClientMockCreateLocalGatewayRouteTableVpcAssociationRequest.RUnlock()
	return calls
}

// CreateLocalGatewayRouteTableVpcAssociationWithContext calls CreateLocalGatewayRouteTableVpcAssociationWithContextFunc.
func (mock *ec2ClientMock) CreateLocalGatewayRouteTableVpcAssociationWithContext(in1 context.Context, in2 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput, in3 ...request.Option) (*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput, error) {
	if mock.CreateLocalGatewayRouteTableVpcAssociationWithContextFunc == nil {
		panic("ec2ClientMock.CreateLocalGatewayRouteTableVpcAssociationWithContextFunc: method is nil but ec2Client.CreateLocalGatewayRouteTableVpcAssociationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateLocalGatewayRouteTableVpcAssociationWithContext.Lock()
	mock.calls.CreateLocalGatewayRouteTableVpcAssociationWithContext = append(mock.calls.CreateLocalGatewayRouteTableVpcAssociationWithContext, callInfo)
	lockec2ClientMockCreateLocalGatewayRouteTableVpcAssociationWithContext.Unlock()
	return mock.CreateLocalGatewayRouteTableVpcAssociationWithContextFunc(in1, in2, in3...)
}

// CreateLocalGatewayRouteTableVpcAssociationWithContextCalls gets all the calls that were made to CreateLocalGatewayRouteTableVpcAssociationWithContext.
// Check the length with:
//     len(mockedec2Client.CreateLocalGatewayRouteTableVpcAssociationWithContextCalls())
func (mock *ec2ClientMock) CreateLocalGatewayRouteTableVpcAssociationWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput
		In3 []request.Option
	}
	lockec2ClientMockCreateLocalGatewayRouteTableVpcAssociationWithContext.RLock()
	calls = mock.calls.CreateLocalGatewayRouteTableVpcAssociationWithContext
	lockec2ClientMockCreateLocalGatewayRouteTableVpcAssociationWithContext.RUnlock()
	return calls
}

// CreateLocalGatewayRouteWithContext calls CreateLocalGatewayRouteWithContextFunc.
func (mock *ec2ClientMock) CreateLocalGatewayRouteWithContext(in1 context.Context, in2 *ec2.CreateLocalGatewayRouteInput, in3 ...request.Option) (*ec2.CreateLocalGatewayRouteOutput, error) {
	if mock.CreateLocalGatewayRouteWithContextFunc == nil {
		panic("ec2ClientMock.CreateLocalGatewayRouteWithContextFunc: method is nil but ec2Client.CreateLocalGatewayRouteWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateLocalGatewayRouteInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateLocalGatewayRouteWithContext.Lock()
	mock.calls.CreateLocalGatewayRouteWithContext = append(mock.calls.CreateLocalGatewayRouteWithContext, callInfo)
	lockec2ClientMockCreateLocalGatewayRouteWithContext.Unlock()
	return mock.CreateLocalGatewayRouteWithContextFunc(in1, in2, in3...)
}

// CreateLocalGatewayRouteWithContextCalls gets all the calls that were made to CreateLocalGatewayRouteWithContext.
// Check the length with:
//     len(mockedec2Client.CreateLocalGatewayRouteWithContextCalls())
func (mock *ec2ClientMock) CreateLocalGatewayRouteWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateLocalGatewayRouteInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateLocalGatewayRouteInput
		In3 []request.Option
	}
	lockec2ClientMockCreateLocalGatewayRouteWithContext.RLock()
	calls = mock.calls.CreateLocalGatewayRouteWithContext
	lockec2ClientMockCreateLocalGatewayRouteWithContext.RUnlock()
	return calls
}

// CreateNatGateway calls CreateNatGatewayFunc.
func (mock *ec2ClientMock) CreateNatGateway(in1 *ec2.CreateNatGatewayInput) (*ec2.CreateNatGatewayOutput, error) {
	if mock.CreateNatGatewayFunc == nil {
		panic("ec2ClientMock.CreateNatGatewayFunc: method is nil but ec2Client.CreateNatGateway was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateNatGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateNatGateway.Lock()
	mock.calls.CreateNatGateway = append(mock.calls.CreateNatGateway, callInfo)
	lockec2ClientMockCreateNatGateway.Unlock()
	return mock.CreateNatGatewayFunc(in1)
}

// CreateNatGatewayCalls gets all the calls that were made to CreateNatGateway.
// Check the length with:
//     len(mockedec2Client.CreateNatGatewayCalls())
func (mock *ec2ClientMock) CreateNatGatewayCalls() []struct {
	In1 *ec2.CreateNatGatewayInput
} {
	var calls []struct {
		In1 *ec2.CreateNatGatewayInput
	}
	lockec2ClientMockCreateNatGateway.RLock()
	calls = mock.calls.CreateNatGateway
	lockec2ClientMockCreateNatGateway.RUnlock()
	return calls
}

// CreateNatGatewayRequest calls CreateNatGatewayRequestFunc.
func (mock *ec2ClientMock) CreateNatGatewayRequest(in1 *ec2.CreateNatGatewayInput) (*request.Request, *ec2.CreateNatGatewayOutput) {
	if mock.CreateNatGatewayRequestFunc == nil {
		panic("ec2ClientMock.CreateNatGatewayRequestFunc: method is nil but ec2Client.CreateNatGatewayRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateNatGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateNatGatewayRequest.Lock()
	mock.calls.CreateNatGatewayRequest = append(mock.calls.CreateNatGatewayRequest, callInfo)
	lockec2ClientMockCreateNatGatewayRequest.Unlock()
	return mock.CreateNatGatewayRequestFunc(in1)
}

// CreateNatGatewayRequestCalls gets all the calls that were made to CreateNatGatewayRequest.
// Check the length with:
//     len(mockedec2Client.CreateNatGatewayRequestCalls())
func (mock *ec2ClientMock) CreateNatGatewayRequestCalls() []struct {
	In1 *ec2.CreateNatGatewayInput
} {
	var calls []struct {
		In1 *ec2.CreateNatGatewayInput
	}
	lockec2ClientMockCreateNatGatewayRequest.RLock()
	calls = mock.calls.CreateNatGatewayRequest
	lockec2ClientMockCreateNatGatewayRequest.RUnlock()
	return calls
}

// CreateNatGatewayWithContext calls CreateNatGatewayWithContextFunc.
func (mock *ec2ClientMock) CreateNatGatewayWithContext(in1 context.Context, in2 *ec2.CreateNatGatewayInput, in3 ...request.Option) (*ec2.CreateNatGatewayOutput, error) {
	if mock.CreateNatGatewayWithContextFunc == nil {
		panic("ec2ClientMock.CreateNatGatewayWithContextFunc: method is nil but ec2Client.CreateNatGatewayWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateNatGatewayInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateNatGatewayWithContext.Lock()
	mock.calls.CreateNatGatewayWithContext = append(mock.calls.CreateNatGatewayWithContext, callInfo)
	lockec2ClientMockCreateNatGatewayWithContext.Unlock()
	return mock.CreateNatGatewayWithContextFunc(in1, in2, in3...)
}

// CreateNatGatewayWithContextCalls gets all the calls that were made to CreateNatGatewayWithContext.
// Check the length with:
//     len(mockedec2Client.CreateNatGatewayWithContextCalls())
func (mock *ec2ClientMock) CreateNatGatewayWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateNatGatewayInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateNatGatewayInput
		In3 []request.Option
	}
	lockec2ClientMockCreateNatGatewayWithContext.RLock()
	calls = mock.calls.CreateNatGatewayWithContext
	lockec2ClientMockCreateNatGatewayWithContext.RUnlock()
	return calls
}

// CreateNetworkAcl calls CreateNetworkAclFunc.
func (mock *ec2ClientMock) CreateNetworkAcl(in1 *ec2.CreateNetworkAclInput) (*ec2.CreateNetworkAclOutput, error) {
	if mock.CreateNetworkAclFunc == nil {
		panic("ec2ClientMock.CreateNetworkAclFunc: method is nil but ec2Client.CreateNetworkAcl was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateNetworkAclInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateNetworkAcl.Lock()
	mock.calls.CreateNetworkAcl = append(mock.calls.CreateNetworkAcl, callInfo)
	lockec2ClientMockCreateNetworkAcl.Unlock()
	return mock.CreateNetworkAclFunc(in1)
}

// CreateNetworkAclCalls gets all the calls that were made to CreateNetworkAcl.
// Check the length with:
//     len(mockedec2Client.CreateNetworkAclCalls())
func (mock *ec2ClientMock) CreateNetworkAclCalls() []struct {
	In1 *ec2.CreateNetworkAclInput
} {
	var calls []struct {
		In1 *ec2.CreateNetworkAclInput
	}
	lockec2ClientMockCreateNetworkAcl.RLock()
	calls = mock.calls.CreateNetworkAcl
	lockec2ClientMockCreateNetworkAcl.RUnlock()
	return calls
}

// CreateNetworkAclEntry calls CreateNetworkAclEntryFunc.
func (mock *ec2ClientMock) CreateNetworkAclEntry(in1 *ec2.CreateNetworkAclEntryInput) (*ec2.CreateNetworkAclEntryOutput, error) {
	if mock.CreateNetworkAclEntryFunc == nil {
		panic("ec2ClientMock.CreateNetworkAclEntryFunc: method is nil but ec2Client.CreateNetworkAclEntry was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateNetworkAclEntryInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateNetworkAclEntry.Lock()
	mock.calls.CreateNetworkAclEntry = append(mock.calls.CreateNetworkAclEntry, callInfo)
	lockec2ClientMockCreateNetworkAclEntry.Unlock()
	return mock.CreateNetworkAclEntryFunc(in1)
}

// CreateNetworkAclEntryCalls gets all the calls that were made to CreateNetworkAclEntry.
// Check the length with:
//     len(mockedec2Client.CreateNetworkAclEntryCalls())
func (mock *ec2ClientMock) CreateNetworkAclEntryCalls() []struct {
	In1 *ec2.CreateNetworkAclEntryInput
} {
	var calls []struct {
		In1 *ec2.CreateNetworkAclEntryInput
	}
	lockec2ClientMockCreateNetworkAclEntry.RLock()
	calls = mock.calls.CreateNetworkAclEntry
	lockec2ClientMockCreateNetworkAclEntry.RUnlock()
	return calls
}

// CreateNetworkAclEntryRequest calls CreateNetworkAclEntryRequestFunc.
func (mock *ec2ClientMock) CreateNetworkAclEntryRequest(in1 *ec2.CreateNetworkAclEntryInput) (*request.Request, *ec2.CreateNetworkAclEntryOutput) {
	if mock.CreateNetworkAclEntryRequestFunc == nil {
		panic("ec2ClientMock.CreateNetworkAclEntryRequestFunc: method is nil but ec2Client.CreateNetworkAclEntryRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateNetworkAclEntryInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateNetworkAclEntryRequest.Lock()
	mock.calls.CreateNetworkAclEntryRequest = append(mock.calls.CreateNetworkAclEntryRequest, callInfo)
	lockec2ClientMockCreateNetworkAclEntryRequest.Unlock()
	return mock.CreateNetworkAclEntryRequestFunc(in1)
}

// CreateNetworkAclEntryRequestCalls gets all the calls that were made to CreateNetworkAclEntryRequest.
// Check the length with:
//     len(mockedec2Client.CreateNetworkAclEntryRequestCalls())
func (mock *ec2ClientMock) CreateNetworkAclEntryRequestCalls() []struct {
	In1 *ec2.CreateNetworkAclEntryInput
} {
	var calls []struct {
		In1 *ec2.CreateNetworkAclEntryInput
	}
	lockec2ClientMockCreateNetworkAclEntryRequest.RLock()
	calls = mock.calls.CreateNetworkAclEntryRequest
	lockec2ClientMockCreateNetworkAclEntryRequest.RUnlock()
	return calls
}

// CreateNetworkAclEntryWithContext calls CreateNetworkAclEntryWithContextFunc.
func (mock *ec2ClientMock) CreateNetworkAclEntryWithContext(in1 context.Context, in2 *ec2.CreateNetworkAclEntryInput, in3 ...request.Option) (*ec2.CreateNetworkAclEntryOutput, error) {
	if mock.CreateNetworkAclEntryWithContextFunc == nil {
		panic("ec2ClientMock.CreateNetworkAclEntryWithContextFunc: method is nil but ec2Client.CreateNetworkAclEntryWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateNetworkAclEntryInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateNetworkAclEntryWithContext.Lock()
	mock.calls.CreateNetworkAclEntryWithContext = append(mock.calls.CreateNetworkAclEntryWithContext, callInfo)
	lockec2ClientMockCreateNetworkAclEntryWithContext.Unlock()
	return mock.CreateNetworkAclEntryWithContextFunc(in1, in2, in3...)
}

// CreateNetworkAclEntryWithContextCalls gets all the calls that were made to CreateNetworkAclEntryWithContext.
// Check the length with:
//     len(mockedec2Client.CreateNetworkAclEntryWithContextCalls())
func (mock *ec2ClientMock) CreateNetworkAclEntryWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateNetworkAclEntryInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateNetworkAclEntryInput
		In3 []request.Option
	}
	lockec2ClientMockCreateNetworkAclEntryWithContext.RLock()
	calls = mock.calls.CreateNetworkAclEntryWithContext
	lockec2ClientMockCreateNetworkAclEntryWithContext.RUnlock()
	return calls
}

// CreateNetworkAclRequest calls CreateNetworkAclRequestFunc.
func (mock *ec2ClientMock) CreateNetworkAclRequest(in1 *ec2.CreateNetworkAclInput) (*request.Request, *ec2.CreateNetworkAclOutput) {
	if mock.CreateNetworkAclRequestFunc == nil {
		panic("ec2ClientMock.CreateNetworkAclRequestFunc: method is nil but ec2Client.CreateNetworkAclRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateNetworkAclInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateNetworkAclRequest.Lock()
	mock.calls.CreateNetworkAclRequest = append(mock.calls.CreateNetworkAclRequest, callInfo)
	lockec2ClientMockCreateNetworkAclRequest.Unlock()
	return mock.CreateNetworkAclRequestFunc(in1)
}

// CreateNetworkAclRequestCalls gets all the calls that were made to CreateNetworkAclRequest.
// Check the length with:
//     len(mockedec2Client.CreateNetworkAclRequestCalls())
func (mock *ec2ClientMock) CreateNetworkAclRequestCalls() []struct {
	In1 *ec2.CreateNetworkAclInput
} {
	var calls []struct {
		In1 *ec2.CreateNetworkAclInput
	}
	lockec2ClientMockCreateNetworkAclRequest.RLock()
	calls = mock.calls.CreateNetworkAclRequest
	lockec2ClientMockCreateNetworkAclRequest.RUnlock()
	return calls
}

// CreateNetworkAclWithContext calls CreateNetworkAclWithContextFunc.
func (mock *ec2ClientMock) CreateNetworkAclWithContext(in1 context.Context, in2 *ec2.CreateNetworkAclInput, in3 ...request.Option) (*ec2.CreateNetworkAclOutput, error) {
	if mock.CreateNetworkAclWithContextFunc == nil {
		panic("ec2ClientMock.CreateNetworkAclWithContextFunc: method is nil but ec2Client.CreateNetworkAclWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateNetworkAclInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateNetworkAclWithContext.Lock()
	mock.calls.CreateNetworkAclWithContext = append(mock.calls.CreateNetworkAclWithContext, callInfo)
	lockec2ClientMockCreateNetworkAclWithContext.Unlock()
	return mock.CreateNetworkAclWithContextFunc(in1, in2, in3...)
}

// CreateNetworkAclWithContextCalls gets all the calls that were made to CreateNetworkAclWithContext.
// Check the length with:
//     len(mockedec2Client.CreateNetworkAclWithContextCalls())
func (mock *ec2ClientMock) CreateNetworkAclWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateNetworkAclInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateNetworkAclInput
		In3 []request.Option
	}
	lockec2ClientMockCreateNetworkAclWithContext.RLock()
	calls = mock.calls.CreateNetworkAclWithContext
	lockec2ClientMockCreateNetworkAclWithContext.RUnlock()
	return calls
}

// CreateNetworkInterface calls CreateNetworkInterfaceFunc.
func (mock *ec2ClientMock) CreateNetworkInterface(in1 *ec2.CreateNetworkInterfaceInput) (*ec2.CreateNetworkInterfaceOutput, error) {
	if mock.CreateNetworkInterfaceFunc == nil {
		panic("ec2ClientMock.CreateNetworkInterfaceFunc: method is nil but ec2Client.CreateNetworkInterface was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateNetworkInterfaceInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateNetworkInterface.Lock()
	mock.calls.CreateNetworkInterface = append(mock.calls.CreateNetworkInterface, callInfo)
	lockec2ClientMockCreateNetworkInterface.Unlock()
	return mock.CreateNetworkInterfaceFunc(in1)
}

// CreateNetworkInterfaceCalls gets all the calls that were made to CreateNetworkInterface.
// Check the length with:
//     len(mockedec2Client.CreateNetworkInterfaceCalls())
func (mock *ec2ClientMock) CreateNetworkInterfaceCalls() []struct {
	In1 *ec2.CreateNetworkInterfaceInput
} {
	var calls []struct {
		In1 *ec2.CreateNetworkInterfaceInput
	}
	lockec2ClientMockCreateNetworkInterface.RLock()
	calls = mock.calls.CreateNetworkInterface
	lockec2ClientMockCreateNetworkInterface.RUnlock()
	return calls
}

// CreateNetworkInterfacePermission calls CreateNetworkInterfacePermissionFunc.
func (mock *ec2ClientMock) CreateNetworkInterfacePermission(in1 *ec2.CreateNetworkInterfacePermissionInput) (*ec2.CreateNetworkInterfacePermissionOutput, error) {
	if mock.CreateNetworkInterfacePermissionFunc == nil {
		panic("ec2ClientMock.CreateNetworkInterfacePermissionFunc: method is nil but ec2Client.CreateNetworkInterfacePermission was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateNetworkInterfacePermissionInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateNetworkInterfacePermission.Lock()
	mock.calls.CreateNetworkInterfacePermission = append(mock.calls.CreateNetworkInterfacePermission, callInfo)
	lockec2ClientMockCreateNetworkInterfacePermission.Unlock()
	return mock.CreateNetworkInterfacePermissionFunc(in1)
}

// CreateNetworkInterfacePermissionCalls gets all the calls that were made to CreateNetworkInterfacePermission.
// Check the length with:
//     len(mockedec2Client.CreateNetworkInterfacePermissionCalls())
func (mock *ec2ClientMock) CreateNetworkInterfacePermissionCalls() []struct {
	In1 *ec2.CreateNetworkInterfacePermissionInput
} {
	var calls []struct {
		In1 *ec2.CreateNetworkInterfacePermissionInput
	}
	lockec2ClientMockCreateNetworkInterfacePermission.RLock()
	calls = mock.calls.CreateNetworkInterfacePermission
	lockec2ClientMockCreateNetworkInterfacePermission.RUnlock()
	return calls
}

// CreateNetworkInterfacePermissionRequest calls CreateNetworkInterfacePermissionRequestFunc.
func (mock *ec2ClientMock) CreateNetworkInterfacePermissionRequest(in1 *ec2.CreateNetworkInterfacePermissionInput) (*request.Request, *ec2.CreateNetworkInterfacePermissionOutput) {
	if mock.CreateNetworkInterfacePermissionRequestFunc == nil {
		panic("ec2ClientMock.CreateNetworkInterfacePermissionRequestFunc: method is nil but ec2Client.CreateNetworkInterfacePermissionRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateNetworkInterfacePermissionInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateNetworkInterfacePermissionRequest.Lock()
	mock.calls.CreateNetworkInterfacePermissionRequest = append(mock.calls.CreateNetworkInterfacePermissionRequest, callInfo)
	lockec2ClientMockCreateNetworkInterfacePermissionRequest.Unlock()
	return mock.CreateNetworkInterfacePermissionRequestFunc(in1)
}

// CreateNetworkInterfacePermissionRequestCalls gets all the calls that were made to CreateNetworkInterfacePermissionRequest.
// Check the length with:
//     len(mockedec2Client.CreateNetworkInterfacePermissionRequestCalls())
func (mock *ec2ClientMock) CreateNetworkInterfacePermissionRequestCalls() []struct {
	In1 *ec2.CreateNetworkInterfacePermissionInput
} {
	var calls []struct {
		In1 *ec2.CreateNetworkInterfacePermissionInput
	}
	lockec2ClientMockCreateNetworkInterfacePermissionRequest.RLock()
	calls = mock.calls.CreateNetworkInterfacePermissionRequest
	lockec2ClientMockCreateNetworkInterfacePermissionRequest.RUnlock()
	return calls
}

// CreateNetworkInterfacePermissionWithContext calls CreateNetworkInterfacePermissionWithContextFunc.
func (mock *ec2ClientMock) CreateNetworkInterfacePermissionWithContext(in1 context.Context, in2 *ec2.CreateNetworkInterfacePermissionInput, in3 ...request.Option) (*ec2.CreateNetworkInterfacePermissionOutput, error) {
	if mock.CreateNetworkInterfacePermissionWithContextFunc == nil {
		panic("ec2ClientMock.CreateNetworkInterfacePermissionWithContextFunc: method is nil but ec2Client.CreateNetworkInterfacePermissionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateNetworkInterfacePermissionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateNetworkInterfacePermissionWithContext.Lock()
	mock.calls.CreateNetworkInterfacePermissionWithContext = append(mock.calls.CreateNetworkInterfacePermissionWithContext, callInfo)
	lockec2ClientMockCreateNetworkInterfacePermissionWithContext.Unlock()
	return mock.CreateNetworkInterfacePermissionWithContextFunc(in1, in2, in3...)
}

// CreateNetworkInterfacePermissionWithContextCalls gets all the calls that were made to CreateNetworkInterfacePermissionWithContext.
// Check the length with:
//     len(mockedec2Client.CreateNetworkInterfacePermissionWithContextCalls())
func (mock *ec2ClientMock) CreateNetworkInterfacePermissionWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateNetworkInterfacePermissionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateNetworkInterfacePermissionInput
		In3 []request.Option
	}
	lockec2ClientMockCreateNetworkInterfacePermissionWithContext.RLock()
	calls = mock.calls.CreateNetworkInterfacePermissionWithContext
	lockec2ClientMockCreateNetworkInterfacePermissionWithContext.RUnlock()
	return calls
}

// CreateNetworkInterfaceRequest calls CreateNetworkInterfaceRequestFunc.
func (mock *ec2ClientMock) CreateNetworkInterfaceRequest(in1 *ec2.CreateNetworkInterfaceInput) (*request.Request, *ec2.CreateNetworkInterfaceOutput) {
	if mock.CreateNetworkInterfaceRequestFunc == nil {
		panic("ec2ClientMock.CreateNetworkInterfaceRequestFunc: method is nil but ec2Client.CreateNetworkInterfaceRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateNetworkInterfaceInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateNetworkInterfaceRequest.Lock()
	mock.calls.CreateNetworkInterfaceRequest = append(mock.calls.CreateNetworkInterfaceRequest, callInfo)
	lockec2ClientMockCreateNetworkInterfaceRequest.Unlock()
	return mock.CreateNetworkInterfaceRequestFunc(in1)
}

// CreateNetworkInterfaceRequestCalls gets all the calls that were made to CreateNetworkInterfaceRequest.
// Check the length with:
//     len(mockedec2Client.CreateNetworkInterfaceRequestCalls())
func (mock *ec2ClientMock) CreateNetworkInterfaceRequestCalls() []struct {
	In1 *ec2.CreateNetworkInterfaceInput
} {
	var calls []struct {
		In1 *ec2.CreateNetworkInterfaceInput
	}
	lockec2ClientMockCreateNetworkInterfaceRequest.RLock()
	calls = mock.calls.CreateNetworkInterfaceRequest
	lockec2ClientMockCreateNetworkInterfaceRequest.RUnlock()
	return calls
}

// CreateNetworkInterfaceWithContext calls CreateNetworkInterfaceWithContextFunc.
func (mock *ec2ClientMock) CreateNetworkInterfaceWithContext(in1 context.Context, in2 *ec2.CreateNetworkInterfaceInput, in3 ...request.Option) (*ec2.CreateNetworkInterfaceOutput, error) {
	if mock.CreateNetworkInterfaceWithContextFunc == nil {
		panic("ec2ClientMock.CreateNetworkInterfaceWithContextFunc: method is nil but ec2Client.CreateNetworkInterfaceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateNetworkInterfaceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateNetworkInterfaceWithContext.Lock()
	mock.calls.CreateNetworkInterfaceWithContext = append(mock.calls.CreateNetworkInterfaceWithContext, callInfo)
	lockec2ClientMockCreateNetworkInterfaceWithContext.Unlock()
	return mock.CreateNetworkInterfaceWithContextFunc(in1, in2, in3...)
}

// CreateNetworkInterfaceWithContextCalls gets all the calls that were made to CreateNetworkInterfaceWithContext.
// Check the length with:
//     len(mockedec2Client.CreateNetworkInterfaceWithContextCalls())
func (mock *ec2ClientMock) CreateNetworkInterfaceWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateNetworkInterfaceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateNetworkInterfaceInput
		In3 []request.Option
	}
	lockec2ClientMockCreateNetworkInterfaceWithContext.RLock()
	calls = mock.calls.CreateNetworkInterfaceWithContext
	lockec2ClientMockCreateNetworkInterfaceWithContext.RUnlock()
	return calls
}

// CreatePlacementGroup calls CreatePlacementGroupFunc.
func (mock *ec2ClientMock) CreatePlacementGroup(in1 *ec2.CreatePlacementGroupInput) (*ec2.CreatePlacementGroupOutput, error) {
	if mock.CreatePlacementGroupFunc == nil {
		panic("ec2ClientMock.CreatePlacementGroupFunc: method is nil but ec2Client.CreatePlacementGroup was just called")
	}
	callInfo := struct {
		In1 *ec2.CreatePlacementGroupInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreatePlacementGroup.Lock()
	mock.calls.CreatePlacementGroup = append(mock.calls.CreatePlacementGroup, callInfo)
	lockec2ClientMockCreatePlacementGroup.Unlock()
	return mock.CreatePlacementGroupFunc(in1)
}

// CreatePlacementGroupCalls gets all the calls that were made to CreatePlacementGroup.
// Check the length with:
//     len(mockedec2Client.CreatePlacementGroupCalls())
func (mock *ec2ClientMock) CreatePlacementGroupCalls() []struct {
	In1 *ec2.CreatePlacementGroupInput
} {
	var calls []struct {
		In1 *ec2.CreatePlacementGroupInput
	}
	lockec2ClientMockCreatePlacementGroup.RLock()
	calls = mock.calls.CreatePlacementGroup
	lockec2ClientMockCreatePlacementGroup.RUnlock()
	return calls
}

// CreatePlacementGroupRequest calls CreatePlacementGroupRequestFunc.
func (mock *ec2ClientMock) CreatePlacementGroupRequest(in1 *ec2.CreatePlacementGroupInput) (*request.Request, *ec2.CreatePlacementGroupOutput) {
	if mock.CreatePlacementGroupRequestFunc == nil {
		panic("ec2ClientMock.CreatePlacementGroupRequestFunc: method is nil but ec2Client.CreatePlacementGroupRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreatePlacementGroupInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreatePlacementGroupRequest.Lock()
	mock.calls.CreatePlacementGroupRequest = append(mock.calls.CreatePlacementGroupRequest, callInfo)
	lockec2ClientMockCreatePlacementGroupRequest.Unlock()
	return mock.CreatePlacementGroupRequestFunc(in1)
}

// CreatePlacementGroupRequestCalls gets all the calls that were made to CreatePlacementGroupRequest.
// Check the length with:
//     len(mockedec2Client.CreatePlacementGroupRequestCalls())
func (mock *ec2ClientMock) CreatePlacementGroupRequestCalls() []struct {
	In1 *ec2.CreatePlacementGroupInput
} {
	var calls []struct {
		In1 *ec2.CreatePlacementGroupInput
	}
	lockec2ClientMockCreatePlacementGroupRequest.RLock()
	calls = mock.calls.CreatePlacementGroupRequest
	lockec2ClientMockCreatePlacementGroupRequest.RUnlock()
	return calls
}

// CreatePlacementGroupWithContext calls CreatePlacementGroupWithContextFunc.
func (mock *ec2ClientMock) CreatePlacementGroupWithContext(in1 context.Context, in2 *ec2.CreatePlacementGroupInput, in3 ...request.Option) (*ec2.CreatePlacementGroupOutput, error) {
	if mock.CreatePlacementGroupWithContextFunc == nil {
		panic("ec2ClientMock.CreatePlacementGroupWithContextFunc: method is nil but ec2Client.CreatePlacementGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreatePlacementGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreatePlacementGroupWithContext.Lock()
	mock.calls.CreatePlacementGroupWithContext = append(mock.calls.CreatePlacementGroupWithContext, callInfo)
	lockec2ClientMockCreatePlacementGroupWithContext.Unlock()
	return mock.CreatePlacementGroupWithContextFunc(in1, in2, in3...)
}

// CreatePlacementGroupWithContextCalls gets all the calls that were made to CreatePlacementGroupWithContext.
// Check the length with:
//     len(mockedec2Client.CreatePlacementGroupWithContextCalls())
func (mock *ec2ClientMock) CreatePlacementGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreatePlacementGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreatePlacementGroupInput
		In3 []request.Option
	}
	lockec2ClientMockCreatePlacementGroupWithContext.RLock()
	calls = mock.calls.CreatePlacementGroupWithContext
	lockec2ClientMockCreatePlacementGroupWithContext.RUnlock()
	return calls
}

// CreateReservedInstancesListing calls CreateReservedInstancesListingFunc.
func (mock *ec2ClientMock) CreateReservedInstancesListing(in1 *ec2.CreateReservedInstancesListingInput) (*ec2.CreateReservedInstancesListingOutput, error) {
	if mock.CreateReservedInstancesListingFunc == nil {
		panic("ec2ClientMock.CreateReservedInstancesListingFunc: method is nil but ec2Client.CreateReservedInstancesListing was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateReservedInstancesListingInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateReservedInstancesListing.Lock()
	mock.calls.CreateReservedInstancesListing = append(mock.calls.CreateReservedInstancesListing, callInfo)
	lockec2ClientMockCreateReservedInstancesListing.Unlock()
	return mock.CreateReservedInstancesListingFunc(in1)
}

// CreateReservedInstancesListingCalls gets all the calls that were made to CreateReservedInstancesListing.
// Check the length with:
//     len(mockedec2Client.CreateReservedInstancesListingCalls())
func (mock *ec2ClientMock) CreateReservedInstancesListingCalls() []struct {
	In1 *ec2.CreateReservedInstancesListingInput
} {
	var calls []struct {
		In1 *ec2.CreateReservedInstancesListingInput
	}
	lockec2ClientMockCreateReservedInstancesListing.RLock()
	calls = mock.calls.CreateReservedInstancesListing
	lockec2ClientMockCreateReservedInstancesListing.RUnlock()
	return calls
}

// CreateReservedInstancesListingRequest calls CreateReservedInstancesListingRequestFunc.
func (mock *ec2ClientMock) CreateReservedInstancesListingRequest(in1 *ec2.CreateReservedInstancesListingInput) (*request.Request, *ec2.CreateReservedInstancesListingOutput) {
	if mock.CreateReservedInstancesListingRequestFunc == nil {
		panic("ec2ClientMock.CreateReservedInstancesListingRequestFunc: method is nil but ec2Client.CreateReservedInstancesListingRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateReservedInstancesListingInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateReservedInstancesListingRequest.Lock()
	mock.calls.CreateReservedInstancesListingRequest = append(mock.calls.CreateReservedInstancesListingRequest, callInfo)
	lockec2ClientMockCreateReservedInstancesListingRequest.Unlock()
	return mock.CreateReservedInstancesListingRequestFunc(in1)
}

// CreateReservedInstancesListingRequestCalls gets all the calls that were made to CreateReservedInstancesListingRequest.
// Check the length with:
//     len(mockedec2Client.CreateReservedInstancesListingRequestCalls())
func (mock *ec2ClientMock) CreateReservedInstancesListingRequestCalls() []struct {
	In1 *ec2.CreateReservedInstancesListingInput
} {
	var calls []struct {
		In1 *ec2.CreateReservedInstancesListingInput
	}
	lockec2ClientMockCreateReservedInstancesListingRequest.RLock()
	calls = mock.calls.CreateReservedInstancesListingRequest
	lockec2ClientMockCreateReservedInstancesListingRequest.RUnlock()
	return calls
}

// CreateReservedInstancesListingWithContext calls CreateReservedInstancesListingWithContextFunc.
func (mock *ec2ClientMock) CreateReservedInstancesListingWithContext(in1 context.Context, in2 *ec2.CreateReservedInstancesListingInput, in3 ...request.Option) (*ec2.CreateReservedInstancesListingOutput, error) {
	if mock.CreateReservedInstancesListingWithContextFunc == nil {
		panic("ec2ClientMock.CreateReservedInstancesListingWithContextFunc: method is nil but ec2Client.CreateReservedInstancesListingWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateReservedInstancesListingInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateReservedInstancesListingWithContext.Lock()
	mock.calls.CreateReservedInstancesListingWithContext = append(mock.calls.CreateReservedInstancesListingWithContext, callInfo)
	lockec2ClientMockCreateReservedInstancesListingWithContext.Unlock()
	return mock.CreateReservedInstancesListingWithContextFunc(in1, in2, in3...)
}

// CreateReservedInstancesListingWithContextCalls gets all the calls that were made to CreateReservedInstancesListingWithContext.
// Check the length with:
//     len(mockedec2Client.CreateReservedInstancesListingWithContextCalls())
func (mock *ec2ClientMock) CreateReservedInstancesListingWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateReservedInstancesListingInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateReservedInstancesListingInput
		In3 []request.Option
	}
	lockec2ClientMockCreateReservedInstancesListingWithContext.RLock()
	calls = mock.calls.CreateReservedInstancesListingWithContext
	lockec2ClientMockCreateReservedInstancesListingWithContext.RUnlock()
	return calls
}

// CreateRoute calls CreateRouteFunc.
func (mock *ec2ClientMock) CreateRoute(in1 *ec2.CreateRouteInput) (*ec2.CreateRouteOutput, error) {
	if mock.CreateRouteFunc == nil {
		panic("ec2ClientMock.CreateRouteFunc: method is nil but ec2Client.CreateRoute was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateRouteInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateRoute.Lock()
	mock.calls.CreateRoute = append(mock.calls.CreateRoute, callInfo)
	lockec2ClientMockCreateRoute.Unlock()
	return mock.CreateRouteFunc(in1)
}

// CreateRouteCalls gets all the calls that were made to CreateRoute.
// Check the length with:
//     len(mockedec2Client.CreateRouteCalls())
func (mock *ec2ClientMock) CreateRouteCalls() []struct {
	In1 *ec2.CreateRouteInput
} {
	var calls []struct {
		In1 *ec2.CreateRouteInput
	}
	lockec2ClientMockCreateRoute.RLock()
	calls = mock.calls.CreateRoute
	lockec2ClientMockCreateRoute.RUnlock()
	return calls
}

// CreateRouteRequest calls CreateRouteRequestFunc.
func (mock *ec2ClientMock) CreateRouteRequest(in1 *ec2.CreateRouteInput) (*request.Request, *ec2.CreateRouteOutput) {
	if mock.CreateRouteRequestFunc == nil {
		panic("ec2ClientMock.CreateRouteRequestFunc: method is nil but ec2Client.CreateRouteRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateRouteInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateRouteRequest.Lock()
	mock.calls.CreateRouteRequest = append(mock.calls.CreateRouteRequest, callInfo)
	lockec2ClientMockCreateRouteRequest.Unlock()
	return mock.CreateRouteRequestFunc(in1)
}

// CreateRouteRequestCalls gets all the calls that were made to CreateRouteRequest.
// Check the length with:
//     len(mockedec2Client.CreateRouteRequestCalls())
func (mock *ec2ClientMock) CreateRouteRequestCalls() []struct {
	In1 *ec2.CreateRouteInput
} {
	var calls []struct {
		In1 *ec2.CreateRouteInput
	}
	lockec2ClientMockCreateRouteRequest.RLock()
	calls = mock.calls.CreateRouteRequest
	lockec2ClientMockCreateRouteRequest.RUnlock()
	return calls
}

// CreateRouteTable calls CreateRouteTableFunc.
func (mock *ec2ClientMock) CreateRouteTable(in1 *ec2.CreateRouteTableInput) (*ec2.CreateRouteTableOutput, error) {
	if mock.CreateRouteTableFunc == nil {
		panic("ec2ClientMock.CreateRouteTableFunc: method is nil but ec2Client.CreateRouteTable was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateRouteTableInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateRouteTable.Lock()
	mock.calls.CreateRouteTable = append(mock.calls.CreateRouteTable, callInfo)
	lockec2ClientMockCreateRouteTable.Unlock()
	return mock.CreateRouteTableFunc(in1)
}

// CreateRouteTableCalls gets all the calls that were made to CreateRouteTable.
// Check the length with:
//     len(mockedec2Client.CreateRouteTableCalls())
func (mock *ec2ClientMock) CreateRouteTableCalls() []struct {
	In1 *ec2.CreateRouteTableInput
} {
	var calls []struct {
		In1 *ec2.CreateRouteTableInput
	}
	lockec2ClientMockCreateRouteTable.RLock()
	calls = mock.calls.CreateRouteTable
	lockec2ClientMockCreateRouteTable.RUnlock()
	return calls
}

// CreateRouteTableRequest calls CreateRouteTableRequestFunc.
func (mock *ec2ClientMock) CreateRouteTableRequest(in1 *ec2.CreateRouteTableInput) (*request.Request, *ec2.CreateRouteTableOutput) {
	if mock.CreateRouteTableRequestFunc == nil {
		panic("ec2ClientMock.CreateRouteTableRequestFunc: method is nil but ec2Client.CreateRouteTableRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateRouteTableInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateRouteTableRequest.Lock()
	mock.calls.CreateRouteTableRequest = append(mock.calls.CreateRouteTableRequest, callInfo)
	lockec2ClientMockCreateRouteTableRequest.Unlock()
	return mock.CreateRouteTableRequestFunc(in1)
}

// CreateRouteTableRequestCalls gets all the calls that were made to CreateRouteTableRequest.
// Check the length with:
//     len(mockedec2Client.CreateRouteTableRequestCalls())
func (mock *ec2ClientMock) CreateRouteTableRequestCalls() []struct {
	In1 *ec2.CreateRouteTableInput
} {
	var calls []struct {
		In1 *ec2.CreateRouteTableInput
	}
	lockec2ClientMockCreateRouteTableRequest.RLock()
	calls = mock.calls.CreateRouteTableRequest
	lockec2ClientMockCreateRouteTableRequest.RUnlock()
	return calls
}

// CreateRouteTableWithContext calls CreateRouteTableWithContextFunc.
func (mock *ec2ClientMock) CreateRouteTableWithContext(in1 context.Context, in2 *ec2.CreateRouteTableInput, in3 ...request.Option) (*ec2.CreateRouteTableOutput, error) {
	if mock.CreateRouteTableWithContextFunc == nil {
		panic("ec2ClientMock.CreateRouteTableWithContextFunc: method is nil but ec2Client.CreateRouteTableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateRouteTableInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateRouteTableWithContext.Lock()
	mock.calls.CreateRouteTableWithContext = append(mock.calls.CreateRouteTableWithContext, callInfo)
	lockec2ClientMockCreateRouteTableWithContext.Unlock()
	return mock.CreateRouteTableWithContextFunc(in1, in2, in3...)
}

// CreateRouteTableWithContextCalls gets all the calls that were made to CreateRouteTableWithContext.
// Check the length with:
//     len(mockedec2Client.CreateRouteTableWithContextCalls())
func (mock *ec2ClientMock) CreateRouteTableWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateRouteTableInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateRouteTableInput
		In3 []request.Option
	}
	lockec2ClientMockCreateRouteTableWithContext.RLock()
	calls = mock.calls.CreateRouteTableWithContext
	lockec2ClientMockCreateRouteTableWithContext.RUnlock()
	return calls
}

// CreateRouteWithContext calls CreateRouteWithContextFunc.
func (mock *ec2ClientMock) CreateRouteWithContext(in1 context.Context, in2 *ec2.CreateRouteInput, in3 ...request.Option) (*ec2.CreateRouteOutput, error) {
	if mock.CreateRouteWithContextFunc == nil {
		panic("ec2ClientMock.CreateRouteWithContextFunc: method is nil but ec2Client.CreateRouteWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateRouteInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateRouteWithContext.Lock()
	mock.calls.CreateRouteWithContext = append(mock.calls.CreateRouteWithContext, callInfo)
	lockec2ClientMockCreateRouteWithContext.Unlock()
	return mock.CreateRouteWithContextFunc(in1, in2, in3...)
}

// CreateRouteWithContextCalls gets all the calls that were made to CreateRouteWithContext.
// Check the length with:
//     len(mockedec2Client.CreateRouteWithContextCalls())
func (mock *ec2ClientMock) CreateRouteWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateRouteInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateRouteInput
		In3 []request.Option
	}
	lockec2ClientMockCreateRouteWithContext.RLock()
	calls = mock.calls.CreateRouteWithContext
	lockec2ClientMockCreateRouteWithContext.RUnlock()
	return calls
}

// CreateSecurityGroup calls CreateSecurityGroupFunc.
func (mock *ec2ClientMock) CreateSecurityGroup(in1 *ec2.CreateSecurityGroupInput) (*ec2.CreateSecurityGroupOutput, error) {
	if mock.CreateSecurityGroupFunc == nil {
		panic("ec2ClientMock.CreateSecurityGroupFunc: method is nil but ec2Client.CreateSecurityGroup was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateSecurityGroupInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateSecurityGroup.Lock()
	mock.calls.CreateSecurityGroup = append(mock.calls.CreateSecurityGroup, callInfo)
	lockec2ClientMockCreateSecurityGroup.Unlock()
	return mock.CreateSecurityGroupFunc(in1)
}

// CreateSecurityGroupCalls gets all the calls that were made to CreateSecurityGroup.
// Check the length with:
//     len(mockedec2Client.CreateSecurityGroupCalls())
func (mock *ec2ClientMock) CreateSecurityGroupCalls() []struct {
	In1 *ec2.CreateSecurityGroupInput
} {
	var calls []struct {
		In1 *ec2.CreateSecurityGroupInput
	}
	lockec2ClientMockCreateSecurityGroup.RLock()
	calls = mock.calls.CreateSecurityGroup
	lockec2ClientMockCreateSecurityGroup.RUnlock()
	return calls
}

// CreateSecurityGroupRequest calls CreateSecurityGroupRequestFunc.
func (mock *ec2ClientMock) CreateSecurityGroupRequest(in1 *ec2.CreateSecurityGroupInput) (*request.Request, *ec2.CreateSecurityGroupOutput) {
	if mock.CreateSecurityGroupRequestFunc == nil {
		panic("ec2ClientMock.CreateSecurityGroupRequestFunc: method is nil but ec2Client.CreateSecurityGroupRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateSecurityGroupInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateSecurityGroupRequest.Lock()
	mock.calls.CreateSecurityGroupRequest = append(mock.calls.CreateSecurityGroupRequest, callInfo)
	lockec2ClientMockCreateSecurityGroupRequest.Unlock()
	return mock.CreateSecurityGroupRequestFunc(in1)
}

// CreateSecurityGroupRequestCalls gets all the calls that were made to CreateSecurityGroupRequest.
// Check the length with:
//     len(mockedec2Client.CreateSecurityGroupRequestCalls())
func (mock *ec2ClientMock) CreateSecurityGroupRequestCalls() []struct {
	In1 *ec2.CreateSecurityGroupInput
} {
	var calls []struct {
		In1 *ec2.CreateSecurityGroupInput
	}
	lockec2ClientMockCreateSecurityGroupRequest.RLock()
	calls = mock.calls.CreateSecurityGroupRequest
	lockec2ClientMockCreateSecurityGroupRequest.RUnlock()
	return calls
}

// CreateSecurityGroupWithContext calls CreateSecurityGroupWithContextFunc.
func (mock *ec2ClientMock) CreateSecurityGroupWithContext(in1 context.Context, in2 *ec2.CreateSecurityGroupInput, in3 ...request.Option) (*ec2.CreateSecurityGroupOutput, error) {
	if mock.CreateSecurityGroupWithContextFunc == nil {
		panic("ec2ClientMock.CreateSecurityGroupWithContextFunc: method is nil but ec2Client.CreateSecurityGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateSecurityGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateSecurityGroupWithContext.Lock()
	mock.calls.CreateSecurityGroupWithContext = append(mock.calls.CreateSecurityGroupWithContext, callInfo)
	lockec2ClientMockCreateSecurityGroupWithContext.Unlock()
	return mock.CreateSecurityGroupWithContextFunc(in1, in2, in3...)
}

// CreateSecurityGroupWithContextCalls gets all the calls that were made to CreateSecurityGroupWithContext.
// Check the length with:
//     len(mockedec2Client.CreateSecurityGroupWithContextCalls())
func (mock *ec2ClientMock) CreateSecurityGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateSecurityGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateSecurityGroupInput
		In3 []request.Option
	}
	lockec2ClientMockCreateSecurityGroupWithContext.RLock()
	calls = mock.calls.CreateSecurityGroupWithContext
	lockec2ClientMockCreateSecurityGroupWithContext.RUnlock()
	return calls
}

// CreateSnapshot calls CreateSnapshotFunc.
func (mock *ec2ClientMock) CreateSnapshot(in1 *ec2.CreateSnapshotInput) (*ec2.Snapshot, error) {
	if mock.CreateSnapshotFunc == nil {
		panic("ec2ClientMock.CreateSnapshotFunc: method is nil but ec2Client.CreateSnapshot was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateSnapshotInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateSnapshot.Lock()
	mock.calls.CreateSnapshot = append(mock.calls.CreateSnapshot, callInfo)
	lockec2ClientMockCreateSnapshot.Unlock()
	return mock.CreateSnapshotFunc(in1)
}

// CreateSnapshotCalls gets all the calls that were made to CreateSnapshot.
// Check the length with:
//     len(mockedec2Client.CreateSnapshotCalls())
func (mock *ec2ClientMock) CreateSnapshotCalls() []struct {
	In1 *ec2.CreateSnapshotInput
} {
	var calls []struct {
		In1 *ec2.CreateSnapshotInput
	}
	lockec2ClientMockCreateSnapshot.RLock()
	calls = mock.calls.CreateSnapshot
	lockec2ClientMockCreateSnapshot.RUnlock()
	return calls
}

// CreateSnapshotRequest calls CreateSnapshotRequestFunc.
func (mock *ec2ClientMock) CreateSnapshotRequest(in1 *ec2.CreateSnapshotInput) (*request.Request, *ec2.Snapshot) {
	if mock.CreateSnapshotRequestFunc == nil {
		panic("ec2ClientMock.CreateSnapshotRequestFunc: method is nil but ec2Client.CreateSnapshotRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateSnapshotInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateSnapshotRequest.Lock()
	mock.calls.CreateSnapshotRequest = append(mock.calls.CreateSnapshotRequest, callInfo)
	lockec2ClientMockCreateSnapshotRequest.Unlock()
	return mock.CreateSnapshotRequestFunc(in1)
}

// CreateSnapshotRequestCalls gets all the calls that were made to CreateSnapshotRequest.
// Check the length with:
//     len(mockedec2Client.CreateSnapshotRequestCalls())
func (mock *ec2ClientMock) CreateSnapshotRequestCalls() []struct {
	In1 *ec2.CreateSnapshotInput
} {
	var calls []struct {
		In1 *ec2.CreateSnapshotInput
	}
	lockec2ClientMockCreateSnapshotRequest.RLock()
	calls = mock.calls.CreateSnapshotRequest
	lockec2ClientMockCreateSnapshotRequest.RUnlock()
	return calls
}

// CreateSnapshotWithContext calls CreateSnapshotWithContextFunc.
func (mock *ec2ClientMock) CreateSnapshotWithContext(in1 context.Context, in2 *ec2.CreateSnapshotInput, in3 ...request.Option) (*ec2.Snapshot, error) {
	if mock.CreateSnapshotWithContextFunc == nil {
		panic("ec2ClientMock.CreateSnapshotWithContextFunc: method is nil but ec2Client.CreateSnapshotWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateSnapshotInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateSnapshotWithContext.Lock()
	mock.calls.CreateSnapshotWithContext = append(mock.calls.CreateSnapshotWithContext, callInfo)
	lockec2ClientMockCreateSnapshotWithContext.Unlock()
	return mock.CreateSnapshotWithContextFunc(in1, in2, in3...)
}

// CreateSnapshotWithContextCalls gets all the calls that were made to CreateSnapshotWithContext.
// Check the length with:
//     len(mockedec2Client.CreateSnapshotWithContextCalls())
func (mock *ec2ClientMock) CreateSnapshotWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateSnapshotInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateSnapshotInput
		In3 []request.Option
	}
	lockec2ClientMockCreateSnapshotWithContext.RLock()
	calls = mock.calls.CreateSnapshotWithContext
	lockec2ClientMockCreateSnapshotWithContext.RUnlock()
	return calls
}

// CreateSnapshots calls CreateSnapshotsFunc.
func (mock *ec2ClientMock) CreateSnapshots(in1 *ec2.CreateSnapshotsInput) (*ec2.CreateSnapshotsOutput, error) {
	if mock.CreateSnapshotsFunc == nil {
		panic("ec2ClientMock.CreateSnapshotsFunc: method is nil but ec2Client.CreateSnapshots was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateSnapshotsInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateSnapshots.Lock()
	mock.calls.CreateSnapshots = append(mock.calls.CreateSnapshots, callInfo)
	lockec2ClientMockCreateSnapshots.Unlock()
	return mock.CreateSnapshotsFunc(in1)
}

// CreateSnapshotsCalls gets all the calls that were made to CreateSnapshots.
// Check the length with:
//     len(mockedec2Client.CreateSnapshotsCalls())
func (mock *ec2ClientMock) CreateSnapshotsCalls() []struct {
	In1 *ec2.CreateSnapshotsInput
} {
	var calls []struct {
		In1 *ec2.CreateSnapshotsInput
	}
	lockec2ClientMockCreateSnapshots.RLock()
	calls = mock.calls.CreateSnapshots
	lockec2ClientMockCreateSnapshots.RUnlock()
	return calls
}

// CreateSnapshotsRequest calls CreateSnapshotsRequestFunc.
func (mock *ec2ClientMock) CreateSnapshotsRequest(in1 *ec2.CreateSnapshotsInput) (*request.Request, *ec2.CreateSnapshotsOutput) {
	if mock.CreateSnapshotsRequestFunc == nil {
		panic("ec2ClientMock.CreateSnapshotsRequestFunc: method is nil but ec2Client.CreateSnapshotsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateSnapshotsInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateSnapshotsRequest.Lock()
	mock.calls.CreateSnapshotsRequest = append(mock.calls.CreateSnapshotsRequest, callInfo)
	lockec2ClientMockCreateSnapshotsRequest.Unlock()
	return mock.CreateSnapshotsRequestFunc(in1)
}

// CreateSnapshotsRequestCalls gets all the calls that were made to CreateSnapshotsRequest.
// Check the length with:
//     len(mockedec2Client.CreateSnapshotsRequestCalls())
func (mock *ec2ClientMock) CreateSnapshotsRequestCalls() []struct {
	In1 *ec2.CreateSnapshotsInput
} {
	var calls []struct {
		In1 *ec2.CreateSnapshotsInput
	}
	lockec2ClientMockCreateSnapshotsRequest.RLock()
	calls = mock.calls.CreateSnapshotsRequest
	lockec2ClientMockCreateSnapshotsRequest.RUnlock()
	return calls
}

// CreateSnapshotsWithContext calls CreateSnapshotsWithContextFunc.
func (mock *ec2ClientMock) CreateSnapshotsWithContext(in1 context.Context, in2 *ec2.CreateSnapshotsInput, in3 ...request.Option) (*ec2.CreateSnapshotsOutput, error) {
	if mock.CreateSnapshotsWithContextFunc == nil {
		panic("ec2ClientMock.CreateSnapshotsWithContextFunc: method is nil but ec2Client.CreateSnapshotsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateSnapshotsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateSnapshotsWithContext.Lock()
	mock.calls.CreateSnapshotsWithContext = append(mock.calls.CreateSnapshotsWithContext, callInfo)
	lockec2ClientMockCreateSnapshotsWithContext.Unlock()
	return mock.CreateSnapshotsWithContextFunc(in1, in2, in3...)
}

// CreateSnapshotsWithContextCalls gets all the calls that were made to CreateSnapshotsWithContext.
// Check the length with:
//     len(mockedec2Client.CreateSnapshotsWithContextCalls())
func (mock *ec2ClientMock) CreateSnapshotsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateSnapshotsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateSnapshotsInput
		In3 []request.Option
	}
	lockec2ClientMockCreateSnapshotsWithContext.RLock()
	calls = mock.calls.CreateSnapshotsWithContext
	lockec2ClientMockCreateSnapshotsWithContext.RUnlock()
	return calls
}

// CreateSpotDatafeedSubscription calls CreateSpotDatafeedSubscriptionFunc.
func (mock *ec2ClientMock) CreateSpotDatafeedSubscription(in1 *ec2.CreateSpotDatafeedSubscriptionInput) (*ec2.CreateSpotDatafeedSubscriptionOutput, error) {
	if mock.CreateSpotDatafeedSubscriptionFunc == nil {
		panic("ec2ClientMock.CreateSpotDatafeedSubscriptionFunc: method is nil but ec2Client.CreateSpotDatafeedSubscription was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateSpotDatafeedSubscriptionInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateSpotDatafeedSubscription.Lock()
	mock.calls.CreateSpotDatafeedSubscription = append(mock.calls.CreateSpotDatafeedSubscription, callInfo)
	lockec2ClientMockCreateSpotDatafeedSubscription.Unlock()
	return mock.CreateSpotDatafeedSubscriptionFunc(in1)
}

// CreateSpotDatafeedSubscriptionCalls gets all the calls that were made to CreateSpotDatafeedSubscription.
// Check the length with:
//     len(mockedec2Client.CreateSpotDatafeedSubscriptionCalls())
func (mock *ec2ClientMock) CreateSpotDatafeedSubscriptionCalls() []struct {
	In1 *ec2.CreateSpotDatafeedSubscriptionInput
} {
	var calls []struct {
		In1 *ec2.CreateSpotDatafeedSubscriptionInput
	}
	lockec2ClientMockCreateSpotDatafeedSubscription.RLock()
	calls = mock.calls.CreateSpotDatafeedSubscription
	lockec2ClientMockCreateSpotDatafeedSubscription.RUnlock()
	return calls
}

// CreateSpotDatafeedSubscriptionRequest calls CreateSpotDatafeedSubscriptionRequestFunc.
func (mock *ec2ClientMock) CreateSpotDatafeedSubscriptionRequest(in1 *ec2.CreateSpotDatafeedSubscriptionInput) (*request.Request, *ec2.CreateSpotDatafeedSubscriptionOutput) {
	if mock.CreateSpotDatafeedSubscriptionRequestFunc == nil {
		panic("ec2ClientMock.CreateSpotDatafeedSubscriptionRequestFunc: method is nil but ec2Client.CreateSpotDatafeedSubscriptionRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateSpotDatafeedSubscriptionInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateSpotDatafeedSubscriptionRequest.Lock()
	mock.calls.CreateSpotDatafeedSubscriptionRequest = append(mock.calls.CreateSpotDatafeedSubscriptionRequest, callInfo)
	lockec2ClientMockCreateSpotDatafeedSubscriptionRequest.Unlock()
	return mock.CreateSpotDatafeedSubscriptionRequestFunc(in1)
}

// CreateSpotDatafeedSubscriptionRequestCalls gets all the calls that were made to CreateSpotDatafeedSubscriptionRequest.
// Check the length with:
//     len(mockedec2Client.CreateSpotDatafeedSubscriptionRequestCalls())
func (mock *ec2ClientMock) CreateSpotDatafeedSubscriptionRequestCalls() []struct {
	In1 *ec2.CreateSpotDatafeedSubscriptionInput
} {
	var calls []struct {
		In1 *ec2.CreateSpotDatafeedSubscriptionInput
	}
	lockec2ClientMockCreateSpotDatafeedSubscriptionRequest.RLock()
	calls = mock.calls.CreateSpotDatafeedSubscriptionRequest
	lockec2ClientMockCreateSpotDatafeedSubscriptionRequest.RUnlock()
	return calls
}

// CreateSpotDatafeedSubscriptionWithContext calls CreateSpotDatafeedSubscriptionWithContextFunc.
func (mock *ec2ClientMock) CreateSpotDatafeedSubscriptionWithContext(in1 context.Context, in2 *ec2.CreateSpotDatafeedSubscriptionInput, in3 ...request.Option) (*ec2.CreateSpotDatafeedSubscriptionOutput, error) {
	if mock.CreateSpotDatafeedSubscriptionWithContextFunc == nil {
		panic("ec2ClientMock.CreateSpotDatafeedSubscriptionWithContextFunc: method is nil but ec2Client.CreateSpotDatafeedSubscriptionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateSpotDatafeedSubscriptionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateSpotDatafeedSubscriptionWithContext.Lock()
	mock.calls.CreateSpotDatafeedSubscriptionWithContext = append(mock.calls.CreateSpotDatafeedSubscriptionWithContext, callInfo)
	lockec2ClientMockCreateSpotDatafeedSubscriptionWithContext.Unlock()
	return mock.CreateSpotDatafeedSubscriptionWithContextFunc(in1, in2, in3...)
}

// CreateSpotDatafeedSubscriptionWithContextCalls gets all the calls that were made to CreateSpotDatafeedSubscriptionWithContext.
// Check the length with:
//     len(mockedec2Client.CreateSpotDatafeedSubscriptionWithContextCalls())
func (mock *ec2ClientMock) CreateSpotDatafeedSubscriptionWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateSpotDatafeedSubscriptionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateSpotDatafeedSubscriptionInput
		In3 []request.Option
	}
	lockec2ClientMockCreateSpotDatafeedSubscriptionWithContext.RLock()
	calls = mock.calls.CreateSpotDatafeedSubscriptionWithContext
	lockec2ClientMockCreateSpotDatafeedSubscriptionWithContext.RUnlock()
	return calls
}

// CreateSubnet calls CreateSubnetFunc.
func (mock *ec2ClientMock) CreateSubnet(in1 *ec2.CreateSubnetInput) (*ec2.CreateSubnetOutput, error) {
	if mock.CreateSubnetFunc == nil {
		panic("ec2ClientMock.CreateSubnetFunc: method is nil but ec2Client.CreateSubnet was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateSubnetInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateSubnet.Lock()
	mock.calls.CreateSubnet = append(mock.calls.CreateSubnet, callInfo)
	lockec2ClientMockCreateSubnet.Unlock()
	return mock.CreateSubnetFunc(in1)
}

// CreateSubnetCalls gets all the calls that were made to CreateSubnet.
// Check the length with:
//     len(mockedec2Client.CreateSubnetCalls())
func (mock *ec2ClientMock) CreateSubnetCalls() []struct {
	In1 *ec2.CreateSubnetInput
} {
	var calls []struct {
		In1 *ec2.CreateSubnetInput
	}
	lockec2ClientMockCreateSubnet.RLock()
	calls = mock.calls.CreateSubnet
	lockec2ClientMockCreateSubnet.RUnlock()
	return calls
}

// CreateSubnetRequest calls CreateSubnetRequestFunc.
func (mock *ec2ClientMock) CreateSubnetRequest(in1 *ec2.CreateSubnetInput) (*request.Request, *ec2.CreateSubnetOutput) {
	if mock.CreateSubnetRequestFunc == nil {
		panic("ec2ClientMock.CreateSubnetRequestFunc: method is nil but ec2Client.CreateSubnetRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateSubnetInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateSubnetRequest.Lock()
	mock.calls.CreateSubnetRequest = append(mock.calls.CreateSubnetRequest, callInfo)
	lockec2ClientMockCreateSubnetRequest.Unlock()
	return mock.CreateSubnetRequestFunc(in1)
}

// CreateSubnetRequestCalls gets all the calls that were made to CreateSubnetRequest.
// Check the length with:
//     len(mockedec2Client.CreateSubnetRequestCalls())
func (mock *ec2ClientMock) CreateSubnetRequestCalls() []struct {
	In1 *ec2.CreateSubnetInput
} {
	var calls []struct {
		In1 *ec2.CreateSubnetInput
	}
	lockec2ClientMockCreateSubnetRequest.RLock()
	calls = mock.calls.CreateSubnetRequest
	lockec2ClientMockCreateSubnetRequest.RUnlock()
	return calls
}

// CreateSubnetWithContext calls CreateSubnetWithContextFunc.
func (mock *ec2ClientMock) CreateSubnetWithContext(in1 context.Context, in2 *ec2.CreateSubnetInput, in3 ...request.Option) (*ec2.CreateSubnetOutput, error) {
	if mock.CreateSubnetWithContextFunc == nil {
		panic("ec2ClientMock.CreateSubnetWithContextFunc: method is nil but ec2Client.CreateSubnetWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateSubnetInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateSubnetWithContext.Lock()
	mock.calls.CreateSubnetWithContext = append(mock.calls.CreateSubnetWithContext, callInfo)
	lockec2ClientMockCreateSubnetWithContext.Unlock()
	return mock.CreateSubnetWithContextFunc(in1, in2, in3...)
}

// CreateSubnetWithContextCalls gets all the calls that were made to CreateSubnetWithContext.
// Check the length with:
//     len(mockedec2Client.CreateSubnetWithContextCalls())
func (mock *ec2ClientMock) CreateSubnetWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateSubnetInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateSubnetInput
		In3 []request.Option
	}
	lockec2ClientMockCreateSubnetWithContext.RLock()
	calls = mock.calls.CreateSubnetWithContext
	lockec2ClientMockCreateSubnetWithContext.RUnlock()
	return calls
}

// CreateTags calls CreateTagsFunc.
func (mock *ec2ClientMock) CreateTags(in1 *ec2.CreateTagsInput) (*ec2.CreateTagsOutput, error) {
	if mock.CreateTagsFunc == nil {
		panic("ec2ClientMock.CreateTagsFunc: method is nil but ec2Client.CreateTags was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateTagsInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateTags.Lock()
	mock.calls.CreateTags = append(mock.calls.CreateTags, callInfo)
	lockec2ClientMockCreateTags.Unlock()
	return mock.CreateTagsFunc(in1)
}

// CreateTagsCalls gets all the calls that were made to CreateTags.
// Check the length with:
//     len(mockedec2Client.CreateTagsCalls())
func (mock *ec2ClientMock) CreateTagsCalls() []struct {
	In1 *ec2.CreateTagsInput
} {
	var calls []struct {
		In1 *ec2.CreateTagsInput
	}
	lockec2ClientMockCreateTags.RLock()
	calls = mock.calls.CreateTags
	lockec2ClientMockCreateTags.RUnlock()
	return calls
}

// CreateTagsRequest calls CreateTagsRequestFunc.
func (mock *ec2ClientMock) CreateTagsRequest(in1 *ec2.CreateTagsInput) (*request.Request, *ec2.CreateTagsOutput) {
	if mock.CreateTagsRequestFunc == nil {
		panic("ec2ClientMock.CreateTagsRequestFunc: method is nil but ec2Client.CreateTagsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateTagsInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateTagsRequest.Lock()
	mock.calls.CreateTagsRequest = append(mock.calls.CreateTagsRequest, callInfo)
	lockec2ClientMockCreateTagsRequest.Unlock()
	return mock.CreateTagsRequestFunc(in1)
}

// CreateTagsRequestCalls gets all the calls that were made to CreateTagsRequest.
// Check the length with:
//     len(mockedec2Client.CreateTagsRequestCalls())
func (mock *ec2ClientMock) CreateTagsRequestCalls() []struct {
	In1 *ec2.CreateTagsInput
} {
	var calls []struct {
		In1 *ec2.CreateTagsInput
	}
	lockec2ClientMockCreateTagsRequest.RLock()
	calls = mock.calls.CreateTagsRequest
	lockec2ClientMockCreateTagsRequest.RUnlock()
	return calls
}

// CreateTagsWithContext calls CreateTagsWithContextFunc.
func (mock *ec2ClientMock) CreateTagsWithContext(in1 context.Context, in2 *ec2.CreateTagsInput, in3 ...request.Option) (*ec2.CreateTagsOutput, error) {
	if mock.CreateTagsWithContextFunc == nil {
		panic("ec2ClientMock.CreateTagsWithContextFunc: method is nil but ec2Client.CreateTagsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateTagsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateTagsWithContext.Lock()
	mock.calls.CreateTagsWithContext = append(mock.calls.CreateTagsWithContext, callInfo)
	lockec2ClientMockCreateTagsWithContext.Unlock()
	return mock.CreateTagsWithContextFunc(in1, in2, in3...)
}

// CreateTagsWithContextCalls gets all the calls that were made to CreateTagsWithContext.
// Check the length with:
//     len(mockedec2Client.CreateTagsWithContextCalls())
func (mock *ec2ClientMock) CreateTagsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateTagsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateTagsInput
		In3 []request.Option
	}
	lockec2ClientMockCreateTagsWithContext.RLock()
	calls = mock.calls.CreateTagsWithContext
	lockec2ClientMockCreateTagsWithContext.RUnlock()
	return calls
}

// CreateTrafficMirrorFilter calls CreateTrafficMirrorFilterFunc.
func (mock *ec2ClientMock) CreateTrafficMirrorFilter(in1 *ec2.CreateTrafficMirrorFilterInput) (*ec2.CreateTrafficMirrorFilterOutput, error) {
	if mock.CreateTrafficMirrorFilterFunc == nil {
		panic("ec2ClientMock.CreateTrafficMirrorFilterFunc: method is nil but ec2Client.CreateTrafficMirrorFilter was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateTrafficMirrorFilterInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateTrafficMirrorFilter.Lock()
	mock.calls.CreateTrafficMirrorFilter = append(mock.calls.CreateTrafficMirrorFilter, callInfo)
	lockec2ClientMockCreateTrafficMirrorFilter.Unlock()
	return mock.CreateTrafficMirrorFilterFunc(in1)
}

// CreateTrafficMirrorFilterCalls gets all the calls that were made to CreateTrafficMirrorFilter.
// Check the length with:
//     len(mockedec2Client.CreateTrafficMirrorFilterCalls())
func (mock *ec2ClientMock) CreateTrafficMirrorFilterCalls() []struct {
	In1 *ec2.CreateTrafficMirrorFilterInput
} {
	var calls []struct {
		In1 *ec2.CreateTrafficMirrorFilterInput
	}
	lockec2ClientMockCreateTrafficMirrorFilter.RLock()
	calls = mock.calls.CreateTrafficMirrorFilter
	lockec2ClientMockCreateTrafficMirrorFilter.RUnlock()
	return calls
}

// CreateTrafficMirrorFilterRequest calls CreateTrafficMirrorFilterRequestFunc.
func (mock *ec2ClientMock) CreateTrafficMirrorFilterRequest(in1 *ec2.CreateTrafficMirrorFilterInput) (*request.Request, *ec2.CreateTrafficMirrorFilterOutput) {
	if mock.CreateTrafficMirrorFilterRequestFunc == nil {
		panic("ec2ClientMock.CreateTrafficMirrorFilterRequestFunc: method is nil but ec2Client.CreateTrafficMirrorFilterRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateTrafficMirrorFilterInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateTrafficMirrorFilterRequest.Lock()
	mock.calls.CreateTrafficMirrorFilterRequest = append(mock.calls.CreateTrafficMirrorFilterRequest, callInfo)
	lockec2ClientMockCreateTrafficMirrorFilterRequest.Unlock()
	return mock.CreateTrafficMirrorFilterRequestFunc(in1)
}

// CreateTrafficMirrorFilterRequestCalls gets all the calls that were made to CreateTrafficMirrorFilterRequest.
// Check the length with:
//     len(mockedec2Client.CreateTrafficMirrorFilterRequestCalls())
func (mock *ec2ClientMock) CreateTrafficMirrorFilterRequestCalls() []struct {
	In1 *ec2.CreateTrafficMirrorFilterInput
} {
	var calls []struct {
		In1 *ec2.CreateTrafficMirrorFilterInput
	}
	lockec2ClientMockCreateTrafficMirrorFilterRequest.RLock()
	calls = mock.calls.CreateTrafficMirrorFilterRequest
	lockec2ClientMockCreateTrafficMirrorFilterRequest.RUnlock()
	return calls
}

// CreateTrafficMirrorFilterRule calls CreateTrafficMirrorFilterRuleFunc.
func (mock *ec2ClientMock) CreateTrafficMirrorFilterRule(in1 *ec2.CreateTrafficMirrorFilterRuleInput) (*ec2.CreateTrafficMirrorFilterRuleOutput, error) {
	if mock.CreateTrafficMirrorFilterRuleFunc == nil {
		panic("ec2ClientMock.CreateTrafficMirrorFilterRuleFunc: method is nil but ec2Client.CreateTrafficMirrorFilterRule was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateTrafficMirrorFilterRuleInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateTrafficMirrorFilterRule.Lock()
	mock.calls.CreateTrafficMirrorFilterRule = append(mock.calls.CreateTrafficMirrorFilterRule, callInfo)
	lockec2ClientMockCreateTrafficMirrorFilterRule.Unlock()
	return mock.CreateTrafficMirrorFilterRuleFunc(in1)
}

// CreateTrafficMirrorFilterRuleCalls gets all the calls that were made to CreateTrafficMirrorFilterRule.
// Check the length with:
//     len(mockedec2Client.CreateTrafficMirrorFilterRuleCalls())
func (mock *ec2ClientMock) CreateTrafficMirrorFilterRuleCalls() []struct {
	In1 *ec2.CreateTrafficMirrorFilterRuleInput
} {
	var calls []struct {
		In1 *ec2.CreateTrafficMirrorFilterRuleInput
	}
	lockec2ClientMockCreateTrafficMirrorFilterRule.RLock()
	calls = mock.calls.CreateTrafficMirrorFilterRule
	lockec2ClientMockCreateTrafficMirrorFilterRule.RUnlock()
	return calls
}

// CreateTrafficMirrorFilterRuleRequest calls CreateTrafficMirrorFilterRuleRequestFunc.
func (mock *ec2ClientMock) CreateTrafficMirrorFilterRuleRequest(in1 *ec2.CreateTrafficMirrorFilterRuleInput) (*request.Request, *ec2.CreateTrafficMirrorFilterRuleOutput) {
	if mock.CreateTrafficMirrorFilterRuleRequestFunc == nil {
		panic("ec2ClientMock.CreateTrafficMirrorFilterRuleRequestFunc: method is nil but ec2Client.CreateTrafficMirrorFilterRuleRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateTrafficMirrorFilterRuleInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateTrafficMirrorFilterRuleRequest.Lock()
	mock.calls.CreateTrafficMirrorFilterRuleRequest = append(mock.calls.CreateTrafficMirrorFilterRuleRequest, callInfo)
	lockec2ClientMockCreateTrafficMirrorFilterRuleRequest.Unlock()
	return mock.CreateTrafficMirrorFilterRuleRequestFunc(in1)
}

// CreateTrafficMirrorFilterRuleRequestCalls gets all the calls that were made to CreateTrafficMirrorFilterRuleRequest.
// Check the length with:
//     len(mockedec2Client.CreateTrafficMirrorFilterRuleRequestCalls())
func (mock *ec2ClientMock) CreateTrafficMirrorFilterRuleRequestCalls() []struct {
	In1 *ec2.CreateTrafficMirrorFilterRuleInput
} {
	var calls []struct {
		In1 *ec2.CreateTrafficMirrorFilterRuleInput
	}
	lockec2ClientMockCreateTrafficMirrorFilterRuleRequest.RLock()
	calls = mock.calls.CreateTrafficMirrorFilterRuleRequest
	lockec2ClientMockCreateTrafficMirrorFilterRuleRequest.RUnlock()
	return calls
}

// CreateTrafficMirrorFilterRuleWithContext calls CreateTrafficMirrorFilterRuleWithContextFunc.
func (mock *ec2ClientMock) CreateTrafficMirrorFilterRuleWithContext(in1 context.Context, in2 *ec2.CreateTrafficMirrorFilterRuleInput, in3 ...request.Option) (*ec2.CreateTrafficMirrorFilterRuleOutput, error) {
	if mock.CreateTrafficMirrorFilterRuleWithContextFunc == nil {
		panic("ec2ClientMock.CreateTrafficMirrorFilterRuleWithContextFunc: method is nil but ec2Client.CreateTrafficMirrorFilterRuleWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateTrafficMirrorFilterRuleInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateTrafficMirrorFilterRuleWithContext.Lock()
	mock.calls.CreateTrafficMirrorFilterRuleWithContext = append(mock.calls.CreateTrafficMirrorFilterRuleWithContext, callInfo)
	lockec2ClientMockCreateTrafficMirrorFilterRuleWithContext.Unlock()
	return mock.CreateTrafficMirrorFilterRuleWithContextFunc(in1, in2, in3...)
}

// CreateTrafficMirrorFilterRuleWithContextCalls gets all the calls that were made to CreateTrafficMirrorFilterRuleWithContext.
// Check the length with:
//     len(mockedec2Client.CreateTrafficMirrorFilterRuleWithContextCalls())
func (mock *ec2ClientMock) CreateTrafficMirrorFilterRuleWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateTrafficMirrorFilterRuleInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateTrafficMirrorFilterRuleInput
		In3 []request.Option
	}
	lockec2ClientMockCreateTrafficMirrorFilterRuleWithContext.RLock()
	calls = mock.calls.CreateTrafficMirrorFilterRuleWithContext
	lockec2ClientMockCreateTrafficMirrorFilterRuleWithContext.RUnlock()
	return calls
}

// CreateTrafficMirrorFilterWithContext calls CreateTrafficMirrorFilterWithContextFunc.
func (mock *ec2ClientMock) CreateTrafficMirrorFilterWithContext(in1 context.Context, in2 *ec2.CreateTrafficMirrorFilterInput, in3 ...request.Option) (*ec2.CreateTrafficMirrorFilterOutput, error) {
	if mock.CreateTrafficMirrorFilterWithContextFunc == nil {
		panic("ec2ClientMock.CreateTrafficMirrorFilterWithContextFunc: method is nil but ec2Client.CreateTrafficMirrorFilterWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateTrafficMirrorFilterInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateTrafficMirrorFilterWithContext.Lock()
	mock.calls.CreateTrafficMirrorFilterWithContext = append(mock.calls.CreateTrafficMirrorFilterWithContext, callInfo)
	lockec2ClientMockCreateTrafficMirrorFilterWithContext.Unlock()
	return mock.CreateTrafficMirrorFilterWithContextFunc(in1, in2, in3...)
}

// CreateTrafficMirrorFilterWithContextCalls gets all the calls that were made to CreateTrafficMirrorFilterWithContext.
// Check the length with:
//     len(mockedec2Client.CreateTrafficMirrorFilterWithContextCalls())
func (mock *ec2ClientMock) CreateTrafficMirrorFilterWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateTrafficMirrorFilterInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateTrafficMirrorFilterInput
		In3 []request.Option
	}
	lockec2ClientMockCreateTrafficMirrorFilterWithContext.RLock()
	calls = mock.calls.CreateTrafficMirrorFilterWithContext
	lockec2ClientMockCreateTrafficMirrorFilterWithContext.RUnlock()
	return calls
}

// CreateTrafficMirrorSession calls CreateTrafficMirrorSessionFunc.
func (mock *ec2ClientMock) CreateTrafficMirrorSession(in1 *ec2.CreateTrafficMirrorSessionInput) (*ec2.CreateTrafficMirrorSessionOutput, error) {
	if mock.CreateTrafficMirrorSessionFunc == nil {
		panic("ec2ClientMock.CreateTrafficMirrorSessionFunc: method is nil but ec2Client.CreateTrafficMirrorSession was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateTrafficMirrorSessionInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateTrafficMirrorSession.Lock()
	mock.calls.CreateTrafficMirrorSession = append(mock.calls.CreateTrafficMirrorSession, callInfo)
	lockec2ClientMockCreateTrafficMirrorSession.Unlock()
	return mock.CreateTrafficMirrorSessionFunc(in1)
}

// CreateTrafficMirrorSessionCalls gets all the calls that were made to CreateTrafficMirrorSession.
// Check the length with:
//     len(mockedec2Client.CreateTrafficMirrorSessionCalls())
func (mock *ec2ClientMock) CreateTrafficMirrorSessionCalls() []struct {
	In1 *ec2.CreateTrafficMirrorSessionInput
} {
	var calls []struct {
		In1 *ec2.CreateTrafficMirrorSessionInput
	}
	lockec2ClientMockCreateTrafficMirrorSession.RLock()
	calls = mock.calls.CreateTrafficMirrorSession
	lockec2ClientMockCreateTrafficMirrorSession.RUnlock()
	return calls
}

// CreateTrafficMirrorSessionRequest calls CreateTrafficMirrorSessionRequestFunc.
func (mock *ec2ClientMock) CreateTrafficMirrorSessionRequest(in1 *ec2.CreateTrafficMirrorSessionInput) (*request.Request, *ec2.CreateTrafficMirrorSessionOutput) {
	if mock.CreateTrafficMirrorSessionRequestFunc == nil {
		panic("ec2ClientMock.CreateTrafficMirrorSessionRequestFunc: method is nil but ec2Client.CreateTrafficMirrorSessionRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateTrafficMirrorSessionInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateTrafficMirrorSessionRequest.Lock()
	mock.calls.CreateTrafficMirrorSessionRequest = append(mock.calls.CreateTrafficMirrorSessionRequest, callInfo)
	lockec2ClientMockCreateTrafficMirrorSessionRequest.Unlock()
	return mock.CreateTrafficMirrorSessionRequestFunc(in1)
}

// CreateTrafficMirrorSessionRequestCalls gets all the calls that were made to CreateTrafficMirrorSessionRequest.
// Check the length with:
//     len(mockedec2Client.CreateTrafficMirrorSessionRequestCalls())
func (mock *ec2ClientMock) CreateTrafficMirrorSessionRequestCalls() []struct {
	In1 *ec2.CreateTrafficMirrorSessionInput
} {
	var calls []struct {
		In1 *ec2.CreateTrafficMirrorSessionInput
	}
	lockec2ClientMockCreateTrafficMirrorSessionRequest.RLock()
	calls = mock.calls.CreateTrafficMirrorSessionRequest
	lockec2ClientMockCreateTrafficMirrorSessionRequest.RUnlock()
	return calls
}

// CreateTrafficMirrorSessionWithContext calls CreateTrafficMirrorSessionWithContextFunc.
func (mock *ec2ClientMock) CreateTrafficMirrorSessionWithContext(in1 context.Context, in2 *ec2.CreateTrafficMirrorSessionInput, in3 ...request.Option) (*ec2.CreateTrafficMirrorSessionOutput, error) {
	if mock.CreateTrafficMirrorSessionWithContextFunc == nil {
		panic("ec2ClientMock.CreateTrafficMirrorSessionWithContextFunc: method is nil but ec2Client.CreateTrafficMirrorSessionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateTrafficMirrorSessionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateTrafficMirrorSessionWithContext.Lock()
	mock.calls.CreateTrafficMirrorSessionWithContext = append(mock.calls.CreateTrafficMirrorSessionWithContext, callInfo)
	lockec2ClientMockCreateTrafficMirrorSessionWithContext.Unlock()
	return mock.CreateTrafficMirrorSessionWithContextFunc(in1, in2, in3...)
}

// CreateTrafficMirrorSessionWithContextCalls gets all the calls that were made to CreateTrafficMirrorSessionWithContext.
// Check the length with:
//     len(mockedec2Client.CreateTrafficMirrorSessionWithContextCalls())
func (mock *ec2ClientMock) CreateTrafficMirrorSessionWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateTrafficMirrorSessionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateTrafficMirrorSessionInput
		In3 []request.Option
	}
	lockec2ClientMockCreateTrafficMirrorSessionWithContext.RLock()
	calls = mock.calls.CreateTrafficMirrorSessionWithContext
	lockec2ClientMockCreateTrafficMirrorSessionWithContext.RUnlock()
	return calls
}

// CreateTrafficMirrorTarget calls CreateTrafficMirrorTargetFunc.
func (mock *ec2ClientMock) CreateTrafficMirrorTarget(in1 *ec2.CreateTrafficMirrorTargetInput) (*ec2.CreateTrafficMirrorTargetOutput, error) {
	if mock.CreateTrafficMirrorTargetFunc == nil {
		panic("ec2ClientMock.CreateTrafficMirrorTargetFunc: method is nil but ec2Client.CreateTrafficMirrorTarget was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateTrafficMirrorTargetInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateTrafficMirrorTarget.Lock()
	mock.calls.CreateTrafficMirrorTarget = append(mock.calls.CreateTrafficMirrorTarget, callInfo)
	lockec2ClientMockCreateTrafficMirrorTarget.Unlock()
	return mock.CreateTrafficMirrorTargetFunc(in1)
}

// CreateTrafficMirrorTargetCalls gets all the calls that were made to CreateTrafficMirrorTarget.
// Check the length with:
//     len(mockedec2Client.CreateTrafficMirrorTargetCalls())
func (mock *ec2ClientMock) CreateTrafficMirrorTargetCalls() []struct {
	In1 *ec2.CreateTrafficMirrorTargetInput
} {
	var calls []struct {
		In1 *ec2.CreateTrafficMirrorTargetInput
	}
	lockec2ClientMockCreateTrafficMirrorTarget.RLock()
	calls = mock.calls.CreateTrafficMirrorTarget
	lockec2ClientMockCreateTrafficMirrorTarget.RUnlock()
	return calls
}

// CreateTrafficMirrorTargetRequest calls CreateTrafficMirrorTargetRequestFunc.
func (mock *ec2ClientMock) CreateTrafficMirrorTargetRequest(in1 *ec2.CreateTrafficMirrorTargetInput) (*request.Request, *ec2.CreateTrafficMirrorTargetOutput) {
	if mock.CreateTrafficMirrorTargetRequestFunc == nil {
		panic("ec2ClientMock.CreateTrafficMirrorTargetRequestFunc: method is nil but ec2Client.CreateTrafficMirrorTargetRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateTrafficMirrorTargetInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateTrafficMirrorTargetRequest.Lock()
	mock.calls.CreateTrafficMirrorTargetRequest = append(mock.calls.CreateTrafficMirrorTargetRequest, callInfo)
	lockec2ClientMockCreateTrafficMirrorTargetRequest.Unlock()
	return mock.CreateTrafficMirrorTargetRequestFunc(in1)
}

// CreateTrafficMirrorTargetRequestCalls gets all the calls that were made to CreateTrafficMirrorTargetRequest.
// Check the length with:
//     len(mockedec2Client.CreateTrafficMirrorTargetRequestCalls())
func (mock *ec2ClientMock) CreateTrafficMirrorTargetRequestCalls() []struct {
	In1 *ec2.CreateTrafficMirrorTargetInput
} {
	var calls []struct {
		In1 *ec2.CreateTrafficMirrorTargetInput
	}
	lockec2ClientMockCreateTrafficMirrorTargetRequest.RLock()
	calls = mock.calls.CreateTrafficMirrorTargetRequest
	lockec2ClientMockCreateTrafficMirrorTargetRequest.RUnlock()
	return calls
}

// CreateTrafficMirrorTargetWithContext calls CreateTrafficMirrorTargetWithContextFunc.
func (mock *ec2ClientMock) CreateTrafficMirrorTargetWithContext(in1 context.Context, in2 *ec2.CreateTrafficMirrorTargetInput, in3 ...request.Option) (*ec2.CreateTrafficMirrorTargetOutput, error) {
	if mock.CreateTrafficMirrorTargetWithContextFunc == nil {
		panic("ec2ClientMock.CreateTrafficMirrorTargetWithContextFunc: method is nil but ec2Client.CreateTrafficMirrorTargetWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateTrafficMirrorTargetInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateTrafficMirrorTargetWithContext.Lock()
	mock.calls.CreateTrafficMirrorTargetWithContext = append(mock.calls.CreateTrafficMirrorTargetWithContext, callInfo)
	lockec2ClientMockCreateTrafficMirrorTargetWithContext.Unlock()
	return mock.CreateTrafficMirrorTargetWithContextFunc(in1, in2, in3...)
}

// CreateTrafficMirrorTargetWithContextCalls gets all the calls that were made to CreateTrafficMirrorTargetWithContext.
// Check the length with:
//     len(mockedec2Client.CreateTrafficMirrorTargetWithContextCalls())
func (mock *ec2ClientMock) CreateTrafficMirrorTargetWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateTrafficMirrorTargetInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateTrafficMirrorTargetInput
		In3 []request.Option
	}
	lockec2ClientMockCreateTrafficMirrorTargetWithContext.RLock()
	calls = mock.calls.CreateTrafficMirrorTargetWithContext
	lockec2ClientMockCreateTrafficMirrorTargetWithContext.RUnlock()
	return calls
}

// CreateTransitGateway calls CreateTransitGatewayFunc.
func (mock *ec2ClientMock) CreateTransitGateway(in1 *ec2.CreateTransitGatewayInput) (*ec2.CreateTransitGatewayOutput, error) {
	if mock.CreateTransitGatewayFunc == nil {
		panic("ec2ClientMock.CreateTransitGatewayFunc: method is nil but ec2Client.CreateTransitGateway was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateTransitGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateTransitGateway.Lock()
	mock.calls.CreateTransitGateway = append(mock.calls.CreateTransitGateway, callInfo)
	lockec2ClientMockCreateTransitGateway.Unlock()
	return mock.CreateTransitGatewayFunc(in1)
}

// CreateTransitGatewayCalls gets all the calls that were made to CreateTransitGateway.
// Check the length with:
//     len(mockedec2Client.CreateTransitGatewayCalls())
func (mock *ec2ClientMock) CreateTransitGatewayCalls() []struct {
	In1 *ec2.CreateTransitGatewayInput
} {
	var calls []struct {
		In1 *ec2.CreateTransitGatewayInput
	}
	lockec2ClientMockCreateTransitGateway.RLock()
	calls = mock.calls.CreateTransitGateway
	lockec2ClientMockCreateTransitGateway.RUnlock()
	return calls
}

// CreateTransitGatewayMulticastDomain calls CreateTransitGatewayMulticastDomainFunc.
func (mock *ec2ClientMock) CreateTransitGatewayMulticastDomain(in1 *ec2.CreateTransitGatewayMulticastDomainInput) (*ec2.CreateTransitGatewayMulticastDomainOutput, error) {
	if mock.CreateTransitGatewayMulticastDomainFunc == nil {
		panic("ec2ClientMock.CreateTransitGatewayMulticastDomainFunc: method is nil but ec2Client.CreateTransitGatewayMulticastDomain was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateTransitGatewayMulticastDomainInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateTransitGatewayMulticastDomain.Lock()
	mock.calls.CreateTransitGatewayMulticastDomain = append(mock.calls.CreateTransitGatewayMulticastDomain, callInfo)
	lockec2ClientMockCreateTransitGatewayMulticastDomain.Unlock()
	return mock.CreateTransitGatewayMulticastDomainFunc(in1)
}

// CreateTransitGatewayMulticastDomainCalls gets all the calls that were made to CreateTransitGatewayMulticastDomain.
// Check the length with:
//     len(mockedec2Client.CreateTransitGatewayMulticastDomainCalls())
func (mock *ec2ClientMock) CreateTransitGatewayMulticastDomainCalls() []struct {
	In1 *ec2.CreateTransitGatewayMulticastDomainInput
} {
	var calls []struct {
		In1 *ec2.CreateTransitGatewayMulticastDomainInput
	}
	lockec2ClientMockCreateTransitGatewayMulticastDomain.RLock()
	calls = mock.calls.CreateTransitGatewayMulticastDomain
	lockec2ClientMockCreateTransitGatewayMulticastDomain.RUnlock()
	return calls
}

// CreateTransitGatewayMulticastDomainRequest calls CreateTransitGatewayMulticastDomainRequestFunc.
func (mock *ec2ClientMock) CreateTransitGatewayMulticastDomainRequest(in1 *ec2.CreateTransitGatewayMulticastDomainInput) (*request.Request, *ec2.CreateTransitGatewayMulticastDomainOutput) {
	if mock.CreateTransitGatewayMulticastDomainRequestFunc == nil {
		panic("ec2ClientMock.CreateTransitGatewayMulticastDomainRequestFunc: method is nil but ec2Client.CreateTransitGatewayMulticastDomainRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateTransitGatewayMulticastDomainInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateTransitGatewayMulticastDomainRequest.Lock()
	mock.calls.CreateTransitGatewayMulticastDomainRequest = append(mock.calls.CreateTransitGatewayMulticastDomainRequest, callInfo)
	lockec2ClientMockCreateTransitGatewayMulticastDomainRequest.Unlock()
	return mock.CreateTransitGatewayMulticastDomainRequestFunc(in1)
}

// CreateTransitGatewayMulticastDomainRequestCalls gets all the calls that were made to CreateTransitGatewayMulticastDomainRequest.
// Check the length with:
//     len(mockedec2Client.CreateTransitGatewayMulticastDomainRequestCalls())
func (mock *ec2ClientMock) CreateTransitGatewayMulticastDomainRequestCalls() []struct {
	In1 *ec2.CreateTransitGatewayMulticastDomainInput
} {
	var calls []struct {
		In1 *ec2.CreateTransitGatewayMulticastDomainInput
	}
	lockec2ClientMockCreateTransitGatewayMulticastDomainRequest.RLock()
	calls = mock.calls.CreateTransitGatewayMulticastDomainRequest
	lockec2ClientMockCreateTransitGatewayMulticastDomainRequest.RUnlock()
	return calls
}

// CreateTransitGatewayMulticastDomainWithContext calls CreateTransitGatewayMulticastDomainWithContextFunc.
func (mock *ec2ClientMock) CreateTransitGatewayMulticastDomainWithContext(in1 context.Context, in2 *ec2.CreateTransitGatewayMulticastDomainInput, in3 ...request.Option) (*ec2.CreateTransitGatewayMulticastDomainOutput, error) {
	if mock.CreateTransitGatewayMulticastDomainWithContextFunc == nil {
		panic("ec2ClientMock.CreateTransitGatewayMulticastDomainWithContextFunc: method is nil but ec2Client.CreateTransitGatewayMulticastDomainWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateTransitGatewayMulticastDomainInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateTransitGatewayMulticastDomainWithContext.Lock()
	mock.calls.CreateTransitGatewayMulticastDomainWithContext = append(mock.calls.CreateTransitGatewayMulticastDomainWithContext, callInfo)
	lockec2ClientMockCreateTransitGatewayMulticastDomainWithContext.Unlock()
	return mock.CreateTransitGatewayMulticastDomainWithContextFunc(in1, in2, in3...)
}

// CreateTransitGatewayMulticastDomainWithContextCalls gets all the calls that were made to CreateTransitGatewayMulticastDomainWithContext.
// Check the length with:
//     len(mockedec2Client.CreateTransitGatewayMulticastDomainWithContextCalls())
func (mock *ec2ClientMock) CreateTransitGatewayMulticastDomainWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateTransitGatewayMulticastDomainInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateTransitGatewayMulticastDomainInput
		In3 []request.Option
	}
	lockec2ClientMockCreateTransitGatewayMulticastDomainWithContext.RLock()
	calls = mock.calls.CreateTransitGatewayMulticastDomainWithContext
	lockec2ClientMockCreateTransitGatewayMulticastDomainWithContext.RUnlock()
	return calls
}

// CreateTransitGatewayPeeringAttachment calls CreateTransitGatewayPeeringAttachmentFunc.
func (mock *ec2ClientMock) CreateTransitGatewayPeeringAttachment(in1 *ec2.CreateTransitGatewayPeeringAttachmentInput) (*ec2.CreateTransitGatewayPeeringAttachmentOutput, error) {
	if mock.CreateTransitGatewayPeeringAttachmentFunc == nil {
		panic("ec2ClientMock.CreateTransitGatewayPeeringAttachmentFunc: method is nil but ec2Client.CreateTransitGatewayPeeringAttachment was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateTransitGatewayPeeringAttachmentInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateTransitGatewayPeeringAttachment.Lock()
	mock.calls.CreateTransitGatewayPeeringAttachment = append(mock.calls.CreateTransitGatewayPeeringAttachment, callInfo)
	lockec2ClientMockCreateTransitGatewayPeeringAttachment.Unlock()
	return mock.CreateTransitGatewayPeeringAttachmentFunc(in1)
}

// CreateTransitGatewayPeeringAttachmentCalls gets all the calls that were made to CreateTransitGatewayPeeringAttachment.
// Check the length with:
//     len(mockedec2Client.CreateTransitGatewayPeeringAttachmentCalls())
func (mock *ec2ClientMock) CreateTransitGatewayPeeringAttachmentCalls() []struct {
	In1 *ec2.CreateTransitGatewayPeeringAttachmentInput
} {
	var calls []struct {
		In1 *ec2.CreateTransitGatewayPeeringAttachmentInput
	}
	lockec2ClientMockCreateTransitGatewayPeeringAttachment.RLock()
	calls = mock.calls.CreateTransitGatewayPeeringAttachment
	lockec2ClientMockCreateTransitGatewayPeeringAttachment.RUnlock()
	return calls
}

// CreateTransitGatewayPeeringAttachmentRequest calls CreateTransitGatewayPeeringAttachmentRequestFunc.
func (mock *ec2ClientMock) CreateTransitGatewayPeeringAttachmentRequest(in1 *ec2.CreateTransitGatewayPeeringAttachmentInput) (*request.Request, *ec2.CreateTransitGatewayPeeringAttachmentOutput) {
	if mock.CreateTransitGatewayPeeringAttachmentRequestFunc == nil {
		panic("ec2ClientMock.CreateTransitGatewayPeeringAttachmentRequestFunc: method is nil but ec2Client.CreateTransitGatewayPeeringAttachmentRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateTransitGatewayPeeringAttachmentInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateTransitGatewayPeeringAttachmentRequest.Lock()
	mock.calls.CreateTransitGatewayPeeringAttachmentRequest = append(mock.calls.CreateTransitGatewayPeeringAttachmentRequest, callInfo)
	lockec2ClientMockCreateTransitGatewayPeeringAttachmentRequest.Unlock()
	return mock.CreateTransitGatewayPeeringAttachmentRequestFunc(in1)
}

// CreateTransitGatewayPeeringAttachmentRequestCalls gets all the calls that were made to CreateTransitGatewayPeeringAttachmentRequest.
// Check the length with:
//     len(mockedec2Client.CreateTransitGatewayPeeringAttachmentRequestCalls())
func (mock *ec2ClientMock) CreateTransitGatewayPeeringAttachmentRequestCalls() []struct {
	In1 *ec2.CreateTransitGatewayPeeringAttachmentInput
} {
	var calls []struct {
		In1 *ec2.CreateTransitGatewayPeeringAttachmentInput
	}
	lockec2ClientMockCreateTransitGatewayPeeringAttachmentRequest.RLock()
	calls = mock.calls.CreateTransitGatewayPeeringAttachmentRequest
	lockec2ClientMockCreateTransitGatewayPeeringAttachmentRequest.RUnlock()
	return calls
}

// CreateTransitGatewayPeeringAttachmentWithContext calls CreateTransitGatewayPeeringAttachmentWithContextFunc.
func (mock *ec2ClientMock) CreateTransitGatewayPeeringAttachmentWithContext(in1 context.Context, in2 *ec2.CreateTransitGatewayPeeringAttachmentInput, in3 ...request.Option) (*ec2.CreateTransitGatewayPeeringAttachmentOutput, error) {
	if mock.CreateTransitGatewayPeeringAttachmentWithContextFunc == nil {
		panic("ec2ClientMock.CreateTransitGatewayPeeringAttachmentWithContextFunc: method is nil but ec2Client.CreateTransitGatewayPeeringAttachmentWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateTransitGatewayPeeringAttachmentInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateTransitGatewayPeeringAttachmentWithContext.Lock()
	mock.calls.CreateTransitGatewayPeeringAttachmentWithContext = append(mock.calls.CreateTransitGatewayPeeringAttachmentWithContext, callInfo)
	lockec2ClientMockCreateTransitGatewayPeeringAttachmentWithContext.Unlock()
	return mock.CreateTransitGatewayPeeringAttachmentWithContextFunc(in1, in2, in3...)
}

// CreateTransitGatewayPeeringAttachmentWithContextCalls gets all the calls that were made to CreateTransitGatewayPeeringAttachmentWithContext.
// Check the length with:
//     len(mockedec2Client.CreateTransitGatewayPeeringAttachmentWithContextCalls())
func (mock *ec2ClientMock) CreateTransitGatewayPeeringAttachmentWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateTransitGatewayPeeringAttachmentInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateTransitGatewayPeeringAttachmentInput
		In3 []request.Option
	}
	lockec2ClientMockCreateTransitGatewayPeeringAttachmentWithContext.RLock()
	calls = mock.calls.CreateTransitGatewayPeeringAttachmentWithContext
	lockec2ClientMockCreateTransitGatewayPeeringAttachmentWithContext.RUnlock()
	return calls
}

// CreateTransitGatewayRequest calls CreateTransitGatewayRequestFunc.
func (mock *ec2ClientMock) CreateTransitGatewayRequest(in1 *ec2.CreateTransitGatewayInput) (*request.Request, *ec2.CreateTransitGatewayOutput) {
	if mock.CreateTransitGatewayRequestFunc == nil {
		panic("ec2ClientMock.CreateTransitGatewayRequestFunc: method is nil but ec2Client.CreateTransitGatewayRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateTransitGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateTransitGatewayRequest.Lock()
	mock.calls.CreateTransitGatewayRequest = append(mock.calls.CreateTransitGatewayRequest, callInfo)
	lockec2ClientMockCreateTransitGatewayRequest.Unlock()
	return mock.CreateTransitGatewayRequestFunc(in1)
}

// CreateTransitGatewayRequestCalls gets all the calls that were made to CreateTransitGatewayRequest.
// Check the length with:
//     len(mockedec2Client.CreateTransitGatewayRequestCalls())
func (mock *ec2ClientMock) CreateTransitGatewayRequestCalls() []struct {
	In1 *ec2.CreateTransitGatewayInput
} {
	var calls []struct {
		In1 *ec2.CreateTransitGatewayInput
	}
	lockec2ClientMockCreateTransitGatewayRequest.RLock()
	calls = mock.calls.CreateTransitGatewayRequest
	lockec2ClientMockCreateTransitGatewayRequest.RUnlock()
	return calls
}

// CreateTransitGatewayRoute calls CreateTransitGatewayRouteFunc.
func (mock *ec2ClientMock) CreateTransitGatewayRoute(in1 *ec2.CreateTransitGatewayRouteInput) (*ec2.CreateTransitGatewayRouteOutput, error) {
	if mock.CreateTransitGatewayRouteFunc == nil {
		panic("ec2ClientMock.CreateTransitGatewayRouteFunc: method is nil but ec2Client.CreateTransitGatewayRoute was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateTransitGatewayRouteInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateTransitGatewayRoute.Lock()
	mock.calls.CreateTransitGatewayRoute = append(mock.calls.CreateTransitGatewayRoute, callInfo)
	lockec2ClientMockCreateTransitGatewayRoute.Unlock()
	return mock.CreateTransitGatewayRouteFunc(in1)
}

// CreateTransitGatewayRouteCalls gets all the calls that were made to CreateTransitGatewayRoute.
// Check the length with:
//     len(mockedec2Client.CreateTransitGatewayRouteCalls())
func (mock *ec2ClientMock) CreateTransitGatewayRouteCalls() []struct {
	In1 *ec2.CreateTransitGatewayRouteInput
} {
	var calls []struct {
		In1 *ec2.CreateTransitGatewayRouteInput
	}
	lockec2ClientMockCreateTransitGatewayRoute.RLock()
	calls = mock.calls.CreateTransitGatewayRoute
	lockec2ClientMockCreateTransitGatewayRoute.RUnlock()
	return calls
}

// CreateTransitGatewayRouteRequest calls CreateTransitGatewayRouteRequestFunc.
func (mock *ec2ClientMock) CreateTransitGatewayRouteRequest(in1 *ec2.CreateTransitGatewayRouteInput) (*request.Request, *ec2.CreateTransitGatewayRouteOutput) {
	if mock.CreateTransitGatewayRouteRequestFunc == nil {
		panic("ec2ClientMock.CreateTransitGatewayRouteRequestFunc: method is nil but ec2Client.CreateTransitGatewayRouteRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateTransitGatewayRouteInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateTransitGatewayRouteRequest.Lock()
	mock.calls.CreateTransitGatewayRouteRequest = append(mock.calls.CreateTransitGatewayRouteRequest, callInfo)
	lockec2ClientMockCreateTransitGatewayRouteRequest.Unlock()
	return mock.CreateTransitGatewayRouteRequestFunc(in1)
}

// CreateTransitGatewayRouteRequestCalls gets all the calls that were made to CreateTransitGatewayRouteRequest.
// Check the length with:
//     len(mockedec2Client.CreateTransitGatewayRouteRequestCalls())
func (mock *ec2ClientMock) CreateTransitGatewayRouteRequestCalls() []struct {
	In1 *ec2.CreateTransitGatewayRouteInput
} {
	var calls []struct {
		In1 *ec2.CreateTransitGatewayRouteInput
	}
	lockec2ClientMockCreateTransitGatewayRouteRequest.RLock()
	calls = mock.calls.CreateTransitGatewayRouteRequest
	lockec2ClientMockCreateTransitGatewayRouteRequest.RUnlock()
	return calls
}

// CreateTransitGatewayRouteTable calls CreateTransitGatewayRouteTableFunc.
func (mock *ec2ClientMock) CreateTransitGatewayRouteTable(in1 *ec2.CreateTransitGatewayRouteTableInput) (*ec2.CreateTransitGatewayRouteTableOutput, error) {
	if mock.CreateTransitGatewayRouteTableFunc == nil {
		panic("ec2ClientMock.CreateTransitGatewayRouteTableFunc: method is nil but ec2Client.CreateTransitGatewayRouteTable was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateTransitGatewayRouteTableInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateTransitGatewayRouteTable.Lock()
	mock.calls.CreateTransitGatewayRouteTable = append(mock.calls.CreateTransitGatewayRouteTable, callInfo)
	lockec2ClientMockCreateTransitGatewayRouteTable.Unlock()
	return mock.CreateTransitGatewayRouteTableFunc(in1)
}

// CreateTransitGatewayRouteTableCalls gets all the calls that were made to CreateTransitGatewayRouteTable.
// Check the length with:
//     len(mockedec2Client.CreateTransitGatewayRouteTableCalls())
func (mock *ec2ClientMock) CreateTransitGatewayRouteTableCalls() []struct {
	In1 *ec2.CreateTransitGatewayRouteTableInput
} {
	var calls []struct {
		In1 *ec2.CreateTransitGatewayRouteTableInput
	}
	lockec2ClientMockCreateTransitGatewayRouteTable.RLock()
	calls = mock.calls.CreateTransitGatewayRouteTable
	lockec2ClientMockCreateTransitGatewayRouteTable.RUnlock()
	return calls
}

// CreateTransitGatewayRouteTableRequest calls CreateTransitGatewayRouteTableRequestFunc.
func (mock *ec2ClientMock) CreateTransitGatewayRouteTableRequest(in1 *ec2.CreateTransitGatewayRouteTableInput) (*request.Request, *ec2.CreateTransitGatewayRouteTableOutput) {
	if mock.CreateTransitGatewayRouteTableRequestFunc == nil {
		panic("ec2ClientMock.CreateTransitGatewayRouteTableRequestFunc: method is nil but ec2Client.CreateTransitGatewayRouteTableRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateTransitGatewayRouteTableInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateTransitGatewayRouteTableRequest.Lock()
	mock.calls.CreateTransitGatewayRouteTableRequest = append(mock.calls.CreateTransitGatewayRouteTableRequest, callInfo)
	lockec2ClientMockCreateTransitGatewayRouteTableRequest.Unlock()
	return mock.CreateTransitGatewayRouteTableRequestFunc(in1)
}

// CreateTransitGatewayRouteTableRequestCalls gets all the calls that were made to CreateTransitGatewayRouteTableRequest.
// Check the length with:
//     len(mockedec2Client.CreateTransitGatewayRouteTableRequestCalls())
func (mock *ec2ClientMock) CreateTransitGatewayRouteTableRequestCalls() []struct {
	In1 *ec2.CreateTransitGatewayRouteTableInput
} {
	var calls []struct {
		In1 *ec2.CreateTransitGatewayRouteTableInput
	}
	lockec2ClientMockCreateTransitGatewayRouteTableRequest.RLock()
	calls = mock.calls.CreateTransitGatewayRouteTableRequest
	lockec2ClientMockCreateTransitGatewayRouteTableRequest.RUnlock()
	return calls
}

// CreateTransitGatewayRouteTableWithContext calls CreateTransitGatewayRouteTableWithContextFunc.
func (mock *ec2ClientMock) CreateTransitGatewayRouteTableWithContext(in1 context.Context, in2 *ec2.CreateTransitGatewayRouteTableInput, in3 ...request.Option) (*ec2.CreateTransitGatewayRouteTableOutput, error) {
	if mock.CreateTransitGatewayRouteTableWithContextFunc == nil {
		panic("ec2ClientMock.CreateTransitGatewayRouteTableWithContextFunc: method is nil but ec2Client.CreateTransitGatewayRouteTableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateTransitGatewayRouteTableInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateTransitGatewayRouteTableWithContext.Lock()
	mock.calls.CreateTransitGatewayRouteTableWithContext = append(mock.calls.CreateTransitGatewayRouteTableWithContext, callInfo)
	lockec2ClientMockCreateTransitGatewayRouteTableWithContext.Unlock()
	return mock.CreateTransitGatewayRouteTableWithContextFunc(in1, in2, in3...)
}

// CreateTransitGatewayRouteTableWithContextCalls gets all the calls that were made to CreateTransitGatewayRouteTableWithContext.
// Check the length with:
//     len(mockedec2Client.CreateTransitGatewayRouteTableWithContextCalls())
func (mock *ec2ClientMock) CreateTransitGatewayRouteTableWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateTransitGatewayRouteTableInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateTransitGatewayRouteTableInput
		In3 []request.Option
	}
	lockec2ClientMockCreateTransitGatewayRouteTableWithContext.RLock()
	calls = mock.calls.CreateTransitGatewayRouteTableWithContext
	lockec2ClientMockCreateTransitGatewayRouteTableWithContext.RUnlock()
	return calls
}

// CreateTransitGatewayRouteWithContext calls CreateTransitGatewayRouteWithContextFunc.
func (mock *ec2ClientMock) CreateTransitGatewayRouteWithContext(in1 context.Context, in2 *ec2.CreateTransitGatewayRouteInput, in3 ...request.Option) (*ec2.CreateTransitGatewayRouteOutput, error) {
	if mock.CreateTransitGatewayRouteWithContextFunc == nil {
		panic("ec2ClientMock.CreateTransitGatewayRouteWithContextFunc: method is nil but ec2Client.CreateTransitGatewayRouteWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateTransitGatewayRouteInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateTransitGatewayRouteWithContext.Lock()
	mock.calls.CreateTransitGatewayRouteWithContext = append(mock.calls.CreateTransitGatewayRouteWithContext, callInfo)
	lockec2ClientMockCreateTransitGatewayRouteWithContext.Unlock()
	return mock.CreateTransitGatewayRouteWithContextFunc(in1, in2, in3...)
}

// CreateTransitGatewayRouteWithContextCalls gets all the calls that were made to CreateTransitGatewayRouteWithContext.
// Check the length with:
//     len(mockedec2Client.CreateTransitGatewayRouteWithContextCalls())
func (mock *ec2ClientMock) CreateTransitGatewayRouteWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateTransitGatewayRouteInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateTransitGatewayRouteInput
		In3 []request.Option
	}
	lockec2ClientMockCreateTransitGatewayRouteWithContext.RLock()
	calls = mock.calls.CreateTransitGatewayRouteWithContext
	lockec2ClientMockCreateTransitGatewayRouteWithContext.RUnlock()
	return calls
}

// CreateTransitGatewayVpcAttachment calls CreateTransitGatewayVpcAttachmentFunc.
func (mock *ec2ClientMock) CreateTransitGatewayVpcAttachment(in1 *ec2.CreateTransitGatewayVpcAttachmentInput) (*ec2.CreateTransitGatewayVpcAttachmentOutput, error) {
	if mock.CreateTransitGatewayVpcAttachmentFunc == nil {
		panic("ec2ClientMock.CreateTransitGatewayVpcAttachmentFunc: method is nil but ec2Client.CreateTransitGatewayVpcAttachment was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateTransitGatewayVpcAttachmentInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateTransitGatewayVpcAttachment.Lock()
	mock.calls.CreateTransitGatewayVpcAttachment = append(mock.calls.CreateTransitGatewayVpcAttachment, callInfo)
	lockec2ClientMockCreateTransitGatewayVpcAttachment.Unlock()
	return mock.CreateTransitGatewayVpcAttachmentFunc(in1)
}

// CreateTransitGatewayVpcAttachmentCalls gets all the calls that were made to CreateTransitGatewayVpcAttachment.
// Check the length with:
//     len(mockedec2Client.CreateTransitGatewayVpcAttachmentCalls())
func (mock *ec2ClientMock) CreateTransitGatewayVpcAttachmentCalls() []struct {
	In1 *ec2.CreateTransitGatewayVpcAttachmentInput
} {
	var calls []struct {
		In1 *ec2.CreateTransitGatewayVpcAttachmentInput
	}
	lockec2ClientMockCreateTransitGatewayVpcAttachment.RLock()
	calls = mock.calls.CreateTransitGatewayVpcAttachment
	lockec2ClientMockCreateTransitGatewayVpcAttachment.RUnlock()
	return calls
}

// CreateTransitGatewayVpcAttachmentRequest calls CreateTransitGatewayVpcAttachmentRequestFunc.
func (mock *ec2ClientMock) CreateTransitGatewayVpcAttachmentRequest(in1 *ec2.CreateTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.CreateTransitGatewayVpcAttachmentOutput) {
	if mock.CreateTransitGatewayVpcAttachmentRequestFunc == nil {
		panic("ec2ClientMock.CreateTransitGatewayVpcAttachmentRequestFunc: method is nil but ec2Client.CreateTransitGatewayVpcAttachmentRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateTransitGatewayVpcAttachmentInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateTransitGatewayVpcAttachmentRequest.Lock()
	mock.calls.CreateTransitGatewayVpcAttachmentRequest = append(mock.calls.CreateTransitGatewayVpcAttachmentRequest, callInfo)
	lockec2ClientMockCreateTransitGatewayVpcAttachmentRequest.Unlock()
	return mock.CreateTransitGatewayVpcAttachmentRequestFunc(in1)
}

// CreateTransitGatewayVpcAttachmentRequestCalls gets all the calls that were made to CreateTransitGatewayVpcAttachmentRequest.
// Check the length with:
//     len(mockedec2Client.CreateTransitGatewayVpcAttachmentRequestCalls())
func (mock *ec2ClientMock) CreateTransitGatewayVpcAttachmentRequestCalls() []struct {
	In1 *ec2.CreateTransitGatewayVpcAttachmentInput
} {
	var calls []struct {
		In1 *ec2.CreateTransitGatewayVpcAttachmentInput
	}
	lockec2ClientMockCreateTransitGatewayVpcAttachmentRequest.RLock()
	calls = mock.calls.CreateTransitGatewayVpcAttachmentRequest
	lockec2ClientMockCreateTransitGatewayVpcAttachmentRequest.RUnlock()
	return calls
}

// CreateTransitGatewayVpcAttachmentWithContext calls CreateTransitGatewayVpcAttachmentWithContextFunc.
func (mock *ec2ClientMock) CreateTransitGatewayVpcAttachmentWithContext(in1 context.Context, in2 *ec2.CreateTransitGatewayVpcAttachmentInput, in3 ...request.Option) (*ec2.CreateTransitGatewayVpcAttachmentOutput, error) {
	if mock.CreateTransitGatewayVpcAttachmentWithContextFunc == nil {
		panic("ec2ClientMock.CreateTransitGatewayVpcAttachmentWithContextFunc: method is nil but ec2Client.CreateTransitGatewayVpcAttachmentWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateTransitGatewayVpcAttachmentInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateTransitGatewayVpcAttachmentWithContext.Lock()
	mock.calls.CreateTransitGatewayVpcAttachmentWithContext = append(mock.calls.CreateTransitGatewayVpcAttachmentWithContext, callInfo)
	lockec2ClientMockCreateTransitGatewayVpcAttachmentWithContext.Unlock()
	return mock.CreateTransitGatewayVpcAttachmentWithContextFunc(in1, in2, in3...)
}

// CreateTransitGatewayVpcAttachmentWithContextCalls gets all the calls that were made to CreateTransitGatewayVpcAttachmentWithContext.
// Check the length with:
//     len(mockedec2Client.CreateTransitGatewayVpcAttachmentWithContextCalls())
func (mock *ec2ClientMock) CreateTransitGatewayVpcAttachmentWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateTransitGatewayVpcAttachmentInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateTransitGatewayVpcAttachmentInput
		In3 []request.Option
	}
	lockec2ClientMockCreateTransitGatewayVpcAttachmentWithContext.RLock()
	calls = mock.calls.CreateTransitGatewayVpcAttachmentWithContext
	lockec2ClientMockCreateTransitGatewayVpcAttachmentWithContext.RUnlock()
	return calls
}

// CreateTransitGatewayWithContext calls CreateTransitGatewayWithContextFunc.
func (mock *ec2ClientMock) CreateTransitGatewayWithContext(in1 context.Context, in2 *ec2.CreateTransitGatewayInput, in3 ...request.Option) (*ec2.CreateTransitGatewayOutput, error) {
	if mock.CreateTransitGatewayWithContextFunc == nil {
		panic("ec2ClientMock.CreateTransitGatewayWithContextFunc: method is nil but ec2Client.CreateTransitGatewayWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateTransitGatewayInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateTransitGatewayWithContext.Lock()
	mock.calls.CreateTransitGatewayWithContext = append(mock.calls.CreateTransitGatewayWithContext, callInfo)
	lockec2ClientMockCreateTransitGatewayWithContext.Unlock()
	return mock.CreateTransitGatewayWithContextFunc(in1, in2, in3...)
}

// CreateTransitGatewayWithContextCalls gets all the calls that were made to CreateTransitGatewayWithContext.
// Check the length with:
//     len(mockedec2Client.CreateTransitGatewayWithContextCalls())
func (mock *ec2ClientMock) CreateTransitGatewayWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateTransitGatewayInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateTransitGatewayInput
		In3 []request.Option
	}
	lockec2ClientMockCreateTransitGatewayWithContext.RLock()
	calls = mock.calls.CreateTransitGatewayWithContext
	lockec2ClientMockCreateTransitGatewayWithContext.RUnlock()
	return calls
}

// CreateVolume calls CreateVolumeFunc.
func (mock *ec2ClientMock) CreateVolume(in1 *ec2.CreateVolumeInput) (*ec2.Volume, error) {
	if mock.CreateVolumeFunc == nil {
		panic("ec2ClientMock.CreateVolumeFunc: method is nil but ec2Client.CreateVolume was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateVolumeInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateVolume.Lock()
	mock.calls.CreateVolume = append(mock.calls.CreateVolume, callInfo)
	lockec2ClientMockCreateVolume.Unlock()
	return mock.CreateVolumeFunc(in1)
}

// CreateVolumeCalls gets all the calls that were made to CreateVolume.
// Check the length with:
//     len(mockedec2Client.CreateVolumeCalls())
func (mock *ec2ClientMock) CreateVolumeCalls() []struct {
	In1 *ec2.CreateVolumeInput
} {
	var calls []struct {
		In1 *ec2.CreateVolumeInput
	}
	lockec2ClientMockCreateVolume.RLock()
	calls = mock.calls.CreateVolume
	lockec2ClientMockCreateVolume.RUnlock()
	return calls
}

// CreateVolumeRequest calls CreateVolumeRequestFunc.
func (mock *ec2ClientMock) CreateVolumeRequest(in1 *ec2.CreateVolumeInput) (*request.Request, *ec2.Volume) {
	if mock.CreateVolumeRequestFunc == nil {
		panic("ec2ClientMock.CreateVolumeRequestFunc: method is nil but ec2Client.CreateVolumeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateVolumeInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateVolumeRequest.Lock()
	mock.calls.CreateVolumeRequest = append(mock.calls.CreateVolumeRequest, callInfo)
	lockec2ClientMockCreateVolumeRequest.Unlock()
	return mock.CreateVolumeRequestFunc(in1)
}

// CreateVolumeRequestCalls gets all the calls that were made to CreateVolumeRequest.
// Check the length with:
//     len(mockedec2Client.CreateVolumeRequestCalls())
func (mock *ec2ClientMock) CreateVolumeRequestCalls() []struct {
	In1 *ec2.CreateVolumeInput
} {
	var calls []struct {
		In1 *ec2.CreateVolumeInput
	}
	lockec2ClientMockCreateVolumeRequest.RLock()
	calls = mock.calls.CreateVolumeRequest
	lockec2ClientMockCreateVolumeRequest.RUnlock()
	return calls
}

// CreateVolumeWithContext calls CreateVolumeWithContextFunc.
func (mock *ec2ClientMock) CreateVolumeWithContext(in1 context.Context, in2 *ec2.CreateVolumeInput, in3 ...request.Option) (*ec2.Volume, error) {
	if mock.CreateVolumeWithContextFunc == nil {
		panic("ec2ClientMock.CreateVolumeWithContextFunc: method is nil but ec2Client.CreateVolumeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateVolumeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateVolumeWithContext.Lock()
	mock.calls.CreateVolumeWithContext = append(mock.calls.CreateVolumeWithContext, callInfo)
	lockec2ClientMockCreateVolumeWithContext.Unlock()
	return mock.CreateVolumeWithContextFunc(in1, in2, in3...)
}

// CreateVolumeWithContextCalls gets all the calls that were made to CreateVolumeWithContext.
// Check the length with:
//     len(mockedec2Client.CreateVolumeWithContextCalls())
func (mock *ec2ClientMock) CreateVolumeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateVolumeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateVolumeInput
		In3 []request.Option
	}
	lockec2ClientMockCreateVolumeWithContext.RLock()
	calls = mock.calls.CreateVolumeWithContext
	lockec2ClientMockCreateVolumeWithContext.RUnlock()
	return calls
}

// CreateVpc calls CreateVpcFunc.
func (mock *ec2ClientMock) CreateVpc(in1 *ec2.CreateVpcInput) (*ec2.CreateVpcOutput, error) {
	if mock.CreateVpcFunc == nil {
		panic("ec2ClientMock.CreateVpcFunc: method is nil but ec2Client.CreateVpc was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateVpcInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateVpc.Lock()
	mock.calls.CreateVpc = append(mock.calls.CreateVpc, callInfo)
	lockec2ClientMockCreateVpc.Unlock()
	return mock.CreateVpcFunc(in1)
}

// CreateVpcCalls gets all the calls that were made to CreateVpc.
// Check the length with:
//     len(mockedec2Client.CreateVpcCalls())
func (mock *ec2ClientMock) CreateVpcCalls() []struct {
	In1 *ec2.CreateVpcInput
} {
	var calls []struct {
		In1 *ec2.CreateVpcInput
	}
	lockec2ClientMockCreateVpc.RLock()
	calls = mock.calls.CreateVpc
	lockec2ClientMockCreateVpc.RUnlock()
	return calls
}

// CreateVpcEndpoint calls CreateVpcEndpointFunc.
func (mock *ec2ClientMock) CreateVpcEndpoint(in1 *ec2.CreateVpcEndpointInput) (*ec2.CreateVpcEndpointOutput, error) {
	if mock.CreateVpcEndpointFunc == nil {
		panic("ec2ClientMock.CreateVpcEndpointFunc: method is nil but ec2Client.CreateVpcEndpoint was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateVpcEndpointInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateVpcEndpoint.Lock()
	mock.calls.CreateVpcEndpoint = append(mock.calls.CreateVpcEndpoint, callInfo)
	lockec2ClientMockCreateVpcEndpoint.Unlock()
	return mock.CreateVpcEndpointFunc(in1)
}

// CreateVpcEndpointCalls gets all the calls that were made to CreateVpcEndpoint.
// Check the length with:
//     len(mockedec2Client.CreateVpcEndpointCalls())
func (mock *ec2ClientMock) CreateVpcEndpointCalls() []struct {
	In1 *ec2.CreateVpcEndpointInput
} {
	var calls []struct {
		In1 *ec2.CreateVpcEndpointInput
	}
	lockec2ClientMockCreateVpcEndpoint.RLock()
	calls = mock.calls.CreateVpcEndpoint
	lockec2ClientMockCreateVpcEndpoint.RUnlock()
	return calls
}

// CreateVpcEndpointConnectionNotification calls CreateVpcEndpointConnectionNotificationFunc.
func (mock *ec2ClientMock) CreateVpcEndpointConnectionNotification(in1 *ec2.CreateVpcEndpointConnectionNotificationInput) (*ec2.CreateVpcEndpointConnectionNotificationOutput, error) {
	if mock.CreateVpcEndpointConnectionNotificationFunc == nil {
		panic("ec2ClientMock.CreateVpcEndpointConnectionNotificationFunc: method is nil but ec2Client.CreateVpcEndpointConnectionNotification was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateVpcEndpointConnectionNotificationInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateVpcEndpointConnectionNotification.Lock()
	mock.calls.CreateVpcEndpointConnectionNotification = append(mock.calls.CreateVpcEndpointConnectionNotification, callInfo)
	lockec2ClientMockCreateVpcEndpointConnectionNotification.Unlock()
	return mock.CreateVpcEndpointConnectionNotificationFunc(in1)
}

// CreateVpcEndpointConnectionNotificationCalls gets all the calls that were made to CreateVpcEndpointConnectionNotification.
// Check the length with:
//     len(mockedec2Client.CreateVpcEndpointConnectionNotificationCalls())
func (mock *ec2ClientMock) CreateVpcEndpointConnectionNotificationCalls() []struct {
	In1 *ec2.CreateVpcEndpointConnectionNotificationInput
} {
	var calls []struct {
		In1 *ec2.CreateVpcEndpointConnectionNotificationInput
	}
	lockec2ClientMockCreateVpcEndpointConnectionNotification.RLock()
	calls = mock.calls.CreateVpcEndpointConnectionNotification
	lockec2ClientMockCreateVpcEndpointConnectionNotification.RUnlock()
	return calls
}

// CreateVpcEndpointConnectionNotificationRequest calls CreateVpcEndpointConnectionNotificationRequestFunc.
func (mock *ec2ClientMock) CreateVpcEndpointConnectionNotificationRequest(in1 *ec2.CreateVpcEndpointConnectionNotificationInput) (*request.Request, *ec2.CreateVpcEndpointConnectionNotificationOutput) {
	if mock.CreateVpcEndpointConnectionNotificationRequestFunc == nil {
		panic("ec2ClientMock.CreateVpcEndpointConnectionNotificationRequestFunc: method is nil but ec2Client.CreateVpcEndpointConnectionNotificationRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateVpcEndpointConnectionNotificationInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateVpcEndpointConnectionNotificationRequest.Lock()
	mock.calls.CreateVpcEndpointConnectionNotificationRequest = append(mock.calls.CreateVpcEndpointConnectionNotificationRequest, callInfo)
	lockec2ClientMockCreateVpcEndpointConnectionNotificationRequest.Unlock()
	return mock.CreateVpcEndpointConnectionNotificationRequestFunc(in1)
}

// CreateVpcEndpointConnectionNotificationRequestCalls gets all the calls that were made to CreateVpcEndpointConnectionNotificationRequest.
// Check the length with:
//     len(mockedec2Client.CreateVpcEndpointConnectionNotificationRequestCalls())
func (mock *ec2ClientMock) CreateVpcEndpointConnectionNotificationRequestCalls() []struct {
	In1 *ec2.CreateVpcEndpointConnectionNotificationInput
} {
	var calls []struct {
		In1 *ec2.CreateVpcEndpointConnectionNotificationInput
	}
	lockec2ClientMockCreateVpcEndpointConnectionNotificationRequest.RLock()
	calls = mock.calls.CreateVpcEndpointConnectionNotificationRequest
	lockec2ClientMockCreateVpcEndpointConnectionNotificationRequest.RUnlock()
	return calls
}

// CreateVpcEndpointConnectionNotificationWithContext calls CreateVpcEndpointConnectionNotificationWithContextFunc.
func (mock *ec2ClientMock) CreateVpcEndpointConnectionNotificationWithContext(in1 context.Context, in2 *ec2.CreateVpcEndpointConnectionNotificationInput, in3 ...request.Option) (*ec2.CreateVpcEndpointConnectionNotificationOutput, error) {
	if mock.CreateVpcEndpointConnectionNotificationWithContextFunc == nil {
		panic("ec2ClientMock.CreateVpcEndpointConnectionNotificationWithContextFunc: method is nil but ec2Client.CreateVpcEndpointConnectionNotificationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateVpcEndpointConnectionNotificationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateVpcEndpointConnectionNotificationWithContext.Lock()
	mock.calls.CreateVpcEndpointConnectionNotificationWithContext = append(mock.calls.CreateVpcEndpointConnectionNotificationWithContext, callInfo)
	lockec2ClientMockCreateVpcEndpointConnectionNotificationWithContext.Unlock()
	return mock.CreateVpcEndpointConnectionNotificationWithContextFunc(in1, in2, in3...)
}

// CreateVpcEndpointConnectionNotificationWithContextCalls gets all the calls that were made to CreateVpcEndpointConnectionNotificationWithContext.
// Check the length with:
//     len(mockedec2Client.CreateVpcEndpointConnectionNotificationWithContextCalls())
func (mock *ec2ClientMock) CreateVpcEndpointConnectionNotificationWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateVpcEndpointConnectionNotificationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateVpcEndpointConnectionNotificationInput
		In3 []request.Option
	}
	lockec2ClientMockCreateVpcEndpointConnectionNotificationWithContext.RLock()
	calls = mock.calls.CreateVpcEndpointConnectionNotificationWithContext
	lockec2ClientMockCreateVpcEndpointConnectionNotificationWithContext.RUnlock()
	return calls
}

// CreateVpcEndpointRequest calls CreateVpcEndpointRequestFunc.
func (mock *ec2ClientMock) CreateVpcEndpointRequest(in1 *ec2.CreateVpcEndpointInput) (*request.Request, *ec2.CreateVpcEndpointOutput) {
	if mock.CreateVpcEndpointRequestFunc == nil {
		panic("ec2ClientMock.CreateVpcEndpointRequestFunc: method is nil but ec2Client.CreateVpcEndpointRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateVpcEndpointInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateVpcEndpointRequest.Lock()
	mock.calls.CreateVpcEndpointRequest = append(mock.calls.CreateVpcEndpointRequest, callInfo)
	lockec2ClientMockCreateVpcEndpointRequest.Unlock()
	return mock.CreateVpcEndpointRequestFunc(in1)
}

// CreateVpcEndpointRequestCalls gets all the calls that were made to CreateVpcEndpointRequest.
// Check the length with:
//     len(mockedec2Client.CreateVpcEndpointRequestCalls())
func (mock *ec2ClientMock) CreateVpcEndpointRequestCalls() []struct {
	In1 *ec2.CreateVpcEndpointInput
} {
	var calls []struct {
		In1 *ec2.CreateVpcEndpointInput
	}
	lockec2ClientMockCreateVpcEndpointRequest.RLock()
	calls = mock.calls.CreateVpcEndpointRequest
	lockec2ClientMockCreateVpcEndpointRequest.RUnlock()
	return calls
}

// CreateVpcEndpointServiceConfiguration calls CreateVpcEndpointServiceConfigurationFunc.
func (mock *ec2ClientMock) CreateVpcEndpointServiceConfiguration(in1 *ec2.CreateVpcEndpointServiceConfigurationInput) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error) {
	if mock.CreateVpcEndpointServiceConfigurationFunc == nil {
		panic("ec2ClientMock.CreateVpcEndpointServiceConfigurationFunc: method is nil but ec2Client.CreateVpcEndpointServiceConfiguration was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateVpcEndpointServiceConfigurationInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateVpcEndpointServiceConfiguration.Lock()
	mock.calls.CreateVpcEndpointServiceConfiguration = append(mock.calls.CreateVpcEndpointServiceConfiguration, callInfo)
	lockec2ClientMockCreateVpcEndpointServiceConfiguration.Unlock()
	return mock.CreateVpcEndpointServiceConfigurationFunc(in1)
}

// CreateVpcEndpointServiceConfigurationCalls gets all the calls that were made to CreateVpcEndpointServiceConfiguration.
// Check the length with:
//     len(mockedec2Client.CreateVpcEndpointServiceConfigurationCalls())
func (mock *ec2ClientMock) CreateVpcEndpointServiceConfigurationCalls() []struct {
	In1 *ec2.CreateVpcEndpointServiceConfigurationInput
} {
	var calls []struct {
		In1 *ec2.CreateVpcEndpointServiceConfigurationInput
	}
	lockec2ClientMockCreateVpcEndpointServiceConfiguration.RLock()
	calls = mock.calls.CreateVpcEndpointServiceConfiguration
	lockec2ClientMockCreateVpcEndpointServiceConfiguration.RUnlock()
	return calls
}

// CreateVpcEndpointServiceConfigurationRequest calls CreateVpcEndpointServiceConfigurationRequestFunc.
func (mock *ec2ClientMock) CreateVpcEndpointServiceConfigurationRequest(in1 *ec2.CreateVpcEndpointServiceConfigurationInput) (*request.Request, *ec2.CreateVpcEndpointServiceConfigurationOutput) {
	if mock.CreateVpcEndpointServiceConfigurationRequestFunc == nil {
		panic("ec2ClientMock.CreateVpcEndpointServiceConfigurationRequestFunc: method is nil but ec2Client.CreateVpcEndpointServiceConfigurationRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateVpcEndpointServiceConfigurationInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateVpcEndpointServiceConfigurationRequest.Lock()
	mock.calls.CreateVpcEndpointServiceConfigurationRequest = append(mock.calls.CreateVpcEndpointServiceConfigurationRequest, callInfo)
	lockec2ClientMockCreateVpcEndpointServiceConfigurationRequest.Unlock()
	return mock.CreateVpcEndpointServiceConfigurationRequestFunc(in1)
}

// CreateVpcEndpointServiceConfigurationRequestCalls gets all the calls that were made to CreateVpcEndpointServiceConfigurationRequest.
// Check the length with:
//     len(mockedec2Client.CreateVpcEndpointServiceConfigurationRequestCalls())
func (mock *ec2ClientMock) CreateVpcEndpointServiceConfigurationRequestCalls() []struct {
	In1 *ec2.CreateVpcEndpointServiceConfigurationInput
} {
	var calls []struct {
		In1 *ec2.CreateVpcEndpointServiceConfigurationInput
	}
	lockec2ClientMockCreateVpcEndpointServiceConfigurationRequest.RLock()
	calls = mock.calls.CreateVpcEndpointServiceConfigurationRequest
	lockec2ClientMockCreateVpcEndpointServiceConfigurationRequest.RUnlock()
	return calls
}

// CreateVpcEndpointServiceConfigurationWithContext calls CreateVpcEndpointServiceConfigurationWithContextFunc.
func (mock *ec2ClientMock) CreateVpcEndpointServiceConfigurationWithContext(in1 context.Context, in2 *ec2.CreateVpcEndpointServiceConfigurationInput, in3 ...request.Option) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error) {
	if mock.CreateVpcEndpointServiceConfigurationWithContextFunc == nil {
		panic("ec2ClientMock.CreateVpcEndpointServiceConfigurationWithContextFunc: method is nil but ec2Client.CreateVpcEndpointServiceConfigurationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateVpcEndpointServiceConfigurationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateVpcEndpointServiceConfigurationWithContext.Lock()
	mock.calls.CreateVpcEndpointServiceConfigurationWithContext = append(mock.calls.CreateVpcEndpointServiceConfigurationWithContext, callInfo)
	lockec2ClientMockCreateVpcEndpointServiceConfigurationWithContext.Unlock()
	return mock.CreateVpcEndpointServiceConfigurationWithContextFunc(in1, in2, in3...)
}

// CreateVpcEndpointServiceConfigurationWithContextCalls gets all the calls that were made to CreateVpcEndpointServiceConfigurationWithContext.
// Check the length with:
//     len(mockedec2Client.CreateVpcEndpointServiceConfigurationWithContextCalls())
func (mock *ec2ClientMock) CreateVpcEndpointServiceConfigurationWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateVpcEndpointServiceConfigurationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateVpcEndpointServiceConfigurationInput
		In3 []request.Option
	}
	lockec2ClientMockCreateVpcEndpointServiceConfigurationWithContext.RLock()
	calls = mock.calls.CreateVpcEndpointServiceConfigurationWithContext
	lockec2ClientMockCreateVpcEndpointServiceConfigurationWithContext.RUnlock()
	return calls
}

// CreateVpcEndpointWithContext calls CreateVpcEndpointWithContextFunc.
func (mock *ec2ClientMock) CreateVpcEndpointWithContext(in1 context.Context, in2 *ec2.CreateVpcEndpointInput, in3 ...request.Option) (*ec2.CreateVpcEndpointOutput, error) {
	if mock.CreateVpcEndpointWithContextFunc == nil {
		panic("ec2ClientMock.CreateVpcEndpointWithContextFunc: method is nil but ec2Client.CreateVpcEndpointWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateVpcEndpointInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateVpcEndpointWithContext.Lock()
	mock.calls.CreateVpcEndpointWithContext = append(mock.calls.CreateVpcEndpointWithContext, callInfo)
	lockec2ClientMockCreateVpcEndpointWithContext.Unlock()
	return mock.CreateVpcEndpointWithContextFunc(in1, in2, in3...)
}

// CreateVpcEndpointWithContextCalls gets all the calls that were made to CreateVpcEndpointWithContext.
// Check the length with:
//     len(mockedec2Client.CreateVpcEndpointWithContextCalls())
func (mock *ec2ClientMock) CreateVpcEndpointWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateVpcEndpointInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateVpcEndpointInput
		In3 []request.Option
	}
	lockec2ClientMockCreateVpcEndpointWithContext.RLock()
	calls = mock.calls.CreateVpcEndpointWithContext
	lockec2ClientMockCreateVpcEndpointWithContext.RUnlock()
	return calls
}

// CreateVpcPeeringConnection calls CreateVpcPeeringConnectionFunc.
func (mock *ec2ClientMock) CreateVpcPeeringConnection(in1 *ec2.CreateVpcPeeringConnectionInput) (*ec2.CreateVpcPeeringConnectionOutput, error) {
	if mock.CreateVpcPeeringConnectionFunc == nil {
		panic("ec2ClientMock.CreateVpcPeeringConnectionFunc: method is nil but ec2Client.CreateVpcPeeringConnection was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateVpcPeeringConnectionInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateVpcPeeringConnection.Lock()
	mock.calls.CreateVpcPeeringConnection = append(mock.calls.CreateVpcPeeringConnection, callInfo)
	lockec2ClientMockCreateVpcPeeringConnection.Unlock()
	return mock.CreateVpcPeeringConnectionFunc(in1)
}

// CreateVpcPeeringConnectionCalls gets all the calls that were made to CreateVpcPeeringConnection.
// Check the length with:
//     len(mockedec2Client.CreateVpcPeeringConnectionCalls())
func (mock *ec2ClientMock) CreateVpcPeeringConnectionCalls() []struct {
	In1 *ec2.CreateVpcPeeringConnectionInput
} {
	var calls []struct {
		In1 *ec2.CreateVpcPeeringConnectionInput
	}
	lockec2ClientMockCreateVpcPeeringConnection.RLock()
	calls = mock.calls.CreateVpcPeeringConnection
	lockec2ClientMockCreateVpcPeeringConnection.RUnlock()
	return calls
}

// CreateVpcPeeringConnectionRequest calls CreateVpcPeeringConnectionRequestFunc.
func (mock *ec2ClientMock) CreateVpcPeeringConnectionRequest(in1 *ec2.CreateVpcPeeringConnectionInput) (*request.Request, *ec2.CreateVpcPeeringConnectionOutput) {
	if mock.CreateVpcPeeringConnectionRequestFunc == nil {
		panic("ec2ClientMock.CreateVpcPeeringConnectionRequestFunc: method is nil but ec2Client.CreateVpcPeeringConnectionRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateVpcPeeringConnectionInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateVpcPeeringConnectionRequest.Lock()
	mock.calls.CreateVpcPeeringConnectionRequest = append(mock.calls.CreateVpcPeeringConnectionRequest, callInfo)
	lockec2ClientMockCreateVpcPeeringConnectionRequest.Unlock()
	return mock.CreateVpcPeeringConnectionRequestFunc(in1)
}

// CreateVpcPeeringConnectionRequestCalls gets all the calls that were made to CreateVpcPeeringConnectionRequest.
// Check the length with:
//     len(mockedec2Client.CreateVpcPeeringConnectionRequestCalls())
func (mock *ec2ClientMock) CreateVpcPeeringConnectionRequestCalls() []struct {
	In1 *ec2.CreateVpcPeeringConnectionInput
} {
	var calls []struct {
		In1 *ec2.CreateVpcPeeringConnectionInput
	}
	lockec2ClientMockCreateVpcPeeringConnectionRequest.RLock()
	calls = mock.calls.CreateVpcPeeringConnectionRequest
	lockec2ClientMockCreateVpcPeeringConnectionRequest.RUnlock()
	return calls
}

// CreateVpcPeeringConnectionWithContext calls CreateVpcPeeringConnectionWithContextFunc.
func (mock *ec2ClientMock) CreateVpcPeeringConnectionWithContext(in1 context.Context, in2 *ec2.CreateVpcPeeringConnectionInput, in3 ...request.Option) (*ec2.CreateVpcPeeringConnectionOutput, error) {
	if mock.CreateVpcPeeringConnectionWithContextFunc == nil {
		panic("ec2ClientMock.CreateVpcPeeringConnectionWithContextFunc: method is nil but ec2Client.CreateVpcPeeringConnectionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateVpcPeeringConnectionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateVpcPeeringConnectionWithContext.Lock()
	mock.calls.CreateVpcPeeringConnectionWithContext = append(mock.calls.CreateVpcPeeringConnectionWithContext, callInfo)
	lockec2ClientMockCreateVpcPeeringConnectionWithContext.Unlock()
	return mock.CreateVpcPeeringConnectionWithContextFunc(in1, in2, in3...)
}

// CreateVpcPeeringConnectionWithContextCalls gets all the calls that were made to CreateVpcPeeringConnectionWithContext.
// Check the length with:
//     len(mockedec2Client.CreateVpcPeeringConnectionWithContextCalls())
func (mock *ec2ClientMock) CreateVpcPeeringConnectionWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateVpcPeeringConnectionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateVpcPeeringConnectionInput
		In3 []request.Option
	}
	lockec2ClientMockCreateVpcPeeringConnectionWithContext.RLock()
	calls = mock.calls.CreateVpcPeeringConnectionWithContext
	lockec2ClientMockCreateVpcPeeringConnectionWithContext.RUnlock()
	return calls
}

// CreateVpcRequest calls CreateVpcRequestFunc.
func (mock *ec2ClientMock) CreateVpcRequest(in1 *ec2.CreateVpcInput) (*request.Request, *ec2.CreateVpcOutput) {
	if mock.CreateVpcRequestFunc == nil {
		panic("ec2ClientMock.CreateVpcRequestFunc: method is nil but ec2Client.CreateVpcRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateVpcInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateVpcRequest.Lock()
	mock.calls.CreateVpcRequest = append(mock.calls.CreateVpcRequest, callInfo)
	lockec2ClientMockCreateVpcRequest.Unlock()
	return mock.CreateVpcRequestFunc(in1)
}

// CreateVpcRequestCalls gets all the calls that were made to CreateVpcRequest.
// Check the length with:
//     len(mockedec2Client.CreateVpcRequestCalls())
func (mock *ec2ClientMock) CreateVpcRequestCalls() []struct {
	In1 *ec2.CreateVpcInput
} {
	var calls []struct {
		In1 *ec2.CreateVpcInput
	}
	lockec2ClientMockCreateVpcRequest.RLock()
	calls = mock.calls.CreateVpcRequest
	lockec2ClientMockCreateVpcRequest.RUnlock()
	return calls
}

// CreateVpcWithContext calls CreateVpcWithContextFunc.
func (mock *ec2ClientMock) CreateVpcWithContext(in1 context.Context, in2 *ec2.CreateVpcInput, in3 ...request.Option) (*ec2.CreateVpcOutput, error) {
	if mock.CreateVpcWithContextFunc == nil {
		panic("ec2ClientMock.CreateVpcWithContextFunc: method is nil but ec2Client.CreateVpcWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateVpcInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateVpcWithContext.Lock()
	mock.calls.CreateVpcWithContext = append(mock.calls.CreateVpcWithContext, callInfo)
	lockec2ClientMockCreateVpcWithContext.Unlock()
	return mock.CreateVpcWithContextFunc(in1, in2, in3...)
}

// CreateVpcWithContextCalls gets all the calls that were made to CreateVpcWithContext.
// Check the length with:
//     len(mockedec2Client.CreateVpcWithContextCalls())
func (mock *ec2ClientMock) CreateVpcWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateVpcInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateVpcInput
		In3 []request.Option
	}
	lockec2ClientMockCreateVpcWithContext.RLock()
	calls = mock.calls.CreateVpcWithContext
	lockec2ClientMockCreateVpcWithContext.RUnlock()
	return calls
}

// CreateVpnConnection calls CreateVpnConnectionFunc.
func (mock *ec2ClientMock) CreateVpnConnection(in1 *ec2.CreateVpnConnectionInput) (*ec2.CreateVpnConnectionOutput, error) {
	if mock.CreateVpnConnectionFunc == nil {
		panic("ec2ClientMock.CreateVpnConnectionFunc: method is nil but ec2Client.CreateVpnConnection was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateVpnConnectionInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateVpnConnection.Lock()
	mock.calls.CreateVpnConnection = append(mock.calls.CreateVpnConnection, callInfo)
	lockec2ClientMockCreateVpnConnection.Unlock()
	return mock.CreateVpnConnectionFunc(in1)
}

// CreateVpnConnectionCalls gets all the calls that were made to CreateVpnConnection.
// Check the length with:
//     len(mockedec2Client.CreateVpnConnectionCalls())
func (mock *ec2ClientMock) CreateVpnConnectionCalls() []struct {
	In1 *ec2.CreateVpnConnectionInput
} {
	var calls []struct {
		In1 *ec2.CreateVpnConnectionInput
	}
	lockec2ClientMockCreateVpnConnection.RLock()
	calls = mock.calls.CreateVpnConnection
	lockec2ClientMockCreateVpnConnection.RUnlock()
	return calls
}

// CreateVpnConnectionRequest calls CreateVpnConnectionRequestFunc.
func (mock *ec2ClientMock) CreateVpnConnectionRequest(in1 *ec2.CreateVpnConnectionInput) (*request.Request, *ec2.CreateVpnConnectionOutput) {
	if mock.CreateVpnConnectionRequestFunc == nil {
		panic("ec2ClientMock.CreateVpnConnectionRequestFunc: method is nil but ec2Client.CreateVpnConnectionRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateVpnConnectionInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateVpnConnectionRequest.Lock()
	mock.calls.CreateVpnConnectionRequest = append(mock.calls.CreateVpnConnectionRequest, callInfo)
	lockec2ClientMockCreateVpnConnectionRequest.Unlock()
	return mock.CreateVpnConnectionRequestFunc(in1)
}

// CreateVpnConnectionRequestCalls gets all the calls that were made to CreateVpnConnectionRequest.
// Check the length with:
//     len(mockedec2Client.CreateVpnConnectionRequestCalls())
func (mock *ec2ClientMock) CreateVpnConnectionRequestCalls() []struct {
	In1 *ec2.CreateVpnConnectionInput
} {
	var calls []struct {
		In1 *ec2.CreateVpnConnectionInput
	}
	lockec2ClientMockCreateVpnConnectionRequest.RLock()
	calls = mock.calls.CreateVpnConnectionRequest
	lockec2ClientMockCreateVpnConnectionRequest.RUnlock()
	return calls
}

// CreateVpnConnectionRoute calls CreateVpnConnectionRouteFunc.
func (mock *ec2ClientMock) CreateVpnConnectionRoute(in1 *ec2.CreateVpnConnectionRouteInput) (*ec2.CreateVpnConnectionRouteOutput, error) {
	if mock.CreateVpnConnectionRouteFunc == nil {
		panic("ec2ClientMock.CreateVpnConnectionRouteFunc: method is nil but ec2Client.CreateVpnConnectionRoute was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateVpnConnectionRouteInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateVpnConnectionRoute.Lock()
	mock.calls.CreateVpnConnectionRoute = append(mock.calls.CreateVpnConnectionRoute, callInfo)
	lockec2ClientMockCreateVpnConnectionRoute.Unlock()
	return mock.CreateVpnConnectionRouteFunc(in1)
}

// CreateVpnConnectionRouteCalls gets all the calls that were made to CreateVpnConnectionRoute.
// Check the length with:
//     len(mockedec2Client.CreateVpnConnectionRouteCalls())
func (mock *ec2ClientMock) CreateVpnConnectionRouteCalls() []struct {
	In1 *ec2.CreateVpnConnectionRouteInput
} {
	var calls []struct {
		In1 *ec2.CreateVpnConnectionRouteInput
	}
	lockec2ClientMockCreateVpnConnectionRoute.RLock()
	calls = mock.calls.CreateVpnConnectionRoute
	lockec2ClientMockCreateVpnConnectionRoute.RUnlock()
	return calls
}

// CreateVpnConnectionRouteRequest calls CreateVpnConnectionRouteRequestFunc.
func (mock *ec2ClientMock) CreateVpnConnectionRouteRequest(in1 *ec2.CreateVpnConnectionRouteInput) (*request.Request, *ec2.CreateVpnConnectionRouteOutput) {
	if mock.CreateVpnConnectionRouteRequestFunc == nil {
		panic("ec2ClientMock.CreateVpnConnectionRouteRequestFunc: method is nil but ec2Client.CreateVpnConnectionRouteRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateVpnConnectionRouteInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateVpnConnectionRouteRequest.Lock()
	mock.calls.CreateVpnConnectionRouteRequest = append(mock.calls.CreateVpnConnectionRouteRequest, callInfo)
	lockec2ClientMockCreateVpnConnectionRouteRequest.Unlock()
	return mock.CreateVpnConnectionRouteRequestFunc(in1)
}

// CreateVpnConnectionRouteRequestCalls gets all the calls that were made to CreateVpnConnectionRouteRequest.
// Check the length with:
//     len(mockedec2Client.CreateVpnConnectionRouteRequestCalls())
func (mock *ec2ClientMock) CreateVpnConnectionRouteRequestCalls() []struct {
	In1 *ec2.CreateVpnConnectionRouteInput
} {
	var calls []struct {
		In1 *ec2.CreateVpnConnectionRouteInput
	}
	lockec2ClientMockCreateVpnConnectionRouteRequest.RLock()
	calls = mock.calls.CreateVpnConnectionRouteRequest
	lockec2ClientMockCreateVpnConnectionRouteRequest.RUnlock()
	return calls
}

// CreateVpnConnectionRouteWithContext calls CreateVpnConnectionRouteWithContextFunc.
func (mock *ec2ClientMock) CreateVpnConnectionRouteWithContext(in1 context.Context, in2 *ec2.CreateVpnConnectionRouteInput, in3 ...request.Option) (*ec2.CreateVpnConnectionRouteOutput, error) {
	if mock.CreateVpnConnectionRouteWithContextFunc == nil {
		panic("ec2ClientMock.CreateVpnConnectionRouteWithContextFunc: method is nil but ec2Client.CreateVpnConnectionRouteWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateVpnConnectionRouteInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateVpnConnectionRouteWithContext.Lock()
	mock.calls.CreateVpnConnectionRouteWithContext = append(mock.calls.CreateVpnConnectionRouteWithContext, callInfo)
	lockec2ClientMockCreateVpnConnectionRouteWithContext.Unlock()
	return mock.CreateVpnConnectionRouteWithContextFunc(in1, in2, in3...)
}

// CreateVpnConnectionRouteWithContextCalls gets all the calls that were made to CreateVpnConnectionRouteWithContext.
// Check the length with:
//     len(mockedec2Client.CreateVpnConnectionRouteWithContextCalls())
func (mock *ec2ClientMock) CreateVpnConnectionRouteWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateVpnConnectionRouteInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateVpnConnectionRouteInput
		In3 []request.Option
	}
	lockec2ClientMockCreateVpnConnectionRouteWithContext.RLock()
	calls = mock.calls.CreateVpnConnectionRouteWithContext
	lockec2ClientMockCreateVpnConnectionRouteWithContext.RUnlock()
	return calls
}

// CreateVpnConnectionWithContext calls CreateVpnConnectionWithContextFunc.
func (mock *ec2ClientMock) CreateVpnConnectionWithContext(in1 context.Context, in2 *ec2.CreateVpnConnectionInput, in3 ...request.Option) (*ec2.CreateVpnConnectionOutput, error) {
	if mock.CreateVpnConnectionWithContextFunc == nil {
		panic("ec2ClientMock.CreateVpnConnectionWithContextFunc: method is nil but ec2Client.CreateVpnConnectionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateVpnConnectionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateVpnConnectionWithContext.Lock()
	mock.calls.CreateVpnConnectionWithContext = append(mock.calls.CreateVpnConnectionWithContext, callInfo)
	lockec2ClientMockCreateVpnConnectionWithContext.Unlock()
	return mock.CreateVpnConnectionWithContextFunc(in1, in2, in3...)
}

// CreateVpnConnectionWithContextCalls gets all the calls that were made to CreateVpnConnectionWithContext.
// Check the length with:
//     len(mockedec2Client.CreateVpnConnectionWithContextCalls())
func (mock *ec2ClientMock) CreateVpnConnectionWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateVpnConnectionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateVpnConnectionInput
		In3 []request.Option
	}
	lockec2ClientMockCreateVpnConnectionWithContext.RLock()
	calls = mock.calls.CreateVpnConnectionWithContext
	lockec2ClientMockCreateVpnConnectionWithContext.RUnlock()
	return calls
}

// CreateVpnGateway calls CreateVpnGatewayFunc.
func (mock *ec2ClientMock) CreateVpnGateway(in1 *ec2.CreateVpnGatewayInput) (*ec2.CreateVpnGatewayOutput, error) {
	if mock.CreateVpnGatewayFunc == nil {
		panic("ec2ClientMock.CreateVpnGatewayFunc: method is nil but ec2Client.CreateVpnGateway was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateVpnGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateVpnGateway.Lock()
	mock.calls.CreateVpnGateway = append(mock.calls.CreateVpnGateway, callInfo)
	lockec2ClientMockCreateVpnGateway.Unlock()
	return mock.CreateVpnGatewayFunc(in1)
}

// CreateVpnGatewayCalls gets all the calls that were made to CreateVpnGateway.
// Check the length with:
//     len(mockedec2Client.CreateVpnGatewayCalls())
func (mock *ec2ClientMock) CreateVpnGatewayCalls() []struct {
	In1 *ec2.CreateVpnGatewayInput
} {
	var calls []struct {
		In1 *ec2.CreateVpnGatewayInput
	}
	lockec2ClientMockCreateVpnGateway.RLock()
	calls = mock.calls.CreateVpnGateway
	lockec2ClientMockCreateVpnGateway.RUnlock()
	return calls
}

// CreateVpnGatewayRequest calls CreateVpnGatewayRequestFunc.
func (mock *ec2ClientMock) CreateVpnGatewayRequest(in1 *ec2.CreateVpnGatewayInput) (*request.Request, *ec2.CreateVpnGatewayOutput) {
	if mock.CreateVpnGatewayRequestFunc == nil {
		panic("ec2ClientMock.CreateVpnGatewayRequestFunc: method is nil but ec2Client.CreateVpnGatewayRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.CreateVpnGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockCreateVpnGatewayRequest.Lock()
	mock.calls.CreateVpnGatewayRequest = append(mock.calls.CreateVpnGatewayRequest, callInfo)
	lockec2ClientMockCreateVpnGatewayRequest.Unlock()
	return mock.CreateVpnGatewayRequestFunc(in1)
}

// CreateVpnGatewayRequestCalls gets all the calls that were made to CreateVpnGatewayRequest.
// Check the length with:
//     len(mockedec2Client.CreateVpnGatewayRequestCalls())
func (mock *ec2ClientMock) CreateVpnGatewayRequestCalls() []struct {
	In1 *ec2.CreateVpnGatewayInput
} {
	var calls []struct {
		In1 *ec2.CreateVpnGatewayInput
	}
	lockec2ClientMockCreateVpnGatewayRequest.RLock()
	calls = mock.calls.CreateVpnGatewayRequest
	lockec2ClientMockCreateVpnGatewayRequest.RUnlock()
	return calls
}

// CreateVpnGatewayWithContext calls CreateVpnGatewayWithContextFunc.
func (mock *ec2ClientMock) CreateVpnGatewayWithContext(in1 context.Context, in2 *ec2.CreateVpnGatewayInput, in3 ...request.Option) (*ec2.CreateVpnGatewayOutput, error) {
	if mock.CreateVpnGatewayWithContextFunc == nil {
		panic("ec2ClientMock.CreateVpnGatewayWithContextFunc: method is nil but ec2Client.CreateVpnGatewayWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.CreateVpnGatewayInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockCreateVpnGatewayWithContext.Lock()
	mock.calls.CreateVpnGatewayWithContext = append(mock.calls.CreateVpnGatewayWithContext, callInfo)
	lockec2ClientMockCreateVpnGatewayWithContext.Unlock()
	return mock.CreateVpnGatewayWithContextFunc(in1, in2, in3...)
}

// CreateVpnGatewayWithContextCalls gets all the calls that were made to CreateVpnGatewayWithContext.
// Check the length with:
//     len(mockedec2Client.CreateVpnGatewayWithContextCalls())
func (mock *ec2ClientMock) CreateVpnGatewayWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.CreateVpnGatewayInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.CreateVpnGatewayInput
		In3 []request.Option
	}
	lockec2ClientMockCreateVpnGatewayWithContext.RLock()
	calls = mock.calls.CreateVpnGatewayWithContext
	lockec2ClientMockCreateVpnGatewayWithContext.RUnlock()
	return calls
}

// DeleteClientVpnEndpoint calls DeleteClientVpnEndpointFunc.
func (mock *ec2ClientMock) DeleteClientVpnEndpoint(in1 *ec2.DeleteClientVpnEndpointInput) (*ec2.DeleteClientVpnEndpointOutput, error) {
	if mock.DeleteClientVpnEndpointFunc == nil {
		panic("ec2ClientMock.DeleteClientVpnEndpointFunc: method is nil but ec2Client.DeleteClientVpnEndpoint was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteClientVpnEndpointInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteClientVpnEndpoint.Lock()
	mock.calls.DeleteClientVpnEndpoint = append(mock.calls.DeleteClientVpnEndpoint, callInfo)
	lockec2ClientMockDeleteClientVpnEndpoint.Unlock()
	return mock.DeleteClientVpnEndpointFunc(in1)
}

// DeleteClientVpnEndpointCalls gets all the calls that were made to DeleteClientVpnEndpoint.
// Check the length with:
//     len(mockedec2Client.DeleteClientVpnEndpointCalls())
func (mock *ec2ClientMock) DeleteClientVpnEndpointCalls() []struct {
	In1 *ec2.DeleteClientVpnEndpointInput
} {
	var calls []struct {
		In1 *ec2.DeleteClientVpnEndpointInput
	}
	lockec2ClientMockDeleteClientVpnEndpoint.RLock()
	calls = mock.calls.DeleteClientVpnEndpoint
	lockec2ClientMockDeleteClientVpnEndpoint.RUnlock()
	return calls
}

// DeleteClientVpnEndpointRequest calls DeleteClientVpnEndpointRequestFunc.
func (mock *ec2ClientMock) DeleteClientVpnEndpointRequest(in1 *ec2.DeleteClientVpnEndpointInput) (*request.Request, *ec2.DeleteClientVpnEndpointOutput) {
	if mock.DeleteClientVpnEndpointRequestFunc == nil {
		panic("ec2ClientMock.DeleteClientVpnEndpointRequestFunc: method is nil but ec2Client.DeleteClientVpnEndpointRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteClientVpnEndpointInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteClientVpnEndpointRequest.Lock()
	mock.calls.DeleteClientVpnEndpointRequest = append(mock.calls.DeleteClientVpnEndpointRequest, callInfo)
	lockec2ClientMockDeleteClientVpnEndpointRequest.Unlock()
	return mock.DeleteClientVpnEndpointRequestFunc(in1)
}

// DeleteClientVpnEndpointRequestCalls gets all the calls that were made to DeleteClientVpnEndpointRequest.
// Check the length with:
//     len(mockedec2Client.DeleteClientVpnEndpointRequestCalls())
func (mock *ec2ClientMock) DeleteClientVpnEndpointRequestCalls() []struct {
	In1 *ec2.DeleteClientVpnEndpointInput
} {
	var calls []struct {
		In1 *ec2.DeleteClientVpnEndpointInput
	}
	lockec2ClientMockDeleteClientVpnEndpointRequest.RLock()
	calls = mock.calls.DeleteClientVpnEndpointRequest
	lockec2ClientMockDeleteClientVpnEndpointRequest.RUnlock()
	return calls
}

// DeleteClientVpnEndpointWithContext calls DeleteClientVpnEndpointWithContextFunc.
func (mock *ec2ClientMock) DeleteClientVpnEndpointWithContext(in1 context.Context, in2 *ec2.DeleteClientVpnEndpointInput, in3 ...request.Option) (*ec2.DeleteClientVpnEndpointOutput, error) {
	if mock.DeleteClientVpnEndpointWithContextFunc == nil {
		panic("ec2ClientMock.DeleteClientVpnEndpointWithContextFunc: method is nil but ec2Client.DeleteClientVpnEndpointWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteClientVpnEndpointInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteClientVpnEndpointWithContext.Lock()
	mock.calls.DeleteClientVpnEndpointWithContext = append(mock.calls.DeleteClientVpnEndpointWithContext, callInfo)
	lockec2ClientMockDeleteClientVpnEndpointWithContext.Unlock()
	return mock.DeleteClientVpnEndpointWithContextFunc(in1, in2, in3...)
}

// DeleteClientVpnEndpointWithContextCalls gets all the calls that were made to DeleteClientVpnEndpointWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteClientVpnEndpointWithContextCalls())
func (mock *ec2ClientMock) DeleteClientVpnEndpointWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteClientVpnEndpointInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteClientVpnEndpointInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteClientVpnEndpointWithContext.RLock()
	calls = mock.calls.DeleteClientVpnEndpointWithContext
	lockec2ClientMockDeleteClientVpnEndpointWithContext.RUnlock()
	return calls
}

// DeleteClientVpnRoute calls DeleteClientVpnRouteFunc.
func (mock *ec2ClientMock) DeleteClientVpnRoute(in1 *ec2.DeleteClientVpnRouteInput) (*ec2.DeleteClientVpnRouteOutput, error) {
	if mock.DeleteClientVpnRouteFunc == nil {
		panic("ec2ClientMock.DeleteClientVpnRouteFunc: method is nil but ec2Client.DeleteClientVpnRoute was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteClientVpnRouteInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteClientVpnRoute.Lock()
	mock.calls.DeleteClientVpnRoute = append(mock.calls.DeleteClientVpnRoute, callInfo)
	lockec2ClientMockDeleteClientVpnRoute.Unlock()
	return mock.DeleteClientVpnRouteFunc(in1)
}

// DeleteClientVpnRouteCalls gets all the calls that were made to DeleteClientVpnRoute.
// Check the length with:
//     len(mockedec2Client.DeleteClientVpnRouteCalls())
func (mock *ec2ClientMock) DeleteClientVpnRouteCalls() []struct {
	In1 *ec2.DeleteClientVpnRouteInput
} {
	var calls []struct {
		In1 *ec2.DeleteClientVpnRouteInput
	}
	lockec2ClientMockDeleteClientVpnRoute.RLock()
	calls = mock.calls.DeleteClientVpnRoute
	lockec2ClientMockDeleteClientVpnRoute.RUnlock()
	return calls
}

// DeleteClientVpnRouteRequest calls DeleteClientVpnRouteRequestFunc.
func (mock *ec2ClientMock) DeleteClientVpnRouteRequest(in1 *ec2.DeleteClientVpnRouteInput) (*request.Request, *ec2.DeleteClientVpnRouteOutput) {
	if mock.DeleteClientVpnRouteRequestFunc == nil {
		panic("ec2ClientMock.DeleteClientVpnRouteRequestFunc: method is nil but ec2Client.DeleteClientVpnRouteRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteClientVpnRouteInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteClientVpnRouteRequest.Lock()
	mock.calls.DeleteClientVpnRouteRequest = append(mock.calls.DeleteClientVpnRouteRequest, callInfo)
	lockec2ClientMockDeleteClientVpnRouteRequest.Unlock()
	return mock.DeleteClientVpnRouteRequestFunc(in1)
}

// DeleteClientVpnRouteRequestCalls gets all the calls that were made to DeleteClientVpnRouteRequest.
// Check the length with:
//     len(mockedec2Client.DeleteClientVpnRouteRequestCalls())
func (mock *ec2ClientMock) DeleteClientVpnRouteRequestCalls() []struct {
	In1 *ec2.DeleteClientVpnRouteInput
} {
	var calls []struct {
		In1 *ec2.DeleteClientVpnRouteInput
	}
	lockec2ClientMockDeleteClientVpnRouteRequest.RLock()
	calls = mock.calls.DeleteClientVpnRouteRequest
	lockec2ClientMockDeleteClientVpnRouteRequest.RUnlock()
	return calls
}

// DeleteClientVpnRouteWithContext calls DeleteClientVpnRouteWithContextFunc.
func (mock *ec2ClientMock) DeleteClientVpnRouteWithContext(in1 context.Context, in2 *ec2.DeleteClientVpnRouteInput, in3 ...request.Option) (*ec2.DeleteClientVpnRouteOutput, error) {
	if mock.DeleteClientVpnRouteWithContextFunc == nil {
		panic("ec2ClientMock.DeleteClientVpnRouteWithContextFunc: method is nil but ec2Client.DeleteClientVpnRouteWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteClientVpnRouteInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteClientVpnRouteWithContext.Lock()
	mock.calls.DeleteClientVpnRouteWithContext = append(mock.calls.DeleteClientVpnRouteWithContext, callInfo)
	lockec2ClientMockDeleteClientVpnRouteWithContext.Unlock()
	return mock.DeleteClientVpnRouteWithContextFunc(in1, in2, in3...)
}

// DeleteClientVpnRouteWithContextCalls gets all the calls that were made to DeleteClientVpnRouteWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteClientVpnRouteWithContextCalls())
func (mock *ec2ClientMock) DeleteClientVpnRouteWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteClientVpnRouteInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteClientVpnRouteInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteClientVpnRouteWithContext.RLock()
	calls = mock.calls.DeleteClientVpnRouteWithContext
	lockec2ClientMockDeleteClientVpnRouteWithContext.RUnlock()
	return calls
}

// DeleteCustomerGateway calls DeleteCustomerGatewayFunc.
func (mock *ec2ClientMock) DeleteCustomerGateway(in1 *ec2.DeleteCustomerGatewayInput) (*ec2.DeleteCustomerGatewayOutput, error) {
	if mock.DeleteCustomerGatewayFunc == nil {
		panic("ec2ClientMock.DeleteCustomerGatewayFunc: method is nil but ec2Client.DeleteCustomerGateway was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteCustomerGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteCustomerGateway.Lock()
	mock.calls.DeleteCustomerGateway = append(mock.calls.DeleteCustomerGateway, callInfo)
	lockec2ClientMockDeleteCustomerGateway.Unlock()
	return mock.DeleteCustomerGatewayFunc(in1)
}

// DeleteCustomerGatewayCalls gets all the calls that were made to DeleteCustomerGateway.
// Check the length with:
//     len(mockedec2Client.DeleteCustomerGatewayCalls())
func (mock *ec2ClientMock) DeleteCustomerGatewayCalls() []struct {
	In1 *ec2.DeleteCustomerGatewayInput
} {
	var calls []struct {
		In1 *ec2.DeleteCustomerGatewayInput
	}
	lockec2ClientMockDeleteCustomerGateway.RLock()
	calls = mock.calls.DeleteCustomerGateway
	lockec2ClientMockDeleteCustomerGateway.RUnlock()
	return calls
}

// DeleteCustomerGatewayRequest calls DeleteCustomerGatewayRequestFunc.
func (mock *ec2ClientMock) DeleteCustomerGatewayRequest(in1 *ec2.DeleteCustomerGatewayInput) (*request.Request, *ec2.DeleteCustomerGatewayOutput) {
	if mock.DeleteCustomerGatewayRequestFunc == nil {
		panic("ec2ClientMock.DeleteCustomerGatewayRequestFunc: method is nil but ec2Client.DeleteCustomerGatewayRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteCustomerGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteCustomerGatewayRequest.Lock()
	mock.calls.DeleteCustomerGatewayRequest = append(mock.calls.DeleteCustomerGatewayRequest, callInfo)
	lockec2ClientMockDeleteCustomerGatewayRequest.Unlock()
	return mock.DeleteCustomerGatewayRequestFunc(in1)
}

// DeleteCustomerGatewayRequestCalls gets all the calls that were made to DeleteCustomerGatewayRequest.
// Check the length with:
//     len(mockedec2Client.DeleteCustomerGatewayRequestCalls())
func (mock *ec2ClientMock) DeleteCustomerGatewayRequestCalls() []struct {
	In1 *ec2.DeleteCustomerGatewayInput
} {
	var calls []struct {
		In1 *ec2.DeleteCustomerGatewayInput
	}
	lockec2ClientMockDeleteCustomerGatewayRequest.RLock()
	calls = mock.calls.DeleteCustomerGatewayRequest
	lockec2ClientMockDeleteCustomerGatewayRequest.RUnlock()
	return calls
}

// DeleteCustomerGatewayWithContext calls DeleteCustomerGatewayWithContextFunc.
func (mock *ec2ClientMock) DeleteCustomerGatewayWithContext(in1 context.Context, in2 *ec2.DeleteCustomerGatewayInput, in3 ...request.Option) (*ec2.DeleteCustomerGatewayOutput, error) {
	if mock.DeleteCustomerGatewayWithContextFunc == nil {
		panic("ec2ClientMock.DeleteCustomerGatewayWithContextFunc: method is nil but ec2Client.DeleteCustomerGatewayWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteCustomerGatewayInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteCustomerGatewayWithContext.Lock()
	mock.calls.DeleteCustomerGatewayWithContext = append(mock.calls.DeleteCustomerGatewayWithContext, callInfo)
	lockec2ClientMockDeleteCustomerGatewayWithContext.Unlock()
	return mock.DeleteCustomerGatewayWithContextFunc(in1, in2, in3...)
}

// DeleteCustomerGatewayWithContextCalls gets all the calls that were made to DeleteCustomerGatewayWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteCustomerGatewayWithContextCalls())
func (mock *ec2ClientMock) DeleteCustomerGatewayWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteCustomerGatewayInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteCustomerGatewayInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteCustomerGatewayWithContext.RLock()
	calls = mock.calls.DeleteCustomerGatewayWithContext
	lockec2ClientMockDeleteCustomerGatewayWithContext.RUnlock()
	return calls
}

// DeleteDhcpOptions calls DeleteDhcpOptionsFunc.
func (mock *ec2ClientMock) DeleteDhcpOptions(in1 *ec2.DeleteDhcpOptionsInput) (*ec2.DeleteDhcpOptionsOutput, error) {
	if mock.DeleteDhcpOptionsFunc == nil {
		panic("ec2ClientMock.DeleteDhcpOptionsFunc: method is nil but ec2Client.DeleteDhcpOptions was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteDhcpOptionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteDhcpOptions.Lock()
	mock.calls.DeleteDhcpOptions = append(mock.calls.DeleteDhcpOptions, callInfo)
	lockec2ClientMockDeleteDhcpOptions.Unlock()
	return mock.DeleteDhcpOptionsFunc(in1)
}

// DeleteDhcpOptionsCalls gets all the calls that were made to DeleteDhcpOptions.
// Check the length with:
//     len(mockedec2Client.DeleteDhcpOptionsCalls())
func (mock *ec2ClientMock) DeleteDhcpOptionsCalls() []struct {
	In1 *ec2.DeleteDhcpOptionsInput
} {
	var calls []struct {
		In1 *ec2.DeleteDhcpOptionsInput
	}
	lockec2ClientMockDeleteDhcpOptions.RLock()
	calls = mock.calls.DeleteDhcpOptions
	lockec2ClientMockDeleteDhcpOptions.RUnlock()
	return calls
}

// DeleteDhcpOptionsRequest calls DeleteDhcpOptionsRequestFunc.
func (mock *ec2ClientMock) DeleteDhcpOptionsRequest(in1 *ec2.DeleteDhcpOptionsInput) (*request.Request, *ec2.DeleteDhcpOptionsOutput) {
	if mock.DeleteDhcpOptionsRequestFunc == nil {
		panic("ec2ClientMock.DeleteDhcpOptionsRequestFunc: method is nil but ec2Client.DeleteDhcpOptionsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteDhcpOptionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteDhcpOptionsRequest.Lock()
	mock.calls.DeleteDhcpOptionsRequest = append(mock.calls.DeleteDhcpOptionsRequest, callInfo)
	lockec2ClientMockDeleteDhcpOptionsRequest.Unlock()
	return mock.DeleteDhcpOptionsRequestFunc(in1)
}

// DeleteDhcpOptionsRequestCalls gets all the calls that were made to DeleteDhcpOptionsRequest.
// Check the length with:
//     len(mockedec2Client.DeleteDhcpOptionsRequestCalls())
func (mock *ec2ClientMock) DeleteDhcpOptionsRequestCalls() []struct {
	In1 *ec2.DeleteDhcpOptionsInput
} {
	var calls []struct {
		In1 *ec2.DeleteDhcpOptionsInput
	}
	lockec2ClientMockDeleteDhcpOptionsRequest.RLock()
	calls = mock.calls.DeleteDhcpOptionsRequest
	lockec2ClientMockDeleteDhcpOptionsRequest.RUnlock()
	return calls
}

// DeleteDhcpOptionsWithContext calls DeleteDhcpOptionsWithContextFunc.
func (mock *ec2ClientMock) DeleteDhcpOptionsWithContext(in1 context.Context, in2 *ec2.DeleteDhcpOptionsInput, in3 ...request.Option) (*ec2.DeleteDhcpOptionsOutput, error) {
	if mock.DeleteDhcpOptionsWithContextFunc == nil {
		panic("ec2ClientMock.DeleteDhcpOptionsWithContextFunc: method is nil but ec2Client.DeleteDhcpOptionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteDhcpOptionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteDhcpOptionsWithContext.Lock()
	mock.calls.DeleteDhcpOptionsWithContext = append(mock.calls.DeleteDhcpOptionsWithContext, callInfo)
	lockec2ClientMockDeleteDhcpOptionsWithContext.Unlock()
	return mock.DeleteDhcpOptionsWithContextFunc(in1, in2, in3...)
}

// DeleteDhcpOptionsWithContextCalls gets all the calls that were made to DeleteDhcpOptionsWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteDhcpOptionsWithContextCalls())
func (mock *ec2ClientMock) DeleteDhcpOptionsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteDhcpOptionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteDhcpOptionsInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteDhcpOptionsWithContext.RLock()
	calls = mock.calls.DeleteDhcpOptionsWithContext
	lockec2ClientMockDeleteDhcpOptionsWithContext.RUnlock()
	return calls
}

// DeleteEgressOnlyInternetGateway calls DeleteEgressOnlyInternetGatewayFunc.
func (mock *ec2ClientMock) DeleteEgressOnlyInternetGateway(in1 *ec2.DeleteEgressOnlyInternetGatewayInput) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error) {
	if mock.DeleteEgressOnlyInternetGatewayFunc == nil {
		panic("ec2ClientMock.DeleteEgressOnlyInternetGatewayFunc: method is nil but ec2Client.DeleteEgressOnlyInternetGateway was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteEgressOnlyInternetGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteEgressOnlyInternetGateway.Lock()
	mock.calls.DeleteEgressOnlyInternetGateway = append(mock.calls.DeleteEgressOnlyInternetGateway, callInfo)
	lockec2ClientMockDeleteEgressOnlyInternetGateway.Unlock()
	return mock.DeleteEgressOnlyInternetGatewayFunc(in1)
}

// DeleteEgressOnlyInternetGatewayCalls gets all the calls that were made to DeleteEgressOnlyInternetGateway.
// Check the length with:
//     len(mockedec2Client.DeleteEgressOnlyInternetGatewayCalls())
func (mock *ec2ClientMock) DeleteEgressOnlyInternetGatewayCalls() []struct {
	In1 *ec2.DeleteEgressOnlyInternetGatewayInput
} {
	var calls []struct {
		In1 *ec2.DeleteEgressOnlyInternetGatewayInput
	}
	lockec2ClientMockDeleteEgressOnlyInternetGateway.RLock()
	calls = mock.calls.DeleteEgressOnlyInternetGateway
	lockec2ClientMockDeleteEgressOnlyInternetGateway.RUnlock()
	return calls
}

// DeleteEgressOnlyInternetGatewayRequest calls DeleteEgressOnlyInternetGatewayRequestFunc.
func (mock *ec2ClientMock) DeleteEgressOnlyInternetGatewayRequest(in1 *ec2.DeleteEgressOnlyInternetGatewayInput) (*request.Request, *ec2.DeleteEgressOnlyInternetGatewayOutput) {
	if mock.DeleteEgressOnlyInternetGatewayRequestFunc == nil {
		panic("ec2ClientMock.DeleteEgressOnlyInternetGatewayRequestFunc: method is nil but ec2Client.DeleteEgressOnlyInternetGatewayRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteEgressOnlyInternetGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteEgressOnlyInternetGatewayRequest.Lock()
	mock.calls.DeleteEgressOnlyInternetGatewayRequest = append(mock.calls.DeleteEgressOnlyInternetGatewayRequest, callInfo)
	lockec2ClientMockDeleteEgressOnlyInternetGatewayRequest.Unlock()
	return mock.DeleteEgressOnlyInternetGatewayRequestFunc(in1)
}

// DeleteEgressOnlyInternetGatewayRequestCalls gets all the calls that were made to DeleteEgressOnlyInternetGatewayRequest.
// Check the length with:
//     len(mockedec2Client.DeleteEgressOnlyInternetGatewayRequestCalls())
func (mock *ec2ClientMock) DeleteEgressOnlyInternetGatewayRequestCalls() []struct {
	In1 *ec2.DeleteEgressOnlyInternetGatewayInput
} {
	var calls []struct {
		In1 *ec2.DeleteEgressOnlyInternetGatewayInput
	}
	lockec2ClientMockDeleteEgressOnlyInternetGatewayRequest.RLock()
	calls = mock.calls.DeleteEgressOnlyInternetGatewayRequest
	lockec2ClientMockDeleteEgressOnlyInternetGatewayRequest.RUnlock()
	return calls
}

// DeleteEgressOnlyInternetGatewayWithContext calls DeleteEgressOnlyInternetGatewayWithContextFunc.
func (mock *ec2ClientMock) DeleteEgressOnlyInternetGatewayWithContext(in1 context.Context, in2 *ec2.DeleteEgressOnlyInternetGatewayInput, in3 ...request.Option) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error) {
	if mock.DeleteEgressOnlyInternetGatewayWithContextFunc == nil {
		panic("ec2ClientMock.DeleteEgressOnlyInternetGatewayWithContextFunc: method is nil but ec2Client.DeleteEgressOnlyInternetGatewayWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteEgressOnlyInternetGatewayInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteEgressOnlyInternetGatewayWithContext.Lock()
	mock.calls.DeleteEgressOnlyInternetGatewayWithContext = append(mock.calls.DeleteEgressOnlyInternetGatewayWithContext, callInfo)
	lockec2ClientMockDeleteEgressOnlyInternetGatewayWithContext.Unlock()
	return mock.DeleteEgressOnlyInternetGatewayWithContextFunc(in1, in2, in3...)
}

// DeleteEgressOnlyInternetGatewayWithContextCalls gets all the calls that were made to DeleteEgressOnlyInternetGatewayWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteEgressOnlyInternetGatewayWithContextCalls())
func (mock *ec2ClientMock) DeleteEgressOnlyInternetGatewayWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteEgressOnlyInternetGatewayInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteEgressOnlyInternetGatewayInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteEgressOnlyInternetGatewayWithContext.RLock()
	calls = mock.calls.DeleteEgressOnlyInternetGatewayWithContext
	lockec2ClientMockDeleteEgressOnlyInternetGatewayWithContext.RUnlock()
	return calls
}

// DeleteFleets calls DeleteFleetsFunc.
func (mock *ec2ClientMock) DeleteFleets(in1 *ec2.DeleteFleetsInput) (*ec2.DeleteFleetsOutput, error) {
	if mock.DeleteFleetsFunc == nil {
		panic("ec2ClientMock.DeleteFleetsFunc: method is nil but ec2Client.DeleteFleets was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteFleetsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteFleets.Lock()
	mock.calls.DeleteFleets = append(mock.calls.DeleteFleets, callInfo)
	lockec2ClientMockDeleteFleets.Unlock()
	return mock.DeleteFleetsFunc(in1)
}

// DeleteFleetsCalls gets all the calls that were made to DeleteFleets.
// Check the length with:
//     len(mockedec2Client.DeleteFleetsCalls())
func (mock *ec2ClientMock) DeleteFleetsCalls() []struct {
	In1 *ec2.DeleteFleetsInput
} {
	var calls []struct {
		In1 *ec2.DeleteFleetsInput
	}
	lockec2ClientMockDeleteFleets.RLock()
	calls = mock.calls.DeleteFleets
	lockec2ClientMockDeleteFleets.RUnlock()
	return calls
}

// DeleteFleetsRequest calls DeleteFleetsRequestFunc.
func (mock *ec2ClientMock) DeleteFleetsRequest(in1 *ec2.DeleteFleetsInput) (*request.Request, *ec2.DeleteFleetsOutput) {
	if mock.DeleteFleetsRequestFunc == nil {
		panic("ec2ClientMock.DeleteFleetsRequestFunc: method is nil but ec2Client.DeleteFleetsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteFleetsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteFleetsRequest.Lock()
	mock.calls.DeleteFleetsRequest = append(mock.calls.DeleteFleetsRequest, callInfo)
	lockec2ClientMockDeleteFleetsRequest.Unlock()
	return mock.DeleteFleetsRequestFunc(in1)
}

// DeleteFleetsRequestCalls gets all the calls that were made to DeleteFleetsRequest.
// Check the length with:
//     len(mockedec2Client.DeleteFleetsRequestCalls())
func (mock *ec2ClientMock) DeleteFleetsRequestCalls() []struct {
	In1 *ec2.DeleteFleetsInput
} {
	var calls []struct {
		In1 *ec2.DeleteFleetsInput
	}
	lockec2ClientMockDeleteFleetsRequest.RLock()
	calls = mock.calls.DeleteFleetsRequest
	lockec2ClientMockDeleteFleetsRequest.RUnlock()
	return calls
}

// DeleteFleetsWithContext calls DeleteFleetsWithContextFunc.
func (mock *ec2ClientMock) DeleteFleetsWithContext(in1 context.Context, in2 *ec2.DeleteFleetsInput, in3 ...request.Option) (*ec2.DeleteFleetsOutput, error) {
	if mock.DeleteFleetsWithContextFunc == nil {
		panic("ec2ClientMock.DeleteFleetsWithContextFunc: method is nil but ec2Client.DeleteFleetsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteFleetsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteFleetsWithContext.Lock()
	mock.calls.DeleteFleetsWithContext = append(mock.calls.DeleteFleetsWithContext, callInfo)
	lockec2ClientMockDeleteFleetsWithContext.Unlock()
	return mock.DeleteFleetsWithContextFunc(in1, in2, in3...)
}

// DeleteFleetsWithContextCalls gets all the calls that were made to DeleteFleetsWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteFleetsWithContextCalls())
func (mock *ec2ClientMock) DeleteFleetsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteFleetsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteFleetsInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteFleetsWithContext.RLock()
	calls = mock.calls.DeleteFleetsWithContext
	lockec2ClientMockDeleteFleetsWithContext.RUnlock()
	return calls
}

// DeleteFlowLogs calls DeleteFlowLogsFunc.
func (mock *ec2ClientMock) DeleteFlowLogs(in1 *ec2.DeleteFlowLogsInput) (*ec2.DeleteFlowLogsOutput, error) {
	if mock.DeleteFlowLogsFunc == nil {
		panic("ec2ClientMock.DeleteFlowLogsFunc: method is nil but ec2Client.DeleteFlowLogs was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteFlowLogsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteFlowLogs.Lock()
	mock.calls.DeleteFlowLogs = append(mock.calls.DeleteFlowLogs, callInfo)
	lockec2ClientMockDeleteFlowLogs.Unlock()
	return mock.DeleteFlowLogsFunc(in1)
}

// DeleteFlowLogsCalls gets all the calls that were made to DeleteFlowLogs.
// Check the length with:
//     len(mockedec2Client.DeleteFlowLogsCalls())
func (mock *ec2ClientMock) DeleteFlowLogsCalls() []struct {
	In1 *ec2.DeleteFlowLogsInput
} {
	var calls []struct {
		In1 *ec2.DeleteFlowLogsInput
	}
	lockec2ClientMockDeleteFlowLogs.RLock()
	calls = mock.calls.DeleteFlowLogs
	lockec2ClientMockDeleteFlowLogs.RUnlock()
	return calls
}

// DeleteFlowLogsRequest calls DeleteFlowLogsRequestFunc.
func (mock *ec2ClientMock) DeleteFlowLogsRequest(in1 *ec2.DeleteFlowLogsInput) (*request.Request, *ec2.DeleteFlowLogsOutput) {
	if mock.DeleteFlowLogsRequestFunc == nil {
		panic("ec2ClientMock.DeleteFlowLogsRequestFunc: method is nil but ec2Client.DeleteFlowLogsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteFlowLogsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteFlowLogsRequest.Lock()
	mock.calls.DeleteFlowLogsRequest = append(mock.calls.DeleteFlowLogsRequest, callInfo)
	lockec2ClientMockDeleteFlowLogsRequest.Unlock()
	return mock.DeleteFlowLogsRequestFunc(in1)
}

// DeleteFlowLogsRequestCalls gets all the calls that were made to DeleteFlowLogsRequest.
// Check the length with:
//     len(mockedec2Client.DeleteFlowLogsRequestCalls())
func (mock *ec2ClientMock) DeleteFlowLogsRequestCalls() []struct {
	In1 *ec2.DeleteFlowLogsInput
} {
	var calls []struct {
		In1 *ec2.DeleteFlowLogsInput
	}
	lockec2ClientMockDeleteFlowLogsRequest.RLock()
	calls = mock.calls.DeleteFlowLogsRequest
	lockec2ClientMockDeleteFlowLogsRequest.RUnlock()
	return calls
}

// DeleteFlowLogsWithContext calls DeleteFlowLogsWithContextFunc.
func (mock *ec2ClientMock) DeleteFlowLogsWithContext(in1 context.Context, in2 *ec2.DeleteFlowLogsInput, in3 ...request.Option) (*ec2.DeleteFlowLogsOutput, error) {
	if mock.DeleteFlowLogsWithContextFunc == nil {
		panic("ec2ClientMock.DeleteFlowLogsWithContextFunc: method is nil but ec2Client.DeleteFlowLogsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteFlowLogsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteFlowLogsWithContext.Lock()
	mock.calls.DeleteFlowLogsWithContext = append(mock.calls.DeleteFlowLogsWithContext, callInfo)
	lockec2ClientMockDeleteFlowLogsWithContext.Unlock()
	return mock.DeleteFlowLogsWithContextFunc(in1, in2, in3...)
}

// DeleteFlowLogsWithContextCalls gets all the calls that were made to DeleteFlowLogsWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteFlowLogsWithContextCalls())
func (mock *ec2ClientMock) DeleteFlowLogsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteFlowLogsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteFlowLogsInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteFlowLogsWithContext.RLock()
	calls = mock.calls.DeleteFlowLogsWithContext
	lockec2ClientMockDeleteFlowLogsWithContext.RUnlock()
	return calls
}

// DeleteFpgaImage calls DeleteFpgaImageFunc.
func (mock *ec2ClientMock) DeleteFpgaImage(in1 *ec2.DeleteFpgaImageInput) (*ec2.DeleteFpgaImageOutput, error) {
	if mock.DeleteFpgaImageFunc == nil {
		panic("ec2ClientMock.DeleteFpgaImageFunc: method is nil but ec2Client.DeleteFpgaImage was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteFpgaImageInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteFpgaImage.Lock()
	mock.calls.DeleteFpgaImage = append(mock.calls.DeleteFpgaImage, callInfo)
	lockec2ClientMockDeleteFpgaImage.Unlock()
	return mock.DeleteFpgaImageFunc(in1)
}

// DeleteFpgaImageCalls gets all the calls that were made to DeleteFpgaImage.
// Check the length with:
//     len(mockedec2Client.DeleteFpgaImageCalls())
func (mock *ec2ClientMock) DeleteFpgaImageCalls() []struct {
	In1 *ec2.DeleteFpgaImageInput
} {
	var calls []struct {
		In1 *ec2.DeleteFpgaImageInput
	}
	lockec2ClientMockDeleteFpgaImage.RLock()
	calls = mock.calls.DeleteFpgaImage
	lockec2ClientMockDeleteFpgaImage.RUnlock()
	return calls
}

// DeleteFpgaImageRequest calls DeleteFpgaImageRequestFunc.
func (mock *ec2ClientMock) DeleteFpgaImageRequest(in1 *ec2.DeleteFpgaImageInput) (*request.Request, *ec2.DeleteFpgaImageOutput) {
	if mock.DeleteFpgaImageRequestFunc == nil {
		panic("ec2ClientMock.DeleteFpgaImageRequestFunc: method is nil but ec2Client.DeleteFpgaImageRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteFpgaImageInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteFpgaImageRequest.Lock()
	mock.calls.DeleteFpgaImageRequest = append(mock.calls.DeleteFpgaImageRequest, callInfo)
	lockec2ClientMockDeleteFpgaImageRequest.Unlock()
	return mock.DeleteFpgaImageRequestFunc(in1)
}

// DeleteFpgaImageRequestCalls gets all the calls that were made to DeleteFpgaImageRequest.
// Check the length with:
//     len(mockedec2Client.DeleteFpgaImageRequestCalls())
func (mock *ec2ClientMock) DeleteFpgaImageRequestCalls() []struct {
	In1 *ec2.DeleteFpgaImageInput
} {
	var calls []struct {
		In1 *ec2.DeleteFpgaImageInput
	}
	lockec2ClientMockDeleteFpgaImageRequest.RLock()
	calls = mock.calls.DeleteFpgaImageRequest
	lockec2ClientMockDeleteFpgaImageRequest.RUnlock()
	return calls
}

// DeleteFpgaImageWithContext calls DeleteFpgaImageWithContextFunc.
func (mock *ec2ClientMock) DeleteFpgaImageWithContext(in1 context.Context, in2 *ec2.DeleteFpgaImageInput, in3 ...request.Option) (*ec2.DeleteFpgaImageOutput, error) {
	if mock.DeleteFpgaImageWithContextFunc == nil {
		panic("ec2ClientMock.DeleteFpgaImageWithContextFunc: method is nil but ec2Client.DeleteFpgaImageWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteFpgaImageInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteFpgaImageWithContext.Lock()
	mock.calls.DeleteFpgaImageWithContext = append(mock.calls.DeleteFpgaImageWithContext, callInfo)
	lockec2ClientMockDeleteFpgaImageWithContext.Unlock()
	return mock.DeleteFpgaImageWithContextFunc(in1, in2, in3...)
}

// DeleteFpgaImageWithContextCalls gets all the calls that were made to DeleteFpgaImageWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteFpgaImageWithContextCalls())
func (mock *ec2ClientMock) DeleteFpgaImageWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteFpgaImageInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteFpgaImageInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteFpgaImageWithContext.RLock()
	calls = mock.calls.DeleteFpgaImageWithContext
	lockec2ClientMockDeleteFpgaImageWithContext.RUnlock()
	return calls
}

// DeleteInternetGateway calls DeleteInternetGatewayFunc.
func (mock *ec2ClientMock) DeleteInternetGateway(in1 *ec2.DeleteInternetGatewayInput) (*ec2.DeleteInternetGatewayOutput, error) {
	if mock.DeleteInternetGatewayFunc == nil {
		panic("ec2ClientMock.DeleteInternetGatewayFunc: method is nil but ec2Client.DeleteInternetGateway was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteInternetGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteInternetGateway.Lock()
	mock.calls.DeleteInternetGateway = append(mock.calls.DeleteInternetGateway, callInfo)
	lockec2ClientMockDeleteInternetGateway.Unlock()
	return mock.DeleteInternetGatewayFunc(in1)
}

// DeleteInternetGatewayCalls gets all the calls that were made to DeleteInternetGateway.
// Check the length with:
//     len(mockedec2Client.DeleteInternetGatewayCalls())
func (mock *ec2ClientMock) DeleteInternetGatewayCalls() []struct {
	In1 *ec2.DeleteInternetGatewayInput
} {
	var calls []struct {
		In1 *ec2.DeleteInternetGatewayInput
	}
	lockec2ClientMockDeleteInternetGateway.RLock()
	calls = mock.calls.DeleteInternetGateway
	lockec2ClientMockDeleteInternetGateway.RUnlock()
	return calls
}

// DeleteInternetGatewayRequest calls DeleteInternetGatewayRequestFunc.
func (mock *ec2ClientMock) DeleteInternetGatewayRequest(in1 *ec2.DeleteInternetGatewayInput) (*request.Request, *ec2.DeleteInternetGatewayOutput) {
	if mock.DeleteInternetGatewayRequestFunc == nil {
		panic("ec2ClientMock.DeleteInternetGatewayRequestFunc: method is nil but ec2Client.DeleteInternetGatewayRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteInternetGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteInternetGatewayRequest.Lock()
	mock.calls.DeleteInternetGatewayRequest = append(mock.calls.DeleteInternetGatewayRequest, callInfo)
	lockec2ClientMockDeleteInternetGatewayRequest.Unlock()
	return mock.DeleteInternetGatewayRequestFunc(in1)
}

// DeleteInternetGatewayRequestCalls gets all the calls that were made to DeleteInternetGatewayRequest.
// Check the length with:
//     len(mockedec2Client.DeleteInternetGatewayRequestCalls())
func (mock *ec2ClientMock) DeleteInternetGatewayRequestCalls() []struct {
	In1 *ec2.DeleteInternetGatewayInput
} {
	var calls []struct {
		In1 *ec2.DeleteInternetGatewayInput
	}
	lockec2ClientMockDeleteInternetGatewayRequest.RLock()
	calls = mock.calls.DeleteInternetGatewayRequest
	lockec2ClientMockDeleteInternetGatewayRequest.RUnlock()
	return calls
}

// DeleteInternetGatewayWithContext calls DeleteInternetGatewayWithContextFunc.
func (mock *ec2ClientMock) DeleteInternetGatewayWithContext(in1 context.Context, in2 *ec2.DeleteInternetGatewayInput, in3 ...request.Option) (*ec2.DeleteInternetGatewayOutput, error) {
	if mock.DeleteInternetGatewayWithContextFunc == nil {
		panic("ec2ClientMock.DeleteInternetGatewayWithContextFunc: method is nil but ec2Client.DeleteInternetGatewayWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteInternetGatewayInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteInternetGatewayWithContext.Lock()
	mock.calls.DeleteInternetGatewayWithContext = append(mock.calls.DeleteInternetGatewayWithContext, callInfo)
	lockec2ClientMockDeleteInternetGatewayWithContext.Unlock()
	return mock.DeleteInternetGatewayWithContextFunc(in1, in2, in3...)
}

// DeleteInternetGatewayWithContextCalls gets all the calls that were made to DeleteInternetGatewayWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteInternetGatewayWithContextCalls())
func (mock *ec2ClientMock) DeleteInternetGatewayWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteInternetGatewayInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteInternetGatewayInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteInternetGatewayWithContext.RLock()
	calls = mock.calls.DeleteInternetGatewayWithContext
	lockec2ClientMockDeleteInternetGatewayWithContext.RUnlock()
	return calls
}

// DeleteKeyPair calls DeleteKeyPairFunc.
func (mock *ec2ClientMock) DeleteKeyPair(in1 *ec2.DeleteKeyPairInput) (*ec2.DeleteKeyPairOutput, error) {
	if mock.DeleteKeyPairFunc == nil {
		panic("ec2ClientMock.DeleteKeyPairFunc: method is nil but ec2Client.DeleteKeyPair was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteKeyPairInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteKeyPair.Lock()
	mock.calls.DeleteKeyPair = append(mock.calls.DeleteKeyPair, callInfo)
	lockec2ClientMockDeleteKeyPair.Unlock()
	return mock.DeleteKeyPairFunc(in1)
}

// DeleteKeyPairCalls gets all the calls that were made to DeleteKeyPair.
// Check the length with:
//     len(mockedec2Client.DeleteKeyPairCalls())
func (mock *ec2ClientMock) DeleteKeyPairCalls() []struct {
	In1 *ec2.DeleteKeyPairInput
} {
	var calls []struct {
		In1 *ec2.DeleteKeyPairInput
	}
	lockec2ClientMockDeleteKeyPair.RLock()
	calls = mock.calls.DeleteKeyPair
	lockec2ClientMockDeleteKeyPair.RUnlock()
	return calls
}

// DeleteKeyPairRequest calls DeleteKeyPairRequestFunc.
func (mock *ec2ClientMock) DeleteKeyPairRequest(in1 *ec2.DeleteKeyPairInput) (*request.Request, *ec2.DeleteKeyPairOutput) {
	if mock.DeleteKeyPairRequestFunc == nil {
		panic("ec2ClientMock.DeleteKeyPairRequestFunc: method is nil but ec2Client.DeleteKeyPairRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteKeyPairInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteKeyPairRequest.Lock()
	mock.calls.DeleteKeyPairRequest = append(mock.calls.DeleteKeyPairRequest, callInfo)
	lockec2ClientMockDeleteKeyPairRequest.Unlock()
	return mock.DeleteKeyPairRequestFunc(in1)
}

// DeleteKeyPairRequestCalls gets all the calls that were made to DeleteKeyPairRequest.
// Check the length with:
//     len(mockedec2Client.DeleteKeyPairRequestCalls())
func (mock *ec2ClientMock) DeleteKeyPairRequestCalls() []struct {
	In1 *ec2.DeleteKeyPairInput
} {
	var calls []struct {
		In1 *ec2.DeleteKeyPairInput
	}
	lockec2ClientMockDeleteKeyPairRequest.RLock()
	calls = mock.calls.DeleteKeyPairRequest
	lockec2ClientMockDeleteKeyPairRequest.RUnlock()
	return calls
}

// DeleteKeyPairWithContext calls DeleteKeyPairWithContextFunc.
func (mock *ec2ClientMock) DeleteKeyPairWithContext(in1 context.Context, in2 *ec2.DeleteKeyPairInput, in3 ...request.Option) (*ec2.DeleteKeyPairOutput, error) {
	if mock.DeleteKeyPairWithContextFunc == nil {
		panic("ec2ClientMock.DeleteKeyPairWithContextFunc: method is nil but ec2Client.DeleteKeyPairWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteKeyPairInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteKeyPairWithContext.Lock()
	mock.calls.DeleteKeyPairWithContext = append(mock.calls.DeleteKeyPairWithContext, callInfo)
	lockec2ClientMockDeleteKeyPairWithContext.Unlock()
	return mock.DeleteKeyPairWithContextFunc(in1, in2, in3...)
}

// DeleteKeyPairWithContextCalls gets all the calls that were made to DeleteKeyPairWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteKeyPairWithContextCalls())
func (mock *ec2ClientMock) DeleteKeyPairWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteKeyPairInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteKeyPairInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteKeyPairWithContext.RLock()
	calls = mock.calls.DeleteKeyPairWithContext
	lockec2ClientMockDeleteKeyPairWithContext.RUnlock()
	return calls
}

// DeleteLaunchTemplate calls DeleteLaunchTemplateFunc.
func (mock *ec2ClientMock) DeleteLaunchTemplate(in1 *ec2.DeleteLaunchTemplateInput) (*ec2.DeleteLaunchTemplateOutput, error) {
	if mock.DeleteLaunchTemplateFunc == nil {
		panic("ec2ClientMock.DeleteLaunchTemplateFunc: method is nil but ec2Client.DeleteLaunchTemplate was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteLaunchTemplateInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteLaunchTemplate.Lock()
	mock.calls.DeleteLaunchTemplate = append(mock.calls.DeleteLaunchTemplate, callInfo)
	lockec2ClientMockDeleteLaunchTemplate.Unlock()
	return mock.DeleteLaunchTemplateFunc(in1)
}

// DeleteLaunchTemplateCalls gets all the calls that were made to DeleteLaunchTemplate.
// Check the length with:
//     len(mockedec2Client.DeleteLaunchTemplateCalls())
func (mock *ec2ClientMock) DeleteLaunchTemplateCalls() []struct {
	In1 *ec2.DeleteLaunchTemplateInput
} {
	var calls []struct {
		In1 *ec2.DeleteLaunchTemplateInput
	}
	lockec2ClientMockDeleteLaunchTemplate.RLock()
	calls = mock.calls.DeleteLaunchTemplate
	lockec2ClientMockDeleteLaunchTemplate.RUnlock()
	return calls
}

// DeleteLaunchTemplateRequest calls DeleteLaunchTemplateRequestFunc.
func (mock *ec2ClientMock) DeleteLaunchTemplateRequest(in1 *ec2.DeleteLaunchTemplateInput) (*request.Request, *ec2.DeleteLaunchTemplateOutput) {
	if mock.DeleteLaunchTemplateRequestFunc == nil {
		panic("ec2ClientMock.DeleteLaunchTemplateRequestFunc: method is nil but ec2Client.DeleteLaunchTemplateRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteLaunchTemplateInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteLaunchTemplateRequest.Lock()
	mock.calls.DeleteLaunchTemplateRequest = append(mock.calls.DeleteLaunchTemplateRequest, callInfo)
	lockec2ClientMockDeleteLaunchTemplateRequest.Unlock()
	return mock.DeleteLaunchTemplateRequestFunc(in1)
}

// DeleteLaunchTemplateRequestCalls gets all the calls that were made to DeleteLaunchTemplateRequest.
// Check the length with:
//     len(mockedec2Client.DeleteLaunchTemplateRequestCalls())
func (mock *ec2ClientMock) DeleteLaunchTemplateRequestCalls() []struct {
	In1 *ec2.DeleteLaunchTemplateInput
} {
	var calls []struct {
		In1 *ec2.DeleteLaunchTemplateInput
	}
	lockec2ClientMockDeleteLaunchTemplateRequest.RLock()
	calls = mock.calls.DeleteLaunchTemplateRequest
	lockec2ClientMockDeleteLaunchTemplateRequest.RUnlock()
	return calls
}

// DeleteLaunchTemplateVersions calls DeleteLaunchTemplateVersionsFunc.
func (mock *ec2ClientMock) DeleteLaunchTemplateVersions(in1 *ec2.DeleteLaunchTemplateVersionsInput) (*ec2.DeleteLaunchTemplateVersionsOutput, error) {
	if mock.DeleteLaunchTemplateVersionsFunc == nil {
		panic("ec2ClientMock.DeleteLaunchTemplateVersionsFunc: method is nil but ec2Client.DeleteLaunchTemplateVersions was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteLaunchTemplateVersionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteLaunchTemplateVersions.Lock()
	mock.calls.DeleteLaunchTemplateVersions = append(mock.calls.DeleteLaunchTemplateVersions, callInfo)
	lockec2ClientMockDeleteLaunchTemplateVersions.Unlock()
	return mock.DeleteLaunchTemplateVersionsFunc(in1)
}

// DeleteLaunchTemplateVersionsCalls gets all the calls that were made to DeleteLaunchTemplateVersions.
// Check the length with:
//     len(mockedec2Client.DeleteLaunchTemplateVersionsCalls())
func (mock *ec2ClientMock) DeleteLaunchTemplateVersionsCalls() []struct {
	In1 *ec2.DeleteLaunchTemplateVersionsInput
} {
	var calls []struct {
		In1 *ec2.DeleteLaunchTemplateVersionsInput
	}
	lockec2ClientMockDeleteLaunchTemplateVersions.RLock()
	calls = mock.calls.DeleteLaunchTemplateVersions
	lockec2ClientMockDeleteLaunchTemplateVersions.RUnlock()
	return calls
}

// DeleteLaunchTemplateVersionsRequest calls DeleteLaunchTemplateVersionsRequestFunc.
func (mock *ec2ClientMock) DeleteLaunchTemplateVersionsRequest(in1 *ec2.DeleteLaunchTemplateVersionsInput) (*request.Request, *ec2.DeleteLaunchTemplateVersionsOutput) {
	if mock.DeleteLaunchTemplateVersionsRequestFunc == nil {
		panic("ec2ClientMock.DeleteLaunchTemplateVersionsRequestFunc: method is nil but ec2Client.DeleteLaunchTemplateVersionsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteLaunchTemplateVersionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteLaunchTemplateVersionsRequest.Lock()
	mock.calls.DeleteLaunchTemplateVersionsRequest = append(mock.calls.DeleteLaunchTemplateVersionsRequest, callInfo)
	lockec2ClientMockDeleteLaunchTemplateVersionsRequest.Unlock()
	return mock.DeleteLaunchTemplateVersionsRequestFunc(in1)
}

// DeleteLaunchTemplateVersionsRequestCalls gets all the calls that were made to DeleteLaunchTemplateVersionsRequest.
// Check the length with:
//     len(mockedec2Client.DeleteLaunchTemplateVersionsRequestCalls())
func (mock *ec2ClientMock) DeleteLaunchTemplateVersionsRequestCalls() []struct {
	In1 *ec2.DeleteLaunchTemplateVersionsInput
} {
	var calls []struct {
		In1 *ec2.DeleteLaunchTemplateVersionsInput
	}
	lockec2ClientMockDeleteLaunchTemplateVersionsRequest.RLock()
	calls = mock.calls.DeleteLaunchTemplateVersionsRequest
	lockec2ClientMockDeleteLaunchTemplateVersionsRequest.RUnlock()
	return calls
}

// DeleteLaunchTemplateVersionsWithContext calls DeleteLaunchTemplateVersionsWithContextFunc.
func (mock *ec2ClientMock) DeleteLaunchTemplateVersionsWithContext(in1 context.Context, in2 *ec2.DeleteLaunchTemplateVersionsInput, in3 ...request.Option) (*ec2.DeleteLaunchTemplateVersionsOutput, error) {
	if mock.DeleteLaunchTemplateVersionsWithContextFunc == nil {
		panic("ec2ClientMock.DeleteLaunchTemplateVersionsWithContextFunc: method is nil but ec2Client.DeleteLaunchTemplateVersionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteLaunchTemplateVersionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteLaunchTemplateVersionsWithContext.Lock()
	mock.calls.DeleteLaunchTemplateVersionsWithContext = append(mock.calls.DeleteLaunchTemplateVersionsWithContext, callInfo)
	lockec2ClientMockDeleteLaunchTemplateVersionsWithContext.Unlock()
	return mock.DeleteLaunchTemplateVersionsWithContextFunc(in1, in2, in3...)
}

// DeleteLaunchTemplateVersionsWithContextCalls gets all the calls that were made to DeleteLaunchTemplateVersionsWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteLaunchTemplateVersionsWithContextCalls())
func (mock *ec2ClientMock) DeleteLaunchTemplateVersionsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteLaunchTemplateVersionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteLaunchTemplateVersionsInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteLaunchTemplateVersionsWithContext.RLock()
	calls = mock.calls.DeleteLaunchTemplateVersionsWithContext
	lockec2ClientMockDeleteLaunchTemplateVersionsWithContext.RUnlock()
	return calls
}

// DeleteLaunchTemplateWithContext calls DeleteLaunchTemplateWithContextFunc.
func (mock *ec2ClientMock) DeleteLaunchTemplateWithContext(in1 context.Context, in2 *ec2.DeleteLaunchTemplateInput, in3 ...request.Option) (*ec2.DeleteLaunchTemplateOutput, error) {
	if mock.DeleteLaunchTemplateWithContextFunc == nil {
		panic("ec2ClientMock.DeleteLaunchTemplateWithContextFunc: method is nil but ec2Client.DeleteLaunchTemplateWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteLaunchTemplateInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteLaunchTemplateWithContext.Lock()
	mock.calls.DeleteLaunchTemplateWithContext = append(mock.calls.DeleteLaunchTemplateWithContext, callInfo)
	lockec2ClientMockDeleteLaunchTemplateWithContext.Unlock()
	return mock.DeleteLaunchTemplateWithContextFunc(in1, in2, in3...)
}

// DeleteLaunchTemplateWithContextCalls gets all the calls that were made to DeleteLaunchTemplateWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteLaunchTemplateWithContextCalls())
func (mock *ec2ClientMock) DeleteLaunchTemplateWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteLaunchTemplateInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteLaunchTemplateInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteLaunchTemplateWithContext.RLock()
	calls = mock.calls.DeleteLaunchTemplateWithContext
	lockec2ClientMockDeleteLaunchTemplateWithContext.RUnlock()
	return calls
}

// DeleteLocalGatewayRoute calls DeleteLocalGatewayRouteFunc.
func (mock *ec2ClientMock) DeleteLocalGatewayRoute(in1 *ec2.DeleteLocalGatewayRouteInput) (*ec2.DeleteLocalGatewayRouteOutput, error) {
	if mock.DeleteLocalGatewayRouteFunc == nil {
		panic("ec2ClientMock.DeleteLocalGatewayRouteFunc: method is nil but ec2Client.DeleteLocalGatewayRoute was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteLocalGatewayRouteInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteLocalGatewayRoute.Lock()
	mock.calls.DeleteLocalGatewayRoute = append(mock.calls.DeleteLocalGatewayRoute, callInfo)
	lockec2ClientMockDeleteLocalGatewayRoute.Unlock()
	return mock.DeleteLocalGatewayRouteFunc(in1)
}

// DeleteLocalGatewayRouteCalls gets all the calls that were made to DeleteLocalGatewayRoute.
// Check the length with:
//     len(mockedec2Client.DeleteLocalGatewayRouteCalls())
func (mock *ec2ClientMock) DeleteLocalGatewayRouteCalls() []struct {
	In1 *ec2.DeleteLocalGatewayRouteInput
} {
	var calls []struct {
		In1 *ec2.DeleteLocalGatewayRouteInput
	}
	lockec2ClientMockDeleteLocalGatewayRoute.RLock()
	calls = mock.calls.DeleteLocalGatewayRoute
	lockec2ClientMockDeleteLocalGatewayRoute.RUnlock()
	return calls
}

// DeleteLocalGatewayRouteRequest calls DeleteLocalGatewayRouteRequestFunc.
func (mock *ec2ClientMock) DeleteLocalGatewayRouteRequest(in1 *ec2.DeleteLocalGatewayRouteInput) (*request.Request, *ec2.DeleteLocalGatewayRouteOutput) {
	if mock.DeleteLocalGatewayRouteRequestFunc == nil {
		panic("ec2ClientMock.DeleteLocalGatewayRouteRequestFunc: method is nil but ec2Client.DeleteLocalGatewayRouteRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteLocalGatewayRouteInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteLocalGatewayRouteRequest.Lock()
	mock.calls.DeleteLocalGatewayRouteRequest = append(mock.calls.DeleteLocalGatewayRouteRequest, callInfo)
	lockec2ClientMockDeleteLocalGatewayRouteRequest.Unlock()
	return mock.DeleteLocalGatewayRouteRequestFunc(in1)
}

// DeleteLocalGatewayRouteRequestCalls gets all the calls that were made to DeleteLocalGatewayRouteRequest.
// Check the length with:
//     len(mockedec2Client.DeleteLocalGatewayRouteRequestCalls())
func (mock *ec2ClientMock) DeleteLocalGatewayRouteRequestCalls() []struct {
	In1 *ec2.DeleteLocalGatewayRouteInput
} {
	var calls []struct {
		In1 *ec2.DeleteLocalGatewayRouteInput
	}
	lockec2ClientMockDeleteLocalGatewayRouteRequest.RLock()
	calls = mock.calls.DeleteLocalGatewayRouteRequest
	lockec2ClientMockDeleteLocalGatewayRouteRequest.RUnlock()
	return calls
}

// DeleteLocalGatewayRouteTableVpcAssociation calls DeleteLocalGatewayRouteTableVpcAssociationFunc.
func (mock *ec2ClientMock) DeleteLocalGatewayRouteTableVpcAssociation(in1 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput) (*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput, error) {
	if mock.DeleteLocalGatewayRouteTableVpcAssociationFunc == nil {
		panic("ec2ClientMock.DeleteLocalGatewayRouteTableVpcAssociationFunc: method is nil but ec2Client.DeleteLocalGatewayRouteTableVpcAssociation was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteLocalGatewayRouteTableVpcAssociation.Lock()
	mock.calls.DeleteLocalGatewayRouteTableVpcAssociation = append(mock.calls.DeleteLocalGatewayRouteTableVpcAssociation, callInfo)
	lockec2ClientMockDeleteLocalGatewayRouteTableVpcAssociation.Unlock()
	return mock.DeleteLocalGatewayRouteTableVpcAssociationFunc(in1)
}

// DeleteLocalGatewayRouteTableVpcAssociationCalls gets all the calls that were made to DeleteLocalGatewayRouteTableVpcAssociation.
// Check the length with:
//     len(mockedec2Client.DeleteLocalGatewayRouteTableVpcAssociationCalls())
func (mock *ec2ClientMock) DeleteLocalGatewayRouteTableVpcAssociationCalls() []struct {
	In1 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput
} {
	var calls []struct {
		In1 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput
	}
	lockec2ClientMockDeleteLocalGatewayRouteTableVpcAssociation.RLock()
	calls = mock.calls.DeleteLocalGatewayRouteTableVpcAssociation
	lockec2ClientMockDeleteLocalGatewayRouteTableVpcAssociation.RUnlock()
	return calls
}

// DeleteLocalGatewayRouteTableVpcAssociationRequest calls DeleteLocalGatewayRouteTableVpcAssociationRequestFunc.
func (mock *ec2ClientMock) DeleteLocalGatewayRouteTableVpcAssociationRequest(in1 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput) (*request.Request, *ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput) {
	if mock.DeleteLocalGatewayRouteTableVpcAssociationRequestFunc == nil {
		panic("ec2ClientMock.DeleteLocalGatewayRouteTableVpcAssociationRequestFunc: method is nil but ec2Client.DeleteLocalGatewayRouteTableVpcAssociationRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteLocalGatewayRouteTableVpcAssociationRequest.Lock()
	mock.calls.DeleteLocalGatewayRouteTableVpcAssociationRequest = append(mock.calls.DeleteLocalGatewayRouteTableVpcAssociationRequest, callInfo)
	lockec2ClientMockDeleteLocalGatewayRouteTableVpcAssociationRequest.Unlock()
	return mock.DeleteLocalGatewayRouteTableVpcAssociationRequestFunc(in1)
}

// DeleteLocalGatewayRouteTableVpcAssociationRequestCalls gets all the calls that were made to DeleteLocalGatewayRouteTableVpcAssociationRequest.
// Check the length with:
//     len(mockedec2Client.DeleteLocalGatewayRouteTableVpcAssociationRequestCalls())
func (mock *ec2ClientMock) DeleteLocalGatewayRouteTableVpcAssociationRequestCalls() []struct {
	In1 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput
} {
	var calls []struct {
		In1 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput
	}
	lockec2ClientMockDeleteLocalGatewayRouteTableVpcAssociationRequest.RLock()
	calls = mock.calls.DeleteLocalGatewayRouteTableVpcAssociationRequest
	lockec2ClientMockDeleteLocalGatewayRouteTableVpcAssociationRequest.RUnlock()
	return calls
}

// DeleteLocalGatewayRouteTableVpcAssociationWithContext calls DeleteLocalGatewayRouteTableVpcAssociationWithContextFunc.
func (mock *ec2ClientMock) DeleteLocalGatewayRouteTableVpcAssociationWithContext(in1 context.Context, in2 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput, in3 ...request.Option) (*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput, error) {
	if mock.DeleteLocalGatewayRouteTableVpcAssociationWithContextFunc == nil {
		panic("ec2ClientMock.DeleteLocalGatewayRouteTableVpcAssociationWithContextFunc: method is nil but ec2Client.DeleteLocalGatewayRouteTableVpcAssociationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteLocalGatewayRouteTableVpcAssociationWithContext.Lock()
	mock.calls.DeleteLocalGatewayRouteTableVpcAssociationWithContext = append(mock.calls.DeleteLocalGatewayRouteTableVpcAssociationWithContext, callInfo)
	lockec2ClientMockDeleteLocalGatewayRouteTableVpcAssociationWithContext.Unlock()
	return mock.DeleteLocalGatewayRouteTableVpcAssociationWithContextFunc(in1, in2, in3...)
}

// DeleteLocalGatewayRouteTableVpcAssociationWithContextCalls gets all the calls that were made to DeleteLocalGatewayRouteTableVpcAssociationWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteLocalGatewayRouteTableVpcAssociationWithContextCalls())
func (mock *ec2ClientMock) DeleteLocalGatewayRouteTableVpcAssociationWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteLocalGatewayRouteTableVpcAssociationWithContext.RLock()
	calls = mock.calls.DeleteLocalGatewayRouteTableVpcAssociationWithContext
	lockec2ClientMockDeleteLocalGatewayRouteTableVpcAssociationWithContext.RUnlock()
	return calls
}

// DeleteLocalGatewayRouteWithContext calls DeleteLocalGatewayRouteWithContextFunc.
func (mock *ec2ClientMock) DeleteLocalGatewayRouteWithContext(in1 context.Context, in2 *ec2.DeleteLocalGatewayRouteInput, in3 ...request.Option) (*ec2.DeleteLocalGatewayRouteOutput, error) {
	if mock.DeleteLocalGatewayRouteWithContextFunc == nil {
		panic("ec2ClientMock.DeleteLocalGatewayRouteWithContextFunc: method is nil but ec2Client.DeleteLocalGatewayRouteWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteLocalGatewayRouteInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteLocalGatewayRouteWithContext.Lock()
	mock.calls.DeleteLocalGatewayRouteWithContext = append(mock.calls.DeleteLocalGatewayRouteWithContext, callInfo)
	lockec2ClientMockDeleteLocalGatewayRouteWithContext.Unlock()
	return mock.DeleteLocalGatewayRouteWithContextFunc(in1, in2, in3...)
}

// DeleteLocalGatewayRouteWithContextCalls gets all the calls that were made to DeleteLocalGatewayRouteWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteLocalGatewayRouteWithContextCalls())
func (mock *ec2ClientMock) DeleteLocalGatewayRouteWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteLocalGatewayRouteInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteLocalGatewayRouteInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteLocalGatewayRouteWithContext.RLock()
	calls = mock.calls.DeleteLocalGatewayRouteWithContext
	lockec2ClientMockDeleteLocalGatewayRouteWithContext.RUnlock()
	return calls
}

// DeleteNatGateway calls DeleteNatGatewayFunc.
func (mock *ec2ClientMock) DeleteNatGateway(in1 *ec2.DeleteNatGatewayInput) (*ec2.DeleteNatGatewayOutput, error) {
	if mock.DeleteNatGatewayFunc == nil {
		panic("ec2ClientMock.DeleteNatGatewayFunc: method is nil but ec2Client.DeleteNatGateway was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteNatGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteNatGateway.Lock()
	mock.calls.DeleteNatGateway = append(mock.calls.DeleteNatGateway, callInfo)
	lockec2ClientMockDeleteNatGateway.Unlock()
	return mock.DeleteNatGatewayFunc(in1)
}

// DeleteNatGatewayCalls gets all the calls that were made to DeleteNatGateway.
// Check the length with:
//     len(mockedec2Client.DeleteNatGatewayCalls())
func (mock *ec2ClientMock) DeleteNatGatewayCalls() []struct {
	In1 *ec2.DeleteNatGatewayInput
} {
	var calls []struct {
		In1 *ec2.DeleteNatGatewayInput
	}
	lockec2ClientMockDeleteNatGateway.RLock()
	calls = mock.calls.DeleteNatGateway
	lockec2ClientMockDeleteNatGateway.RUnlock()
	return calls
}

// DeleteNatGatewayRequest calls DeleteNatGatewayRequestFunc.
func (mock *ec2ClientMock) DeleteNatGatewayRequest(in1 *ec2.DeleteNatGatewayInput) (*request.Request, *ec2.DeleteNatGatewayOutput) {
	if mock.DeleteNatGatewayRequestFunc == nil {
		panic("ec2ClientMock.DeleteNatGatewayRequestFunc: method is nil but ec2Client.DeleteNatGatewayRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteNatGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteNatGatewayRequest.Lock()
	mock.calls.DeleteNatGatewayRequest = append(mock.calls.DeleteNatGatewayRequest, callInfo)
	lockec2ClientMockDeleteNatGatewayRequest.Unlock()
	return mock.DeleteNatGatewayRequestFunc(in1)
}

// DeleteNatGatewayRequestCalls gets all the calls that were made to DeleteNatGatewayRequest.
// Check the length with:
//     len(mockedec2Client.DeleteNatGatewayRequestCalls())
func (mock *ec2ClientMock) DeleteNatGatewayRequestCalls() []struct {
	In1 *ec2.DeleteNatGatewayInput
} {
	var calls []struct {
		In1 *ec2.DeleteNatGatewayInput
	}
	lockec2ClientMockDeleteNatGatewayRequest.RLock()
	calls = mock.calls.DeleteNatGatewayRequest
	lockec2ClientMockDeleteNatGatewayRequest.RUnlock()
	return calls
}

// DeleteNatGatewayWithContext calls DeleteNatGatewayWithContextFunc.
func (mock *ec2ClientMock) DeleteNatGatewayWithContext(in1 context.Context, in2 *ec2.DeleteNatGatewayInput, in3 ...request.Option) (*ec2.DeleteNatGatewayOutput, error) {
	if mock.DeleteNatGatewayWithContextFunc == nil {
		panic("ec2ClientMock.DeleteNatGatewayWithContextFunc: method is nil but ec2Client.DeleteNatGatewayWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteNatGatewayInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteNatGatewayWithContext.Lock()
	mock.calls.DeleteNatGatewayWithContext = append(mock.calls.DeleteNatGatewayWithContext, callInfo)
	lockec2ClientMockDeleteNatGatewayWithContext.Unlock()
	return mock.DeleteNatGatewayWithContextFunc(in1, in2, in3...)
}

// DeleteNatGatewayWithContextCalls gets all the calls that were made to DeleteNatGatewayWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteNatGatewayWithContextCalls())
func (mock *ec2ClientMock) DeleteNatGatewayWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteNatGatewayInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteNatGatewayInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteNatGatewayWithContext.RLock()
	calls = mock.calls.DeleteNatGatewayWithContext
	lockec2ClientMockDeleteNatGatewayWithContext.RUnlock()
	return calls
}

// DeleteNetworkAcl calls DeleteNetworkAclFunc.
func (mock *ec2ClientMock) DeleteNetworkAcl(in1 *ec2.DeleteNetworkAclInput) (*ec2.DeleteNetworkAclOutput, error) {
	if mock.DeleteNetworkAclFunc == nil {
		panic("ec2ClientMock.DeleteNetworkAclFunc: method is nil but ec2Client.DeleteNetworkAcl was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteNetworkAclInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteNetworkAcl.Lock()
	mock.calls.DeleteNetworkAcl = append(mock.calls.DeleteNetworkAcl, callInfo)
	lockec2ClientMockDeleteNetworkAcl.Unlock()
	return mock.DeleteNetworkAclFunc(in1)
}

// DeleteNetworkAclCalls gets all the calls that were made to DeleteNetworkAcl.
// Check the length with:
//     len(mockedec2Client.DeleteNetworkAclCalls())
func (mock *ec2ClientMock) DeleteNetworkAclCalls() []struct {
	In1 *ec2.DeleteNetworkAclInput
} {
	var calls []struct {
		In1 *ec2.DeleteNetworkAclInput
	}
	lockec2ClientMockDeleteNetworkAcl.RLock()
	calls = mock.calls.DeleteNetworkAcl
	lockec2ClientMockDeleteNetworkAcl.RUnlock()
	return calls
}

// DeleteNetworkAclEntry calls DeleteNetworkAclEntryFunc.
func (mock *ec2ClientMock) DeleteNetworkAclEntry(in1 *ec2.DeleteNetworkAclEntryInput) (*ec2.DeleteNetworkAclEntryOutput, error) {
	if mock.DeleteNetworkAclEntryFunc == nil {
		panic("ec2ClientMock.DeleteNetworkAclEntryFunc: method is nil but ec2Client.DeleteNetworkAclEntry was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteNetworkAclEntryInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteNetworkAclEntry.Lock()
	mock.calls.DeleteNetworkAclEntry = append(mock.calls.DeleteNetworkAclEntry, callInfo)
	lockec2ClientMockDeleteNetworkAclEntry.Unlock()
	return mock.DeleteNetworkAclEntryFunc(in1)
}

// DeleteNetworkAclEntryCalls gets all the calls that were made to DeleteNetworkAclEntry.
// Check the length with:
//     len(mockedec2Client.DeleteNetworkAclEntryCalls())
func (mock *ec2ClientMock) DeleteNetworkAclEntryCalls() []struct {
	In1 *ec2.DeleteNetworkAclEntryInput
} {
	var calls []struct {
		In1 *ec2.DeleteNetworkAclEntryInput
	}
	lockec2ClientMockDeleteNetworkAclEntry.RLock()
	calls = mock.calls.DeleteNetworkAclEntry
	lockec2ClientMockDeleteNetworkAclEntry.RUnlock()
	return calls
}

// DeleteNetworkAclEntryRequest calls DeleteNetworkAclEntryRequestFunc.
func (mock *ec2ClientMock) DeleteNetworkAclEntryRequest(in1 *ec2.DeleteNetworkAclEntryInput) (*request.Request, *ec2.DeleteNetworkAclEntryOutput) {
	if mock.DeleteNetworkAclEntryRequestFunc == nil {
		panic("ec2ClientMock.DeleteNetworkAclEntryRequestFunc: method is nil but ec2Client.DeleteNetworkAclEntryRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteNetworkAclEntryInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteNetworkAclEntryRequest.Lock()
	mock.calls.DeleteNetworkAclEntryRequest = append(mock.calls.DeleteNetworkAclEntryRequest, callInfo)
	lockec2ClientMockDeleteNetworkAclEntryRequest.Unlock()
	return mock.DeleteNetworkAclEntryRequestFunc(in1)
}

// DeleteNetworkAclEntryRequestCalls gets all the calls that were made to DeleteNetworkAclEntryRequest.
// Check the length with:
//     len(mockedec2Client.DeleteNetworkAclEntryRequestCalls())
func (mock *ec2ClientMock) DeleteNetworkAclEntryRequestCalls() []struct {
	In1 *ec2.DeleteNetworkAclEntryInput
} {
	var calls []struct {
		In1 *ec2.DeleteNetworkAclEntryInput
	}
	lockec2ClientMockDeleteNetworkAclEntryRequest.RLock()
	calls = mock.calls.DeleteNetworkAclEntryRequest
	lockec2ClientMockDeleteNetworkAclEntryRequest.RUnlock()
	return calls
}

// DeleteNetworkAclEntryWithContext calls DeleteNetworkAclEntryWithContextFunc.
func (mock *ec2ClientMock) DeleteNetworkAclEntryWithContext(in1 context.Context, in2 *ec2.DeleteNetworkAclEntryInput, in3 ...request.Option) (*ec2.DeleteNetworkAclEntryOutput, error) {
	if mock.DeleteNetworkAclEntryWithContextFunc == nil {
		panic("ec2ClientMock.DeleteNetworkAclEntryWithContextFunc: method is nil but ec2Client.DeleteNetworkAclEntryWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteNetworkAclEntryInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteNetworkAclEntryWithContext.Lock()
	mock.calls.DeleteNetworkAclEntryWithContext = append(mock.calls.DeleteNetworkAclEntryWithContext, callInfo)
	lockec2ClientMockDeleteNetworkAclEntryWithContext.Unlock()
	return mock.DeleteNetworkAclEntryWithContextFunc(in1, in2, in3...)
}

// DeleteNetworkAclEntryWithContextCalls gets all the calls that were made to DeleteNetworkAclEntryWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteNetworkAclEntryWithContextCalls())
func (mock *ec2ClientMock) DeleteNetworkAclEntryWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteNetworkAclEntryInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteNetworkAclEntryInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteNetworkAclEntryWithContext.RLock()
	calls = mock.calls.DeleteNetworkAclEntryWithContext
	lockec2ClientMockDeleteNetworkAclEntryWithContext.RUnlock()
	return calls
}

// DeleteNetworkAclRequest calls DeleteNetworkAclRequestFunc.
func (mock *ec2ClientMock) DeleteNetworkAclRequest(in1 *ec2.DeleteNetworkAclInput) (*request.Request, *ec2.DeleteNetworkAclOutput) {
	if mock.DeleteNetworkAclRequestFunc == nil {
		panic("ec2ClientMock.DeleteNetworkAclRequestFunc: method is nil but ec2Client.DeleteNetworkAclRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteNetworkAclInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteNetworkAclRequest.Lock()
	mock.calls.DeleteNetworkAclRequest = append(mock.calls.DeleteNetworkAclRequest, callInfo)
	lockec2ClientMockDeleteNetworkAclRequest.Unlock()
	return mock.DeleteNetworkAclRequestFunc(in1)
}

// DeleteNetworkAclRequestCalls gets all the calls that were made to DeleteNetworkAclRequest.
// Check the length with:
//     len(mockedec2Client.DeleteNetworkAclRequestCalls())
func (mock *ec2ClientMock) DeleteNetworkAclRequestCalls() []struct {
	In1 *ec2.DeleteNetworkAclInput
} {
	var calls []struct {
		In1 *ec2.DeleteNetworkAclInput
	}
	lockec2ClientMockDeleteNetworkAclRequest.RLock()
	calls = mock.calls.DeleteNetworkAclRequest
	lockec2ClientMockDeleteNetworkAclRequest.RUnlock()
	return calls
}

// DeleteNetworkAclWithContext calls DeleteNetworkAclWithContextFunc.
func (mock *ec2ClientMock) DeleteNetworkAclWithContext(in1 context.Context, in2 *ec2.DeleteNetworkAclInput, in3 ...request.Option) (*ec2.DeleteNetworkAclOutput, error) {
	if mock.DeleteNetworkAclWithContextFunc == nil {
		panic("ec2ClientMock.DeleteNetworkAclWithContextFunc: method is nil but ec2Client.DeleteNetworkAclWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteNetworkAclInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteNetworkAclWithContext.Lock()
	mock.calls.DeleteNetworkAclWithContext = append(mock.calls.DeleteNetworkAclWithContext, callInfo)
	lockec2ClientMockDeleteNetworkAclWithContext.Unlock()
	return mock.DeleteNetworkAclWithContextFunc(in1, in2, in3...)
}

// DeleteNetworkAclWithContextCalls gets all the calls that were made to DeleteNetworkAclWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteNetworkAclWithContextCalls())
func (mock *ec2ClientMock) DeleteNetworkAclWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteNetworkAclInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteNetworkAclInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteNetworkAclWithContext.RLock()
	calls = mock.calls.DeleteNetworkAclWithContext
	lockec2ClientMockDeleteNetworkAclWithContext.RUnlock()
	return calls
}

// DeleteNetworkInterface calls DeleteNetworkInterfaceFunc.
func (mock *ec2ClientMock) DeleteNetworkInterface(in1 *ec2.DeleteNetworkInterfaceInput) (*ec2.DeleteNetworkInterfaceOutput, error) {
	if mock.DeleteNetworkInterfaceFunc == nil {
		panic("ec2ClientMock.DeleteNetworkInterfaceFunc: method is nil but ec2Client.DeleteNetworkInterface was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteNetworkInterfaceInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteNetworkInterface.Lock()
	mock.calls.DeleteNetworkInterface = append(mock.calls.DeleteNetworkInterface, callInfo)
	lockec2ClientMockDeleteNetworkInterface.Unlock()
	return mock.DeleteNetworkInterfaceFunc(in1)
}

// DeleteNetworkInterfaceCalls gets all the calls that were made to DeleteNetworkInterface.
// Check the length with:
//     len(mockedec2Client.DeleteNetworkInterfaceCalls())
func (mock *ec2ClientMock) DeleteNetworkInterfaceCalls() []struct {
	In1 *ec2.DeleteNetworkInterfaceInput
} {
	var calls []struct {
		In1 *ec2.DeleteNetworkInterfaceInput
	}
	lockec2ClientMockDeleteNetworkInterface.RLock()
	calls = mock.calls.DeleteNetworkInterface
	lockec2ClientMockDeleteNetworkInterface.RUnlock()
	return calls
}

// DeleteNetworkInterfacePermission calls DeleteNetworkInterfacePermissionFunc.
func (mock *ec2ClientMock) DeleteNetworkInterfacePermission(in1 *ec2.DeleteNetworkInterfacePermissionInput) (*ec2.DeleteNetworkInterfacePermissionOutput, error) {
	if mock.DeleteNetworkInterfacePermissionFunc == nil {
		panic("ec2ClientMock.DeleteNetworkInterfacePermissionFunc: method is nil but ec2Client.DeleteNetworkInterfacePermission was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteNetworkInterfacePermissionInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteNetworkInterfacePermission.Lock()
	mock.calls.DeleteNetworkInterfacePermission = append(mock.calls.DeleteNetworkInterfacePermission, callInfo)
	lockec2ClientMockDeleteNetworkInterfacePermission.Unlock()
	return mock.DeleteNetworkInterfacePermissionFunc(in1)
}

// DeleteNetworkInterfacePermissionCalls gets all the calls that were made to DeleteNetworkInterfacePermission.
// Check the length with:
//     len(mockedec2Client.DeleteNetworkInterfacePermissionCalls())
func (mock *ec2ClientMock) DeleteNetworkInterfacePermissionCalls() []struct {
	In1 *ec2.DeleteNetworkInterfacePermissionInput
} {
	var calls []struct {
		In1 *ec2.DeleteNetworkInterfacePermissionInput
	}
	lockec2ClientMockDeleteNetworkInterfacePermission.RLock()
	calls = mock.calls.DeleteNetworkInterfacePermission
	lockec2ClientMockDeleteNetworkInterfacePermission.RUnlock()
	return calls
}

// DeleteNetworkInterfacePermissionRequest calls DeleteNetworkInterfacePermissionRequestFunc.
func (mock *ec2ClientMock) DeleteNetworkInterfacePermissionRequest(in1 *ec2.DeleteNetworkInterfacePermissionInput) (*request.Request, *ec2.DeleteNetworkInterfacePermissionOutput) {
	if mock.DeleteNetworkInterfacePermissionRequestFunc == nil {
		panic("ec2ClientMock.DeleteNetworkInterfacePermissionRequestFunc: method is nil but ec2Client.DeleteNetworkInterfacePermissionRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteNetworkInterfacePermissionInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteNetworkInterfacePermissionRequest.Lock()
	mock.calls.DeleteNetworkInterfacePermissionRequest = append(mock.calls.DeleteNetworkInterfacePermissionRequest, callInfo)
	lockec2ClientMockDeleteNetworkInterfacePermissionRequest.Unlock()
	return mock.DeleteNetworkInterfacePermissionRequestFunc(in1)
}

// DeleteNetworkInterfacePermissionRequestCalls gets all the calls that were made to DeleteNetworkInterfacePermissionRequest.
// Check the length with:
//     len(mockedec2Client.DeleteNetworkInterfacePermissionRequestCalls())
func (mock *ec2ClientMock) DeleteNetworkInterfacePermissionRequestCalls() []struct {
	In1 *ec2.DeleteNetworkInterfacePermissionInput
} {
	var calls []struct {
		In1 *ec2.DeleteNetworkInterfacePermissionInput
	}
	lockec2ClientMockDeleteNetworkInterfacePermissionRequest.RLock()
	calls = mock.calls.DeleteNetworkInterfacePermissionRequest
	lockec2ClientMockDeleteNetworkInterfacePermissionRequest.RUnlock()
	return calls
}

// DeleteNetworkInterfacePermissionWithContext calls DeleteNetworkInterfacePermissionWithContextFunc.
func (mock *ec2ClientMock) DeleteNetworkInterfacePermissionWithContext(in1 context.Context, in2 *ec2.DeleteNetworkInterfacePermissionInput, in3 ...request.Option) (*ec2.DeleteNetworkInterfacePermissionOutput, error) {
	if mock.DeleteNetworkInterfacePermissionWithContextFunc == nil {
		panic("ec2ClientMock.DeleteNetworkInterfacePermissionWithContextFunc: method is nil but ec2Client.DeleteNetworkInterfacePermissionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteNetworkInterfacePermissionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteNetworkInterfacePermissionWithContext.Lock()
	mock.calls.DeleteNetworkInterfacePermissionWithContext = append(mock.calls.DeleteNetworkInterfacePermissionWithContext, callInfo)
	lockec2ClientMockDeleteNetworkInterfacePermissionWithContext.Unlock()
	return mock.DeleteNetworkInterfacePermissionWithContextFunc(in1, in2, in3...)
}

// DeleteNetworkInterfacePermissionWithContextCalls gets all the calls that were made to DeleteNetworkInterfacePermissionWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteNetworkInterfacePermissionWithContextCalls())
func (mock *ec2ClientMock) DeleteNetworkInterfacePermissionWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteNetworkInterfacePermissionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteNetworkInterfacePermissionInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteNetworkInterfacePermissionWithContext.RLock()
	calls = mock.calls.DeleteNetworkInterfacePermissionWithContext
	lockec2ClientMockDeleteNetworkInterfacePermissionWithContext.RUnlock()
	return calls
}

// DeleteNetworkInterfaceRequest calls DeleteNetworkInterfaceRequestFunc.
func (mock *ec2ClientMock) DeleteNetworkInterfaceRequest(in1 *ec2.DeleteNetworkInterfaceInput) (*request.Request, *ec2.DeleteNetworkInterfaceOutput) {
	if mock.DeleteNetworkInterfaceRequestFunc == nil {
		panic("ec2ClientMock.DeleteNetworkInterfaceRequestFunc: method is nil but ec2Client.DeleteNetworkInterfaceRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteNetworkInterfaceInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteNetworkInterfaceRequest.Lock()
	mock.calls.DeleteNetworkInterfaceRequest = append(mock.calls.DeleteNetworkInterfaceRequest, callInfo)
	lockec2ClientMockDeleteNetworkInterfaceRequest.Unlock()
	return mock.DeleteNetworkInterfaceRequestFunc(in1)
}

// DeleteNetworkInterfaceRequestCalls gets all the calls that were made to DeleteNetworkInterfaceRequest.
// Check the length with:
//     len(mockedec2Client.DeleteNetworkInterfaceRequestCalls())
func (mock *ec2ClientMock) DeleteNetworkInterfaceRequestCalls() []struct {
	In1 *ec2.DeleteNetworkInterfaceInput
} {
	var calls []struct {
		In1 *ec2.DeleteNetworkInterfaceInput
	}
	lockec2ClientMockDeleteNetworkInterfaceRequest.RLock()
	calls = mock.calls.DeleteNetworkInterfaceRequest
	lockec2ClientMockDeleteNetworkInterfaceRequest.RUnlock()
	return calls
}

// DeleteNetworkInterfaceWithContext calls DeleteNetworkInterfaceWithContextFunc.
func (mock *ec2ClientMock) DeleteNetworkInterfaceWithContext(in1 context.Context, in2 *ec2.DeleteNetworkInterfaceInput, in3 ...request.Option) (*ec2.DeleteNetworkInterfaceOutput, error) {
	if mock.DeleteNetworkInterfaceWithContextFunc == nil {
		panic("ec2ClientMock.DeleteNetworkInterfaceWithContextFunc: method is nil but ec2Client.DeleteNetworkInterfaceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteNetworkInterfaceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteNetworkInterfaceWithContext.Lock()
	mock.calls.DeleteNetworkInterfaceWithContext = append(mock.calls.DeleteNetworkInterfaceWithContext, callInfo)
	lockec2ClientMockDeleteNetworkInterfaceWithContext.Unlock()
	return mock.DeleteNetworkInterfaceWithContextFunc(in1, in2, in3...)
}

// DeleteNetworkInterfaceWithContextCalls gets all the calls that were made to DeleteNetworkInterfaceWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteNetworkInterfaceWithContextCalls())
func (mock *ec2ClientMock) DeleteNetworkInterfaceWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteNetworkInterfaceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteNetworkInterfaceInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteNetworkInterfaceWithContext.RLock()
	calls = mock.calls.DeleteNetworkInterfaceWithContext
	lockec2ClientMockDeleteNetworkInterfaceWithContext.RUnlock()
	return calls
}

// DeletePlacementGroup calls DeletePlacementGroupFunc.
func (mock *ec2ClientMock) DeletePlacementGroup(in1 *ec2.DeletePlacementGroupInput) (*ec2.DeletePlacementGroupOutput, error) {
	if mock.DeletePlacementGroupFunc == nil {
		panic("ec2ClientMock.DeletePlacementGroupFunc: method is nil but ec2Client.DeletePlacementGroup was just called")
	}
	callInfo := struct {
		In1 *ec2.DeletePlacementGroupInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeletePlacementGroup.Lock()
	mock.calls.DeletePlacementGroup = append(mock.calls.DeletePlacementGroup, callInfo)
	lockec2ClientMockDeletePlacementGroup.Unlock()
	return mock.DeletePlacementGroupFunc(in1)
}

// DeletePlacementGroupCalls gets all the calls that were made to DeletePlacementGroup.
// Check the length with:
//     len(mockedec2Client.DeletePlacementGroupCalls())
func (mock *ec2ClientMock) DeletePlacementGroupCalls() []struct {
	In1 *ec2.DeletePlacementGroupInput
} {
	var calls []struct {
		In1 *ec2.DeletePlacementGroupInput
	}
	lockec2ClientMockDeletePlacementGroup.RLock()
	calls = mock.calls.DeletePlacementGroup
	lockec2ClientMockDeletePlacementGroup.RUnlock()
	return calls
}

// DeletePlacementGroupRequest calls DeletePlacementGroupRequestFunc.
func (mock *ec2ClientMock) DeletePlacementGroupRequest(in1 *ec2.DeletePlacementGroupInput) (*request.Request, *ec2.DeletePlacementGroupOutput) {
	if mock.DeletePlacementGroupRequestFunc == nil {
		panic("ec2ClientMock.DeletePlacementGroupRequestFunc: method is nil but ec2Client.DeletePlacementGroupRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeletePlacementGroupInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeletePlacementGroupRequest.Lock()
	mock.calls.DeletePlacementGroupRequest = append(mock.calls.DeletePlacementGroupRequest, callInfo)
	lockec2ClientMockDeletePlacementGroupRequest.Unlock()
	return mock.DeletePlacementGroupRequestFunc(in1)
}

// DeletePlacementGroupRequestCalls gets all the calls that were made to DeletePlacementGroupRequest.
// Check the length with:
//     len(mockedec2Client.DeletePlacementGroupRequestCalls())
func (mock *ec2ClientMock) DeletePlacementGroupRequestCalls() []struct {
	In1 *ec2.DeletePlacementGroupInput
} {
	var calls []struct {
		In1 *ec2.DeletePlacementGroupInput
	}
	lockec2ClientMockDeletePlacementGroupRequest.RLock()
	calls = mock.calls.DeletePlacementGroupRequest
	lockec2ClientMockDeletePlacementGroupRequest.RUnlock()
	return calls
}

// DeletePlacementGroupWithContext calls DeletePlacementGroupWithContextFunc.
func (mock *ec2ClientMock) DeletePlacementGroupWithContext(in1 context.Context, in2 *ec2.DeletePlacementGroupInput, in3 ...request.Option) (*ec2.DeletePlacementGroupOutput, error) {
	if mock.DeletePlacementGroupWithContextFunc == nil {
		panic("ec2ClientMock.DeletePlacementGroupWithContextFunc: method is nil but ec2Client.DeletePlacementGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeletePlacementGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeletePlacementGroupWithContext.Lock()
	mock.calls.DeletePlacementGroupWithContext = append(mock.calls.DeletePlacementGroupWithContext, callInfo)
	lockec2ClientMockDeletePlacementGroupWithContext.Unlock()
	return mock.DeletePlacementGroupWithContextFunc(in1, in2, in3...)
}

// DeletePlacementGroupWithContextCalls gets all the calls that were made to DeletePlacementGroupWithContext.
// Check the length with:
//     len(mockedec2Client.DeletePlacementGroupWithContextCalls())
func (mock *ec2ClientMock) DeletePlacementGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeletePlacementGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeletePlacementGroupInput
		In3 []request.Option
	}
	lockec2ClientMockDeletePlacementGroupWithContext.RLock()
	calls = mock.calls.DeletePlacementGroupWithContext
	lockec2ClientMockDeletePlacementGroupWithContext.RUnlock()
	return calls
}

// DeleteQueuedReservedInstances calls DeleteQueuedReservedInstancesFunc.
func (mock *ec2ClientMock) DeleteQueuedReservedInstances(in1 *ec2.DeleteQueuedReservedInstancesInput) (*ec2.DeleteQueuedReservedInstancesOutput, error) {
	if mock.DeleteQueuedReservedInstancesFunc == nil {
		panic("ec2ClientMock.DeleteQueuedReservedInstancesFunc: method is nil but ec2Client.DeleteQueuedReservedInstances was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteQueuedReservedInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteQueuedReservedInstances.Lock()
	mock.calls.DeleteQueuedReservedInstances = append(mock.calls.DeleteQueuedReservedInstances, callInfo)
	lockec2ClientMockDeleteQueuedReservedInstances.Unlock()
	return mock.DeleteQueuedReservedInstancesFunc(in1)
}

// DeleteQueuedReservedInstancesCalls gets all the calls that were made to DeleteQueuedReservedInstances.
// Check the length with:
//     len(mockedec2Client.DeleteQueuedReservedInstancesCalls())
func (mock *ec2ClientMock) DeleteQueuedReservedInstancesCalls() []struct {
	In1 *ec2.DeleteQueuedReservedInstancesInput
} {
	var calls []struct {
		In1 *ec2.DeleteQueuedReservedInstancesInput
	}
	lockec2ClientMockDeleteQueuedReservedInstances.RLock()
	calls = mock.calls.DeleteQueuedReservedInstances
	lockec2ClientMockDeleteQueuedReservedInstances.RUnlock()
	return calls
}

// DeleteQueuedReservedInstancesRequest calls DeleteQueuedReservedInstancesRequestFunc.
func (mock *ec2ClientMock) DeleteQueuedReservedInstancesRequest(in1 *ec2.DeleteQueuedReservedInstancesInput) (*request.Request, *ec2.DeleteQueuedReservedInstancesOutput) {
	if mock.DeleteQueuedReservedInstancesRequestFunc == nil {
		panic("ec2ClientMock.DeleteQueuedReservedInstancesRequestFunc: method is nil but ec2Client.DeleteQueuedReservedInstancesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteQueuedReservedInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteQueuedReservedInstancesRequest.Lock()
	mock.calls.DeleteQueuedReservedInstancesRequest = append(mock.calls.DeleteQueuedReservedInstancesRequest, callInfo)
	lockec2ClientMockDeleteQueuedReservedInstancesRequest.Unlock()
	return mock.DeleteQueuedReservedInstancesRequestFunc(in1)
}

// DeleteQueuedReservedInstancesRequestCalls gets all the calls that were made to DeleteQueuedReservedInstancesRequest.
// Check the length with:
//     len(mockedec2Client.DeleteQueuedReservedInstancesRequestCalls())
func (mock *ec2ClientMock) DeleteQueuedReservedInstancesRequestCalls() []struct {
	In1 *ec2.DeleteQueuedReservedInstancesInput
} {
	var calls []struct {
		In1 *ec2.DeleteQueuedReservedInstancesInput
	}
	lockec2ClientMockDeleteQueuedReservedInstancesRequest.RLock()
	calls = mock.calls.DeleteQueuedReservedInstancesRequest
	lockec2ClientMockDeleteQueuedReservedInstancesRequest.RUnlock()
	return calls
}

// DeleteQueuedReservedInstancesWithContext calls DeleteQueuedReservedInstancesWithContextFunc.
func (mock *ec2ClientMock) DeleteQueuedReservedInstancesWithContext(in1 context.Context, in2 *ec2.DeleteQueuedReservedInstancesInput, in3 ...request.Option) (*ec2.DeleteQueuedReservedInstancesOutput, error) {
	if mock.DeleteQueuedReservedInstancesWithContextFunc == nil {
		panic("ec2ClientMock.DeleteQueuedReservedInstancesWithContextFunc: method is nil but ec2Client.DeleteQueuedReservedInstancesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteQueuedReservedInstancesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteQueuedReservedInstancesWithContext.Lock()
	mock.calls.DeleteQueuedReservedInstancesWithContext = append(mock.calls.DeleteQueuedReservedInstancesWithContext, callInfo)
	lockec2ClientMockDeleteQueuedReservedInstancesWithContext.Unlock()
	return mock.DeleteQueuedReservedInstancesWithContextFunc(in1, in2, in3...)
}

// DeleteQueuedReservedInstancesWithContextCalls gets all the calls that were made to DeleteQueuedReservedInstancesWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteQueuedReservedInstancesWithContextCalls())
func (mock *ec2ClientMock) DeleteQueuedReservedInstancesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteQueuedReservedInstancesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteQueuedReservedInstancesInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteQueuedReservedInstancesWithContext.RLock()
	calls = mock.calls.DeleteQueuedReservedInstancesWithContext
	lockec2ClientMockDeleteQueuedReservedInstancesWithContext.RUnlock()
	return calls
}

// DeleteRoute calls DeleteRouteFunc.
func (mock *ec2ClientMock) DeleteRoute(in1 *ec2.DeleteRouteInput) (*ec2.DeleteRouteOutput, error) {
	if mock.DeleteRouteFunc == nil {
		panic("ec2ClientMock.DeleteRouteFunc: method is nil but ec2Client.DeleteRoute was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteRouteInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteRoute.Lock()
	mock.calls.DeleteRoute = append(mock.calls.DeleteRoute, callInfo)
	lockec2ClientMockDeleteRoute.Unlock()
	return mock.DeleteRouteFunc(in1)
}

// DeleteRouteCalls gets all the calls that were made to DeleteRoute.
// Check the length with:
//     len(mockedec2Client.DeleteRouteCalls())
func (mock *ec2ClientMock) DeleteRouteCalls() []struct {
	In1 *ec2.DeleteRouteInput
} {
	var calls []struct {
		In1 *ec2.DeleteRouteInput
	}
	lockec2ClientMockDeleteRoute.RLock()
	calls = mock.calls.DeleteRoute
	lockec2ClientMockDeleteRoute.RUnlock()
	return calls
}

// DeleteRouteRequest calls DeleteRouteRequestFunc.
func (mock *ec2ClientMock) DeleteRouteRequest(in1 *ec2.DeleteRouteInput) (*request.Request, *ec2.DeleteRouteOutput) {
	if mock.DeleteRouteRequestFunc == nil {
		panic("ec2ClientMock.DeleteRouteRequestFunc: method is nil but ec2Client.DeleteRouteRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteRouteInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteRouteRequest.Lock()
	mock.calls.DeleteRouteRequest = append(mock.calls.DeleteRouteRequest, callInfo)
	lockec2ClientMockDeleteRouteRequest.Unlock()
	return mock.DeleteRouteRequestFunc(in1)
}

// DeleteRouteRequestCalls gets all the calls that were made to DeleteRouteRequest.
// Check the length with:
//     len(mockedec2Client.DeleteRouteRequestCalls())
func (mock *ec2ClientMock) DeleteRouteRequestCalls() []struct {
	In1 *ec2.DeleteRouteInput
} {
	var calls []struct {
		In1 *ec2.DeleteRouteInput
	}
	lockec2ClientMockDeleteRouteRequest.RLock()
	calls = mock.calls.DeleteRouteRequest
	lockec2ClientMockDeleteRouteRequest.RUnlock()
	return calls
}

// DeleteRouteTable calls DeleteRouteTableFunc.
func (mock *ec2ClientMock) DeleteRouteTable(in1 *ec2.DeleteRouteTableInput) (*ec2.DeleteRouteTableOutput, error) {
	if mock.DeleteRouteTableFunc == nil {
		panic("ec2ClientMock.DeleteRouteTableFunc: method is nil but ec2Client.DeleteRouteTable was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteRouteTableInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteRouteTable.Lock()
	mock.calls.DeleteRouteTable = append(mock.calls.DeleteRouteTable, callInfo)
	lockec2ClientMockDeleteRouteTable.Unlock()
	return mock.DeleteRouteTableFunc(in1)
}

// DeleteRouteTableCalls gets all the calls that were made to DeleteRouteTable.
// Check the length with:
//     len(mockedec2Client.DeleteRouteTableCalls())
func (mock *ec2ClientMock) DeleteRouteTableCalls() []struct {
	In1 *ec2.DeleteRouteTableInput
} {
	var calls []struct {
		In1 *ec2.DeleteRouteTableInput
	}
	lockec2ClientMockDeleteRouteTable.RLock()
	calls = mock.calls.DeleteRouteTable
	lockec2ClientMockDeleteRouteTable.RUnlock()
	return calls
}

// DeleteRouteTableRequest calls DeleteRouteTableRequestFunc.
func (mock *ec2ClientMock) DeleteRouteTableRequest(in1 *ec2.DeleteRouteTableInput) (*request.Request, *ec2.DeleteRouteTableOutput) {
	if mock.DeleteRouteTableRequestFunc == nil {
		panic("ec2ClientMock.DeleteRouteTableRequestFunc: method is nil but ec2Client.DeleteRouteTableRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteRouteTableInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteRouteTableRequest.Lock()
	mock.calls.DeleteRouteTableRequest = append(mock.calls.DeleteRouteTableRequest, callInfo)
	lockec2ClientMockDeleteRouteTableRequest.Unlock()
	return mock.DeleteRouteTableRequestFunc(in1)
}

// DeleteRouteTableRequestCalls gets all the calls that were made to DeleteRouteTableRequest.
// Check the length with:
//     len(mockedec2Client.DeleteRouteTableRequestCalls())
func (mock *ec2ClientMock) DeleteRouteTableRequestCalls() []struct {
	In1 *ec2.DeleteRouteTableInput
} {
	var calls []struct {
		In1 *ec2.DeleteRouteTableInput
	}
	lockec2ClientMockDeleteRouteTableRequest.RLock()
	calls = mock.calls.DeleteRouteTableRequest
	lockec2ClientMockDeleteRouteTableRequest.RUnlock()
	return calls
}

// DeleteRouteTableWithContext calls DeleteRouteTableWithContextFunc.
func (mock *ec2ClientMock) DeleteRouteTableWithContext(in1 context.Context, in2 *ec2.DeleteRouteTableInput, in3 ...request.Option) (*ec2.DeleteRouteTableOutput, error) {
	if mock.DeleteRouteTableWithContextFunc == nil {
		panic("ec2ClientMock.DeleteRouteTableWithContextFunc: method is nil but ec2Client.DeleteRouteTableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteRouteTableInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteRouteTableWithContext.Lock()
	mock.calls.DeleteRouteTableWithContext = append(mock.calls.DeleteRouteTableWithContext, callInfo)
	lockec2ClientMockDeleteRouteTableWithContext.Unlock()
	return mock.DeleteRouteTableWithContextFunc(in1, in2, in3...)
}

// DeleteRouteTableWithContextCalls gets all the calls that were made to DeleteRouteTableWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteRouteTableWithContextCalls())
func (mock *ec2ClientMock) DeleteRouteTableWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteRouteTableInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteRouteTableInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteRouteTableWithContext.RLock()
	calls = mock.calls.DeleteRouteTableWithContext
	lockec2ClientMockDeleteRouteTableWithContext.RUnlock()
	return calls
}

// DeleteRouteWithContext calls DeleteRouteWithContextFunc.
func (mock *ec2ClientMock) DeleteRouteWithContext(in1 context.Context, in2 *ec2.DeleteRouteInput, in3 ...request.Option) (*ec2.DeleteRouteOutput, error) {
	if mock.DeleteRouteWithContextFunc == nil {
		panic("ec2ClientMock.DeleteRouteWithContextFunc: method is nil but ec2Client.DeleteRouteWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteRouteInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteRouteWithContext.Lock()
	mock.calls.DeleteRouteWithContext = append(mock.calls.DeleteRouteWithContext, callInfo)
	lockec2ClientMockDeleteRouteWithContext.Unlock()
	return mock.DeleteRouteWithContextFunc(in1, in2, in3...)
}

// DeleteRouteWithContextCalls gets all the calls that were made to DeleteRouteWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteRouteWithContextCalls())
func (mock *ec2ClientMock) DeleteRouteWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteRouteInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteRouteInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteRouteWithContext.RLock()
	calls = mock.calls.DeleteRouteWithContext
	lockec2ClientMockDeleteRouteWithContext.RUnlock()
	return calls
}

// DeleteSecurityGroup calls DeleteSecurityGroupFunc.
func (mock *ec2ClientMock) DeleteSecurityGroup(in1 *ec2.DeleteSecurityGroupInput) (*ec2.DeleteSecurityGroupOutput, error) {
	if mock.DeleteSecurityGroupFunc == nil {
		panic("ec2ClientMock.DeleteSecurityGroupFunc: method is nil but ec2Client.DeleteSecurityGroup was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteSecurityGroupInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteSecurityGroup.Lock()
	mock.calls.DeleteSecurityGroup = append(mock.calls.DeleteSecurityGroup, callInfo)
	lockec2ClientMockDeleteSecurityGroup.Unlock()
	return mock.DeleteSecurityGroupFunc(in1)
}

// DeleteSecurityGroupCalls gets all the calls that were made to DeleteSecurityGroup.
// Check the length with:
//     len(mockedec2Client.DeleteSecurityGroupCalls())
func (mock *ec2ClientMock) DeleteSecurityGroupCalls() []struct {
	In1 *ec2.DeleteSecurityGroupInput
} {
	var calls []struct {
		In1 *ec2.DeleteSecurityGroupInput
	}
	lockec2ClientMockDeleteSecurityGroup.RLock()
	calls = mock.calls.DeleteSecurityGroup
	lockec2ClientMockDeleteSecurityGroup.RUnlock()
	return calls
}

// DeleteSecurityGroupRequest calls DeleteSecurityGroupRequestFunc.
func (mock *ec2ClientMock) DeleteSecurityGroupRequest(in1 *ec2.DeleteSecurityGroupInput) (*request.Request, *ec2.DeleteSecurityGroupOutput) {
	if mock.DeleteSecurityGroupRequestFunc == nil {
		panic("ec2ClientMock.DeleteSecurityGroupRequestFunc: method is nil but ec2Client.DeleteSecurityGroupRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteSecurityGroupInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteSecurityGroupRequest.Lock()
	mock.calls.DeleteSecurityGroupRequest = append(mock.calls.DeleteSecurityGroupRequest, callInfo)
	lockec2ClientMockDeleteSecurityGroupRequest.Unlock()
	return mock.DeleteSecurityGroupRequestFunc(in1)
}

// DeleteSecurityGroupRequestCalls gets all the calls that were made to DeleteSecurityGroupRequest.
// Check the length with:
//     len(mockedec2Client.DeleteSecurityGroupRequestCalls())
func (mock *ec2ClientMock) DeleteSecurityGroupRequestCalls() []struct {
	In1 *ec2.DeleteSecurityGroupInput
} {
	var calls []struct {
		In1 *ec2.DeleteSecurityGroupInput
	}
	lockec2ClientMockDeleteSecurityGroupRequest.RLock()
	calls = mock.calls.DeleteSecurityGroupRequest
	lockec2ClientMockDeleteSecurityGroupRequest.RUnlock()
	return calls
}

// DeleteSecurityGroupWithContext calls DeleteSecurityGroupWithContextFunc.
func (mock *ec2ClientMock) DeleteSecurityGroupWithContext(in1 context.Context, in2 *ec2.DeleteSecurityGroupInput, in3 ...request.Option) (*ec2.DeleteSecurityGroupOutput, error) {
	if mock.DeleteSecurityGroupWithContextFunc == nil {
		panic("ec2ClientMock.DeleteSecurityGroupWithContextFunc: method is nil but ec2Client.DeleteSecurityGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteSecurityGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteSecurityGroupWithContext.Lock()
	mock.calls.DeleteSecurityGroupWithContext = append(mock.calls.DeleteSecurityGroupWithContext, callInfo)
	lockec2ClientMockDeleteSecurityGroupWithContext.Unlock()
	return mock.DeleteSecurityGroupWithContextFunc(in1, in2, in3...)
}

// DeleteSecurityGroupWithContextCalls gets all the calls that were made to DeleteSecurityGroupWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteSecurityGroupWithContextCalls())
func (mock *ec2ClientMock) DeleteSecurityGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteSecurityGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteSecurityGroupInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteSecurityGroupWithContext.RLock()
	calls = mock.calls.DeleteSecurityGroupWithContext
	lockec2ClientMockDeleteSecurityGroupWithContext.RUnlock()
	return calls
}

// DeleteSnapshot calls DeleteSnapshotFunc.
func (mock *ec2ClientMock) DeleteSnapshot(in1 *ec2.DeleteSnapshotInput) (*ec2.DeleteSnapshotOutput, error) {
	if mock.DeleteSnapshotFunc == nil {
		panic("ec2ClientMock.DeleteSnapshotFunc: method is nil but ec2Client.DeleteSnapshot was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteSnapshotInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteSnapshot.Lock()
	mock.calls.DeleteSnapshot = append(mock.calls.DeleteSnapshot, callInfo)
	lockec2ClientMockDeleteSnapshot.Unlock()
	return mock.DeleteSnapshotFunc(in1)
}

// DeleteSnapshotCalls gets all the calls that were made to DeleteSnapshot.
// Check the length with:
//     len(mockedec2Client.DeleteSnapshotCalls())
func (mock *ec2ClientMock) DeleteSnapshotCalls() []struct {
	In1 *ec2.DeleteSnapshotInput
} {
	var calls []struct {
		In1 *ec2.DeleteSnapshotInput
	}
	lockec2ClientMockDeleteSnapshot.RLock()
	calls = mock.calls.DeleteSnapshot
	lockec2ClientMockDeleteSnapshot.RUnlock()
	return calls
}

// DeleteSnapshotRequest calls DeleteSnapshotRequestFunc.
func (mock *ec2ClientMock) DeleteSnapshotRequest(in1 *ec2.DeleteSnapshotInput) (*request.Request, *ec2.DeleteSnapshotOutput) {
	if mock.DeleteSnapshotRequestFunc == nil {
		panic("ec2ClientMock.DeleteSnapshotRequestFunc: method is nil but ec2Client.DeleteSnapshotRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteSnapshotInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteSnapshotRequest.Lock()
	mock.calls.DeleteSnapshotRequest = append(mock.calls.DeleteSnapshotRequest, callInfo)
	lockec2ClientMockDeleteSnapshotRequest.Unlock()
	return mock.DeleteSnapshotRequestFunc(in1)
}

// DeleteSnapshotRequestCalls gets all the calls that were made to DeleteSnapshotRequest.
// Check the length with:
//     len(mockedec2Client.DeleteSnapshotRequestCalls())
func (mock *ec2ClientMock) DeleteSnapshotRequestCalls() []struct {
	In1 *ec2.DeleteSnapshotInput
} {
	var calls []struct {
		In1 *ec2.DeleteSnapshotInput
	}
	lockec2ClientMockDeleteSnapshotRequest.RLock()
	calls = mock.calls.DeleteSnapshotRequest
	lockec2ClientMockDeleteSnapshotRequest.RUnlock()
	return calls
}

// DeleteSnapshotWithContext calls DeleteSnapshotWithContextFunc.
func (mock *ec2ClientMock) DeleteSnapshotWithContext(in1 context.Context, in2 *ec2.DeleteSnapshotInput, in3 ...request.Option) (*ec2.DeleteSnapshotOutput, error) {
	if mock.DeleteSnapshotWithContextFunc == nil {
		panic("ec2ClientMock.DeleteSnapshotWithContextFunc: method is nil but ec2Client.DeleteSnapshotWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteSnapshotInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteSnapshotWithContext.Lock()
	mock.calls.DeleteSnapshotWithContext = append(mock.calls.DeleteSnapshotWithContext, callInfo)
	lockec2ClientMockDeleteSnapshotWithContext.Unlock()
	return mock.DeleteSnapshotWithContextFunc(in1, in2, in3...)
}

// DeleteSnapshotWithContextCalls gets all the calls that were made to DeleteSnapshotWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteSnapshotWithContextCalls())
func (mock *ec2ClientMock) DeleteSnapshotWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteSnapshotInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteSnapshotInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteSnapshotWithContext.RLock()
	calls = mock.calls.DeleteSnapshotWithContext
	lockec2ClientMockDeleteSnapshotWithContext.RUnlock()
	return calls
}

// DeleteSpotDatafeedSubscription calls DeleteSpotDatafeedSubscriptionFunc.
func (mock *ec2ClientMock) DeleteSpotDatafeedSubscription(in1 *ec2.DeleteSpotDatafeedSubscriptionInput) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error) {
	if mock.DeleteSpotDatafeedSubscriptionFunc == nil {
		panic("ec2ClientMock.DeleteSpotDatafeedSubscriptionFunc: method is nil but ec2Client.DeleteSpotDatafeedSubscription was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteSpotDatafeedSubscriptionInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteSpotDatafeedSubscription.Lock()
	mock.calls.DeleteSpotDatafeedSubscription = append(mock.calls.DeleteSpotDatafeedSubscription, callInfo)
	lockec2ClientMockDeleteSpotDatafeedSubscription.Unlock()
	return mock.DeleteSpotDatafeedSubscriptionFunc(in1)
}

// DeleteSpotDatafeedSubscriptionCalls gets all the calls that were made to DeleteSpotDatafeedSubscription.
// Check the length with:
//     len(mockedec2Client.DeleteSpotDatafeedSubscriptionCalls())
func (mock *ec2ClientMock) DeleteSpotDatafeedSubscriptionCalls() []struct {
	In1 *ec2.DeleteSpotDatafeedSubscriptionInput
} {
	var calls []struct {
		In1 *ec2.DeleteSpotDatafeedSubscriptionInput
	}
	lockec2ClientMockDeleteSpotDatafeedSubscription.RLock()
	calls = mock.calls.DeleteSpotDatafeedSubscription
	lockec2ClientMockDeleteSpotDatafeedSubscription.RUnlock()
	return calls
}

// DeleteSpotDatafeedSubscriptionRequest calls DeleteSpotDatafeedSubscriptionRequestFunc.
func (mock *ec2ClientMock) DeleteSpotDatafeedSubscriptionRequest(in1 *ec2.DeleteSpotDatafeedSubscriptionInput) (*request.Request, *ec2.DeleteSpotDatafeedSubscriptionOutput) {
	if mock.DeleteSpotDatafeedSubscriptionRequestFunc == nil {
		panic("ec2ClientMock.DeleteSpotDatafeedSubscriptionRequestFunc: method is nil but ec2Client.DeleteSpotDatafeedSubscriptionRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteSpotDatafeedSubscriptionInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteSpotDatafeedSubscriptionRequest.Lock()
	mock.calls.DeleteSpotDatafeedSubscriptionRequest = append(mock.calls.DeleteSpotDatafeedSubscriptionRequest, callInfo)
	lockec2ClientMockDeleteSpotDatafeedSubscriptionRequest.Unlock()
	return mock.DeleteSpotDatafeedSubscriptionRequestFunc(in1)
}

// DeleteSpotDatafeedSubscriptionRequestCalls gets all the calls that were made to DeleteSpotDatafeedSubscriptionRequest.
// Check the length with:
//     len(mockedec2Client.DeleteSpotDatafeedSubscriptionRequestCalls())
func (mock *ec2ClientMock) DeleteSpotDatafeedSubscriptionRequestCalls() []struct {
	In1 *ec2.DeleteSpotDatafeedSubscriptionInput
} {
	var calls []struct {
		In1 *ec2.DeleteSpotDatafeedSubscriptionInput
	}
	lockec2ClientMockDeleteSpotDatafeedSubscriptionRequest.RLock()
	calls = mock.calls.DeleteSpotDatafeedSubscriptionRequest
	lockec2ClientMockDeleteSpotDatafeedSubscriptionRequest.RUnlock()
	return calls
}

// DeleteSpotDatafeedSubscriptionWithContext calls DeleteSpotDatafeedSubscriptionWithContextFunc.
func (mock *ec2ClientMock) DeleteSpotDatafeedSubscriptionWithContext(in1 context.Context, in2 *ec2.DeleteSpotDatafeedSubscriptionInput, in3 ...request.Option) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error) {
	if mock.DeleteSpotDatafeedSubscriptionWithContextFunc == nil {
		panic("ec2ClientMock.DeleteSpotDatafeedSubscriptionWithContextFunc: method is nil but ec2Client.DeleteSpotDatafeedSubscriptionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteSpotDatafeedSubscriptionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteSpotDatafeedSubscriptionWithContext.Lock()
	mock.calls.DeleteSpotDatafeedSubscriptionWithContext = append(mock.calls.DeleteSpotDatafeedSubscriptionWithContext, callInfo)
	lockec2ClientMockDeleteSpotDatafeedSubscriptionWithContext.Unlock()
	return mock.DeleteSpotDatafeedSubscriptionWithContextFunc(in1, in2, in3...)
}

// DeleteSpotDatafeedSubscriptionWithContextCalls gets all the calls that were made to DeleteSpotDatafeedSubscriptionWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteSpotDatafeedSubscriptionWithContextCalls())
func (mock *ec2ClientMock) DeleteSpotDatafeedSubscriptionWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteSpotDatafeedSubscriptionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteSpotDatafeedSubscriptionInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteSpotDatafeedSubscriptionWithContext.RLock()
	calls = mock.calls.DeleteSpotDatafeedSubscriptionWithContext
	lockec2ClientMockDeleteSpotDatafeedSubscriptionWithContext.RUnlock()
	return calls
}

// DeleteSubnet calls DeleteSubnetFunc.
func (mock *ec2ClientMock) DeleteSubnet(in1 *ec2.DeleteSubnetInput) (*ec2.DeleteSubnetOutput, error) {
	if mock.DeleteSubnetFunc == nil {
		panic("ec2ClientMock.DeleteSubnetFunc: method is nil but ec2Client.DeleteSubnet was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteSubnetInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteSubnet.Lock()
	mock.calls.DeleteSubnet = append(mock.calls.DeleteSubnet, callInfo)
	lockec2ClientMockDeleteSubnet.Unlock()
	return mock.DeleteSubnetFunc(in1)
}

// DeleteSubnetCalls gets all the calls that were made to DeleteSubnet.
// Check the length with:
//     len(mockedec2Client.DeleteSubnetCalls())
func (mock *ec2ClientMock) DeleteSubnetCalls() []struct {
	In1 *ec2.DeleteSubnetInput
} {
	var calls []struct {
		In1 *ec2.DeleteSubnetInput
	}
	lockec2ClientMockDeleteSubnet.RLock()
	calls = mock.calls.DeleteSubnet
	lockec2ClientMockDeleteSubnet.RUnlock()
	return calls
}

// DeleteSubnetRequest calls DeleteSubnetRequestFunc.
func (mock *ec2ClientMock) DeleteSubnetRequest(in1 *ec2.DeleteSubnetInput) (*request.Request, *ec2.DeleteSubnetOutput) {
	if mock.DeleteSubnetRequestFunc == nil {
		panic("ec2ClientMock.DeleteSubnetRequestFunc: method is nil but ec2Client.DeleteSubnetRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteSubnetInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteSubnetRequest.Lock()
	mock.calls.DeleteSubnetRequest = append(mock.calls.DeleteSubnetRequest, callInfo)
	lockec2ClientMockDeleteSubnetRequest.Unlock()
	return mock.DeleteSubnetRequestFunc(in1)
}

// DeleteSubnetRequestCalls gets all the calls that were made to DeleteSubnetRequest.
// Check the length with:
//     len(mockedec2Client.DeleteSubnetRequestCalls())
func (mock *ec2ClientMock) DeleteSubnetRequestCalls() []struct {
	In1 *ec2.DeleteSubnetInput
} {
	var calls []struct {
		In1 *ec2.DeleteSubnetInput
	}
	lockec2ClientMockDeleteSubnetRequest.RLock()
	calls = mock.calls.DeleteSubnetRequest
	lockec2ClientMockDeleteSubnetRequest.RUnlock()
	return calls
}

// DeleteSubnetWithContext calls DeleteSubnetWithContextFunc.
func (mock *ec2ClientMock) DeleteSubnetWithContext(in1 context.Context, in2 *ec2.DeleteSubnetInput, in3 ...request.Option) (*ec2.DeleteSubnetOutput, error) {
	if mock.DeleteSubnetWithContextFunc == nil {
		panic("ec2ClientMock.DeleteSubnetWithContextFunc: method is nil but ec2Client.DeleteSubnetWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteSubnetInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteSubnetWithContext.Lock()
	mock.calls.DeleteSubnetWithContext = append(mock.calls.DeleteSubnetWithContext, callInfo)
	lockec2ClientMockDeleteSubnetWithContext.Unlock()
	return mock.DeleteSubnetWithContextFunc(in1, in2, in3...)
}

// DeleteSubnetWithContextCalls gets all the calls that were made to DeleteSubnetWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteSubnetWithContextCalls())
func (mock *ec2ClientMock) DeleteSubnetWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteSubnetInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteSubnetInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteSubnetWithContext.RLock()
	calls = mock.calls.DeleteSubnetWithContext
	lockec2ClientMockDeleteSubnetWithContext.RUnlock()
	return calls
}

// DeleteTags calls DeleteTagsFunc.
func (mock *ec2ClientMock) DeleteTags(in1 *ec2.DeleteTagsInput) (*ec2.DeleteTagsOutput, error) {
	if mock.DeleteTagsFunc == nil {
		panic("ec2ClientMock.DeleteTagsFunc: method is nil but ec2Client.DeleteTags was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteTagsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteTags.Lock()
	mock.calls.DeleteTags = append(mock.calls.DeleteTags, callInfo)
	lockec2ClientMockDeleteTags.Unlock()
	return mock.DeleteTagsFunc(in1)
}

// DeleteTagsCalls gets all the calls that were made to DeleteTags.
// Check the length with:
//     len(mockedec2Client.DeleteTagsCalls())
func (mock *ec2ClientMock) DeleteTagsCalls() []struct {
	In1 *ec2.DeleteTagsInput
} {
	var calls []struct {
		In1 *ec2.DeleteTagsInput
	}
	lockec2ClientMockDeleteTags.RLock()
	calls = mock.calls.DeleteTags
	lockec2ClientMockDeleteTags.RUnlock()
	return calls
}

// DeleteTagsRequest calls DeleteTagsRequestFunc.
func (mock *ec2ClientMock) DeleteTagsRequest(in1 *ec2.DeleteTagsInput) (*request.Request, *ec2.DeleteTagsOutput) {
	if mock.DeleteTagsRequestFunc == nil {
		panic("ec2ClientMock.DeleteTagsRequestFunc: method is nil but ec2Client.DeleteTagsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteTagsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteTagsRequest.Lock()
	mock.calls.DeleteTagsRequest = append(mock.calls.DeleteTagsRequest, callInfo)
	lockec2ClientMockDeleteTagsRequest.Unlock()
	return mock.DeleteTagsRequestFunc(in1)
}

// DeleteTagsRequestCalls gets all the calls that were made to DeleteTagsRequest.
// Check the length with:
//     len(mockedec2Client.DeleteTagsRequestCalls())
func (mock *ec2ClientMock) DeleteTagsRequestCalls() []struct {
	In1 *ec2.DeleteTagsInput
} {
	var calls []struct {
		In1 *ec2.DeleteTagsInput
	}
	lockec2ClientMockDeleteTagsRequest.RLock()
	calls = mock.calls.DeleteTagsRequest
	lockec2ClientMockDeleteTagsRequest.RUnlock()
	return calls
}

// DeleteTagsWithContext calls DeleteTagsWithContextFunc.
func (mock *ec2ClientMock) DeleteTagsWithContext(in1 context.Context, in2 *ec2.DeleteTagsInput, in3 ...request.Option) (*ec2.DeleteTagsOutput, error) {
	if mock.DeleteTagsWithContextFunc == nil {
		panic("ec2ClientMock.DeleteTagsWithContextFunc: method is nil but ec2Client.DeleteTagsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteTagsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteTagsWithContext.Lock()
	mock.calls.DeleteTagsWithContext = append(mock.calls.DeleteTagsWithContext, callInfo)
	lockec2ClientMockDeleteTagsWithContext.Unlock()
	return mock.DeleteTagsWithContextFunc(in1, in2, in3...)
}

// DeleteTagsWithContextCalls gets all the calls that were made to DeleteTagsWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteTagsWithContextCalls())
func (mock *ec2ClientMock) DeleteTagsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteTagsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteTagsInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteTagsWithContext.RLock()
	calls = mock.calls.DeleteTagsWithContext
	lockec2ClientMockDeleteTagsWithContext.RUnlock()
	return calls
}

// DeleteTrafficMirrorFilter calls DeleteTrafficMirrorFilterFunc.
func (mock *ec2ClientMock) DeleteTrafficMirrorFilter(in1 *ec2.DeleteTrafficMirrorFilterInput) (*ec2.DeleteTrafficMirrorFilterOutput, error) {
	if mock.DeleteTrafficMirrorFilterFunc == nil {
		panic("ec2ClientMock.DeleteTrafficMirrorFilterFunc: method is nil but ec2Client.DeleteTrafficMirrorFilter was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteTrafficMirrorFilterInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteTrafficMirrorFilter.Lock()
	mock.calls.DeleteTrafficMirrorFilter = append(mock.calls.DeleteTrafficMirrorFilter, callInfo)
	lockec2ClientMockDeleteTrafficMirrorFilter.Unlock()
	return mock.DeleteTrafficMirrorFilterFunc(in1)
}

// DeleteTrafficMirrorFilterCalls gets all the calls that were made to DeleteTrafficMirrorFilter.
// Check the length with:
//     len(mockedec2Client.DeleteTrafficMirrorFilterCalls())
func (mock *ec2ClientMock) DeleteTrafficMirrorFilterCalls() []struct {
	In1 *ec2.DeleteTrafficMirrorFilterInput
} {
	var calls []struct {
		In1 *ec2.DeleteTrafficMirrorFilterInput
	}
	lockec2ClientMockDeleteTrafficMirrorFilter.RLock()
	calls = mock.calls.DeleteTrafficMirrorFilter
	lockec2ClientMockDeleteTrafficMirrorFilter.RUnlock()
	return calls
}

// DeleteTrafficMirrorFilterRequest calls DeleteTrafficMirrorFilterRequestFunc.
func (mock *ec2ClientMock) DeleteTrafficMirrorFilterRequest(in1 *ec2.DeleteTrafficMirrorFilterInput) (*request.Request, *ec2.DeleteTrafficMirrorFilterOutput) {
	if mock.DeleteTrafficMirrorFilterRequestFunc == nil {
		panic("ec2ClientMock.DeleteTrafficMirrorFilterRequestFunc: method is nil but ec2Client.DeleteTrafficMirrorFilterRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteTrafficMirrorFilterInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteTrafficMirrorFilterRequest.Lock()
	mock.calls.DeleteTrafficMirrorFilterRequest = append(mock.calls.DeleteTrafficMirrorFilterRequest, callInfo)
	lockec2ClientMockDeleteTrafficMirrorFilterRequest.Unlock()
	return mock.DeleteTrafficMirrorFilterRequestFunc(in1)
}

// DeleteTrafficMirrorFilterRequestCalls gets all the calls that were made to DeleteTrafficMirrorFilterRequest.
// Check the length with:
//     len(mockedec2Client.DeleteTrafficMirrorFilterRequestCalls())
func (mock *ec2ClientMock) DeleteTrafficMirrorFilterRequestCalls() []struct {
	In1 *ec2.DeleteTrafficMirrorFilterInput
} {
	var calls []struct {
		In1 *ec2.DeleteTrafficMirrorFilterInput
	}
	lockec2ClientMockDeleteTrafficMirrorFilterRequest.RLock()
	calls = mock.calls.DeleteTrafficMirrorFilterRequest
	lockec2ClientMockDeleteTrafficMirrorFilterRequest.RUnlock()
	return calls
}

// DeleteTrafficMirrorFilterRule calls DeleteTrafficMirrorFilterRuleFunc.
func (mock *ec2ClientMock) DeleteTrafficMirrorFilterRule(in1 *ec2.DeleteTrafficMirrorFilterRuleInput) (*ec2.DeleteTrafficMirrorFilterRuleOutput, error) {
	if mock.DeleteTrafficMirrorFilterRuleFunc == nil {
		panic("ec2ClientMock.DeleteTrafficMirrorFilterRuleFunc: method is nil but ec2Client.DeleteTrafficMirrorFilterRule was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteTrafficMirrorFilterRuleInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteTrafficMirrorFilterRule.Lock()
	mock.calls.DeleteTrafficMirrorFilterRule = append(mock.calls.DeleteTrafficMirrorFilterRule, callInfo)
	lockec2ClientMockDeleteTrafficMirrorFilterRule.Unlock()
	return mock.DeleteTrafficMirrorFilterRuleFunc(in1)
}

// DeleteTrafficMirrorFilterRuleCalls gets all the calls that were made to DeleteTrafficMirrorFilterRule.
// Check the length with:
//     len(mockedec2Client.DeleteTrafficMirrorFilterRuleCalls())
func (mock *ec2ClientMock) DeleteTrafficMirrorFilterRuleCalls() []struct {
	In1 *ec2.DeleteTrafficMirrorFilterRuleInput
} {
	var calls []struct {
		In1 *ec2.DeleteTrafficMirrorFilterRuleInput
	}
	lockec2ClientMockDeleteTrafficMirrorFilterRule.RLock()
	calls = mock.calls.DeleteTrafficMirrorFilterRule
	lockec2ClientMockDeleteTrafficMirrorFilterRule.RUnlock()
	return calls
}

// DeleteTrafficMirrorFilterRuleRequest calls DeleteTrafficMirrorFilterRuleRequestFunc.
func (mock *ec2ClientMock) DeleteTrafficMirrorFilterRuleRequest(in1 *ec2.DeleteTrafficMirrorFilterRuleInput) (*request.Request, *ec2.DeleteTrafficMirrorFilterRuleOutput) {
	if mock.DeleteTrafficMirrorFilterRuleRequestFunc == nil {
		panic("ec2ClientMock.DeleteTrafficMirrorFilterRuleRequestFunc: method is nil but ec2Client.DeleteTrafficMirrorFilterRuleRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteTrafficMirrorFilterRuleInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteTrafficMirrorFilterRuleRequest.Lock()
	mock.calls.DeleteTrafficMirrorFilterRuleRequest = append(mock.calls.DeleteTrafficMirrorFilterRuleRequest, callInfo)
	lockec2ClientMockDeleteTrafficMirrorFilterRuleRequest.Unlock()
	return mock.DeleteTrafficMirrorFilterRuleRequestFunc(in1)
}

// DeleteTrafficMirrorFilterRuleRequestCalls gets all the calls that were made to DeleteTrafficMirrorFilterRuleRequest.
// Check the length with:
//     len(mockedec2Client.DeleteTrafficMirrorFilterRuleRequestCalls())
func (mock *ec2ClientMock) DeleteTrafficMirrorFilterRuleRequestCalls() []struct {
	In1 *ec2.DeleteTrafficMirrorFilterRuleInput
} {
	var calls []struct {
		In1 *ec2.DeleteTrafficMirrorFilterRuleInput
	}
	lockec2ClientMockDeleteTrafficMirrorFilterRuleRequest.RLock()
	calls = mock.calls.DeleteTrafficMirrorFilterRuleRequest
	lockec2ClientMockDeleteTrafficMirrorFilterRuleRequest.RUnlock()
	return calls
}

// DeleteTrafficMirrorFilterRuleWithContext calls DeleteTrafficMirrorFilterRuleWithContextFunc.
func (mock *ec2ClientMock) DeleteTrafficMirrorFilterRuleWithContext(in1 context.Context, in2 *ec2.DeleteTrafficMirrorFilterRuleInput, in3 ...request.Option) (*ec2.DeleteTrafficMirrorFilterRuleOutput, error) {
	if mock.DeleteTrafficMirrorFilterRuleWithContextFunc == nil {
		panic("ec2ClientMock.DeleteTrafficMirrorFilterRuleWithContextFunc: method is nil but ec2Client.DeleteTrafficMirrorFilterRuleWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteTrafficMirrorFilterRuleInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteTrafficMirrorFilterRuleWithContext.Lock()
	mock.calls.DeleteTrafficMirrorFilterRuleWithContext = append(mock.calls.DeleteTrafficMirrorFilterRuleWithContext, callInfo)
	lockec2ClientMockDeleteTrafficMirrorFilterRuleWithContext.Unlock()
	return mock.DeleteTrafficMirrorFilterRuleWithContextFunc(in1, in2, in3...)
}

// DeleteTrafficMirrorFilterRuleWithContextCalls gets all the calls that were made to DeleteTrafficMirrorFilterRuleWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteTrafficMirrorFilterRuleWithContextCalls())
func (mock *ec2ClientMock) DeleteTrafficMirrorFilterRuleWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteTrafficMirrorFilterRuleInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteTrafficMirrorFilterRuleInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteTrafficMirrorFilterRuleWithContext.RLock()
	calls = mock.calls.DeleteTrafficMirrorFilterRuleWithContext
	lockec2ClientMockDeleteTrafficMirrorFilterRuleWithContext.RUnlock()
	return calls
}

// DeleteTrafficMirrorFilterWithContext calls DeleteTrafficMirrorFilterWithContextFunc.
func (mock *ec2ClientMock) DeleteTrafficMirrorFilterWithContext(in1 context.Context, in2 *ec2.DeleteTrafficMirrorFilterInput, in3 ...request.Option) (*ec2.DeleteTrafficMirrorFilterOutput, error) {
	if mock.DeleteTrafficMirrorFilterWithContextFunc == nil {
		panic("ec2ClientMock.DeleteTrafficMirrorFilterWithContextFunc: method is nil but ec2Client.DeleteTrafficMirrorFilterWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteTrafficMirrorFilterInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteTrafficMirrorFilterWithContext.Lock()
	mock.calls.DeleteTrafficMirrorFilterWithContext = append(mock.calls.DeleteTrafficMirrorFilterWithContext, callInfo)
	lockec2ClientMockDeleteTrafficMirrorFilterWithContext.Unlock()
	return mock.DeleteTrafficMirrorFilterWithContextFunc(in1, in2, in3...)
}

// DeleteTrafficMirrorFilterWithContextCalls gets all the calls that were made to DeleteTrafficMirrorFilterWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteTrafficMirrorFilterWithContextCalls())
func (mock *ec2ClientMock) DeleteTrafficMirrorFilterWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteTrafficMirrorFilterInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteTrafficMirrorFilterInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteTrafficMirrorFilterWithContext.RLock()
	calls = mock.calls.DeleteTrafficMirrorFilterWithContext
	lockec2ClientMockDeleteTrafficMirrorFilterWithContext.RUnlock()
	return calls
}

// DeleteTrafficMirrorSession calls DeleteTrafficMirrorSessionFunc.
func (mock *ec2ClientMock) DeleteTrafficMirrorSession(in1 *ec2.DeleteTrafficMirrorSessionInput) (*ec2.DeleteTrafficMirrorSessionOutput, error) {
	if mock.DeleteTrafficMirrorSessionFunc == nil {
		panic("ec2ClientMock.DeleteTrafficMirrorSessionFunc: method is nil but ec2Client.DeleteTrafficMirrorSession was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteTrafficMirrorSessionInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteTrafficMirrorSession.Lock()
	mock.calls.DeleteTrafficMirrorSession = append(mock.calls.DeleteTrafficMirrorSession, callInfo)
	lockec2ClientMockDeleteTrafficMirrorSession.Unlock()
	return mock.DeleteTrafficMirrorSessionFunc(in1)
}

// DeleteTrafficMirrorSessionCalls gets all the calls that were made to DeleteTrafficMirrorSession.
// Check the length with:
//     len(mockedec2Client.DeleteTrafficMirrorSessionCalls())
func (mock *ec2ClientMock) DeleteTrafficMirrorSessionCalls() []struct {
	In1 *ec2.DeleteTrafficMirrorSessionInput
} {
	var calls []struct {
		In1 *ec2.DeleteTrafficMirrorSessionInput
	}
	lockec2ClientMockDeleteTrafficMirrorSession.RLock()
	calls = mock.calls.DeleteTrafficMirrorSession
	lockec2ClientMockDeleteTrafficMirrorSession.RUnlock()
	return calls
}

// DeleteTrafficMirrorSessionRequest calls DeleteTrafficMirrorSessionRequestFunc.
func (mock *ec2ClientMock) DeleteTrafficMirrorSessionRequest(in1 *ec2.DeleteTrafficMirrorSessionInput) (*request.Request, *ec2.DeleteTrafficMirrorSessionOutput) {
	if mock.DeleteTrafficMirrorSessionRequestFunc == nil {
		panic("ec2ClientMock.DeleteTrafficMirrorSessionRequestFunc: method is nil but ec2Client.DeleteTrafficMirrorSessionRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteTrafficMirrorSessionInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteTrafficMirrorSessionRequest.Lock()
	mock.calls.DeleteTrafficMirrorSessionRequest = append(mock.calls.DeleteTrafficMirrorSessionRequest, callInfo)
	lockec2ClientMockDeleteTrafficMirrorSessionRequest.Unlock()
	return mock.DeleteTrafficMirrorSessionRequestFunc(in1)
}

// DeleteTrafficMirrorSessionRequestCalls gets all the calls that were made to DeleteTrafficMirrorSessionRequest.
// Check the length with:
//     len(mockedec2Client.DeleteTrafficMirrorSessionRequestCalls())
func (mock *ec2ClientMock) DeleteTrafficMirrorSessionRequestCalls() []struct {
	In1 *ec2.DeleteTrafficMirrorSessionInput
} {
	var calls []struct {
		In1 *ec2.DeleteTrafficMirrorSessionInput
	}
	lockec2ClientMockDeleteTrafficMirrorSessionRequest.RLock()
	calls = mock.calls.DeleteTrafficMirrorSessionRequest
	lockec2ClientMockDeleteTrafficMirrorSessionRequest.RUnlock()
	return calls
}

// DeleteTrafficMirrorSessionWithContext calls DeleteTrafficMirrorSessionWithContextFunc.
func (mock *ec2ClientMock) DeleteTrafficMirrorSessionWithContext(in1 context.Context, in2 *ec2.DeleteTrafficMirrorSessionInput, in3 ...request.Option) (*ec2.DeleteTrafficMirrorSessionOutput, error) {
	if mock.DeleteTrafficMirrorSessionWithContextFunc == nil {
		panic("ec2ClientMock.DeleteTrafficMirrorSessionWithContextFunc: method is nil but ec2Client.DeleteTrafficMirrorSessionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteTrafficMirrorSessionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteTrafficMirrorSessionWithContext.Lock()
	mock.calls.DeleteTrafficMirrorSessionWithContext = append(mock.calls.DeleteTrafficMirrorSessionWithContext, callInfo)
	lockec2ClientMockDeleteTrafficMirrorSessionWithContext.Unlock()
	return mock.DeleteTrafficMirrorSessionWithContextFunc(in1, in2, in3...)
}

// DeleteTrafficMirrorSessionWithContextCalls gets all the calls that were made to DeleteTrafficMirrorSessionWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteTrafficMirrorSessionWithContextCalls())
func (mock *ec2ClientMock) DeleteTrafficMirrorSessionWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteTrafficMirrorSessionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteTrafficMirrorSessionInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteTrafficMirrorSessionWithContext.RLock()
	calls = mock.calls.DeleteTrafficMirrorSessionWithContext
	lockec2ClientMockDeleteTrafficMirrorSessionWithContext.RUnlock()
	return calls
}

// DeleteTrafficMirrorTarget calls DeleteTrafficMirrorTargetFunc.
func (mock *ec2ClientMock) DeleteTrafficMirrorTarget(in1 *ec2.DeleteTrafficMirrorTargetInput) (*ec2.DeleteTrafficMirrorTargetOutput, error) {
	if mock.DeleteTrafficMirrorTargetFunc == nil {
		panic("ec2ClientMock.DeleteTrafficMirrorTargetFunc: method is nil but ec2Client.DeleteTrafficMirrorTarget was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteTrafficMirrorTargetInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteTrafficMirrorTarget.Lock()
	mock.calls.DeleteTrafficMirrorTarget = append(mock.calls.DeleteTrafficMirrorTarget, callInfo)
	lockec2ClientMockDeleteTrafficMirrorTarget.Unlock()
	return mock.DeleteTrafficMirrorTargetFunc(in1)
}

// DeleteTrafficMirrorTargetCalls gets all the calls that were made to DeleteTrafficMirrorTarget.
// Check the length with:
//     len(mockedec2Client.DeleteTrafficMirrorTargetCalls())
func (mock *ec2ClientMock) DeleteTrafficMirrorTargetCalls() []struct {
	In1 *ec2.DeleteTrafficMirrorTargetInput
} {
	var calls []struct {
		In1 *ec2.DeleteTrafficMirrorTargetInput
	}
	lockec2ClientMockDeleteTrafficMirrorTarget.RLock()
	calls = mock.calls.DeleteTrafficMirrorTarget
	lockec2ClientMockDeleteTrafficMirrorTarget.RUnlock()
	return calls
}

// DeleteTrafficMirrorTargetRequest calls DeleteTrafficMirrorTargetRequestFunc.
func (mock *ec2ClientMock) DeleteTrafficMirrorTargetRequest(in1 *ec2.DeleteTrafficMirrorTargetInput) (*request.Request, *ec2.DeleteTrafficMirrorTargetOutput) {
	if mock.DeleteTrafficMirrorTargetRequestFunc == nil {
		panic("ec2ClientMock.DeleteTrafficMirrorTargetRequestFunc: method is nil but ec2Client.DeleteTrafficMirrorTargetRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteTrafficMirrorTargetInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteTrafficMirrorTargetRequest.Lock()
	mock.calls.DeleteTrafficMirrorTargetRequest = append(mock.calls.DeleteTrafficMirrorTargetRequest, callInfo)
	lockec2ClientMockDeleteTrafficMirrorTargetRequest.Unlock()
	return mock.DeleteTrafficMirrorTargetRequestFunc(in1)
}

// DeleteTrafficMirrorTargetRequestCalls gets all the calls that were made to DeleteTrafficMirrorTargetRequest.
// Check the length with:
//     len(mockedec2Client.DeleteTrafficMirrorTargetRequestCalls())
func (mock *ec2ClientMock) DeleteTrafficMirrorTargetRequestCalls() []struct {
	In1 *ec2.DeleteTrafficMirrorTargetInput
} {
	var calls []struct {
		In1 *ec2.DeleteTrafficMirrorTargetInput
	}
	lockec2ClientMockDeleteTrafficMirrorTargetRequest.RLock()
	calls = mock.calls.DeleteTrafficMirrorTargetRequest
	lockec2ClientMockDeleteTrafficMirrorTargetRequest.RUnlock()
	return calls
}

// DeleteTrafficMirrorTargetWithContext calls DeleteTrafficMirrorTargetWithContextFunc.
func (mock *ec2ClientMock) DeleteTrafficMirrorTargetWithContext(in1 context.Context, in2 *ec2.DeleteTrafficMirrorTargetInput, in3 ...request.Option) (*ec2.DeleteTrafficMirrorTargetOutput, error) {
	if mock.DeleteTrafficMirrorTargetWithContextFunc == nil {
		panic("ec2ClientMock.DeleteTrafficMirrorTargetWithContextFunc: method is nil but ec2Client.DeleteTrafficMirrorTargetWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteTrafficMirrorTargetInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteTrafficMirrorTargetWithContext.Lock()
	mock.calls.DeleteTrafficMirrorTargetWithContext = append(mock.calls.DeleteTrafficMirrorTargetWithContext, callInfo)
	lockec2ClientMockDeleteTrafficMirrorTargetWithContext.Unlock()
	return mock.DeleteTrafficMirrorTargetWithContextFunc(in1, in2, in3...)
}

// DeleteTrafficMirrorTargetWithContextCalls gets all the calls that were made to DeleteTrafficMirrorTargetWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteTrafficMirrorTargetWithContextCalls())
func (mock *ec2ClientMock) DeleteTrafficMirrorTargetWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteTrafficMirrorTargetInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteTrafficMirrorTargetInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteTrafficMirrorTargetWithContext.RLock()
	calls = mock.calls.DeleteTrafficMirrorTargetWithContext
	lockec2ClientMockDeleteTrafficMirrorTargetWithContext.RUnlock()
	return calls
}

// DeleteTransitGateway calls DeleteTransitGatewayFunc.
func (mock *ec2ClientMock) DeleteTransitGateway(in1 *ec2.DeleteTransitGatewayInput) (*ec2.DeleteTransitGatewayOutput, error) {
	if mock.DeleteTransitGatewayFunc == nil {
		panic("ec2ClientMock.DeleteTransitGatewayFunc: method is nil but ec2Client.DeleteTransitGateway was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteTransitGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteTransitGateway.Lock()
	mock.calls.DeleteTransitGateway = append(mock.calls.DeleteTransitGateway, callInfo)
	lockec2ClientMockDeleteTransitGateway.Unlock()
	return mock.DeleteTransitGatewayFunc(in1)
}

// DeleteTransitGatewayCalls gets all the calls that were made to DeleteTransitGateway.
// Check the length with:
//     len(mockedec2Client.DeleteTransitGatewayCalls())
func (mock *ec2ClientMock) DeleteTransitGatewayCalls() []struct {
	In1 *ec2.DeleteTransitGatewayInput
} {
	var calls []struct {
		In1 *ec2.DeleteTransitGatewayInput
	}
	lockec2ClientMockDeleteTransitGateway.RLock()
	calls = mock.calls.DeleteTransitGateway
	lockec2ClientMockDeleteTransitGateway.RUnlock()
	return calls
}

// DeleteTransitGatewayMulticastDomain calls DeleteTransitGatewayMulticastDomainFunc.
func (mock *ec2ClientMock) DeleteTransitGatewayMulticastDomain(in1 *ec2.DeleteTransitGatewayMulticastDomainInput) (*ec2.DeleteTransitGatewayMulticastDomainOutput, error) {
	if mock.DeleteTransitGatewayMulticastDomainFunc == nil {
		panic("ec2ClientMock.DeleteTransitGatewayMulticastDomainFunc: method is nil but ec2Client.DeleteTransitGatewayMulticastDomain was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteTransitGatewayMulticastDomainInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteTransitGatewayMulticastDomain.Lock()
	mock.calls.DeleteTransitGatewayMulticastDomain = append(mock.calls.DeleteTransitGatewayMulticastDomain, callInfo)
	lockec2ClientMockDeleteTransitGatewayMulticastDomain.Unlock()
	return mock.DeleteTransitGatewayMulticastDomainFunc(in1)
}

// DeleteTransitGatewayMulticastDomainCalls gets all the calls that were made to DeleteTransitGatewayMulticastDomain.
// Check the length with:
//     len(mockedec2Client.DeleteTransitGatewayMulticastDomainCalls())
func (mock *ec2ClientMock) DeleteTransitGatewayMulticastDomainCalls() []struct {
	In1 *ec2.DeleteTransitGatewayMulticastDomainInput
} {
	var calls []struct {
		In1 *ec2.DeleteTransitGatewayMulticastDomainInput
	}
	lockec2ClientMockDeleteTransitGatewayMulticastDomain.RLock()
	calls = mock.calls.DeleteTransitGatewayMulticastDomain
	lockec2ClientMockDeleteTransitGatewayMulticastDomain.RUnlock()
	return calls
}

// DeleteTransitGatewayMulticastDomainRequest calls DeleteTransitGatewayMulticastDomainRequestFunc.
func (mock *ec2ClientMock) DeleteTransitGatewayMulticastDomainRequest(in1 *ec2.DeleteTransitGatewayMulticastDomainInput) (*request.Request, *ec2.DeleteTransitGatewayMulticastDomainOutput) {
	if mock.DeleteTransitGatewayMulticastDomainRequestFunc == nil {
		panic("ec2ClientMock.DeleteTransitGatewayMulticastDomainRequestFunc: method is nil but ec2Client.DeleteTransitGatewayMulticastDomainRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteTransitGatewayMulticastDomainInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteTransitGatewayMulticastDomainRequest.Lock()
	mock.calls.DeleteTransitGatewayMulticastDomainRequest = append(mock.calls.DeleteTransitGatewayMulticastDomainRequest, callInfo)
	lockec2ClientMockDeleteTransitGatewayMulticastDomainRequest.Unlock()
	return mock.DeleteTransitGatewayMulticastDomainRequestFunc(in1)
}

// DeleteTransitGatewayMulticastDomainRequestCalls gets all the calls that were made to DeleteTransitGatewayMulticastDomainRequest.
// Check the length with:
//     len(mockedec2Client.DeleteTransitGatewayMulticastDomainRequestCalls())
func (mock *ec2ClientMock) DeleteTransitGatewayMulticastDomainRequestCalls() []struct {
	In1 *ec2.DeleteTransitGatewayMulticastDomainInput
} {
	var calls []struct {
		In1 *ec2.DeleteTransitGatewayMulticastDomainInput
	}
	lockec2ClientMockDeleteTransitGatewayMulticastDomainRequest.RLock()
	calls = mock.calls.DeleteTransitGatewayMulticastDomainRequest
	lockec2ClientMockDeleteTransitGatewayMulticastDomainRequest.RUnlock()
	return calls
}

// DeleteTransitGatewayMulticastDomainWithContext calls DeleteTransitGatewayMulticastDomainWithContextFunc.
func (mock *ec2ClientMock) DeleteTransitGatewayMulticastDomainWithContext(in1 context.Context, in2 *ec2.DeleteTransitGatewayMulticastDomainInput, in3 ...request.Option) (*ec2.DeleteTransitGatewayMulticastDomainOutput, error) {
	if mock.DeleteTransitGatewayMulticastDomainWithContextFunc == nil {
		panic("ec2ClientMock.DeleteTransitGatewayMulticastDomainWithContextFunc: method is nil but ec2Client.DeleteTransitGatewayMulticastDomainWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteTransitGatewayMulticastDomainInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteTransitGatewayMulticastDomainWithContext.Lock()
	mock.calls.DeleteTransitGatewayMulticastDomainWithContext = append(mock.calls.DeleteTransitGatewayMulticastDomainWithContext, callInfo)
	lockec2ClientMockDeleteTransitGatewayMulticastDomainWithContext.Unlock()
	return mock.DeleteTransitGatewayMulticastDomainWithContextFunc(in1, in2, in3...)
}

// DeleteTransitGatewayMulticastDomainWithContextCalls gets all the calls that were made to DeleteTransitGatewayMulticastDomainWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteTransitGatewayMulticastDomainWithContextCalls())
func (mock *ec2ClientMock) DeleteTransitGatewayMulticastDomainWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteTransitGatewayMulticastDomainInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteTransitGatewayMulticastDomainInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteTransitGatewayMulticastDomainWithContext.RLock()
	calls = mock.calls.DeleteTransitGatewayMulticastDomainWithContext
	lockec2ClientMockDeleteTransitGatewayMulticastDomainWithContext.RUnlock()
	return calls
}

// DeleteTransitGatewayPeeringAttachment calls DeleteTransitGatewayPeeringAttachmentFunc.
func (mock *ec2ClientMock) DeleteTransitGatewayPeeringAttachment(in1 *ec2.DeleteTransitGatewayPeeringAttachmentInput) (*ec2.DeleteTransitGatewayPeeringAttachmentOutput, error) {
	if mock.DeleteTransitGatewayPeeringAttachmentFunc == nil {
		panic("ec2ClientMock.DeleteTransitGatewayPeeringAttachmentFunc: method is nil but ec2Client.DeleteTransitGatewayPeeringAttachment was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteTransitGatewayPeeringAttachmentInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteTransitGatewayPeeringAttachment.Lock()
	mock.calls.DeleteTransitGatewayPeeringAttachment = append(mock.calls.DeleteTransitGatewayPeeringAttachment, callInfo)
	lockec2ClientMockDeleteTransitGatewayPeeringAttachment.Unlock()
	return mock.DeleteTransitGatewayPeeringAttachmentFunc(in1)
}

// DeleteTransitGatewayPeeringAttachmentCalls gets all the calls that were made to DeleteTransitGatewayPeeringAttachment.
// Check the length with:
//     len(mockedec2Client.DeleteTransitGatewayPeeringAttachmentCalls())
func (mock *ec2ClientMock) DeleteTransitGatewayPeeringAttachmentCalls() []struct {
	In1 *ec2.DeleteTransitGatewayPeeringAttachmentInput
} {
	var calls []struct {
		In1 *ec2.DeleteTransitGatewayPeeringAttachmentInput
	}
	lockec2ClientMockDeleteTransitGatewayPeeringAttachment.RLock()
	calls = mock.calls.DeleteTransitGatewayPeeringAttachment
	lockec2ClientMockDeleteTransitGatewayPeeringAttachment.RUnlock()
	return calls
}

// DeleteTransitGatewayPeeringAttachmentRequest calls DeleteTransitGatewayPeeringAttachmentRequestFunc.
func (mock *ec2ClientMock) DeleteTransitGatewayPeeringAttachmentRequest(in1 *ec2.DeleteTransitGatewayPeeringAttachmentInput) (*request.Request, *ec2.DeleteTransitGatewayPeeringAttachmentOutput) {
	if mock.DeleteTransitGatewayPeeringAttachmentRequestFunc == nil {
		panic("ec2ClientMock.DeleteTransitGatewayPeeringAttachmentRequestFunc: method is nil but ec2Client.DeleteTransitGatewayPeeringAttachmentRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteTransitGatewayPeeringAttachmentInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteTransitGatewayPeeringAttachmentRequest.Lock()
	mock.calls.DeleteTransitGatewayPeeringAttachmentRequest = append(mock.calls.DeleteTransitGatewayPeeringAttachmentRequest, callInfo)
	lockec2ClientMockDeleteTransitGatewayPeeringAttachmentRequest.Unlock()
	return mock.DeleteTransitGatewayPeeringAttachmentRequestFunc(in1)
}

// DeleteTransitGatewayPeeringAttachmentRequestCalls gets all the calls that were made to DeleteTransitGatewayPeeringAttachmentRequest.
// Check the length with:
//     len(mockedec2Client.DeleteTransitGatewayPeeringAttachmentRequestCalls())
func (mock *ec2ClientMock) DeleteTransitGatewayPeeringAttachmentRequestCalls() []struct {
	In1 *ec2.DeleteTransitGatewayPeeringAttachmentInput
} {
	var calls []struct {
		In1 *ec2.DeleteTransitGatewayPeeringAttachmentInput
	}
	lockec2ClientMockDeleteTransitGatewayPeeringAttachmentRequest.RLock()
	calls = mock.calls.DeleteTransitGatewayPeeringAttachmentRequest
	lockec2ClientMockDeleteTransitGatewayPeeringAttachmentRequest.RUnlock()
	return calls
}

// DeleteTransitGatewayPeeringAttachmentWithContext calls DeleteTransitGatewayPeeringAttachmentWithContextFunc.
func (mock *ec2ClientMock) DeleteTransitGatewayPeeringAttachmentWithContext(in1 context.Context, in2 *ec2.DeleteTransitGatewayPeeringAttachmentInput, in3 ...request.Option) (*ec2.DeleteTransitGatewayPeeringAttachmentOutput, error) {
	if mock.DeleteTransitGatewayPeeringAttachmentWithContextFunc == nil {
		panic("ec2ClientMock.DeleteTransitGatewayPeeringAttachmentWithContextFunc: method is nil but ec2Client.DeleteTransitGatewayPeeringAttachmentWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteTransitGatewayPeeringAttachmentInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteTransitGatewayPeeringAttachmentWithContext.Lock()
	mock.calls.DeleteTransitGatewayPeeringAttachmentWithContext = append(mock.calls.DeleteTransitGatewayPeeringAttachmentWithContext, callInfo)
	lockec2ClientMockDeleteTransitGatewayPeeringAttachmentWithContext.Unlock()
	return mock.DeleteTransitGatewayPeeringAttachmentWithContextFunc(in1, in2, in3...)
}

// DeleteTransitGatewayPeeringAttachmentWithContextCalls gets all the calls that were made to DeleteTransitGatewayPeeringAttachmentWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteTransitGatewayPeeringAttachmentWithContextCalls())
func (mock *ec2ClientMock) DeleteTransitGatewayPeeringAttachmentWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteTransitGatewayPeeringAttachmentInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteTransitGatewayPeeringAttachmentInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteTransitGatewayPeeringAttachmentWithContext.RLock()
	calls = mock.calls.DeleteTransitGatewayPeeringAttachmentWithContext
	lockec2ClientMockDeleteTransitGatewayPeeringAttachmentWithContext.RUnlock()
	return calls
}

// DeleteTransitGatewayRequest calls DeleteTransitGatewayRequestFunc.
func (mock *ec2ClientMock) DeleteTransitGatewayRequest(in1 *ec2.DeleteTransitGatewayInput) (*request.Request, *ec2.DeleteTransitGatewayOutput) {
	if mock.DeleteTransitGatewayRequestFunc == nil {
		panic("ec2ClientMock.DeleteTransitGatewayRequestFunc: method is nil but ec2Client.DeleteTransitGatewayRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteTransitGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteTransitGatewayRequest.Lock()
	mock.calls.DeleteTransitGatewayRequest = append(mock.calls.DeleteTransitGatewayRequest, callInfo)
	lockec2ClientMockDeleteTransitGatewayRequest.Unlock()
	return mock.DeleteTransitGatewayRequestFunc(in1)
}

// DeleteTransitGatewayRequestCalls gets all the calls that were made to DeleteTransitGatewayRequest.
// Check the length with:
//     len(mockedec2Client.DeleteTransitGatewayRequestCalls())
func (mock *ec2ClientMock) DeleteTransitGatewayRequestCalls() []struct {
	In1 *ec2.DeleteTransitGatewayInput
} {
	var calls []struct {
		In1 *ec2.DeleteTransitGatewayInput
	}
	lockec2ClientMockDeleteTransitGatewayRequest.RLock()
	calls = mock.calls.DeleteTransitGatewayRequest
	lockec2ClientMockDeleteTransitGatewayRequest.RUnlock()
	return calls
}

// DeleteTransitGatewayRoute calls DeleteTransitGatewayRouteFunc.
func (mock *ec2ClientMock) DeleteTransitGatewayRoute(in1 *ec2.DeleteTransitGatewayRouteInput) (*ec2.DeleteTransitGatewayRouteOutput, error) {
	if mock.DeleteTransitGatewayRouteFunc == nil {
		panic("ec2ClientMock.DeleteTransitGatewayRouteFunc: method is nil but ec2Client.DeleteTransitGatewayRoute was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteTransitGatewayRouteInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteTransitGatewayRoute.Lock()
	mock.calls.DeleteTransitGatewayRoute = append(mock.calls.DeleteTransitGatewayRoute, callInfo)
	lockec2ClientMockDeleteTransitGatewayRoute.Unlock()
	return mock.DeleteTransitGatewayRouteFunc(in1)
}

// DeleteTransitGatewayRouteCalls gets all the calls that were made to DeleteTransitGatewayRoute.
// Check the length with:
//     len(mockedec2Client.DeleteTransitGatewayRouteCalls())
func (mock *ec2ClientMock) DeleteTransitGatewayRouteCalls() []struct {
	In1 *ec2.DeleteTransitGatewayRouteInput
} {
	var calls []struct {
		In1 *ec2.DeleteTransitGatewayRouteInput
	}
	lockec2ClientMockDeleteTransitGatewayRoute.RLock()
	calls = mock.calls.DeleteTransitGatewayRoute
	lockec2ClientMockDeleteTransitGatewayRoute.RUnlock()
	return calls
}

// DeleteTransitGatewayRouteRequest calls DeleteTransitGatewayRouteRequestFunc.
func (mock *ec2ClientMock) DeleteTransitGatewayRouteRequest(in1 *ec2.DeleteTransitGatewayRouteInput) (*request.Request, *ec2.DeleteTransitGatewayRouteOutput) {
	if mock.DeleteTransitGatewayRouteRequestFunc == nil {
		panic("ec2ClientMock.DeleteTransitGatewayRouteRequestFunc: method is nil but ec2Client.DeleteTransitGatewayRouteRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteTransitGatewayRouteInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteTransitGatewayRouteRequest.Lock()
	mock.calls.DeleteTransitGatewayRouteRequest = append(mock.calls.DeleteTransitGatewayRouteRequest, callInfo)
	lockec2ClientMockDeleteTransitGatewayRouteRequest.Unlock()
	return mock.DeleteTransitGatewayRouteRequestFunc(in1)
}

// DeleteTransitGatewayRouteRequestCalls gets all the calls that were made to DeleteTransitGatewayRouteRequest.
// Check the length with:
//     len(mockedec2Client.DeleteTransitGatewayRouteRequestCalls())
func (mock *ec2ClientMock) DeleteTransitGatewayRouteRequestCalls() []struct {
	In1 *ec2.DeleteTransitGatewayRouteInput
} {
	var calls []struct {
		In1 *ec2.DeleteTransitGatewayRouteInput
	}
	lockec2ClientMockDeleteTransitGatewayRouteRequest.RLock()
	calls = mock.calls.DeleteTransitGatewayRouteRequest
	lockec2ClientMockDeleteTransitGatewayRouteRequest.RUnlock()
	return calls
}

// DeleteTransitGatewayRouteTable calls DeleteTransitGatewayRouteTableFunc.
func (mock *ec2ClientMock) DeleteTransitGatewayRouteTable(in1 *ec2.DeleteTransitGatewayRouteTableInput) (*ec2.DeleteTransitGatewayRouteTableOutput, error) {
	if mock.DeleteTransitGatewayRouteTableFunc == nil {
		panic("ec2ClientMock.DeleteTransitGatewayRouteTableFunc: method is nil but ec2Client.DeleteTransitGatewayRouteTable was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteTransitGatewayRouteTableInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteTransitGatewayRouteTable.Lock()
	mock.calls.DeleteTransitGatewayRouteTable = append(mock.calls.DeleteTransitGatewayRouteTable, callInfo)
	lockec2ClientMockDeleteTransitGatewayRouteTable.Unlock()
	return mock.DeleteTransitGatewayRouteTableFunc(in1)
}

// DeleteTransitGatewayRouteTableCalls gets all the calls that were made to DeleteTransitGatewayRouteTable.
// Check the length with:
//     len(mockedec2Client.DeleteTransitGatewayRouteTableCalls())
func (mock *ec2ClientMock) DeleteTransitGatewayRouteTableCalls() []struct {
	In1 *ec2.DeleteTransitGatewayRouteTableInput
} {
	var calls []struct {
		In1 *ec2.DeleteTransitGatewayRouteTableInput
	}
	lockec2ClientMockDeleteTransitGatewayRouteTable.RLock()
	calls = mock.calls.DeleteTransitGatewayRouteTable
	lockec2ClientMockDeleteTransitGatewayRouteTable.RUnlock()
	return calls
}

// DeleteTransitGatewayRouteTableRequest calls DeleteTransitGatewayRouteTableRequestFunc.
func (mock *ec2ClientMock) DeleteTransitGatewayRouteTableRequest(in1 *ec2.DeleteTransitGatewayRouteTableInput) (*request.Request, *ec2.DeleteTransitGatewayRouteTableOutput) {
	if mock.DeleteTransitGatewayRouteTableRequestFunc == nil {
		panic("ec2ClientMock.DeleteTransitGatewayRouteTableRequestFunc: method is nil but ec2Client.DeleteTransitGatewayRouteTableRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteTransitGatewayRouteTableInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteTransitGatewayRouteTableRequest.Lock()
	mock.calls.DeleteTransitGatewayRouteTableRequest = append(mock.calls.DeleteTransitGatewayRouteTableRequest, callInfo)
	lockec2ClientMockDeleteTransitGatewayRouteTableRequest.Unlock()
	return mock.DeleteTransitGatewayRouteTableRequestFunc(in1)
}

// DeleteTransitGatewayRouteTableRequestCalls gets all the calls that were made to DeleteTransitGatewayRouteTableRequest.
// Check the length with:
//     len(mockedec2Client.DeleteTransitGatewayRouteTableRequestCalls())
func (mock *ec2ClientMock) DeleteTransitGatewayRouteTableRequestCalls() []struct {
	In1 *ec2.DeleteTransitGatewayRouteTableInput
} {
	var calls []struct {
		In1 *ec2.DeleteTransitGatewayRouteTableInput
	}
	lockec2ClientMockDeleteTransitGatewayRouteTableRequest.RLock()
	calls = mock.calls.DeleteTransitGatewayRouteTableRequest
	lockec2ClientMockDeleteTransitGatewayRouteTableRequest.RUnlock()
	return calls
}

// DeleteTransitGatewayRouteTableWithContext calls DeleteTransitGatewayRouteTableWithContextFunc.
func (mock *ec2ClientMock) DeleteTransitGatewayRouteTableWithContext(in1 context.Context, in2 *ec2.DeleteTransitGatewayRouteTableInput, in3 ...request.Option) (*ec2.DeleteTransitGatewayRouteTableOutput, error) {
	if mock.DeleteTransitGatewayRouteTableWithContextFunc == nil {
		panic("ec2ClientMock.DeleteTransitGatewayRouteTableWithContextFunc: method is nil but ec2Client.DeleteTransitGatewayRouteTableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteTransitGatewayRouteTableInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteTransitGatewayRouteTableWithContext.Lock()
	mock.calls.DeleteTransitGatewayRouteTableWithContext = append(mock.calls.DeleteTransitGatewayRouteTableWithContext, callInfo)
	lockec2ClientMockDeleteTransitGatewayRouteTableWithContext.Unlock()
	return mock.DeleteTransitGatewayRouteTableWithContextFunc(in1, in2, in3...)
}

// DeleteTransitGatewayRouteTableWithContextCalls gets all the calls that were made to DeleteTransitGatewayRouteTableWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteTransitGatewayRouteTableWithContextCalls())
func (mock *ec2ClientMock) DeleteTransitGatewayRouteTableWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteTransitGatewayRouteTableInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteTransitGatewayRouteTableInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteTransitGatewayRouteTableWithContext.RLock()
	calls = mock.calls.DeleteTransitGatewayRouteTableWithContext
	lockec2ClientMockDeleteTransitGatewayRouteTableWithContext.RUnlock()
	return calls
}

// DeleteTransitGatewayRouteWithContext calls DeleteTransitGatewayRouteWithContextFunc.
func (mock *ec2ClientMock) DeleteTransitGatewayRouteWithContext(in1 context.Context, in2 *ec2.DeleteTransitGatewayRouteInput, in3 ...request.Option) (*ec2.DeleteTransitGatewayRouteOutput, error) {
	if mock.DeleteTransitGatewayRouteWithContextFunc == nil {
		panic("ec2ClientMock.DeleteTransitGatewayRouteWithContextFunc: method is nil but ec2Client.DeleteTransitGatewayRouteWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteTransitGatewayRouteInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteTransitGatewayRouteWithContext.Lock()
	mock.calls.DeleteTransitGatewayRouteWithContext = append(mock.calls.DeleteTransitGatewayRouteWithContext, callInfo)
	lockec2ClientMockDeleteTransitGatewayRouteWithContext.Unlock()
	return mock.DeleteTransitGatewayRouteWithContextFunc(in1, in2, in3...)
}

// DeleteTransitGatewayRouteWithContextCalls gets all the calls that were made to DeleteTransitGatewayRouteWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteTransitGatewayRouteWithContextCalls())
func (mock *ec2ClientMock) DeleteTransitGatewayRouteWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteTransitGatewayRouteInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteTransitGatewayRouteInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteTransitGatewayRouteWithContext.RLock()
	calls = mock.calls.DeleteTransitGatewayRouteWithContext
	lockec2ClientMockDeleteTransitGatewayRouteWithContext.RUnlock()
	return calls
}

// DeleteTransitGatewayVpcAttachment calls DeleteTransitGatewayVpcAttachmentFunc.
func (mock *ec2ClientMock) DeleteTransitGatewayVpcAttachment(in1 *ec2.DeleteTransitGatewayVpcAttachmentInput) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error) {
	if mock.DeleteTransitGatewayVpcAttachmentFunc == nil {
		panic("ec2ClientMock.DeleteTransitGatewayVpcAttachmentFunc: method is nil but ec2Client.DeleteTransitGatewayVpcAttachment was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteTransitGatewayVpcAttachmentInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteTransitGatewayVpcAttachment.Lock()
	mock.calls.DeleteTransitGatewayVpcAttachment = append(mock.calls.DeleteTransitGatewayVpcAttachment, callInfo)
	lockec2ClientMockDeleteTransitGatewayVpcAttachment.Unlock()
	return mock.DeleteTransitGatewayVpcAttachmentFunc(in1)
}

// DeleteTransitGatewayVpcAttachmentCalls gets all the calls that were made to DeleteTransitGatewayVpcAttachment.
// Check the length with:
//     len(mockedec2Client.DeleteTransitGatewayVpcAttachmentCalls())
func (mock *ec2ClientMock) DeleteTransitGatewayVpcAttachmentCalls() []struct {
	In1 *ec2.DeleteTransitGatewayVpcAttachmentInput
} {
	var calls []struct {
		In1 *ec2.DeleteTransitGatewayVpcAttachmentInput
	}
	lockec2ClientMockDeleteTransitGatewayVpcAttachment.RLock()
	calls = mock.calls.DeleteTransitGatewayVpcAttachment
	lockec2ClientMockDeleteTransitGatewayVpcAttachment.RUnlock()
	return calls
}

// DeleteTransitGatewayVpcAttachmentRequest calls DeleteTransitGatewayVpcAttachmentRequestFunc.
func (mock *ec2ClientMock) DeleteTransitGatewayVpcAttachmentRequest(in1 *ec2.DeleteTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.DeleteTransitGatewayVpcAttachmentOutput) {
	if mock.DeleteTransitGatewayVpcAttachmentRequestFunc == nil {
		panic("ec2ClientMock.DeleteTransitGatewayVpcAttachmentRequestFunc: method is nil but ec2Client.DeleteTransitGatewayVpcAttachmentRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteTransitGatewayVpcAttachmentInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteTransitGatewayVpcAttachmentRequest.Lock()
	mock.calls.DeleteTransitGatewayVpcAttachmentRequest = append(mock.calls.DeleteTransitGatewayVpcAttachmentRequest, callInfo)
	lockec2ClientMockDeleteTransitGatewayVpcAttachmentRequest.Unlock()
	return mock.DeleteTransitGatewayVpcAttachmentRequestFunc(in1)
}

// DeleteTransitGatewayVpcAttachmentRequestCalls gets all the calls that were made to DeleteTransitGatewayVpcAttachmentRequest.
// Check the length with:
//     len(mockedec2Client.DeleteTransitGatewayVpcAttachmentRequestCalls())
func (mock *ec2ClientMock) DeleteTransitGatewayVpcAttachmentRequestCalls() []struct {
	In1 *ec2.DeleteTransitGatewayVpcAttachmentInput
} {
	var calls []struct {
		In1 *ec2.DeleteTransitGatewayVpcAttachmentInput
	}
	lockec2ClientMockDeleteTransitGatewayVpcAttachmentRequest.RLock()
	calls = mock.calls.DeleteTransitGatewayVpcAttachmentRequest
	lockec2ClientMockDeleteTransitGatewayVpcAttachmentRequest.RUnlock()
	return calls
}

// DeleteTransitGatewayVpcAttachmentWithContext calls DeleteTransitGatewayVpcAttachmentWithContextFunc.
func (mock *ec2ClientMock) DeleteTransitGatewayVpcAttachmentWithContext(in1 context.Context, in2 *ec2.DeleteTransitGatewayVpcAttachmentInput, in3 ...request.Option) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error) {
	if mock.DeleteTransitGatewayVpcAttachmentWithContextFunc == nil {
		panic("ec2ClientMock.DeleteTransitGatewayVpcAttachmentWithContextFunc: method is nil but ec2Client.DeleteTransitGatewayVpcAttachmentWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteTransitGatewayVpcAttachmentInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteTransitGatewayVpcAttachmentWithContext.Lock()
	mock.calls.DeleteTransitGatewayVpcAttachmentWithContext = append(mock.calls.DeleteTransitGatewayVpcAttachmentWithContext, callInfo)
	lockec2ClientMockDeleteTransitGatewayVpcAttachmentWithContext.Unlock()
	return mock.DeleteTransitGatewayVpcAttachmentWithContextFunc(in1, in2, in3...)
}

// DeleteTransitGatewayVpcAttachmentWithContextCalls gets all the calls that were made to DeleteTransitGatewayVpcAttachmentWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteTransitGatewayVpcAttachmentWithContextCalls())
func (mock *ec2ClientMock) DeleteTransitGatewayVpcAttachmentWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteTransitGatewayVpcAttachmentInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteTransitGatewayVpcAttachmentInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteTransitGatewayVpcAttachmentWithContext.RLock()
	calls = mock.calls.DeleteTransitGatewayVpcAttachmentWithContext
	lockec2ClientMockDeleteTransitGatewayVpcAttachmentWithContext.RUnlock()
	return calls
}

// DeleteTransitGatewayWithContext calls DeleteTransitGatewayWithContextFunc.
func (mock *ec2ClientMock) DeleteTransitGatewayWithContext(in1 context.Context, in2 *ec2.DeleteTransitGatewayInput, in3 ...request.Option) (*ec2.DeleteTransitGatewayOutput, error) {
	if mock.DeleteTransitGatewayWithContextFunc == nil {
		panic("ec2ClientMock.DeleteTransitGatewayWithContextFunc: method is nil but ec2Client.DeleteTransitGatewayWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteTransitGatewayInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteTransitGatewayWithContext.Lock()
	mock.calls.DeleteTransitGatewayWithContext = append(mock.calls.DeleteTransitGatewayWithContext, callInfo)
	lockec2ClientMockDeleteTransitGatewayWithContext.Unlock()
	return mock.DeleteTransitGatewayWithContextFunc(in1, in2, in3...)
}

// DeleteTransitGatewayWithContextCalls gets all the calls that were made to DeleteTransitGatewayWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteTransitGatewayWithContextCalls())
func (mock *ec2ClientMock) DeleteTransitGatewayWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteTransitGatewayInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteTransitGatewayInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteTransitGatewayWithContext.RLock()
	calls = mock.calls.DeleteTransitGatewayWithContext
	lockec2ClientMockDeleteTransitGatewayWithContext.RUnlock()
	return calls
}

// DeleteVolume calls DeleteVolumeFunc.
func (mock *ec2ClientMock) DeleteVolume(in1 *ec2.DeleteVolumeInput) (*ec2.DeleteVolumeOutput, error) {
	if mock.DeleteVolumeFunc == nil {
		panic("ec2ClientMock.DeleteVolumeFunc: method is nil but ec2Client.DeleteVolume was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteVolumeInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteVolume.Lock()
	mock.calls.DeleteVolume = append(mock.calls.DeleteVolume, callInfo)
	lockec2ClientMockDeleteVolume.Unlock()
	return mock.DeleteVolumeFunc(in1)
}

// DeleteVolumeCalls gets all the calls that were made to DeleteVolume.
// Check the length with:
//     len(mockedec2Client.DeleteVolumeCalls())
func (mock *ec2ClientMock) DeleteVolumeCalls() []struct {
	In1 *ec2.DeleteVolumeInput
} {
	var calls []struct {
		In1 *ec2.DeleteVolumeInput
	}
	lockec2ClientMockDeleteVolume.RLock()
	calls = mock.calls.DeleteVolume
	lockec2ClientMockDeleteVolume.RUnlock()
	return calls
}

// DeleteVolumeRequest calls DeleteVolumeRequestFunc.
func (mock *ec2ClientMock) DeleteVolumeRequest(in1 *ec2.DeleteVolumeInput) (*request.Request, *ec2.DeleteVolumeOutput) {
	if mock.DeleteVolumeRequestFunc == nil {
		panic("ec2ClientMock.DeleteVolumeRequestFunc: method is nil but ec2Client.DeleteVolumeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteVolumeInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteVolumeRequest.Lock()
	mock.calls.DeleteVolumeRequest = append(mock.calls.DeleteVolumeRequest, callInfo)
	lockec2ClientMockDeleteVolumeRequest.Unlock()
	return mock.DeleteVolumeRequestFunc(in1)
}

// DeleteVolumeRequestCalls gets all the calls that were made to DeleteVolumeRequest.
// Check the length with:
//     len(mockedec2Client.DeleteVolumeRequestCalls())
func (mock *ec2ClientMock) DeleteVolumeRequestCalls() []struct {
	In1 *ec2.DeleteVolumeInput
} {
	var calls []struct {
		In1 *ec2.DeleteVolumeInput
	}
	lockec2ClientMockDeleteVolumeRequest.RLock()
	calls = mock.calls.DeleteVolumeRequest
	lockec2ClientMockDeleteVolumeRequest.RUnlock()
	return calls
}

// DeleteVolumeWithContext calls DeleteVolumeWithContextFunc.
func (mock *ec2ClientMock) DeleteVolumeWithContext(in1 context.Context, in2 *ec2.DeleteVolumeInput, in3 ...request.Option) (*ec2.DeleteVolumeOutput, error) {
	if mock.DeleteVolumeWithContextFunc == nil {
		panic("ec2ClientMock.DeleteVolumeWithContextFunc: method is nil but ec2Client.DeleteVolumeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteVolumeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteVolumeWithContext.Lock()
	mock.calls.DeleteVolumeWithContext = append(mock.calls.DeleteVolumeWithContext, callInfo)
	lockec2ClientMockDeleteVolumeWithContext.Unlock()
	return mock.DeleteVolumeWithContextFunc(in1, in2, in3...)
}

// DeleteVolumeWithContextCalls gets all the calls that were made to DeleteVolumeWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteVolumeWithContextCalls())
func (mock *ec2ClientMock) DeleteVolumeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteVolumeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteVolumeInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteVolumeWithContext.RLock()
	calls = mock.calls.DeleteVolumeWithContext
	lockec2ClientMockDeleteVolumeWithContext.RUnlock()
	return calls
}

// DeleteVpc calls DeleteVpcFunc.
func (mock *ec2ClientMock) DeleteVpc(in1 *ec2.DeleteVpcInput) (*ec2.DeleteVpcOutput, error) {
	if mock.DeleteVpcFunc == nil {
		panic("ec2ClientMock.DeleteVpcFunc: method is nil but ec2Client.DeleteVpc was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteVpcInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteVpc.Lock()
	mock.calls.DeleteVpc = append(mock.calls.DeleteVpc, callInfo)
	lockec2ClientMockDeleteVpc.Unlock()
	return mock.DeleteVpcFunc(in1)
}

// DeleteVpcCalls gets all the calls that were made to DeleteVpc.
// Check the length with:
//     len(mockedec2Client.DeleteVpcCalls())
func (mock *ec2ClientMock) DeleteVpcCalls() []struct {
	In1 *ec2.DeleteVpcInput
} {
	var calls []struct {
		In1 *ec2.DeleteVpcInput
	}
	lockec2ClientMockDeleteVpc.RLock()
	calls = mock.calls.DeleteVpc
	lockec2ClientMockDeleteVpc.RUnlock()
	return calls
}

// DeleteVpcEndpointConnectionNotifications calls DeleteVpcEndpointConnectionNotificationsFunc.
func (mock *ec2ClientMock) DeleteVpcEndpointConnectionNotifications(in1 *ec2.DeleteVpcEndpointConnectionNotificationsInput) (*ec2.DeleteVpcEndpointConnectionNotificationsOutput, error) {
	if mock.DeleteVpcEndpointConnectionNotificationsFunc == nil {
		panic("ec2ClientMock.DeleteVpcEndpointConnectionNotificationsFunc: method is nil but ec2Client.DeleteVpcEndpointConnectionNotifications was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteVpcEndpointConnectionNotificationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteVpcEndpointConnectionNotifications.Lock()
	mock.calls.DeleteVpcEndpointConnectionNotifications = append(mock.calls.DeleteVpcEndpointConnectionNotifications, callInfo)
	lockec2ClientMockDeleteVpcEndpointConnectionNotifications.Unlock()
	return mock.DeleteVpcEndpointConnectionNotificationsFunc(in1)
}

// DeleteVpcEndpointConnectionNotificationsCalls gets all the calls that were made to DeleteVpcEndpointConnectionNotifications.
// Check the length with:
//     len(mockedec2Client.DeleteVpcEndpointConnectionNotificationsCalls())
func (mock *ec2ClientMock) DeleteVpcEndpointConnectionNotificationsCalls() []struct {
	In1 *ec2.DeleteVpcEndpointConnectionNotificationsInput
} {
	var calls []struct {
		In1 *ec2.DeleteVpcEndpointConnectionNotificationsInput
	}
	lockec2ClientMockDeleteVpcEndpointConnectionNotifications.RLock()
	calls = mock.calls.DeleteVpcEndpointConnectionNotifications
	lockec2ClientMockDeleteVpcEndpointConnectionNotifications.RUnlock()
	return calls
}

// DeleteVpcEndpointConnectionNotificationsRequest calls DeleteVpcEndpointConnectionNotificationsRequestFunc.
func (mock *ec2ClientMock) DeleteVpcEndpointConnectionNotificationsRequest(in1 *ec2.DeleteVpcEndpointConnectionNotificationsInput) (*request.Request, *ec2.DeleteVpcEndpointConnectionNotificationsOutput) {
	if mock.DeleteVpcEndpointConnectionNotificationsRequestFunc == nil {
		panic("ec2ClientMock.DeleteVpcEndpointConnectionNotificationsRequestFunc: method is nil but ec2Client.DeleteVpcEndpointConnectionNotificationsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteVpcEndpointConnectionNotificationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteVpcEndpointConnectionNotificationsRequest.Lock()
	mock.calls.DeleteVpcEndpointConnectionNotificationsRequest = append(mock.calls.DeleteVpcEndpointConnectionNotificationsRequest, callInfo)
	lockec2ClientMockDeleteVpcEndpointConnectionNotificationsRequest.Unlock()
	return mock.DeleteVpcEndpointConnectionNotificationsRequestFunc(in1)
}

// DeleteVpcEndpointConnectionNotificationsRequestCalls gets all the calls that were made to DeleteVpcEndpointConnectionNotificationsRequest.
// Check the length with:
//     len(mockedec2Client.DeleteVpcEndpointConnectionNotificationsRequestCalls())
func (mock *ec2ClientMock) DeleteVpcEndpointConnectionNotificationsRequestCalls() []struct {
	In1 *ec2.DeleteVpcEndpointConnectionNotificationsInput
} {
	var calls []struct {
		In1 *ec2.DeleteVpcEndpointConnectionNotificationsInput
	}
	lockec2ClientMockDeleteVpcEndpointConnectionNotificationsRequest.RLock()
	calls = mock.calls.DeleteVpcEndpointConnectionNotificationsRequest
	lockec2ClientMockDeleteVpcEndpointConnectionNotificationsRequest.RUnlock()
	return calls
}

// DeleteVpcEndpointConnectionNotificationsWithContext calls DeleteVpcEndpointConnectionNotificationsWithContextFunc.
func (mock *ec2ClientMock) DeleteVpcEndpointConnectionNotificationsWithContext(in1 context.Context, in2 *ec2.DeleteVpcEndpointConnectionNotificationsInput, in3 ...request.Option) (*ec2.DeleteVpcEndpointConnectionNotificationsOutput, error) {
	if mock.DeleteVpcEndpointConnectionNotificationsWithContextFunc == nil {
		panic("ec2ClientMock.DeleteVpcEndpointConnectionNotificationsWithContextFunc: method is nil but ec2Client.DeleteVpcEndpointConnectionNotificationsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteVpcEndpointConnectionNotificationsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteVpcEndpointConnectionNotificationsWithContext.Lock()
	mock.calls.DeleteVpcEndpointConnectionNotificationsWithContext = append(mock.calls.DeleteVpcEndpointConnectionNotificationsWithContext, callInfo)
	lockec2ClientMockDeleteVpcEndpointConnectionNotificationsWithContext.Unlock()
	return mock.DeleteVpcEndpointConnectionNotificationsWithContextFunc(in1, in2, in3...)
}

// DeleteVpcEndpointConnectionNotificationsWithContextCalls gets all the calls that were made to DeleteVpcEndpointConnectionNotificationsWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteVpcEndpointConnectionNotificationsWithContextCalls())
func (mock *ec2ClientMock) DeleteVpcEndpointConnectionNotificationsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteVpcEndpointConnectionNotificationsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteVpcEndpointConnectionNotificationsInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteVpcEndpointConnectionNotificationsWithContext.RLock()
	calls = mock.calls.DeleteVpcEndpointConnectionNotificationsWithContext
	lockec2ClientMockDeleteVpcEndpointConnectionNotificationsWithContext.RUnlock()
	return calls
}

// DeleteVpcEndpointServiceConfigurations calls DeleteVpcEndpointServiceConfigurationsFunc.
func (mock *ec2ClientMock) DeleteVpcEndpointServiceConfigurations(in1 *ec2.DeleteVpcEndpointServiceConfigurationsInput) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error) {
	if mock.DeleteVpcEndpointServiceConfigurationsFunc == nil {
		panic("ec2ClientMock.DeleteVpcEndpointServiceConfigurationsFunc: method is nil but ec2Client.DeleteVpcEndpointServiceConfigurations was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteVpcEndpointServiceConfigurationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteVpcEndpointServiceConfigurations.Lock()
	mock.calls.DeleteVpcEndpointServiceConfigurations = append(mock.calls.DeleteVpcEndpointServiceConfigurations, callInfo)
	lockec2ClientMockDeleteVpcEndpointServiceConfigurations.Unlock()
	return mock.DeleteVpcEndpointServiceConfigurationsFunc(in1)
}

// DeleteVpcEndpointServiceConfigurationsCalls gets all the calls that were made to DeleteVpcEndpointServiceConfigurations.
// Check the length with:
//     len(mockedec2Client.DeleteVpcEndpointServiceConfigurationsCalls())
func (mock *ec2ClientMock) DeleteVpcEndpointServiceConfigurationsCalls() []struct {
	In1 *ec2.DeleteVpcEndpointServiceConfigurationsInput
} {
	var calls []struct {
		In1 *ec2.DeleteVpcEndpointServiceConfigurationsInput
	}
	lockec2ClientMockDeleteVpcEndpointServiceConfigurations.RLock()
	calls = mock.calls.DeleteVpcEndpointServiceConfigurations
	lockec2ClientMockDeleteVpcEndpointServiceConfigurations.RUnlock()
	return calls
}

// DeleteVpcEndpointServiceConfigurationsRequest calls DeleteVpcEndpointServiceConfigurationsRequestFunc.
func (mock *ec2ClientMock) DeleteVpcEndpointServiceConfigurationsRequest(in1 *ec2.DeleteVpcEndpointServiceConfigurationsInput) (*request.Request, *ec2.DeleteVpcEndpointServiceConfigurationsOutput) {
	if mock.DeleteVpcEndpointServiceConfigurationsRequestFunc == nil {
		panic("ec2ClientMock.DeleteVpcEndpointServiceConfigurationsRequestFunc: method is nil but ec2Client.DeleteVpcEndpointServiceConfigurationsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteVpcEndpointServiceConfigurationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteVpcEndpointServiceConfigurationsRequest.Lock()
	mock.calls.DeleteVpcEndpointServiceConfigurationsRequest = append(mock.calls.DeleteVpcEndpointServiceConfigurationsRequest, callInfo)
	lockec2ClientMockDeleteVpcEndpointServiceConfigurationsRequest.Unlock()
	return mock.DeleteVpcEndpointServiceConfigurationsRequestFunc(in1)
}

// DeleteVpcEndpointServiceConfigurationsRequestCalls gets all the calls that were made to DeleteVpcEndpointServiceConfigurationsRequest.
// Check the length with:
//     len(mockedec2Client.DeleteVpcEndpointServiceConfigurationsRequestCalls())
func (mock *ec2ClientMock) DeleteVpcEndpointServiceConfigurationsRequestCalls() []struct {
	In1 *ec2.DeleteVpcEndpointServiceConfigurationsInput
} {
	var calls []struct {
		In1 *ec2.DeleteVpcEndpointServiceConfigurationsInput
	}
	lockec2ClientMockDeleteVpcEndpointServiceConfigurationsRequest.RLock()
	calls = mock.calls.DeleteVpcEndpointServiceConfigurationsRequest
	lockec2ClientMockDeleteVpcEndpointServiceConfigurationsRequest.RUnlock()
	return calls
}

// DeleteVpcEndpointServiceConfigurationsWithContext calls DeleteVpcEndpointServiceConfigurationsWithContextFunc.
func (mock *ec2ClientMock) DeleteVpcEndpointServiceConfigurationsWithContext(in1 context.Context, in2 *ec2.DeleteVpcEndpointServiceConfigurationsInput, in3 ...request.Option) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error) {
	if mock.DeleteVpcEndpointServiceConfigurationsWithContextFunc == nil {
		panic("ec2ClientMock.DeleteVpcEndpointServiceConfigurationsWithContextFunc: method is nil but ec2Client.DeleteVpcEndpointServiceConfigurationsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteVpcEndpointServiceConfigurationsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteVpcEndpointServiceConfigurationsWithContext.Lock()
	mock.calls.DeleteVpcEndpointServiceConfigurationsWithContext = append(mock.calls.DeleteVpcEndpointServiceConfigurationsWithContext, callInfo)
	lockec2ClientMockDeleteVpcEndpointServiceConfigurationsWithContext.Unlock()
	return mock.DeleteVpcEndpointServiceConfigurationsWithContextFunc(in1, in2, in3...)
}

// DeleteVpcEndpointServiceConfigurationsWithContextCalls gets all the calls that were made to DeleteVpcEndpointServiceConfigurationsWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteVpcEndpointServiceConfigurationsWithContextCalls())
func (mock *ec2ClientMock) DeleteVpcEndpointServiceConfigurationsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteVpcEndpointServiceConfigurationsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteVpcEndpointServiceConfigurationsInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteVpcEndpointServiceConfigurationsWithContext.RLock()
	calls = mock.calls.DeleteVpcEndpointServiceConfigurationsWithContext
	lockec2ClientMockDeleteVpcEndpointServiceConfigurationsWithContext.RUnlock()
	return calls
}

// DeleteVpcEndpoints calls DeleteVpcEndpointsFunc.
func (mock *ec2ClientMock) DeleteVpcEndpoints(in1 *ec2.DeleteVpcEndpointsInput) (*ec2.DeleteVpcEndpointsOutput, error) {
	if mock.DeleteVpcEndpointsFunc == nil {
		panic("ec2ClientMock.DeleteVpcEndpointsFunc: method is nil but ec2Client.DeleteVpcEndpoints was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteVpcEndpointsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteVpcEndpoints.Lock()
	mock.calls.DeleteVpcEndpoints = append(mock.calls.DeleteVpcEndpoints, callInfo)
	lockec2ClientMockDeleteVpcEndpoints.Unlock()
	return mock.DeleteVpcEndpointsFunc(in1)
}

// DeleteVpcEndpointsCalls gets all the calls that were made to DeleteVpcEndpoints.
// Check the length with:
//     len(mockedec2Client.DeleteVpcEndpointsCalls())
func (mock *ec2ClientMock) DeleteVpcEndpointsCalls() []struct {
	In1 *ec2.DeleteVpcEndpointsInput
} {
	var calls []struct {
		In1 *ec2.DeleteVpcEndpointsInput
	}
	lockec2ClientMockDeleteVpcEndpoints.RLock()
	calls = mock.calls.DeleteVpcEndpoints
	lockec2ClientMockDeleteVpcEndpoints.RUnlock()
	return calls
}

// DeleteVpcEndpointsRequest calls DeleteVpcEndpointsRequestFunc.
func (mock *ec2ClientMock) DeleteVpcEndpointsRequest(in1 *ec2.DeleteVpcEndpointsInput) (*request.Request, *ec2.DeleteVpcEndpointsOutput) {
	if mock.DeleteVpcEndpointsRequestFunc == nil {
		panic("ec2ClientMock.DeleteVpcEndpointsRequestFunc: method is nil but ec2Client.DeleteVpcEndpointsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteVpcEndpointsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteVpcEndpointsRequest.Lock()
	mock.calls.DeleteVpcEndpointsRequest = append(mock.calls.DeleteVpcEndpointsRequest, callInfo)
	lockec2ClientMockDeleteVpcEndpointsRequest.Unlock()
	return mock.DeleteVpcEndpointsRequestFunc(in1)
}

// DeleteVpcEndpointsRequestCalls gets all the calls that were made to DeleteVpcEndpointsRequest.
// Check the length with:
//     len(mockedec2Client.DeleteVpcEndpointsRequestCalls())
func (mock *ec2ClientMock) DeleteVpcEndpointsRequestCalls() []struct {
	In1 *ec2.DeleteVpcEndpointsInput
} {
	var calls []struct {
		In1 *ec2.DeleteVpcEndpointsInput
	}
	lockec2ClientMockDeleteVpcEndpointsRequest.RLock()
	calls = mock.calls.DeleteVpcEndpointsRequest
	lockec2ClientMockDeleteVpcEndpointsRequest.RUnlock()
	return calls
}

// DeleteVpcEndpointsWithContext calls DeleteVpcEndpointsWithContextFunc.
func (mock *ec2ClientMock) DeleteVpcEndpointsWithContext(in1 context.Context, in2 *ec2.DeleteVpcEndpointsInput, in3 ...request.Option) (*ec2.DeleteVpcEndpointsOutput, error) {
	if mock.DeleteVpcEndpointsWithContextFunc == nil {
		panic("ec2ClientMock.DeleteVpcEndpointsWithContextFunc: method is nil but ec2Client.DeleteVpcEndpointsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteVpcEndpointsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteVpcEndpointsWithContext.Lock()
	mock.calls.DeleteVpcEndpointsWithContext = append(mock.calls.DeleteVpcEndpointsWithContext, callInfo)
	lockec2ClientMockDeleteVpcEndpointsWithContext.Unlock()
	return mock.DeleteVpcEndpointsWithContextFunc(in1, in2, in3...)
}

// DeleteVpcEndpointsWithContextCalls gets all the calls that were made to DeleteVpcEndpointsWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteVpcEndpointsWithContextCalls())
func (mock *ec2ClientMock) DeleteVpcEndpointsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteVpcEndpointsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteVpcEndpointsInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteVpcEndpointsWithContext.RLock()
	calls = mock.calls.DeleteVpcEndpointsWithContext
	lockec2ClientMockDeleteVpcEndpointsWithContext.RUnlock()
	return calls
}

// DeleteVpcPeeringConnection calls DeleteVpcPeeringConnectionFunc.
func (mock *ec2ClientMock) DeleteVpcPeeringConnection(in1 *ec2.DeleteVpcPeeringConnectionInput) (*ec2.DeleteVpcPeeringConnectionOutput, error) {
	if mock.DeleteVpcPeeringConnectionFunc == nil {
		panic("ec2ClientMock.DeleteVpcPeeringConnectionFunc: method is nil but ec2Client.DeleteVpcPeeringConnection was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteVpcPeeringConnectionInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteVpcPeeringConnection.Lock()
	mock.calls.DeleteVpcPeeringConnection = append(mock.calls.DeleteVpcPeeringConnection, callInfo)
	lockec2ClientMockDeleteVpcPeeringConnection.Unlock()
	return mock.DeleteVpcPeeringConnectionFunc(in1)
}

// DeleteVpcPeeringConnectionCalls gets all the calls that were made to DeleteVpcPeeringConnection.
// Check the length with:
//     len(mockedec2Client.DeleteVpcPeeringConnectionCalls())
func (mock *ec2ClientMock) DeleteVpcPeeringConnectionCalls() []struct {
	In1 *ec2.DeleteVpcPeeringConnectionInput
} {
	var calls []struct {
		In1 *ec2.DeleteVpcPeeringConnectionInput
	}
	lockec2ClientMockDeleteVpcPeeringConnection.RLock()
	calls = mock.calls.DeleteVpcPeeringConnection
	lockec2ClientMockDeleteVpcPeeringConnection.RUnlock()
	return calls
}

// DeleteVpcPeeringConnectionRequest calls DeleteVpcPeeringConnectionRequestFunc.
func (mock *ec2ClientMock) DeleteVpcPeeringConnectionRequest(in1 *ec2.DeleteVpcPeeringConnectionInput) (*request.Request, *ec2.DeleteVpcPeeringConnectionOutput) {
	if mock.DeleteVpcPeeringConnectionRequestFunc == nil {
		panic("ec2ClientMock.DeleteVpcPeeringConnectionRequestFunc: method is nil but ec2Client.DeleteVpcPeeringConnectionRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteVpcPeeringConnectionInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteVpcPeeringConnectionRequest.Lock()
	mock.calls.DeleteVpcPeeringConnectionRequest = append(mock.calls.DeleteVpcPeeringConnectionRequest, callInfo)
	lockec2ClientMockDeleteVpcPeeringConnectionRequest.Unlock()
	return mock.DeleteVpcPeeringConnectionRequestFunc(in1)
}

// DeleteVpcPeeringConnectionRequestCalls gets all the calls that were made to DeleteVpcPeeringConnectionRequest.
// Check the length with:
//     len(mockedec2Client.DeleteVpcPeeringConnectionRequestCalls())
func (mock *ec2ClientMock) DeleteVpcPeeringConnectionRequestCalls() []struct {
	In1 *ec2.DeleteVpcPeeringConnectionInput
} {
	var calls []struct {
		In1 *ec2.DeleteVpcPeeringConnectionInput
	}
	lockec2ClientMockDeleteVpcPeeringConnectionRequest.RLock()
	calls = mock.calls.DeleteVpcPeeringConnectionRequest
	lockec2ClientMockDeleteVpcPeeringConnectionRequest.RUnlock()
	return calls
}

// DeleteVpcPeeringConnectionWithContext calls DeleteVpcPeeringConnectionWithContextFunc.
func (mock *ec2ClientMock) DeleteVpcPeeringConnectionWithContext(in1 context.Context, in2 *ec2.DeleteVpcPeeringConnectionInput, in3 ...request.Option) (*ec2.DeleteVpcPeeringConnectionOutput, error) {
	if mock.DeleteVpcPeeringConnectionWithContextFunc == nil {
		panic("ec2ClientMock.DeleteVpcPeeringConnectionWithContextFunc: method is nil but ec2Client.DeleteVpcPeeringConnectionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteVpcPeeringConnectionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteVpcPeeringConnectionWithContext.Lock()
	mock.calls.DeleteVpcPeeringConnectionWithContext = append(mock.calls.DeleteVpcPeeringConnectionWithContext, callInfo)
	lockec2ClientMockDeleteVpcPeeringConnectionWithContext.Unlock()
	return mock.DeleteVpcPeeringConnectionWithContextFunc(in1, in2, in3...)
}

// DeleteVpcPeeringConnectionWithContextCalls gets all the calls that were made to DeleteVpcPeeringConnectionWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteVpcPeeringConnectionWithContextCalls())
func (mock *ec2ClientMock) DeleteVpcPeeringConnectionWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteVpcPeeringConnectionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteVpcPeeringConnectionInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteVpcPeeringConnectionWithContext.RLock()
	calls = mock.calls.DeleteVpcPeeringConnectionWithContext
	lockec2ClientMockDeleteVpcPeeringConnectionWithContext.RUnlock()
	return calls
}

// DeleteVpcRequest calls DeleteVpcRequestFunc.
func (mock *ec2ClientMock) DeleteVpcRequest(in1 *ec2.DeleteVpcInput) (*request.Request, *ec2.DeleteVpcOutput) {
	if mock.DeleteVpcRequestFunc == nil {
		panic("ec2ClientMock.DeleteVpcRequestFunc: method is nil but ec2Client.DeleteVpcRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteVpcInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteVpcRequest.Lock()
	mock.calls.DeleteVpcRequest = append(mock.calls.DeleteVpcRequest, callInfo)
	lockec2ClientMockDeleteVpcRequest.Unlock()
	return mock.DeleteVpcRequestFunc(in1)
}

// DeleteVpcRequestCalls gets all the calls that were made to DeleteVpcRequest.
// Check the length with:
//     len(mockedec2Client.DeleteVpcRequestCalls())
func (mock *ec2ClientMock) DeleteVpcRequestCalls() []struct {
	In1 *ec2.DeleteVpcInput
} {
	var calls []struct {
		In1 *ec2.DeleteVpcInput
	}
	lockec2ClientMockDeleteVpcRequest.RLock()
	calls = mock.calls.DeleteVpcRequest
	lockec2ClientMockDeleteVpcRequest.RUnlock()
	return calls
}

// DeleteVpcWithContext calls DeleteVpcWithContextFunc.
func (mock *ec2ClientMock) DeleteVpcWithContext(in1 context.Context, in2 *ec2.DeleteVpcInput, in3 ...request.Option) (*ec2.DeleteVpcOutput, error) {
	if mock.DeleteVpcWithContextFunc == nil {
		panic("ec2ClientMock.DeleteVpcWithContextFunc: method is nil but ec2Client.DeleteVpcWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteVpcInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteVpcWithContext.Lock()
	mock.calls.DeleteVpcWithContext = append(mock.calls.DeleteVpcWithContext, callInfo)
	lockec2ClientMockDeleteVpcWithContext.Unlock()
	return mock.DeleteVpcWithContextFunc(in1, in2, in3...)
}

// DeleteVpcWithContextCalls gets all the calls that were made to DeleteVpcWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteVpcWithContextCalls())
func (mock *ec2ClientMock) DeleteVpcWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteVpcInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteVpcInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteVpcWithContext.RLock()
	calls = mock.calls.DeleteVpcWithContext
	lockec2ClientMockDeleteVpcWithContext.RUnlock()
	return calls
}

// DeleteVpnConnection calls DeleteVpnConnectionFunc.
func (mock *ec2ClientMock) DeleteVpnConnection(in1 *ec2.DeleteVpnConnectionInput) (*ec2.DeleteVpnConnectionOutput, error) {
	if mock.DeleteVpnConnectionFunc == nil {
		panic("ec2ClientMock.DeleteVpnConnectionFunc: method is nil but ec2Client.DeleteVpnConnection was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteVpnConnectionInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteVpnConnection.Lock()
	mock.calls.DeleteVpnConnection = append(mock.calls.DeleteVpnConnection, callInfo)
	lockec2ClientMockDeleteVpnConnection.Unlock()
	return mock.DeleteVpnConnectionFunc(in1)
}

// DeleteVpnConnectionCalls gets all the calls that were made to DeleteVpnConnection.
// Check the length with:
//     len(mockedec2Client.DeleteVpnConnectionCalls())
func (mock *ec2ClientMock) DeleteVpnConnectionCalls() []struct {
	In1 *ec2.DeleteVpnConnectionInput
} {
	var calls []struct {
		In1 *ec2.DeleteVpnConnectionInput
	}
	lockec2ClientMockDeleteVpnConnection.RLock()
	calls = mock.calls.DeleteVpnConnection
	lockec2ClientMockDeleteVpnConnection.RUnlock()
	return calls
}

// DeleteVpnConnectionRequest calls DeleteVpnConnectionRequestFunc.
func (mock *ec2ClientMock) DeleteVpnConnectionRequest(in1 *ec2.DeleteVpnConnectionInput) (*request.Request, *ec2.DeleteVpnConnectionOutput) {
	if mock.DeleteVpnConnectionRequestFunc == nil {
		panic("ec2ClientMock.DeleteVpnConnectionRequestFunc: method is nil but ec2Client.DeleteVpnConnectionRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteVpnConnectionInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteVpnConnectionRequest.Lock()
	mock.calls.DeleteVpnConnectionRequest = append(mock.calls.DeleteVpnConnectionRequest, callInfo)
	lockec2ClientMockDeleteVpnConnectionRequest.Unlock()
	return mock.DeleteVpnConnectionRequestFunc(in1)
}

// DeleteVpnConnectionRequestCalls gets all the calls that were made to DeleteVpnConnectionRequest.
// Check the length with:
//     len(mockedec2Client.DeleteVpnConnectionRequestCalls())
func (mock *ec2ClientMock) DeleteVpnConnectionRequestCalls() []struct {
	In1 *ec2.DeleteVpnConnectionInput
} {
	var calls []struct {
		In1 *ec2.DeleteVpnConnectionInput
	}
	lockec2ClientMockDeleteVpnConnectionRequest.RLock()
	calls = mock.calls.DeleteVpnConnectionRequest
	lockec2ClientMockDeleteVpnConnectionRequest.RUnlock()
	return calls
}

// DeleteVpnConnectionRoute calls DeleteVpnConnectionRouteFunc.
func (mock *ec2ClientMock) DeleteVpnConnectionRoute(in1 *ec2.DeleteVpnConnectionRouteInput) (*ec2.DeleteVpnConnectionRouteOutput, error) {
	if mock.DeleteVpnConnectionRouteFunc == nil {
		panic("ec2ClientMock.DeleteVpnConnectionRouteFunc: method is nil but ec2Client.DeleteVpnConnectionRoute was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteVpnConnectionRouteInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteVpnConnectionRoute.Lock()
	mock.calls.DeleteVpnConnectionRoute = append(mock.calls.DeleteVpnConnectionRoute, callInfo)
	lockec2ClientMockDeleteVpnConnectionRoute.Unlock()
	return mock.DeleteVpnConnectionRouteFunc(in1)
}

// DeleteVpnConnectionRouteCalls gets all the calls that were made to DeleteVpnConnectionRoute.
// Check the length with:
//     len(mockedec2Client.DeleteVpnConnectionRouteCalls())
func (mock *ec2ClientMock) DeleteVpnConnectionRouteCalls() []struct {
	In1 *ec2.DeleteVpnConnectionRouteInput
} {
	var calls []struct {
		In1 *ec2.DeleteVpnConnectionRouteInput
	}
	lockec2ClientMockDeleteVpnConnectionRoute.RLock()
	calls = mock.calls.DeleteVpnConnectionRoute
	lockec2ClientMockDeleteVpnConnectionRoute.RUnlock()
	return calls
}

// DeleteVpnConnectionRouteRequest calls DeleteVpnConnectionRouteRequestFunc.
func (mock *ec2ClientMock) DeleteVpnConnectionRouteRequest(in1 *ec2.DeleteVpnConnectionRouteInput) (*request.Request, *ec2.DeleteVpnConnectionRouteOutput) {
	if mock.DeleteVpnConnectionRouteRequestFunc == nil {
		panic("ec2ClientMock.DeleteVpnConnectionRouteRequestFunc: method is nil but ec2Client.DeleteVpnConnectionRouteRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteVpnConnectionRouteInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteVpnConnectionRouteRequest.Lock()
	mock.calls.DeleteVpnConnectionRouteRequest = append(mock.calls.DeleteVpnConnectionRouteRequest, callInfo)
	lockec2ClientMockDeleteVpnConnectionRouteRequest.Unlock()
	return mock.DeleteVpnConnectionRouteRequestFunc(in1)
}

// DeleteVpnConnectionRouteRequestCalls gets all the calls that were made to DeleteVpnConnectionRouteRequest.
// Check the length with:
//     len(mockedec2Client.DeleteVpnConnectionRouteRequestCalls())
func (mock *ec2ClientMock) DeleteVpnConnectionRouteRequestCalls() []struct {
	In1 *ec2.DeleteVpnConnectionRouteInput
} {
	var calls []struct {
		In1 *ec2.DeleteVpnConnectionRouteInput
	}
	lockec2ClientMockDeleteVpnConnectionRouteRequest.RLock()
	calls = mock.calls.DeleteVpnConnectionRouteRequest
	lockec2ClientMockDeleteVpnConnectionRouteRequest.RUnlock()
	return calls
}

// DeleteVpnConnectionRouteWithContext calls DeleteVpnConnectionRouteWithContextFunc.
func (mock *ec2ClientMock) DeleteVpnConnectionRouteWithContext(in1 context.Context, in2 *ec2.DeleteVpnConnectionRouteInput, in3 ...request.Option) (*ec2.DeleteVpnConnectionRouteOutput, error) {
	if mock.DeleteVpnConnectionRouteWithContextFunc == nil {
		panic("ec2ClientMock.DeleteVpnConnectionRouteWithContextFunc: method is nil but ec2Client.DeleteVpnConnectionRouteWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteVpnConnectionRouteInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteVpnConnectionRouteWithContext.Lock()
	mock.calls.DeleteVpnConnectionRouteWithContext = append(mock.calls.DeleteVpnConnectionRouteWithContext, callInfo)
	lockec2ClientMockDeleteVpnConnectionRouteWithContext.Unlock()
	return mock.DeleteVpnConnectionRouteWithContextFunc(in1, in2, in3...)
}

// DeleteVpnConnectionRouteWithContextCalls gets all the calls that were made to DeleteVpnConnectionRouteWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteVpnConnectionRouteWithContextCalls())
func (mock *ec2ClientMock) DeleteVpnConnectionRouteWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteVpnConnectionRouteInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteVpnConnectionRouteInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteVpnConnectionRouteWithContext.RLock()
	calls = mock.calls.DeleteVpnConnectionRouteWithContext
	lockec2ClientMockDeleteVpnConnectionRouteWithContext.RUnlock()
	return calls
}

// DeleteVpnConnectionWithContext calls DeleteVpnConnectionWithContextFunc.
func (mock *ec2ClientMock) DeleteVpnConnectionWithContext(in1 context.Context, in2 *ec2.DeleteVpnConnectionInput, in3 ...request.Option) (*ec2.DeleteVpnConnectionOutput, error) {
	if mock.DeleteVpnConnectionWithContextFunc == nil {
		panic("ec2ClientMock.DeleteVpnConnectionWithContextFunc: method is nil but ec2Client.DeleteVpnConnectionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteVpnConnectionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteVpnConnectionWithContext.Lock()
	mock.calls.DeleteVpnConnectionWithContext = append(mock.calls.DeleteVpnConnectionWithContext, callInfo)
	lockec2ClientMockDeleteVpnConnectionWithContext.Unlock()
	return mock.DeleteVpnConnectionWithContextFunc(in1, in2, in3...)
}

// DeleteVpnConnectionWithContextCalls gets all the calls that were made to DeleteVpnConnectionWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteVpnConnectionWithContextCalls())
func (mock *ec2ClientMock) DeleteVpnConnectionWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteVpnConnectionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteVpnConnectionInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteVpnConnectionWithContext.RLock()
	calls = mock.calls.DeleteVpnConnectionWithContext
	lockec2ClientMockDeleteVpnConnectionWithContext.RUnlock()
	return calls
}

// DeleteVpnGateway calls DeleteVpnGatewayFunc.
func (mock *ec2ClientMock) DeleteVpnGateway(in1 *ec2.DeleteVpnGatewayInput) (*ec2.DeleteVpnGatewayOutput, error) {
	if mock.DeleteVpnGatewayFunc == nil {
		panic("ec2ClientMock.DeleteVpnGatewayFunc: method is nil but ec2Client.DeleteVpnGateway was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteVpnGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteVpnGateway.Lock()
	mock.calls.DeleteVpnGateway = append(mock.calls.DeleteVpnGateway, callInfo)
	lockec2ClientMockDeleteVpnGateway.Unlock()
	return mock.DeleteVpnGatewayFunc(in1)
}

// DeleteVpnGatewayCalls gets all the calls that were made to DeleteVpnGateway.
// Check the length with:
//     len(mockedec2Client.DeleteVpnGatewayCalls())
func (mock *ec2ClientMock) DeleteVpnGatewayCalls() []struct {
	In1 *ec2.DeleteVpnGatewayInput
} {
	var calls []struct {
		In1 *ec2.DeleteVpnGatewayInput
	}
	lockec2ClientMockDeleteVpnGateway.RLock()
	calls = mock.calls.DeleteVpnGateway
	lockec2ClientMockDeleteVpnGateway.RUnlock()
	return calls
}

// DeleteVpnGatewayRequest calls DeleteVpnGatewayRequestFunc.
func (mock *ec2ClientMock) DeleteVpnGatewayRequest(in1 *ec2.DeleteVpnGatewayInput) (*request.Request, *ec2.DeleteVpnGatewayOutput) {
	if mock.DeleteVpnGatewayRequestFunc == nil {
		panic("ec2ClientMock.DeleteVpnGatewayRequestFunc: method is nil but ec2Client.DeleteVpnGatewayRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeleteVpnGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeleteVpnGatewayRequest.Lock()
	mock.calls.DeleteVpnGatewayRequest = append(mock.calls.DeleteVpnGatewayRequest, callInfo)
	lockec2ClientMockDeleteVpnGatewayRequest.Unlock()
	return mock.DeleteVpnGatewayRequestFunc(in1)
}

// DeleteVpnGatewayRequestCalls gets all the calls that were made to DeleteVpnGatewayRequest.
// Check the length with:
//     len(mockedec2Client.DeleteVpnGatewayRequestCalls())
func (mock *ec2ClientMock) DeleteVpnGatewayRequestCalls() []struct {
	In1 *ec2.DeleteVpnGatewayInput
} {
	var calls []struct {
		In1 *ec2.DeleteVpnGatewayInput
	}
	lockec2ClientMockDeleteVpnGatewayRequest.RLock()
	calls = mock.calls.DeleteVpnGatewayRequest
	lockec2ClientMockDeleteVpnGatewayRequest.RUnlock()
	return calls
}

// DeleteVpnGatewayWithContext calls DeleteVpnGatewayWithContextFunc.
func (mock *ec2ClientMock) DeleteVpnGatewayWithContext(in1 context.Context, in2 *ec2.DeleteVpnGatewayInput, in3 ...request.Option) (*ec2.DeleteVpnGatewayOutput, error) {
	if mock.DeleteVpnGatewayWithContextFunc == nil {
		panic("ec2ClientMock.DeleteVpnGatewayWithContextFunc: method is nil but ec2Client.DeleteVpnGatewayWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeleteVpnGatewayInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeleteVpnGatewayWithContext.Lock()
	mock.calls.DeleteVpnGatewayWithContext = append(mock.calls.DeleteVpnGatewayWithContext, callInfo)
	lockec2ClientMockDeleteVpnGatewayWithContext.Unlock()
	return mock.DeleteVpnGatewayWithContextFunc(in1, in2, in3...)
}

// DeleteVpnGatewayWithContextCalls gets all the calls that were made to DeleteVpnGatewayWithContext.
// Check the length with:
//     len(mockedec2Client.DeleteVpnGatewayWithContextCalls())
func (mock *ec2ClientMock) DeleteVpnGatewayWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeleteVpnGatewayInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeleteVpnGatewayInput
		In3 []request.Option
	}
	lockec2ClientMockDeleteVpnGatewayWithContext.RLock()
	calls = mock.calls.DeleteVpnGatewayWithContext
	lockec2ClientMockDeleteVpnGatewayWithContext.RUnlock()
	return calls
}

// DeprovisionByoipCidr calls DeprovisionByoipCidrFunc.
func (mock *ec2ClientMock) DeprovisionByoipCidr(in1 *ec2.DeprovisionByoipCidrInput) (*ec2.DeprovisionByoipCidrOutput, error) {
	if mock.DeprovisionByoipCidrFunc == nil {
		panic("ec2ClientMock.DeprovisionByoipCidrFunc: method is nil but ec2Client.DeprovisionByoipCidr was just called")
	}
	callInfo := struct {
		In1 *ec2.DeprovisionByoipCidrInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeprovisionByoipCidr.Lock()
	mock.calls.DeprovisionByoipCidr = append(mock.calls.DeprovisionByoipCidr, callInfo)
	lockec2ClientMockDeprovisionByoipCidr.Unlock()
	return mock.DeprovisionByoipCidrFunc(in1)
}

// DeprovisionByoipCidrCalls gets all the calls that were made to DeprovisionByoipCidr.
// Check the length with:
//     len(mockedec2Client.DeprovisionByoipCidrCalls())
func (mock *ec2ClientMock) DeprovisionByoipCidrCalls() []struct {
	In1 *ec2.DeprovisionByoipCidrInput
} {
	var calls []struct {
		In1 *ec2.DeprovisionByoipCidrInput
	}
	lockec2ClientMockDeprovisionByoipCidr.RLock()
	calls = mock.calls.DeprovisionByoipCidr
	lockec2ClientMockDeprovisionByoipCidr.RUnlock()
	return calls
}

// DeprovisionByoipCidrRequest calls DeprovisionByoipCidrRequestFunc.
func (mock *ec2ClientMock) DeprovisionByoipCidrRequest(in1 *ec2.DeprovisionByoipCidrInput) (*request.Request, *ec2.DeprovisionByoipCidrOutput) {
	if mock.DeprovisionByoipCidrRequestFunc == nil {
		panic("ec2ClientMock.DeprovisionByoipCidrRequestFunc: method is nil but ec2Client.DeprovisionByoipCidrRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeprovisionByoipCidrInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeprovisionByoipCidrRequest.Lock()
	mock.calls.DeprovisionByoipCidrRequest = append(mock.calls.DeprovisionByoipCidrRequest, callInfo)
	lockec2ClientMockDeprovisionByoipCidrRequest.Unlock()
	return mock.DeprovisionByoipCidrRequestFunc(in1)
}

// DeprovisionByoipCidrRequestCalls gets all the calls that were made to DeprovisionByoipCidrRequest.
// Check the length with:
//     len(mockedec2Client.DeprovisionByoipCidrRequestCalls())
func (mock *ec2ClientMock) DeprovisionByoipCidrRequestCalls() []struct {
	In1 *ec2.DeprovisionByoipCidrInput
} {
	var calls []struct {
		In1 *ec2.DeprovisionByoipCidrInput
	}
	lockec2ClientMockDeprovisionByoipCidrRequest.RLock()
	calls = mock.calls.DeprovisionByoipCidrRequest
	lockec2ClientMockDeprovisionByoipCidrRequest.RUnlock()
	return calls
}

// DeprovisionByoipCidrWithContext calls DeprovisionByoipCidrWithContextFunc.
func (mock *ec2ClientMock) DeprovisionByoipCidrWithContext(in1 context.Context, in2 *ec2.DeprovisionByoipCidrInput, in3 ...request.Option) (*ec2.DeprovisionByoipCidrOutput, error) {
	if mock.DeprovisionByoipCidrWithContextFunc == nil {
		panic("ec2ClientMock.DeprovisionByoipCidrWithContextFunc: method is nil but ec2Client.DeprovisionByoipCidrWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeprovisionByoipCidrInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeprovisionByoipCidrWithContext.Lock()
	mock.calls.DeprovisionByoipCidrWithContext = append(mock.calls.DeprovisionByoipCidrWithContext, callInfo)
	lockec2ClientMockDeprovisionByoipCidrWithContext.Unlock()
	return mock.DeprovisionByoipCidrWithContextFunc(in1, in2, in3...)
}

// DeprovisionByoipCidrWithContextCalls gets all the calls that were made to DeprovisionByoipCidrWithContext.
// Check the length with:
//     len(mockedec2Client.DeprovisionByoipCidrWithContextCalls())
func (mock *ec2ClientMock) DeprovisionByoipCidrWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeprovisionByoipCidrInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeprovisionByoipCidrInput
		In3 []request.Option
	}
	lockec2ClientMockDeprovisionByoipCidrWithContext.RLock()
	calls = mock.calls.DeprovisionByoipCidrWithContext
	lockec2ClientMockDeprovisionByoipCidrWithContext.RUnlock()
	return calls
}

// DeregisterImage calls DeregisterImageFunc.
func (mock *ec2ClientMock) DeregisterImage(in1 *ec2.DeregisterImageInput) (*ec2.DeregisterImageOutput, error) {
	if mock.DeregisterImageFunc == nil {
		panic("ec2ClientMock.DeregisterImageFunc: method is nil but ec2Client.DeregisterImage was just called")
	}
	callInfo := struct {
		In1 *ec2.DeregisterImageInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeregisterImage.Lock()
	mock.calls.DeregisterImage = append(mock.calls.DeregisterImage, callInfo)
	lockec2ClientMockDeregisterImage.Unlock()
	return mock.DeregisterImageFunc(in1)
}

// DeregisterImageCalls gets all the calls that were made to DeregisterImage.
// Check the length with:
//     len(mockedec2Client.DeregisterImageCalls())
func (mock *ec2ClientMock) DeregisterImageCalls() []struct {
	In1 *ec2.DeregisterImageInput
} {
	var calls []struct {
		In1 *ec2.DeregisterImageInput
	}
	lockec2ClientMockDeregisterImage.RLock()
	calls = mock.calls.DeregisterImage
	lockec2ClientMockDeregisterImage.RUnlock()
	return calls
}

// DeregisterImageRequest calls DeregisterImageRequestFunc.
func (mock *ec2ClientMock) DeregisterImageRequest(in1 *ec2.DeregisterImageInput) (*request.Request, *ec2.DeregisterImageOutput) {
	if mock.DeregisterImageRequestFunc == nil {
		panic("ec2ClientMock.DeregisterImageRequestFunc: method is nil but ec2Client.DeregisterImageRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeregisterImageInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeregisterImageRequest.Lock()
	mock.calls.DeregisterImageRequest = append(mock.calls.DeregisterImageRequest, callInfo)
	lockec2ClientMockDeregisterImageRequest.Unlock()
	return mock.DeregisterImageRequestFunc(in1)
}

// DeregisterImageRequestCalls gets all the calls that were made to DeregisterImageRequest.
// Check the length with:
//     len(mockedec2Client.DeregisterImageRequestCalls())
func (mock *ec2ClientMock) DeregisterImageRequestCalls() []struct {
	In1 *ec2.DeregisterImageInput
} {
	var calls []struct {
		In1 *ec2.DeregisterImageInput
	}
	lockec2ClientMockDeregisterImageRequest.RLock()
	calls = mock.calls.DeregisterImageRequest
	lockec2ClientMockDeregisterImageRequest.RUnlock()
	return calls
}

// DeregisterImageWithContext calls DeregisterImageWithContextFunc.
func (mock *ec2ClientMock) DeregisterImageWithContext(in1 context.Context, in2 *ec2.DeregisterImageInput, in3 ...request.Option) (*ec2.DeregisterImageOutput, error) {
	if mock.DeregisterImageWithContextFunc == nil {
		panic("ec2ClientMock.DeregisterImageWithContextFunc: method is nil but ec2Client.DeregisterImageWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeregisterImageInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeregisterImageWithContext.Lock()
	mock.calls.DeregisterImageWithContext = append(mock.calls.DeregisterImageWithContext, callInfo)
	lockec2ClientMockDeregisterImageWithContext.Unlock()
	return mock.DeregisterImageWithContextFunc(in1, in2, in3...)
}

// DeregisterImageWithContextCalls gets all the calls that were made to DeregisterImageWithContext.
// Check the length with:
//     len(mockedec2Client.DeregisterImageWithContextCalls())
func (mock *ec2ClientMock) DeregisterImageWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeregisterImageInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeregisterImageInput
		In3 []request.Option
	}
	lockec2ClientMockDeregisterImageWithContext.RLock()
	calls = mock.calls.DeregisterImageWithContext
	lockec2ClientMockDeregisterImageWithContext.RUnlock()
	return calls
}

// DeregisterTransitGatewayMulticastGroupMembers calls DeregisterTransitGatewayMulticastGroupMembersFunc.
func (mock *ec2ClientMock) DeregisterTransitGatewayMulticastGroupMembers(in1 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput) (*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput, error) {
	if mock.DeregisterTransitGatewayMulticastGroupMembersFunc == nil {
		panic("ec2ClientMock.DeregisterTransitGatewayMulticastGroupMembersFunc: method is nil but ec2Client.DeregisterTransitGatewayMulticastGroupMembers was just called")
	}
	callInfo := struct {
		In1 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupMembers.Lock()
	mock.calls.DeregisterTransitGatewayMulticastGroupMembers = append(mock.calls.DeregisterTransitGatewayMulticastGroupMembers, callInfo)
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupMembers.Unlock()
	return mock.DeregisterTransitGatewayMulticastGroupMembersFunc(in1)
}

// DeregisterTransitGatewayMulticastGroupMembersCalls gets all the calls that were made to DeregisterTransitGatewayMulticastGroupMembers.
// Check the length with:
//     len(mockedec2Client.DeregisterTransitGatewayMulticastGroupMembersCalls())
func (mock *ec2ClientMock) DeregisterTransitGatewayMulticastGroupMembersCalls() []struct {
	In1 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput
} {
	var calls []struct {
		In1 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput
	}
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupMembers.RLock()
	calls = mock.calls.DeregisterTransitGatewayMulticastGroupMembers
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupMembers.RUnlock()
	return calls
}

// DeregisterTransitGatewayMulticastGroupMembersRequest calls DeregisterTransitGatewayMulticastGroupMembersRequestFunc.
func (mock *ec2ClientMock) DeregisterTransitGatewayMulticastGroupMembersRequest(in1 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput) (*request.Request, *ec2.DeregisterTransitGatewayMulticastGroupMembersOutput) {
	if mock.DeregisterTransitGatewayMulticastGroupMembersRequestFunc == nil {
		panic("ec2ClientMock.DeregisterTransitGatewayMulticastGroupMembersRequestFunc: method is nil but ec2Client.DeregisterTransitGatewayMulticastGroupMembersRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupMembersRequest.Lock()
	mock.calls.DeregisterTransitGatewayMulticastGroupMembersRequest = append(mock.calls.DeregisterTransitGatewayMulticastGroupMembersRequest, callInfo)
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupMembersRequest.Unlock()
	return mock.DeregisterTransitGatewayMulticastGroupMembersRequestFunc(in1)
}

// DeregisterTransitGatewayMulticastGroupMembersRequestCalls gets all the calls that were made to DeregisterTransitGatewayMulticastGroupMembersRequest.
// Check the length with:
//     len(mockedec2Client.DeregisterTransitGatewayMulticastGroupMembersRequestCalls())
func (mock *ec2ClientMock) DeregisterTransitGatewayMulticastGroupMembersRequestCalls() []struct {
	In1 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput
} {
	var calls []struct {
		In1 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput
	}
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupMembersRequest.RLock()
	calls = mock.calls.DeregisterTransitGatewayMulticastGroupMembersRequest
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupMembersRequest.RUnlock()
	return calls
}

// DeregisterTransitGatewayMulticastGroupMembersWithContext calls DeregisterTransitGatewayMulticastGroupMembersWithContextFunc.
func (mock *ec2ClientMock) DeregisterTransitGatewayMulticastGroupMembersWithContext(in1 context.Context, in2 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput, in3 ...request.Option) (*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput, error) {
	if mock.DeregisterTransitGatewayMulticastGroupMembersWithContextFunc == nil {
		panic("ec2ClientMock.DeregisterTransitGatewayMulticastGroupMembersWithContextFunc: method is nil but ec2Client.DeregisterTransitGatewayMulticastGroupMembersWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupMembersWithContext.Lock()
	mock.calls.DeregisterTransitGatewayMulticastGroupMembersWithContext = append(mock.calls.DeregisterTransitGatewayMulticastGroupMembersWithContext, callInfo)
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupMembersWithContext.Unlock()
	return mock.DeregisterTransitGatewayMulticastGroupMembersWithContextFunc(in1, in2, in3...)
}

// DeregisterTransitGatewayMulticastGroupMembersWithContextCalls gets all the calls that were made to DeregisterTransitGatewayMulticastGroupMembersWithContext.
// Check the length with:
//     len(mockedec2Client.DeregisterTransitGatewayMulticastGroupMembersWithContextCalls())
func (mock *ec2ClientMock) DeregisterTransitGatewayMulticastGroupMembersWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput
		In3 []request.Option
	}
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupMembersWithContext.RLock()
	calls = mock.calls.DeregisterTransitGatewayMulticastGroupMembersWithContext
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupMembersWithContext.RUnlock()
	return calls
}

// DeregisterTransitGatewayMulticastGroupSources calls DeregisterTransitGatewayMulticastGroupSourcesFunc.
func (mock *ec2ClientMock) DeregisterTransitGatewayMulticastGroupSources(in1 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput) (*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput, error) {
	if mock.DeregisterTransitGatewayMulticastGroupSourcesFunc == nil {
		panic("ec2ClientMock.DeregisterTransitGatewayMulticastGroupSourcesFunc: method is nil but ec2Client.DeregisterTransitGatewayMulticastGroupSources was just called")
	}
	callInfo := struct {
		In1 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupSources.Lock()
	mock.calls.DeregisterTransitGatewayMulticastGroupSources = append(mock.calls.DeregisterTransitGatewayMulticastGroupSources, callInfo)
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupSources.Unlock()
	return mock.DeregisterTransitGatewayMulticastGroupSourcesFunc(in1)
}

// DeregisterTransitGatewayMulticastGroupSourcesCalls gets all the calls that were made to DeregisterTransitGatewayMulticastGroupSources.
// Check the length with:
//     len(mockedec2Client.DeregisterTransitGatewayMulticastGroupSourcesCalls())
func (mock *ec2ClientMock) DeregisterTransitGatewayMulticastGroupSourcesCalls() []struct {
	In1 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput
} {
	var calls []struct {
		In1 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput
	}
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupSources.RLock()
	calls = mock.calls.DeregisterTransitGatewayMulticastGroupSources
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupSources.RUnlock()
	return calls
}

// DeregisterTransitGatewayMulticastGroupSourcesRequest calls DeregisterTransitGatewayMulticastGroupSourcesRequestFunc.
func (mock *ec2ClientMock) DeregisterTransitGatewayMulticastGroupSourcesRequest(in1 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput) (*request.Request, *ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput) {
	if mock.DeregisterTransitGatewayMulticastGroupSourcesRequestFunc == nil {
		panic("ec2ClientMock.DeregisterTransitGatewayMulticastGroupSourcesRequestFunc: method is nil but ec2Client.DeregisterTransitGatewayMulticastGroupSourcesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupSourcesRequest.Lock()
	mock.calls.DeregisterTransitGatewayMulticastGroupSourcesRequest = append(mock.calls.DeregisterTransitGatewayMulticastGroupSourcesRequest, callInfo)
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupSourcesRequest.Unlock()
	return mock.DeregisterTransitGatewayMulticastGroupSourcesRequestFunc(in1)
}

// DeregisterTransitGatewayMulticastGroupSourcesRequestCalls gets all the calls that were made to DeregisterTransitGatewayMulticastGroupSourcesRequest.
// Check the length with:
//     len(mockedec2Client.DeregisterTransitGatewayMulticastGroupSourcesRequestCalls())
func (mock *ec2ClientMock) DeregisterTransitGatewayMulticastGroupSourcesRequestCalls() []struct {
	In1 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput
} {
	var calls []struct {
		In1 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput
	}
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupSourcesRequest.RLock()
	calls = mock.calls.DeregisterTransitGatewayMulticastGroupSourcesRequest
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupSourcesRequest.RUnlock()
	return calls
}

// DeregisterTransitGatewayMulticastGroupSourcesWithContext calls DeregisterTransitGatewayMulticastGroupSourcesWithContextFunc.
func (mock *ec2ClientMock) DeregisterTransitGatewayMulticastGroupSourcesWithContext(in1 context.Context, in2 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput, in3 ...request.Option) (*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput, error) {
	if mock.DeregisterTransitGatewayMulticastGroupSourcesWithContextFunc == nil {
		panic("ec2ClientMock.DeregisterTransitGatewayMulticastGroupSourcesWithContextFunc: method is nil but ec2Client.DeregisterTransitGatewayMulticastGroupSourcesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupSourcesWithContext.Lock()
	mock.calls.DeregisterTransitGatewayMulticastGroupSourcesWithContext = append(mock.calls.DeregisterTransitGatewayMulticastGroupSourcesWithContext, callInfo)
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupSourcesWithContext.Unlock()
	return mock.DeregisterTransitGatewayMulticastGroupSourcesWithContextFunc(in1, in2, in3...)
}

// DeregisterTransitGatewayMulticastGroupSourcesWithContextCalls gets all the calls that were made to DeregisterTransitGatewayMulticastGroupSourcesWithContext.
// Check the length with:
//     len(mockedec2Client.DeregisterTransitGatewayMulticastGroupSourcesWithContextCalls())
func (mock *ec2ClientMock) DeregisterTransitGatewayMulticastGroupSourcesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput
		In3 []request.Option
	}
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupSourcesWithContext.RLock()
	calls = mock.calls.DeregisterTransitGatewayMulticastGroupSourcesWithContext
	lockec2ClientMockDeregisterTransitGatewayMulticastGroupSourcesWithContext.RUnlock()
	return calls
}

// DescribeAccountAttributes calls DescribeAccountAttributesFunc.
func (mock *ec2ClientMock) DescribeAccountAttributes(in1 *ec2.DescribeAccountAttributesInput) (*ec2.DescribeAccountAttributesOutput, error) {
	if mock.DescribeAccountAttributesFunc == nil {
		panic("ec2ClientMock.DescribeAccountAttributesFunc: method is nil but ec2Client.DescribeAccountAttributes was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeAccountAttributesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeAccountAttributes.Lock()
	mock.calls.DescribeAccountAttributes = append(mock.calls.DescribeAccountAttributes, callInfo)
	lockec2ClientMockDescribeAccountAttributes.Unlock()
	return mock.DescribeAccountAttributesFunc(in1)
}

// DescribeAccountAttributesCalls gets all the calls that were made to DescribeAccountAttributes.
// Check the length with:
//     len(mockedec2Client.DescribeAccountAttributesCalls())
func (mock *ec2ClientMock) DescribeAccountAttributesCalls() []struct {
	In1 *ec2.DescribeAccountAttributesInput
} {
	var calls []struct {
		In1 *ec2.DescribeAccountAttributesInput
	}
	lockec2ClientMockDescribeAccountAttributes.RLock()
	calls = mock.calls.DescribeAccountAttributes
	lockec2ClientMockDescribeAccountAttributes.RUnlock()
	return calls
}

// DescribeAccountAttributesRequest calls DescribeAccountAttributesRequestFunc.
func (mock *ec2ClientMock) DescribeAccountAttributesRequest(in1 *ec2.DescribeAccountAttributesInput) (*request.Request, *ec2.DescribeAccountAttributesOutput) {
	if mock.DescribeAccountAttributesRequestFunc == nil {
		panic("ec2ClientMock.DescribeAccountAttributesRequestFunc: method is nil but ec2Client.DescribeAccountAttributesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeAccountAttributesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeAccountAttributesRequest.Lock()
	mock.calls.DescribeAccountAttributesRequest = append(mock.calls.DescribeAccountAttributesRequest, callInfo)
	lockec2ClientMockDescribeAccountAttributesRequest.Unlock()
	return mock.DescribeAccountAttributesRequestFunc(in1)
}

// DescribeAccountAttributesRequestCalls gets all the calls that were made to DescribeAccountAttributesRequest.
// Check the length with:
//     len(mockedec2Client.DescribeAccountAttributesRequestCalls())
func (mock *ec2ClientMock) DescribeAccountAttributesRequestCalls() []struct {
	In1 *ec2.DescribeAccountAttributesInput
} {
	var calls []struct {
		In1 *ec2.DescribeAccountAttributesInput
	}
	lockec2ClientMockDescribeAccountAttributesRequest.RLock()
	calls = mock.calls.DescribeAccountAttributesRequest
	lockec2ClientMockDescribeAccountAttributesRequest.RUnlock()
	return calls
}

// DescribeAccountAttributesWithContext calls DescribeAccountAttributesWithContextFunc.
func (mock *ec2ClientMock) DescribeAccountAttributesWithContext(in1 context.Context, in2 *ec2.DescribeAccountAttributesInput, in3 ...request.Option) (*ec2.DescribeAccountAttributesOutput, error) {
	if mock.DescribeAccountAttributesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeAccountAttributesWithContextFunc: method is nil but ec2Client.DescribeAccountAttributesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeAccountAttributesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeAccountAttributesWithContext.Lock()
	mock.calls.DescribeAccountAttributesWithContext = append(mock.calls.DescribeAccountAttributesWithContext, callInfo)
	lockec2ClientMockDescribeAccountAttributesWithContext.Unlock()
	return mock.DescribeAccountAttributesWithContextFunc(in1, in2, in3...)
}

// DescribeAccountAttributesWithContextCalls gets all the calls that were made to DescribeAccountAttributesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeAccountAttributesWithContextCalls())
func (mock *ec2ClientMock) DescribeAccountAttributesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeAccountAttributesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeAccountAttributesInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeAccountAttributesWithContext.RLock()
	calls = mock.calls.DescribeAccountAttributesWithContext
	lockec2ClientMockDescribeAccountAttributesWithContext.RUnlock()
	return calls
}

// DescribeAddresses calls DescribeAddressesFunc.
func (mock *ec2ClientMock) DescribeAddresses(in1 *ec2.DescribeAddressesInput) (*ec2.DescribeAddressesOutput, error) {
	if mock.DescribeAddressesFunc == nil {
		panic("ec2ClientMock.DescribeAddressesFunc: method is nil but ec2Client.DescribeAddresses was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeAddressesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeAddresses.Lock()
	mock.calls.DescribeAddresses = append(mock.calls.DescribeAddresses, callInfo)
	lockec2ClientMockDescribeAddresses.Unlock()
	return mock.DescribeAddressesFunc(in1)
}

// DescribeAddressesCalls gets all the calls that were made to DescribeAddresses.
// Check the length with:
//     len(mockedec2Client.DescribeAddressesCalls())
func (mock *ec2ClientMock) DescribeAddressesCalls() []struct {
	In1 *ec2.DescribeAddressesInput
} {
	var calls []struct {
		In1 *ec2.DescribeAddressesInput
	}
	lockec2ClientMockDescribeAddresses.RLock()
	calls = mock.calls.DescribeAddresses
	lockec2ClientMockDescribeAddresses.RUnlock()
	return calls
}

// DescribeAddressesRequest calls DescribeAddressesRequestFunc.
func (mock *ec2ClientMock) DescribeAddressesRequest(in1 *ec2.DescribeAddressesInput) (*request.Request, *ec2.DescribeAddressesOutput) {
	if mock.DescribeAddressesRequestFunc == nil {
		panic("ec2ClientMock.DescribeAddressesRequestFunc: method is nil but ec2Client.DescribeAddressesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeAddressesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeAddressesRequest.Lock()
	mock.calls.DescribeAddressesRequest = append(mock.calls.DescribeAddressesRequest, callInfo)
	lockec2ClientMockDescribeAddressesRequest.Unlock()
	return mock.DescribeAddressesRequestFunc(in1)
}

// DescribeAddressesRequestCalls gets all the calls that were made to DescribeAddressesRequest.
// Check the length with:
//     len(mockedec2Client.DescribeAddressesRequestCalls())
func (mock *ec2ClientMock) DescribeAddressesRequestCalls() []struct {
	In1 *ec2.DescribeAddressesInput
} {
	var calls []struct {
		In1 *ec2.DescribeAddressesInput
	}
	lockec2ClientMockDescribeAddressesRequest.RLock()
	calls = mock.calls.DescribeAddressesRequest
	lockec2ClientMockDescribeAddressesRequest.RUnlock()
	return calls
}

// DescribeAddressesWithContext calls DescribeAddressesWithContextFunc.
func (mock *ec2ClientMock) DescribeAddressesWithContext(in1 context.Context, in2 *ec2.DescribeAddressesInput, in3 ...request.Option) (*ec2.DescribeAddressesOutput, error) {
	if mock.DescribeAddressesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeAddressesWithContextFunc: method is nil but ec2Client.DescribeAddressesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeAddressesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeAddressesWithContext.Lock()
	mock.calls.DescribeAddressesWithContext = append(mock.calls.DescribeAddressesWithContext, callInfo)
	lockec2ClientMockDescribeAddressesWithContext.Unlock()
	return mock.DescribeAddressesWithContextFunc(in1, in2, in3...)
}

// DescribeAddressesWithContextCalls gets all the calls that were made to DescribeAddressesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeAddressesWithContextCalls())
func (mock *ec2ClientMock) DescribeAddressesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeAddressesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeAddressesInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeAddressesWithContext.RLock()
	calls = mock.calls.DescribeAddressesWithContext
	lockec2ClientMockDescribeAddressesWithContext.RUnlock()
	return calls
}

// DescribeAggregateIdFormat calls DescribeAggregateIdFormatFunc.
func (mock *ec2ClientMock) DescribeAggregateIdFormat(in1 *ec2.DescribeAggregateIdFormatInput) (*ec2.DescribeAggregateIdFormatOutput, error) {
	if mock.DescribeAggregateIdFormatFunc == nil {
		panic("ec2ClientMock.DescribeAggregateIdFormatFunc: method is nil but ec2Client.DescribeAggregateIdFormat was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeAggregateIdFormatInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeAggregateIdFormat.Lock()
	mock.calls.DescribeAggregateIdFormat = append(mock.calls.DescribeAggregateIdFormat, callInfo)
	lockec2ClientMockDescribeAggregateIdFormat.Unlock()
	return mock.DescribeAggregateIdFormatFunc(in1)
}

// DescribeAggregateIdFormatCalls gets all the calls that were made to DescribeAggregateIdFormat.
// Check the length with:
//     len(mockedec2Client.DescribeAggregateIdFormatCalls())
func (mock *ec2ClientMock) DescribeAggregateIdFormatCalls() []struct {
	In1 *ec2.DescribeAggregateIdFormatInput
} {
	var calls []struct {
		In1 *ec2.DescribeAggregateIdFormatInput
	}
	lockec2ClientMockDescribeAggregateIdFormat.RLock()
	calls = mock.calls.DescribeAggregateIdFormat
	lockec2ClientMockDescribeAggregateIdFormat.RUnlock()
	return calls
}

// DescribeAggregateIdFormatRequest calls DescribeAggregateIdFormatRequestFunc.
func (mock *ec2ClientMock) DescribeAggregateIdFormatRequest(in1 *ec2.DescribeAggregateIdFormatInput) (*request.Request, *ec2.DescribeAggregateIdFormatOutput) {
	if mock.DescribeAggregateIdFormatRequestFunc == nil {
		panic("ec2ClientMock.DescribeAggregateIdFormatRequestFunc: method is nil but ec2Client.DescribeAggregateIdFormatRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeAggregateIdFormatInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeAggregateIdFormatRequest.Lock()
	mock.calls.DescribeAggregateIdFormatRequest = append(mock.calls.DescribeAggregateIdFormatRequest, callInfo)
	lockec2ClientMockDescribeAggregateIdFormatRequest.Unlock()
	return mock.DescribeAggregateIdFormatRequestFunc(in1)
}

// DescribeAggregateIdFormatRequestCalls gets all the calls that were made to DescribeAggregateIdFormatRequest.
// Check the length with:
//     len(mockedec2Client.DescribeAggregateIdFormatRequestCalls())
func (mock *ec2ClientMock) DescribeAggregateIdFormatRequestCalls() []struct {
	In1 *ec2.DescribeAggregateIdFormatInput
} {
	var calls []struct {
		In1 *ec2.DescribeAggregateIdFormatInput
	}
	lockec2ClientMockDescribeAggregateIdFormatRequest.RLock()
	calls = mock.calls.DescribeAggregateIdFormatRequest
	lockec2ClientMockDescribeAggregateIdFormatRequest.RUnlock()
	return calls
}

// DescribeAggregateIdFormatWithContext calls DescribeAggregateIdFormatWithContextFunc.
func (mock *ec2ClientMock) DescribeAggregateIdFormatWithContext(in1 context.Context, in2 *ec2.DescribeAggregateIdFormatInput, in3 ...request.Option) (*ec2.DescribeAggregateIdFormatOutput, error) {
	if mock.DescribeAggregateIdFormatWithContextFunc == nil {
		panic("ec2ClientMock.DescribeAggregateIdFormatWithContextFunc: method is nil but ec2Client.DescribeAggregateIdFormatWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeAggregateIdFormatInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeAggregateIdFormatWithContext.Lock()
	mock.calls.DescribeAggregateIdFormatWithContext = append(mock.calls.DescribeAggregateIdFormatWithContext, callInfo)
	lockec2ClientMockDescribeAggregateIdFormatWithContext.Unlock()
	return mock.DescribeAggregateIdFormatWithContextFunc(in1, in2, in3...)
}

// DescribeAggregateIdFormatWithContextCalls gets all the calls that were made to DescribeAggregateIdFormatWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeAggregateIdFormatWithContextCalls())
func (mock *ec2ClientMock) DescribeAggregateIdFormatWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeAggregateIdFormatInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeAggregateIdFormatInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeAggregateIdFormatWithContext.RLock()
	calls = mock.calls.DescribeAggregateIdFormatWithContext
	lockec2ClientMockDescribeAggregateIdFormatWithContext.RUnlock()
	return calls
}

// DescribeAvailabilityZones calls DescribeAvailabilityZonesFunc.
func (mock *ec2ClientMock) DescribeAvailabilityZones(in1 *ec2.DescribeAvailabilityZonesInput) (*ec2.DescribeAvailabilityZonesOutput, error) {
	if mock.DescribeAvailabilityZonesFunc == nil {
		panic("ec2ClientMock.DescribeAvailabilityZonesFunc: method is nil but ec2Client.DescribeAvailabilityZones was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeAvailabilityZonesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeAvailabilityZones.Lock()
	mock.calls.DescribeAvailabilityZones = append(mock.calls.DescribeAvailabilityZones, callInfo)
	lockec2ClientMockDescribeAvailabilityZones.Unlock()
	return mock.DescribeAvailabilityZonesFunc(in1)
}

// DescribeAvailabilityZonesCalls gets all the calls that were made to DescribeAvailabilityZones.
// Check the length with:
//     len(mockedec2Client.DescribeAvailabilityZonesCalls())
func (mock *ec2ClientMock) DescribeAvailabilityZonesCalls() []struct {
	In1 *ec2.DescribeAvailabilityZonesInput
} {
	var calls []struct {
		In1 *ec2.DescribeAvailabilityZonesInput
	}
	lockec2ClientMockDescribeAvailabilityZones.RLock()
	calls = mock.calls.DescribeAvailabilityZones
	lockec2ClientMockDescribeAvailabilityZones.RUnlock()
	return calls
}

// DescribeAvailabilityZonesRequest calls DescribeAvailabilityZonesRequestFunc.
func (mock *ec2ClientMock) DescribeAvailabilityZonesRequest(in1 *ec2.DescribeAvailabilityZonesInput) (*request.Request, *ec2.DescribeAvailabilityZonesOutput) {
	if mock.DescribeAvailabilityZonesRequestFunc == nil {
		panic("ec2ClientMock.DescribeAvailabilityZonesRequestFunc: method is nil but ec2Client.DescribeAvailabilityZonesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeAvailabilityZonesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeAvailabilityZonesRequest.Lock()
	mock.calls.DescribeAvailabilityZonesRequest = append(mock.calls.DescribeAvailabilityZonesRequest, callInfo)
	lockec2ClientMockDescribeAvailabilityZonesRequest.Unlock()
	return mock.DescribeAvailabilityZonesRequestFunc(in1)
}

// DescribeAvailabilityZonesRequestCalls gets all the calls that were made to DescribeAvailabilityZonesRequest.
// Check the length with:
//     len(mockedec2Client.DescribeAvailabilityZonesRequestCalls())
func (mock *ec2ClientMock) DescribeAvailabilityZonesRequestCalls() []struct {
	In1 *ec2.DescribeAvailabilityZonesInput
} {
	var calls []struct {
		In1 *ec2.DescribeAvailabilityZonesInput
	}
	lockec2ClientMockDescribeAvailabilityZonesRequest.RLock()
	calls = mock.calls.DescribeAvailabilityZonesRequest
	lockec2ClientMockDescribeAvailabilityZonesRequest.RUnlock()
	return calls
}

// DescribeAvailabilityZonesWithContext calls DescribeAvailabilityZonesWithContextFunc.
func (mock *ec2ClientMock) DescribeAvailabilityZonesWithContext(in1 context.Context, in2 *ec2.DescribeAvailabilityZonesInput, in3 ...request.Option) (*ec2.DescribeAvailabilityZonesOutput, error) {
	if mock.DescribeAvailabilityZonesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeAvailabilityZonesWithContextFunc: method is nil but ec2Client.DescribeAvailabilityZonesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeAvailabilityZonesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeAvailabilityZonesWithContext.Lock()
	mock.calls.DescribeAvailabilityZonesWithContext = append(mock.calls.DescribeAvailabilityZonesWithContext, callInfo)
	lockec2ClientMockDescribeAvailabilityZonesWithContext.Unlock()
	return mock.DescribeAvailabilityZonesWithContextFunc(in1, in2, in3...)
}

// DescribeAvailabilityZonesWithContextCalls gets all the calls that were made to DescribeAvailabilityZonesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeAvailabilityZonesWithContextCalls())
func (mock *ec2ClientMock) DescribeAvailabilityZonesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeAvailabilityZonesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeAvailabilityZonesInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeAvailabilityZonesWithContext.RLock()
	calls = mock.calls.DescribeAvailabilityZonesWithContext
	lockec2ClientMockDescribeAvailabilityZonesWithContext.RUnlock()
	return calls
}

// DescribeBundleTasks calls DescribeBundleTasksFunc.
func (mock *ec2ClientMock) DescribeBundleTasks(in1 *ec2.DescribeBundleTasksInput) (*ec2.DescribeBundleTasksOutput, error) {
	if mock.DescribeBundleTasksFunc == nil {
		panic("ec2ClientMock.DescribeBundleTasksFunc: method is nil but ec2Client.DescribeBundleTasks was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeBundleTasksInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeBundleTasks.Lock()
	mock.calls.DescribeBundleTasks = append(mock.calls.DescribeBundleTasks, callInfo)
	lockec2ClientMockDescribeBundleTasks.Unlock()
	return mock.DescribeBundleTasksFunc(in1)
}

// DescribeBundleTasksCalls gets all the calls that were made to DescribeBundleTasks.
// Check the length with:
//     len(mockedec2Client.DescribeBundleTasksCalls())
func (mock *ec2ClientMock) DescribeBundleTasksCalls() []struct {
	In1 *ec2.DescribeBundleTasksInput
} {
	var calls []struct {
		In1 *ec2.DescribeBundleTasksInput
	}
	lockec2ClientMockDescribeBundleTasks.RLock()
	calls = mock.calls.DescribeBundleTasks
	lockec2ClientMockDescribeBundleTasks.RUnlock()
	return calls
}

// DescribeBundleTasksRequest calls DescribeBundleTasksRequestFunc.
func (mock *ec2ClientMock) DescribeBundleTasksRequest(in1 *ec2.DescribeBundleTasksInput) (*request.Request, *ec2.DescribeBundleTasksOutput) {
	if mock.DescribeBundleTasksRequestFunc == nil {
		panic("ec2ClientMock.DescribeBundleTasksRequestFunc: method is nil but ec2Client.DescribeBundleTasksRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeBundleTasksInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeBundleTasksRequest.Lock()
	mock.calls.DescribeBundleTasksRequest = append(mock.calls.DescribeBundleTasksRequest, callInfo)
	lockec2ClientMockDescribeBundleTasksRequest.Unlock()
	return mock.DescribeBundleTasksRequestFunc(in1)
}

// DescribeBundleTasksRequestCalls gets all the calls that were made to DescribeBundleTasksRequest.
// Check the length with:
//     len(mockedec2Client.DescribeBundleTasksRequestCalls())
func (mock *ec2ClientMock) DescribeBundleTasksRequestCalls() []struct {
	In1 *ec2.DescribeBundleTasksInput
} {
	var calls []struct {
		In1 *ec2.DescribeBundleTasksInput
	}
	lockec2ClientMockDescribeBundleTasksRequest.RLock()
	calls = mock.calls.DescribeBundleTasksRequest
	lockec2ClientMockDescribeBundleTasksRequest.RUnlock()
	return calls
}

// DescribeBundleTasksWithContext calls DescribeBundleTasksWithContextFunc.
func (mock *ec2ClientMock) DescribeBundleTasksWithContext(in1 context.Context, in2 *ec2.DescribeBundleTasksInput, in3 ...request.Option) (*ec2.DescribeBundleTasksOutput, error) {
	if mock.DescribeBundleTasksWithContextFunc == nil {
		panic("ec2ClientMock.DescribeBundleTasksWithContextFunc: method is nil but ec2Client.DescribeBundleTasksWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeBundleTasksInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeBundleTasksWithContext.Lock()
	mock.calls.DescribeBundleTasksWithContext = append(mock.calls.DescribeBundleTasksWithContext, callInfo)
	lockec2ClientMockDescribeBundleTasksWithContext.Unlock()
	return mock.DescribeBundleTasksWithContextFunc(in1, in2, in3...)
}

// DescribeBundleTasksWithContextCalls gets all the calls that were made to DescribeBundleTasksWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeBundleTasksWithContextCalls())
func (mock *ec2ClientMock) DescribeBundleTasksWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeBundleTasksInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeBundleTasksInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeBundleTasksWithContext.RLock()
	calls = mock.calls.DescribeBundleTasksWithContext
	lockec2ClientMockDescribeBundleTasksWithContext.RUnlock()
	return calls
}

// DescribeByoipCidrs calls DescribeByoipCidrsFunc.
func (mock *ec2ClientMock) DescribeByoipCidrs(in1 *ec2.DescribeByoipCidrsInput) (*ec2.DescribeByoipCidrsOutput, error) {
	if mock.DescribeByoipCidrsFunc == nil {
		panic("ec2ClientMock.DescribeByoipCidrsFunc: method is nil but ec2Client.DescribeByoipCidrs was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeByoipCidrsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeByoipCidrs.Lock()
	mock.calls.DescribeByoipCidrs = append(mock.calls.DescribeByoipCidrs, callInfo)
	lockec2ClientMockDescribeByoipCidrs.Unlock()
	return mock.DescribeByoipCidrsFunc(in1)
}

// DescribeByoipCidrsCalls gets all the calls that were made to DescribeByoipCidrs.
// Check the length with:
//     len(mockedec2Client.DescribeByoipCidrsCalls())
func (mock *ec2ClientMock) DescribeByoipCidrsCalls() []struct {
	In1 *ec2.DescribeByoipCidrsInput
} {
	var calls []struct {
		In1 *ec2.DescribeByoipCidrsInput
	}
	lockec2ClientMockDescribeByoipCidrs.RLock()
	calls = mock.calls.DescribeByoipCidrs
	lockec2ClientMockDescribeByoipCidrs.RUnlock()
	return calls
}

// DescribeByoipCidrsPages calls DescribeByoipCidrsPagesFunc.
func (mock *ec2ClientMock) DescribeByoipCidrsPages(in1 *ec2.DescribeByoipCidrsInput, in2 func(*ec2.DescribeByoipCidrsOutput, bool) bool) error {
	if mock.DescribeByoipCidrsPagesFunc == nil {
		panic("ec2ClientMock.DescribeByoipCidrsPagesFunc: method is nil but ec2Client.DescribeByoipCidrsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeByoipCidrsInput
		In2 func(*ec2.DescribeByoipCidrsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeByoipCidrsPages.Lock()
	mock.calls.DescribeByoipCidrsPages = append(mock.calls.DescribeByoipCidrsPages, callInfo)
	lockec2ClientMockDescribeByoipCidrsPages.Unlock()
	return mock.DescribeByoipCidrsPagesFunc(in1, in2)
}

// DescribeByoipCidrsPagesCalls gets all the calls that were made to DescribeByoipCidrsPages.
// Check the length with:
//     len(mockedec2Client.DescribeByoipCidrsPagesCalls())
func (mock *ec2ClientMock) DescribeByoipCidrsPagesCalls() []struct {
	In1 *ec2.DescribeByoipCidrsInput
	In2 func(*ec2.DescribeByoipCidrsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeByoipCidrsInput
		In2 func(*ec2.DescribeByoipCidrsOutput, bool) bool
	}
	lockec2ClientMockDescribeByoipCidrsPages.RLock()
	calls = mock.calls.DescribeByoipCidrsPages
	lockec2ClientMockDescribeByoipCidrsPages.RUnlock()
	return calls
}

// DescribeByoipCidrsPagesWithContext calls DescribeByoipCidrsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeByoipCidrsPagesWithContext(in1 context.Context, in2 *ec2.DescribeByoipCidrsInput, in3 func(*ec2.DescribeByoipCidrsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeByoipCidrsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeByoipCidrsPagesWithContextFunc: method is nil but ec2Client.DescribeByoipCidrsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeByoipCidrsInput
		In3 func(*ec2.DescribeByoipCidrsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeByoipCidrsPagesWithContext.Lock()
	mock.calls.DescribeByoipCidrsPagesWithContext = append(mock.calls.DescribeByoipCidrsPagesWithContext, callInfo)
	lockec2ClientMockDescribeByoipCidrsPagesWithContext.Unlock()
	return mock.DescribeByoipCidrsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeByoipCidrsPagesWithContextCalls gets all the calls that were made to DescribeByoipCidrsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeByoipCidrsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeByoipCidrsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeByoipCidrsInput
	In3 func(*ec2.DescribeByoipCidrsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeByoipCidrsInput
		In3 func(*ec2.DescribeByoipCidrsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeByoipCidrsPagesWithContext.RLock()
	calls = mock.calls.DescribeByoipCidrsPagesWithContext
	lockec2ClientMockDescribeByoipCidrsPagesWithContext.RUnlock()
	return calls
}

// DescribeByoipCidrsRequest calls DescribeByoipCidrsRequestFunc.
func (mock *ec2ClientMock) DescribeByoipCidrsRequest(in1 *ec2.DescribeByoipCidrsInput) (*request.Request, *ec2.DescribeByoipCidrsOutput) {
	if mock.DescribeByoipCidrsRequestFunc == nil {
		panic("ec2ClientMock.DescribeByoipCidrsRequestFunc: method is nil but ec2Client.DescribeByoipCidrsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeByoipCidrsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeByoipCidrsRequest.Lock()
	mock.calls.DescribeByoipCidrsRequest = append(mock.calls.DescribeByoipCidrsRequest, callInfo)
	lockec2ClientMockDescribeByoipCidrsRequest.Unlock()
	return mock.DescribeByoipCidrsRequestFunc(in1)
}

// DescribeByoipCidrsRequestCalls gets all the calls that were made to DescribeByoipCidrsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeByoipCidrsRequestCalls())
func (mock *ec2ClientMock) DescribeByoipCidrsRequestCalls() []struct {
	In1 *ec2.DescribeByoipCidrsInput
} {
	var calls []struct {
		In1 *ec2.DescribeByoipCidrsInput
	}
	lockec2ClientMockDescribeByoipCidrsRequest.RLock()
	calls = mock.calls.DescribeByoipCidrsRequest
	lockec2ClientMockDescribeByoipCidrsRequest.RUnlock()
	return calls
}

// DescribeByoipCidrsWithContext calls DescribeByoipCidrsWithContextFunc.
func (mock *ec2ClientMock) DescribeByoipCidrsWithContext(in1 context.Context, in2 *ec2.DescribeByoipCidrsInput, in3 ...request.Option) (*ec2.DescribeByoipCidrsOutput, error) {
	if mock.DescribeByoipCidrsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeByoipCidrsWithContextFunc: method is nil but ec2Client.DescribeByoipCidrsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeByoipCidrsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeByoipCidrsWithContext.Lock()
	mock.calls.DescribeByoipCidrsWithContext = append(mock.calls.DescribeByoipCidrsWithContext, callInfo)
	lockec2ClientMockDescribeByoipCidrsWithContext.Unlock()
	return mock.DescribeByoipCidrsWithContextFunc(in1, in2, in3...)
}

// DescribeByoipCidrsWithContextCalls gets all the calls that were made to DescribeByoipCidrsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeByoipCidrsWithContextCalls())
func (mock *ec2ClientMock) DescribeByoipCidrsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeByoipCidrsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeByoipCidrsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeByoipCidrsWithContext.RLock()
	calls = mock.calls.DescribeByoipCidrsWithContext
	lockec2ClientMockDescribeByoipCidrsWithContext.RUnlock()
	return calls
}

// DescribeCapacityReservations calls DescribeCapacityReservationsFunc.
func (mock *ec2ClientMock) DescribeCapacityReservations(in1 *ec2.DescribeCapacityReservationsInput) (*ec2.DescribeCapacityReservationsOutput, error) {
	if mock.DescribeCapacityReservationsFunc == nil {
		panic("ec2ClientMock.DescribeCapacityReservationsFunc: method is nil but ec2Client.DescribeCapacityReservations was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeCapacityReservationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeCapacityReservations.Lock()
	mock.calls.DescribeCapacityReservations = append(mock.calls.DescribeCapacityReservations, callInfo)
	lockec2ClientMockDescribeCapacityReservations.Unlock()
	return mock.DescribeCapacityReservationsFunc(in1)
}

// DescribeCapacityReservationsCalls gets all the calls that were made to DescribeCapacityReservations.
// Check the length with:
//     len(mockedec2Client.DescribeCapacityReservationsCalls())
func (mock *ec2ClientMock) DescribeCapacityReservationsCalls() []struct {
	In1 *ec2.DescribeCapacityReservationsInput
} {
	var calls []struct {
		In1 *ec2.DescribeCapacityReservationsInput
	}
	lockec2ClientMockDescribeCapacityReservations.RLock()
	calls = mock.calls.DescribeCapacityReservations
	lockec2ClientMockDescribeCapacityReservations.RUnlock()
	return calls
}

// DescribeCapacityReservationsPages calls DescribeCapacityReservationsPagesFunc.
func (mock *ec2ClientMock) DescribeCapacityReservationsPages(in1 *ec2.DescribeCapacityReservationsInput, in2 func(*ec2.DescribeCapacityReservationsOutput, bool) bool) error {
	if mock.DescribeCapacityReservationsPagesFunc == nil {
		panic("ec2ClientMock.DescribeCapacityReservationsPagesFunc: method is nil but ec2Client.DescribeCapacityReservationsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeCapacityReservationsInput
		In2 func(*ec2.DescribeCapacityReservationsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeCapacityReservationsPages.Lock()
	mock.calls.DescribeCapacityReservationsPages = append(mock.calls.DescribeCapacityReservationsPages, callInfo)
	lockec2ClientMockDescribeCapacityReservationsPages.Unlock()
	return mock.DescribeCapacityReservationsPagesFunc(in1, in2)
}

// DescribeCapacityReservationsPagesCalls gets all the calls that were made to DescribeCapacityReservationsPages.
// Check the length with:
//     len(mockedec2Client.DescribeCapacityReservationsPagesCalls())
func (mock *ec2ClientMock) DescribeCapacityReservationsPagesCalls() []struct {
	In1 *ec2.DescribeCapacityReservationsInput
	In2 func(*ec2.DescribeCapacityReservationsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeCapacityReservationsInput
		In2 func(*ec2.DescribeCapacityReservationsOutput, bool) bool
	}
	lockec2ClientMockDescribeCapacityReservationsPages.RLock()
	calls = mock.calls.DescribeCapacityReservationsPages
	lockec2ClientMockDescribeCapacityReservationsPages.RUnlock()
	return calls
}

// DescribeCapacityReservationsPagesWithContext calls DescribeCapacityReservationsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeCapacityReservationsPagesWithContext(in1 context.Context, in2 *ec2.DescribeCapacityReservationsInput, in3 func(*ec2.DescribeCapacityReservationsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeCapacityReservationsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeCapacityReservationsPagesWithContextFunc: method is nil but ec2Client.DescribeCapacityReservationsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeCapacityReservationsInput
		In3 func(*ec2.DescribeCapacityReservationsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeCapacityReservationsPagesWithContext.Lock()
	mock.calls.DescribeCapacityReservationsPagesWithContext = append(mock.calls.DescribeCapacityReservationsPagesWithContext, callInfo)
	lockec2ClientMockDescribeCapacityReservationsPagesWithContext.Unlock()
	return mock.DescribeCapacityReservationsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeCapacityReservationsPagesWithContextCalls gets all the calls that were made to DescribeCapacityReservationsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeCapacityReservationsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeCapacityReservationsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeCapacityReservationsInput
	In3 func(*ec2.DescribeCapacityReservationsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeCapacityReservationsInput
		In3 func(*ec2.DescribeCapacityReservationsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeCapacityReservationsPagesWithContext.RLock()
	calls = mock.calls.DescribeCapacityReservationsPagesWithContext
	lockec2ClientMockDescribeCapacityReservationsPagesWithContext.RUnlock()
	return calls
}

// DescribeCapacityReservationsRequest calls DescribeCapacityReservationsRequestFunc.
func (mock *ec2ClientMock) DescribeCapacityReservationsRequest(in1 *ec2.DescribeCapacityReservationsInput) (*request.Request, *ec2.DescribeCapacityReservationsOutput) {
	if mock.DescribeCapacityReservationsRequestFunc == nil {
		panic("ec2ClientMock.DescribeCapacityReservationsRequestFunc: method is nil but ec2Client.DescribeCapacityReservationsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeCapacityReservationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeCapacityReservationsRequest.Lock()
	mock.calls.DescribeCapacityReservationsRequest = append(mock.calls.DescribeCapacityReservationsRequest, callInfo)
	lockec2ClientMockDescribeCapacityReservationsRequest.Unlock()
	return mock.DescribeCapacityReservationsRequestFunc(in1)
}

// DescribeCapacityReservationsRequestCalls gets all the calls that were made to DescribeCapacityReservationsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeCapacityReservationsRequestCalls())
func (mock *ec2ClientMock) DescribeCapacityReservationsRequestCalls() []struct {
	In1 *ec2.DescribeCapacityReservationsInput
} {
	var calls []struct {
		In1 *ec2.DescribeCapacityReservationsInput
	}
	lockec2ClientMockDescribeCapacityReservationsRequest.RLock()
	calls = mock.calls.DescribeCapacityReservationsRequest
	lockec2ClientMockDescribeCapacityReservationsRequest.RUnlock()
	return calls
}

// DescribeCapacityReservationsWithContext calls DescribeCapacityReservationsWithContextFunc.
func (mock *ec2ClientMock) DescribeCapacityReservationsWithContext(in1 context.Context, in2 *ec2.DescribeCapacityReservationsInput, in3 ...request.Option) (*ec2.DescribeCapacityReservationsOutput, error) {
	if mock.DescribeCapacityReservationsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeCapacityReservationsWithContextFunc: method is nil but ec2Client.DescribeCapacityReservationsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeCapacityReservationsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeCapacityReservationsWithContext.Lock()
	mock.calls.DescribeCapacityReservationsWithContext = append(mock.calls.DescribeCapacityReservationsWithContext, callInfo)
	lockec2ClientMockDescribeCapacityReservationsWithContext.Unlock()
	return mock.DescribeCapacityReservationsWithContextFunc(in1, in2, in3...)
}

// DescribeCapacityReservationsWithContextCalls gets all the calls that were made to DescribeCapacityReservationsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeCapacityReservationsWithContextCalls())
func (mock *ec2ClientMock) DescribeCapacityReservationsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeCapacityReservationsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeCapacityReservationsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeCapacityReservationsWithContext.RLock()
	calls = mock.calls.DescribeCapacityReservationsWithContext
	lockec2ClientMockDescribeCapacityReservationsWithContext.RUnlock()
	return calls
}

// DescribeClassicLinkInstances calls DescribeClassicLinkInstancesFunc.
func (mock *ec2ClientMock) DescribeClassicLinkInstances(in1 *ec2.DescribeClassicLinkInstancesInput) (*ec2.DescribeClassicLinkInstancesOutput, error) {
	if mock.DescribeClassicLinkInstancesFunc == nil {
		panic("ec2ClientMock.DescribeClassicLinkInstancesFunc: method is nil but ec2Client.DescribeClassicLinkInstances was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeClassicLinkInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeClassicLinkInstances.Lock()
	mock.calls.DescribeClassicLinkInstances = append(mock.calls.DescribeClassicLinkInstances, callInfo)
	lockec2ClientMockDescribeClassicLinkInstances.Unlock()
	return mock.DescribeClassicLinkInstancesFunc(in1)
}

// DescribeClassicLinkInstancesCalls gets all the calls that were made to DescribeClassicLinkInstances.
// Check the length with:
//     len(mockedec2Client.DescribeClassicLinkInstancesCalls())
func (mock *ec2ClientMock) DescribeClassicLinkInstancesCalls() []struct {
	In1 *ec2.DescribeClassicLinkInstancesInput
} {
	var calls []struct {
		In1 *ec2.DescribeClassicLinkInstancesInput
	}
	lockec2ClientMockDescribeClassicLinkInstances.RLock()
	calls = mock.calls.DescribeClassicLinkInstances
	lockec2ClientMockDescribeClassicLinkInstances.RUnlock()
	return calls
}

// DescribeClassicLinkInstancesPages calls DescribeClassicLinkInstancesPagesFunc.
func (mock *ec2ClientMock) DescribeClassicLinkInstancesPages(in1 *ec2.DescribeClassicLinkInstancesInput, in2 func(*ec2.DescribeClassicLinkInstancesOutput, bool) bool) error {
	if mock.DescribeClassicLinkInstancesPagesFunc == nil {
		panic("ec2ClientMock.DescribeClassicLinkInstancesPagesFunc: method is nil but ec2Client.DescribeClassicLinkInstancesPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeClassicLinkInstancesInput
		In2 func(*ec2.DescribeClassicLinkInstancesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeClassicLinkInstancesPages.Lock()
	mock.calls.DescribeClassicLinkInstancesPages = append(mock.calls.DescribeClassicLinkInstancesPages, callInfo)
	lockec2ClientMockDescribeClassicLinkInstancesPages.Unlock()
	return mock.DescribeClassicLinkInstancesPagesFunc(in1, in2)
}

// DescribeClassicLinkInstancesPagesCalls gets all the calls that were made to DescribeClassicLinkInstancesPages.
// Check the length with:
//     len(mockedec2Client.DescribeClassicLinkInstancesPagesCalls())
func (mock *ec2ClientMock) DescribeClassicLinkInstancesPagesCalls() []struct {
	In1 *ec2.DescribeClassicLinkInstancesInput
	In2 func(*ec2.DescribeClassicLinkInstancesOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeClassicLinkInstancesInput
		In2 func(*ec2.DescribeClassicLinkInstancesOutput, bool) bool
	}
	lockec2ClientMockDescribeClassicLinkInstancesPages.RLock()
	calls = mock.calls.DescribeClassicLinkInstancesPages
	lockec2ClientMockDescribeClassicLinkInstancesPages.RUnlock()
	return calls
}

// DescribeClassicLinkInstancesPagesWithContext calls DescribeClassicLinkInstancesPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeClassicLinkInstancesPagesWithContext(in1 context.Context, in2 *ec2.DescribeClassicLinkInstancesInput, in3 func(*ec2.DescribeClassicLinkInstancesOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeClassicLinkInstancesPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeClassicLinkInstancesPagesWithContextFunc: method is nil but ec2Client.DescribeClassicLinkInstancesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeClassicLinkInstancesInput
		In3 func(*ec2.DescribeClassicLinkInstancesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeClassicLinkInstancesPagesWithContext.Lock()
	mock.calls.DescribeClassicLinkInstancesPagesWithContext = append(mock.calls.DescribeClassicLinkInstancesPagesWithContext, callInfo)
	lockec2ClientMockDescribeClassicLinkInstancesPagesWithContext.Unlock()
	return mock.DescribeClassicLinkInstancesPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeClassicLinkInstancesPagesWithContextCalls gets all the calls that were made to DescribeClassicLinkInstancesPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeClassicLinkInstancesPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeClassicLinkInstancesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeClassicLinkInstancesInput
	In3 func(*ec2.DescribeClassicLinkInstancesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeClassicLinkInstancesInput
		In3 func(*ec2.DescribeClassicLinkInstancesOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeClassicLinkInstancesPagesWithContext.RLock()
	calls = mock.calls.DescribeClassicLinkInstancesPagesWithContext
	lockec2ClientMockDescribeClassicLinkInstancesPagesWithContext.RUnlock()
	return calls
}

// DescribeClassicLinkInstancesRequest calls DescribeClassicLinkInstancesRequestFunc.
func (mock *ec2ClientMock) DescribeClassicLinkInstancesRequest(in1 *ec2.DescribeClassicLinkInstancesInput) (*request.Request, *ec2.DescribeClassicLinkInstancesOutput) {
	if mock.DescribeClassicLinkInstancesRequestFunc == nil {
		panic("ec2ClientMock.DescribeClassicLinkInstancesRequestFunc: method is nil but ec2Client.DescribeClassicLinkInstancesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeClassicLinkInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeClassicLinkInstancesRequest.Lock()
	mock.calls.DescribeClassicLinkInstancesRequest = append(mock.calls.DescribeClassicLinkInstancesRequest, callInfo)
	lockec2ClientMockDescribeClassicLinkInstancesRequest.Unlock()
	return mock.DescribeClassicLinkInstancesRequestFunc(in1)
}

// DescribeClassicLinkInstancesRequestCalls gets all the calls that were made to DescribeClassicLinkInstancesRequest.
// Check the length with:
//     len(mockedec2Client.DescribeClassicLinkInstancesRequestCalls())
func (mock *ec2ClientMock) DescribeClassicLinkInstancesRequestCalls() []struct {
	In1 *ec2.DescribeClassicLinkInstancesInput
} {
	var calls []struct {
		In1 *ec2.DescribeClassicLinkInstancesInput
	}
	lockec2ClientMockDescribeClassicLinkInstancesRequest.RLock()
	calls = mock.calls.DescribeClassicLinkInstancesRequest
	lockec2ClientMockDescribeClassicLinkInstancesRequest.RUnlock()
	return calls
}

// DescribeClassicLinkInstancesWithContext calls DescribeClassicLinkInstancesWithContextFunc.
func (mock *ec2ClientMock) DescribeClassicLinkInstancesWithContext(in1 context.Context, in2 *ec2.DescribeClassicLinkInstancesInput, in3 ...request.Option) (*ec2.DescribeClassicLinkInstancesOutput, error) {
	if mock.DescribeClassicLinkInstancesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeClassicLinkInstancesWithContextFunc: method is nil but ec2Client.DescribeClassicLinkInstancesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeClassicLinkInstancesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeClassicLinkInstancesWithContext.Lock()
	mock.calls.DescribeClassicLinkInstancesWithContext = append(mock.calls.DescribeClassicLinkInstancesWithContext, callInfo)
	lockec2ClientMockDescribeClassicLinkInstancesWithContext.Unlock()
	return mock.DescribeClassicLinkInstancesWithContextFunc(in1, in2, in3...)
}

// DescribeClassicLinkInstancesWithContextCalls gets all the calls that were made to DescribeClassicLinkInstancesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeClassicLinkInstancesWithContextCalls())
func (mock *ec2ClientMock) DescribeClassicLinkInstancesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeClassicLinkInstancesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeClassicLinkInstancesInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeClassicLinkInstancesWithContext.RLock()
	calls = mock.calls.DescribeClassicLinkInstancesWithContext
	lockec2ClientMockDescribeClassicLinkInstancesWithContext.RUnlock()
	return calls
}

// DescribeClientVpnAuthorizationRules calls DescribeClientVpnAuthorizationRulesFunc.
func (mock *ec2ClientMock) DescribeClientVpnAuthorizationRules(in1 *ec2.DescribeClientVpnAuthorizationRulesInput) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error) {
	if mock.DescribeClientVpnAuthorizationRulesFunc == nil {
		panic("ec2ClientMock.DescribeClientVpnAuthorizationRulesFunc: method is nil but ec2Client.DescribeClientVpnAuthorizationRules was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeClientVpnAuthorizationRulesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeClientVpnAuthorizationRules.Lock()
	mock.calls.DescribeClientVpnAuthorizationRules = append(mock.calls.DescribeClientVpnAuthorizationRules, callInfo)
	lockec2ClientMockDescribeClientVpnAuthorizationRules.Unlock()
	return mock.DescribeClientVpnAuthorizationRulesFunc(in1)
}

// DescribeClientVpnAuthorizationRulesCalls gets all the calls that were made to DescribeClientVpnAuthorizationRules.
// Check the length with:
//     len(mockedec2Client.DescribeClientVpnAuthorizationRulesCalls())
func (mock *ec2ClientMock) DescribeClientVpnAuthorizationRulesCalls() []struct {
	In1 *ec2.DescribeClientVpnAuthorizationRulesInput
} {
	var calls []struct {
		In1 *ec2.DescribeClientVpnAuthorizationRulesInput
	}
	lockec2ClientMockDescribeClientVpnAuthorizationRules.RLock()
	calls = mock.calls.DescribeClientVpnAuthorizationRules
	lockec2ClientMockDescribeClientVpnAuthorizationRules.RUnlock()
	return calls
}

// DescribeClientVpnAuthorizationRulesPages calls DescribeClientVpnAuthorizationRulesPagesFunc.
func (mock *ec2ClientMock) DescribeClientVpnAuthorizationRulesPages(in1 *ec2.DescribeClientVpnAuthorizationRulesInput, in2 func(*ec2.DescribeClientVpnAuthorizationRulesOutput, bool) bool) error {
	if mock.DescribeClientVpnAuthorizationRulesPagesFunc == nil {
		panic("ec2ClientMock.DescribeClientVpnAuthorizationRulesPagesFunc: method is nil but ec2Client.DescribeClientVpnAuthorizationRulesPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeClientVpnAuthorizationRulesInput
		In2 func(*ec2.DescribeClientVpnAuthorizationRulesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeClientVpnAuthorizationRulesPages.Lock()
	mock.calls.DescribeClientVpnAuthorizationRulesPages = append(mock.calls.DescribeClientVpnAuthorizationRulesPages, callInfo)
	lockec2ClientMockDescribeClientVpnAuthorizationRulesPages.Unlock()
	return mock.DescribeClientVpnAuthorizationRulesPagesFunc(in1, in2)
}

// DescribeClientVpnAuthorizationRulesPagesCalls gets all the calls that were made to DescribeClientVpnAuthorizationRulesPages.
// Check the length with:
//     len(mockedec2Client.DescribeClientVpnAuthorizationRulesPagesCalls())
func (mock *ec2ClientMock) DescribeClientVpnAuthorizationRulesPagesCalls() []struct {
	In1 *ec2.DescribeClientVpnAuthorizationRulesInput
	In2 func(*ec2.DescribeClientVpnAuthorizationRulesOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeClientVpnAuthorizationRulesInput
		In2 func(*ec2.DescribeClientVpnAuthorizationRulesOutput, bool) bool
	}
	lockec2ClientMockDescribeClientVpnAuthorizationRulesPages.RLock()
	calls = mock.calls.DescribeClientVpnAuthorizationRulesPages
	lockec2ClientMockDescribeClientVpnAuthorizationRulesPages.RUnlock()
	return calls
}

// DescribeClientVpnAuthorizationRulesPagesWithContext calls DescribeClientVpnAuthorizationRulesPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeClientVpnAuthorizationRulesPagesWithContext(in1 context.Context, in2 *ec2.DescribeClientVpnAuthorizationRulesInput, in3 func(*ec2.DescribeClientVpnAuthorizationRulesOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeClientVpnAuthorizationRulesPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeClientVpnAuthorizationRulesPagesWithContextFunc: method is nil but ec2Client.DescribeClientVpnAuthorizationRulesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeClientVpnAuthorizationRulesInput
		In3 func(*ec2.DescribeClientVpnAuthorizationRulesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeClientVpnAuthorizationRulesPagesWithContext.Lock()
	mock.calls.DescribeClientVpnAuthorizationRulesPagesWithContext = append(mock.calls.DescribeClientVpnAuthorizationRulesPagesWithContext, callInfo)
	lockec2ClientMockDescribeClientVpnAuthorizationRulesPagesWithContext.Unlock()
	return mock.DescribeClientVpnAuthorizationRulesPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeClientVpnAuthorizationRulesPagesWithContextCalls gets all the calls that were made to DescribeClientVpnAuthorizationRulesPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeClientVpnAuthorizationRulesPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeClientVpnAuthorizationRulesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeClientVpnAuthorizationRulesInput
	In3 func(*ec2.DescribeClientVpnAuthorizationRulesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeClientVpnAuthorizationRulesInput
		In3 func(*ec2.DescribeClientVpnAuthorizationRulesOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeClientVpnAuthorizationRulesPagesWithContext.RLock()
	calls = mock.calls.DescribeClientVpnAuthorizationRulesPagesWithContext
	lockec2ClientMockDescribeClientVpnAuthorizationRulesPagesWithContext.RUnlock()
	return calls
}

// DescribeClientVpnAuthorizationRulesRequest calls DescribeClientVpnAuthorizationRulesRequestFunc.
func (mock *ec2ClientMock) DescribeClientVpnAuthorizationRulesRequest(in1 *ec2.DescribeClientVpnAuthorizationRulesInput) (*request.Request, *ec2.DescribeClientVpnAuthorizationRulesOutput) {
	if mock.DescribeClientVpnAuthorizationRulesRequestFunc == nil {
		panic("ec2ClientMock.DescribeClientVpnAuthorizationRulesRequestFunc: method is nil but ec2Client.DescribeClientVpnAuthorizationRulesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeClientVpnAuthorizationRulesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeClientVpnAuthorizationRulesRequest.Lock()
	mock.calls.DescribeClientVpnAuthorizationRulesRequest = append(mock.calls.DescribeClientVpnAuthorizationRulesRequest, callInfo)
	lockec2ClientMockDescribeClientVpnAuthorizationRulesRequest.Unlock()
	return mock.DescribeClientVpnAuthorizationRulesRequestFunc(in1)
}

// DescribeClientVpnAuthorizationRulesRequestCalls gets all the calls that were made to DescribeClientVpnAuthorizationRulesRequest.
// Check the length with:
//     len(mockedec2Client.DescribeClientVpnAuthorizationRulesRequestCalls())
func (mock *ec2ClientMock) DescribeClientVpnAuthorizationRulesRequestCalls() []struct {
	In1 *ec2.DescribeClientVpnAuthorizationRulesInput
} {
	var calls []struct {
		In1 *ec2.DescribeClientVpnAuthorizationRulesInput
	}
	lockec2ClientMockDescribeClientVpnAuthorizationRulesRequest.RLock()
	calls = mock.calls.DescribeClientVpnAuthorizationRulesRequest
	lockec2ClientMockDescribeClientVpnAuthorizationRulesRequest.RUnlock()
	return calls
}

// DescribeClientVpnAuthorizationRulesWithContext calls DescribeClientVpnAuthorizationRulesWithContextFunc.
func (mock *ec2ClientMock) DescribeClientVpnAuthorizationRulesWithContext(in1 context.Context, in2 *ec2.DescribeClientVpnAuthorizationRulesInput, in3 ...request.Option) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error) {
	if mock.DescribeClientVpnAuthorizationRulesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeClientVpnAuthorizationRulesWithContextFunc: method is nil but ec2Client.DescribeClientVpnAuthorizationRulesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeClientVpnAuthorizationRulesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeClientVpnAuthorizationRulesWithContext.Lock()
	mock.calls.DescribeClientVpnAuthorizationRulesWithContext = append(mock.calls.DescribeClientVpnAuthorizationRulesWithContext, callInfo)
	lockec2ClientMockDescribeClientVpnAuthorizationRulesWithContext.Unlock()
	return mock.DescribeClientVpnAuthorizationRulesWithContextFunc(in1, in2, in3...)
}

// DescribeClientVpnAuthorizationRulesWithContextCalls gets all the calls that were made to DescribeClientVpnAuthorizationRulesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeClientVpnAuthorizationRulesWithContextCalls())
func (mock *ec2ClientMock) DescribeClientVpnAuthorizationRulesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeClientVpnAuthorizationRulesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeClientVpnAuthorizationRulesInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeClientVpnAuthorizationRulesWithContext.RLock()
	calls = mock.calls.DescribeClientVpnAuthorizationRulesWithContext
	lockec2ClientMockDescribeClientVpnAuthorizationRulesWithContext.RUnlock()
	return calls
}

// DescribeClientVpnConnections calls DescribeClientVpnConnectionsFunc.
func (mock *ec2ClientMock) DescribeClientVpnConnections(in1 *ec2.DescribeClientVpnConnectionsInput) (*ec2.DescribeClientVpnConnectionsOutput, error) {
	if mock.DescribeClientVpnConnectionsFunc == nil {
		panic("ec2ClientMock.DescribeClientVpnConnectionsFunc: method is nil but ec2Client.DescribeClientVpnConnections was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeClientVpnConnectionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeClientVpnConnections.Lock()
	mock.calls.DescribeClientVpnConnections = append(mock.calls.DescribeClientVpnConnections, callInfo)
	lockec2ClientMockDescribeClientVpnConnections.Unlock()
	return mock.DescribeClientVpnConnectionsFunc(in1)
}

// DescribeClientVpnConnectionsCalls gets all the calls that were made to DescribeClientVpnConnections.
// Check the length with:
//     len(mockedec2Client.DescribeClientVpnConnectionsCalls())
func (mock *ec2ClientMock) DescribeClientVpnConnectionsCalls() []struct {
	In1 *ec2.DescribeClientVpnConnectionsInput
} {
	var calls []struct {
		In1 *ec2.DescribeClientVpnConnectionsInput
	}
	lockec2ClientMockDescribeClientVpnConnections.RLock()
	calls = mock.calls.DescribeClientVpnConnections
	lockec2ClientMockDescribeClientVpnConnections.RUnlock()
	return calls
}

// DescribeClientVpnConnectionsPages calls DescribeClientVpnConnectionsPagesFunc.
func (mock *ec2ClientMock) DescribeClientVpnConnectionsPages(in1 *ec2.DescribeClientVpnConnectionsInput, in2 func(*ec2.DescribeClientVpnConnectionsOutput, bool) bool) error {
	if mock.DescribeClientVpnConnectionsPagesFunc == nil {
		panic("ec2ClientMock.DescribeClientVpnConnectionsPagesFunc: method is nil but ec2Client.DescribeClientVpnConnectionsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeClientVpnConnectionsInput
		In2 func(*ec2.DescribeClientVpnConnectionsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeClientVpnConnectionsPages.Lock()
	mock.calls.DescribeClientVpnConnectionsPages = append(mock.calls.DescribeClientVpnConnectionsPages, callInfo)
	lockec2ClientMockDescribeClientVpnConnectionsPages.Unlock()
	return mock.DescribeClientVpnConnectionsPagesFunc(in1, in2)
}

// DescribeClientVpnConnectionsPagesCalls gets all the calls that were made to DescribeClientVpnConnectionsPages.
// Check the length with:
//     len(mockedec2Client.DescribeClientVpnConnectionsPagesCalls())
func (mock *ec2ClientMock) DescribeClientVpnConnectionsPagesCalls() []struct {
	In1 *ec2.DescribeClientVpnConnectionsInput
	In2 func(*ec2.DescribeClientVpnConnectionsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeClientVpnConnectionsInput
		In2 func(*ec2.DescribeClientVpnConnectionsOutput, bool) bool
	}
	lockec2ClientMockDescribeClientVpnConnectionsPages.RLock()
	calls = mock.calls.DescribeClientVpnConnectionsPages
	lockec2ClientMockDescribeClientVpnConnectionsPages.RUnlock()
	return calls
}

// DescribeClientVpnConnectionsPagesWithContext calls DescribeClientVpnConnectionsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeClientVpnConnectionsPagesWithContext(in1 context.Context, in2 *ec2.DescribeClientVpnConnectionsInput, in3 func(*ec2.DescribeClientVpnConnectionsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeClientVpnConnectionsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeClientVpnConnectionsPagesWithContextFunc: method is nil but ec2Client.DescribeClientVpnConnectionsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeClientVpnConnectionsInput
		In3 func(*ec2.DescribeClientVpnConnectionsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeClientVpnConnectionsPagesWithContext.Lock()
	mock.calls.DescribeClientVpnConnectionsPagesWithContext = append(mock.calls.DescribeClientVpnConnectionsPagesWithContext, callInfo)
	lockec2ClientMockDescribeClientVpnConnectionsPagesWithContext.Unlock()
	return mock.DescribeClientVpnConnectionsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeClientVpnConnectionsPagesWithContextCalls gets all the calls that were made to DescribeClientVpnConnectionsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeClientVpnConnectionsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeClientVpnConnectionsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeClientVpnConnectionsInput
	In3 func(*ec2.DescribeClientVpnConnectionsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeClientVpnConnectionsInput
		In3 func(*ec2.DescribeClientVpnConnectionsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeClientVpnConnectionsPagesWithContext.RLock()
	calls = mock.calls.DescribeClientVpnConnectionsPagesWithContext
	lockec2ClientMockDescribeClientVpnConnectionsPagesWithContext.RUnlock()
	return calls
}

// DescribeClientVpnConnectionsRequest calls DescribeClientVpnConnectionsRequestFunc.
func (mock *ec2ClientMock) DescribeClientVpnConnectionsRequest(in1 *ec2.DescribeClientVpnConnectionsInput) (*request.Request, *ec2.DescribeClientVpnConnectionsOutput) {
	if mock.DescribeClientVpnConnectionsRequestFunc == nil {
		panic("ec2ClientMock.DescribeClientVpnConnectionsRequestFunc: method is nil but ec2Client.DescribeClientVpnConnectionsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeClientVpnConnectionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeClientVpnConnectionsRequest.Lock()
	mock.calls.DescribeClientVpnConnectionsRequest = append(mock.calls.DescribeClientVpnConnectionsRequest, callInfo)
	lockec2ClientMockDescribeClientVpnConnectionsRequest.Unlock()
	return mock.DescribeClientVpnConnectionsRequestFunc(in1)
}

// DescribeClientVpnConnectionsRequestCalls gets all the calls that were made to DescribeClientVpnConnectionsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeClientVpnConnectionsRequestCalls())
func (mock *ec2ClientMock) DescribeClientVpnConnectionsRequestCalls() []struct {
	In1 *ec2.DescribeClientVpnConnectionsInput
} {
	var calls []struct {
		In1 *ec2.DescribeClientVpnConnectionsInput
	}
	lockec2ClientMockDescribeClientVpnConnectionsRequest.RLock()
	calls = mock.calls.DescribeClientVpnConnectionsRequest
	lockec2ClientMockDescribeClientVpnConnectionsRequest.RUnlock()
	return calls
}

// DescribeClientVpnConnectionsWithContext calls DescribeClientVpnConnectionsWithContextFunc.
func (mock *ec2ClientMock) DescribeClientVpnConnectionsWithContext(in1 context.Context, in2 *ec2.DescribeClientVpnConnectionsInput, in3 ...request.Option) (*ec2.DescribeClientVpnConnectionsOutput, error) {
	if mock.DescribeClientVpnConnectionsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeClientVpnConnectionsWithContextFunc: method is nil but ec2Client.DescribeClientVpnConnectionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeClientVpnConnectionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeClientVpnConnectionsWithContext.Lock()
	mock.calls.DescribeClientVpnConnectionsWithContext = append(mock.calls.DescribeClientVpnConnectionsWithContext, callInfo)
	lockec2ClientMockDescribeClientVpnConnectionsWithContext.Unlock()
	return mock.DescribeClientVpnConnectionsWithContextFunc(in1, in2, in3...)
}

// DescribeClientVpnConnectionsWithContextCalls gets all the calls that were made to DescribeClientVpnConnectionsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeClientVpnConnectionsWithContextCalls())
func (mock *ec2ClientMock) DescribeClientVpnConnectionsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeClientVpnConnectionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeClientVpnConnectionsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeClientVpnConnectionsWithContext.RLock()
	calls = mock.calls.DescribeClientVpnConnectionsWithContext
	lockec2ClientMockDescribeClientVpnConnectionsWithContext.RUnlock()
	return calls
}

// DescribeClientVpnEndpoints calls DescribeClientVpnEndpointsFunc.
func (mock *ec2ClientMock) DescribeClientVpnEndpoints(in1 *ec2.DescribeClientVpnEndpointsInput) (*ec2.DescribeClientVpnEndpointsOutput, error) {
	if mock.DescribeClientVpnEndpointsFunc == nil {
		panic("ec2ClientMock.DescribeClientVpnEndpointsFunc: method is nil but ec2Client.DescribeClientVpnEndpoints was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeClientVpnEndpointsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeClientVpnEndpoints.Lock()
	mock.calls.DescribeClientVpnEndpoints = append(mock.calls.DescribeClientVpnEndpoints, callInfo)
	lockec2ClientMockDescribeClientVpnEndpoints.Unlock()
	return mock.DescribeClientVpnEndpointsFunc(in1)
}

// DescribeClientVpnEndpointsCalls gets all the calls that were made to DescribeClientVpnEndpoints.
// Check the length with:
//     len(mockedec2Client.DescribeClientVpnEndpointsCalls())
func (mock *ec2ClientMock) DescribeClientVpnEndpointsCalls() []struct {
	In1 *ec2.DescribeClientVpnEndpointsInput
} {
	var calls []struct {
		In1 *ec2.DescribeClientVpnEndpointsInput
	}
	lockec2ClientMockDescribeClientVpnEndpoints.RLock()
	calls = mock.calls.DescribeClientVpnEndpoints
	lockec2ClientMockDescribeClientVpnEndpoints.RUnlock()
	return calls
}

// DescribeClientVpnEndpointsPages calls DescribeClientVpnEndpointsPagesFunc.
func (mock *ec2ClientMock) DescribeClientVpnEndpointsPages(in1 *ec2.DescribeClientVpnEndpointsInput, in2 func(*ec2.DescribeClientVpnEndpointsOutput, bool) bool) error {
	if mock.DescribeClientVpnEndpointsPagesFunc == nil {
		panic("ec2ClientMock.DescribeClientVpnEndpointsPagesFunc: method is nil but ec2Client.DescribeClientVpnEndpointsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeClientVpnEndpointsInput
		In2 func(*ec2.DescribeClientVpnEndpointsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeClientVpnEndpointsPages.Lock()
	mock.calls.DescribeClientVpnEndpointsPages = append(mock.calls.DescribeClientVpnEndpointsPages, callInfo)
	lockec2ClientMockDescribeClientVpnEndpointsPages.Unlock()
	return mock.DescribeClientVpnEndpointsPagesFunc(in1, in2)
}

// DescribeClientVpnEndpointsPagesCalls gets all the calls that were made to DescribeClientVpnEndpointsPages.
// Check the length with:
//     len(mockedec2Client.DescribeClientVpnEndpointsPagesCalls())
func (mock *ec2ClientMock) DescribeClientVpnEndpointsPagesCalls() []struct {
	In1 *ec2.DescribeClientVpnEndpointsInput
	In2 func(*ec2.DescribeClientVpnEndpointsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeClientVpnEndpointsInput
		In2 func(*ec2.DescribeClientVpnEndpointsOutput, bool) bool
	}
	lockec2ClientMockDescribeClientVpnEndpointsPages.RLock()
	calls = mock.calls.DescribeClientVpnEndpointsPages
	lockec2ClientMockDescribeClientVpnEndpointsPages.RUnlock()
	return calls
}

// DescribeClientVpnEndpointsPagesWithContext calls DescribeClientVpnEndpointsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeClientVpnEndpointsPagesWithContext(in1 context.Context, in2 *ec2.DescribeClientVpnEndpointsInput, in3 func(*ec2.DescribeClientVpnEndpointsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeClientVpnEndpointsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeClientVpnEndpointsPagesWithContextFunc: method is nil but ec2Client.DescribeClientVpnEndpointsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeClientVpnEndpointsInput
		In3 func(*ec2.DescribeClientVpnEndpointsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeClientVpnEndpointsPagesWithContext.Lock()
	mock.calls.DescribeClientVpnEndpointsPagesWithContext = append(mock.calls.DescribeClientVpnEndpointsPagesWithContext, callInfo)
	lockec2ClientMockDescribeClientVpnEndpointsPagesWithContext.Unlock()
	return mock.DescribeClientVpnEndpointsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeClientVpnEndpointsPagesWithContextCalls gets all the calls that were made to DescribeClientVpnEndpointsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeClientVpnEndpointsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeClientVpnEndpointsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeClientVpnEndpointsInput
	In3 func(*ec2.DescribeClientVpnEndpointsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeClientVpnEndpointsInput
		In3 func(*ec2.DescribeClientVpnEndpointsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeClientVpnEndpointsPagesWithContext.RLock()
	calls = mock.calls.DescribeClientVpnEndpointsPagesWithContext
	lockec2ClientMockDescribeClientVpnEndpointsPagesWithContext.RUnlock()
	return calls
}

// DescribeClientVpnEndpointsRequest calls DescribeClientVpnEndpointsRequestFunc.
func (mock *ec2ClientMock) DescribeClientVpnEndpointsRequest(in1 *ec2.DescribeClientVpnEndpointsInput) (*request.Request, *ec2.DescribeClientVpnEndpointsOutput) {
	if mock.DescribeClientVpnEndpointsRequestFunc == nil {
		panic("ec2ClientMock.DescribeClientVpnEndpointsRequestFunc: method is nil but ec2Client.DescribeClientVpnEndpointsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeClientVpnEndpointsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeClientVpnEndpointsRequest.Lock()
	mock.calls.DescribeClientVpnEndpointsRequest = append(mock.calls.DescribeClientVpnEndpointsRequest, callInfo)
	lockec2ClientMockDescribeClientVpnEndpointsRequest.Unlock()
	return mock.DescribeClientVpnEndpointsRequestFunc(in1)
}

// DescribeClientVpnEndpointsRequestCalls gets all the calls that were made to DescribeClientVpnEndpointsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeClientVpnEndpointsRequestCalls())
func (mock *ec2ClientMock) DescribeClientVpnEndpointsRequestCalls() []struct {
	In1 *ec2.DescribeClientVpnEndpointsInput
} {
	var calls []struct {
		In1 *ec2.DescribeClientVpnEndpointsInput
	}
	lockec2ClientMockDescribeClientVpnEndpointsRequest.RLock()
	calls = mock.calls.DescribeClientVpnEndpointsRequest
	lockec2ClientMockDescribeClientVpnEndpointsRequest.RUnlock()
	return calls
}

// DescribeClientVpnEndpointsWithContext calls DescribeClientVpnEndpointsWithContextFunc.
func (mock *ec2ClientMock) DescribeClientVpnEndpointsWithContext(in1 context.Context, in2 *ec2.DescribeClientVpnEndpointsInput, in3 ...request.Option) (*ec2.DescribeClientVpnEndpointsOutput, error) {
	if mock.DescribeClientVpnEndpointsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeClientVpnEndpointsWithContextFunc: method is nil but ec2Client.DescribeClientVpnEndpointsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeClientVpnEndpointsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeClientVpnEndpointsWithContext.Lock()
	mock.calls.DescribeClientVpnEndpointsWithContext = append(mock.calls.DescribeClientVpnEndpointsWithContext, callInfo)
	lockec2ClientMockDescribeClientVpnEndpointsWithContext.Unlock()
	return mock.DescribeClientVpnEndpointsWithContextFunc(in1, in2, in3...)
}

// DescribeClientVpnEndpointsWithContextCalls gets all the calls that were made to DescribeClientVpnEndpointsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeClientVpnEndpointsWithContextCalls())
func (mock *ec2ClientMock) DescribeClientVpnEndpointsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeClientVpnEndpointsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeClientVpnEndpointsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeClientVpnEndpointsWithContext.RLock()
	calls = mock.calls.DescribeClientVpnEndpointsWithContext
	lockec2ClientMockDescribeClientVpnEndpointsWithContext.RUnlock()
	return calls
}

// DescribeClientVpnRoutes calls DescribeClientVpnRoutesFunc.
func (mock *ec2ClientMock) DescribeClientVpnRoutes(in1 *ec2.DescribeClientVpnRoutesInput) (*ec2.DescribeClientVpnRoutesOutput, error) {
	if mock.DescribeClientVpnRoutesFunc == nil {
		panic("ec2ClientMock.DescribeClientVpnRoutesFunc: method is nil but ec2Client.DescribeClientVpnRoutes was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeClientVpnRoutesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeClientVpnRoutes.Lock()
	mock.calls.DescribeClientVpnRoutes = append(mock.calls.DescribeClientVpnRoutes, callInfo)
	lockec2ClientMockDescribeClientVpnRoutes.Unlock()
	return mock.DescribeClientVpnRoutesFunc(in1)
}

// DescribeClientVpnRoutesCalls gets all the calls that were made to DescribeClientVpnRoutes.
// Check the length with:
//     len(mockedec2Client.DescribeClientVpnRoutesCalls())
func (mock *ec2ClientMock) DescribeClientVpnRoutesCalls() []struct {
	In1 *ec2.DescribeClientVpnRoutesInput
} {
	var calls []struct {
		In1 *ec2.DescribeClientVpnRoutesInput
	}
	lockec2ClientMockDescribeClientVpnRoutes.RLock()
	calls = mock.calls.DescribeClientVpnRoutes
	lockec2ClientMockDescribeClientVpnRoutes.RUnlock()
	return calls
}

// DescribeClientVpnRoutesPages calls DescribeClientVpnRoutesPagesFunc.
func (mock *ec2ClientMock) DescribeClientVpnRoutesPages(in1 *ec2.DescribeClientVpnRoutesInput, in2 func(*ec2.DescribeClientVpnRoutesOutput, bool) bool) error {
	if mock.DescribeClientVpnRoutesPagesFunc == nil {
		panic("ec2ClientMock.DescribeClientVpnRoutesPagesFunc: method is nil but ec2Client.DescribeClientVpnRoutesPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeClientVpnRoutesInput
		In2 func(*ec2.DescribeClientVpnRoutesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeClientVpnRoutesPages.Lock()
	mock.calls.DescribeClientVpnRoutesPages = append(mock.calls.DescribeClientVpnRoutesPages, callInfo)
	lockec2ClientMockDescribeClientVpnRoutesPages.Unlock()
	return mock.DescribeClientVpnRoutesPagesFunc(in1, in2)
}

// DescribeClientVpnRoutesPagesCalls gets all the calls that were made to DescribeClientVpnRoutesPages.
// Check the length with:
//     len(mockedec2Client.DescribeClientVpnRoutesPagesCalls())
func (mock *ec2ClientMock) DescribeClientVpnRoutesPagesCalls() []struct {
	In1 *ec2.DescribeClientVpnRoutesInput
	In2 func(*ec2.DescribeClientVpnRoutesOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeClientVpnRoutesInput
		In2 func(*ec2.DescribeClientVpnRoutesOutput, bool) bool
	}
	lockec2ClientMockDescribeClientVpnRoutesPages.RLock()
	calls = mock.calls.DescribeClientVpnRoutesPages
	lockec2ClientMockDescribeClientVpnRoutesPages.RUnlock()
	return calls
}

// DescribeClientVpnRoutesPagesWithContext calls DescribeClientVpnRoutesPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeClientVpnRoutesPagesWithContext(in1 context.Context, in2 *ec2.DescribeClientVpnRoutesInput, in3 func(*ec2.DescribeClientVpnRoutesOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeClientVpnRoutesPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeClientVpnRoutesPagesWithContextFunc: method is nil but ec2Client.DescribeClientVpnRoutesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeClientVpnRoutesInput
		In3 func(*ec2.DescribeClientVpnRoutesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeClientVpnRoutesPagesWithContext.Lock()
	mock.calls.DescribeClientVpnRoutesPagesWithContext = append(mock.calls.DescribeClientVpnRoutesPagesWithContext, callInfo)
	lockec2ClientMockDescribeClientVpnRoutesPagesWithContext.Unlock()
	return mock.DescribeClientVpnRoutesPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeClientVpnRoutesPagesWithContextCalls gets all the calls that were made to DescribeClientVpnRoutesPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeClientVpnRoutesPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeClientVpnRoutesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeClientVpnRoutesInput
	In3 func(*ec2.DescribeClientVpnRoutesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeClientVpnRoutesInput
		In3 func(*ec2.DescribeClientVpnRoutesOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeClientVpnRoutesPagesWithContext.RLock()
	calls = mock.calls.DescribeClientVpnRoutesPagesWithContext
	lockec2ClientMockDescribeClientVpnRoutesPagesWithContext.RUnlock()
	return calls
}

// DescribeClientVpnRoutesRequest calls DescribeClientVpnRoutesRequestFunc.
func (mock *ec2ClientMock) DescribeClientVpnRoutesRequest(in1 *ec2.DescribeClientVpnRoutesInput) (*request.Request, *ec2.DescribeClientVpnRoutesOutput) {
	if mock.DescribeClientVpnRoutesRequestFunc == nil {
		panic("ec2ClientMock.DescribeClientVpnRoutesRequestFunc: method is nil but ec2Client.DescribeClientVpnRoutesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeClientVpnRoutesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeClientVpnRoutesRequest.Lock()
	mock.calls.DescribeClientVpnRoutesRequest = append(mock.calls.DescribeClientVpnRoutesRequest, callInfo)
	lockec2ClientMockDescribeClientVpnRoutesRequest.Unlock()
	return mock.DescribeClientVpnRoutesRequestFunc(in1)
}

// DescribeClientVpnRoutesRequestCalls gets all the calls that were made to DescribeClientVpnRoutesRequest.
// Check the length with:
//     len(mockedec2Client.DescribeClientVpnRoutesRequestCalls())
func (mock *ec2ClientMock) DescribeClientVpnRoutesRequestCalls() []struct {
	In1 *ec2.DescribeClientVpnRoutesInput
} {
	var calls []struct {
		In1 *ec2.DescribeClientVpnRoutesInput
	}
	lockec2ClientMockDescribeClientVpnRoutesRequest.RLock()
	calls = mock.calls.DescribeClientVpnRoutesRequest
	lockec2ClientMockDescribeClientVpnRoutesRequest.RUnlock()
	return calls
}

// DescribeClientVpnRoutesWithContext calls DescribeClientVpnRoutesWithContextFunc.
func (mock *ec2ClientMock) DescribeClientVpnRoutesWithContext(in1 context.Context, in2 *ec2.DescribeClientVpnRoutesInput, in3 ...request.Option) (*ec2.DescribeClientVpnRoutesOutput, error) {
	if mock.DescribeClientVpnRoutesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeClientVpnRoutesWithContextFunc: method is nil but ec2Client.DescribeClientVpnRoutesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeClientVpnRoutesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeClientVpnRoutesWithContext.Lock()
	mock.calls.DescribeClientVpnRoutesWithContext = append(mock.calls.DescribeClientVpnRoutesWithContext, callInfo)
	lockec2ClientMockDescribeClientVpnRoutesWithContext.Unlock()
	return mock.DescribeClientVpnRoutesWithContextFunc(in1, in2, in3...)
}

// DescribeClientVpnRoutesWithContextCalls gets all the calls that were made to DescribeClientVpnRoutesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeClientVpnRoutesWithContextCalls())
func (mock *ec2ClientMock) DescribeClientVpnRoutesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeClientVpnRoutesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeClientVpnRoutesInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeClientVpnRoutesWithContext.RLock()
	calls = mock.calls.DescribeClientVpnRoutesWithContext
	lockec2ClientMockDescribeClientVpnRoutesWithContext.RUnlock()
	return calls
}

// DescribeClientVpnTargetNetworks calls DescribeClientVpnTargetNetworksFunc.
func (mock *ec2ClientMock) DescribeClientVpnTargetNetworks(in1 *ec2.DescribeClientVpnTargetNetworksInput) (*ec2.DescribeClientVpnTargetNetworksOutput, error) {
	if mock.DescribeClientVpnTargetNetworksFunc == nil {
		panic("ec2ClientMock.DescribeClientVpnTargetNetworksFunc: method is nil but ec2Client.DescribeClientVpnTargetNetworks was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeClientVpnTargetNetworksInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeClientVpnTargetNetworks.Lock()
	mock.calls.DescribeClientVpnTargetNetworks = append(mock.calls.DescribeClientVpnTargetNetworks, callInfo)
	lockec2ClientMockDescribeClientVpnTargetNetworks.Unlock()
	return mock.DescribeClientVpnTargetNetworksFunc(in1)
}

// DescribeClientVpnTargetNetworksCalls gets all the calls that were made to DescribeClientVpnTargetNetworks.
// Check the length with:
//     len(mockedec2Client.DescribeClientVpnTargetNetworksCalls())
func (mock *ec2ClientMock) DescribeClientVpnTargetNetworksCalls() []struct {
	In1 *ec2.DescribeClientVpnTargetNetworksInput
} {
	var calls []struct {
		In1 *ec2.DescribeClientVpnTargetNetworksInput
	}
	lockec2ClientMockDescribeClientVpnTargetNetworks.RLock()
	calls = mock.calls.DescribeClientVpnTargetNetworks
	lockec2ClientMockDescribeClientVpnTargetNetworks.RUnlock()
	return calls
}

// DescribeClientVpnTargetNetworksPages calls DescribeClientVpnTargetNetworksPagesFunc.
func (mock *ec2ClientMock) DescribeClientVpnTargetNetworksPages(in1 *ec2.DescribeClientVpnTargetNetworksInput, in2 func(*ec2.DescribeClientVpnTargetNetworksOutput, bool) bool) error {
	if mock.DescribeClientVpnTargetNetworksPagesFunc == nil {
		panic("ec2ClientMock.DescribeClientVpnTargetNetworksPagesFunc: method is nil but ec2Client.DescribeClientVpnTargetNetworksPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeClientVpnTargetNetworksInput
		In2 func(*ec2.DescribeClientVpnTargetNetworksOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeClientVpnTargetNetworksPages.Lock()
	mock.calls.DescribeClientVpnTargetNetworksPages = append(mock.calls.DescribeClientVpnTargetNetworksPages, callInfo)
	lockec2ClientMockDescribeClientVpnTargetNetworksPages.Unlock()
	return mock.DescribeClientVpnTargetNetworksPagesFunc(in1, in2)
}

// DescribeClientVpnTargetNetworksPagesCalls gets all the calls that were made to DescribeClientVpnTargetNetworksPages.
// Check the length with:
//     len(mockedec2Client.DescribeClientVpnTargetNetworksPagesCalls())
func (mock *ec2ClientMock) DescribeClientVpnTargetNetworksPagesCalls() []struct {
	In1 *ec2.DescribeClientVpnTargetNetworksInput
	In2 func(*ec2.DescribeClientVpnTargetNetworksOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeClientVpnTargetNetworksInput
		In2 func(*ec2.DescribeClientVpnTargetNetworksOutput, bool) bool
	}
	lockec2ClientMockDescribeClientVpnTargetNetworksPages.RLock()
	calls = mock.calls.DescribeClientVpnTargetNetworksPages
	lockec2ClientMockDescribeClientVpnTargetNetworksPages.RUnlock()
	return calls
}

// DescribeClientVpnTargetNetworksPagesWithContext calls DescribeClientVpnTargetNetworksPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeClientVpnTargetNetworksPagesWithContext(in1 context.Context, in2 *ec2.DescribeClientVpnTargetNetworksInput, in3 func(*ec2.DescribeClientVpnTargetNetworksOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeClientVpnTargetNetworksPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeClientVpnTargetNetworksPagesWithContextFunc: method is nil but ec2Client.DescribeClientVpnTargetNetworksPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeClientVpnTargetNetworksInput
		In3 func(*ec2.DescribeClientVpnTargetNetworksOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeClientVpnTargetNetworksPagesWithContext.Lock()
	mock.calls.DescribeClientVpnTargetNetworksPagesWithContext = append(mock.calls.DescribeClientVpnTargetNetworksPagesWithContext, callInfo)
	lockec2ClientMockDescribeClientVpnTargetNetworksPagesWithContext.Unlock()
	return mock.DescribeClientVpnTargetNetworksPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeClientVpnTargetNetworksPagesWithContextCalls gets all the calls that were made to DescribeClientVpnTargetNetworksPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeClientVpnTargetNetworksPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeClientVpnTargetNetworksPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeClientVpnTargetNetworksInput
	In3 func(*ec2.DescribeClientVpnTargetNetworksOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeClientVpnTargetNetworksInput
		In3 func(*ec2.DescribeClientVpnTargetNetworksOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeClientVpnTargetNetworksPagesWithContext.RLock()
	calls = mock.calls.DescribeClientVpnTargetNetworksPagesWithContext
	lockec2ClientMockDescribeClientVpnTargetNetworksPagesWithContext.RUnlock()
	return calls
}

// DescribeClientVpnTargetNetworksRequest calls DescribeClientVpnTargetNetworksRequestFunc.
func (mock *ec2ClientMock) DescribeClientVpnTargetNetworksRequest(in1 *ec2.DescribeClientVpnTargetNetworksInput) (*request.Request, *ec2.DescribeClientVpnTargetNetworksOutput) {
	if mock.DescribeClientVpnTargetNetworksRequestFunc == nil {
		panic("ec2ClientMock.DescribeClientVpnTargetNetworksRequestFunc: method is nil but ec2Client.DescribeClientVpnTargetNetworksRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeClientVpnTargetNetworksInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeClientVpnTargetNetworksRequest.Lock()
	mock.calls.DescribeClientVpnTargetNetworksRequest = append(mock.calls.DescribeClientVpnTargetNetworksRequest, callInfo)
	lockec2ClientMockDescribeClientVpnTargetNetworksRequest.Unlock()
	return mock.DescribeClientVpnTargetNetworksRequestFunc(in1)
}

// DescribeClientVpnTargetNetworksRequestCalls gets all the calls that were made to DescribeClientVpnTargetNetworksRequest.
// Check the length with:
//     len(mockedec2Client.DescribeClientVpnTargetNetworksRequestCalls())
func (mock *ec2ClientMock) DescribeClientVpnTargetNetworksRequestCalls() []struct {
	In1 *ec2.DescribeClientVpnTargetNetworksInput
} {
	var calls []struct {
		In1 *ec2.DescribeClientVpnTargetNetworksInput
	}
	lockec2ClientMockDescribeClientVpnTargetNetworksRequest.RLock()
	calls = mock.calls.DescribeClientVpnTargetNetworksRequest
	lockec2ClientMockDescribeClientVpnTargetNetworksRequest.RUnlock()
	return calls
}

// DescribeClientVpnTargetNetworksWithContext calls DescribeClientVpnTargetNetworksWithContextFunc.
func (mock *ec2ClientMock) DescribeClientVpnTargetNetworksWithContext(in1 context.Context, in2 *ec2.DescribeClientVpnTargetNetworksInput, in3 ...request.Option) (*ec2.DescribeClientVpnTargetNetworksOutput, error) {
	if mock.DescribeClientVpnTargetNetworksWithContextFunc == nil {
		panic("ec2ClientMock.DescribeClientVpnTargetNetworksWithContextFunc: method is nil but ec2Client.DescribeClientVpnTargetNetworksWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeClientVpnTargetNetworksInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeClientVpnTargetNetworksWithContext.Lock()
	mock.calls.DescribeClientVpnTargetNetworksWithContext = append(mock.calls.DescribeClientVpnTargetNetworksWithContext, callInfo)
	lockec2ClientMockDescribeClientVpnTargetNetworksWithContext.Unlock()
	return mock.DescribeClientVpnTargetNetworksWithContextFunc(in1, in2, in3...)
}

// DescribeClientVpnTargetNetworksWithContextCalls gets all the calls that were made to DescribeClientVpnTargetNetworksWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeClientVpnTargetNetworksWithContextCalls())
func (mock *ec2ClientMock) DescribeClientVpnTargetNetworksWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeClientVpnTargetNetworksInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeClientVpnTargetNetworksInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeClientVpnTargetNetworksWithContext.RLock()
	calls = mock.calls.DescribeClientVpnTargetNetworksWithContext
	lockec2ClientMockDescribeClientVpnTargetNetworksWithContext.RUnlock()
	return calls
}

// DescribeCoipPools calls DescribeCoipPoolsFunc.
func (mock *ec2ClientMock) DescribeCoipPools(in1 *ec2.DescribeCoipPoolsInput) (*ec2.DescribeCoipPoolsOutput, error) {
	if mock.DescribeCoipPoolsFunc == nil {
		panic("ec2ClientMock.DescribeCoipPoolsFunc: method is nil but ec2Client.DescribeCoipPools was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeCoipPoolsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeCoipPools.Lock()
	mock.calls.DescribeCoipPools = append(mock.calls.DescribeCoipPools, callInfo)
	lockec2ClientMockDescribeCoipPools.Unlock()
	return mock.DescribeCoipPoolsFunc(in1)
}

// DescribeCoipPoolsCalls gets all the calls that were made to DescribeCoipPools.
// Check the length with:
//     len(mockedec2Client.DescribeCoipPoolsCalls())
func (mock *ec2ClientMock) DescribeCoipPoolsCalls() []struct {
	In1 *ec2.DescribeCoipPoolsInput
} {
	var calls []struct {
		In1 *ec2.DescribeCoipPoolsInput
	}
	lockec2ClientMockDescribeCoipPools.RLock()
	calls = mock.calls.DescribeCoipPools
	lockec2ClientMockDescribeCoipPools.RUnlock()
	return calls
}

// DescribeCoipPoolsRequest calls DescribeCoipPoolsRequestFunc.
func (mock *ec2ClientMock) DescribeCoipPoolsRequest(in1 *ec2.DescribeCoipPoolsInput) (*request.Request, *ec2.DescribeCoipPoolsOutput) {
	if mock.DescribeCoipPoolsRequestFunc == nil {
		panic("ec2ClientMock.DescribeCoipPoolsRequestFunc: method is nil but ec2Client.DescribeCoipPoolsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeCoipPoolsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeCoipPoolsRequest.Lock()
	mock.calls.DescribeCoipPoolsRequest = append(mock.calls.DescribeCoipPoolsRequest, callInfo)
	lockec2ClientMockDescribeCoipPoolsRequest.Unlock()
	return mock.DescribeCoipPoolsRequestFunc(in1)
}

// DescribeCoipPoolsRequestCalls gets all the calls that were made to DescribeCoipPoolsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeCoipPoolsRequestCalls())
func (mock *ec2ClientMock) DescribeCoipPoolsRequestCalls() []struct {
	In1 *ec2.DescribeCoipPoolsInput
} {
	var calls []struct {
		In1 *ec2.DescribeCoipPoolsInput
	}
	lockec2ClientMockDescribeCoipPoolsRequest.RLock()
	calls = mock.calls.DescribeCoipPoolsRequest
	lockec2ClientMockDescribeCoipPoolsRequest.RUnlock()
	return calls
}

// DescribeCoipPoolsWithContext calls DescribeCoipPoolsWithContextFunc.
func (mock *ec2ClientMock) DescribeCoipPoolsWithContext(in1 context.Context, in2 *ec2.DescribeCoipPoolsInput, in3 ...request.Option) (*ec2.DescribeCoipPoolsOutput, error) {
	if mock.DescribeCoipPoolsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeCoipPoolsWithContextFunc: method is nil but ec2Client.DescribeCoipPoolsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeCoipPoolsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeCoipPoolsWithContext.Lock()
	mock.calls.DescribeCoipPoolsWithContext = append(mock.calls.DescribeCoipPoolsWithContext, callInfo)
	lockec2ClientMockDescribeCoipPoolsWithContext.Unlock()
	return mock.DescribeCoipPoolsWithContextFunc(in1, in2, in3...)
}

// DescribeCoipPoolsWithContextCalls gets all the calls that were made to DescribeCoipPoolsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeCoipPoolsWithContextCalls())
func (mock *ec2ClientMock) DescribeCoipPoolsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeCoipPoolsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeCoipPoolsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeCoipPoolsWithContext.RLock()
	calls = mock.calls.DescribeCoipPoolsWithContext
	lockec2ClientMockDescribeCoipPoolsWithContext.RUnlock()
	return calls
}

// DescribeConversionTasks calls DescribeConversionTasksFunc.
func (mock *ec2ClientMock) DescribeConversionTasks(in1 *ec2.DescribeConversionTasksInput) (*ec2.DescribeConversionTasksOutput, error) {
	if mock.DescribeConversionTasksFunc == nil {
		panic("ec2ClientMock.DescribeConversionTasksFunc: method is nil but ec2Client.DescribeConversionTasks was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeConversionTasksInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeConversionTasks.Lock()
	mock.calls.DescribeConversionTasks = append(mock.calls.DescribeConversionTasks, callInfo)
	lockec2ClientMockDescribeConversionTasks.Unlock()
	return mock.DescribeConversionTasksFunc(in1)
}

// DescribeConversionTasksCalls gets all the calls that were made to DescribeConversionTasks.
// Check the length with:
//     len(mockedec2Client.DescribeConversionTasksCalls())
func (mock *ec2ClientMock) DescribeConversionTasksCalls() []struct {
	In1 *ec2.DescribeConversionTasksInput
} {
	var calls []struct {
		In1 *ec2.DescribeConversionTasksInput
	}
	lockec2ClientMockDescribeConversionTasks.RLock()
	calls = mock.calls.DescribeConversionTasks
	lockec2ClientMockDescribeConversionTasks.RUnlock()
	return calls
}

// DescribeConversionTasksRequest calls DescribeConversionTasksRequestFunc.
func (mock *ec2ClientMock) DescribeConversionTasksRequest(in1 *ec2.DescribeConversionTasksInput) (*request.Request, *ec2.DescribeConversionTasksOutput) {
	if mock.DescribeConversionTasksRequestFunc == nil {
		panic("ec2ClientMock.DescribeConversionTasksRequestFunc: method is nil but ec2Client.DescribeConversionTasksRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeConversionTasksInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeConversionTasksRequest.Lock()
	mock.calls.DescribeConversionTasksRequest = append(mock.calls.DescribeConversionTasksRequest, callInfo)
	lockec2ClientMockDescribeConversionTasksRequest.Unlock()
	return mock.DescribeConversionTasksRequestFunc(in1)
}

// DescribeConversionTasksRequestCalls gets all the calls that were made to DescribeConversionTasksRequest.
// Check the length with:
//     len(mockedec2Client.DescribeConversionTasksRequestCalls())
func (mock *ec2ClientMock) DescribeConversionTasksRequestCalls() []struct {
	In1 *ec2.DescribeConversionTasksInput
} {
	var calls []struct {
		In1 *ec2.DescribeConversionTasksInput
	}
	lockec2ClientMockDescribeConversionTasksRequest.RLock()
	calls = mock.calls.DescribeConversionTasksRequest
	lockec2ClientMockDescribeConversionTasksRequest.RUnlock()
	return calls
}

// DescribeConversionTasksWithContext calls DescribeConversionTasksWithContextFunc.
func (mock *ec2ClientMock) DescribeConversionTasksWithContext(in1 context.Context, in2 *ec2.DescribeConversionTasksInput, in3 ...request.Option) (*ec2.DescribeConversionTasksOutput, error) {
	if mock.DescribeConversionTasksWithContextFunc == nil {
		panic("ec2ClientMock.DescribeConversionTasksWithContextFunc: method is nil but ec2Client.DescribeConversionTasksWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeConversionTasksInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeConversionTasksWithContext.Lock()
	mock.calls.DescribeConversionTasksWithContext = append(mock.calls.DescribeConversionTasksWithContext, callInfo)
	lockec2ClientMockDescribeConversionTasksWithContext.Unlock()
	return mock.DescribeConversionTasksWithContextFunc(in1, in2, in3...)
}

// DescribeConversionTasksWithContextCalls gets all the calls that were made to DescribeConversionTasksWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeConversionTasksWithContextCalls())
func (mock *ec2ClientMock) DescribeConversionTasksWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeConversionTasksInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeConversionTasksInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeConversionTasksWithContext.RLock()
	calls = mock.calls.DescribeConversionTasksWithContext
	lockec2ClientMockDescribeConversionTasksWithContext.RUnlock()
	return calls
}

// DescribeCustomerGateways calls DescribeCustomerGatewaysFunc.
func (mock *ec2ClientMock) DescribeCustomerGateways(in1 *ec2.DescribeCustomerGatewaysInput) (*ec2.DescribeCustomerGatewaysOutput, error) {
	if mock.DescribeCustomerGatewaysFunc == nil {
		panic("ec2ClientMock.DescribeCustomerGatewaysFunc: method is nil but ec2Client.DescribeCustomerGateways was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeCustomerGatewaysInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeCustomerGateways.Lock()
	mock.calls.DescribeCustomerGateways = append(mock.calls.DescribeCustomerGateways, callInfo)
	lockec2ClientMockDescribeCustomerGateways.Unlock()
	return mock.DescribeCustomerGatewaysFunc(in1)
}

// DescribeCustomerGatewaysCalls gets all the calls that were made to DescribeCustomerGateways.
// Check the length with:
//     len(mockedec2Client.DescribeCustomerGatewaysCalls())
func (mock *ec2ClientMock) DescribeCustomerGatewaysCalls() []struct {
	In1 *ec2.DescribeCustomerGatewaysInput
} {
	var calls []struct {
		In1 *ec2.DescribeCustomerGatewaysInput
	}
	lockec2ClientMockDescribeCustomerGateways.RLock()
	calls = mock.calls.DescribeCustomerGateways
	lockec2ClientMockDescribeCustomerGateways.RUnlock()
	return calls
}

// DescribeCustomerGatewaysRequest calls DescribeCustomerGatewaysRequestFunc.
func (mock *ec2ClientMock) DescribeCustomerGatewaysRequest(in1 *ec2.DescribeCustomerGatewaysInput) (*request.Request, *ec2.DescribeCustomerGatewaysOutput) {
	if mock.DescribeCustomerGatewaysRequestFunc == nil {
		panic("ec2ClientMock.DescribeCustomerGatewaysRequestFunc: method is nil but ec2Client.DescribeCustomerGatewaysRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeCustomerGatewaysInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeCustomerGatewaysRequest.Lock()
	mock.calls.DescribeCustomerGatewaysRequest = append(mock.calls.DescribeCustomerGatewaysRequest, callInfo)
	lockec2ClientMockDescribeCustomerGatewaysRequest.Unlock()
	return mock.DescribeCustomerGatewaysRequestFunc(in1)
}

// DescribeCustomerGatewaysRequestCalls gets all the calls that were made to DescribeCustomerGatewaysRequest.
// Check the length with:
//     len(mockedec2Client.DescribeCustomerGatewaysRequestCalls())
func (mock *ec2ClientMock) DescribeCustomerGatewaysRequestCalls() []struct {
	In1 *ec2.DescribeCustomerGatewaysInput
} {
	var calls []struct {
		In1 *ec2.DescribeCustomerGatewaysInput
	}
	lockec2ClientMockDescribeCustomerGatewaysRequest.RLock()
	calls = mock.calls.DescribeCustomerGatewaysRequest
	lockec2ClientMockDescribeCustomerGatewaysRequest.RUnlock()
	return calls
}

// DescribeCustomerGatewaysWithContext calls DescribeCustomerGatewaysWithContextFunc.
func (mock *ec2ClientMock) DescribeCustomerGatewaysWithContext(in1 context.Context, in2 *ec2.DescribeCustomerGatewaysInput, in3 ...request.Option) (*ec2.DescribeCustomerGatewaysOutput, error) {
	if mock.DescribeCustomerGatewaysWithContextFunc == nil {
		panic("ec2ClientMock.DescribeCustomerGatewaysWithContextFunc: method is nil but ec2Client.DescribeCustomerGatewaysWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeCustomerGatewaysInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeCustomerGatewaysWithContext.Lock()
	mock.calls.DescribeCustomerGatewaysWithContext = append(mock.calls.DescribeCustomerGatewaysWithContext, callInfo)
	lockec2ClientMockDescribeCustomerGatewaysWithContext.Unlock()
	return mock.DescribeCustomerGatewaysWithContextFunc(in1, in2, in3...)
}

// DescribeCustomerGatewaysWithContextCalls gets all the calls that were made to DescribeCustomerGatewaysWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeCustomerGatewaysWithContextCalls())
func (mock *ec2ClientMock) DescribeCustomerGatewaysWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeCustomerGatewaysInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeCustomerGatewaysInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeCustomerGatewaysWithContext.RLock()
	calls = mock.calls.DescribeCustomerGatewaysWithContext
	lockec2ClientMockDescribeCustomerGatewaysWithContext.RUnlock()
	return calls
}

// DescribeDhcpOptions calls DescribeDhcpOptionsFunc.
func (mock *ec2ClientMock) DescribeDhcpOptions(in1 *ec2.DescribeDhcpOptionsInput) (*ec2.DescribeDhcpOptionsOutput, error) {
	if mock.DescribeDhcpOptionsFunc == nil {
		panic("ec2ClientMock.DescribeDhcpOptionsFunc: method is nil but ec2Client.DescribeDhcpOptions was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeDhcpOptionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeDhcpOptions.Lock()
	mock.calls.DescribeDhcpOptions = append(mock.calls.DescribeDhcpOptions, callInfo)
	lockec2ClientMockDescribeDhcpOptions.Unlock()
	return mock.DescribeDhcpOptionsFunc(in1)
}

// DescribeDhcpOptionsCalls gets all the calls that were made to DescribeDhcpOptions.
// Check the length with:
//     len(mockedec2Client.DescribeDhcpOptionsCalls())
func (mock *ec2ClientMock) DescribeDhcpOptionsCalls() []struct {
	In1 *ec2.DescribeDhcpOptionsInput
} {
	var calls []struct {
		In1 *ec2.DescribeDhcpOptionsInput
	}
	lockec2ClientMockDescribeDhcpOptions.RLock()
	calls = mock.calls.DescribeDhcpOptions
	lockec2ClientMockDescribeDhcpOptions.RUnlock()
	return calls
}

// DescribeDhcpOptionsPages calls DescribeDhcpOptionsPagesFunc.
func (mock *ec2ClientMock) DescribeDhcpOptionsPages(in1 *ec2.DescribeDhcpOptionsInput, in2 func(*ec2.DescribeDhcpOptionsOutput, bool) bool) error {
	if mock.DescribeDhcpOptionsPagesFunc == nil {
		panic("ec2ClientMock.DescribeDhcpOptionsPagesFunc: method is nil but ec2Client.DescribeDhcpOptionsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeDhcpOptionsInput
		In2 func(*ec2.DescribeDhcpOptionsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeDhcpOptionsPages.Lock()
	mock.calls.DescribeDhcpOptionsPages = append(mock.calls.DescribeDhcpOptionsPages, callInfo)
	lockec2ClientMockDescribeDhcpOptionsPages.Unlock()
	return mock.DescribeDhcpOptionsPagesFunc(in1, in2)
}

// DescribeDhcpOptionsPagesCalls gets all the calls that were made to DescribeDhcpOptionsPages.
// Check the length with:
//     len(mockedec2Client.DescribeDhcpOptionsPagesCalls())
func (mock *ec2ClientMock) DescribeDhcpOptionsPagesCalls() []struct {
	In1 *ec2.DescribeDhcpOptionsInput
	In2 func(*ec2.DescribeDhcpOptionsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeDhcpOptionsInput
		In2 func(*ec2.DescribeDhcpOptionsOutput, bool) bool
	}
	lockec2ClientMockDescribeDhcpOptionsPages.RLock()
	calls = mock.calls.DescribeDhcpOptionsPages
	lockec2ClientMockDescribeDhcpOptionsPages.RUnlock()
	return calls
}

// DescribeDhcpOptionsPagesWithContext calls DescribeDhcpOptionsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeDhcpOptionsPagesWithContext(in1 context.Context, in2 *ec2.DescribeDhcpOptionsInput, in3 func(*ec2.DescribeDhcpOptionsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeDhcpOptionsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeDhcpOptionsPagesWithContextFunc: method is nil but ec2Client.DescribeDhcpOptionsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeDhcpOptionsInput
		In3 func(*ec2.DescribeDhcpOptionsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeDhcpOptionsPagesWithContext.Lock()
	mock.calls.DescribeDhcpOptionsPagesWithContext = append(mock.calls.DescribeDhcpOptionsPagesWithContext, callInfo)
	lockec2ClientMockDescribeDhcpOptionsPagesWithContext.Unlock()
	return mock.DescribeDhcpOptionsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeDhcpOptionsPagesWithContextCalls gets all the calls that were made to DescribeDhcpOptionsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeDhcpOptionsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeDhcpOptionsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeDhcpOptionsInput
	In3 func(*ec2.DescribeDhcpOptionsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeDhcpOptionsInput
		In3 func(*ec2.DescribeDhcpOptionsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeDhcpOptionsPagesWithContext.RLock()
	calls = mock.calls.DescribeDhcpOptionsPagesWithContext
	lockec2ClientMockDescribeDhcpOptionsPagesWithContext.RUnlock()
	return calls
}

// DescribeDhcpOptionsRequest calls DescribeDhcpOptionsRequestFunc.
func (mock *ec2ClientMock) DescribeDhcpOptionsRequest(in1 *ec2.DescribeDhcpOptionsInput) (*request.Request, *ec2.DescribeDhcpOptionsOutput) {
	if mock.DescribeDhcpOptionsRequestFunc == nil {
		panic("ec2ClientMock.DescribeDhcpOptionsRequestFunc: method is nil but ec2Client.DescribeDhcpOptionsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeDhcpOptionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeDhcpOptionsRequest.Lock()
	mock.calls.DescribeDhcpOptionsRequest = append(mock.calls.DescribeDhcpOptionsRequest, callInfo)
	lockec2ClientMockDescribeDhcpOptionsRequest.Unlock()
	return mock.DescribeDhcpOptionsRequestFunc(in1)
}

// DescribeDhcpOptionsRequestCalls gets all the calls that were made to DescribeDhcpOptionsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeDhcpOptionsRequestCalls())
func (mock *ec2ClientMock) DescribeDhcpOptionsRequestCalls() []struct {
	In1 *ec2.DescribeDhcpOptionsInput
} {
	var calls []struct {
		In1 *ec2.DescribeDhcpOptionsInput
	}
	lockec2ClientMockDescribeDhcpOptionsRequest.RLock()
	calls = mock.calls.DescribeDhcpOptionsRequest
	lockec2ClientMockDescribeDhcpOptionsRequest.RUnlock()
	return calls
}

// DescribeDhcpOptionsWithContext calls DescribeDhcpOptionsWithContextFunc.
func (mock *ec2ClientMock) DescribeDhcpOptionsWithContext(in1 context.Context, in2 *ec2.DescribeDhcpOptionsInput, in3 ...request.Option) (*ec2.DescribeDhcpOptionsOutput, error) {
	if mock.DescribeDhcpOptionsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeDhcpOptionsWithContextFunc: method is nil but ec2Client.DescribeDhcpOptionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeDhcpOptionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeDhcpOptionsWithContext.Lock()
	mock.calls.DescribeDhcpOptionsWithContext = append(mock.calls.DescribeDhcpOptionsWithContext, callInfo)
	lockec2ClientMockDescribeDhcpOptionsWithContext.Unlock()
	return mock.DescribeDhcpOptionsWithContextFunc(in1, in2, in3...)
}

// DescribeDhcpOptionsWithContextCalls gets all the calls that were made to DescribeDhcpOptionsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeDhcpOptionsWithContextCalls())
func (mock *ec2ClientMock) DescribeDhcpOptionsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeDhcpOptionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeDhcpOptionsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeDhcpOptionsWithContext.RLock()
	calls = mock.calls.DescribeDhcpOptionsWithContext
	lockec2ClientMockDescribeDhcpOptionsWithContext.RUnlock()
	return calls
}

// DescribeEgressOnlyInternetGateways calls DescribeEgressOnlyInternetGatewaysFunc.
func (mock *ec2ClientMock) DescribeEgressOnlyInternetGateways(in1 *ec2.DescribeEgressOnlyInternetGatewaysInput) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error) {
	if mock.DescribeEgressOnlyInternetGatewaysFunc == nil {
		panic("ec2ClientMock.DescribeEgressOnlyInternetGatewaysFunc: method is nil but ec2Client.DescribeEgressOnlyInternetGateways was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeEgressOnlyInternetGatewaysInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeEgressOnlyInternetGateways.Lock()
	mock.calls.DescribeEgressOnlyInternetGateways = append(mock.calls.DescribeEgressOnlyInternetGateways, callInfo)
	lockec2ClientMockDescribeEgressOnlyInternetGateways.Unlock()
	return mock.DescribeEgressOnlyInternetGatewaysFunc(in1)
}

// DescribeEgressOnlyInternetGatewaysCalls gets all the calls that were made to DescribeEgressOnlyInternetGateways.
// Check the length with:
//     len(mockedec2Client.DescribeEgressOnlyInternetGatewaysCalls())
func (mock *ec2ClientMock) DescribeEgressOnlyInternetGatewaysCalls() []struct {
	In1 *ec2.DescribeEgressOnlyInternetGatewaysInput
} {
	var calls []struct {
		In1 *ec2.DescribeEgressOnlyInternetGatewaysInput
	}
	lockec2ClientMockDescribeEgressOnlyInternetGateways.RLock()
	calls = mock.calls.DescribeEgressOnlyInternetGateways
	lockec2ClientMockDescribeEgressOnlyInternetGateways.RUnlock()
	return calls
}

// DescribeEgressOnlyInternetGatewaysPages calls DescribeEgressOnlyInternetGatewaysPagesFunc.
func (mock *ec2ClientMock) DescribeEgressOnlyInternetGatewaysPages(in1 *ec2.DescribeEgressOnlyInternetGatewaysInput, in2 func(*ec2.DescribeEgressOnlyInternetGatewaysOutput, bool) bool) error {
	if mock.DescribeEgressOnlyInternetGatewaysPagesFunc == nil {
		panic("ec2ClientMock.DescribeEgressOnlyInternetGatewaysPagesFunc: method is nil but ec2Client.DescribeEgressOnlyInternetGatewaysPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeEgressOnlyInternetGatewaysInput
		In2 func(*ec2.DescribeEgressOnlyInternetGatewaysOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeEgressOnlyInternetGatewaysPages.Lock()
	mock.calls.DescribeEgressOnlyInternetGatewaysPages = append(mock.calls.DescribeEgressOnlyInternetGatewaysPages, callInfo)
	lockec2ClientMockDescribeEgressOnlyInternetGatewaysPages.Unlock()
	return mock.DescribeEgressOnlyInternetGatewaysPagesFunc(in1, in2)
}

// DescribeEgressOnlyInternetGatewaysPagesCalls gets all the calls that were made to DescribeEgressOnlyInternetGatewaysPages.
// Check the length with:
//     len(mockedec2Client.DescribeEgressOnlyInternetGatewaysPagesCalls())
func (mock *ec2ClientMock) DescribeEgressOnlyInternetGatewaysPagesCalls() []struct {
	In1 *ec2.DescribeEgressOnlyInternetGatewaysInput
	In2 func(*ec2.DescribeEgressOnlyInternetGatewaysOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeEgressOnlyInternetGatewaysInput
		In2 func(*ec2.DescribeEgressOnlyInternetGatewaysOutput, bool) bool
	}
	lockec2ClientMockDescribeEgressOnlyInternetGatewaysPages.RLock()
	calls = mock.calls.DescribeEgressOnlyInternetGatewaysPages
	lockec2ClientMockDescribeEgressOnlyInternetGatewaysPages.RUnlock()
	return calls
}

// DescribeEgressOnlyInternetGatewaysPagesWithContext calls DescribeEgressOnlyInternetGatewaysPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeEgressOnlyInternetGatewaysPagesWithContext(in1 context.Context, in2 *ec2.DescribeEgressOnlyInternetGatewaysInput, in3 func(*ec2.DescribeEgressOnlyInternetGatewaysOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeEgressOnlyInternetGatewaysPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeEgressOnlyInternetGatewaysPagesWithContextFunc: method is nil but ec2Client.DescribeEgressOnlyInternetGatewaysPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeEgressOnlyInternetGatewaysInput
		In3 func(*ec2.DescribeEgressOnlyInternetGatewaysOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeEgressOnlyInternetGatewaysPagesWithContext.Lock()
	mock.calls.DescribeEgressOnlyInternetGatewaysPagesWithContext = append(mock.calls.DescribeEgressOnlyInternetGatewaysPagesWithContext, callInfo)
	lockec2ClientMockDescribeEgressOnlyInternetGatewaysPagesWithContext.Unlock()
	return mock.DescribeEgressOnlyInternetGatewaysPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeEgressOnlyInternetGatewaysPagesWithContextCalls gets all the calls that were made to DescribeEgressOnlyInternetGatewaysPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeEgressOnlyInternetGatewaysPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeEgressOnlyInternetGatewaysPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeEgressOnlyInternetGatewaysInput
	In3 func(*ec2.DescribeEgressOnlyInternetGatewaysOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeEgressOnlyInternetGatewaysInput
		In3 func(*ec2.DescribeEgressOnlyInternetGatewaysOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeEgressOnlyInternetGatewaysPagesWithContext.RLock()
	calls = mock.calls.DescribeEgressOnlyInternetGatewaysPagesWithContext
	lockec2ClientMockDescribeEgressOnlyInternetGatewaysPagesWithContext.RUnlock()
	return calls
}

// DescribeEgressOnlyInternetGatewaysRequest calls DescribeEgressOnlyInternetGatewaysRequestFunc.
func (mock *ec2ClientMock) DescribeEgressOnlyInternetGatewaysRequest(in1 *ec2.DescribeEgressOnlyInternetGatewaysInput) (*request.Request, *ec2.DescribeEgressOnlyInternetGatewaysOutput) {
	if mock.DescribeEgressOnlyInternetGatewaysRequestFunc == nil {
		panic("ec2ClientMock.DescribeEgressOnlyInternetGatewaysRequestFunc: method is nil but ec2Client.DescribeEgressOnlyInternetGatewaysRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeEgressOnlyInternetGatewaysInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeEgressOnlyInternetGatewaysRequest.Lock()
	mock.calls.DescribeEgressOnlyInternetGatewaysRequest = append(mock.calls.DescribeEgressOnlyInternetGatewaysRequest, callInfo)
	lockec2ClientMockDescribeEgressOnlyInternetGatewaysRequest.Unlock()
	return mock.DescribeEgressOnlyInternetGatewaysRequestFunc(in1)
}

// DescribeEgressOnlyInternetGatewaysRequestCalls gets all the calls that were made to DescribeEgressOnlyInternetGatewaysRequest.
// Check the length with:
//     len(mockedec2Client.DescribeEgressOnlyInternetGatewaysRequestCalls())
func (mock *ec2ClientMock) DescribeEgressOnlyInternetGatewaysRequestCalls() []struct {
	In1 *ec2.DescribeEgressOnlyInternetGatewaysInput
} {
	var calls []struct {
		In1 *ec2.DescribeEgressOnlyInternetGatewaysInput
	}
	lockec2ClientMockDescribeEgressOnlyInternetGatewaysRequest.RLock()
	calls = mock.calls.DescribeEgressOnlyInternetGatewaysRequest
	lockec2ClientMockDescribeEgressOnlyInternetGatewaysRequest.RUnlock()
	return calls
}

// DescribeEgressOnlyInternetGatewaysWithContext calls DescribeEgressOnlyInternetGatewaysWithContextFunc.
func (mock *ec2ClientMock) DescribeEgressOnlyInternetGatewaysWithContext(in1 context.Context, in2 *ec2.DescribeEgressOnlyInternetGatewaysInput, in3 ...request.Option) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error) {
	if mock.DescribeEgressOnlyInternetGatewaysWithContextFunc == nil {
		panic("ec2ClientMock.DescribeEgressOnlyInternetGatewaysWithContextFunc: method is nil but ec2Client.DescribeEgressOnlyInternetGatewaysWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeEgressOnlyInternetGatewaysInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeEgressOnlyInternetGatewaysWithContext.Lock()
	mock.calls.DescribeEgressOnlyInternetGatewaysWithContext = append(mock.calls.DescribeEgressOnlyInternetGatewaysWithContext, callInfo)
	lockec2ClientMockDescribeEgressOnlyInternetGatewaysWithContext.Unlock()
	return mock.DescribeEgressOnlyInternetGatewaysWithContextFunc(in1, in2, in3...)
}

// DescribeEgressOnlyInternetGatewaysWithContextCalls gets all the calls that were made to DescribeEgressOnlyInternetGatewaysWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeEgressOnlyInternetGatewaysWithContextCalls())
func (mock *ec2ClientMock) DescribeEgressOnlyInternetGatewaysWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeEgressOnlyInternetGatewaysInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeEgressOnlyInternetGatewaysInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeEgressOnlyInternetGatewaysWithContext.RLock()
	calls = mock.calls.DescribeEgressOnlyInternetGatewaysWithContext
	lockec2ClientMockDescribeEgressOnlyInternetGatewaysWithContext.RUnlock()
	return calls
}

// DescribeElasticGpus calls DescribeElasticGpusFunc.
func (mock *ec2ClientMock) DescribeElasticGpus(in1 *ec2.DescribeElasticGpusInput) (*ec2.DescribeElasticGpusOutput, error) {
	if mock.DescribeElasticGpusFunc == nil {
		panic("ec2ClientMock.DescribeElasticGpusFunc: method is nil but ec2Client.DescribeElasticGpus was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeElasticGpusInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeElasticGpus.Lock()
	mock.calls.DescribeElasticGpus = append(mock.calls.DescribeElasticGpus, callInfo)
	lockec2ClientMockDescribeElasticGpus.Unlock()
	return mock.DescribeElasticGpusFunc(in1)
}

// DescribeElasticGpusCalls gets all the calls that were made to DescribeElasticGpus.
// Check the length with:
//     len(mockedec2Client.DescribeElasticGpusCalls())
func (mock *ec2ClientMock) DescribeElasticGpusCalls() []struct {
	In1 *ec2.DescribeElasticGpusInput
} {
	var calls []struct {
		In1 *ec2.DescribeElasticGpusInput
	}
	lockec2ClientMockDescribeElasticGpus.RLock()
	calls = mock.calls.DescribeElasticGpus
	lockec2ClientMockDescribeElasticGpus.RUnlock()
	return calls
}

// DescribeElasticGpusRequest calls DescribeElasticGpusRequestFunc.
func (mock *ec2ClientMock) DescribeElasticGpusRequest(in1 *ec2.DescribeElasticGpusInput) (*request.Request, *ec2.DescribeElasticGpusOutput) {
	if mock.DescribeElasticGpusRequestFunc == nil {
		panic("ec2ClientMock.DescribeElasticGpusRequestFunc: method is nil but ec2Client.DescribeElasticGpusRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeElasticGpusInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeElasticGpusRequest.Lock()
	mock.calls.DescribeElasticGpusRequest = append(mock.calls.DescribeElasticGpusRequest, callInfo)
	lockec2ClientMockDescribeElasticGpusRequest.Unlock()
	return mock.DescribeElasticGpusRequestFunc(in1)
}

// DescribeElasticGpusRequestCalls gets all the calls that were made to DescribeElasticGpusRequest.
// Check the length with:
//     len(mockedec2Client.DescribeElasticGpusRequestCalls())
func (mock *ec2ClientMock) DescribeElasticGpusRequestCalls() []struct {
	In1 *ec2.DescribeElasticGpusInput
} {
	var calls []struct {
		In1 *ec2.DescribeElasticGpusInput
	}
	lockec2ClientMockDescribeElasticGpusRequest.RLock()
	calls = mock.calls.DescribeElasticGpusRequest
	lockec2ClientMockDescribeElasticGpusRequest.RUnlock()
	return calls
}

// DescribeElasticGpusWithContext calls DescribeElasticGpusWithContextFunc.
func (mock *ec2ClientMock) DescribeElasticGpusWithContext(in1 context.Context, in2 *ec2.DescribeElasticGpusInput, in3 ...request.Option) (*ec2.DescribeElasticGpusOutput, error) {
	if mock.DescribeElasticGpusWithContextFunc == nil {
		panic("ec2ClientMock.DescribeElasticGpusWithContextFunc: method is nil but ec2Client.DescribeElasticGpusWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeElasticGpusInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeElasticGpusWithContext.Lock()
	mock.calls.DescribeElasticGpusWithContext = append(mock.calls.DescribeElasticGpusWithContext, callInfo)
	lockec2ClientMockDescribeElasticGpusWithContext.Unlock()
	return mock.DescribeElasticGpusWithContextFunc(in1, in2, in3...)
}

// DescribeElasticGpusWithContextCalls gets all the calls that were made to DescribeElasticGpusWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeElasticGpusWithContextCalls())
func (mock *ec2ClientMock) DescribeElasticGpusWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeElasticGpusInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeElasticGpusInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeElasticGpusWithContext.RLock()
	calls = mock.calls.DescribeElasticGpusWithContext
	lockec2ClientMockDescribeElasticGpusWithContext.RUnlock()
	return calls
}

// DescribeExportImageTasks calls DescribeExportImageTasksFunc.
func (mock *ec2ClientMock) DescribeExportImageTasks(in1 *ec2.DescribeExportImageTasksInput) (*ec2.DescribeExportImageTasksOutput, error) {
	if mock.DescribeExportImageTasksFunc == nil {
		panic("ec2ClientMock.DescribeExportImageTasksFunc: method is nil but ec2Client.DescribeExportImageTasks was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeExportImageTasksInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeExportImageTasks.Lock()
	mock.calls.DescribeExportImageTasks = append(mock.calls.DescribeExportImageTasks, callInfo)
	lockec2ClientMockDescribeExportImageTasks.Unlock()
	return mock.DescribeExportImageTasksFunc(in1)
}

// DescribeExportImageTasksCalls gets all the calls that were made to DescribeExportImageTasks.
// Check the length with:
//     len(mockedec2Client.DescribeExportImageTasksCalls())
func (mock *ec2ClientMock) DescribeExportImageTasksCalls() []struct {
	In1 *ec2.DescribeExportImageTasksInput
} {
	var calls []struct {
		In1 *ec2.DescribeExportImageTasksInput
	}
	lockec2ClientMockDescribeExportImageTasks.RLock()
	calls = mock.calls.DescribeExportImageTasks
	lockec2ClientMockDescribeExportImageTasks.RUnlock()
	return calls
}

// DescribeExportImageTasksPages calls DescribeExportImageTasksPagesFunc.
func (mock *ec2ClientMock) DescribeExportImageTasksPages(in1 *ec2.DescribeExportImageTasksInput, in2 func(*ec2.DescribeExportImageTasksOutput, bool) bool) error {
	if mock.DescribeExportImageTasksPagesFunc == nil {
		panic("ec2ClientMock.DescribeExportImageTasksPagesFunc: method is nil but ec2Client.DescribeExportImageTasksPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeExportImageTasksInput
		In2 func(*ec2.DescribeExportImageTasksOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeExportImageTasksPages.Lock()
	mock.calls.DescribeExportImageTasksPages = append(mock.calls.DescribeExportImageTasksPages, callInfo)
	lockec2ClientMockDescribeExportImageTasksPages.Unlock()
	return mock.DescribeExportImageTasksPagesFunc(in1, in2)
}

// DescribeExportImageTasksPagesCalls gets all the calls that were made to DescribeExportImageTasksPages.
// Check the length with:
//     len(mockedec2Client.DescribeExportImageTasksPagesCalls())
func (mock *ec2ClientMock) DescribeExportImageTasksPagesCalls() []struct {
	In1 *ec2.DescribeExportImageTasksInput
	In2 func(*ec2.DescribeExportImageTasksOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeExportImageTasksInput
		In2 func(*ec2.DescribeExportImageTasksOutput, bool) bool
	}
	lockec2ClientMockDescribeExportImageTasksPages.RLock()
	calls = mock.calls.DescribeExportImageTasksPages
	lockec2ClientMockDescribeExportImageTasksPages.RUnlock()
	return calls
}

// DescribeExportImageTasksPagesWithContext calls DescribeExportImageTasksPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeExportImageTasksPagesWithContext(in1 context.Context, in2 *ec2.DescribeExportImageTasksInput, in3 func(*ec2.DescribeExportImageTasksOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeExportImageTasksPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeExportImageTasksPagesWithContextFunc: method is nil but ec2Client.DescribeExportImageTasksPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeExportImageTasksInput
		In3 func(*ec2.DescribeExportImageTasksOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeExportImageTasksPagesWithContext.Lock()
	mock.calls.DescribeExportImageTasksPagesWithContext = append(mock.calls.DescribeExportImageTasksPagesWithContext, callInfo)
	lockec2ClientMockDescribeExportImageTasksPagesWithContext.Unlock()
	return mock.DescribeExportImageTasksPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeExportImageTasksPagesWithContextCalls gets all the calls that were made to DescribeExportImageTasksPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeExportImageTasksPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeExportImageTasksPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeExportImageTasksInput
	In3 func(*ec2.DescribeExportImageTasksOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeExportImageTasksInput
		In3 func(*ec2.DescribeExportImageTasksOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeExportImageTasksPagesWithContext.RLock()
	calls = mock.calls.DescribeExportImageTasksPagesWithContext
	lockec2ClientMockDescribeExportImageTasksPagesWithContext.RUnlock()
	return calls
}

// DescribeExportImageTasksRequest calls DescribeExportImageTasksRequestFunc.
func (mock *ec2ClientMock) DescribeExportImageTasksRequest(in1 *ec2.DescribeExportImageTasksInput) (*request.Request, *ec2.DescribeExportImageTasksOutput) {
	if mock.DescribeExportImageTasksRequestFunc == nil {
		panic("ec2ClientMock.DescribeExportImageTasksRequestFunc: method is nil but ec2Client.DescribeExportImageTasksRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeExportImageTasksInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeExportImageTasksRequest.Lock()
	mock.calls.DescribeExportImageTasksRequest = append(mock.calls.DescribeExportImageTasksRequest, callInfo)
	lockec2ClientMockDescribeExportImageTasksRequest.Unlock()
	return mock.DescribeExportImageTasksRequestFunc(in1)
}

// DescribeExportImageTasksRequestCalls gets all the calls that were made to DescribeExportImageTasksRequest.
// Check the length with:
//     len(mockedec2Client.DescribeExportImageTasksRequestCalls())
func (mock *ec2ClientMock) DescribeExportImageTasksRequestCalls() []struct {
	In1 *ec2.DescribeExportImageTasksInput
} {
	var calls []struct {
		In1 *ec2.DescribeExportImageTasksInput
	}
	lockec2ClientMockDescribeExportImageTasksRequest.RLock()
	calls = mock.calls.DescribeExportImageTasksRequest
	lockec2ClientMockDescribeExportImageTasksRequest.RUnlock()
	return calls
}

// DescribeExportImageTasksWithContext calls DescribeExportImageTasksWithContextFunc.
func (mock *ec2ClientMock) DescribeExportImageTasksWithContext(in1 context.Context, in2 *ec2.DescribeExportImageTasksInput, in3 ...request.Option) (*ec2.DescribeExportImageTasksOutput, error) {
	if mock.DescribeExportImageTasksWithContextFunc == nil {
		panic("ec2ClientMock.DescribeExportImageTasksWithContextFunc: method is nil but ec2Client.DescribeExportImageTasksWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeExportImageTasksInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeExportImageTasksWithContext.Lock()
	mock.calls.DescribeExportImageTasksWithContext = append(mock.calls.DescribeExportImageTasksWithContext, callInfo)
	lockec2ClientMockDescribeExportImageTasksWithContext.Unlock()
	return mock.DescribeExportImageTasksWithContextFunc(in1, in2, in3...)
}

// DescribeExportImageTasksWithContextCalls gets all the calls that were made to DescribeExportImageTasksWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeExportImageTasksWithContextCalls())
func (mock *ec2ClientMock) DescribeExportImageTasksWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeExportImageTasksInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeExportImageTasksInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeExportImageTasksWithContext.RLock()
	calls = mock.calls.DescribeExportImageTasksWithContext
	lockec2ClientMockDescribeExportImageTasksWithContext.RUnlock()
	return calls
}

// DescribeExportTasks calls DescribeExportTasksFunc.
func (mock *ec2ClientMock) DescribeExportTasks(in1 *ec2.DescribeExportTasksInput) (*ec2.DescribeExportTasksOutput, error) {
	if mock.DescribeExportTasksFunc == nil {
		panic("ec2ClientMock.DescribeExportTasksFunc: method is nil but ec2Client.DescribeExportTasks was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeExportTasksInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeExportTasks.Lock()
	mock.calls.DescribeExportTasks = append(mock.calls.DescribeExportTasks, callInfo)
	lockec2ClientMockDescribeExportTasks.Unlock()
	return mock.DescribeExportTasksFunc(in1)
}

// DescribeExportTasksCalls gets all the calls that were made to DescribeExportTasks.
// Check the length with:
//     len(mockedec2Client.DescribeExportTasksCalls())
func (mock *ec2ClientMock) DescribeExportTasksCalls() []struct {
	In1 *ec2.DescribeExportTasksInput
} {
	var calls []struct {
		In1 *ec2.DescribeExportTasksInput
	}
	lockec2ClientMockDescribeExportTasks.RLock()
	calls = mock.calls.DescribeExportTasks
	lockec2ClientMockDescribeExportTasks.RUnlock()
	return calls
}

// DescribeExportTasksRequest calls DescribeExportTasksRequestFunc.
func (mock *ec2ClientMock) DescribeExportTasksRequest(in1 *ec2.DescribeExportTasksInput) (*request.Request, *ec2.DescribeExportTasksOutput) {
	if mock.DescribeExportTasksRequestFunc == nil {
		panic("ec2ClientMock.DescribeExportTasksRequestFunc: method is nil but ec2Client.DescribeExportTasksRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeExportTasksInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeExportTasksRequest.Lock()
	mock.calls.DescribeExportTasksRequest = append(mock.calls.DescribeExportTasksRequest, callInfo)
	lockec2ClientMockDescribeExportTasksRequest.Unlock()
	return mock.DescribeExportTasksRequestFunc(in1)
}

// DescribeExportTasksRequestCalls gets all the calls that were made to DescribeExportTasksRequest.
// Check the length with:
//     len(mockedec2Client.DescribeExportTasksRequestCalls())
func (mock *ec2ClientMock) DescribeExportTasksRequestCalls() []struct {
	In1 *ec2.DescribeExportTasksInput
} {
	var calls []struct {
		In1 *ec2.DescribeExportTasksInput
	}
	lockec2ClientMockDescribeExportTasksRequest.RLock()
	calls = mock.calls.DescribeExportTasksRequest
	lockec2ClientMockDescribeExportTasksRequest.RUnlock()
	return calls
}

// DescribeExportTasksWithContext calls DescribeExportTasksWithContextFunc.
func (mock *ec2ClientMock) DescribeExportTasksWithContext(in1 context.Context, in2 *ec2.DescribeExportTasksInput, in3 ...request.Option) (*ec2.DescribeExportTasksOutput, error) {
	if mock.DescribeExportTasksWithContextFunc == nil {
		panic("ec2ClientMock.DescribeExportTasksWithContextFunc: method is nil but ec2Client.DescribeExportTasksWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeExportTasksInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeExportTasksWithContext.Lock()
	mock.calls.DescribeExportTasksWithContext = append(mock.calls.DescribeExportTasksWithContext, callInfo)
	lockec2ClientMockDescribeExportTasksWithContext.Unlock()
	return mock.DescribeExportTasksWithContextFunc(in1, in2, in3...)
}

// DescribeExportTasksWithContextCalls gets all the calls that were made to DescribeExportTasksWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeExportTasksWithContextCalls())
func (mock *ec2ClientMock) DescribeExportTasksWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeExportTasksInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeExportTasksInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeExportTasksWithContext.RLock()
	calls = mock.calls.DescribeExportTasksWithContext
	lockec2ClientMockDescribeExportTasksWithContext.RUnlock()
	return calls
}

// DescribeFastSnapshotRestores calls DescribeFastSnapshotRestoresFunc.
func (mock *ec2ClientMock) DescribeFastSnapshotRestores(in1 *ec2.DescribeFastSnapshotRestoresInput) (*ec2.DescribeFastSnapshotRestoresOutput, error) {
	if mock.DescribeFastSnapshotRestoresFunc == nil {
		panic("ec2ClientMock.DescribeFastSnapshotRestoresFunc: method is nil but ec2Client.DescribeFastSnapshotRestores was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeFastSnapshotRestoresInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeFastSnapshotRestores.Lock()
	mock.calls.DescribeFastSnapshotRestores = append(mock.calls.DescribeFastSnapshotRestores, callInfo)
	lockec2ClientMockDescribeFastSnapshotRestores.Unlock()
	return mock.DescribeFastSnapshotRestoresFunc(in1)
}

// DescribeFastSnapshotRestoresCalls gets all the calls that were made to DescribeFastSnapshotRestores.
// Check the length with:
//     len(mockedec2Client.DescribeFastSnapshotRestoresCalls())
func (mock *ec2ClientMock) DescribeFastSnapshotRestoresCalls() []struct {
	In1 *ec2.DescribeFastSnapshotRestoresInput
} {
	var calls []struct {
		In1 *ec2.DescribeFastSnapshotRestoresInput
	}
	lockec2ClientMockDescribeFastSnapshotRestores.RLock()
	calls = mock.calls.DescribeFastSnapshotRestores
	lockec2ClientMockDescribeFastSnapshotRestores.RUnlock()
	return calls
}

// DescribeFastSnapshotRestoresPages calls DescribeFastSnapshotRestoresPagesFunc.
func (mock *ec2ClientMock) DescribeFastSnapshotRestoresPages(in1 *ec2.DescribeFastSnapshotRestoresInput, in2 func(*ec2.DescribeFastSnapshotRestoresOutput, bool) bool) error {
	if mock.DescribeFastSnapshotRestoresPagesFunc == nil {
		panic("ec2ClientMock.DescribeFastSnapshotRestoresPagesFunc: method is nil but ec2Client.DescribeFastSnapshotRestoresPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeFastSnapshotRestoresInput
		In2 func(*ec2.DescribeFastSnapshotRestoresOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeFastSnapshotRestoresPages.Lock()
	mock.calls.DescribeFastSnapshotRestoresPages = append(mock.calls.DescribeFastSnapshotRestoresPages, callInfo)
	lockec2ClientMockDescribeFastSnapshotRestoresPages.Unlock()
	return mock.DescribeFastSnapshotRestoresPagesFunc(in1, in2)
}

// DescribeFastSnapshotRestoresPagesCalls gets all the calls that were made to DescribeFastSnapshotRestoresPages.
// Check the length with:
//     len(mockedec2Client.DescribeFastSnapshotRestoresPagesCalls())
func (mock *ec2ClientMock) DescribeFastSnapshotRestoresPagesCalls() []struct {
	In1 *ec2.DescribeFastSnapshotRestoresInput
	In2 func(*ec2.DescribeFastSnapshotRestoresOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeFastSnapshotRestoresInput
		In2 func(*ec2.DescribeFastSnapshotRestoresOutput, bool) bool
	}
	lockec2ClientMockDescribeFastSnapshotRestoresPages.RLock()
	calls = mock.calls.DescribeFastSnapshotRestoresPages
	lockec2ClientMockDescribeFastSnapshotRestoresPages.RUnlock()
	return calls
}

// DescribeFastSnapshotRestoresPagesWithContext calls DescribeFastSnapshotRestoresPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeFastSnapshotRestoresPagesWithContext(in1 context.Context, in2 *ec2.DescribeFastSnapshotRestoresInput, in3 func(*ec2.DescribeFastSnapshotRestoresOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeFastSnapshotRestoresPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeFastSnapshotRestoresPagesWithContextFunc: method is nil but ec2Client.DescribeFastSnapshotRestoresPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeFastSnapshotRestoresInput
		In3 func(*ec2.DescribeFastSnapshotRestoresOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeFastSnapshotRestoresPagesWithContext.Lock()
	mock.calls.DescribeFastSnapshotRestoresPagesWithContext = append(mock.calls.DescribeFastSnapshotRestoresPagesWithContext, callInfo)
	lockec2ClientMockDescribeFastSnapshotRestoresPagesWithContext.Unlock()
	return mock.DescribeFastSnapshotRestoresPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeFastSnapshotRestoresPagesWithContextCalls gets all the calls that were made to DescribeFastSnapshotRestoresPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeFastSnapshotRestoresPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeFastSnapshotRestoresPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeFastSnapshotRestoresInput
	In3 func(*ec2.DescribeFastSnapshotRestoresOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeFastSnapshotRestoresInput
		In3 func(*ec2.DescribeFastSnapshotRestoresOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeFastSnapshotRestoresPagesWithContext.RLock()
	calls = mock.calls.DescribeFastSnapshotRestoresPagesWithContext
	lockec2ClientMockDescribeFastSnapshotRestoresPagesWithContext.RUnlock()
	return calls
}

// DescribeFastSnapshotRestoresRequest calls DescribeFastSnapshotRestoresRequestFunc.
func (mock *ec2ClientMock) DescribeFastSnapshotRestoresRequest(in1 *ec2.DescribeFastSnapshotRestoresInput) (*request.Request, *ec2.DescribeFastSnapshotRestoresOutput) {
	if mock.DescribeFastSnapshotRestoresRequestFunc == nil {
		panic("ec2ClientMock.DescribeFastSnapshotRestoresRequestFunc: method is nil but ec2Client.DescribeFastSnapshotRestoresRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeFastSnapshotRestoresInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeFastSnapshotRestoresRequest.Lock()
	mock.calls.DescribeFastSnapshotRestoresRequest = append(mock.calls.DescribeFastSnapshotRestoresRequest, callInfo)
	lockec2ClientMockDescribeFastSnapshotRestoresRequest.Unlock()
	return mock.DescribeFastSnapshotRestoresRequestFunc(in1)
}

// DescribeFastSnapshotRestoresRequestCalls gets all the calls that were made to DescribeFastSnapshotRestoresRequest.
// Check the length with:
//     len(mockedec2Client.DescribeFastSnapshotRestoresRequestCalls())
func (mock *ec2ClientMock) DescribeFastSnapshotRestoresRequestCalls() []struct {
	In1 *ec2.DescribeFastSnapshotRestoresInput
} {
	var calls []struct {
		In1 *ec2.DescribeFastSnapshotRestoresInput
	}
	lockec2ClientMockDescribeFastSnapshotRestoresRequest.RLock()
	calls = mock.calls.DescribeFastSnapshotRestoresRequest
	lockec2ClientMockDescribeFastSnapshotRestoresRequest.RUnlock()
	return calls
}

// DescribeFastSnapshotRestoresWithContext calls DescribeFastSnapshotRestoresWithContextFunc.
func (mock *ec2ClientMock) DescribeFastSnapshotRestoresWithContext(in1 context.Context, in2 *ec2.DescribeFastSnapshotRestoresInput, in3 ...request.Option) (*ec2.DescribeFastSnapshotRestoresOutput, error) {
	if mock.DescribeFastSnapshotRestoresWithContextFunc == nil {
		panic("ec2ClientMock.DescribeFastSnapshotRestoresWithContextFunc: method is nil but ec2Client.DescribeFastSnapshotRestoresWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeFastSnapshotRestoresInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeFastSnapshotRestoresWithContext.Lock()
	mock.calls.DescribeFastSnapshotRestoresWithContext = append(mock.calls.DescribeFastSnapshotRestoresWithContext, callInfo)
	lockec2ClientMockDescribeFastSnapshotRestoresWithContext.Unlock()
	return mock.DescribeFastSnapshotRestoresWithContextFunc(in1, in2, in3...)
}

// DescribeFastSnapshotRestoresWithContextCalls gets all the calls that were made to DescribeFastSnapshotRestoresWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeFastSnapshotRestoresWithContextCalls())
func (mock *ec2ClientMock) DescribeFastSnapshotRestoresWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeFastSnapshotRestoresInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeFastSnapshotRestoresInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeFastSnapshotRestoresWithContext.RLock()
	calls = mock.calls.DescribeFastSnapshotRestoresWithContext
	lockec2ClientMockDescribeFastSnapshotRestoresWithContext.RUnlock()
	return calls
}

// DescribeFleetHistory calls DescribeFleetHistoryFunc.
func (mock *ec2ClientMock) DescribeFleetHistory(in1 *ec2.DescribeFleetHistoryInput) (*ec2.DescribeFleetHistoryOutput, error) {
	if mock.DescribeFleetHistoryFunc == nil {
		panic("ec2ClientMock.DescribeFleetHistoryFunc: method is nil but ec2Client.DescribeFleetHistory was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeFleetHistoryInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeFleetHistory.Lock()
	mock.calls.DescribeFleetHistory = append(mock.calls.DescribeFleetHistory, callInfo)
	lockec2ClientMockDescribeFleetHistory.Unlock()
	return mock.DescribeFleetHistoryFunc(in1)
}

// DescribeFleetHistoryCalls gets all the calls that were made to DescribeFleetHistory.
// Check the length with:
//     len(mockedec2Client.DescribeFleetHistoryCalls())
func (mock *ec2ClientMock) DescribeFleetHistoryCalls() []struct {
	In1 *ec2.DescribeFleetHistoryInput
} {
	var calls []struct {
		In1 *ec2.DescribeFleetHistoryInput
	}
	lockec2ClientMockDescribeFleetHistory.RLock()
	calls = mock.calls.DescribeFleetHistory
	lockec2ClientMockDescribeFleetHistory.RUnlock()
	return calls
}

// DescribeFleetHistoryRequest calls DescribeFleetHistoryRequestFunc.
func (mock *ec2ClientMock) DescribeFleetHistoryRequest(in1 *ec2.DescribeFleetHistoryInput) (*request.Request, *ec2.DescribeFleetHistoryOutput) {
	if mock.DescribeFleetHistoryRequestFunc == nil {
		panic("ec2ClientMock.DescribeFleetHistoryRequestFunc: method is nil but ec2Client.DescribeFleetHistoryRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeFleetHistoryInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeFleetHistoryRequest.Lock()
	mock.calls.DescribeFleetHistoryRequest = append(mock.calls.DescribeFleetHistoryRequest, callInfo)
	lockec2ClientMockDescribeFleetHistoryRequest.Unlock()
	return mock.DescribeFleetHistoryRequestFunc(in1)
}

// DescribeFleetHistoryRequestCalls gets all the calls that were made to DescribeFleetHistoryRequest.
// Check the length with:
//     len(mockedec2Client.DescribeFleetHistoryRequestCalls())
func (mock *ec2ClientMock) DescribeFleetHistoryRequestCalls() []struct {
	In1 *ec2.DescribeFleetHistoryInput
} {
	var calls []struct {
		In1 *ec2.DescribeFleetHistoryInput
	}
	lockec2ClientMockDescribeFleetHistoryRequest.RLock()
	calls = mock.calls.DescribeFleetHistoryRequest
	lockec2ClientMockDescribeFleetHistoryRequest.RUnlock()
	return calls
}

// DescribeFleetHistoryWithContext calls DescribeFleetHistoryWithContextFunc.
func (mock *ec2ClientMock) DescribeFleetHistoryWithContext(in1 context.Context, in2 *ec2.DescribeFleetHistoryInput, in3 ...request.Option) (*ec2.DescribeFleetHistoryOutput, error) {
	if mock.DescribeFleetHistoryWithContextFunc == nil {
		panic("ec2ClientMock.DescribeFleetHistoryWithContextFunc: method is nil but ec2Client.DescribeFleetHistoryWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeFleetHistoryInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeFleetHistoryWithContext.Lock()
	mock.calls.DescribeFleetHistoryWithContext = append(mock.calls.DescribeFleetHistoryWithContext, callInfo)
	lockec2ClientMockDescribeFleetHistoryWithContext.Unlock()
	return mock.DescribeFleetHistoryWithContextFunc(in1, in2, in3...)
}

// DescribeFleetHistoryWithContextCalls gets all the calls that were made to DescribeFleetHistoryWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeFleetHistoryWithContextCalls())
func (mock *ec2ClientMock) DescribeFleetHistoryWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeFleetHistoryInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeFleetHistoryInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeFleetHistoryWithContext.RLock()
	calls = mock.calls.DescribeFleetHistoryWithContext
	lockec2ClientMockDescribeFleetHistoryWithContext.RUnlock()
	return calls
}

// DescribeFleetInstances calls DescribeFleetInstancesFunc.
func (mock *ec2ClientMock) DescribeFleetInstances(in1 *ec2.DescribeFleetInstancesInput) (*ec2.DescribeFleetInstancesOutput, error) {
	if mock.DescribeFleetInstancesFunc == nil {
		panic("ec2ClientMock.DescribeFleetInstancesFunc: method is nil but ec2Client.DescribeFleetInstances was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeFleetInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeFleetInstances.Lock()
	mock.calls.DescribeFleetInstances = append(mock.calls.DescribeFleetInstances, callInfo)
	lockec2ClientMockDescribeFleetInstances.Unlock()
	return mock.DescribeFleetInstancesFunc(in1)
}

// DescribeFleetInstancesCalls gets all the calls that were made to DescribeFleetInstances.
// Check the length with:
//     len(mockedec2Client.DescribeFleetInstancesCalls())
func (mock *ec2ClientMock) DescribeFleetInstancesCalls() []struct {
	In1 *ec2.DescribeFleetInstancesInput
} {
	var calls []struct {
		In1 *ec2.DescribeFleetInstancesInput
	}
	lockec2ClientMockDescribeFleetInstances.RLock()
	calls = mock.calls.DescribeFleetInstances
	lockec2ClientMockDescribeFleetInstances.RUnlock()
	return calls
}

// DescribeFleetInstancesRequest calls DescribeFleetInstancesRequestFunc.
func (mock *ec2ClientMock) DescribeFleetInstancesRequest(in1 *ec2.DescribeFleetInstancesInput) (*request.Request, *ec2.DescribeFleetInstancesOutput) {
	if mock.DescribeFleetInstancesRequestFunc == nil {
		panic("ec2ClientMock.DescribeFleetInstancesRequestFunc: method is nil but ec2Client.DescribeFleetInstancesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeFleetInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeFleetInstancesRequest.Lock()
	mock.calls.DescribeFleetInstancesRequest = append(mock.calls.DescribeFleetInstancesRequest, callInfo)
	lockec2ClientMockDescribeFleetInstancesRequest.Unlock()
	return mock.DescribeFleetInstancesRequestFunc(in1)
}

// DescribeFleetInstancesRequestCalls gets all the calls that were made to DescribeFleetInstancesRequest.
// Check the length with:
//     len(mockedec2Client.DescribeFleetInstancesRequestCalls())
func (mock *ec2ClientMock) DescribeFleetInstancesRequestCalls() []struct {
	In1 *ec2.DescribeFleetInstancesInput
} {
	var calls []struct {
		In1 *ec2.DescribeFleetInstancesInput
	}
	lockec2ClientMockDescribeFleetInstancesRequest.RLock()
	calls = mock.calls.DescribeFleetInstancesRequest
	lockec2ClientMockDescribeFleetInstancesRequest.RUnlock()
	return calls
}

// DescribeFleetInstancesWithContext calls DescribeFleetInstancesWithContextFunc.
func (mock *ec2ClientMock) DescribeFleetInstancesWithContext(in1 context.Context, in2 *ec2.DescribeFleetInstancesInput, in3 ...request.Option) (*ec2.DescribeFleetInstancesOutput, error) {
	if mock.DescribeFleetInstancesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeFleetInstancesWithContextFunc: method is nil but ec2Client.DescribeFleetInstancesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeFleetInstancesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeFleetInstancesWithContext.Lock()
	mock.calls.DescribeFleetInstancesWithContext = append(mock.calls.DescribeFleetInstancesWithContext, callInfo)
	lockec2ClientMockDescribeFleetInstancesWithContext.Unlock()
	return mock.DescribeFleetInstancesWithContextFunc(in1, in2, in3...)
}

// DescribeFleetInstancesWithContextCalls gets all the calls that were made to DescribeFleetInstancesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeFleetInstancesWithContextCalls())
func (mock *ec2ClientMock) DescribeFleetInstancesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeFleetInstancesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeFleetInstancesInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeFleetInstancesWithContext.RLock()
	calls = mock.calls.DescribeFleetInstancesWithContext
	lockec2ClientMockDescribeFleetInstancesWithContext.RUnlock()
	return calls
}

// DescribeFleets calls DescribeFleetsFunc.
func (mock *ec2ClientMock) DescribeFleets(in1 *ec2.DescribeFleetsInput) (*ec2.DescribeFleetsOutput, error) {
	if mock.DescribeFleetsFunc == nil {
		panic("ec2ClientMock.DescribeFleetsFunc: method is nil but ec2Client.DescribeFleets was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeFleetsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeFleets.Lock()
	mock.calls.DescribeFleets = append(mock.calls.DescribeFleets, callInfo)
	lockec2ClientMockDescribeFleets.Unlock()
	return mock.DescribeFleetsFunc(in1)
}

// DescribeFleetsCalls gets all the calls that were made to DescribeFleets.
// Check the length with:
//     len(mockedec2Client.DescribeFleetsCalls())
func (mock *ec2ClientMock) DescribeFleetsCalls() []struct {
	In1 *ec2.DescribeFleetsInput
} {
	var calls []struct {
		In1 *ec2.DescribeFleetsInput
	}
	lockec2ClientMockDescribeFleets.RLock()
	calls = mock.calls.DescribeFleets
	lockec2ClientMockDescribeFleets.RUnlock()
	return calls
}

// DescribeFleetsPages calls DescribeFleetsPagesFunc.
func (mock *ec2ClientMock) DescribeFleetsPages(in1 *ec2.DescribeFleetsInput, in2 func(*ec2.DescribeFleetsOutput, bool) bool) error {
	if mock.DescribeFleetsPagesFunc == nil {
		panic("ec2ClientMock.DescribeFleetsPagesFunc: method is nil but ec2Client.DescribeFleetsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeFleetsInput
		In2 func(*ec2.DescribeFleetsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeFleetsPages.Lock()
	mock.calls.DescribeFleetsPages = append(mock.calls.DescribeFleetsPages, callInfo)
	lockec2ClientMockDescribeFleetsPages.Unlock()
	return mock.DescribeFleetsPagesFunc(in1, in2)
}

// DescribeFleetsPagesCalls gets all the calls that were made to DescribeFleetsPages.
// Check the length with:
//     len(mockedec2Client.DescribeFleetsPagesCalls())
func (mock *ec2ClientMock) DescribeFleetsPagesCalls() []struct {
	In1 *ec2.DescribeFleetsInput
	In2 func(*ec2.DescribeFleetsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeFleetsInput
		In2 func(*ec2.DescribeFleetsOutput, bool) bool
	}
	lockec2ClientMockDescribeFleetsPages.RLock()
	calls = mock.calls.DescribeFleetsPages
	lockec2ClientMockDescribeFleetsPages.RUnlock()
	return calls
}

// DescribeFleetsPagesWithContext calls DescribeFleetsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeFleetsPagesWithContext(in1 context.Context, in2 *ec2.DescribeFleetsInput, in3 func(*ec2.DescribeFleetsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeFleetsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeFleetsPagesWithContextFunc: method is nil but ec2Client.DescribeFleetsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeFleetsInput
		In3 func(*ec2.DescribeFleetsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeFleetsPagesWithContext.Lock()
	mock.calls.DescribeFleetsPagesWithContext = append(mock.calls.DescribeFleetsPagesWithContext, callInfo)
	lockec2ClientMockDescribeFleetsPagesWithContext.Unlock()
	return mock.DescribeFleetsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeFleetsPagesWithContextCalls gets all the calls that were made to DescribeFleetsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeFleetsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeFleetsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeFleetsInput
	In3 func(*ec2.DescribeFleetsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeFleetsInput
		In3 func(*ec2.DescribeFleetsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeFleetsPagesWithContext.RLock()
	calls = mock.calls.DescribeFleetsPagesWithContext
	lockec2ClientMockDescribeFleetsPagesWithContext.RUnlock()
	return calls
}

// DescribeFleetsRequest calls DescribeFleetsRequestFunc.
func (mock *ec2ClientMock) DescribeFleetsRequest(in1 *ec2.DescribeFleetsInput) (*request.Request, *ec2.DescribeFleetsOutput) {
	if mock.DescribeFleetsRequestFunc == nil {
		panic("ec2ClientMock.DescribeFleetsRequestFunc: method is nil but ec2Client.DescribeFleetsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeFleetsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeFleetsRequest.Lock()
	mock.calls.DescribeFleetsRequest = append(mock.calls.DescribeFleetsRequest, callInfo)
	lockec2ClientMockDescribeFleetsRequest.Unlock()
	return mock.DescribeFleetsRequestFunc(in1)
}

// DescribeFleetsRequestCalls gets all the calls that were made to DescribeFleetsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeFleetsRequestCalls())
func (mock *ec2ClientMock) DescribeFleetsRequestCalls() []struct {
	In1 *ec2.DescribeFleetsInput
} {
	var calls []struct {
		In1 *ec2.DescribeFleetsInput
	}
	lockec2ClientMockDescribeFleetsRequest.RLock()
	calls = mock.calls.DescribeFleetsRequest
	lockec2ClientMockDescribeFleetsRequest.RUnlock()
	return calls
}

// DescribeFleetsWithContext calls DescribeFleetsWithContextFunc.
func (mock *ec2ClientMock) DescribeFleetsWithContext(in1 context.Context, in2 *ec2.DescribeFleetsInput, in3 ...request.Option) (*ec2.DescribeFleetsOutput, error) {
	if mock.DescribeFleetsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeFleetsWithContextFunc: method is nil but ec2Client.DescribeFleetsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeFleetsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeFleetsWithContext.Lock()
	mock.calls.DescribeFleetsWithContext = append(mock.calls.DescribeFleetsWithContext, callInfo)
	lockec2ClientMockDescribeFleetsWithContext.Unlock()
	return mock.DescribeFleetsWithContextFunc(in1, in2, in3...)
}

// DescribeFleetsWithContextCalls gets all the calls that were made to DescribeFleetsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeFleetsWithContextCalls())
func (mock *ec2ClientMock) DescribeFleetsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeFleetsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeFleetsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeFleetsWithContext.RLock()
	calls = mock.calls.DescribeFleetsWithContext
	lockec2ClientMockDescribeFleetsWithContext.RUnlock()
	return calls
}

// DescribeFlowLogs calls DescribeFlowLogsFunc.
func (mock *ec2ClientMock) DescribeFlowLogs(in1 *ec2.DescribeFlowLogsInput) (*ec2.DescribeFlowLogsOutput, error) {
	if mock.DescribeFlowLogsFunc == nil {
		panic("ec2ClientMock.DescribeFlowLogsFunc: method is nil but ec2Client.DescribeFlowLogs was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeFlowLogsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeFlowLogs.Lock()
	mock.calls.DescribeFlowLogs = append(mock.calls.DescribeFlowLogs, callInfo)
	lockec2ClientMockDescribeFlowLogs.Unlock()
	return mock.DescribeFlowLogsFunc(in1)
}

// DescribeFlowLogsCalls gets all the calls that were made to DescribeFlowLogs.
// Check the length with:
//     len(mockedec2Client.DescribeFlowLogsCalls())
func (mock *ec2ClientMock) DescribeFlowLogsCalls() []struct {
	In1 *ec2.DescribeFlowLogsInput
} {
	var calls []struct {
		In1 *ec2.DescribeFlowLogsInput
	}
	lockec2ClientMockDescribeFlowLogs.RLock()
	calls = mock.calls.DescribeFlowLogs
	lockec2ClientMockDescribeFlowLogs.RUnlock()
	return calls
}

// DescribeFlowLogsPages calls DescribeFlowLogsPagesFunc.
func (mock *ec2ClientMock) DescribeFlowLogsPages(in1 *ec2.DescribeFlowLogsInput, in2 func(*ec2.DescribeFlowLogsOutput, bool) bool) error {
	if mock.DescribeFlowLogsPagesFunc == nil {
		panic("ec2ClientMock.DescribeFlowLogsPagesFunc: method is nil but ec2Client.DescribeFlowLogsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeFlowLogsInput
		In2 func(*ec2.DescribeFlowLogsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeFlowLogsPages.Lock()
	mock.calls.DescribeFlowLogsPages = append(mock.calls.DescribeFlowLogsPages, callInfo)
	lockec2ClientMockDescribeFlowLogsPages.Unlock()
	return mock.DescribeFlowLogsPagesFunc(in1, in2)
}

// DescribeFlowLogsPagesCalls gets all the calls that were made to DescribeFlowLogsPages.
// Check the length with:
//     len(mockedec2Client.DescribeFlowLogsPagesCalls())
func (mock *ec2ClientMock) DescribeFlowLogsPagesCalls() []struct {
	In1 *ec2.DescribeFlowLogsInput
	In2 func(*ec2.DescribeFlowLogsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeFlowLogsInput
		In2 func(*ec2.DescribeFlowLogsOutput, bool) bool
	}
	lockec2ClientMockDescribeFlowLogsPages.RLock()
	calls = mock.calls.DescribeFlowLogsPages
	lockec2ClientMockDescribeFlowLogsPages.RUnlock()
	return calls
}

// DescribeFlowLogsPagesWithContext calls DescribeFlowLogsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeFlowLogsPagesWithContext(in1 context.Context, in2 *ec2.DescribeFlowLogsInput, in3 func(*ec2.DescribeFlowLogsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeFlowLogsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeFlowLogsPagesWithContextFunc: method is nil but ec2Client.DescribeFlowLogsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeFlowLogsInput
		In3 func(*ec2.DescribeFlowLogsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeFlowLogsPagesWithContext.Lock()
	mock.calls.DescribeFlowLogsPagesWithContext = append(mock.calls.DescribeFlowLogsPagesWithContext, callInfo)
	lockec2ClientMockDescribeFlowLogsPagesWithContext.Unlock()
	return mock.DescribeFlowLogsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeFlowLogsPagesWithContextCalls gets all the calls that were made to DescribeFlowLogsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeFlowLogsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeFlowLogsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeFlowLogsInput
	In3 func(*ec2.DescribeFlowLogsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeFlowLogsInput
		In3 func(*ec2.DescribeFlowLogsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeFlowLogsPagesWithContext.RLock()
	calls = mock.calls.DescribeFlowLogsPagesWithContext
	lockec2ClientMockDescribeFlowLogsPagesWithContext.RUnlock()
	return calls
}

// DescribeFlowLogsRequest calls DescribeFlowLogsRequestFunc.
func (mock *ec2ClientMock) DescribeFlowLogsRequest(in1 *ec2.DescribeFlowLogsInput) (*request.Request, *ec2.DescribeFlowLogsOutput) {
	if mock.DescribeFlowLogsRequestFunc == nil {
		panic("ec2ClientMock.DescribeFlowLogsRequestFunc: method is nil but ec2Client.DescribeFlowLogsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeFlowLogsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeFlowLogsRequest.Lock()
	mock.calls.DescribeFlowLogsRequest = append(mock.calls.DescribeFlowLogsRequest, callInfo)
	lockec2ClientMockDescribeFlowLogsRequest.Unlock()
	return mock.DescribeFlowLogsRequestFunc(in1)
}

// DescribeFlowLogsRequestCalls gets all the calls that were made to DescribeFlowLogsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeFlowLogsRequestCalls())
func (mock *ec2ClientMock) DescribeFlowLogsRequestCalls() []struct {
	In1 *ec2.DescribeFlowLogsInput
} {
	var calls []struct {
		In1 *ec2.DescribeFlowLogsInput
	}
	lockec2ClientMockDescribeFlowLogsRequest.RLock()
	calls = mock.calls.DescribeFlowLogsRequest
	lockec2ClientMockDescribeFlowLogsRequest.RUnlock()
	return calls
}

// DescribeFlowLogsWithContext calls DescribeFlowLogsWithContextFunc.
func (mock *ec2ClientMock) DescribeFlowLogsWithContext(in1 context.Context, in2 *ec2.DescribeFlowLogsInput, in3 ...request.Option) (*ec2.DescribeFlowLogsOutput, error) {
	if mock.DescribeFlowLogsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeFlowLogsWithContextFunc: method is nil but ec2Client.DescribeFlowLogsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeFlowLogsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeFlowLogsWithContext.Lock()
	mock.calls.DescribeFlowLogsWithContext = append(mock.calls.DescribeFlowLogsWithContext, callInfo)
	lockec2ClientMockDescribeFlowLogsWithContext.Unlock()
	return mock.DescribeFlowLogsWithContextFunc(in1, in2, in3...)
}

// DescribeFlowLogsWithContextCalls gets all the calls that were made to DescribeFlowLogsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeFlowLogsWithContextCalls())
func (mock *ec2ClientMock) DescribeFlowLogsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeFlowLogsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeFlowLogsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeFlowLogsWithContext.RLock()
	calls = mock.calls.DescribeFlowLogsWithContext
	lockec2ClientMockDescribeFlowLogsWithContext.RUnlock()
	return calls
}

// DescribeFpgaImageAttribute calls DescribeFpgaImageAttributeFunc.
func (mock *ec2ClientMock) DescribeFpgaImageAttribute(in1 *ec2.DescribeFpgaImageAttributeInput) (*ec2.DescribeFpgaImageAttributeOutput, error) {
	if mock.DescribeFpgaImageAttributeFunc == nil {
		panic("ec2ClientMock.DescribeFpgaImageAttributeFunc: method is nil but ec2Client.DescribeFpgaImageAttribute was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeFpgaImageAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeFpgaImageAttribute.Lock()
	mock.calls.DescribeFpgaImageAttribute = append(mock.calls.DescribeFpgaImageAttribute, callInfo)
	lockec2ClientMockDescribeFpgaImageAttribute.Unlock()
	return mock.DescribeFpgaImageAttributeFunc(in1)
}

// DescribeFpgaImageAttributeCalls gets all the calls that were made to DescribeFpgaImageAttribute.
// Check the length with:
//     len(mockedec2Client.DescribeFpgaImageAttributeCalls())
func (mock *ec2ClientMock) DescribeFpgaImageAttributeCalls() []struct {
	In1 *ec2.DescribeFpgaImageAttributeInput
} {
	var calls []struct {
		In1 *ec2.DescribeFpgaImageAttributeInput
	}
	lockec2ClientMockDescribeFpgaImageAttribute.RLock()
	calls = mock.calls.DescribeFpgaImageAttribute
	lockec2ClientMockDescribeFpgaImageAttribute.RUnlock()
	return calls
}

// DescribeFpgaImageAttributeRequest calls DescribeFpgaImageAttributeRequestFunc.
func (mock *ec2ClientMock) DescribeFpgaImageAttributeRequest(in1 *ec2.DescribeFpgaImageAttributeInput) (*request.Request, *ec2.DescribeFpgaImageAttributeOutput) {
	if mock.DescribeFpgaImageAttributeRequestFunc == nil {
		panic("ec2ClientMock.DescribeFpgaImageAttributeRequestFunc: method is nil but ec2Client.DescribeFpgaImageAttributeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeFpgaImageAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeFpgaImageAttributeRequest.Lock()
	mock.calls.DescribeFpgaImageAttributeRequest = append(mock.calls.DescribeFpgaImageAttributeRequest, callInfo)
	lockec2ClientMockDescribeFpgaImageAttributeRequest.Unlock()
	return mock.DescribeFpgaImageAttributeRequestFunc(in1)
}

// DescribeFpgaImageAttributeRequestCalls gets all the calls that were made to DescribeFpgaImageAttributeRequest.
// Check the length with:
//     len(mockedec2Client.DescribeFpgaImageAttributeRequestCalls())
func (mock *ec2ClientMock) DescribeFpgaImageAttributeRequestCalls() []struct {
	In1 *ec2.DescribeFpgaImageAttributeInput
} {
	var calls []struct {
		In1 *ec2.DescribeFpgaImageAttributeInput
	}
	lockec2ClientMockDescribeFpgaImageAttributeRequest.RLock()
	calls = mock.calls.DescribeFpgaImageAttributeRequest
	lockec2ClientMockDescribeFpgaImageAttributeRequest.RUnlock()
	return calls
}

// DescribeFpgaImageAttributeWithContext calls DescribeFpgaImageAttributeWithContextFunc.
func (mock *ec2ClientMock) DescribeFpgaImageAttributeWithContext(in1 context.Context, in2 *ec2.DescribeFpgaImageAttributeInput, in3 ...request.Option) (*ec2.DescribeFpgaImageAttributeOutput, error) {
	if mock.DescribeFpgaImageAttributeWithContextFunc == nil {
		panic("ec2ClientMock.DescribeFpgaImageAttributeWithContextFunc: method is nil but ec2Client.DescribeFpgaImageAttributeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeFpgaImageAttributeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeFpgaImageAttributeWithContext.Lock()
	mock.calls.DescribeFpgaImageAttributeWithContext = append(mock.calls.DescribeFpgaImageAttributeWithContext, callInfo)
	lockec2ClientMockDescribeFpgaImageAttributeWithContext.Unlock()
	return mock.DescribeFpgaImageAttributeWithContextFunc(in1, in2, in3...)
}

// DescribeFpgaImageAttributeWithContextCalls gets all the calls that were made to DescribeFpgaImageAttributeWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeFpgaImageAttributeWithContextCalls())
func (mock *ec2ClientMock) DescribeFpgaImageAttributeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeFpgaImageAttributeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeFpgaImageAttributeInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeFpgaImageAttributeWithContext.RLock()
	calls = mock.calls.DescribeFpgaImageAttributeWithContext
	lockec2ClientMockDescribeFpgaImageAttributeWithContext.RUnlock()
	return calls
}

// DescribeFpgaImages calls DescribeFpgaImagesFunc.
func (mock *ec2ClientMock) DescribeFpgaImages(in1 *ec2.DescribeFpgaImagesInput) (*ec2.DescribeFpgaImagesOutput, error) {
	if mock.DescribeFpgaImagesFunc == nil {
		panic("ec2ClientMock.DescribeFpgaImagesFunc: method is nil but ec2Client.DescribeFpgaImages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeFpgaImagesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeFpgaImages.Lock()
	mock.calls.DescribeFpgaImages = append(mock.calls.DescribeFpgaImages, callInfo)
	lockec2ClientMockDescribeFpgaImages.Unlock()
	return mock.DescribeFpgaImagesFunc(in1)
}

// DescribeFpgaImagesCalls gets all the calls that were made to DescribeFpgaImages.
// Check the length with:
//     len(mockedec2Client.DescribeFpgaImagesCalls())
func (mock *ec2ClientMock) DescribeFpgaImagesCalls() []struct {
	In1 *ec2.DescribeFpgaImagesInput
} {
	var calls []struct {
		In1 *ec2.DescribeFpgaImagesInput
	}
	lockec2ClientMockDescribeFpgaImages.RLock()
	calls = mock.calls.DescribeFpgaImages
	lockec2ClientMockDescribeFpgaImages.RUnlock()
	return calls
}

// DescribeFpgaImagesPages calls DescribeFpgaImagesPagesFunc.
func (mock *ec2ClientMock) DescribeFpgaImagesPages(in1 *ec2.DescribeFpgaImagesInput, in2 func(*ec2.DescribeFpgaImagesOutput, bool) bool) error {
	if mock.DescribeFpgaImagesPagesFunc == nil {
		panic("ec2ClientMock.DescribeFpgaImagesPagesFunc: method is nil but ec2Client.DescribeFpgaImagesPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeFpgaImagesInput
		In2 func(*ec2.DescribeFpgaImagesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeFpgaImagesPages.Lock()
	mock.calls.DescribeFpgaImagesPages = append(mock.calls.DescribeFpgaImagesPages, callInfo)
	lockec2ClientMockDescribeFpgaImagesPages.Unlock()
	return mock.DescribeFpgaImagesPagesFunc(in1, in2)
}

// DescribeFpgaImagesPagesCalls gets all the calls that were made to DescribeFpgaImagesPages.
// Check the length with:
//     len(mockedec2Client.DescribeFpgaImagesPagesCalls())
func (mock *ec2ClientMock) DescribeFpgaImagesPagesCalls() []struct {
	In1 *ec2.DescribeFpgaImagesInput
	In2 func(*ec2.DescribeFpgaImagesOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeFpgaImagesInput
		In2 func(*ec2.DescribeFpgaImagesOutput, bool) bool
	}
	lockec2ClientMockDescribeFpgaImagesPages.RLock()
	calls = mock.calls.DescribeFpgaImagesPages
	lockec2ClientMockDescribeFpgaImagesPages.RUnlock()
	return calls
}

// DescribeFpgaImagesPagesWithContext calls DescribeFpgaImagesPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeFpgaImagesPagesWithContext(in1 context.Context, in2 *ec2.DescribeFpgaImagesInput, in3 func(*ec2.DescribeFpgaImagesOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeFpgaImagesPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeFpgaImagesPagesWithContextFunc: method is nil but ec2Client.DescribeFpgaImagesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeFpgaImagesInput
		In3 func(*ec2.DescribeFpgaImagesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeFpgaImagesPagesWithContext.Lock()
	mock.calls.DescribeFpgaImagesPagesWithContext = append(mock.calls.DescribeFpgaImagesPagesWithContext, callInfo)
	lockec2ClientMockDescribeFpgaImagesPagesWithContext.Unlock()
	return mock.DescribeFpgaImagesPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeFpgaImagesPagesWithContextCalls gets all the calls that were made to DescribeFpgaImagesPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeFpgaImagesPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeFpgaImagesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeFpgaImagesInput
	In3 func(*ec2.DescribeFpgaImagesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeFpgaImagesInput
		In3 func(*ec2.DescribeFpgaImagesOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeFpgaImagesPagesWithContext.RLock()
	calls = mock.calls.DescribeFpgaImagesPagesWithContext
	lockec2ClientMockDescribeFpgaImagesPagesWithContext.RUnlock()
	return calls
}

// DescribeFpgaImagesRequest calls DescribeFpgaImagesRequestFunc.
func (mock *ec2ClientMock) DescribeFpgaImagesRequest(in1 *ec2.DescribeFpgaImagesInput) (*request.Request, *ec2.DescribeFpgaImagesOutput) {
	if mock.DescribeFpgaImagesRequestFunc == nil {
		panic("ec2ClientMock.DescribeFpgaImagesRequestFunc: method is nil but ec2Client.DescribeFpgaImagesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeFpgaImagesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeFpgaImagesRequest.Lock()
	mock.calls.DescribeFpgaImagesRequest = append(mock.calls.DescribeFpgaImagesRequest, callInfo)
	lockec2ClientMockDescribeFpgaImagesRequest.Unlock()
	return mock.DescribeFpgaImagesRequestFunc(in1)
}

// DescribeFpgaImagesRequestCalls gets all the calls that were made to DescribeFpgaImagesRequest.
// Check the length with:
//     len(mockedec2Client.DescribeFpgaImagesRequestCalls())
func (mock *ec2ClientMock) DescribeFpgaImagesRequestCalls() []struct {
	In1 *ec2.DescribeFpgaImagesInput
} {
	var calls []struct {
		In1 *ec2.DescribeFpgaImagesInput
	}
	lockec2ClientMockDescribeFpgaImagesRequest.RLock()
	calls = mock.calls.DescribeFpgaImagesRequest
	lockec2ClientMockDescribeFpgaImagesRequest.RUnlock()
	return calls
}

// DescribeFpgaImagesWithContext calls DescribeFpgaImagesWithContextFunc.
func (mock *ec2ClientMock) DescribeFpgaImagesWithContext(in1 context.Context, in2 *ec2.DescribeFpgaImagesInput, in3 ...request.Option) (*ec2.DescribeFpgaImagesOutput, error) {
	if mock.DescribeFpgaImagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeFpgaImagesWithContextFunc: method is nil but ec2Client.DescribeFpgaImagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeFpgaImagesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeFpgaImagesWithContext.Lock()
	mock.calls.DescribeFpgaImagesWithContext = append(mock.calls.DescribeFpgaImagesWithContext, callInfo)
	lockec2ClientMockDescribeFpgaImagesWithContext.Unlock()
	return mock.DescribeFpgaImagesWithContextFunc(in1, in2, in3...)
}

// DescribeFpgaImagesWithContextCalls gets all the calls that were made to DescribeFpgaImagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeFpgaImagesWithContextCalls())
func (mock *ec2ClientMock) DescribeFpgaImagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeFpgaImagesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeFpgaImagesInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeFpgaImagesWithContext.RLock()
	calls = mock.calls.DescribeFpgaImagesWithContext
	lockec2ClientMockDescribeFpgaImagesWithContext.RUnlock()
	return calls
}

// DescribeHostReservationOfferings calls DescribeHostReservationOfferingsFunc.
func (mock *ec2ClientMock) DescribeHostReservationOfferings(in1 *ec2.DescribeHostReservationOfferingsInput) (*ec2.DescribeHostReservationOfferingsOutput, error) {
	if mock.DescribeHostReservationOfferingsFunc == nil {
		panic("ec2ClientMock.DescribeHostReservationOfferingsFunc: method is nil but ec2Client.DescribeHostReservationOfferings was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeHostReservationOfferingsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeHostReservationOfferings.Lock()
	mock.calls.DescribeHostReservationOfferings = append(mock.calls.DescribeHostReservationOfferings, callInfo)
	lockec2ClientMockDescribeHostReservationOfferings.Unlock()
	return mock.DescribeHostReservationOfferingsFunc(in1)
}

// DescribeHostReservationOfferingsCalls gets all the calls that were made to DescribeHostReservationOfferings.
// Check the length with:
//     len(mockedec2Client.DescribeHostReservationOfferingsCalls())
func (mock *ec2ClientMock) DescribeHostReservationOfferingsCalls() []struct {
	In1 *ec2.DescribeHostReservationOfferingsInput
} {
	var calls []struct {
		In1 *ec2.DescribeHostReservationOfferingsInput
	}
	lockec2ClientMockDescribeHostReservationOfferings.RLock()
	calls = mock.calls.DescribeHostReservationOfferings
	lockec2ClientMockDescribeHostReservationOfferings.RUnlock()
	return calls
}

// DescribeHostReservationOfferingsPages calls DescribeHostReservationOfferingsPagesFunc.
func (mock *ec2ClientMock) DescribeHostReservationOfferingsPages(in1 *ec2.DescribeHostReservationOfferingsInput, in2 func(*ec2.DescribeHostReservationOfferingsOutput, bool) bool) error {
	if mock.DescribeHostReservationOfferingsPagesFunc == nil {
		panic("ec2ClientMock.DescribeHostReservationOfferingsPagesFunc: method is nil but ec2Client.DescribeHostReservationOfferingsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeHostReservationOfferingsInput
		In2 func(*ec2.DescribeHostReservationOfferingsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeHostReservationOfferingsPages.Lock()
	mock.calls.DescribeHostReservationOfferingsPages = append(mock.calls.DescribeHostReservationOfferingsPages, callInfo)
	lockec2ClientMockDescribeHostReservationOfferingsPages.Unlock()
	return mock.DescribeHostReservationOfferingsPagesFunc(in1, in2)
}

// DescribeHostReservationOfferingsPagesCalls gets all the calls that were made to DescribeHostReservationOfferingsPages.
// Check the length with:
//     len(mockedec2Client.DescribeHostReservationOfferingsPagesCalls())
func (mock *ec2ClientMock) DescribeHostReservationOfferingsPagesCalls() []struct {
	In1 *ec2.DescribeHostReservationOfferingsInput
	In2 func(*ec2.DescribeHostReservationOfferingsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeHostReservationOfferingsInput
		In2 func(*ec2.DescribeHostReservationOfferingsOutput, bool) bool
	}
	lockec2ClientMockDescribeHostReservationOfferingsPages.RLock()
	calls = mock.calls.DescribeHostReservationOfferingsPages
	lockec2ClientMockDescribeHostReservationOfferingsPages.RUnlock()
	return calls
}

// DescribeHostReservationOfferingsPagesWithContext calls DescribeHostReservationOfferingsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeHostReservationOfferingsPagesWithContext(in1 context.Context, in2 *ec2.DescribeHostReservationOfferingsInput, in3 func(*ec2.DescribeHostReservationOfferingsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeHostReservationOfferingsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeHostReservationOfferingsPagesWithContextFunc: method is nil but ec2Client.DescribeHostReservationOfferingsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeHostReservationOfferingsInput
		In3 func(*ec2.DescribeHostReservationOfferingsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeHostReservationOfferingsPagesWithContext.Lock()
	mock.calls.DescribeHostReservationOfferingsPagesWithContext = append(mock.calls.DescribeHostReservationOfferingsPagesWithContext, callInfo)
	lockec2ClientMockDescribeHostReservationOfferingsPagesWithContext.Unlock()
	return mock.DescribeHostReservationOfferingsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeHostReservationOfferingsPagesWithContextCalls gets all the calls that were made to DescribeHostReservationOfferingsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeHostReservationOfferingsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeHostReservationOfferingsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeHostReservationOfferingsInput
	In3 func(*ec2.DescribeHostReservationOfferingsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeHostReservationOfferingsInput
		In3 func(*ec2.DescribeHostReservationOfferingsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeHostReservationOfferingsPagesWithContext.RLock()
	calls = mock.calls.DescribeHostReservationOfferingsPagesWithContext
	lockec2ClientMockDescribeHostReservationOfferingsPagesWithContext.RUnlock()
	return calls
}

// DescribeHostReservationOfferingsRequest calls DescribeHostReservationOfferingsRequestFunc.
func (mock *ec2ClientMock) DescribeHostReservationOfferingsRequest(in1 *ec2.DescribeHostReservationOfferingsInput) (*request.Request, *ec2.DescribeHostReservationOfferingsOutput) {
	if mock.DescribeHostReservationOfferingsRequestFunc == nil {
		panic("ec2ClientMock.DescribeHostReservationOfferingsRequestFunc: method is nil but ec2Client.DescribeHostReservationOfferingsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeHostReservationOfferingsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeHostReservationOfferingsRequest.Lock()
	mock.calls.DescribeHostReservationOfferingsRequest = append(mock.calls.DescribeHostReservationOfferingsRequest, callInfo)
	lockec2ClientMockDescribeHostReservationOfferingsRequest.Unlock()
	return mock.DescribeHostReservationOfferingsRequestFunc(in1)
}

// DescribeHostReservationOfferingsRequestCalls gets all the calls that were made to DescribeHostReservationOfferingsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeHostReservationOfferingsRequestCalls())
func (mock *ec2ClientMock) DescribeHostReservationOfferingsRequestCalls() []struct {
	In1 *ec2.DescribeHostReservationOfferingsInput
} {
	var calls []struct {
		In1 *ec2.DescribeHostReservationOfferingsInput
	}
	lockec2ClientMockDescribeHostReservationOfferingsRequest.RLock()
	calls = mock.calls.DescribeHostReservationOfferingsRequest
	lockec2ClientMockDescribeHostReservationOfferingsRequest.RUnlock()
	return calls
}

// DescribeHostReservationOfferingsWithContext calls DescribeHostReservationOfferingsWithContextFunc.
func (mock *ec2ClientMock) DescribeHostReservationOfferingsWithContext(in1 context.Context, in2 *ec2.DescribeHostReservationOfferingsInput, in3 ...request.Option) (*ec2.DescribeHostReservationOfferingsOutput, error) {
	if mock.DescribeHostReservationOfferingsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeHostReservationOfferingsWithContextFunc: method is nil but ec2Client.DescribeHostReservationOfferingsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeHostReservationOfferingsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeHostReservationOfferingsWithContext.Lock()
	mock.calls.DescribeHostReservationOfferingsWithContext = append(mock.calls.DescribeHostReservationOfferingsWithContext, callInfo)
	lockec2ClientMockDescribeHostReservationOfferingsWithContext.Unlock()
	return mock.DescribeHostReservationOfferingsWithContextFunc(in1, in2, in3...)
}

// DescribeHostReservationOfferingsWithContextCalls gets all the calls that were made to DescribeHostReservationOfferingsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeHostReservationOfferingsWithContextCalls())
func (mock *ec2ClientMock) DescribeHostReservationOfferingsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeHostReservationOfferingsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeHostReservationOfferingsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeHostReservationOfferingsWithContext.RLock()
	calls = mock.calls.DescribeHostReservationOfferingsWithContext
	lockec2ClientMockDescribeHostReservationOfferingsWithContext.RUnlock()
	return calls
}

// DescribeHostReservations calls DescribeHostReservationsFunc.
func (mock *ec2ClientMock) DescribeHostReservations(in1 *ec2.DescribeHostReservationsInput) (*ec2.DescribeHostReservationsOutput, error) {
	if mock.DescribeHostReservationsFunc == nil {
		panic("ec2ClientMock.DescribeHostReservationsFunc: method is nil but ec2Client.DescribeHostReservations was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeHostReservationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeHostReservations.Lock()
	mock.calls.DescribeHostReservations = append(mock.calls.DescribeHostReservations, callInfo)
	lockec2ClientMockDescribeHostReservations.Unlock()
	return mock.DescribeHostReservationsFunc(in1)
}

// DescribeHostReservationsCalls gets all the calls that were made to DescribeHostReservations.
// Check the length with:
//     len(mockedec2Client.DescribeHostReservationsCalls())
func (mock *ec2ClientMock) DescribeHostReservationsCalls() []struct {
	In1 *ec2.DescribeHostReservationsInput
} {
	var calls []struct {
		In1 *ec2.DescribeHostReservationsInput
	}
	lockec2ClientMockDescribeHostReservations.RLock()
	calls = mock.calls.DescribeHostReservations
	lockec2ClientMockDescribeHostReservations.RUnlock()
	return calls
}

// DescribeHostReservationsPages calls DescribeHostReservationsPagesFunc.
func (mock *ec2ClientMock) DescribeHostReservationsPages(in1 *ec2.DescribeHostReservationsInput, in2 func(*ec2.DescribeHostReservationsOutput, bool) bool) error {
	if mock.DescribeHostReservationsPagesFunc == nil {
		panic("ec2ClientMock.DescribeHostReservationsPagesFunc: method is nil but ec2Client.DescribeHostReservationsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeHostReservationsInput
		In2 func(*ec2.DescribeHostReservationsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeHostReservationsPages.Lock()
	mock.calls.DescribeHostReservationsPages = append(mock.calls.DescribeHostReservationsPages, callInfo)
	lockec2ClientMockDescribeHostReservationsPages.Unlock()
	return mock.DescribeHostReservationsPagesFunc(in1, in2)
}

// DescribeHostReservationsPagesCalls gets all the calls that were made to DescribeHostReservationsPages.
// Check the length with:
//     len(mockedec2Client.DescribeHostReservationsPagesCalls())
func (mock *ec2ClientMock) DescribeHostReservationsPagesCalls() []struct {
	In1 *ec2.DescribeHostReservationsInput
	In2 func(*ec2.DescribeHostReservationsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeHostReservationsInput
		In2 func(*ec2.DescribeHostReservationsOutput, bool) bool
	}
	lockec2ClientMockDescribeHostReservationsPages.RLock()
	calls = mock.calls.DescribeHostReservationsPages
	lockec2ClientMockDescribeHostReservationsPages.RUnlock()
	return calls
}

// DescribeHostReservationsPagesWithContext calls DescribeHostReservationsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeHostReservationsPagesWithContext(in1 context.Context, in2 *ec2.DescribeHostReservationsInput, in3 func(*ec2.DescribeHostReservationsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeHostReservationsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeHostReservationsPagesWithContextFunc: method is nil but ec2Client.DescribeHostReservationsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeHostReservationsInput
		In3 func(*ec2.DescribeHostReservationsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeHostReservationsPagesWithContext.Lock()
	mock.calls.DescribeHostReservationsPagesWithContext = append(mock.calls.DescribeHostReservationsPagesWithContext, callInfo)
	lockec2ClientMockDescribeHostReservationsPagesWithContext.Unlock()
	return mock.DescribeHostReservationsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeHostReservationsPagesWithContextCalls gets all the calls that were made to DescribeHostReservationsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeHostReservationsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeHostReservationsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeHostReservationsInput
	In3 func(*ec2.DescribeHostReservationsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeHostReservationsInput
		In3 func(*ec2.DescribeHostReservationsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeHostReservationsPagesWithContext.RLock()
	calls = mock.calls.DescribeHostReservationsPagesWithContext
	lockec2ClientMockDescribeHostReservationsPagesWithContext.RUnlock()
	return calls
}

// DescribeHostReservationsRequest calls DescribeHostReservationsRequestFunc.
func (mock *ec2ClientMock) DescribeHostReservationsRequest(in1 *ec2.DescribeHostReservationsInput) (*request.Request, *ec2.DescribeHostReservationsOutput) {
	if mock.DescribeHostReservationsRequestFunc == nil {
		panic("ec2ClientMock.DescribeHostReservationsRequestFunc: method is nil but ec2Client.DescribeHostReservationsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeHostReservationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeHostReservationsRequest.Lock()
	mock.calls.DescribeHostReservationsRequest = append(mock.calls.DescribeHostReservationsRequest, callInfo)
	lockec2ClientMockDescribeHostReservationsRequest.Unlock()
	return mock.DescribeHostReservationsRequestFunc(in1)
}

// DescribeHostReservationsRequestCalls gets all the calls that were made to DescribeHostReservationsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeHostReservationsRequestCalls())
func (mock *ec2ClientMock) DescribeHostReservationsRequestCalls() []struct {
	In1 *ec2.DescribeHostReservationsInput
} {
	var calls []struct {
		In1 *ec2.DescribeHostReservationsInput
	}
	lockec2ClientMockDescribeHostReservationsRequest.RLock()
	calls = mock.calls.DescribeHostReservationsRequest
	lockec2ClientMockDescribeHostReservationsRequest.RUnlock()
	return calls
}

// DescribeHostReservationsWithContext calls DescribeHostReservationsWithContextFunc.
func (mock *ec2ClientMock) DescribeHostReservationsWithContext(in1 context.Context, in2 *ec2.DescribeHostReservationsInput, in3 ...request.Option) (*ec2.DescribeHostReservationsOutput, error) {
	if mock.DescribeHostReservationsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeHostReservationsWithContextFunc: method is nil but ec2Client.DescribeHostReservationsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeHostReservationsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeHostReservationsWithContext.Lock()
	mock.calls.DescribeHostReservationsWithContext = append(mock.calls.DescribeHostReservationsWithContext, callInfo)
	lockec2ClientMockDescribeHostReservationsWithContext.Unlock()
	return mock.DescribeHostReservationsWithContextFunc(in1, in2, in3...)
}

// DescribeHostReservationsWithContextCalls gets all the calls that were made to DescribeHostReservationsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeHostReservationsWithContextCalls())
func (mock *ec2ClientMock) DescribeHostReservationsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeHostReservationsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeHostReservationsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeHostReservationsWithContext.RLock()
	calls = mock.calls.DescribeHostReservationsWithContext
	lockec2ClientMockDescribeHostReservationsWithContext.RUnlock()
	return calls
}

// DescribeHosts calls DescribeHostsFunc.
func (mock *ec2ClientMock) DescribeHosts(in1 *ec2.DescribeHostsInput) (*ec2.DescribeHostsOutput, error) {
	if mock.DescribeHostsFunc == nil {
		panic("ec2ClientMock.DescribeHostsFunc: method is nil but ec2Client.DescribeHosts was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeHostsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeHosts.Lock()
	mock.calls.DescribeHosts = append(mock.calls.DescribeHosts, callInfo)
	lockec2ClientMockDescribeHosts.Unlock()
	return mock.DescribeHostsFunc(in1)
}

// DescribeHostsCalls gets all the calls that were made to DescribeHosts.
// Check the length with:
//     len(mockedec2Client.DescribeHostsCalls())
func (mock *ec2ClientMock) DescribeHostsCalls() []struct {
	In1 *ec2.DescribeHostsInput
} {
	var calls []struct {
		In1 *ec2.DescribeHostsInput
	}
	lockec2ClientMockDescribeHosts.RLock()
	calls = mock.calls.DescribeHosts
	lockec2ClientMockDescribeHosts.RUnlock()
	return calls
}

// DescribeHostsPages calls DescribeHostsPagesFunc.
func (mock *ec2ClientMock) DescribeHostsPages(in1 *ec2.DescribeHostsInput, in2 func(*ec2.DescribeHostsOutput, bool) bool) error {
	if mock.DescribeHostsPagesFunc == nil {
		panic("ec2ClientMock.DescribeHostsPagesFunc: method is nil but ec2Client.DescribeHostsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeHostsInput
		In2 func(*ec2.DescribeHostsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeHostsPages.Lock()
	mock.calls.DescribeHostsPages = append(mock.calls.DescribeHostsPages, callInfo)
	lockec2ClientMockDescribeHostsPages.Unlock()
	return mock.DescribeHostsPagesFunc(in1, in2)
}

// DescribeHostsPagesCalls gets all the calls that were made to DescribeHostsPages.
// Check the length with:
//     len(mockedec2Client.DescribeHostsPagesCalls())
func (mock *ec2ClientMock) DescribeHostsPagesCalls() []struct {
	In1 *ec2.DescribeHostsInput
	In2 func(*ec2.DescribeHostsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeHostsInput
		In2 func(*ec2.DescribeHostsOutput, bool) bool
	}
	lockec2ClientMockDescribeHostsPages.RLock()
	calls = mock.calls.DescribeHostsPages
	lockec2ClientMockDescribeHostsPages.RUnlock()
	return calls
}

// DescribeHostsPagesWithContext calls DescribeHostsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeHostsPagesWithContext(in1 context.Context, in2 *ec2.DescribeHostsInput, in3 func(*ec2.DescribeHostsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeHostsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeHostsPagesWithContextFunc: method is nil but ec2Client.DescribeHostsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeHostsInput
		In3 func(*ec2.DescribeHostsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeHostsPagesWithContext.Lock()
	mock.calls.DescribeHostsPagesWithContext = append(mock.calls.DescribeHostsPagesWithContext, callInfo)
	lockec2ClientMockDescribeHostsPagesWithContext.Unlock()
	return mock.DescribeHostsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeHostsPagesWithContextCalls gets all the calls that were made to DescribeHostsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeHostsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeHostsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeHostsInput
	In3 func(*ec2.DescribeHostsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeHostsInput
		In3 func(*ec2.DescribeHostsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeHostsPagesWithContext.RLock()
	calls = mock.calls.DescribeHostsPagesWithContext
	lockec2ClientMockDescribeHostsPagesWithContext.RUnlock()
	return calls
}

// DescribeHostsRequest calls DescribeHostsRequestFunc.
func (mock *ec2ClientMock) DescribeHostsRequest(in1 *ec2.DescribeHostsInput) (*request.Request, *ec2.DescribeHostsOutput) {
	if mock.DescribeHostsRequestFunc == nil {
		panic("ec2ClientMock.DescribeHostsRequestFunc: method is nil but ec2Client.DescribeHostsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeHostsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeHostsRequest.Lock()
	mock.calls.DescribeHostsRequest = append(mock.calls.DescribeHostsRequest, callInfo)
	lockec2ClientMockDescribeHostsRequest.Unlock()
	return mock.DescribeHostsRequestFunc(in1)
}

// DescribeHostsRequestCalls gets all the calls that were made to DescribeHostsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeHostsRequestCalls())
func (mock *ec2ClientMock) DescribeHostsRequestCalls() []struct {
	In1 *ec2.DescribeHostsInput
} {
	var calls []struct {
		In1 *ec2.DescribeHostsInput
	}
	lockec2ClientMockDescribeHostsRequest.RLock()
	calls = mock.calls.DescribeHostsRequest
	lockec2ClientMockDescribeHostsRequest.RUnlock()
	return calls
}

// DescribeHostsWithContext calls DescribeHostsWithContextFunc.
func (mock *ec2ClientMock) DescribeHostsWithContext(in1 context.Context, in2 *ec2.DescribeHostsInput, in3 ...request.Option) (*ec2.DescribeHostsOutput, error) {
	if mock.DescribeHostsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeHostsWithContextFunc: method is nil but ec2Client.DescribeHostsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeHostsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeHostsWithContext.Lock()
	mock.calls.DescribeHostsWithContext = append(mock.calls.DescribeHostsWithContext, callInfo)
	lockec2ClientMockDescribeHostsWithContext.Unlock()
	return mock.DescribeHostsWithContextFunc(in1, in2, in3...)
}

// DescribeHostsWithContextCalls gets all the calls that were made to DescribeHostsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeHostsWithContextCalls())
func (mock *ec2ClientMock) DescribeHostsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeHostsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeHostsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeHostsWithContext.RLock()
	calls = mock.calls.DescribeHostsWithContext
	lockec2ClientMockDescribeHostsWithContext.RUnlock()
	return calls
}

// DescribeIamInstanceProfileAssociations calls DescribeIamInstanceProfileAssociationsFunc.
func (mock *ec2ClientMock) DescribeIamInstanceProfileAssociations(in1 *ec2.DescribeIamInstanceProfileAssociationsInput) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error) {
	if mock.DescribeIamInstanceProfileAssociationsFunc == nil {
		panic("ec2ClientMock.DescribeIamInstanceProfileAssociationsFunc: method is nil but ec2Client.DescribeIamInstanceProfileAssociations was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeIamInstanceProfileAssociationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeIamInstanceProfileAssociations.Lock()
	mock.calls.DescribeIamInstanceProfileAssociations = append(mock.calls.DescribeIamInstanceProfileAssociations, callInfo)
	lockec2ClientMockDescribeIamInstanceProfileAssociations.Unlock()
	return mock.DescribeIamInstanceProfileAssociationsFunc(in1)
}

// DescribeIamInstanceProfileAssociationsCalls gets all the calls that were made to DescribeIamInstanceProfileAssociations.
// Check the length with:
//     len(mockedec2Client.DescribeIamInstanceProfileAssociationsCalls())
func (mock *ec2ClientMock) DescribeIamInstanceProfileAssociationsCalls() []struct {
	In1 *ec2.DescribeIamInstanceProfileAssociationsInput
} {
	var calls []struct {
		In1 *ec2.DescribeIamInstanceProfileAssociationsInput
	}
	lockec2ClientMockDescribeIamInstanceProfileAssociations.RLock()
	calls = mock.calls.DescribeIamInstanceProfileAssociations
	lockec2ClientMockDescribeIamInstanceProfileAssociations.RUnlock()
	return calls
}

// DescribeIamInstanceProfileAssociationsPages calls DescribeIamInstanceProfileAssociationsPagesFunc.
func (mock *ec2ClientMock) DescribeIamInstanceProfileAssociationsPages(in1 *ec2.DescribeIamInstanceProfileAssociationsInput, in2 func(*ec2.DescribeIamInstanceProfileAssociationsOutput, bool) bool) error {
	if mock.DescribeIamInstanceProfileAssociationsPagesFunc == nil {
		panic("ec2ClientMock.DescribeIamInstanceProfileAssociationsPagesFunc: method is nil but ec2Client.DescribeIamInstanceProfileAssociationsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeIamInstanceProfileAssociationsInput
		In2 func(*ec2.DescribeIamInstanceProfileAssociationsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeIamInstanceProfileAssociationsPages.Lock()
	mock.calls.DescribeIamInstanceProfileAssociationsPages = append(mock.calls.DescribeIamInstanceProfileAssociationsPages, callInfo)
	lockec2ClientMockDescribeIamInstanceProfileAssociationsPages.Unlock()
	return mock.DescribeIamInstanceProfileAssociationsPagesFunc(in1, in2)
}

// DescribeIamInstanceProfileAssociationsPagesCalls gets all the calls that were made to DescribeIamInstanceProfileAssociationsPages.
// Check the length with:
//     len(mockedec2Client.DescribeIamInstanceProfileAssociationsPagesCalls())
func (mock *ec2ClientMock) DescribeIamInstanceProfileAssociationsPagesCalls() []struct {
	In1 *ec2.DescribeIamInstanceProfileAssociationsInput
	In2 func(*ec2.DescribeIamInstanceProfileAssociationsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeIamInstanceProfileAssociationsInput
		In2 func(*ec2.DescribeIamInstanceProfileAssociationsOutput, bool) bool
	}
	lockec2ClientMockDescribeIamInstanceProfileAssociationsPages.RLock()
	calls = mock.calls.DescribeIamInstanceProfileAssociationsPages
	lockec2ClientMockDescribeIamInstanceProfileAssociationsPages.RUnlock()
	return calls
}

// DescribeIamInstanceProfileAssociationsPagesWithContext calls DescribeIamInstanceProfileAssociationsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeIamInstanceProfileAssociationsPagesWithContext(in1 context.Context, in2 *ec2.DescribeIamInstanceProfileAssociationsInput, in3 func(*ec2.DescribeIamInstanceProfileAssociationsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeIamInstanceProfileAssociationsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeIamInstanceProfileAssociationsPagesWithContextFunc: method is nil but ec2Client.DescribeIamInstanceProfileAssociationsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeIamInstanceProfileAssociationsInput
		In3 func(*ec2.DescribeIamInstanceProfileAssociationsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeIamInstanceProfileAssociationsPagesWithContext.Lock()
	mock.calls.DescribeIamInstanceProfileAssociationsPagesWithContext = append(mock.calls.DescribeIamInstanceProfileAssociationsPagesWithContext, callInfo)
	lockec2ClientMockDescribeIamInstanceProfileAssociationsPagesWithContext.Unlock()
	return mock.DescribeIamInstanceProfileAssociationsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeIamInstanceProfileAssociationsPagesWithContextCalls gets all the calls that were made to DescribeIamInstanceProfileAssociationsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeIamInstanceProfileAssociationsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeIamInstanceProfileAssociationsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeIamInstanceProfileAssociationsInput
	In3 func(*ec2.DescribeIamInstanceProfileAssociationsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeIamInstanceProfileAssociationsInput
		In3 func(*ec2.DescribeIamInstanceProfileAssociationsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeIamInstanceProfileAssociationsPagesWithContext.RLock()
	calls = mock.calls.DescribeIamInstanceProfileAssociationsPagesWithContext
	lockec2ClientMockDescribeIamInstanceProfileAssociationsPagesWithContext.RUnlock()
	return calls
}

// DescribeIamInstanceProfileAssociationsRequest calls DescribeIamInstanceProfileAssociationsRequestFunc.
func (mock *ec2ClientMock) DescribeIamInstanceProfileAssociationsRequest(in1 *ec2.DescribeIamInstanceProfileAssociationsInput) (*request.Request, *ec2.DescribeIamInstanceProfileAssociationsOutput) {
	if mock.DescribeIamInstanceProfileAssociationsRequestFunc == nil {
		panic("ec2ClientMock.DescribeIamInstanceProfileAssociationsRequestFunc: method is nil but ec2Client.DescribeIamInstanceProfileAssociationsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeIamInstanceProfileAssociationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeIamInstanceProfileAssociationsRequest.Lock()
	mock.calls.DescribeIamInstanceProfileAssociationsRequest = append(mock.calls.DescribeIamInstanceProfileAssociationsRequest, callInfo)
	lockec2ClientMockDescribeIamInstanceProfileAssociationsRequest.Unlock()
	return mock.DescribeIamInstanceProfileAssociationsRequestFunc(in1)
}

// DescribeIamInstanceProfileAssociationsRequestCalls gets all the calls that were made to DescribeIamInstanceProfileAssociationsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeIamInstanceProfileAssociationsRequestCalls())
func (mock *ec2ClientMock) DescribeIamInstanceProfileAssociationsRequestCalls() []struct {
	In1 *ec2.DescribeIamInstanceProfileAssociationsInput
} {
	var calls []struct {
		In1 *ec2.DescribeIamInstanceProfileAssociationsInput
	}
	lockec2ClientMockDescribeIamInstanceProfileAssociationsRequest.RLock()
	calls = mock.calls.DescribeIamInstanceProfileAssociationsRequest
	lockec2ClientMockDescribeIamInstanceProfileAssociationsRequest.RUnlock()
	return calls
}

// DescribeIamInstanceProfileAssociationsWithContext calls DescribeIamInstanceProfileAssociationsWithContextFunc.
func (mock *ec2ClientMock) DescribeIamInstanceProfileAssociationsWithContext(in1 context.Context, in2 *ec2.DescribeIamInstanceProfileAssociationsInput, in3 ...request.Option) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error) {
	if mock.DescribeIamInstanceProfileAssociationsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeIamInstanceProfileAssociationsWithContextFunc: method is nil but ec2Client.DescribeIamInstanceProfileAssociationsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeIamInstanceProfileAssociationsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeIamInstanceProfileAssociationsWithContext.Lock()
	mock.calls.DescribeIamInstanceProfileAssociationsWithContext = append(mock.calls.DescribeIamInstanceProfileAssociationsWithContext, callInfo)
	lockec2ClientMockDescribeIamInstanceProfileAssociationsWithContext.Unlock()
	return mock.DescribeIamInstanceProfileAssociationsWithContextFunc(in1, in2, in3...)
}

// DescribeIamInstanceProfileAssociationsWithContextCalls gets all the calls that were made to DescribeIamInstanceProfileAssociationsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeIamInstanceProfileAssociationsWithContextCalls())
func (mock *ec2ClientMock) DescribeIamInstanceProfileAssociationsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeIamInstanceProfileAssociationsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeIamInstanceProfileAssociationsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeIamInstanceProfileAssociationsWithContext.RLock()
	calls = mock.calls.DescribeIamInstanceProfileAssociationsWithContext
	lockec2ClientMockDescribeIamInstanceProfileAssociationsWithContext.RUnlock()
	return calls
}

// DescribeIdFormat calls DescribeIdFormatFunc.
func (mock *ec2ClientMock) DescribeIdFormat(in1 *ec2.DescribeIdFormatInput) (*ec2.DescribeIdFormatOutput, error) {
	if mock.DescribeIdFormatFunc == nil {
		panic("ec2ClientMock.DescribeIdFormatFunc: method is nil but ec2Client.DescribeIdFormat was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeIdFormatInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeIdFormat.Lock()
	mock.calls.DescribeIdFormat = append(mock.calls.DescribeIdFormat, callInfo)
	lockec2ClientMockDescribeIdFormat.Unlock()
	return mock.DescribeIdFormatFunc(in1)
}

// DescribeIdFormatCalls gets all the calls that were made to DescribeIdFormat.
// Check the length with:
//     len(mockedec2Client.DescribeIdFormatCalls())
func (mock *ec2ClientMock) DescribeIdFormatCalls() []struct {
	In1 *ec2.DescribeIdFormatInput
} {
	var calls []struct {
		In1 *ec2.DescribeIdFormatInput
	}
	lockec2ClientMockDescribeIdFormat.RLock()
	calls = mock.calls.DescribeIdFormat
	lockec2ClientMockDescribeIdFormat.RUnlock()
	return calls
}

// DescribeIdFormatRequest calls DescribeIdFormatRequestFunc.
func (mock *ec2ClientMock) DescribeIdFormatRequest(in1 *ec2.DescribeIdFormatInput) (*request.Request, *ec2.DescribeIdFormatOutput) {
	if mock.DescribeIdFormatRequestFunc == nil {
		panic("ec2ClientMock.DescribeIdFormatRequestFunc: method is nil but ec2Client.DescribeIdFormatRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeIdFormatInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeIdFormatRequest.Lock()
	mock.calls.DescribeIdFormatRequest = append(mock.calls.DescribeIdFormatRequest, callInfo)
	lockec2ClientMockDescribeIdFormatRequest.Unlock()
	return mock.DescribeIdFormatRequestFunc(in1)
}

// DescribeIdFormatRequestCalls gets all the calls that were made to DescribeIdFormatRequest.
// Check the length with:
//     len(mockedec2Client.DescribeIdFormatRequestCalls())
func (mock *ec2ClientMock) DescribeIdFormatRequestCalls() []struct {
	In1 *ec2.DescribeIdFormatInput
} {
	var calls []struct {
		In1 *ec2.DescribeIdFormatInput
	}
	lockec2ClientMockDescribeIdFormatRequest.RLock()
	calls = mock.calls.DescribeIdFormatRequest
	lockec2ClientMockDescribeIdFormatRequest.RUnlock()
	return calls
}

// DescribeIdFormatWithContext calls DescribeIdFormatWithContextFunc.
func (mock *ec2ClientMock) DescribeIdFormatWithContext(in1 context.Context, in2 *ec2.DescribeIdFormatInput, in3 ...request.Option) (*ec2.DescribeIdFormatOutput, error) {
	if mock.DescribeIdFormatWithContextFunc == nil {
		panic("ec2ClientMock.DescribeIdFormatWithContextFunc: method is nil but ec2Client.DescribeIdFormatWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeIdFormatInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeIdFormatWithContext.Lock()
	mock.calls.DescribeIdFormatWithContext = append(mock.calls.DescribeIdFormatWithContext, callInfo)
	lockec2ClientMockDescribeIdFormatWithContext.Unlock()
	return mock.DescribeIdFormatWithContextFunc(in1, in2, in3...)
}

// DescribeIdFormatWithContextCalls gets all the calls that were made to DescribeIdFormatWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeIdFormatWithContextCalls())
func (mock *ec2ClientMock) DescribeIdFormatWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeIdFormatInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeIdFormatInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeIdFormatWithContext.RLock()
	calls = mock.calls.DescribeIdFormatWithContext
	lockec2ClientMockDescribeIdFormatWithContext.RUnlock()
	return calls
}

// DescribeIdentityIdFormat calls DescribeIdentityIdFormatFunc.
func (mock *ec2ClientMock) DescribeIdentityIdFormat(in1 *ec2.DescribeIdentityIdFormatInput) (*ec2.DescribeIdentityIdFormatOutput, error) {
	if mock.DescribeIdentityIdFormatFunc == nil {
		panic("ec2ClientMock.DescribeIdentityIdFormatFunc: method is nil but ec2Client.DescribeIdentityIdFormat was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeIdentityIdFormatInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeIdentityIdFormat.Lock()
	mock.calls.DescribeIdentityIdFormat = append(mock.calls.DescribeIdentityIdFormat, callInfo)
	lockec2ClientMockDescribeIdentityIdFormat.Unlock()
	return mock.DescribeIdentityIdFormatFunc(in1)
}

// DescribeIdentityIdFormatCalls gets all the calls that were made to DescribeIdentityIdFormat.
// Check the length with:
//     len(mockedec2Client.DescribeIdentityIdFormatCalls())
func (mock *ec2ClientMock) DescribeIdentityIdFormatCalls() []struct {
	In1 *ec2.DescribeIdentityIdFormatInput
} {
	var calls []struct {
		In1 *ec2.DescribeIdentityIdFormatInput
	}
	lockec2ClientMockDescribeIdentityIdFormat.RLock()
	calls = mock.calls.DescribeIdentityIdFormat
	lockec2ClientMockDescribeIdentityIdFormat.RUnlock()
	return calls
}

// DescribeIdentityIdFormatRequest calls DescribeIdentityIdFormatRequestFunc.
func (mock *ec2ClientMock) DescribeIdentityIdFormatRequest(in1 *ec2.DescribeIdentityIdFormatInput) (*request.Request, *ec2.DescribeIdentityIdFormatOutput) {
	if mock.DescribeIdentityIdFormatRequestFunc == nil {
		panic("ec2ClientMock.DescribeIdentityIdFormatRequestFunc: method is nil but ec2Client.DescribeIdentityIdFormatRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeIdentityIdFormatInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeIdentityIdFormatRequest.Lock()
	mock.calls.DescribeIdentityIdFormatRequest = append(mock.calls.DescribeIdentityIdFormatRequest, callInfo)
	lockec2ClientMockDescribeIdentityIdFormatRequest.Unlock()
	return mock.DescribeIdentityIdFormatRequestFunc(in1)
}

// DescribeIdentityIdFormatRequestCalls gets all the calls that were made to DescribeIdentityIdFormatRequest.
// Check the length with:
//     len(mockedec2Client.DescribeIdentityIdFormatRequestCalls())
func (mock *ec2ClientMock) DescribeIdentityIdFormatRequestCalls() []struct {
	In1 *ec2.DescribeIdentityIdFormatInput
} {
	var calls []struct {
		In1 *ec2.DescribeIdentityIdFormatInput
	}
	lockec2ClientMockDescribeIdentityIdFormatRequest.RLock()
	calls = mock.calls.DescribeIdentityIdFormatRequest
	lockec2ClientMockDescribeIdentityIdFormatRequest.RUnlock()
	return calls
}

// DescribeIdentityIdFormatWithContext calls DescribeIdentityIdFormatWithContextFunc.
func (mock *ec2ClientMock) DescribeIdentityIdFormatWithContext(in1 context.Context, in2 *ec2.DescribeIdentityIdFormatInput, in3 ...request.Option) (*ec2.DescribeIdentityIdFormatOutput, error) {
	if mock.DescribeIdentityIdFormatWithContextFunc == nil {
		panic("ec2ClientMock.DescribeIdentityIdFormatWithContextFunc: method is nil but ec2Client.DescribeIdentityIdFormatWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeIdentityIdFormatInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeIdentityIdFormatWithContext.Lock()
	mock.calls.DescribeIdentityIdFormatWithContext = append(mock.calls.DescribeIdentityIdFormatWithContext, callInfo)
	lockec2ClientMockDescribeIdentityIdFormatWithContext.Unlock()
	return mock.DescribeIdentityIdFormatWithContextFunc(in1, in2, in3...)
}

// DescribeIdentityIdFormatWithContextCalls gets all the calls that were made to DescribeIdentityIdFormatWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeIdentityIdFormatWithContextCalls())
func (mock *ec2ClientMock) DescribeIdentityIdFormatWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeIdentityIdFormatInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeIdentityIdFormatInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeIdentityIdFormatWithContext.RLock()
	calls = mock.calls.DescribeIdentityIdFormatWithContext
	lockec2ClientMockDescribeIdentityIdFormatWithContext.RUnlock()
	return calls
}

// DescribeImageAttribute calls DescribeImageAttributeFunc.
func (mock *ec2ClientMock) DescribeImageAttribute(in1 *ec2.DescribeImageAttributeInput) (*ec2.DescribeImageAttributeOutput, error) {
	if mock.DescribeImageAttributeFunc == nil {
		panic("ec2ClientMock.DescribeImageAttributeFunc: method is nil but ec2Client.DescribeImageAttribute was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeImageAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeImageAttribute.Lock()
	mock.calls.DescribeImageAttribute = append(mock.calls.DescribeImageAttribute, callInfo)
	lockec2ClientMockDescribeImageAttribute.Unlock()
	return mock.DescribeImageAttributeFunc(in1)
}

// DescribeImageAttributeCalls gets all the calls that were made to DescribeImageAttribute.
// Check the length with:
//     len(mockedec2Client.DescribeImageAttributeCalls())
func (mock *ec2ClientMock) DescribeImageAttributeCalls() []struct {
	In1 *ec2.DescribeImageAttributeInput
} {
	var calls []struct {
		In1 *ec2.DescribeImageAttributeInput
	}
	lockec2ClientMockDescribeImageAttribute.RLock()
	calls = mock.calls.DescribeImageAttribute
	lockec2ClientMockDescribeImageAttribute.RUnlock()
	return calls
}

// DescribeImageAttributeRequest calls DescribeImageAttributeRequestFunc.
func (mock *ec2ClientMock) DescribeImageAttributeRequest(in1 *ec2.DescribeImageAttributeInput) (*request.Request, *ec2.DescribeImageAttributeOutput) {
	if mock.DescribeImageAttributeRequestFunc == nil {
		panic("ec2ClientMock.DescribeImageAttributeRequestFunc: method is nil but ec2Client.DescribeImageAttributeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeImageAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeImageAttributeRequest.Lock()
	mock.calls.DescribeImageAttributeRequest = append(mock.calls.DescribeImageAttributeRequest, callInfo)
	lockec2ClientMockDescribeImageAttributeRequest.Unlock()
	return mock.DescribeImageAttributeRequestFunc(in1)
}

// DescribeImageAttributeRequestCalls gets all the calls that were made to DescribeImageAttributeRequest.
// Check the length with:
//     len(mockedec2Client.DescribeImageAttributeRequestCalls())
func (mock *ec2ClientMock) DescribeImageAttributeRequestCalls() []struct {
	In1 *ec2.DescribeImageAttributeInput
} {
	var calls []struct {
		In1 *ec2.DescribeImageAttributeInput
	}
	lockec2ClientMockDescribeImageAttributeRequest.RLock()
	calls = mock.calls.DescribeImageAttributeRequest
	lockec2ClientMockDescribeImageAttributeRequest.RUnlock()
	return calls
}

// DescribeImageAttributeWithContext calls DescribeImageAttributeWithContextFunc.
func (mock *ec2ClientMock) DescribeImageAttributeWithContext(in1 context.Context, in2 *ec2.DescribeImageAttributeInput, in3 ...request.Option) (*ec2.DescribeImageAttributeOutput, error) {
	if mock.DescribeImageAttributeWithContextFunc == nil {
		panic("ec2ClientMock.DescribeImageAttributeWithContextFunc: method is nil but ec2Client.DescribeImageAttributeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeImageAttributeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeImageAttributeWithContext.Lock()
	mock.calls.DescribeImageAttributeWithContext = append(mock.calls.DescribeImageAttributeWithContext, callInfo)
	lockec2ClientMockDescribeImageAttributeWithContext.Unlock()
	return mock.DescribeImageAttributeWithContextFunc(in1, in2, in3...)
}

// DescribeImageAttributeWithContextCalls gets all the calls that were made to DescribeImageAttributeWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeImageAttributeWithContextCalls())
func (mock *ec2ClientMock) DescribeImageAttributeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeImageAttributeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeImageAttributeInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeImageAttributeWithContext.RLock()
	calls = mock.calls.DescribeImageAttributeWithContext
	lockec2ClientMockDescribeImageAttributeWithContext.RUnlock()
	return calls
}

// DescribeImages calls DescribeImagesFunc.
func (mock *ec2ClientMock) DescribeImages(in1 *ec2.DescribeImagesInput) (*ec2.DescribeImagesOutput, error) {
	if mock.DescribeImagesFunc == nil {
		panic("ec2ClientMock.DescribeImagesFunc: method is nil but ec2Client.DescribeImages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeImagesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeImages.Lock()
	mock.calls.DescribeImages = append(mock.calls.DescribeImages, callInfo)
	lockec2ClientMockDescribeImages.Unlock()
	return mock.DescribeImagesFunc(in1)
}

// DescribeImagesCalls gets all the calls that were made to DescribeImages.
// Check the length with:
//     len(mockedec2Client.DescribeImagesCalls())
func (mock *ec2ClientMock) DescribeImagesCalls() []struct {
	In1 *ec2.DescribeImagesInput
} {
	var calls []struct {
		In1 *ec2.DescribeImagesInput
	}
	lockec2ClientMockDescribeImages.RLock()
	calls = mock.calls.DescribeImages
	lockec2ClientMockDescribeImages.RUnlock()
	return calls
}

// DescribeImagesRequest calls DescribeImagesRequestFunc.
func (mock *ec2ClientMock) DescribeImagesRequest(in1 *ec2.DescribeImagesInput) (*request.Request, *ec2.DescribeImagesOutput) {
	if mock.DescribeImagesRequestFunc == nil {
		panic("ec2ClientMock.DescribeImagesRequestFunc: method is nil but ec2Client.DescribeImagesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeImagesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeImagesRequest.Lock()
	mock.calls.DescribeImagesRequest = append(mock.calls.DescribeImagesRequest, callInfo)
	lockec2ClientMockDescribeImagesRequest.Unlock()
	return mock.DescribeImagesRequestFunc(in1)
}

// DescribeImagesRequestCalls gets all the calls that were made to DescribeImagesRequest.
// Check the length with:
//     len(mockedec2Client.DescribeImagesRequestCalls())
func (mock *ec2ClientMock) DescribeImagesRequestCalls() []struct {
	In1 *ec2.DescribeImagesInput
} {
	var calls []struct {
		In1 *ec2.DescribeImagesInput
	}
	lockec2ClientMockDescribeImagesRequest.RLock()
	calls = mock.calls.DescribeImagesRequest
	lockec2ClientMockDescribeImagesRequest.RUnlock()
	return calls
}

// DescribeImagesWithContext calls DescribeImagesWithContextFunc.
func (mock *ec2ClientMock) DescribeImagesWithContext(in1 context.Context, in2 *ec2.DescribeImagesInput, in3 ...request.Option) (*ec2.DescribeImagesOutput, error) {
	if mock.DescribeImagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeImagesWithContextFunc: method is nil but ec2Client.DescribeImagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeImagesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeImagesWithContext.Lock()
	mock.calls.DescribeImagesWithContext = append(mock.calls.DescribeImagesWithContext, callInfo)
	lockec2ClientMockDescribeImagesWithContext.Unlock()
	return mock.DescribeImagesWithContextFunc(in1, in2, in3...)
}

// DescribeImagesWithContextCalls gets all the calls that were made to DescribeImagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeImagesWithContextCalls())
func (mock *ec2ClientMock) DescribeImagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeImagesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeImagesInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeImagesWithContext.RLock()
	calls = mock.calls.DescribeImagesWithContext
	lockec2ClientMockDescribeImagesWithContext.RUnlock()
	return calls
}

// DescribeImportImageTasks calls DescribeImportImageTasksFunc.
func (mock *ec2ClientMock) DescribeImportImageTasks(in1 *ec2.DescribeImportImageTasksInput) (*ec2.DescribeImportImageTasksOutput, error) {
	if mock.DescribeImportImageTasksFunc == nil {
		panic("ec2ClientMock.DescribeImportImageTasksFunc: method is nil but ec2Client.DescribeImportImageTasks was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeImportImageTasksInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeImportImageTasks.Lock()
	mock.calls.DescribeImportImageTasks = append(mock.calls.DescribeImportImageTasks, callInfo)
	lockec2ClientMockDescribeImportImageTasks.Unlock()
	return mock.DescribeImportImageTasksFunc(in1)
}

// DescribeImportImageTasksCalls gets all the calls that were made to DescribeImportImageTasks.
// Check the length with:
//     len(mockedec2Client.DescribeImportImageTasksCalls())
func (mock *ec2ClientMock) DescribeImportImageTasksCalls() []struct {
	In1 *ec2.DescribeImportImageTasksInput
} {
	var calls []struct {
		In1 *ec2.DescribeImportImageTasksInput
	}
	lockec2ClientMockDescribeImportImageTasks.RLock()
	calls = mock.calls.DescribeImportImageTasks
	lockec2ClientMockDescribeImportImageTasks.RUnlock()
	return calls
}

// DescribeImportImageTasksPages calls DescribeImportImageTasksPagesFunc.
func (mock *ec2ClientMock) DescribeImportImageTasksPages(in1 *ec2.DescribeImportImageTasksInput, in2 func(*ec2.DescribeImportImageTasksOutput, bool) bool) error {
	if mock.DescribeImportImageTasksPagesFunc == nil {
		panic("ec2ClientMock.DescribeImportImageTasksPagesFunc: method is nil but ec2Client.DescribeImportImageTasksPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeImportImageTasksInput
		In2 func(*ec2.DescribeImportImageTasksOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeImportImageTasksPages.Lock()
	mock.calls.DescribeImportImageTasksPages = append(mock.calls.DescribeImportImageTasksPages, callInfo)
	lockec2ClientMockDescribeImportImageTasksPages.Unlock()
	return mock.DescribeImportImageTasksPagesFunc(in1, in2)
}

// DescribeImportImageTasksPagesCalls gets all the calls that were made to DescribeImportImageTasksPages.
// Check the length with:
//     len(mockedec2Client.DescribeImportImageTasksPagesCalls())
func (mock *ec2ClientMock) DescribeImportImageTasksPagesCalls() []struct {
	In1 *ec2.DescribeImportImageTasksInput
	In2 func(*ec2.DescribeImportImageTasksOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeImportImageTasksInput
		In2 func(*ec2.DescribeImportImageTasksOutput, bool) bool
	}
	lockec2ClientMockDescribeImportImageTasksPages.RLock()
	calls = mock.calls.DescribeImportImageTasksPages
	lockec2ClientMockDescribeImportImageTasksPages.RUnlock()
	return calls
}

// DescribeImportImageTasksPagesWithContext calls DescribeImportImageTasksPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeImportImageTasksPagesWithContext(in1 context.Context, in2 *ec2.DescribeImportImageTasksInput, in3 func(*ec2.DescribeImportImageTasksOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeImportImageTasksPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeImportImageTasksPagesWithContextFunc: method is nil but ec2Client.DescribeImportImageTasksPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeImportImageTasksInput
		In3 func(*ec2.DescribeImportImageTasksOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeImportImageTasksPagesWithContext.Lock()
	mock.calls.DescribeImportImageTasksPagesWithContext = append(mock.calls.DescribeImportImageTasksPagesWithContext, callInfo)
	lockec2ClientMockDescribeImportImageTasksPagesWithContext.Unlock()
	return mock.DescribeImportImageTasksPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeImportImageTasksPagesWithContextCalls gets all the calls that were made to DescribeImportImageTasksPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeImportImageTasksPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeImportImageTasksPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeImportImageTasksInput
	In3 func(*ec2.DescribeImportImageTasksOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeImportImageTasksInput
		In3 func(*ec2.DescribeImportImageTasksOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeImportImageTasksPagesWithContext.RLock()
	calls = mock.calls.DescribeImportImageTasksPagesWithContext
	lockec2ClientMockDescribeImportImageTasksPagesWithContext.RUnlock()
	return calls
}

// DescribeImportImageTasksRequest calls DescribeImportImageTasksRequestFunc.
func (mock *ec2ClientMock) DescribeImportImageTasksRequest(in1 *ec2.DescribeImportImageTasksInput) (*request.Request, *ec2.DescribeImportImageTasksOutput) {
	if mock.DescribeImportImageTasksRequestFunc == nil {
		panic("ec2ClientMock.DescribeImportImageTasksRequestFunc: method is nil but ec2Client.DescribeImportImageTasksRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeImportImageTasksInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeImportImageTasksRequest.Lock()
	mock.calls.DescribeImportImageTasksRequest = append(mock.calls.DescribeImportImageTasksRequest, callInfo)
	lockec2ClientMockDescribeImportImageTasksRequest.Unlock()
	return mock.DescribeImportImageTasksRequestFunc(in1)
}

// DescribeImportImageTasksRequestCalls gets all the calls that were made to DescribeImportImageTasksRequest.
// Check the length with:
//     len(mockedec2Client.DescribeImportImageTasksRequestCalls())
func (mock *ec2ClientMock) DescribeImportImageTasksRequestCalls() []struct {
	In1 *ec2.DescribeImportImageTasksInput
} {
	var calls []struct {
		In1 *ec2.DescribeImportImageTasksInput
	}
	lockec2ClientMockDescribeImportImageTasksRequest.RLock()
	calls = mock.calls.DescribeImportImageTasksRequest
	lockec2ClientMockDescribeImportImageTasksRequest.RUnlock()
	return calls
}

// DescribeImportImageTasksWithContext calls DescribeImportImageTasksWithContextFunc.
func (mock *ec2ClientMock) DescribeImportImageTasksWithContext(in1 context.Context, in2 *ec2.DescribeImportImageTasksInput, in3 ...request.Option) (*ec2.DescribeImportImageTasksOutput, error) {
	if mock.DescribeImportImageTasksWithContextFunc == nil {
		panic("ec2ClientMock.DescribeImportImageTasksWithContextFunc: method is nil but ec2Client.DescribeImportImageTasksWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeImportImageTasksInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeImportImageTasksWithContext.Lock()
	mock.calls.DescribeImportImageTasksWithContext = append(mock.calls.DescribeImportImageTasksWithContext, callInfo)
	lockec2ClientMockDescribeImportImageTasksWithContext.Unlock()
	return mock.DescribeImportImageTasksWithContextFunc(in1, in2, in3...)
}

// DescribeImportImageTasksWithContextCalls gets all the calls that were made to DescribeImportImageTasksWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeImportImageTasksWithContextCalls())
func (mock *ec2ClientMock) DescribeImportImageTasksWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeImportImageTasksInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeImportImageTasksInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeImportImageTasksWithContext.RLock()
	calls = mock.calls.DescribeImportImageTasksWithContext
	lockec2ClientMockDescribeImportImageTasksWithContext.RUnlock()
	return calls
}

// DescribeImportSnapshotTasks calls DescribeImportSnapshotTasksFunc.
func (mock *ec2ClientMock) DescribeImportSnapshotTasks(in1 *ec2.DescribeImportSnapshotTasksInput) (*ec2.DescribeImportSnapshotTasksOutput, error) {
	if mock.DescribeImportSnapshotTasksFunc == nil {
		panic("ec2ClientMock.DescribeImportSnapshotTasksFunc: method is nil but ec2Client.DescribeImportSnapshotTasks was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeImportSnapshotTasksInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeImportSnapshotTasks.Lock()
	mock.calls.DescribeImportSnapshotTasks = append(mock.calls.DescribeImportSnapshotTasks, callInfo)
	lockec2ClientMockDescribeImportSnapshotTasks.Unlock()
	return mock.DescribeImportSnapshotTasksFunc(in1)
}

// DescribeImportSnapshotTasksCalls gets all the calls that were made to DescribeImportSnapshotTasks.
// Check the length with:
//     len(mockedec2Client.DescribeImportSnapshotTasksCalls())
func (mock *ec2ClientMock) DescribeImportSnapshotTasksCalls() []struct {
	In1 *ec2.DescribeImportSnapshotTasksInput
} {
	var calls []struct {
		In1 *ec2.DescribeImportSnapshotTasksInput
	}
	lockec2ClientMockDescribeImportSnapshotTasks.RLock()
	calls = mock.calls.DescribeImportSnapshotTasks
	lockec2ClientMockDescribeImportSnapshotTasks.RUnlock()
	return calls
}

// DescribeImportSnapshotTasksPages calls DescribeImportSnapshotTasksPagesFunc.
func (mock *ec2ClientMock) DescribeImportSnapshotTasksPages(in1 *ec2.DescribeImportSnapshotTasksInput, in2 func(*ec2.DescribeImportSnapshotTasksOutput, bool) bool) error {
	if mock.DescribeImportSnapshotTasksPagesFunc == nil {
		panic("ec2ClientMock.DescribeImportSnapshotTasksPagesFunc: method is nil but ec2Client.DescribeImportSnapshotTasksPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeImportSnapshotTasksInput
		In2 func(*ec2.DescribeImportSnapshotTasksOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeImportSnapshotTasksPages.Lock()
	mock.calls.DescribeImportSnapshotTasksPages = append(mock.calls.DescribeImportSnapshotTasksPages, callInfo)
	lockec2ClientMockDescribeImportSnapshotTasksPages.Unlock()
	return mock.DescribeImportSnapshotTasksPagesFunc(in1, in2)
}

// DescribeImportSnapshotTasksPagesCalls gets all the calls that were made to DescribeImportSnapshotTasksPages.
// Check the length with:
//     len(mockedec2Client.DescribeImportSnapshotTasksPagesCalls())
func (mock *ec2ClientMock) DescribeImportSnapshotTasksPagesCalls() []struct {
	In1 *ec2.DescribeImportSnapshotTasksInput
	In2 func(*ec2.DescribeImportSnapshotTasksOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeImportSnapshotTasksInput
		In2 func(*ec2.DescribeImportSnapshotTasksOutput, bool) bool
	}
	lockec2ClientMockDescribeImportSnapshotTasksPages.RLock()
	calls = mock.calls.DescribeImportSnapshotTasksPages
	lockec2ClientMockDescribeImportSnapshotTasksPages.RUnlock()
	return calls
}

// DescribeImportSnapshotTasksPagesWithContext calls DescribeImportSnapshotTasksPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeImportSnapshotTasksPagesWithContext(in1 context.Context, in2 *ec2.DescribeImportSnapshotTasksInput, in3 func(*ec2.DescribeImportSnapshotTasksOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeImportSnapshotTasksPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeImportSnapshotTasksPagesWithContextFunc: method is nil but ec2Client.DescribeImportSnapshotTasksPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeImportSnapshotTasksInput
		In3 func(*ec2.DescribeImportSnapshotTasksOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeImportSnapshotTasksPagesWithContext.Lock()
	mock.calls.DescribeImportSnapshotTasksPagesWithContext = append(mock.calls.DescribeImportSnapshotTasksPagesWithContext, callInfo)
	lockec2ClientMockDescribeImportSnapshotTasksPagesWithContext.Unlock()
	return mock.DescribeImportSnapshotTasksPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeImportSnapshotTasksPagesWithContextCalls gets all the calls that were made to DescribeImportSnapshotTasksPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeImportSnapshotTasksPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeImportSnapshotTasksPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeImportSnapshotTasksInput
	In3 func(*ec2.DescribeImportSnapshotTasksOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeImportSnapshotTasksInput
		In3 func(*ec2.DescribeImportSnapshotTasksOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeImportSnapshotTasksPagesWithContext.RLock()
	calls = mock.calls.DescribeImportSnapshotTasksPagesWithContext
	lockec2ClientMockDescribeImportSnapshotTasksPagesWithContext.RUnlock()
	return calls
}

// DescribeImportSnapshotTasksRequest calls DescribeImportSnapshotTasksRequestFunc.
func (mock *ec2ClientMock) DescribeImportSnapshotTasksRequest(in1 *ec2.DescribeImportSnapshotTasksInput) (*request.Request, *ec2.DescribeImportSnapshotTasksOutput) {
	if mock.DescribeImportSnapshotTasksRequestFunc == nil {
		panic("ec2ClientMock.DescribeImportSnapshotTasksRequestFunc: method is nil but ec2Client.DescribeImportSnapshotTasksRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeImportSnapshotTasksInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeImportSnapshotTasksRequest.Lock()
	mock.calls.DescribeImportSnapshotTasksRequest = append(mock.calls.DescribeImportSnapshotTasksRequest, callInfo)
	lockec2ClientMockDescribeImportSnapshotTasksRequest.Unlock()
	return mock.DescribeImportSnapshotTasksRequestFunc(in1)
}

// DescribeImportSnapshotTasksRequestCalls gets all the calls that were made to DescribeImportSnapshotTasksRequest.
// Check the length with:
//     len(mockedec2Client.DescribeImportSnapshotTasksRequestCalls())
func (mock *ec2ClientMock) DescribeImportSnapshotTasksRequestCalls() []struct {
	In1 *ec2.DescribeImportSnapshotTasksInput
} {
	var calls []struct {
		In1 *ec2.DescribeImportSnapshotTasksInput
	}
	lockec2ClientMockDescribeImportSnapshotTasksRequest.RLock()
	calls = mock.calls.DescribeImportSnapshotTasksRequest
	lockec2ClientMockDescribeImportSnapshotTasksRequest.RUnlock()
	return calls
}

// DescribeImportSnapshotTasksWithContext calls DescribeImportSnapshotTasksWithContextFunc.
func (mock *ec2ClientMock) DescribeImportSnapshotTasksWithContext(in1 context.Context, in2 *ec2.DescribeImportSnapshotTasksInput, in3 ...request.Option) (*ec2.DescribeImportSnapshotTasksOutput, error) {
	if mock.DescribeImportSnapshotTasksWithContextFunc == nil {
		panic("ec2ClientMock.DescribeImportSnapshotTasksWithContextFunc: method is nil but ec2Client.DescribeImportSnapshotTasksWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeImportSnapshotTasksInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeImportSnapshotTasksWithContext.Lock()
	mock.calls.DescribeImportSnapshotTasksWithContext = append(mock.calls.DescribeImportSnapshotTasksWithContext, callInfo)
	lockec2ClientMockDescribeImportSnapshotTasksWithContext.Unlock()
	return mock.DescribeImportSnapshotTasksWithContextFunc(in1, in2, in3...)
}

// DescribeImportSnapshotTasksWithContextCalls gets all the calls that were made to DescribeImportSnapshotTasksWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeImportSnapshotTasksWithContextCalls())
func (mock *ec2ClientMock) DescribeImportSnapshotTasksWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeImportSnapshotTasksInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeImportSnapshotTasksInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeImportSnapshotTasksWithContext.RLock()
	calls = mock.calls.DescribeImportSnapshotTasksWithContext
	lockec2ClientMockDescribeImportSnapshotTasksWithContext.RUnlock()
	return calls
}

// DescribeInstanceAttribute calls DescribeInstanceAttributeFunc.
func (mock *ec2ClientMock) DescribeInstanceAttribute(in1 *ec2.DescribeInstanceAttributeInput) (*ec2.DescribeInstanceAttributeOutput, error) {
	if mock.DescribeInstanceAttributeFunc == nil {
		panic("ec2ClientMock.DescribeInstanceAttributeFunc: method is nil but ec2Client.DescribeInstanceAttribute was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeInstanceAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeInstanceAttribute.Lock()
	mock.calls.DescribeInstanceAttribute = append(mock.calls.DescribeInstanceAttribute, callInfo)
	lockec2ClientMockDescribeInstanceAttribute.Unlock()
	return mock.DescribeInstanceAttributeFunc(in1)
}

// DescribeInstanceAttributeCalls gets all the calls that were made to DescribeInstanceAttribute.
// Check the length with:
//     len(mockedec2Client.DescribeInstanceAttributeCalls())
func (mock *ec2ClientMock) DescribeInstanceAttributeCalls() []struct {
	In1 *ec2.DescribeInstanceAttributeInput
} {
	var calls []struct {
		In1 *ec2.DescribeInstanceAttributeInput
	}
	lockec2ClientMockDescribeInstanceAttribute.RLock()
	calls = mock.calls.DescribeInstanceAttribute
	lockec2ClientMockDescribeInstanceAttribute.RUnlock()
	return calls
}

// DescribeInstanceAttributeRequest calls DescribeInstanceAttributeRequestFunc.
func (mock *ec2ClientMock) DescribeInstanceAttributeRequest(in1 *ec2.DescribeInstanceAttributeInput) (*request.Request, *ec2.DescribeInstanceAttributeOutput) {
	if mock.DescribeInstanceAttributeRequestFunc == nil {
		panic("ec2ClientMock.DescribeInstanceAttributeRequestFunc: method is nil but ec2Client.DescribeInstanceAttributeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeInstanceAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeInstanceAttributeRequest.Lock()
	mock.calls.DescribeInstanceAttributeRequest = append(mock.calls.DescribeInstanceAttributeRequest, callInfo)
	lockec2ClientMockDescribeInstanceAttributeRequest.Unlock()
	return mock.DescribeInstanceAttributeRequestFunc(in1)
}

// DescribeInstanceAttributeRequestCalls gets all the calls that were made to DescribeInstanceAttributeRequest.
// Check the length with:
//     len(mockedec2Client.DescribeInstanceAttributeRequestCalls())
func (mock *ec2ClientMock) DescribeInstanceAttributeRequestCalls() []struct {
	In1 *ec2.DescribeInstanceAttributeInput
} {
	var calls []struct {
		In1 *ec2.DescribeInstanceAttributeInput
	}
	lockec2ClientMockDescribeInstanceAttributeRequest.RLock()
	calls = mock.calls.DescribeInstanceAttributeRequest
	lockec2ClientMockDescribeInstanceAttributeRequest.RUnlock()
	return calls
}

// DescribeInstanceAttributeWithContext calls DescribeInstanceAttributeWithContextFunc.
func (mock *ec2ClientMock) DescribeInstanceAttributeWithContext(in1 context.Context, in2 *ec2.DescribeInstanceAttributeInput, in3 ...request.Option) (*ec2.DescribeInstanceAttributeOutput, error) {
	if mock.DescribeInstanceAttributeWithContextFunc == nil {
		panic("ec2ClientMock.DescribeInstanceAttributeWithContextFunc: method is nil but ec2Client.DescribeInstanceAttributeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeInstanceAttributeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeInstanceAttributeWithContext.Lock()
	mock.calls.DescribeInstanceAttributeWithContext = append(mock.calls.DescribeInstanceAttributeWithContext, callInfo)
	lockec2ClientMockDescribeInstanceAttributeWithContext.Unlock()
	return mock.DescribeInstanceAttributeWithContextFunc(in1, in2, in3...)
}

// DescribeInstanceAttributeWithContextCalls gets all the calls that were made to DescribeInstanceAttributeWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeInstanceAttributeWithContextCalls())
func (mock *ec2ClientMock) DescribeInstanceAttributeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeInstanceAttributeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeInstanceAttributeInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeInstanceAttributeWithContext.RLock()
	calls = mock.calls.DescribeInstanceAttributeWithContext
	lockec2ClientMockDescribeInstanceAttributeWithContext.RUnlock()
	return calls
}

// DescribeInstanceCreditSpecifications calls DescribeInstanceCreditSpecificationsFunc.
func (mock *ec2ClientMock) DescribeInstanceCreditSpecifications(in1 *ec2.DescribeInstanceCreditSpecificationsInput) (*ec2.DescribeInstanceCreditSpecificationsOutput, error) {
	if mock.DescribeInstanceCreditSpecificationsFunc == nil {
		panic("ec2ClientMock.DescribeInstanceCreditSpecificationsFunc: method is nil but ec2Client.DescribeInstanceCreditSpecifications was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeInstanceCreditSpecificationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeInstanceCreditSpecifications.Lock()
	mock.calls.DescribeInstanceCreditSpecifications = append(mock.calls.DescribeInstanceCreditSpecifications, callInfo)
	lockec2ClientMockDescribeInstanceCreditSpecifications.Unlock()
	return mock.DescribeInstanceCreditSpecificationsFunc(in1)
}

// DescribeInstanceCreditSpecificationsCalls gets all the calls that were made to DescribeInstanceCreditSpecifications.
// Check the length with:
//     len(mockedec2Client.DescribeInstanceCreditSpecificationsCalls())
func (mock *ec2ClientMock) DescribeInstanceCreditSpecificationsCalls() []struct {
	In1 *ec2.DescribeInstanceCreditSpecificationsInput
} {
	var calls []struct {
		In1 *ec2.DescribeInstanceCreditSpecificationsInput
	}
	lockec2ClientMockDescribeInstanceCreditSpecifications.RLock()
	calls = mock.calls.DescribeInstanceCreditSpecifications
	lockec2ClientMockDescribeInstanceCreditSpecifications.RUnlock()
	return calls
}

// DescribeInstanceCreditSpecificationsPages calls DescribeInstanceCreditSpecificationsPagesFunc.
func (mock *ec2ClientMock) DescribeInstanceCreditSpecificationsPages(in1 *ec2.DescribeInstanceCreditSpecificationsInput, in2 func(*ec2.DescribeInstanceCreditSpecificationsOutput, bool) bool) error {
	if mock.DescribeInstanceCreditSpecificationsPagesFunc == nil {
		panic("ec2ClientMock.DescribeInstanceCreditSpecificationsPagesFunc: method is nil but ec2Client.DescribeInstanceCreditSpecificationsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeInstanceCreditSpecificationsInput
		In2 func(*ec2.DescribeInstanceCreditSpecificationsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeInstanceCreditSpecificationsPages.Lock()
	mock.calls.DescribeInstanceCreditSpecificationsPages = append(mock.calls.DescribeInstanceCreditSpecificationsPages, callInfo)
	lockec2ClientMockDescribeInstanceCreditSpecificationsPages.Unlock()
	return mock.DescribeInstanceCreditSpecificationsPagesFunc(in1, in2)
}

// DescribeInstanceCreditSpecificationsPagesCalls gets all the calls that were made to DescribeInstanceCreditSpecificationsPages.
// Check the length with:
//     len(mockedec2Client.DescribeInstanceCreditSpecificationsPagesCalls())
func (mock *ec2ClientMock) DescribeInstanceCreditSpecificationsPagesCalls() []struct {
	In1 *ec2.DescribeInstanceCreditSpecificationsInput
	In2 func(*ec2.DescribeInstanceCreditSpecificationsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeInstanceCreditSpecificationsInput
		In2 func(*ec2.DescribeInstanceCreditSpecificationsOutput, bool) bool
	}
	lockec2ClientMockDescribeInstanceCreditSpecificationsPages.RLock()
	calls = mock.calls.DescribeInstanceCreditSpecificationsPages
	lockec2ClientMockDescribeInstanceCreditSpecificationsPages.RUnlock()
	return calls
}

// DescribeInstanceCreditSpecificationsPagesWithContext calls DescribeInstanceCreditSpecificationsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeInstanceCreditSpecificationsPagesWithContext(in1 context.Context, in2 *ec2.DescribeInstanceCreditSpecificationsInput, in3 func(*ec2.DescribeInstanceCreditSpecificationsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeInstanceCreditSpecificationsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeInstanceCreditSpecificationsPagesWithContextFunc: method is nil but ec2Client.DescribeInstanceCreditSpecificationsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeInstanceCreditSpecificationsInput
		In3 func(*ec2.DescribeInstanceCreditSpecificationsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeInstanceCreditSpecificationsPagesWithContext.Lock()
	mock.calls.DescribeInstanceCreditSpecificationsPagesWithContext = append(mock.calls.DescribeInstanceCreditSpecificationsPagesWithContext, callInfo)
	lockec2ClientMockDescribeInstanceCreditSpecificationsPagesWithContext.Unlock()
	return mock.DescribeInstanceCreditSpecificationsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeInstanceCreditSpecificationsPagesWithContextCalls gets all the calls that were made to DescribeInstanceCreditSpecificationsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeInstanceCreditSpecificationsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeInstanceCreditSpecificationsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeInstanceCreditSpecificationsInput
	In3 func(*ec2.DescribeInstanceCreditSpecificationsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeInstanceCreditSpecificationsInput
		In3 func(*ec2.DescribeInstanceCreditSpecificationsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeInstanceCreditSpecificationsPagesWithContext.RLock()
	calls = mock.calls.DescribeInstanceCreditSpecificationsPagesWithContext
	lockec2ClientMockDescribeInstanceCreditSpecificationsPagesWithContext.RUnlock()
	return calls
}

// DescribeInstanceCreditSpecificationsRequest calls DescribeInstanceCreditSpecificationsRequestFunc.
func (mock *ec2ClientMock) DescribeInstanceCreditSpecificationsRequest(in1 *ec2.DescribeInstanceCreditSpecificationsInput) (*request.Request, *ec2.DescribeInstanceCreditSpecificationsOutput) {
	if mock.DescribeInstanceCreditSpecificationsRequestFunc == nil {
		panic("ec2ClientMock.DescribeInstanceCreditSpecificationsRequestFunc: method is nil but ec2Client.DescribeInstanceCreditSpecificationsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeInstanceCreditSpecificationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeInstanceCreditSpecificationsRequest.Lock()
	mock.calls.DescribeInstanceCreditSpecificationsRequest = append(mock.calls.DescribeInstanceCreditSpecificationsRequest, callInfo)
	lockec2ClientMockDescribeInstanceCreditSpecificationsRequest.Unlock()
	return mock.DescribeInstanceCreditSpecificationsRequestFunc(in1)
}

// DescribeInstanceCreditSpecificationsRequestCalls gets all the calls that were made to DescribeInstanceCreditSpecificationsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeInstanceCreditSpecificationsRequestCalls())
func (mock *ec2ClientMock) DescribeInstanceCreditSpecificationsRequestCalls() []struct {
	In1 *ec2.DescribeInstanceCreditSpecificationsInput
} {
	var calls []struct {
		In1 *ec2.DescribeInstanceCreditSpecificationsInput
	}
	lockec2ClientMockDescribeInstanceCreditSpecificationsRequest.RLock()
	calls = mock.calls.DescribeInstanceCreditSpecificationsRequest
	lockec2ClientMockDescribeInstanceCreditSpecificationsRequest.RUnlock()
	return calls
}

// DescribeInstanceCreditSpecificationsWithContext calls DescribeInstanceCreditSpecificationsWithContextFunc.
func (mock *ec2ClientMock) DescribeInstanceCreditSpecificationsWithContext(in1 context.Context, in2 *ec2.DescribeInstanceCreditSpecificationsInput, in3 ...request.Option) (*ec2.DescribeInstanceCreditSpecificationsOutput, error) {
	if mock.DescribeInstanceCreditSpecificationsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeInstanceCreditSpecificationsWithContextFunc: method is nil but ec2Client.DescribeInstanceCreditSpecificationsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeInstanceCreditSpecificationsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeInstanceCreditSpecificationsWithContext.Lock()
	mock.calls.DescribeInstanceCreditSpecificationsWithContext = append(mock.calls.DescribeInstanceCreditSpecificationsWithContext, callInfo)
	lockec2ClientMockDescribeInstanceCreditSpecificationsWithContext.Unlock()
	return mock.DescribeInstanceCreditSpecificationsWithContextFunc(in1, in2, in3...)
}

// DescribeInstanceCreditSpecificationsWithContextCalls gets all the calls that were made to DescribeInstanceCreditSpecificationsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeInstanceCreditSpecificationsWithContextCalls())
func (mock *ec2ClientMock) DescribeInstanceCreditSpecificationsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeInstanceCreditSpecificationsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeInstanceCreditSpecificationsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeInstanceCreditSpecificationsWithContext.RLock()
	calls = mock.calls.DescribeInstanceCreditSpecificationsWithContext
	lockec2ClientMockDescribeInstanceCreditSpecificationsWithContext.RUnlock()
	return calls
}

// DescribeInstanceStatus calls DescribeInstanceStatusFunc.
func (mock *ec2ClientMock) DescribeInstanceStatus(in1 *ec2.DescribeInstanceStatusInput) (*ec2.DescribeInstanceStatusOutput, error) {
	if mock.DescribeInstanceStatusFunc == nil {
		panic("ec2ClientMock.DescribeInstanceStatusFunc: method is nil but ec2Client.DescribeInstanceStatus was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeInstanceStatusInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeInstanceStatus.Lock()
	mock.calls.DescribeInstanceStatus = append(mock.calls.DescribeInstanceStatus, callInfo)
	lockec2ClientMockDescribeInstanceStatus.Unlock()
	return mock.DescribeInstanceStatusFunc(in1)
}

// DescribeInstanceStatusCalls gets all the calls that were made to DescribeInstanceStatus.
// Check the length with:
//     len(mockedec2Client.DescribeInstanceStatusCalls())
func (mock *ec2ClientMock) DescribeInstanceStatusCalls() []struct {
	In1 *ec2.DescribeInstanceStatusInput
} {
	var calls []struct {
		In1 *ec2.DescribeInstanceStatusInput
	}
	lockec2ClientMockDescribeInstanceStatus.RLock()
	calls = mock.calls.DescribeInstanceStatus
	lockec2ClientMockDescribeInstanceStatus.RUnlock()
	return calls
}

// DescribeInstanceStatusPages calls DescribeInstanceStatusPagesFunc.
func (mock *ec2ClientMock) DescribeInstanceStatusPages(in1 *ec2.DescribeInstanceStatusInput, in2 func(*ec2.DescribeInstanceStatusOutput, bool) bool) error {
	if mock.DescribeInstanceStatusPagesFunc == nil {
		panic("ec2ClientMock.DescribeInstanceStatusPagesFunc: method is nil but ec2Client.DescribeInstanceStatusPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeInstanceStatusInput
		In2 func(*ec2.DescribeInstanceStatusOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeInstanceStatusPages.Lock()
	mock.calls.DescribeInstanceStatusPages = append(mock.calls.DescribeInstanceStatusPages, callInfo)
	lockec2ClientMockDescribeInstanceStatusPages.Unlock()
	return mock.DescribeInstanceStatusPagesFunc(in1, in2)
}

// DescribeInstanceStatusPagesCalls gets all the calls that were made to DescribeInstanceStatusPages.
// Check the length with:
//     len(mockedec2Client.DescribeInstanceStatusPagesCalls())
func (mock *ec2ClientMock) DescribeInstanceStatusPagesCalls() []struct {
	In1 *ec2.DescribeInstanceStatusInput
	In2 func(*ec2.DescribeInstanceStatusOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeInstanceStatusInput
		In2 func(*ec2.DescribeInstanceStatusOutput, bool) bool
	}
	lockec2ClientMockDescribeInstanceStatusPages.RLock()
	calls = mock.calls.DescribeInstanceStatusPages
	lockec2ClientMockDescribeInstanceStatusPages.RUnlock()
	return calls
}

// DescribeInstanceStatusPagesWithContext calls DescribeInstanceStatusPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeInstanceStatusPagesWithContext(in1 context.Context, in2 *ec2.DescribeInstanceStatusInput, in3 func(*ec2.DescribeInstanceStatusOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeInstanceStatusPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeInstanceStatusPagesWithContextFunc: method is nil but ec2Client.DescribeInstanceStatusPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeInstanceStatusInput
		In3 func(*ec2.DescribeInstanceStatusOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeInstanceStatusPagesWithContext.Lock()
	mock.calls.DescribeInstanceStatusPagesWithContext = append(mock.calls.DescribeInstanceStatusPagesWithContext, callInfo)
	lockec2ClientMockDescribeInstanceStatusPagesWithContext.Unlock()
	return mock.DescribeInstanceStatusPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeInstanceStatusPagesWithContextCalls gets all the calls that were made to DescribeInstanceStatusPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeInstanceStatusPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeInstanceStatusPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeInstanceStatusInput
	In3 func(*ec2.DescribeInstanceStatusOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeInstanceStatusInput
		In3 func(*ec2.DescribeInstanceStatusOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeInstanceStatusPagesWithContext.RLock()
	calls = mock.calls.DescribeInstanceStatusPagesWithContext
	lockec2ClientMockDescribeInstanceStatusPagesWithContext.RUnlock()
	return calls
}

// DescribeInstanceStatusRequest calls DescribeInstanceStatusRequestFunc.
func (mock *ec2ClientMock) DescribeInstanceStatusRequest(in1 *ec2.DescribeInstanceStatusInput) (*request.Request, *ec2.DescribeInstanceStatusOutput) {
	if mock.DescribeInstanceStatusRequestFunc == nil {
		panic("ec2ClientMock.DescribeInstanceStatusRequestFunc: method is nil but ec2Client.DescribeInstanceStatusRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeInstanceStatusInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeInstanceStatusRequest.Lock()
	mock.calls.DescribeInstanceStatusRequest = append(mock.calls.DescribeInstanceStatusRequest, callInfo)
	lockec2ClientMockDescribeInstanceStatusRequest.Unlock()
	return mock.DescribeInstanceStatusRequestFunc(in1)
}

// DescribeInstanceStatusRequestCalls gets all the calls that were made to DescribeInstanceStatusRequest.
// Check the length with:
//     len(mockedec2Client.DescribeInstanceStatusRequestCalls())
func (mock *ec2ClientMock) DescribeInstanceStatusRequestCalls() []struct {
	In1 *ec2.DescribeInstanceStatusInput
} {
	var calls []struct {
		In1 *ec2.DescribeInstanceStatusInput
	}
	lockec2ClientMockDescribeInstanceStatusRequest.RLock()
	calls = mock.calls.DescribeInstanceStatusRequest
	lockec2ClientMockDescribeInstanceStatusRequest.RUnlock()
	return calls
}

// DescribeInstanceStatusWithContext calls DescribeInstanceStatusWithContextFunc.
func (mock *ec2ClientMock) DescribeInstanceStatusWithContext(in1 context.Context, in2 *ec2.DescribeInstanceStatusInput, in3 ...request.Option) (*ec2.DescribeInstanceStatusOutput, error) {
	if mock.DescribeInstanceStatusWithContextFunc == nil {
		panic("ec2ClientMock.DescribeInstanceStatusWithContextFunc: method is nil but ec2Client.DescribeInstanceStatusWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeInstanceStatusInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeInstanceStatusWithContext.Lock()
	mock.calls.DescribeInstanceStatusWithContext = append(mock.calls.DescribeInstanceStatusWithContext, callInfo)
	lockec2ClientMockDescribeInstanceStatusWithContext.Unlock()
	return mock.DescribeInstanceStatusWithContextFunc(in1, in2, in3...)
}

// DescribeInstanceStatusWithContextCalls gets all the calls that were made to DescribeInstanceStatusWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeInstanceStatusWithContextCalls())
func (mock *ec2ClientMock) DescribeInstanceStatusWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeInstanceStatusInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeInstanceStatusInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeInstanceStatusWithContext.RLock()
	calls = mock.calls.DescribeInstanceStatusWithContext
	lockec2ClientMockDescribeInstanceStatusWithContext.RUnlock()
	return calls
}

// DescribeInstanceTypeOfferings calls DescribeInstanceTypeOfferingsFunc.
func (mock *ec2ClientMock) DescribeInstanceTypeOfferings(in1 *ec2.DescribeInstanceTypeOfferingsInput) (*ec2.DescribeInstanceTypeOfferingsOutput, error) {
	if mock.DescribeInstanceTypeOfferingsFunc == nil {
		panic("ec2ClientMock.DescribeInstanceTypeOfferingsFunc: method is nil but ec2Client.DescribeInstanceTypeOfferings was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeInstanceTypeOfferingsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeInstanceTypeOfferings.Lock()
	mock.calls.DescribeInstanceTypeOfferings = append(mock.calls.DescribeInstanceTypeOfferings, callInfo)
	lockec2ClientMockDescribeInstanceTypeOfferings.Unlock()
	return mock.DescribeInstanceTypeOfferingsFunc(in1)
}

// DescribeInstanceTypeOfferingsCalls gets all the calls that were made to DescribeInstanceTypeOfferings.
// Check the length with:
//     len(mockedec2Client.DescribeInstanceTypeOfferingsCalls())
func (mock *ec2ClientMock) DescribeInstanceTypeOfferingsCalls() []struct {
	In1 *ec2.DescribeInstanceTypeOfferingsInput
} {
	var calls []struct {
		In1 *ec2.DescribeInstanceTypeOfferingsInput
	}
	lockec2ClientMockDescribeInstanceTypeOfferings.RLock()
	calls = mock.calls.DescribeInstanceTypeOfferings
	lockec2ClientMockDescribeInstanceTypeOfferings.RUnlock()
	return calls
}

// DescribeInstanceTypeOfferingsRequest calls DescribeInstanceTypeOfferingsRequestFunc.
func (mock *ec2ClientMock) DescribeInstanceTypeOfferingsRequest(in1 *ec2.DescribeInstanceTypeOfferingsInput) (*request.Request, *ec2.DescribeInstanceTypeOfferingsOutput) {
	if mock.DescribeInstanceTypeOfferingsRequestFunc == nil {
		panic("ec2ClientMock.DescribeInstanceTypeOfferingsRequestFunc: method is nil but ec2Client.DescribeInstanceTypeOfferingsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeInstanceTypeOfferingsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeInstanceTypeOfferingsRequest.Lock()
	mock.calls.DescribeInstanceTypeOfferingsRequest = append(mock.calls.DescribeInstanceTypeOfferingsRequest, callInfo)
	lockec2ClientMockDescribeInstanceTypeOfferingsRequest.Unlock()
	return mock.DescribeInstanceTypeOfferingsRequestFunc(in1)
}

// DescribeInstanceTypeOfferingsRequestCalls gets all the calls that were made to DescribeInstanceTypeOfferingsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeInstanceTypeOfferingsRequestCalls())
func (mock *ec2ClientMock) DescribeInstanceTypeOfferingsRequestCalls() []struct {
	In1 *ec2.DescribeInstanceTypeOfferingsInput
} {
	var calls []struct {
		In1 *ec2.DescribeInstanceTypeOfferingsInput
	}
	lockec2ClientMockDescribeInstanceTypeOfferingsRequest.RLock()
	calls = mock.calls.DescribeInstanceTypeOfferingsRequest
	lockec2ClientMockDescribeInstanceTypeOfferingsRequest.RUnlock()
	return calls
}

// DescribeInstanceTypeOfferingsWithContext calls DescribeInstanceTypeOfferingsWithContextFunc.
func (mock *ec2ClientMock) DescribeInstanceTypeOfferingsWithContext(in1 context.Context, in2 *ec2.DescribeInstanceTypeOfferingsInput, in3 ...request.Option) (*ec2.DescribeInstanceTypeOfferingsOutput, error) {
	if mock.DescribeInstanceTypeOfferingsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeInstanceTypeOfferingsWithContextFunc: method is nil but ec2Client.DescribeInstanceTypeOfferingsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeInstanceTypeOfferingsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeInstanceTypeOfferingsWithContext.Lock()
	mock.calls.DescribeInstanceTypeOfferingsWithContext = append(mock.calls.DescribeInstanceTypeOfferingsWithContext, callInfo)
	lockec2ClientMockDescribeInstanceTypeOfferingsWithContext.Unlock()
	return mock.DescribeInstanceTypeOfferingsWithContextFunc(in1, in2, in3...)
}

// DescribeInstanceTypeOfferingsWithContextCalls gets all the calls that were made to DescribeInstanceTypeOfferingsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeInstanceTypeOfferingsWithContextCalls())
func (mock *ec2ClientMock) DescribeInstanceTypeOfferingsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeInstanceTypeOfferingsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeInstanceTypeOfferingsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeInstanceTypeOfferingsWithContext.RLock()
	calls = mock.calls.DescribeInstanceTypeOfferingsWithContext
	lockec2ClientMockDescribeInstanceTypeOfferingsWithContext.RUnlock()
	return calls
}

// DescribeInstanceTypes calls DescribeInstanceTypesFunc.
func (mock *ec2ClientMock) DescribeInstanceTypes(in1 *ec2.DescribeInstanceTypesInput) (*ec2.DescribeInstanceTypesOutput, error) {
	if mock.DescribeInstanceTypesFunc == nil {
		panic("ec2ClientMock.DescribeInstanceTypesFunc: method is nil but ec2Client.DescribeInstanceTypes was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeInstanceTypesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeInstanceTypes.Lock()
	mock.calls.DescribeInstanceTypes = append(mock.calls.DescribeInstanceTypes, callInfo)
	lockec2ClientMockDescribeInstanceTypes.Unlock()
	return mock.DescribeInstanceTypesFunc(in1)
}

// DescribeInstanceTypesCalls gets all the calls that were made to DescribeInstanceTypes.
// Check the length with:
//     len(mockedec2Client.DescribeInstanceTypesCalls())
func (mock *ec2ClientMock) DescribeInstanceTypesCalls() []struct {
	In1 *ec2.DescribeInstanceTypesInput
} {
	var calls []struct {
		In1 *ec2.DescribeInstanceTypesInput
	}
	lockec2ClientMockDescribeInstanceTypes.RLock()
	calls = mock.calls.DescribeInstanceTypes
	lockec2ClientMockDescribeInstanceTypes.RUnlock()
	return calls
}

// DescribeInstanceTypesRequest calls DescribeInstanceTypesRequestFunc.
func (mock *ec2ClientMock) DescribeInstanceTypesRequest(in1 *ec2.DescribeInstanceTypesInput) (*request.Request, *ec2.DescribeInstanceTypesOutput) {
	if mock.DescribeInstanceTypesRequestFunc == nil {
		panic("ec2ClientMock.DescribeInstanceTypesRequestFunc: method is nil but ec2Client.DescribeInstanceTypesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeInstanceTypesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeInstanceTypesRequest.Lock()
	mock.calls.DescribeInstanceTypesRequest = append(mock.calls.DescribeInstanceTypesRequest, callInfo)
	lockec2ClientMockDescribeInstanceTypesRequest.Unlock()
	return mock.DescribeInstanceTypesRequestFunc(in1)
}

// DescribeInstanceTypesRequestCalls gets all the calls that were made to DescribeInstanceTypesRequest.
// Check the length with:
//     len(mockedec2Client.DescribeInstanceTypesRequestCalls())
func (mock *ec2ClientMock) DescribeInstanceTypesRequestCalls() []struct {
	In1 *ec2.DescribeInstanceTypesInput
} {
	var calls []struct {
		In1 *ec2.DescribeInstanceTypesInput
	}
	lockec2ClientMockDescribeInstanceTypesRequest.RLock()
	calls = mock.calls.DescribeInstanceTypesRequest
	lockec2ClientMockDescribeInstanceTypesRequest.RUnlock()
	return calls
}

// DescribeInstanceTypesWithContext calls DescribeInstanceTypesWithContextFunc.
func (mock *ec2ClientMock) DescribeInstanceTypesWithContext(in1 context.Context, in2 *ec2.DescribeInstanceTypesInput, in3 ...request.Option) (*ec2.DescribeInstanceTypesOutput, error) {
	if mock.DescribeInstanceTypesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeInstanceTypesWithContextFunc: method is nil but ec2Client.DescribeInstanceTypesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeInstanceTypesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeInstanceTypesWithContext.Lock()
	mock.calls.DescribeInstanceTypesWithContext = append(mock.calls.DescribeInstanceTypesWithContext, callInfo)
	lockec2ClientMockDescribeInstanceTypesWithContext.Unlock()
	return mock.DescribeInstanceTypesWithContextFunc(in1, in2, in3...)
}

// DescribeInstanceTypesWithContextCalls gets all the calls that were made to DescribeInstanceTypesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeInstanceTypesWithContextCalls())
func (mock *ec2ClientMock) DescribeInstanceTypesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeInstanceTypesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeInstanceTypesInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeInstanceTypesWithContext.RLock()
	calls = mock.calls.DescribeInstanceTypesWithContext
	lockec2ClientMockDescribeInstanceTypesWithContext.RUnlock()
	return calls
}

// DescribeInstances calls DescribeInstancesFunc.
func (mock *ec2ClientMock) DescribeInstances(in1 *ec2.DescribeInstancesInput) (*ec2.DescribeInstancesOutput, error) {
	if mock.DescribeInstancesFunc == nil {
		panic("ec2ClientMock.DescribeInstancesFunc: method is nil but ec2Client.DescribeInstances was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeInstances.Lock()
	mock.calls.DescribeInstances = append(mock.calls.DescribeInstances, callInfo)
	lockec2ClientMockDescribeInstances.Unlock()
	return mock.DescribeInstancesFunc(in1)
}

// DescribeInstancesCalls gets all the calls that were made to DescribeInstances.
// Check the length with:
//     len(mockedec2Client.DescribeInstancesCalls())
func (mock *ec2ClientMock) DescribeInstancesCalls() []struct {
	In1 *ec2.DescribeInstancesInput
} {
	var calls []struct {
		In1 *ec2.DescribeInstancesInput
	}
	lockec2ClientMockDescribeInstances.RLock()
	calls = mock.calls.DescribeInstances
	lockec2ClientMockDescribeInstances.RUnlock()
	return calls
}

// DescribeInstancesPages calls DescribeInstancesPagesFunc.
func (mock *ec2ClientMock) DescribeInstancesPages(in1 *ec2.DescribeInstancesInput, in2 func(*ec2.DescribeInstancesOutput, bool) bool) error {
	if mock.DescribeInstancesPagesFunc == nil {
		panic("ec2ClientMock.DescribeInstancesPagesFunc: method is nil but ec2Client.DescribeInstancesPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeInstancesInput
		In2 func(*ec2.DescribeInstancesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeInstancesPages.Lock()
	mock.calls.DescribeInstancesPages = append(mock.calls.DescribeInstancesPages, callInfo)
	lockec2ClientMockDescribeInstancesPages.Unlock()
	return mock.DescribeInstancesPagesFunc(in1, in2)
}

// DescribeInstancesPagesCalls gets all the calls that were made to DescribeInstancesPages.
// Check the length with:
//     len(mockedec2Client.DescribeInstancesPagesCalls())
func (mock *ec2ClientMock) DescribeInstancesPagesCalls() []struct {
	In1 *ec2.DescribeInstancesInput
	In2 func(*ec2.DescribeInstancesOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeInstancesInput
		In2 func(*ec2.DescribeInstancesOutput, bool) bool
	}
	lockec2ClientMockDescribeInstancesPages.RLock()
	calls = mock.calls.DescribeInstancesPages
	lockec2ClientMockDescribeInstancesPages.RUnlock()
	return calls
}

// DescribeInstancesPagesWithContext calls DescribeInstancesPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeInstancesPagesWithContext(in1 context.Context, in2 *ec2.DescribeInstancesInput, in3 func(*ec2.DescribeInstancesOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeInstancesPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeInstancesPagesWithContextFunc: method is nil but ec2Client.DescribeInstancesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeInstancesInput
		In3 func(*ec2.DescribeInstancesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeInstancesPagesWithContext.Lock()
	mock.calls.DescribeInstancesPagesWithContext = append(mock.calls.DescribeInstancesPagesWithContext, callInfo)
	lockec2ClientMockDescribeInstancesPagesWithContext.Unlock()
	return mock.DescribeInstancesPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeInstancesPagesWithContextCalls gets all the calls that were made to DescribeInstancesPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeInstancesPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeInstancesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeInstancesInput
	In3 func(*ec2.DescribeInstancesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeInstancesInput
		In3 func(*ec2.DescribeInstancesOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeInstancesPagesWithContext.RLock()
	calls = mock.calls.DescribeInstancesPagesWithContext
	lockec2ClientMockDescribeInstancesPagesWithContext.RUnlock()
	return calls
}

// DescribeInstancesRequest calls DescribeInstancesRequestFunc.
func (mock *ec2ClientMock) DescribeInstancesRequest(in1 *ec2.DescribeInstancesInput) (*request.Request, *ec2.DescribeInstancesOutput) {
	if mock.DescribeInstancesRequestFunc == nil {
		panic("ec2ClientMock.DescribeInstancesRequestFunc: method is nil but ec2Client.DescribeInstancesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeInstancesRequest.Lock()
	mock.calls.DescribeInstancesRequest = append(mock.calls.DescribeInstancesRequest, callInfo)
	lockec2ClientMockDescribeInstancesRequest.Unlock()
	return mock.DescribeInstancesRequestFunc(in1)
}

// DescribeInstancesRequestCalls gets all the calls that were made to DescribeInstancesRequest.
// Check the length with:
//     len(mockedec2Client.DescribeInstancesRequestCalls())
func (mock *ec2ClientMock) DescribeInstancesRequestCalls() []struct {
	In1 *ec2.DescribeInstancesInput
} {
	var calls []struct {
		In1 *ec2.DescribeInstancesInput
	}
	lockec2ClientMockDescribeInstancesRequest.RLock()
	calls = mock.calls.DescribeInstancesRequest
	lockec2ClientMockDescribeInstancesRequest.RUnlock()
	return calls
}

// DescribeInstancesWithContext calls DescribeInstancesWithContextFunc.
func (mock *ec2ClientMock) DescribeInstancesWithContext(in1 context.Context, in2 *ec2.DescribeInstancesInput, in3 ...request.Option) (*ec2.DescribeInstancesOutput, error) {
	if mock.DescribeInstancesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeInstancesWithContextFunc: method is nil but ec2Client.DescribeInstancesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeInstancesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeInstancesWithContext.Lock()
	mock.calls.DescribeInstancesWithContext = append(mock.calls.DescribeInstancesWithContext, callInfo)
	lockec2ClientMockDescribeInstancesWithContext.Unlock()
	return mock.DescribeInstancesWithContextFunc(in1, in2, in3...)
}

// DescribeInstancesWithContextCalls gets all the calls that were made to DescribeInstancesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeInstancesWithContextCalls())
func (mock *ec2ClientMock) DescribeInstancesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeInstancesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeInstancesInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeInstancesWithContext.RLock()
	calls = mock.calls.DescribeInstancesWithContext
	lockec2ClientMockDescribeInstancesWithContext.RUnlock()
	return calls
}

// DescribeInternetGateways calls DescribeInternetGatewaysFunc.
func (mock *ec2ClientMock) DescribeInternetGateways(in1 *ec2.DescribeInternetGatewaysInput) (*ec2.DescribeInternetGatewaysOutput, error) {
	if mock.DescribeInternetGatewaysFunc == nil {
		panic("ec2ClientMock.DescribeInternetGatewaysFunc: method is nil but ec2Client.DescribeInternetGateways was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeInternetGatewaysInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeInternetGateways.Lock()
	mock.calls.DescribeInternetGateways = append(mock.calls.DescribeInternetGateways, callInfo)
	lockec2ClientMockDescribeInternetGateways.Unlock()
	return mock.DescribeInternetGatewaysFunc(in1)
}

// DescribeInternetGatewaysCalls gets all the calls that were made to DescribeInternetGateways.
// Check the length with:
//     len(mockedec2Client.DescribeInternetGatewaysCalls())
func (mock *ec2ClientMock) DescribeInternetGatewaysCalls() []struct {
	In1 *ec2.DescribeInternetGatewaysInput
} {
	var calls []struct {
		In1 *ec2.DescribeInternetGatewaysInput
	}
	lockec2ClientMockDescribeInternetGateways.RLock()
	calls = mock.calls.DescribeInternetGateways
	lockec2ClientMockDescribeInternetGateways.RUnlock()
	return calls
}

// DescribeInternetGatewaysPages calls DescribeInternetGatewaysPagesFunc.
func (mock *ec2ClientMock) DescribeInternetGatewaysPages(in1 *ec2.DescribeInternetGatewaysInput, in2 func(*ec2.DescribeInternetGatewaysOutput, bool) bool) error {
	if mock.DescribeInternetGatewaysPagesFunc == nil {
		panic("ec2ClientMock.DescribeInternetGatewaysPagesFunc: method is nil but ec2Client.DescribeInternetGatewaysPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeInternetGatewaysInput
		In2 func(*ec2.DescribeInternetGatewaysOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeInternetGatewaysPages.Lock()
	mock.calls.DescribeInternetGatewaysPages = append(mock.calls.DescribeInternetGatewaysPages, callInfo)
	lockec2ClientMockDescribeInternetGatewaysPages.Unlock()
	return mock.DescribeInternetGatewaysPagesFunc(in1, in2)
}

// DescribeInternetGatewaysPagesCalls gets all the calls that were made to DescribeInternetGatewaysPages.
// Check the length with:
//     len(mockedec2Client.DescribeInternetGatewaysPagesCalls())
func (mock *ec2ClientMock) DescribeInternetGatewaysPagesCalls() []struct {
	In1 *ec2.DescribeInternetGatewaysInput
	In2 func(*ec2.DescribeInternetGatewaysOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeInternetGatewaysInput
		In2 func(*ec2.DescribeInternetGatewaysOutput, bool) bool
	}
	lockec2ClientMockDescribeInternetGatewaysPages.RLock()
	calls = mock.calls.DescribeInternetGatewaysPages
	lockec2ClientMockDescribeInternetGatewaysPages.RUnlock()
	return calls
}

// DescribeInternetGatewaysPagesWithContext calls DescribeInternetGatewaysPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeInternetGatewaysPagesWithContext(in1 context.Context, in2 *ec2.DescribeInternetGatewaysInput, in3 func(*ec2.DescribeInternetGatewaysOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeInternetGatewaysPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeInternetGatewaysPagesWithContextFunc: method is nil but ec2Client.DescribeInternetGatewaysPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeInternetGatewaysInput
		In3 func(*ec2.DescribeInternetGatewaysOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeInternetGatewaysPagesWithContext.Lock()
	mock.calls.DescribeInternetGatewaysPagesWithContext = append(mock.calls.DescribeInternetGatewaysPagesWithContext, callInfo)
	lockec2ClientMockDescribeInternetGatewaysPagesWithContext.Unlock()
	return mock.DescribeInternetGatewaysPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeInternetGatewaysPagesWithContextCalls gets all the calls that were made to DescribeInternetGatewaysPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeInternetGatewaysPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeInternetGatewaysPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeInternetGatewaysInput
	In3 func(*ec2.DescribeInternetGatewaysOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeInternetGatewaysInput
		In3 func(*ec2.DescribeInternetGatewaysOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeInternetGatewaysPagesWithContext.RLock()
	calls = mock.calls.DescribeInternetGatewaysPagesWithContext
	lockec2ClientMockDescribeInternetGatewaysPagesWithContext.RUnlock()
	return calls
}

// DescribeInternetGatewaysRequest calls DescribeInternetGatewaysRequestFunc.
func (mock *ec2ClientMock) DescribeInternetGatewaysRequest(in1 *ec2.DescribeInternetGatewaysInput) (*request.Request, *ec2.DescribeInternetGatewaysOutput) {
	if mock.DescribeInternetGatewaysRequestFunc == nil {
		panic("ec2ClientMock.DescribeInternetGatewaysRequestFunc: method is nil but ec2Client.DescribeInternetGatewaysRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeInternetGatewaysInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeInternetGatewaysRequest.Lock()
	mock.calls.DescribeInternetGatewaysRequest = append(mock.calls.DescribeInternetGatewaysRequest, callInfo)
	lockec2ClientMockDescribeInternetGatewaysRequest.Unlock()
	return mock.DescribeInternetGatewaysRequestFunc(in1)
}

// DescribeInternetGatewaysRequestCalls gets all the calls that were made to DescribeInternetGatewaysRequest.
// Check the length with:
//     len(mockedec2Client.DescribeInternetGatewaysRequestCalls())
func (mock *ec2ClientMock) DescribeInternetGatewaysRequestCalls() []struct {
	In1 *ec2.DescribeInternetGatewaysInput
} {
	var calls []struct {
		In1 *ec2.DescribeInternetGatewaysInput
	}
	lockec2ClientMockDescribeInternetGatewaysRequest.RLock()
	calls = mock.calls.DescribeInternetGatewaysRequest
	lockec2ClientMockDescribeInternetGatewaysRequest.RUnlock()
	return calls
}

// DescribeInternetGatewaysWithContext calls DescribeInternetGatewaysWithContextFunc.
func (mock *ec2ClientMock) DescribeInternetGatewaysWithContext(in1 context.Context, in2 *ec2.DescribeInternetGatewaysInput, in3 ...request.Option) (*ec2.DescribeInternetGatewaysOutput, error) {
	if mock.DescribeInternetGatewaysWithContextFunc == nil {
		panic("ec2ClientMock.DescribeInternetGatewaysWithContextFunc: method is nil but ec2Client.DescribeInternetGatewaysWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeInternetGatewaysInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeInternetGatewaysWithContext.Lock()
	mock.calls.DescribeInternetGatewaysWithContext = append(mock.calls.DescribeInternetGatewaysWithContext, callInfo)
	lockec2ClientMockDescribeInternetGatewaysWithContext.Unlock()
	return mock.DescribeInternetGatewaysWithContextFunc(in1, in2, in3...)
}

// DescribeInternetGatewaysWithContextCalls gets all the calls that were made to DescribeInternetGatewaysWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeInternetGatewaysWithContextCalls())
func (mock *ec2ClientMock) DescribeInternetGatewaysWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeInternetGatewaysInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeInternetGatewaysInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeInternetGatewaysWithContext.RLock()
	calls = mock.calls.DescribeInternetGatewaysWithContext
	lockec2ClientMockDescribeInternetGatewaysWithContext.RUnlock()
	return calls
}

// DescribeIpv6Pools calls DescribeIpv6PoolsFunc.
func (mock *ec2ClientMock) DescribeIpv6Pools(in1 *ec2.DescribeIpv6PoolsInput) (*ec2.DescribeIpv6PoolsOutput, error) {
	if mock.DescribeIpv6PoolsFunc == nil {
		panic("ec2ClientMock.DescribeIpv6PoolsFunc: method is nil but ec2Client.DescribeIpv6Pools was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeIpv6PoolsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeIpv6Pools.Lock()
	mock.calls.DescribeIpv6Pools = append(mock.calls.DescribeIpv6Pools, callInfo)
	lockec2ClientMockDescribeIpv6Pools.Unlock()
	return mock.DescribeIpv6PoolsFunc(in1)
}

// DescribeIpv6PoolsCalls gets all the calls that were made to DescribeIpv6Pools.
// Check the length with:
//     len(mockedec2Client.DescribeIpv6PoolsCalls())
func (mock *ec2ClientMock) DescribeIpv6PoolsCalls() []struct {
	In1 *ec2.DescribeIpv6PoolsInput
} {
	var calls []struct {
		In1 *ec2.DescribeIpv6PoolsInput
	}
	lockec2ClientMockDescribeIpv6Pools.RLock()
	calls = mock.calls.DescribeIpv6Pools
	lockec2ClientMockDescribeIpv6Pools.RUnlock()
	return calls
}

// DescribeIpv6PoolsPages calls DescribeIpv6PoolsPagesFunc.
func (mock *ec2ClientMock) DescribeIpv6PoolsPages(in1 *ec2.DescribeIpv6PoolsInput, in2 func(*ec2.DescribeIpv6PoolsOutput, bool) bool) error {
	if mock.DescribeIpv6PoolsPagesFunc == nil {
		panic("ec2ClientMock.DescribeIpv6PoolsPagesFunc: method is nil but ec2Client.DescribeIpv6PoolsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeIpv6PoolsInput
		In2 func(*ec2.DescribeIpv6PoolsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeIpv6PoolsPages.Lock()
	mock.calls.DescribeIpv6PoolsPages = append(mock.calls.DescribeIpv6PoolsPages, callInfo)
	lockec2ClientMockDescribeIpv6PoolsPages.Unlock()
	return mock.DescribeIpv6PoolsPagesFunc(in1, in2)
}

// DescribeIpv6PoolsPagesCalls gets all the calls that were made to DescribeIpv6PoolsPages.
// Check the length with:
//     len(mockedec2Client.DescribeIpv6PoolsPagesCalls())
func (mock *ec2ClientMock) DescribeIpv6PoolsPagesCalls() []struct {
	In1 *ec2.DescribeIpv6PoolsInput
	In2 func(*ec2.DescribeIpv6PoolsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeIpv6PoolsInput
		In2 func(*ec2.DescribeIpv6PoolsOutput, bool) bool
	}
	lockec2ClientMockDescribeIpv6PoolsPages.RLock()
	calls = mock.calls.DescribeIpv6PoolsPages
	lockec2ClientMockDescribeIpv6PoolsPages.RUnlock()
	return calls
}

// DescribeIpv6PoolsPagesWithContext calls DescribeIpv6PoolsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeIpv6PoolsPagesWithContext(in1 context.Context, in2 *ec2.DescribeIpv6PoolsInput, in3 func(*ec2.DescribeIpv6PoolsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeIpv6PoolsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeIpv6PoolsPagesWithContextFunc: method is nil but ec2Client.DescribeIpv6PoolsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeIpv6PoolsInput
		In3 func(*ec2.DescribeIpv6PoolsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeIpv6PoolsPagesWithContext.Lock()
	mock.calls.DescribeIpv6PoolsPagesWithContext = append(mock.calls.DescribeIpv6PoolsPagesWithContext, callInfo)
	lockec2ClientMockDescribeIpv6PoolsPagesWithContext.Unlock()
	return mock.DescribeIpv6PoolsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeIpv6PoolsPagesWithContextCalls gets all the calls that were made to DescribeIpv6PoolsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeIpv6PoolsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeIpv6PoolsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeIpv6PoolsInput
	In3 func(*ec2.DescribeIpv6PoolsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeIpv6PoolsInput
		In3 func(*ec2.DescribeIpv6PoolsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeIpv6PoolsPagesWithContext.RLock()
	calls = mock.calls.DescribeIpv6PoolsPagesWithContext
	lockec2ClientMockDescribeIpv6PoolsPagesWithContext.RUnlock()
	return calls
}

// DescribeIpv6PoolsRequest calls DescribeIpv6PoolsRequestFunc.
func (mock *ec2ClientMock) DescribeIpv6PoolsRequest(in1 *ec2.DescribeIpv6PoolsInput) (*request.Request, *ec2.DescribeIpv6PoolsOutput) {
	if mock.DescribeIpv6PoolsRequestFunc == nil {
		panic("ec2ClientMock.DescribeIpv6PoolsRequestFunc: method is nil but ec2Client.DescribeIpv6PoolsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeIpv6PoolsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeIpv6PoolsRequest.Lock()
	mock.calls.DescribeIpv6PoolsRequest = append(mock.calls.DescribeIpv6PoolsRequest, callInfo)
	lockec2ClientMockDescribeIpv6PoolsRequest.Unlock()
	return mock.DescribeIpv6PoolsRequestFunc(in1)
}

// DescribeIpv6PoolsRequestCalls gets all the calls that were made to DescribeIpv6PoolsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeIpv6PoolsRequestCalls())
func (mock *ec2ClientMock) DescribeIpv6PoolsRequestCalls() []struct {
	In1 *ec2.DescribeIpv6PoolsInput
} {
	var calls []struct {
		In1 *ec2.DescribeIpv6PoolsInput
	}
	lockec2ClientMockDescribeIpv6PoolsRequest.RLock()
	calls = mock.calls.DescribeIpv6PoolsRequest
	lockec2ClientMockDescribeIpv6PoolsRequest.RUnlock()
	return calls
}

// DescribeIpv6PoolsWithContext calls DescribeIpv6PoolsWithContextFunc.
func (mock *ec2ClientMock) DescribeIpv6PoolsWithContext(in1 context.Context, in2 *ec2.DescribeIpv6PoolsInput, in3 ...request.Option) (*ec2.DescribeIpv6PoolsOutput, error) {
	if mock.DescribeIpv6PoolsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeIpv6PoolsWithContextFunc: method is nil but ec2Client.DescribeIpv6PoolsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeIpv6PoolsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeIpv6PoolsWithContext.Lock()
	mock.calls.DescribeIpv6PoolsWithContext = append(mock.calls.DescribeIpv6PoolsWithContext, callInfo)
	lockec2ClientMockDescribeIpv6PoolsWithContext.Unlock()
	return mock.DescribeIpv6PoolsWithContextFunc(in1, in2, in3...)
}

// DescribeIpv6PoolsWithContextCalls gets all the calls that were made to DescribeIpv6PoolsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeIpv6PoolsWithContextCalls())
func (mock *ec2ClientMock) DescribeIpv6PoolsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeIpv6PoolsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeIpv6PoolsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeIpv6PoolsWithContext.RLock()
	calls = mock.calls.DescribeIpv6PoolsWithContext
	lockec2ClientMockDescribeIpv6PoolsWithContext.RUnlock()
	return calls
}

// DescribeKeyPairs calls DescribeKeyPairsFunc.
func (mock *ec2ClientMock) DescribeKeyPairs(in1 *ec2.DescribeKeyPairsInput) (*ec2.DescribeKeyPairsOutput, error) {
	if mock.DescribeKeyPairsFunc == nil {
		panic("ec2ClientMock.DescribeKeyPairsFunc: method is nil but ec2Client.DescribeKeyPairs was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeKeyPairsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeKeyPairs.Lock()
	mock.calls.DescribeKeyPairs = append(mock.calls.DescribeKeyPairs, callInfo)
	lockec2ClientMockDescribeKeyPairs.Unlock()
	return mock.DescribeKeyPairsFunc(in1)
}

// DescribeKeyPairsCalls gets all the calls that were made to DescribeKeyPairs.
// Check the length with:
//     len(mockedec2Client.DescribeKeyPairsCalls())
func (mock *ec2ClientMock) DescribeKeyPairsCalls() []struct {
	In1 *ec2.DescribeKeyPairsInput
} {
	var calls []struct {
		In1 *ec2.DescribeKeyPairsInput
	}
	lockec2ClientMockDescribeKeyPairs.RLock()
	calls = mock.calls.DescribeKeyPairs
	lockec2ClientMockDescribeKeyPairs.RUnlock()
	return calls
}

// DescribeKeyPairsRequest calls DescribeKeyPairsRequestFunc.
func (mock *ec2ClientMock) DescribeKeyPairsRequest(in1 *ec2.DescribeKeyPairsInput) (*request.Request, *ec2.DescribeKeyPairsOutput) {
	if mock.DescribeKeyPairsRequestFunc == nil {
		panic("ec2ClientMock.DescribeKeyPairsRequestFunc: method is nil but ec2Client.DescribeKeyPairsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeKeyPairsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeKeyPairsRequest.Lock()
	mock.calls.DescribeKeyPairsRequest = append(mock.calls.DescribeKeyPairsRequest, callInfo)
	lockec2ClientMockDescribeKeyPairsRequest.Unlock()
	return mock.DescribeKeyPairsRequestFunc(in1)
}

// DescribeKeyPairsRequestCalls gets all the calls that were made to DescribeKeyPairsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeKeyPairsRequestCalls())
func (mock *ec2ClientMock) DescribeKeyPairsRequestCalls() []struct {
	In1 *ec2.DescribeKeyPairsInput
} {
	var calls []struct {
		In1 *ec2.DescribeKeyPairsInput
	}
	lockec2ClientMockDescribeKeyPairsRequest.RLock()
	calls = mock.calls.DescribeKeyPairsRequest
	lockec2ClientMockDescribeKeyPairsRequest.RUnlock()
	return calls
}

// DescribeKeyPairsWithContext calls DescribeKeyPairsWithContextFunc.
func (mock *ec2ClientMock) DescribeKeyPairsWithContext(in1 context.Context, in2 *ec2.DescribeKeyPairsInput, in3 ...request.Option) (*ec2.DescribeKeyPairsOutput, error) {
	if mock.DescribeKeyPairsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeKeyPairsWithContextFunc: method is nil but ec2Client.DescribeKeyPairsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeKeyPairsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeKeyPairsWithContext.Lock()
	mock.calls.DescribeKeyPairsWithContext = append(mock.calls.DescribeKeyPairsWithContext, callInfo)
	lockec2ClientMockDescribeKeyPairsWithContext.Unlock()
	return mock.DescribeKeyPairsWithContextFunc(in1, in2, in3...)
}

// DescribeKeyPairsWithContextCalls gets all the calls that were made to DescribeKeyPairsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeKeyPairsWithContextCalls())
func (mock *ec2ClientMock) DescribeKeyPairsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeKeyPairsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeKeyPairsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeKeyPairsWithContext.RLock()
	calls = mock.calls.DescribeKeyPairsWithContext
	lockec2ClientMockDescribeKeyPairsWithContext.RUnlock()
	return calls
}

// DescribeLaunchTemplateVersions calls DescribeLaunchTemplateVersionsFunc.
func (mock *ec2ClientMock) DescribeLaunchTemplateVersions(in1 *ec2.DescribeLaunchTemplateVersionsInput) (*ec2.DescribeLaunchTemplateVersionsOutput, error) {
	if mock.DescribeLaunchTemplateVersionsFunc == nil {
		panic("ec2ClientMock.DescribeLaunchTemplateVersionsFunc: method is nil but ec2Client.DescribeLaunchTemplateVersions was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeLaunchTemplateVersionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeLaunchTemplateVersions.Lock()
	mock.calls.DescribeLaunchTemplateVersions = append(mock.calls.DescribeLaunchTemplateVersions, callInfo)
	lockec2ClientMockDescribeLaunchTemplateVersions.Unlock()
	return mock.DescribeLaunchTemplateVersionsFunc(in1)
}

// DescribeLaunchTemplateVersionsCalls gets all the calls that were made to DescribeLaunchTemplateVersions.
// Check the length with:
//     len(mockedec2Client.DescribeLaunchTemplateVersionsCalls())
func (mock *ec2ClientMock) DescribeLaunchTemplateVersionsCalls() []struct {
	In1 *ec2.DescribeLaunchTemplateVersionsInput
} {
	var calls []struct {
		In1 *ec2.DescribeLaunchTemplateVersionsInput
	}
	lockec2ClientMockDescribeLaunchTemplateVersions.RLock()
	calls = mock.calls.DescribeLaunchTemplateVersions
	lockec2ClientMockDescribeLaunchTemplateVersions.RUnlock()
	return calls
}

// DescribeLaunchTemplateVersionsPages calls DescribeLaunchTemplateVersionsPagesFunc.
func (mock *ec2ClientMock) DescribeLaunchTemplateVersionsPages(in1 *ec2.DescribeLaunchTemplateVersionsInput, in2 func(*ec2.DescribeLaunchTemplateVersionsOutput, bool) bool) error {
	if mock.DescribeLaunchTemplateVersionsPagesFunc == nil {
		panic("ec2ClientMock.DescribeLaunchTemplateVersionsPagesFunc: method is nil but ec2Client.DescribeLaunchTemplateVersionsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeLaunchTemplateVersionsInput
		In2 func(*ec2.DescribeLaunchTemplateVersionsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeLaunchTemplateVersionsPages.Lock()
	mock.calls.DescribeLaunchTemplateVersionsPages = append(mock.calls.DescribeLaunchTemplateVersionsPages, callInfo)
	lockec2ClientMockDescribeLaunchTemplateVersionsPages.Unlock()
	return mock.DescribeLaunchTemplateVersionsPagesFunc(in1, in2)
}

// DescribeLaunchTemplateVersionsPagesCalls gets all the calls that were made to DescribeLaunchTemplateVersionsPages.
// Check the length with:
//     len(mockedec2Client.DescribeLaunchTemplateVersionsPagesCalls())
func (mock *ec2ClientMock) DescribeLaunchTemplateVersionsPagesCalls() []struct {
	In1 *ec2.DescribeLaunchTemplateVersionsInput
	In2 func(*ec2.DescribeLaunchTemplateVersionsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeLaunchTemplateVersionsInput
		In2 func(*ec2.DescribeLaunchTemplateVersionsOutput, bool) bool
	}
	lockec2ClientMockDescribeLaunchTemplateVersionsPages.RLock()
	calls = mock.calls.DescribeLaunchTemplateVersionsPages
	lockec2ClientMockDescribeLaunchTemplateVersionsPages.RUnlock()
	return calls
}

// DescribeLaunchTemplateVersionsPagesWithContext calls DescribeLaunchTemplateVersionsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeLaunchTemplateVersionsPagesWithContext(in1 context.Context, in2 *ec2.DescribeLaunchTemplateVersionsInput, in3 func(*ec2.DescribeLaunchTemplateVersionsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeLaunchTemplateVersionsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeLaunchTemplateVersionsPagesWithContextFunc: method is nil but ec2Client.DescribeLaunchTemplateVersionsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeLaunchTemplateVersionsInput
		In3 func(*ec2.DescribeLaunchTemplateVersionsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeLaunchTemplateVersionsPagesWithContext.Lock()
	mock.calls.DescribeLaunchTemplateVersionsPagesWithContext = append(mock.calls.DescribeLaunchTemplateVersionsPagesWithContext, callInfo)
	lockec2ClientMockDescribeLaunchTemplateVersionsPagesWithContext.Unlock()
	return mock.DescribeLaunchTemplateVersionsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeLaunchTemplateVersionsPagesWithContextCalls gets all the calls that were made to DescribeLaunchTemplateVersionsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeLaunchTemplateVersionsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeLaunchTemplateVersionsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeLaunchTemplateVersionsInput
	In3 func(*ec2.DescribeLaunchTemplateVersionsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeLaunchTemplateVersionsInput
		In3 func(*ec2.DescribeLaunchTemplateVersionsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeLaunchTemplateVersionsPagesWithContext.RLock()
	calls = mock.calls.DescribeLaunchTemplateVersionsPagesWithContext
	lockec2ClientMockDescribeLaunchTemplateVersionsPagesWithContext.RUnlock()
	return calls
}

// DescribeLaunchTemplateVersionsRequest calls DescribeLaunchTemplateVersionsRequestFunc.
func (mock *ec2ClientMock) DescribeLaunchTemplateVersionsRequest(in1 *ec2.DescribeLaunchTemplateVersionsInput) (*request.Request, *ec2.DescribeLaunchTemplateVersionsOutput) {
	if mock.DescribeLaunchTemplateVersionsRequestFunc == nil {
		panic("ec2ClientMock.DescribeLaunchTemplateVersionsRequestFunc: method is nil but ec2Client.DescribeLaunchTemplateVersionsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeLaunchTemplateVersionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeLaunchTemplateVersionsRequest.Lock()
	mock.calls.DescribeLaunchTemplateVersionsRequest = append(mock.calls.DescribeLaunchTemplateVersionsRequest, callInfo)
	lockec2ClientMockDescribeLaunchTemplateVersionsRequest.Unlock()
	return mock.DescribeLaunchTemplateVersionsRequestFunc(in1)
}

// DescribeLaunchTemplateVersionsRequestCalls gets all the calls that were made to DescribeLaunchTemplateVersionsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeLaunchTemplateVersionsRequestCalls())
func (mock *ec2ClientMock) DescribeLaunchTemplateVersionsRequestCalls() []struct {
	In1 *ec2.DescribeLaunchTemplateVersionsInput
} {
	var calls []struct {
		In1 *ec2.DescribeLaunchTemplateVersionsInput
	}
	lockec2ClientMockDescribeLaunchTemplateVersionsRequest.RLock()
	calls = mock.calls.DescribeLaunchTemplateVersionsRequest
	lockec2ClientMockDescribeLaunchTemplateVersionsRequest.RUnlock()
	return calls
}

// DescribeLaunchTemplateVersionsWithContext calls DescribeLaunchTemplateVersionsWithContextFunc.
func (mock *ec2ClientMock) DescribeLaunchTemplateVersionsWithContext(in1 context.Context, in2 *ec2.DescribeLaunchTemplateVersionsInput, in3 ...request.Option) (*ec2.DescribeLaunchTemplateVersionsOutput, error) {
	if mock.DescribeLaunchTemplateVersionsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeLaunchTemplateVersionsWithContextFunc: method is nil but ec2Client.DescribeLaunchTemplateVersionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeLaunchTemplateVersionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeLaunchTemplateVersionsWithContext.Lock()
	mock.calls.DescribeLaunchTemplateVersionsWithContext = append(mock.calls.DescribeLaunchTemplateVersionsWithContext, callInfo)
	lockec2ClientMockDescribeLaunchTemplateVersionsWithContext.Unlock()
	return mock.DescribeLaunchTemplateVersionsWithContextFunc(in1, in2, in3...)
}

// DescribeLaunchTemplateVersionsWithContextCalls gets all the calls that were made to DescribeLaunchTemplateVersionsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeLaunchTemplateVersionsWithContextCalls())
func (mock *ec2ClientMock) DescribeLaunchTemplateVersionsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeLaunchTemplateVersionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeLaunchTemplateVersionsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeLaunchTemplateVersionsWithContext.RLock()
	calls = mock.calls.DescribeLaunchTemplateVersionsWithContext
	lockec2ClientMockDescribeLaunchTemplateVersionsWithContext.RUnlock()
	return calls
}

// DescribeLaunchTemplates calls DescribeLaunchTemplatesFunc.
func (mock *ec2ClientMock) DescribeLaunchTemplates(in1 *ec2.DescribeLaunchTemplatesInput) (*ec2.DescribeLaunchTemplatesOutput, error) {
	if mock.DescribeLaunchTemplatesFunc == nil {
		panic("ec2ClientMock.DescribeLaunchTemplatesFunc: method is nil but ec2Client.DescribeLaunchTemplates was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeLaunchTemplatesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeLaunchTemplates.Lock()
	mock.calls.DescribeLaunchTemplates = append(mock.calls.DescribeLaunchTemplates, callInfo)
	lockec2ClientMockDescribeLaunchTemplates.Unlock()
	return mock.DescribeLaunchTemplatesFunc(in1)
}

// DescribeLaunchTemplatesCalls gets all the calls that were made to DescribeLaunchTemplates.
// Check the length with:
//     len(mockedec2Client.DescribeLaunchTemplatesCalls())
func (mock *ec2ClientMock) DescribeLaunchTemplatesCalls() []struct {
	In1 *ec2.DescribeLaunchTemplatesInput
} {
	var calls []struct {
		In1 *ec2.DescribeLaunchTemplatesInput
	}
	lockec2ClientMockDescribeLaunchTemplates.RLock()
	calls = mock.calls.DescribeLaunchTemplates
	lockec2ClientMockDescribeLaunchTemplates.RUnlock()
	return calls
}

// DescribeLaunchTemplatesPages calls DescribeLaunchTemplatesPagesFunc.
func (mock *ec2ClientMock) DescribeLaunchTemplatesPages(in1 *ec2.DescribeLaunchTemplatesInput, in2 func(*ec2.DescribeLaunchTemplatesOutput, bool) bool) error {
	if mock.DescribeLaunchTemplatesPagesFunc == nil {
		panic("ec2ClientMock.DescribeLaunchTemplatesPagesFunc: method is nil but ec2Client.DescribeLaunchTemplatesPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeLaunchTemplatesInput
		In2 func(*ec2.DescribeLaunchTemplatesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeLaunchTemplatesPages.Lock()
	mock.calls.DescribeLaunchTemplatesPages = append(mock.calls.DescribeLaunchTemplatesPages, callInfo)
	lockec2ClientMockDescribeLaunchTemplatesPages.Unlock()
	return mock.DescribeLaunchTemplatesPagesFunc(in1, in2)
}

// DescribeLaunchTemplatesPagesCalls gets all the calls that were made to DescribeLaunchTemplatesPages.
// Check the length with:
//     len(mockedec2Client.DescribeLaunchTemplatesPagesCalls())
func (mock *ec2ClientMock) DescribeLaunchTemplatesPagesCalls() []struct {
	In1 *ec2.DescribeLaunchTemplatesInput
	In2 func(*ec2.DescribeLaunchTemplatesOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeLaunchTemplatesInput
		In2 func(*ec2.DescribeLaunchTemplatesOutput, bool) bool
	}
	lockec2ClientMockDescribeLaunchTemplatesPages.RLock()
	calls = mock.calls.DescribeLaunchTemplatesPages
	lockec2ClientMockDescribeLaunchTemplatesPages.RUnlock()
	return calls
}

// DescribeLaunchTemplatesPagesWithContext calls DescribeLaunchTemplatesPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeLaunchTemplatesPagesWithContext(in1 context.Context, in2 *ec2.DescribeLaunchTemplatesInput, in3 func(*ec2.DescribeLaunchTemplatesOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeLaunchTemplatesPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeLaunchTemplatesPagesWithContextFunc: method is nil but ec2Client.DescribeLaunchTemplatesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeLaunchTemplatesInput
		In3 func(*ec2.DescribeLaunchTemplatesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeLaunchTemplatesPagesWithContext.Lock()
	mock.calls.DescribeLaunchTemplatesPagesWithContext = append(mock.calls.DescribeLaunchTemplatesPagesWithContext, callInfo)
	lockec2ClientMockDescribeLaunchTemplatesPagesWithContext.Unlock()
	return mock.DescribeLaunchTemplatesPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeLaunchTemplatesPagesWithContextCalls gets all the calls that were made to DescribeLaunchTemplatesPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeLaunchTemplatesPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeLaunchTemplatesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeLaunchTemplatesInput
	In3 func(*ec2.DescribeLaunchTemplatesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeLaunchTemplatesInput
		In3 func(*ec2.DescribeLaunchTemplatesOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeLaunchTemplatesPagesWithContext.RLock()
	calls = mock.calls.DescribeLaunchTemplatesPagesWithContext
	lockec2ClientMockDescribeLaunchTemplatesPagesWithContext.RUnlock()
	return calls
}

// DescribeLaunchTemplatesRequest calls DescribeLaunchTemplatesRequestFunc.
func (mock *ec2ClientMock) DescribeLaunchTemplatesRequest(in1 *ec2.DescribeLaunchTemplatesInput) (*request.Request, *ec2.DescribeLaunchTemplatesOutput) {
	if mock.DescribeLaunchTemplatesRequestFunc == nil {
		panic("ec2ClientMock.DescribeLaunchTemplatesRequestFunc: method is nil but ec2Client.DescribeLaunchTemplatesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeLaunchTemplatesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeLaunchTemplatesRequest.Lock()
	mock.calls.DescribeLaunchTemplatesRequest = append(mock.calls.DescribeLaunchTemplatesRequest, callInfo)
	lockec2ClientMockDescribeLaunchTemplatesRequest.Unlock()
	return mock.DescribeLaunchTemplatesRequestFunc(in1)
}

// DescribeLaunchTemplatesRequestCalls gets all the calls that were made to DescribeLaunchTemplatesRequest.
// Check the length with:
//     len(mockedec2Client.DescribeLaunchTemplatesRequestCalls())
func (mock *ec2ClientMock) DescribeLaunchTemplatesRequestCalls() []struct {
	In1 *ec2.DescribeLaunchTemplatesInput
} {
	var calls []struct {
		In1 *ec2.DescribeLaunchTemplatesInput
	}
	lockec2ClientMockDescribeLaunchTemplatesRequest.RLock()
	calls = mock.calls.DescribeLaunchTemplatesRequest
	lockec2ClientMockDescribeLaunchTemplatesRequest.RUnlock()
	return calls
}

// DescribeLaunchTemplatesWithContext calls DescribeLaunchTemplatesWithContextFunc.
func (mock *ec2ClientMock) DescribeLaunchTemplatesWithContext(in1 context.Context, in2 *ec2.DescribeLaunchTemplatesInput, in3 ...request.Option) (*ec2.DescribeLaunchTemplatesOutput, error) {
	if mock.DescribeLaunchTemplatesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeLaunchTemplatesWithContextFunc: method is nil but ec2Client.DescribeLaunchTemplatesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeLaunchTemplatesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeLaunchTemplatesWithContext.Lock()
	mock.calls.DescribeLaunchTemplatesWithContext = append(mock.calls.DescribeLaunchTemplatesWithContext, callInfo)
	lockec2ClientMockDescribeLaunchTemplatesWithContext.Unlock()
	return mock.DescribeLaunchTemplatesWithContextFunc(in1, in2, in3...)
}

// DescribeLaunchTemplatesWithContextCalls gets all the calls that were made to DescribeLaunchTemplatesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeLaunchTemplatesWithContextCalls())
func (mock *ec2ClientMock) DescribeLaunchTemplatesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeLaunchTemplatesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeLaunchTemplatesInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeLaunchTemplatesWithContext.RLock()
	calls = mock.calls.DescribeLaunchTemplatesWithContext
	lockec2ClientMockDescribeLaunchTemplatesWithContext.RUnlock()
	return calls
}

// DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations calls DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFunc.
func (mock *ec2ClientMock) DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(in1 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) (*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, error) {
	if mock.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFunc == nil {
		panic("ec2ClientMock.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFunc: method is nil but ec2Client.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations.Lock()
	mock.calls.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations = append(mock.calls.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations, callInfo)
	lockec2ClientMockDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations.Unlock()
	return mock.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFunc(in1)
}

// DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCalls gets all the calls that were made to DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations.
// Check the length with:
//     len(mockedec2Client.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCalls())
func (mock *ec2ClientMock) DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCalls() []struct {
	In1 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput
} {
	var calls []struct {
		In1 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput
	}
	lockec2ClientMockDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations.RLock()
	calls = mock.calls.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations
	lockec2ClientMockDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations.RUnlock()
	return calls
}

// DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest calls DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequestFunc.
func (mock *ec2ClientMock) DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest(in1 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) (*request.Request, *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput) {
	if mock.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequestFunc == nil {
		panic("ec2ClientMock.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequestFunc: method is nil but ec2Client.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest.Lock()
	mock.calls.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest = append(mock.calls.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest, callInfo)
	lockec2ClientMockDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest.Unlock()
	return mock.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequestFunc(in1)
}

// DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequestCalls gets all the calls that were made to DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequestCalls())
func (mock *ec2ClientMock) DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequestCalls() []struct {
	In1 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput
} {
	var calls []struct {
		In1 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput
	}
	lockec2ClientMockDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest.RLock()
	calls = mock.calls.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest
	lockec2ClientMockDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest.RUnlock()
	return calls
}

// DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext calls DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContextFunc.
func (mock *ec2ClientMock) DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext(in1 context.Context, in2 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput, in3 ...request.Option) (*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, error) {
	if mock.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContextFunc: method is nil but ec2Client.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext.Lock()
	mock.calls.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext = append(mock.calls.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext, callInfo)
	lockec2ClientMockDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext.Unlock()
	return mock.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContextFunc(in1, in2, in3...)
}

// DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContextCalls gets all the calls that were made to DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContextCalls())
func (mock *ec2ClientMock) DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext.RLock()
	calls = mock.calls.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext
	lockec2ClientMockDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext.RUnlock()
	return calls
}

// DescribeLocalGatewayRouteTableVpcAssociations calls DescribeLocalGatewayRouteTableVpcAssociationsFunc.
func (mock *ec2ClientMock) DescribeLocalGatewayRouteTableVpcAssociations(in1 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput) (*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, error) {
	if mock.DescribeLocalGatewayRouteTableVpcAssociationsFunc == nil {
		panic("ec2ClientMock.DescribeLocalGatewayRouteTableVpcAssociationsFunc: method is nil but ec2Client.DescribeLocalGatewayRouteTableVpcAssociations was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeLocalGatewayRouteTableVpcAssociations.Lock()
	mock.calls.DescribeLocalGatewayRouteTableVpcAssociations = append(mock.calls.DescribeLocalGatewayRouteTableVpcAssociations, callInfo)
	lockec2ClientMockDescribeLocalGatewayRouteTableVpcAssociations.Unlock()
	return mock.DescribeLocalGatewayRouteTableVpcAssociationsFunc(in1)
}

// DescribeLocalGatewayRouteTableVpcAssociationsCalls gets all the calls that were made to DescribeLocalGatewayRouteTableVpcAssociations.
// Check the length with:
//     len(mockedec2Client.DescribeLocalGatewayRouteTableVpcAssociationsCalls())
func (mock *ec2ClientMock) DescribeLocalGatewayRouteTableVpcAssociationsCalls() []struct {
	In1 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput
} {
	var calls []struct {
		In1 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput
	}
	lockec2ClientMockDescribeLocalGatewayRouteTableVpcAssociations.RLock()
	calls = mock.calls.DescribeLocalGatewayRouteTableVpcAssociations
	lockec2ClientMockDescribeLocalGatewayRouteTableVpcAssociations.RUnlock()
	return calls
}

// DescribeLocalGatewayRouteTableVpcAssociationsRequest calls DescribeLocalGatewayRouteTableVpcAssociationsRequestFunc.
func (mock *ec2ClientMock) DescribeLocalGatewayRouteTableVpcAssociationsRequest(in1 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput) (*request.Request, *ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput) {
	if mock.DescribeLocalGatewayRouteTableVpcAssociationsRequestFunc == nil {
		panic("ec2ClientMock.DescribeLocalGatewayRouteTableVpcAssociationsRequestFunc: method is nil but ec2Client.DescribeLocalGatewayRouteTableVpcAssociationsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeLocalGatewayRouteTableVpcAssociationsRequest.Lock()
	mock.calls.DescribeLocalGatewayRouteTableVpcAssociationsRequest = append(mock.calls.DescribeLocalGatewayRouteTableVpcAssociationsRequest, callInfo)
	lockec2ClientMockDescribeLocalGatewayRouteTableVpcAssociationsRequest.Unlock()
	return mock.DescribeLocalGatewayRouteTableVpcAssociationsRequestFunc(in1)
}

// DescribeLocalGatewayRouteTableVpcAssociationsRequestCalls gets all the calls that were made to DescribeLocalGatewayRouteTableVpcAssociationsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeLocalGatewayRouteTableVpcAssociationsRequestCalls())
func (mock *ec2ClientMock) DescribeLocalGatewayRouteTableVpcAssociationsRequestCalls() []struct {
	In1 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput
} {
	var calls []struct {
		In1 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput
	}
	lockec2ClientMockDescribeLocalGatewayRouteTableVpcAssociationsRequest.RLock()
	calls = mock.calls.DescribeLocalGatewayRouteTableVpcAssociationsRequest
	lockec2ClientMockDescribeLocalGatewayRouteTableVpcAssociationsRequest.RUnlock()
	return calls
}

// DescribeLocalGatewayRouteTableVpcAssociationsWithContext calls DescribeLocalGatewayRouteTableVpcAssociationsWithContextFunc.
func (mock *ec2ClientMock) DescribeLocalGatewayRouteTableVpcAssociationsWithContext(in1 context.Context, in2 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput, in3 ...request.Option) (*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, error) {
	if mock.DescribeLocalGatewayRouteTableVpcAssociationsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeLocalGatewayRouteTableVpcAssociationsWithContextFunc: method is nil but ec2Client.DescribeLocalGatewayRouteTableVpcAssociationsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeLocalGatewayRouteTableVpcAssociationsWithContext.Lock()
	mock.calls.DescribeLocalGatewayRouteTableVpcAssociationsWithContext = append(mock.calls.DescribeLocalGatewayRouteTableVpcAssociationsWithContext, callInfo)
	lockec2ClientMockDescribeLocalGatewayRouteTableVpcAssociationsWithContext.Unlock()
	return mock.DescribeLocalGatewayRouteTableVpcAssociationsWithContextFunc(in1, in2, in3...)
}

// DescribeLocalGatewayRouteTableVpcAssociationsWithContextCalls gets all the calls that were made to DescribeLocalGatewayRouteTableVpcAssociationsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeLocalGatewayRouteTableVpcAssociationsWithContextCalls())
func (mock *ec2ClientMock) DescribeLocalGatewayRouteTableVpcAssociationsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeLocalGatewayRouteTableVpcAssociationsWithContext.RLock()
	calls = mock.calls.DescribeLocalGatewayRouteTableVpcAssociationsWithContext
	lockec2ClientMockDescribeLocalGatewayRouteTableVpcAssociationsWithContext.RUnlock()
	return calls
}

// DescribeLocalGatewayRouteTables calls DescribeLocalGatewayRouteTablesFunc.
func (mock *ec2ClientMock) DescribeLocalGatewayRouteTables(in1 *ec2.DescribeLocalGatewayRouteTablesInput) (*ec2.DescribeLocalGatewayRouteTablesOutput, error) {
	if mock.DescribeLocalGatewayRouteTablesFunc == nil {
		panic("ec2ClientMock.DescribeLocalGatewayRouteTablesFunc: method is nil but ec2Client.DescribeLocalGatewayRouteTables was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeLocalGatewayRouteTablesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeLocalGatewayRouteTables.Lock()
	mock.calls.DescribeLocalGatewayRouteTables = append(mock.calls.DescribeLocalGatewayRouteTables, callInfo)
	lockec2ClientMockDescribeLocalGatewayRouteTables.Unlock()
	return mock.DescribeLocalGatewayRouteTablesFunc(in1)
}

// DescribeLocalGatewayRouteTablesCalls gets all the calls that were made to DescribeLocalGatewayRouteTables.
// Check the length with:
//     len(mockedec2Client.DescribeLocalGatewayRouteTablesCalls())
func (mock *ec2ClientMock) DescribeLocalGatewayRouteTablesCalls() []struct {
	In1 *ec2.DescribeLocalGatewayRouteTablesInput
} {
	var calls []struct {
		In1 *ec2.DescribeLocalGatewayRouteTablesInput
	}
	lockec2ClientMockDescribeLocalGatewayRouteTables.RLock()
	calls = mock.calls.DescribeLocalGatewayRouteTables
	lockec2ClientMockDescribeLocalGatewayRouteTables.RUnlock()
	return calls
}

// DescribeLocalGatewayRouteTablesRequest calls DescribeLocalGatewayRouteTablesRequestFunc.
func (mock *ec2ClientMock) DescribeLocalGatewayRouteTablesRequest(in1 *ec2.DescribeLocalGatewayRouteTablesInput) (*request.Request, *ec2.DescribeLocalGatewayRouteTablesOutput) {
	if mock.DescribeLocalGatewayRouteTablesRequestFunc == nil {
		panic("ec2ClientMock.DescribeLocalGatewayRouteTablesRequestFunc: method is nil but ec2Client.DescribeLocalGatewayRouteTablesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeLocalGatewayRouteTablesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeLocalGatewayRouteTablesRequest.Lock()
	mock.calls.DescribeLocalGatewayRouteTablesRequest = append(mock.calls.DescribeLocalGatewayRouteTablesRequest, callInfo)
	lockec2ClientMockDescribeLocalGatewayRouteTablesRequest.Unlock()
	return mock.DescribeLocalGatewayRouteTablesRequestFunc(in1)
}

// DescribeLocalGatewayRouteTablesRequestCalls gets all the calls that were made to DescribeLocalGatewayRouteTablesRequest.
// Check the length with:
//     len(mockedec2Client.DescribeLocalGatewayRouteTablesRequestCalls())
func (mock *ec2ClientMock) DescribeLocalGatewayRouteTablesRequestCalls() []struct {
	In1 *ec2.DescribeLocalGatewayRouteTablesInput
} {
	var calls []struct {
		In1 *ec2.DescribeLocalGatewayRouteTablesInput
	}
	lockec2ClientMockDescribeLocalGatewayRouteTablesRequest.RLock()
	calls = mock.calls.DescribeLocalGatewayRouteTablesRequest
	lockec2ClientMockDescribeLocalGatewayRouteTablesRequest.RUnlock()
	return calls
}

// DescribeLocalGatewayRouteTablesWithContext calls DescribeLocalGatewayRouteTablesWithContextFunc.
func (mock *ec2ClientMock) DescribeLocalGatewayRouteTablesWithContext(in1 context.Context, in2 *ec2.DescribeLocalGatewayRouteTablesInput, in3 ...request.Option) (*ec2.DescribeLocalGatewayRouteTablesOutput, error) {
	if mock.DescribeLocalGatewayRouteTablesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeLocalGatewayRouteTablesWithContextFunc: method is nil but ec2Client.DescribeLocalGatewayRouteTablesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeLocalGatewayRouteTablesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeLocalGatewayRouteTablesWithContext.Lock()
	mock.calls.DescribeLocalGatewayRouteTablesWithContext = append(mock.calls.DescribeLocalGatewayRouteTablesWithContext, callInfo)
	lockec2ClientMockDescribeLocalGatewayRouteTablesWithContext.Unlock()
	return mock.DescribeLocalGatewayRouteTablesWithContextFunc(in1, in2, in3...)
}

// DescribeLocalGatewayRouteTablesWithContextCalls gets all the calls that were made to DescribeLocalGatewayRouteTablesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeLocalGatewayRouteTablesWithContextCalls())
func (mock *ec2ClientMock) DescribeLocalGatewayRouteTablesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeLocalGatewayRouteTablesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeLocalGatewayRouteTablesInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeLocalGatewayRouteTablesWithContext.RLock()
	calls = mock.calls.DescribeLocalGatewayRouteTablesWithContext
	lockec2ClientMockDescribeLocalGatewayRouteTablesWithContext.RUnlock()
	return calls
}

// DescribeLocalGatewayVirtualInterfaceGroups calls DescribeLocalGatewayVirtualInterfaceGroupsFunc.
func (mock *ec2ClientMock) DescribeLocalGatewayVirtualInterfaceGroups(in1 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput) (*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, error) {
	if mock.DescribeLocalGatewayVirtualInterfaceGroupsFunc == nil {
		panic("ec2ClientMock.DescribeLocalGatewayVirtualInterfaceGroupsFunc: method is nil but ec2Client.DescribeLocalGatewayVirtualInterfaceGroups was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeLocalGatewayVirtualInterfaceGroups.Lock()
	mock.calls.DescribeLocalGatewayVirtualInterfaceGroups = append(mock.calls.DescribeLocalGatewayVirtualInterfaceGroups, callInfo)
	lockec2ClientMockDescribeLocalGatewayVirtualInterfaceGroups.Unlock()
	return mock.DescribeLocalGatewayVirtualInterfaceGroupsFunc(in1)
}

// DescribeLocalGatewayVirtualInterfaceGroupsCalls gets all the calls that were made to DescribeLocalGatewayVirtualInterfaceGroups.
// Check the length with:
//     len(mockedec2Client.DescribeLocalGatewayVirtualInterfaceGroupsCalls())
func (mock *ec2ClientMock) DescribeLocalGatewayVirtualInterfaceGroupsCalls() []struct {
	In1 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput
} {
	var calls []struct {
		In1 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput
	}
	lockec2ClientMockDescribeLocalGatewayVirtualInterfaceGroups.RLock()
	calls = mock.calls.DescribeLocalGatewayVirtualInterfaceGroups
	lockec2ClientMockDescribeLocalGatewayVirtualInterfaceGroups.RUnlock()
	return calls
}

// DescribeLocalGatewayVirtualInterfaceGroupsRequest calls DescribeLocalGatewayVirtualInterfaceGroupsRequestFunc.
func (mock *ec2ClientMock) DescribeLocalGatewayVirtualInterfaceGroupsRequest(in1 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput) (*request.Request, *ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput) {
	if mock.DescribeLocalGatewayVirtualInterfaceGroupsRequestFunc == nil {
		panic("ec2ClientMock.DescribeLocalGatewayVirtualInterfaceGroupsRequestFunc: method is nil but ec2Client.DescribeLocalGatewayVirtualInterfaceGroupsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeLocalGatewayVirtualInterfaceGroupsRequest.Lock()
	mock.calls.DescribeLocalGatewayVirtualInterfaceGroupsRequest = append(mock.calls.DescribeLocalGatewayVirtualInterfaceGroupsRequest, callInfo)
	lockec2ClientMockDescribeLocalGatewayVirtualInterfaceGroupsRequest.Unlock()
	return mock.DescribeLocalGatewayVirtualInterfaceGroupsRequestFunc(in1)
}

// DescribeLocalGatewayVirtualInterfaceGroupsRequestCalls gets all the calls that were made to DescribeLocalGatewayVirtualInterfaceGroupsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeLocalGatewayVirtualInterfaceGroupsRequestCalls())
func (mock *ec2ClientMock) DescribeLocalGatewayVirtualInterfaceGroupsRequestCalls() []struct {
	In1 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput
} {
	var calls []struct {
		In1 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput
	}
	lockec2ClientMockDescribeLocalGatewayVirtualInterfaceGroupsRequest.RLock()
	calls = mock.calls.DescribeLocalGatewayVirtualInterfaceGroupsRequest
	lockec2ClientMockDescribeLocalGatewayVirtualInterfaceGroupsRequest.RUnlock()
	return calls
}

// DescribeLocalGatewayVirtualInterfaceGroupsWithContext calls DescribeLocalGatewayVirtualInterfaceGroupsWithContextFunc.
func (mock *ec2ClientMock) DescribeLocalGatewayVirtualInterfaceGroupsWithContext(in1 context.Context, in2 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput, in3 ...request.Option) (*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, error) {
	if mock.DescribeLocalGatewayVirtualInterfaceGroupsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeLocalGatewayVirtualInterfaceGroupsWithContextFunc: method is nil but ec2Client.DescribeLocalGatewayVirtualInterfaceGroupsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeLocalGatewayVirtualInterfaceGroupsWithContext.Lock()
	mock.calls.DescribeLocalGatewayVirtualInterfaceGroupsWithContext = append(mock.calls.DescribeLocalGatewayVirtualInterfaceGroupsWithContext, callInfo)
	lockec2ClientMockDescribeLocalGatewayVirtualInterfaceGroupsWithContext.Unlock()
	return mock.DescribeLocalGatewayVirtualInterfaceGroupsWithContextFunc(in1, in2, in3...)
}

// DescribeLocalGatewayVirtualInterfaceGroupsWithContextCalls gets all the calls that were made to DescribeLocalGatewayVirtualInterfaceGroupsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeLocalGatewayVirtualInterfaceGroupsWithContextCalls())
func (mock *ec2ClientMock) DescribeLocalGatewayVirtualInterfaceGroupsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeLocalGatewayVirtualInterfaceGroupsWithContext.RLock()
	calls = mock.calls.DescribeLocalGatewayVirtualInterfaceGroupsWithContext
	lockec2ClientMockDescribeLocalGatewayVirtualInterfaceGroupsWithContext.RUnlock()
	return calls
}

// DescribeLocalGatewayVirtualInterfaces calls DescribeLocalGatewayVirtualInterfacesFunc.
func (mock *ec2ClientMock) DescribeLocalGatewayVirtualInterfaces(in1 *ec2.DescribeLocalGatewayVirtualInterfacesInput) (*ec2.DescribeLocalGatewayVirtualInterfacesOutput, error) {
	if mock.DescribeLocalGatewayVirtualInterfacesFunc == nil {
		panic("ec2ClientMock.DescribeLocalGatewayVirtualInterfacesFunc: method is nil but ec2Client.DescribeLocalGatewayVirtualInterfaces was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeLocalGatewayVirtualInterfacesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeLocalGatewayVirtualInterfaces.Lock()
	mock.calls.DescribeLocalGatewayVirtualInterfaces = append(mock.calls.DescribeLocalGatewayVirtualInterfaces, callInfo)
	lockec2ClientMockDescribeLocalGatewayVirtualInterfaces.Unlock()
	return mock.DescribeLocalGatewayVirtualInterfacesFunc(in1)
}

// DescribeLocalGatewayVirtualInterfacesCalls gets all the calls that were made to DescribeLocalGatewayVirtualInterfaces.
// Check the length with:
//     len(mockedec2Client.DescribeLocalGatewayVirtualInterfacesCalls())
func (mock *ec2ClientMock) DescribeLocalGatewayVirtualInterfacesCalls() []struct {
	In1 *ec2.DescribeLocalGatewayVirtualInterfacesInput
} {
	var calls []struct {
		In1 *ec2.DescribeLocalGatewayVirtualInterfacesInput
	}
	lockec2ClientMockDescribeLocalGatewayVirtualInterfaces.RLock()
	calls = mock.calls.DescribeLocalGatewayVirtualInterfaces
	lockec2ClientMockDescribeLocalGatewayVirtualInterfaces.RUnlock()
	return calls
}

// DescribeLocalGatewayVirtualInterfacesRequest calls DescribeLocalGatewayVirtualInterfacesRequestFunc.
func (mock *ec2ClientMock) DescribeLocalGatewayVirtualInterfacesRequest(in1 *ec2.DescribeLocalGatewayVirtualInterfacesInput) (*request.Request, *ec2.DescribeLocalGatewayVirtualInterfacesOutput) {
	if mock.DescribeLocalGatewayVirtualInterfacesRequestFunc == nil {
		panic("ec2ClientMock.DescribeLocalGatewayVirtualInterfacesRequestFunc: method is nil but ec2Client.DescribeLocalGatewayVirtualInterfacesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeLocalGatewayVirtualInterfacesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeLocalGatewayVirtualInterfacesRequest.Lock()
	mock.calls.DescribeLocalGatewayVirtualInterfacesRequest = append(mock.calls.DescribeLocalGatewayVirtualInterfacesRequest, callInfo)
	lockec2ClientMockDescribeLocalGatewayVirtualInterfacesRequest.Unlock()
	return mock.DescribeLocalGatewayVirtualInterfacesRequestFunc(in1)
}

// DescribeLocalGatewayVirtualInterfacesRequestCalls gets all the calls that were made to DescribeLocalGatewayVirtualInterfacesRequest.
// Check the length with:
//     len(mockedec2Client.DescribeLocalGatewayVirtualInterfacesRequestCalls())
func (mock *ec2ClientMock) DescribeLocalGatewayVirtualInterfacesRequestCalls() []struct {
	In1 *ec2.DescribeLocalGatewayVirtualInterfacesInput
} {
	var calls []struct {
		In1 *ec2.DescribeLocalGatewayVirtualInterfacesInput
	}
	lockec2ClientMockDescribeLocalGatewayVirtualInterfacesRequest.RLock()
	calls = mock.calls.DescribeLocalGatewayVirtualInterfacesRequest
	lockec2ClientMockDescribeLocalGatewayVirtualInterfacesRequest.RUnlock()
	return calls
}

// DescribeLocalGatewayVirtualInterfacesWithContext calls DescribeLocalGatewayVirtualInterfacesWithContextFunc.
func (mock *ec2ClientMock) DescribeLocalGatewayVirtualInterfacesWithContext(in1 context.Context, in2 *ec2.DescribeLocalGatewayVirtualInterfacesInput, in3 ...request.Option) (*ec2.DescribeLocalGatewayVirtualInterfacesOutput, error) {
	if mock.DescribeLocalGatewayVirtualInterfacesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeLocalGatewayVirtualInterfacesWithContextFunc: method is nil but ec2Client.DescribeLocalGatewayVirtualInterfacesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeLocalGatewayVirtualInterfacesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeLocalGatewayVirtualInterfacesWithContext.Lock()
	mock.calls.DescribeLocalGatewayVirtualInterfacesWithContext = append(mock.calls.DescribeLocalGatewayVirtualInterfacesWithContext, callInfo)
	lockec2ClientMockDescribeLocalGatewayVirtualInterfacesWithContext.Unlock()
	return mock.DescribeLocalGatewayVirtualInterfacesWithContextFunc(in1, in2, in3...)
}

// DescribeLocalGatewayVirtualInterfacesWithContextCalls gets all the calls that were made to DescribeLocalGatewayVirtualInterfacesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeLocalGatewayVirtualInterfacesWithContextCalls())
func (mock *ec2ClientMock) DescribeLocalGatewayVirtualInterfacesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeLocalGatewayVirtualInterfacesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeLocalGatewayVirtualInterfacesInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeLocalGatewayVirtualInterfacesWithContext.RLock()
	calls = mock.calls.DescribeLocalGatewayVirtualInterfacesWithContext
	lockec2ClientMockDescribeLocalGatewayVirtualInterfacesWithContext.RUnlock()
	return calls
}

// DescribeLocalGateways calls DescribeLocalGatewaysFunc.
func (mock *ec2ClientMock) DescribeLocalGateways(in1 *ec2.DescribeLocalGatewaysInput) (*ec2.DescribeLocalGatewaysOutput, error) {
	if mock.DescribeLocalGatewaysFunc == nil {
		panic("ec2ClientMock.DescribeLocalGatewaysFunc: method is nil but ec2Client.DescribeLocalGateways was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeLocalGatewaysInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeLocalGateways.Lock()
	mock.calls.DescribeLocalGateways = append(mock.calls.DescribeLocalGateways, callInfo)
	lockec2ClientMockDescribeLocalGateways.Unlock()
	return mock.DescribeLocalGatewaysFunc(in1)
}

// DescribeLocalGatewaysCalls gets all the calls that were made to DescribeLocalGateways.
// Check the length with:
//     len(mockedec2Client.DescribeLocalGatewaysCalls())
func (mock *ec2ClientMock) DescribeLocalGatewaysCalls() []struct {
	In1 *ec2.DescribeLocalGatewaysInput
} {
	var calls []struct {
		In1 *ec2.DescribeLocalGatewaysInput
	}
	lockec2ClientMockDescribeLocalGateways.RLock()
	calls = mock.calls.DescribeLocalGateways
	lockec2ClientMockDescribeLocalGateways.RUnlock()
	return calls
}

// DescribeLocalGatewaysRequest calls DescribeLocalGatewaysRequestFunc.
func (mock *ec2ClientMock) DescribeLocalGatewaysRequest(in1 *ec2.DescribeLocalGatewaysInput) (*request.Request, *ec2.DescribeLocalGatewaysOutput) {
	if mock.DescribeLocalGatewaysRequestFunc == nil {
		panic("ec2ClientMock.DescribeLocalGatewaysRequestFunc: method is nil but ec2Client.DescribeLocalGatewaysRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeLocalGatewaysInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeLocalGatewaysRequest.Lock()
	mock.calls.DescribeLocalGatewaysRequest = append(mock.calls.DescribeLocalGatewaysRequest, callInfo)
	lockec2ClientMockDescribeLocalGatewaysRequest.Unlock()
	return mock.DescribeLocalGatewaysRequestFunc(in1)
}

// DescribeLocalGatewaysRequestCalls gets all the calls that were made to DescribeLocalGatewaysRequest.
// Check the length with:
//     len(mockedec2Client.DescribeLocalGatewaysRequestCalls())
func (mock *ec2ClientMock) DescribeLocalGatewaysRequestCalls() []struct {
	In1 *ec2.DescribeLocalGatewaysInput
} {
	var calls []struct {
		In1 *ec2.DescribeLocalGatewaysInput
	}
	lockec2ClientMockDescribeLocalGatewaysRequest.RLock()
	calls = mock.calls.DescribeLocalGatewaysRequest
	lockec2ClientMockDescribeLocalGatewaysRequest.RUnlock()
	return calls
}

// DescribeLocalGatewaysWithContext calls DescribeLocalGatewaysWithContextFunc.
func (mock *ec2ClientMock) DescribeLocalGatewaysWithContext(in1 context.Context, in2 *ec2.DescribeLocalGatewaysInput, in3 ...request.Option) (*ec2.DescribeLocalGatewaysOutput, error) {
	if mock.DescribeLocalGatewaysWithContextFunc == nil {
		panic("ec2ClientMock.DescribeLocalGatewaysWithContextFunc: method is nil but ec2Client.DescribeLocalGatewaysWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeLocalGatewaysInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeLocalGatewaysWithContext.Lock()
	mock.calls.DescribeLocalGatewaysWithContext = append(mock.calls.DescribeLocalGatewaysWithContext, callInfo)
	lockec2ClientMockDescribeLocalGatewaysWithContext.Unlock()
	return mock.DescribeLocalGatewaysWithContextFunc(in1, in2, in3...)
}

// DescribeLocalGatewaysWithContextCalls gets all the calls that were made to DescribeLocalGatewaysWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeLocalGatewaysWithContextCalls())
func (mock *ec2ClientMock) DescribeLocalGatewaysWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeLocalGatewaysInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeLocalGatewaysInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeLocalGatewaysWithContext.RLock()
	calls = mock.calls.DescribeLocalGatewaysWithContext
	lockec2ClientMockDescribeLocalGatewaysWithContext.RUnlock()
	return calls
}

// DescribeMovingAddresses calls DescribeMovingAddressesFunc.
func (mock *ec2ClientMock) DescribeMovingAddresses(in1 *ec2.DescribeMovingAddressesInput) (*ec2.DescribeMovingAddressesOutput, error) {
	if mock.DescribeMovingAddressesFunc == nil {
		panic("ec2ClientMock.DescribeMovingAddressesFunc: method is nil but ec2Client.DescribeMovingAddresses was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeMovingAddressesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeMovingAddresses.Lock()
	mock.calls.DescribeMovingAddresses = append(mock.calls.DescribeMovingAddresses, callInfo)
	lockec2ClientMockDescribeMovingAddresses.Unlock()
	return mock.DescribeMovingAddressesFunc(in1)
}

// DescribeMovingAddressesCalls gets all the calls that were made to DescribeMovingAddresses.
// Check the length with:
//     len(mockedec2Client.DescribeMovingAddressesCalls())
func (mock *ec2ClientMock) DescribeMovingAddressesCalls() []struct {
	In1 *ec2.DescribeMovingAddressesInput
} {
	var calls []struct {
		In1 *ec2.DescribeMovingAddressesInput
	}
	lockec2ClientMockDescribeMovingAddresses.RLock()
	calls = mock.calls.DescribeMovingAddresses
	lockec2ClientMockDescribeMovingAddresses.RUnlock()
	return calls
}

// DescribeMovingAddressesPages calls DescribeMovingAddressesPagesFunc.
func (mock *ec2ClientMock) DescribeMovingAddressesPages(in1 *ec2.DescribeMovingAddressesInput, in2 func(*ec2.DescribeMovingAddressesOutput, bool) bool) error {
	if mock.DescribeMovingAddressesPagesFunc == nil {
		panic("ec2ClientMock.DescribeMovingAddressesPagesFunc: method is nil but ec2Client.DescribeMovingAddressesPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeMovingAddressesInput
		In2 func(*ec2.DescribeMovingAddressesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeMovingAddressesPages.Lock()
	mock.calls.DescribeMovingAddressesPages = append(mock.calls.DescribeMovingAddressesPages, callInfo)
	lockec2ClientMockDescribeMovingAddressesPages.Unlock()
	return mock.DescribeMovingAddressesPagesFunc(in1, in2)
}

// DescribeMovingAddressesPagesCalls gets all the calls that were made to DescribeMovingAddressesPages.
// Check the length with:
//     len(mockedec2Client.DescribeMovingAddressesPagesCalls())
func (mock *ec2ClientMock) DescribeMovingAddressesPagesCalls() []struct {
	In1 *ec2.DescribeMovingAddressesInput
	In2 func(*ec2.DescribeMovingAddressesOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeMovingAddressesInput
		In2 func(*ec2.DescribeMovingAddressesOutput, bool) bool
	}
	lockec2ClientMockDescribeMovingAddressesPages.RLock()
	calls = mock.calls.DescribeMovingAddressesPages
	lockec2ClientMockDescribeMovingAddressesPages.RUnlock()
	return calls
}

// DescribeMovingAddressesPagesWithContext calls DescribeMovingAddressesPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeMovingAddressesPagesWithContext(in1 context.Context, in2 *ec2.DescribeMovingAddressesInput, in3 func(*ec2.DescribeMovingAddressesOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeMovingAddressesPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeMovingAddressesPagesWithContextFunc: method is nil but ec2Client.DescribeMovingAddressesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeMovingAddressesInput
		In3 func(*ec2.DescribeMovingAddressesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeMovingAddressesPagesWithContext.Lock()
	mock.calls.DescribeMovingAddressesPagesWithContext = append(mock.calls.DescribeMovingAddressesPagesWithContext, callInfo)
	lockec2ClientMockDescribeMovingAddressesPagesWithContext.Unlock()
	return mock.DescribeMovingAddressesPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeMovingAddressesPagesWithContextCalls gets all the calls that were made to DescribeMovingAddressesPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeMovingAddressesPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeMovingAddressesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeMovingAddressesInput
	In3 func(*ec2.DescribeMovingAddressesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeMovingAddressesInput
		In3 func(*ec2.DescribeMovingAddressesOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeMovingAddressesPagesWithContext.RLock()
	calls = mock.calls.DescribeMovingAddressesPagesWithContext
	lockec2ClientMockDescribeMovingAddressesPagesWithContext.RUnlock()
	return calls
}

// DescribeMovingAddressesRequest calls DescribeMovingAddressesRequestFunc.
func (mock *ec2ClientMock) DescribeMovingAddressesRequest(in1 *ec2.DescribeMovingAddressesInput) (*request.Request, *ec2.DescribeMovingAddressesOutput) {
	if mock.DescribeMovingAddressesRequestFunc == nil {
		panic("ec2ClientMock.DescribeMovingAddressesRequestFunc: method is nil but ec2Client.DescribeMovingAddressesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeMovingAddressesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeMovingAddressesRequest.Lock()
	mock.calls.DescribeMovingAddressesRequest = append(mock.calls.DescribeMovingAddressesRequest, callInfo)
	lockec2ClientMockDescribeMovingAddressesRequest.Unlock()
	return mock.DescribeMovingAddressesRequestFunc(in1)
}

// DescribeMovingAddressesRequestCalls gets all the calls that were made to DescribeMovingAddressesRequest.
// Check the length with:
//     len(mockedec2Client.DescribeMovingAddressesRequestCalls())
func (mock *ec2ClientMock) DescribeMovingAddressesRequestCalls() []struct {
	In1 *ec2.DescribeMovingAddressesInput
} {
	var calls []struct {
		In1 *ec2.DescribeMovingAddressesInput
	}
	lockec2ClientMockDescribeMovingAddressesRequest.RLock()
	calls = mock.calls.DescribeMovingAddressesRequest
	lockec2ClientMockDescribeMovingAddressesRequest.RUnlock()
	return calls
}

// DescribeMovingAddressesWithContext calls DescribeMovingAddressesWithContextFunc.
func (mock *ec2ClientMock) DescribeMovingAddressesWithContext(in1 context.Context, in2 *ec2.DescribeMovingAddressesInput, in3 ...request.Option) (*ec2.DescribeMovingAddressesOutput, error) {
	if mock.DescribeMovingAddressesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeMovingAddressesWithContextFunc: method is nil but ec2Client.DescribeMovingAddressesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeMovingAddressesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeMovingAddressesWithContext.Lock()
	mock.calls.DescribeMovingAddressesWithContext = append(mock.calls.DescribeMovingAddressesWithContext, callInfo)
	lockec2ClientMockDescribeMovingAddressesWithContext.Unlock()
	return mock.DescribeMovingAddressesWithContextFunc(in1, in2, in3...)
}

// DescribeMovingAddressesWithContextCalls gets all the calls that were made to DescribeMovingAddressesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeMovingAddressesWithContextCalls())
func (mock *ec2ClientMock) DescribeMovingAddressesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeMovingAddressesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeMovingAddressesInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeMovingAddressesWithContext.RLock()
	calls = mock.calls.DescribeMovingAddressesWithContext
	lockec2ClientMockDescribeMovingAddressesWithContext.RUnlock()
	return calls
}

// DescribeNatGateways calls DescribeNatGatewaysFunc.
func (mock *ec2ClientMock) DescribeNatGateways(in1 *ec2.DescribeNatGatewaysInput) (*ec2.DescribeNatGatewaysOutput, error) {
	if mock.DescribeNatGatewaysFunc == nil {
		panic("ec2ClientMock.DescribeNatGatewaysFunc: method is nil but ec2Client.DescribeNatGateways was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeNatGatewaysInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeNatGateways.Lock()
	mock.calls.DescribeNatGateways = append(mock.calls.DescribeNatGateways, callInfo)
	lockec2ClientMockDescribeNatGateways.Unlock()
	return mock.DescribeNatGatewaysFunc(in1)
}

// DescribeNatGatewaysCalls gets all the calls that were made to DescribeNatGateways.
// Check the length with:
//     len(mockedec2Client.DescribeNatGatewaysCalls())
func (mock *ec2ClientMock) DescribeNatGatewaysCalls() []struct {
	In1 *ec2.DescribeNatGatewaysInput
} {
	var calls []struct {
		In1 *ec2.DescribeNatGatewaysInput
	}
	lockec2ClientMockDescribeNatGateways.RLock()
	calls = mock.calls.DescribeNatGateways
	lockec2ClientMockDescribeNatGateways.RUnlock()
	return calls
}

// DescribeNatGatewaysPages calls DescribeNatGatewaysPagesFunc.
func (mock *ec2ClientMock) DescribeNatGatewaysPages(in1 *ec2.DescribeNatGatewaysInput, in2 func(*ec2.DescribeNatGatewaysOutput, bool) bool) error {
	if mock.DescribeNatGatewaysPagesFunc == nil {
		panic("ec2ClientMock.DescribeNatGatewaysPagesFunc: method is nil but ec2Client.DescribeNatGatewaysPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeNatGatewaysInput
		In2 func(*ec2.DescribeNatGatewaysOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeNatGatewaysPages.Lock()
	mock.calls.DescribeNatGatewaysPages = append(mock.calls.DescribeNatGatewaysPages, callInfo)
	lockec2ClientMockDescribeNatGatewaysPages.Unlock()
	return mock.DescribeNatGatewaysPagesFunc(in1, in2)
}

// DescribeNatGatewaysPagesCalls gets all the calls that were made to DescribeNatGatewaysPages.
// Check the length with:
//     len(mockedec2Client.DescribeNatGatewaysPagesCalls())
func (mock *ec2ClientMock) DescribeNatGatewaysPagesCalls() []struct {
	In1 *ec2.DescribeNatGatewaysInput
	In2 func(*ec2.DescribeNatGatewaysOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeNatGatewaysInput
		In2 func(*ec2.DescribeNatGatewaysOutput, bool) bool
	}
	lockec2ClientMockDescribeNatGatewaysPages.RLock()
	calls = mock.calls.DescribeNatGatewaysPages
	lockec2ClientMockDescribeNatGatewaysPages.RUnlock()
	return calls
}

// DescribeNatGatewaysPagesWithContext calls DescribeNatGatewaysPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeNatGatewaysPagesWithContext(in1 context.Context, in2 *ec2.DescribeNatGatewaysInput, in3 func(*ec2.DescribeNatGatewaysOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeNatGatewaysPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeNatGatewaysPagesWithContextFunc: method is nil but ec2Client.DescribeNatGatewaysPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeNatGatewaysInput
		In3 func(*ec2.DescribeNatGatewaysOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeNatGatewaysPagesWithContext.Lock()
	mock.calls.DescribeNatGatewaysPagesWithContext = append(mock.calls.DescribeNatGatewaysPagesWithContext, callInfo)
	lockec2ClientMockDescribeNatGatewaysPagesWithContext.Unlock()
	return mock.DescribeNatGatewaysPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeNatGatewaysPagesWithContextCalls gets all the calls that were made to DescribeNatGatewaysPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeNatGatewaysPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeNatGatewaysPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeNatGatewaysInput
	In3 func(*ec2.DescribeNatGatewaysOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeNatGatewaysInput
		In3 func(*ec2.DescribeNatGatewaysOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeNatGatewaysPagesWithContext.RLock()
	calls = mock.calls.DescribeNatGatewaysPagesWithContext
	lockec2ClientMockDescribeNatGatewaysPagesWithContext.RUnlock()
	return calls
}

// DescribeNatGatewaysRequest calls DescribeNatGatewaysRequestFunc.
func (mock *ec2ClientMock) DescribeNatGatewaysRequest(in1 *ec2.DescribeNatGatewaysInput) (*request.Request, *ec2.DescribeNatGatewaysOutput) {
	if mock.DescribeNatGatewaysRequestFunc == nil {
		panic("ec2ClientMock.DescribeNatGatewaysRequestFunc: method is nil but ec2Client.DescribeNatGatewaysRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeNatGatewaysInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeNatGatewaysRequest.Lock()
	mock.calls.DescribeNatGatewaysRequest = append(mock.calls.DescribeNatGatewaysRequest, callInfo)
	lockec2ClientMockDescribeNatGatewaysRequest.Unlock()
	return mock.DescribeNatGatewaysRequestFunc(in1)
}

// DescribeNatGatewaysRequestCalls gets all the calls that were made to DescribeNatGatewaysRequest.
// Check the length with:
//     len(mockedec2Client.DescribeNatGatewaysRequestCalls())
func (mock *ec2ClientMock) DescribeNatGatewaysRequestCalls() []struct {
	In1 *ec2.DescribeNatGatewaysInput
} {
	var calls []struct {
		In1 *ec2.DescribeNatGatewaysInput
	}
	lockec2ClientMockDescribeNatGatewaysRequest.RLock()
	calls = mock.calls.DescribeNatGatewaysRequest
	lockec2ClientMockDescribeNatGatewaysRequest.RUnlock()
	return calls
}

// DescribeNatGatewaysWithContext calls DescribeNatGatewaysWithContextFunc.
func (mock *ec2ClientMock) DescribeNatGatewaysWithContext(in1 context.Context, in2 *ec2.DescribeNatGatewaysInput, in3 ...request.Option) (*ec2.DescribeNatGatewaysOutput, error) {
	if mock.DescribeNatGatewaysWithContextFunc == nil {
		panic("ec2ClientMock.DescribeNatGatewaysWithContextFunc: method is nil but ec2Client.DescribeNatGatewaysWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeNatGatewaysInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeNatGatewaysWithContext.Lock()
	mock.calls.DescribeNatGatewaysWithContext = append(mock.calls.DescribeNatGatewaysWithContext, callInfo)
	lockec2ClientMockDescribeNatGatewaysWithContext.Unlock()
	return mock.DescribeNatGatewaysWithContextFunc(in1, in2, in3...)
}

// DescribeNatGatewaysWithContextCalls gets all the calls that were made to DescribeNatGatewaysWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeNatGatewaysWithContextCalls())
func (mock *ec2ClientMock) DescribeNatGatewaysWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeNatGatewaysInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeNatGatewaysInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeNatGatewaysWithContext.RLock()
	calls = mock.calls.DescribeNatGatewaysWithContext
	lockec2ClientMockDescribeNatGatewaysWithContext.RUnlock()
	return calls
}

// DescribeNetworkAcls calls DescribeNetworkAclsFunc.
func (mock *ec2ClientMock) DescribeNetworkAcls(in1 *ec2.DescribeNetworkAclsInput) (*ec2.DescribeNetworkAclsOutput, error) {
	if mock.DescribeNetworkAclsFunc == nil {
		panic("ec2ClientMock.DescribeNetworkAclsFunc: method is nil but ec2Client.DescribeNetworkAcls was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeNetworkAclsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeNetworkAcls.Lock()
	mock.calls.DescribeNetworkAcls = append(mock.calls.DescribeNetworkAcls, callInfo)
	lockec2ClientMockDescribeNetworkAcls.Unlock()
	return mock.DescribeNetworkAclsFunc(in1)
}

// DescribeNetworkAclsCalls gets all the calls that were made to DescribeNetworkAcls.
// Check the length with:
//     len(mockedec2Client.DescribeNetworkAclsCalls())
func (mock *ec2ClientMock) DescribeNetworkAclsCalls() []struct {
	In1 *ec2.DescribeNetworkAclsInput
} {
	var calls []struct {
		In1 *ec2.DescribeNetworkAclsInput
	}
	lockec2ClientMockDescribeNetworkAcls.RLock()
	calls = mock.calls.DescribeNetworkAcls
	lockec2ClientMockDescribeNetworkAcls.RUnlock()
	return calls
}

// DescribeNetworkAclsPages calls DescribeNetworkAclsPagesFunc.
func (mock *ec2ClientMock) DescribeNetworkAclsPages(in1 *ec2.DescribeNetworkAclsInput, in2 func(*ec2.DescribeNetworkAclsOutput, bool) bool) error {
	if mock.DescribeNetworkAclsPagesFunc == nil {
		panic("ec2ClientMock.DescribeNetworkAclsPagesFunc: method is nil but ec2Client.DescribeNetworkAclsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeNetworkAclsInput
		In2 func(*ec2.DescribeNetworkAclsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeNetworkAclsPages.Lock()
	mock.calls.DescribeNetworkAclsPages = append(mock.calls.DescribeNetworkAclsPages, callInfo)
	lockec2ClientMockDescribeNetworkAclsPages.Unlock()
	return mock.DescribeNetworkAclsPagesFunc(in1, in2)
}

// DescribeNetworkAclsPagesCalls gets all the calls that were made to DescribeNetworkAclsPages.
// Check the length with:
//     len(mockedec2Client.DescribeNetworkAclsPagesCalls())
func (mock *ec2ClientMock) DescribeNetworkAclsPagesCalls() []struct {
	In1 *ec2.DescribeNetworkAclsInput
	In2 func(*ec2.DescribeNetworkAclsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeNetworkAclsInput
		In2 func(*ec2.DescribeNetworkAclsOutput, bool) bool
	}
	lockec2ClientMockDescribeNetworkAclsPages.RLock()
	calls = mock.calls.DescribeNetworkAclsPages
	lockec2ClientMockDescribeNetworkAclsPages.RUnlock()
	return calls
}

// DescribeNetworkAclsPagesWithContext calls DescribeNetworkAclsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeNetworkAclsPagesWithContext(in1 context.Context, in2 *ec2.DescribeNetworkAclsInput, in3 func(*ec2.DescribeNetworkAclsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeNetworkAclsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeNetworkAclsPagesWithContextFunc: method is nil but ec2Client.DescribeNetworkAclsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeNetworkAclsInput
		In3 func(*ec2.DescribeNetworkAclsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeNetworkAclsPagesWithContext.Lock()
	mock.calls.DescribeNetworkAclsPagesWithContext = append(mock.calls.DescribeNetworkAclsPagesWithContext, callInfo)
	lockec2ClientMockDescribeNetworkAclsPagesWithContext.Unlock()
	return mock.DescribeNetworkAclsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeNetworkAclsPagesWithContextCalls gets all the calls that were made to DescribeNetworkAclsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeNetworkAclsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeNetworkAclsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeNetworkAclsInput
	In3 func(*ec2.DescribeNetworkAclsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeNetworkAclsInput
		In3 func(*ec2.DescribeNetworkAclsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeNetworkAclsPagesWithContext.RLock()
	calls = mock.calls.DescribeNetworkAclsPagesWithContext
	lockec2ClientMockDescribeNetworkAclsPagesWithContext.RUnlock()
	return calls
}

// DescribeNetworkAclsRequest calls DescribeNetworkAclsRequestFunc.
func (mock *ec2ClientMock) DescribeNetworkAclsRequest(in1 *ec2.DescribeNetworkAclsInput) (*request.Request, *ec2.DescribeNetworkAclsOutput) {
	if mock.DescribeNetworkAclsRequestFunc == nil {
		panic("ec2ClientMock.DescribeNetworkAclsRequestFunc: method is nil but ec2Client.DescribeNetworkAclsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeNetworkAclsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeNetworkAclsRequest.Lock()
	mock.calls.DescribeNetworkAclsRequest = append(mock.calls.DescribeNetworkAclsRequest, callInfo)
	lockec2ClientMockDescribeNetworkAclsRequest.Unlock()
	return mock.DescribeNetworkAclsRequestFunc(in1)
}

// DescribeNetworkAclsRequestCalls gets all the calls that were made to DescribeNetworkAclsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeNetworkAclsRequestCalls())
func (mock *ec2ClientMock) DescribeNetworkAclsRequestCalls() []struct {
	In1 *ec2.DescribeNetworkAclsInput
} {
	var calls []struct {
		In1 *ec2.DescribeNetworkAclsInput
	}
	lockec2ClientMockDescribeNetworkAclsRequest.RLock()
	calls = mock.calls.DescribeNetworkAclsRequest
	lockec2ClientMockDescribeNetworkAclsRequest.RUnlock()
	return calls
}

// DescribeNetworkAclsWithContext calls DescribeNetworkAclsWithContextFunc.
func (mock *ec2ClientMock) DescribeNetworkAclsWithContext(in1 context.Context, in2 *ec2.DescribeNetworkAclsInput, in3 ...request.Option) (*ec2.DescribeNetworkAclsOutput, error) {
	if mock.DescribeNetworkAclsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeNetworkAclsWithContextFunc: method is nil but ec2Client.DescribeNetworkAclsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeNetworkAclsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeNetworkAclsWithContext.Lock()
	mock.calls.DescribeNetworkAclsWithContext = append(mock.calls.DescribeNetworkAclsWithContext, callInfo)
	lockec2ClientMockDescribeNetworkAclsWithContext.Unlock()
	return mock.DescribeNetworkAclsWithContextFunc(in1, in2, in3...)
}

// DescribeNetworkAclsWithContextCalls gets all the calls that were made to DescribeNetworkAclsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeNetworkAclsWithContextCalls())
func (mock *ec2ClientMock) DescribeNetworkAclsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeNetworkAclsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeNetworkAclsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeNetworkAclsWithContext.RLock()
	calls = mock.calls.DescribeNetworkAclsWithContext
	lockec2ClientMockDescribeNetworkAclsWithContext.RUnlock()
	return calls
}

// DescribeNetworkInterfaceAttribute calls DescribeNetworkInterfaceAttributeFunc.
func (mock *ec2ClientMock) DescribeNetworkInterfaceAttribute(in1 *ec2.DescribeNetworkInterfaceAttributeInput) (*ec2.DescribeNetworkInterfaceAttributeOutput, error) {
	if mock.DescribeNetworkInterfaceAttributeFunc == nil {
		panic("ec2ClientMock.DescribeNetworkInterfaceAttributeFunc: method is nil but ec2Client.DescribeNetworkInterfaceAttribute was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeNetworkInterfaceAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeNetworkInterfaceAttribute.Lock()
	mock.calls.DescribeNetworkInterfaceAttribute = append(mock.calls.DescribeNetworkInterfaceAttribute, callInfo)
	lockec2ClientMockDescribeNetworkInterfaceAttribute.Unlock()
	return mock.DescribeNetworkInterfaceAttributeFunc(in1)
}

// DescribeNetworkInterfaceAttributeCalls gets all the calls that were made to DescribeNetworkInterfaceAttribute.
// Check the length with:
//     len(mockedec2Client.DescribeNetworkInterfaceAttributeCalls())
func (mock *ec2ClientMock) DescribeNetworkInterfaceAttributeCalls() []struct {
	In1 *ec2.DescribeNetworkInterfaceAttributeInput
} {
	var calls []struct {
		In1 *ec2.DescribeNetworkInterfaceAttributeInput
	}
	lockec2ClientMockDescribeNetworkInterfaceAttribute.RLock()
	calls = mock.calls.DescribeNetworkInterfaceAttribute
	lockec2ClientMockDescribeNetworkInterfaceAttribute.RUnlock()
	return calls
}

// DescribeNetworkInterfaceAttributeRequest calls DescribeNetworkInterfaceAttributeRequestFunc.
func (mock *ec2ClientMock) DescribeNetworkInterfaceAttributeRequest(in1 *ec2.DescribeNetworkInterfaceAttributeInput) (*request.Request, *ec2.DescribeNetworkInterfaceAttributeOutput) {
	if mock.DescribeNetworkInterfaceAttributeRequestFunc == nil {
		panic("ec2ClientMock.DescribeNetworkInterfaceAttributeRequestFunc: method is nil but ec2Client.DescribeNetworkInterfaceAttributeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeNetworkInterfaceAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeNetworkInterfaceAttributeRequest.Lock()
	mock.calls.DescribeNetworkInterfaceAttributeRequest = append(mock.calls.DescribeNetworkInterfaceAttributeRequest, callInfo)
	lockec2ClientMockDescribeNetworkInterfaceAttributeRequest.Unlock()
	return mock.DescribeNetworkInterfaceAttributeRequestFunc(in1)
}

// DescribeNetworkInterfaceAttributeRequestCalls gets all the calls that were made to DescribeNetworkInterfaceAttributeRequest.
// Check the length with:
//     len(mockedec2Client.DescribeNetworkInterfaceAttributeRequestCalls())
func (mock *ec2ClientMock) DescribeNetworkInterfaceAttributeRequestCalls() []struct {
	In1 *ec2.DescribeNetworkInterfaceAttributeInput
} {
	var calls []struct {
		In1 *ec2.DescribeNetworkInterfaceAttributeInput
	}
	lockec2ClientMockDescribeNetworkInterfaceAttributeRequest.RLock()
	calls = mock.calls.DescribeNetworkInterfaceAttributeRequest
	lockec2ClientMockDescribeNetworkInterfaceAttributeRequest.RUnlock()
	return calls
}

// DescribeNetworkInterfaceAttributeWithContext calls DescribeNetworkInterfaceAttributeWithContextFunc.
func (mock *ec2ClientMock) DescribeNetworkInterfaceAttributeWithContext(in1 context.Context, in2 *ec2.DescribeNetworkInterfaceAttributeInput, in3 ...request.Option) (*ec2.DescribeNetworkInterfaceAttributeOutput, error) {
	if mock.DescribeNetworkInterfaceAttributeWithContextFunc == nil {
		panic("ec2ClientMock.DescribeNetworkInterfaceAttributeWithContextFunc: method is nil but ec2Client.DescribeNetworkInterfaceAttributeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeNetworkInterfaceAttributeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeNetworkInterfaceAttributeWithContext.Lock()
	mock.calls.DescribeNetworkInterfaceAttributeWithContext = append(mock.calls.DescribeNetworkInterfaceAttributeWithContext, callInfo)
	lockec2ClientMockDescribeNetworkInterfaceAttributeWithContext.Unlock()
	return mock.DescribeNetworkInterfaceAttributeWithContextFunc(in1, in2, in3...)
}

// DescribeNetworkInterfaceAttributeWithContextCalls gets all the calls that were made to DescribeNetworkInterfaceAttributeWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeNetworkInterfaceAttributeWithContextCalls())
func (mock *ec2ClientMock) DescribeNetworkInterfaceAttributeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeNetworkInterfaceAttributeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeNetworkInterfaceAttributeInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeNetworkInterfaceAttributeWithContext.RLock()
	calls = mock.calls.DescribeNetworkInterfaceAttributeWithContext
	lockec2ClientMockDescribeNetworkInterfaceAttributeWithContext.RUnlock()
	return calls
}

// DescribeNetworkInterfacePermissions calls DescribeNetworkInterfacePermissionsFunc.
func (mock *ec2ClientMock) DescribeNetworkInterfacePermissions(in1 *ec2.DescribeNetworkInterfacePermissionsInput) (*ec2.DescribeNetworkInterfacePermissionsOutput, error) {
	if mock.DescribeNetworkInterfacePermissionsFunc == nil {
		panic("ec2ClientMock.DescribeNetworkInterfacePermissionsFunc: method is nil but ec2Client.DescribeNetworkInterfacePermissions was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeNetworkInterfacePermissionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeNetworkInterfacePermissions.Lock()
	mock.calls.DescribeNetworkInterfacePermissions = append(mock.calls.DescribeNetworkInterfacePermissions, callInfo)
	lockec2ClientMockDescribeNetworkInterfacePermissions.Unlock()
	return mock.DescribeNetworkInterfacePermissionsFunc(in1)
}

// DescribeNetworkInterfacePermissionsCalls gets all the calls that were made to DescribeNetworkInterfacePermissions.
// Check the length with:
//     len(mockedec2Client.DescribeNetworkInterfacePermissionsCalls())
func (mock *ec2ClientMock) DescribeNetworkInterfacePermissionsCalls() []struct {
	In1 *ec2.DescribeNetworkInterfacePermissionsInput
} {
	var calls []struct {
		In1 *ec2.DescribeNetworkInterfacePermissionsInput
	}
	lockec2ClientMockDescribeNetworkInterfacePermissions.RLock()
	calls = mock.calls.DescribeNetworkInterfacePermissions
	lockec2ClientMockDescribeNetworkInterfacePermissions.RUnlock()
	return calls
}

// DescribeNetworkInterfacePermissionsPages calls DescribeNetworkInterfacePermissionsPagesFunc.
func (mock *ec2ClientMock) DescribeNetworkInterfacePermissionsPages(in1 *ec2.DescribeNetworkInterfacePermissionsInput, in2 func(*ec2.DescribeNetworkInterfacePermissionsOutput, bool) bool) error {
	if mock.DescribeNetworkInterfacePermissionsPagesFunc == nil {
		panic("ec2ClientMock.DescribeNetworkInterfacePermissionsPagesFunc: method is nil but ec2Client.DescribeNetworkInterfacePermissionsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeNetworkInterfacePermissionsInput
		In2 func(*ec2.DescribeNetworkInterfacePermissionsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeNetworkInterfacePermissionsPages.Lock()
	mock.calls.DescribeNetworkInterfacePermissionsPages = append(mock.calls.DescribeNetworkInterfacePermissionsPages, callInfo)
	lockec2ClientMockDescribeNetworkInterfacePermissionsPages.Unlock()
	return mock.DescribeNetworkInterfacePermissionsPagesFunc(in1, in2)
}

// DescribeNetworkInterfacePermissionsPagesCalls gets all the calls that were made to DescribeNetworkInterfacePermissionsPages.
// Check the length with:
//     len(mockedec2Client.DescribeNetworkInterfacePermissionsPagesCalls())
func (mock *ec2ClientMock) DescribeNetworkInterfacePermissionsPagesCalls() []struct {
	In1 *ec2.DescribeNetworkInterfacePermissionsInput
	In2 func(*ec2.DescribeNetworkInterfacePermissionsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeNetworkInterfacePermissionsInput
		In2 func(*ec2.DescribeNetworkInterfacePermissionsOutput, bool) bool
	}
	lockec2ClientMockDescribeNetworkInterfacePermissionsPages.RLock()
	calls = mock.calls.DescribeNetworkInterfacePermissionsPages
	lockec2ClientMockDescribeNetworkInterfacePermissionsPages.RUnlock()
	return calls
}

// DescribeNetworkInterfacePermissionsPagesWithContext calls DescribeNetworkInterfacePermissionsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeNetworkInterfacePermissionsPagesWithContext(in1 context.Context, in2 *ec2.DescribeNetworkInterfacePermissionsInput, in3 func(*ec2.DescribeNetworkInterfacePermissionsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeNetworkInterfacePermissionsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeNetworkInterfacePermissionsPagesWithContextFunc: method is nil but ec2Client.DescribeNetworkInterfacePermissionsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeNetworkInterfacePermissionsInput
		In3 func(*ec2.DescribeNetworkInterfacePermissionsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeNetworkInterfacePermissionsPagesWithContext.Lock()
	mock.calls.DescribeNetworkInterfacePermissionsPagesWithContext = append(mock.calls.DescribeNetworkInterfacePermissionsPagesWithContext, callInfo)
	lockec2ClientMockDescribeNetworkInterfacePermissionsPagesWithContext.Unlock()
	return mock.DescribeNetworkInterfacePermissionsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeNetworkInterfacePermissionsPagesWithContextCalls gets all the calls that were made to DescribeNetworkInterfacePermissionsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeNetworkInterfacePermissionsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeNetworkInterfacePermissionsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeNetworkInterfacePermissionsInput
	In3 func(*ec2.DescribeNetworkInterfacePermissionsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeNetworkInterfacePermissionsInput
		In3 func(*ec2.DescribeNetworkInterfacePermissionsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeNetworkInterfacePermissionsPagesWithContext.RLock()
	calls = mock.calls.DescribeNetworkInterfacePermissionsPagesWithContext
	lockec2ClientMockDescribeNetworkInterfacePermissionsPagesWithContext.RUnlock()
	return calls
}

// DescribeNetworkInterfacePermissionsRequest calls DescribeNetworkInterfacePermissionsRequestFunc.
func (mock *ec2ClientMock) DescribeNetworkInterfacePermissionsRequest(in1 *ec2.DescribeNetworkInterfacePermissionsInput) (*request.Request, *ec2.DescribeNetworkInterfacePermissionsOutput) {
	if mock.DescribeNetworkInterfacePermissionsRequestFunc == nil {
		panic("ec2ClientMock.DescribeNetworkInterfacePermissionsRequestFunc: method is nil but ec2Client.DescribeNetworkInterfacePermissionsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeNetworkInterfacePermissionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeNetworkInterfacePermissionsRequest.Lock()
	mock.calls.DescribeNetworkInterfacePermissionsRequest = append(mock.calls.DescribeNetworkInterfacePermissionsRequest, callInfo)
	lockec2ClientMockDescribeNetworkInterfacePermissionsRequest.Unlock()
	return mock.DescribeNetworkInterfacePermissionsRequestFunc(in1)
}

// DescribeNetworkInterfacePermissionsRequestCalls gets all the calls that were made to DescribeNetworkInterfacePermissionsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeNetworkInterfacePermissionsRequestCalls())
func (mock *ec2ClientMock) DescribeNetworkInterfacePermissionsRequestCalls() []struct {
	In1 *ec2.DescribeNetworkInterfacePermissionsInput
} {
	var calls []struct {
		In1 *ec2.DescribeNetworkInterfacePermissionsInput
	}
	lockec2ClientMockDescribeNetworkInterfacePermissionsRequest.RLock()
	calls = mock.calls.DescribeNetworkInterfacePermissionsRequest
	lockec2ClientMockDescribeNetworkInterfacePermissionsRequest.RUnlock()
	return calls
}

// DescribeNetworkInterfacePermissionsWithContext calls DescribeNetworkInterfacePermissionsWithContextFunc.
func (mock *ec2ClientMock) DescribeNetworkInterfacePermissionsWithContext(in1 context.Context, in2 *ec2.DescribeNetworkInterfacePermissionsInput, in3 ...request.Option) (*ec2.DescribeNetworkInterfacePermissionsOutput, error) {
	if mock.DescribeNetworkInterfacePermissionsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeNetworkInterfacePermissionsWithContextFunc: method is nil but ec2Client.DescribeNetworkInterfacePermissionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeNetworkInterfacePermissionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeNetworkInterfacePermissionsWithContext.Lock()
	mock.calls.DescribeNetworkInterfacePermissionsWithContext = append(mock.calls.DescribeNetworkInterfacePermissionsWithContext, callInfo)
	lockec2ClientMockDescribeNetworkInterfacePermissionsWithContext.Unlock()
	return mock.DescribeNetworkInterfacePermissionsWithContextFunc(in1, in2, in3...)
}

// DescribeNetworkInterfacePermissionsWithContextCalls gets all the calls that were made to DescribeNetworkInterfacePermissionsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeNetworkInterfacePermissionsWithContextCalls())
func (mock *ec2ClientMock) DescribeNetworkInterfacePermissionsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeNetworkInterfacePermissionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeNetworkInterfacePermissionsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeNetworkInterfacePermissionsWithContext.RLock()
	calls = mock.calls.DescribeNetworkInterfacePermissionsWithContext
	lockec2ClientMockDescribeNetworkInterfacePermissionsWithContext.RUnlock()
	return calls
}

// DescribeNetworkInterfaces calls DescribeNetworkInterfacesFunc.
func (mock *ec2ClientMock) DescribeNetworkInterfaces(in1 *ec2.DescribeNetworkInterfacesInput) (*ec2.DescribeNetworkInterfacesOutput, error) {
	if mock.DescribeNetworkInterfacesFunc == nil {
		panic("ec2ClientMock.DescribeNetworkInterfacesFunc: method is nil but ec2Client.DescribeNetworkInterfaces was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeNetworkInterfacesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeNetworkInterfaces.Lock()
	mock.calls.DescribeNetworkInterfaces = append(mock.calls.DescribeNetworkInterfaces, callInfo)
	lockec2ClientMockDescribeNetworkInterfaces.Unlock()
	return mock.DescribeNetworkInterfacesFunc(in1)
}

// DescribeNetworkInterfacesCalls gets all the calls that were made to DescribeNetworkInterfaces.
// Check the length with:
//     len(mockedec2Client.DescribeNetworkInterfacesCalls())
func (mock *ec2ClientMock) DescribeNetworkInterfacesCalls() []struct {
	In1 *ec2.DescribeNetworkInterfacesInput
} {
	var calls []struct {
		In1 *ec2.DescribeNetworkInterfacesInput
	}
	lockec2ClientMockDescribeNetworkInterfaces.RLock()
	calls = mock.calls.DescribeNetworkInterfaces
	lockec2ClientMockDescribeNetworkInterfaces.RUnlock()
	return calls
}

// DescribeNetworkInterfacesPages calls DescribeNetworkInterfacesPagesFunc.
func (mock *ec2ClientMock) DescribeNetworkInterfacesPages(in1 *ec2.DescribeNetworkInterfacesInput, in2 func(*ec2.DescribeNetworkInterfacesOutput, bool) bool) error {
	if mock.DescribeNetworkInterfacesPagesFunc == nil {
		panic("ec2ClientMock.DescribeNetworkInterfacesPagesFunc: method is nil but ec2Client.DescribeNetworkInterfacesPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeNetworkInterfacesInput
		In2 func(*ec2.DescribeNetworkInterfacesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeNetworkInterfacesPages.Lock()
	mock.calls.DescribeNetworkInterfacesPages = append(mock.calls.DescribeNetworkInterfacesPages, callInfo)
	lockec2ClientMockDescribeNetworkInterfacesPages.Unlock()
	return mock.DescribeNetworkInterfacesPagesFunc(in1, in2)
}

// DescribeNetworkInterfacesPagesCalls gets all the calls that were made to DescribeNetworkInterfacesPages.
// Check the length with:
//     len(mockedec2Client.DescribeNetworkInterfacesPagesCalls())
func (mock *ec2ClientMock) DescribeNetworkInterfacesPagesCalls() []struct {
	In1 *ec2.DescribeNetworkInterfacesInput
	In2 func(*ec2.DescribeNetworkInterfacesOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeNetworkInterfacesInput
		In2 func(*ec2.DescribeNetworkInterfacesOutput, bool) bool
	}
	lockec2ClientMockDescribeNetworkInterfacesPages.RLock()
	calls = mock.calls.DescribeNetworkInterfacesPages
	lockec2ClientMockDescribeNetworkInterfacesPages.RUnlock()
	return calls
}

// DescribeNetworkInterfacesPagesWithContext calls DescribeNetworkInterfacesPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeNetworkInterfacesPagesWithContext(in1 context.Context, in2 *ec2.DescribeNetworkInterfacesInput, in3 func(*ec2.DescribeNetworkInterfacesOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeNetworkInterfacesPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeNetworkInterfacesPagesWithContextFunc: method is nil but ec2Client.DescribeNetworkInterfacesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeNetworkInterfacesInput
		In3 func(*ec2.DescribeNetworkInterfacesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeNetworkInterfacesPagesWithContext.Lock()
	mock.calls.DescribeNetworkInterfacesPagesWithContext = append(mock.calls.DescribeNetworkInterfacesPagesWithContext, callInfo)
	lockec2ClientMockDescribeNetworkInterfacesPagesWithContext.Unlock()
	return mock.DescribeNetworkInterfacesPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeNetworkInterfacesPagesWithContextCalls gets all the calls that were made to DescribeNetworkInterfacesPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeNetworkInterfacesPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeNetworkInterfacesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeNetworkInterfacesInput
	In3 func(*ec2.DescribeNetworkInterfacesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeNetworkInterfacesInput
		In3 func(*ec2.DescribeNetworkInterfacesOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeNetworkInterfacesPagesWithContext.RLock()
	calls = mock.calls.DescribeNetworkInterfacesPagesWithContext
	lockec2ClientMockDescribeNetworkInterfacesPagesWithContext.RUnlock()
	return calls
}

// DescribeNetworkInterfacesRequest calls DescribeNetworkInterfacesRequestFunc.
func (mock *ec2ClientMock) DescribeNetworkInterfacesRequest(in1 *ec2.DescribeNetworkInterfacesInput) (*request.Request, *ec2.DescribeNetworkInterfacesOutput) {
	if mock.DescribeNetworkInterfacesRequestFunc == nil {
		panic("ec2ClientMock.DescribeNetworkInterfacesRequestFunc: method is nil but ec2Client.DescribeNetworkInterfacesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeNetworkInterfacesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeNetworkInterfacesRequest.Lock()
	mock.calls.DescribeNetworkInterfacesRequest = append(mock.calls.DescribeNetworkInterfacesRequest, callInfo)
	lockec2ClientMockDescribeNetworkInterfacesRequest.Unlock()
	return mock.DescribeNetworkInterfacesRequestFunc(in1)
}

// DescribeNetworkInterfacesRequestCalls gets all the calls that were made to DescribeNetworkInterfacesRequest.
// Check the length with:
//     len(mockedec2Client.DescribeNetworkInterfacesRequestCalls())
func (mock *ec2ClientMock) DescribeNetworkInterfacesRequestCalls() []struct {
	In1 *ec2.DescribeNetworkInterfacesInput
} {
	var calls []struct {
		In1 *ec2.DescribeNetworkInterfacesInput
	}
	lockec2ClientMockDescribeNetworkInterfacesRequest.RLock()
	calls = mock.calls.DescribeNetworkInterfacesRequest
	lockec2ClientMockDescribeNetworkInterfacesRequest.RUnlock()
	return calls
}

// DescribeNetworkInterfacesWithContext calls DescribeNetworkInterfacesWithContextFunc.
func (mock *ec2ClientMock) DescribeNetworkInterfacesWithContext(in1 context.Context, in2 *ec2.DescribeNetworkInterfacesInput, in3 ...request.Option) (*ec2.DescribeNetworkInterfacesOutput, error) {
	if mock.DescribeNetworkInterfacesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeNetworkInterfacesWithContextFunc: method is nil but ec2Client.DescribeNetworkInterfacesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeNetworkInterfacesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeNetworkInterfacesWithContext.Lock()
	mock.calls.DescribeNetworkInterfacesWithContext = append(mock.calls.DescribeNetworkInterfacesWithContext, callInfo)
	lockec2ClientMockDescribeNetworkInterfacesWithContext.Unlock()
	return mock.DescribeNetworkInterfacesWithContextFunc(in1, in2, in3...)
}

// DescribeNetworkInterfacesWithContextCalls gets all the calls that were made to DescribeNetworkInterfacesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeNetworkInterfacesWithContextCalls())
func (mock *ec2ClientMock) DescribeNetworkInterfacesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeNetworkInterfacesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeNetworkInterfacesInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeNetworkInterfacesWithContext.RLock()
	calls = mock.calls.DescribeNetworkInterfacesWithContext
	lockec2ClientMockDescribeNetworkInterfacesWithContext.RUnlock()
	return calls
}

// DescribePlacementGroups calls DescribePlacementGroupsFunc.
func (mock *ec2ClientMock) DescribePlacementGroups(in1 *ec2.DescribePlacementGroupsInput) (*ec2.DescribePlacementGroupsOutput, error) {
	if mock.DescribePlacementGroupsFunc == nil {
		panic("ec2ClientMock.DescribePlacementGroupsFunc: method is nil but ec2Client.DescribePlacementGroups was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribePlacementGroupsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribePlacementGroups.Lock()
	mock.calls.DescribePlacementGroups = append(mock.calls.DescribePlacementGroups, callInfo)
	lockec2ClientMockDescribePlacementGroups.Unlock()
	return mock.DescribePlacementGroupsFunc(in1)
}

// DescribePlacementGroupsCalls gets all the calls that were made to DescribePlacementGroups.
// Check the length with:
//     len(mockedec2Client.DescribePlacementGroupsCalls())
func (mock *ec2ClientMock) DescribePlacementGroupsCalls() []struct {
	In1 *ec2.DescribePlacementGroupsInput
} {
	var calls []struct {
		In1 *ec2.DescribePlacementGroupsInput
	}
	lockec2ClientMockDescribePlacementGroups.RLock()
	calls = mock.calls.DescribePlacementGroups
	lockec2ClientMockDescribePlacementGroups.RUnlock()
	return calls
}

// DescribePlacementGroupsRequest calls DescribePlacementGroupsRequestFunc.
func (mock *ec2ClientMock) DescribePlacementGroupsRequest(in1 *ec2.DescribePlacementGroupsInput) (*request.Request, *ec2.DescribePlacementGroupsOutput) {
	if mock.DescribePlacementGroupsRequestFunc == nil {
		panic("ec2ClientMock.DescribePlacementGroupsRequestFunc: method is nil but ec2Client.DescribePlacementGroupsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribePlacementGroupsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribePlacementGroupsRequest.Lock()
	mock.calls.DescribePlacementGroupsRequest = append(mock.calls.DescribePlacementGroupsRequest, callInfo)
	lockec2ClientMockDescribePlacementGroupsRequest.Unlock()
	return mock.DescribePlacementGroupsRequestFunc(in1)
}

// DescribePlacementGroupsRequestCalls gets all the calls that were made to DescribePlacementGroupsRequest.
// Check the length with:
//     len(mockedec2Client.DescribePlacementGroupsRequestCalls())
func (mock *ec2ClientMock) DescribePlacementGroupsRequestCalls() []struct {
	In1 *ec2.DescribePlacementGroupsInput
} {
	var calls []struct {
		In1 *ec2.DescribePlacementGroupsInput
	}
	lockec2ClientMockDescribePlacementGroupsRequest.RLock()
	calls = mock.calls.DescribePlacementGroupsRequest
	lockec2ClientMockDescribePlacementGroupsRequest.RUnlock()
	return calls
}

// DescribePlacementGroupsWithContext calls DescribePlacementGroupsWithContextFunc.
func (mock *ec2ClientMock) DescribePlacementGroupsWithContext(in1 context.Context, in2 *ec2.DescribePlacementGroupsInput, in3 ...request.Option) (*ec2.DescribePlacementGroupsOutput, error) {
	if mock.DescribePlacementGroupsWithContextFunc == nil {
		panic("ec2ClientMock.DescribePlacementGroupsWithContextFunc: method is nil but ec2Client.DescribePlacementGroupsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribePlacementGroupsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribePlacementGroupsWithContext.Lock()
	mock.calls.DescribePlacementGroupsWithContext = append(mock.calls.DescribePlacementGroupsWithContext, callInfo)
	lockec2ClientMockDescribePlacementGroupsWithContext.Unlock()
	return mock.DescribePlacementGroupsWithContextFunc(in1, in2, in3...)
}

// DescribePlacementGroupsWithContextCalls gets all the calls that were made to DescribePlacementGroupsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribePlacementGroupsWithContextCalls())
func (mock *ec2ClientMock) DescribePlacementGroupsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribePlacementGroupsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribePlacementGroupsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribePlacementGroupsWithContext.RLock()
	calls = mock.calls.DescribePlacementGroupsWithContext
	lockec2ClientMockDescribePlacementGroupsWithContext.RUnlock()
	return calls
}

// DescribePrefixLists calls DescribePrefixListsFunc.
func (mock *ec2ClientMock) DescribePrefixLists(in1 *ec2.DescribePrefixListsInput) (*ec2.DescribePrefixListsOutput, error) {
	if mock.DescribePrefixListsFunc == nil {
		panic("ec2ClientMock.DescribePrefixListsFunc: method is nil but ec2Client.DescribePrefixLists was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribePrefixListsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribePrefixLists.Lock()
	mock.calls.DescribePrefixLists = append(mock.calls.DescribePrefixLists, callInfo)
	lockec2ClientMockDescribePrefixLists.Unlock()
	return mock.DescribePrefixListsFunc(in1)
}

// DescribePrefixListsCalls gets all the calls that were made to DescribePrefixLists.
// Check the length with:
//     len(mockedec2Client.DescribePrefixListsCalls())
func (mock *ec2ClientMock) DescribePrefixListsCalls() []struct {
	In1 *ec2.DescribePrefixListsInput
} {
	var calls []struct {
		In1 *ec2.DescribePrefixListsInput
	}
	lockec2ClientMockDescribePrefixLists.RLock()
	calls = mock.calls.DescribePrefixLists
	lockec2ClientMockDescribePrefixLists.RUnlock()
	return calls
}

// DescribePrefixListsPages calls DescribePrefixListsPagesFunc.
func (mock *ec2ClientMock) DescribePrefixListsPages(in1 *ec2.DescribePrefixListsInput, in2 func(*ec2.DescribePrefixListsOutput, bool) bool) error {
	if mock.DescribePrefixListsPagesFunc == nil {
		panic("ec2ClientMock.DescribePrefixListsPagesFunc: method is nil but ec2Client.DescribePrefixListsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribePrefixListsInput
		In2 func(*ec2.DescribePrefixListsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribePrefixListsPages.Lock()
	mock.calls.DescribePrefixListsPages = append(mock.calls.DescribePrefixListsPages, callInfo)
	lockec2ClientMockDescribePrefixListsPages.Unlock()
	return mock.DescribePrefixListsPagesFunc(in1, in2)
}

// DescribePrefixListsPagesCalls gets all the calls that were made to DescribePrefixListsPages.
// Check the length with:
//     len(mockedec2Client.DescribePrefixListsPagesCalls())
func (mock *ec2ClientMock) DescribePrefixListsPagesCalls() []struct {
	In1 *ec2.DescribePrefixListsInput
	In2 func(*ec2.DescribePrefixListsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribePrefixListsInput
		In2 func(*ec2.DescribePrefixListsOutput, bool) bool
	}
	lockec2ClientMockDescribePrefixListsPages.RLock()
	calls = mock.calls.DescribePrefixListsPages
	lockec2ClientMockDescribePrefixListsPages.RUnlock()
	return calls
}

// DescribePrefixListsPagesWithContext calls DescribePrefixListsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribePrefixListsPagesWithContext(in1 context.Context, in2 *ec2.DescribePrefixListsInput, in3 func(*ec2.DescribePrefixListsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribePrefixListsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribePrefixListsPagesWithContextFunc: method is nil but ec2Client.DescribePrefixListsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribePrefixListsInput
		In3 func(*ec2.DescribePrefixListsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribePrefixListsPagesWithContext.Lock()
	mock.calls.DescribePrefixListsPagesWithContext = append(mock.calls.DescribePrefixListsPagesWithContext, callInfo)
	lockec2ClientMockDescribePrefixListsPagesWithContext.Unlock()
	return mock.DescribePrefixListsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribePrefixListsPagesWithContextCalls gets all the calls that were made to DescribePrefixListsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribePrefixListsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribePrefixListsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribePrefixListsInput
	In3 func(*ec2.DescribePrefixListsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribePrefixListsInput
		In3 func(*ec2.DescribePrefixListsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribePrefixListsPagesWithContext.RLock()
	calls = mock.calls.DescribePrefixListsPagesWithContext
	lockec2ClientMockDescribePrefixListsPagesWithContext.RUnlock()
	return calls
}

// DescribePrefixListsRequest calls DescribePrefixListsRequestFunc.
func (mock *ec2ClientMock) DescribePrefixListsRequest(in1 *ec2.DescribePrefixListsInput) (*request.Request, *ec2.DescribePrefixListsOutput) {
	if mock.DescribePrefixListsRequestFunc == nil {
		panic("ec2ClientMock.DescribePrefixListsRequestFunc: method is nil but ec2Client.DescribePrefixListsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribePrefixListsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribePrefixListsRequest.Lock()
	mock.calls.DescribePrefixListsRequest = append(mock.calls.DescribePrefixListsRequest, callInfo)
	lockec2ClientMockDescribePrefixListsRequest.Unlock()
	return mock.DescribePrefixListsRequestFunc(in1)
}

// DescribePrefixListsRequestCalls gets all the calls that were made to DescribePrefixListsRequest.
// Check the length with:
//     len(mockedec2Client.DescribePrefixListsRequestCalls())
func (mock *ec2ClientMock) DescribePrefixListsRequestCalls() []struct {
	In1 *ec2.DescribePrefixListsInput
} {
	var calls []struct {
		In1 *ec2.DescribePrefixListsInput
	}
	lockec2ClientMockDescribePrefixListsRequest.RLock()
	calls = mock.calls.DescribePrefixListsRequest
	lockec2ClientMockDescribePrefixListsRequest.RUnlock()
	return calls
}

// DescribePrefixListsWithContext calls DescribePrefixListsWithContextFunc.
func (mock *ec2ClientMock) DescribePrefixListsWithContext(in1 context.Context, in2 *ec2.DescribePrefixListsInput, in3 ...request.Option) (*ec2.DescribePrefixListsOutput, error) {
	if mock.DescribePrefixListsWithContextFunc == nil {
		panic("ec2ClientMock.DescribePrefixListsWithContextFunc: method is nil but ec2Client.DescribePrefixListsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribePrefixListsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribePrefixListsWithContext.Lock()
	mock.calls.DescribePrefixListsWithContext = append(mock.calls.DescribePrefixListsWithContext, callInfo)
	lockec2ClientMockDescribePrefixListsWithContext.Unlock()
	return mock.DescribePrefixListsWithContextFunc(in1, in2, in3...)
}

// DescribePrefixListsWithContextCalls gets all the calls that were made to DescribePrefixListsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribePrefixListsWithContextCalls())
func (mock *ec2ClientMock) DescribePrefixListsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribePrefixListsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribePrefixListsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribePrefixListsWithContext.RLock()
	calls = mock.calls.DescribePrefixListsWithContext
	lockec2ClientMockDescribePrefixListsWithContext.RUnlock()
	return calls
}

// DescribePrincipalIdFormat calls DescribePrincipalIdFormatFunc.
func (mock *ec2ClientMock) DescribePrincipalIdFormat(in1 *ec2.DescribePrincipalIdFormatInput) (*ec2.DescribePrincipalIdFormatOutput, error) {
	if mock.DescribePrincipalIdFormatFunc == nil {
		panic("ec2ClientMock.DescribePrincipalIdFormatFunc: method is nil but ec2Client.DescribePrincipalIdFormat was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribePrincipalIdFormatInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribePrincipalIdFormat.Lock()
	mock.calls.DescribePrincipalIdFormat = append(mock.calls.DescribePrincipalIdFormat, callInfo)
	lockec2ClientMockDescribePrincipalIdFormat.Unlock()
	return mock.DescribePrincipalIdFormatFunc(in1)
}

// DescribePrincipalIdFormatCalls gets all the calls that were made to DescribePrincipalIdFormat.
// Check the length with:
//     len(mockedec2Client.DescribePrincipalIdFormatCalls())
func (mock *ec2ClientMock) DescribePrincipalIdFormatCalls() []struct {
	In1 *ec2.DescribePrincipalIdFormatInput
} {
	var calls []struct {
		In1 *ec2.DescribePrincipalIdFormatInput
	}
	lockec2ClientMockDescribePrincipalIdFormat.RLock()
	calls = mock.calls.DescribePrincipalIdFormat
	lockec2ClientMockDescribePrincipalIdFormat.RUnlock()
	return calls
}

// DescribePrincipalIdFormatPages calls DescribePrincipalIdFormatPagesFunc.
func (mock *ec2ClientMock) DescribePrincipalIdFormatPages(in1 *ec2.DescribePrincipalIdFormatInput, in2 func(*ec2.DescribePrincipalIdFormatOutput, bool) bool) error {
	if mock.DescribePrincipalIdFormatPagesFunc == nil {
		panic("ec2ClientMock.DescribePrincipalIdFormatPagesFunc: method is nil but ec2Client.DescribePrincipalIdFormatPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribePrincipalIdFormatInput
		In2 func(*ec2.DescribePrincipalIdFormatOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribePrincipalIdFormatPages.Lock()
	mock.calls.DescribePrincipalIdFormatPages = append(mock.calls.DescribePrincipalIdFormatPages, callInfo)
	lockec2ClientMockDescribePrincipalIdFormatPages.Unlock()
	return mock.DescribePrincipalIdFormatPagesFunc(in1, in2)
}

// DescribePrincipalIdFormatPagesCalls gets all the calls that were made to DescribePrincipalIdFormatPages.
// Check the length with:
//     len(mockedec2Client.DescribePrincipalIdFormatPagesCalls())
func (mock *ec2ClientMock) DescribePrincipalIdFormatPagesCalls() []struct {
	In1 *ec2.DescribePrincipalIdFormatInput
	In2 func(*ec2.DescribePrincipalIdFormatOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribePrincipalIdFormatInput
		In2 func(*ec2.DescribePrincipalIdFormatOutput, bool) bool
	}
	lockec2ClientMockDescribePrincipalIdFormatPages.RLock()
	calls = mock.calls.DescribePrincipalIdFormatPages
	lockec2ClientMockDescribePrincipalIdFormatPages.RUnlock()
	return calls
}

// DescribePrincipalIdFormatPagesWithContext calls DescribePrincipalIdFormatPagesWithContextFunc.
func (mock *ec2ClientMock) DescribePrincipalIdFormatPagesWithContext(in1 context.Context, in2 *ec2.DescribePrincipalIdFormatInput, in3 func(*ec2.DescribePrincipalIdFormatOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribePrincipalIdFormatPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribePrincipalIdFormatPagesWithContextFunc: method is nil but ec2Client.DescribePrincipalIdFormatPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribePrincipalIdFormatInput
		In3 func(*ec2.DescribePrincipalIdFormatOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribePrincipalIdFormatPagesWithContext.Lock()
	mock.calls.DescribePrincipalIdFormatPagesWithContext = append(mock.calls.DescribePrincipalIdFormatPagesWithContext, callInfo)
	lockec2ClientMockDescribePrincipalIdFormatPagesWithContext.Unlock()
	return mock.DescribePrincipalIdFormatPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribePrincipalIdFormatPagesWithContextCalls gets all the calls that were made to DescribePrincipalIdFormatPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribePrincipalIdFormatPagesWithContextCalls())
func (mock *ec2ClientMock) DescribePrincipalIdFormatPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribePrincipalIdFormatInput
	In3 func(*ec2.DescribePrincipalIdFormatOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribePrincipalIdFormatInput
		In3 func(*ec2.DescribePrincipalIdFormatOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribePrincipalIdFormatPagesWithContext.RLock()
	calls = mock.calls.DescribePrincipalIdFormatPagesWithContext
	lockec2ClientMockDescribePrincipalIdFormatPagesWithContext.RUnlock()
	return calls
}

// DescribePrincipalIdFormatRequest calls DescribePrincipalIdFormatRequestFunc.
func (mock *ec2ClientMock) DescribePrincipalIdFormatRequest(in1 *ec2.DescribePrincipalIdFormatInput) (*request.Request, *ec2.DescribePrincipalIdFormatOutput) {
	if mock.DescribePrincipalIdFormatRequestFunc == nil {
		panic("ec2ClientMock.DescribePrincipalIdFormatRequestFunc: method is nil but ec2Client.DescribePrincipalIdFormatRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribePrincipalIdFormatInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribePrincipalIdFormatRequest.Lock()
	mock.calls.DescribePrincipalIdFormatRequest = append(mock.calls.DescribePrincipalIdFormatRequest, callInfo)
	lockec2ClientMockDescribePrincipalIdFormatRequest.Unlock()
	return mock.DescribePrincipalIdFormatRequestFunc(in1)
}

// DescribePrincipalIdFormatRequestCalls gets all the calls that were made to DescribePrincipalIdFormatRequest.
// Check the length with:
//     len(mockedec2Client.DescribePrincipalIdFormatRequestCalls())
func (mock *ec2ClientMock) DescribePrincipalIdFormatRequestCalls() []struct {
	In1 *ec2.DescribePrincipalIdFormatInput
} {
	var calls []struct {
		In1 *ec2.DescribePrincipalIdFormatInput
	}
	lockec2ClientMockDescribePrincipalIdFormatRequest.RLock()
	calls = mock.calls.DescribePrincipalIdFormatRequest
	lockec2ClientMockDescribePrincipalIdFormatRequest.RUnlock()
	return calls
}

// DescribePrincipalIdFormatWithContext calls DescribePrincipalIdFormatWithContextFunc.
func (mock *ec2ClientMock) DescribePrincipalIdFormatWithContext(in1 context.Context, in2 *ec2.DescribePrincipalIdFormatInput, in3 ...request.Option) (*ec2.DescribePrincipalIdFormatOutput, error) {
	if mock.DescribePrincipalIdFormatWithContextFunc == nil {
		panic("ec2ClientMock.DescribePrincipalIdFormatWithContextFunc: method is nil but ec2Client.DescribePrincipalIdFormatWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribePrincipalIdFormatInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribePrincipalIdFormatWithContext.Lock()
	mock.calls.DescribePrincipalIdFormatWithContext = append(mock.calls.DescribePrincipalIdFormatWithContext, callInfo)
	lockec2ClientMockDescribePrincipalIdFormatWithContext.Unlock()
	return mock.DescribePrincipalIdFormatWithContextFunc(in1, in2, in3...)
}

// DescribePrincipalIdFormatWithContextCalls gets all the calls that were made to DescribePrincipalIdFormatWithContext.
// Check the length with:
//     len(mockedec2Client.DescribePrincipalIdFormatWithContextCalls())
func (mock *ec2ClientMock) DescribePrincipalIdFormatWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribePrincipalIdFormatInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribePrincipalIdFormatInput
		In3 []request.Option
	}
	lockec2ClientMockDescribePrincipalIdFormatWithContext.RLock()
	calls = mock.calls.DescribePrincipalIdFormatWithContext
	lockec2ClientMockDescribePrincipalIdFormatWithContext.RUnlock()
	return calls
}

// DescribePublicIpv4Pools calls DescribePublicIpv4PoolsFunc.
func (mock *ec2ClientMock) DescribePublicIpv4Pools(in1 *ec2.DescribePublicIpv4PoolsInput) (*ec2.DescribePublicIpv4PoolsOutput, error) {
	if mock.DescribePublicIpv4PoolsFunc == nil {
		panic("ec2ClientMock.DescribePublicIpv4PoolsFunc: method is nil but ec2Client.DescribePublicIpv4Pools was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribePublicIpv4PoolsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribePublicIpv4Pools.Lock()
	mock.calls.DescribePublicIpv4Pools = append(mock.calls.DescribePublicIpv4Pools, callInfo)
	lockec2ClientMockDescribePublicIpv4Pools.Unlock()
	return mock.DescribePublicIpv4PoolsFunc(in1)
}

// DescribePublicIpv4PoolsCalls gets all the calls that were made to DescribePublicIpv4Pools.
// Check the length with:
//     len(mockedec2Client.DescribePublicIpv4PoolsCalls())
func (mock *ec2ClientMock) DescribePublicIpv4PoolsCalls() []struct {
	In1 *ec2.DescribePublicIpv4PoolsInput
} {
	var calls []struct {
		In1 *ec2.DescribePublicIpv4PoolsInput
	}
	lockec2ClientMockDescribePublicIpv4Pools.RLock()
	calls = mock.calls.DescribePublicIpv4Pools
	lockec2ClientMockDescribePublicIpv4Pools.RUnlock()
	return calls
}

// DescribePublicIpv4PoolsPages calls DescribePublicIpv4PoolsPagesFunc.
func (mock *ec2ClientMock) DescribePublicIpv4PoolsPages(in1 *ec2.DescribePublicIpv4PoolsInput, in2 func(*ec2.DescribePublicIpv4PoolsOutput, bool) bool) error {
	if mock.DescribePublicIpv4PoolsPagesFunc == nil {
		panic("ec2ClientMock.DescribePublicIpv4PoolsPagesFunc: method is nil but ec2Client.DescribePublicIpv4PoolsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribePublicIpv4PoolsInput
		In2 func(*ec2.DescribePublicIpv4PoolsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribePublicIpv4PoolsPages.Lock()
	mock.calls.DescribePublicIpv4PoolsPages = append(mock.calls.DescribePublicIpv4PoolsPages, callInfo)
	lockec2ClientMockDescribePublicIpv4PoolsPages.Unlock()
	return mock.DescribePublicIpv4PoolsPagesFunc(in1, in2)
}

// DescribePublicIpv4PoolsPagesCalls gets all the calls that were made to DescribePublicIpv4PoolsPages.
// Check the length with:
//     len(mockedec2Client.DescribePublicIpv4PoolsPagesCalls())
func (mock *ec2ClientMock) DescribePublicIpv4PoolsPagesCalls() []struct {
	In1 *ec2.DescribePublicIpv4PoolsInput
	In2 func(*ec2.DescribePublicIpv4PoolsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribePublicIpv4PoolsInput
		In2 func(*ec2.DescribePublicIpv4PoolsOutput, bool) bool
	}
	lockec2ClientMockDescribePublicIpv4PoolsPages.RLock()
	calls = mock.calls.DescribePublicIpv4PoolsPages
	lockec2ClientMockDescribePublicIpv4PoolsPages.RUnlock()
	return calls
}

// DescribePublicIpv4PoolsPagesWithContext calls DescribePublicIpv4PoolsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribePublicIpv4PoolsPagesWithContext(in1 context.Context, in2 *ec2.DescribePublicIpv4PoolsInput, in3 func(*ec2.DescribePublicIpv4PoolsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribePublicIpv4PoolsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribePublicIpv4PoolsPagesWithContextFunc: method is nil but ec2Client.DescribePublicIpv4PoolsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribePublicIpv4PoolsInput
		In3 func(*ec2.DescribePublicIpv4PoolsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribePublicIpv4PoolsPagesWithContext.Lock()
	mock.calls.DescribePublicIpv4PoolsPagesWithContext = append(mock.calls.DescribePublicIpv4PoolsPagesWithContext, callInfo)
	lockec2ClientMockDescribePublicIpv4PoolsPagesWithContext.Unlock()
	return mock.DescribePublicIpv4PoolsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribePublicIpv4PoolsPagesWithContextCalls gets all the calls that were made to DescribePublicIpv4PoolsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribePublicIpv4PoolsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribePublicIpv4PoolsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribePublicIpv4PoolsInput
	In3 func(*ec2.DescribePublicIpv4PoolsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribePublicIpv4PoolsInput
		In3 func(*ec2.DescribePublicIpv4PoolsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribePublicIpv4PoolsPagesWithContext.RLock()
	calls = mock.calls.DescribePublicIpv4PoolsPagesWithContext
	lockec2ClientMockDescribePublicIpv4PoolsPagesWithContext.RUnlock()
	return calls
}

// DescribePublicIpv4PoolsRequest calls DescribePublicIpv4PoolsRequestFunc.
func (mock *ec2ClientMock) DescribePublicIpv4PoolsRequest(in1 *ec2.DescribePublicIpv4PoolsInput) (*request.Request, *ec2.DescribePublicIpv4PoolsOutput) {
	if mock.DescribePublicIpv4PoolsRequestFunc == nil {
		panic("ec2ClientMock.DescribePublicIpv4PoolsRequestFunc: method is nil but ec2Client.DescribePublicIpv4PoolsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribePublicIpv4PoolsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribePublicIpv4PoolsRequest.Lock()
	mock.calls.DescribePublicIpv4PoolsRequest = append(mock.calls.DescribePublicIpv4PoolsRequest, callInfo)
	lockec2ClientMockDescribePublicIpv4PoolsRequest.Unlock()
	return mock.DescribePublicIpv4PoolsRequestFunc(in1)
}

// DescribePublicIpv4PoolsRequestCalls gets all the calls that were made to DescribePublicIpv4PoolsRequest.
// Check the length with:
//     len(mockedec2Client.DescribePublicIpv4PoolsRequestCalls())
func (mock *ec2ClientMock) DescribePublicIpv4PoolsRequestCalls() []struct {
	In1 *ec2.DescribePublicIpv4PoolsInput
} {
	var calls []struct {
		In1 *ec2.DescribePublicIpv4PoolsInput
	}
	lockec2ClientMockDescribePublicIpv4PoolsRequest.RLock()
	calls = mock.calls.DescribePublicIpv4PoolsRequest
	lockec2ClientMockDescribePublicIpv4PoolsRequest.RUnlock()
	return calls
}

// DescribePublicIpv4PoolsWithContext calls DescribePublicIpv4PoolsWithContextFunc.
func (mock *ec2ClientMock) DescribePublicIpv4PoolsWithContext(in1 context.Context, in2 *ec2.DescribePublicIpv4PoolsInput, in3 ...request.Option) (*ec2.DescribePublicIpv4PoolsOutput, error) {
	if mock.DescribePublicIpv4PoolsWithContextFunc == nil {
		panic("ec2ClientMock.DescribePublicIpv4PoolsWithContextFunc: method is nil but ec2Client.DescribePublicIpv4PoolsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribePublicIpv4PoolsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribePublicIpv4PoolsWithContext.Lock()
	mock.calls.DescribePublicIpv4PoolsWithContext = append(mock.calls.DescribePublicIpv4PoolsWithContext, callInfo)
	lockec2ClientMockDescribePublicIpv4PoolsWithContext.Unlock()
	return mock.DescribePublicIpv4PoolsWithContextFunc(in1, in2, in3...)
}

// DescribePublicIpv4PoolsWithContextCalls gets all the calls that were made to DescribePublicIpv4PoolsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribePublicIpv4PoolsWithContextCalls())
func (mock *ec2ClientMock) DescribePublicIpv4PoolsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribePublicIpv4PoolsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribePublicIpv4PoolsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribePublicIpv4PoolsWithContext.RLock()
	calls = mock.calls.DescribePublicIpv4PoolsWithContext
	lockec2ClientMockDescribePublicIpv4PoolsWithContext.RUnlock()
	return calls
}

// DescribeRegions calls DescribeRegionsFunc.
func (mock *ec2ClientMock) DescribeRegions(in1 *ec2.DescribeRegionsInput) (*ec2.DescribeRegionsOutput, error) {
	if mock.DescribeRegionsFunc == nil {
		panic("ec2ClientMock.DescribeRegionsFunc: method is nil but ec2Client.DescribeRegions was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeRegionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeRegions.Lock()
	mock.calls.DescribeRegions = append(mock.calls.DescribeRegions, callInfo)
	lockec2ClientMockDescribeRegions.Unlock()
	return mock.DescribeRegionsFunc(in1)
}

// DescribeRegionsCalls gets all the calls that were made to DescribeRegions.
// Check the length with:
//     len(mockedec2Client.DescribeRegionsCalls())
func (mock *ec2ClientMock) DescribeRegionsCalls() []struct {
	In1 *ec2.DescribeRegionsInput
} {
	var calls []struct {
		In1 *ec2.DescribeRegionsInput
	}
	lockec2ClientMockDescribeRegions.RLock()
	calls = mock.calls.DescribeRegions
	lockec2ClientMockDescribeRegions.RUnlock()
	return calls
}

// DescribeRegionsRequest calls DescribeRegionsRequestFunc.
func (mock *ec2ClientMock) DescribeRegionsRequest(in1 *ec2.DescribeRegionsInput) (*request.Request, *ec2.DescribeRegionsOutput) {
	if mock.DescribeRegionsRequestFunc == nil {
		panic("ec2ClientMock.DescribeRegionsRequestFunc: method is nil but ec2Client.DescribeRegionsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeRegionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeRegionsRequest.Lock()
	mock.calls.DescribeRegionsRequest = append(mock.calls.DescribeRegionsRequest, callInfo)
	lockec2ClientMockDescribeRegionsRequest.Unlock()
	return mock.DescribeRegionsRequestFunc(in1)
}

// DescribeRegionsRequestCalls gets all the calls that were made to DescribeRegionsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeRegionsRequestCalls())
func (mock *ec2ClientMock) DescribeRegionsRequestCalls() []struct {
	In1 *ec2.DescribeRegionsInput
} {
	var calls []struct {
		In1 *ec2.DescribeRegionsInput
	}
	lockec2ClientMockDescribeRegionsRequest.RLock()
	calls = mock.calls.DescribeRegionsRequest
	lockec2ClientMockDescribeRegionsRequest.RUnlock()
	return calls
}

// DescribeRegionsWithContext calls DescribeRegionsWithContextFunc.
func (mock *ec2ClientMock) DescribeRegionsWithContext(in1 context.Context, in2 *ec2.DescribeRegionsInput, in3 ...request.Option) (*ec2.DescribeRegionsOutput, error) {
	if mock.DescribeRegionsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeRegionsWithContextFunc: method is nil but ec2Client.DescribeRegionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeRegionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeRegionsWithContext.Lock()
	mock.calls.DescribeRegionsWithContext = append(mock.calls.DescribeRegionsWithContext, callInfo)
	lockec2ClientMockDescribeRegionsWithContext.Unlock()
	return mock.DescribeRegionsWithContextFunc(in1, in2, in3...)
}

// DescribeRegionsWithContextCalls gets all the calls that were made to DescribeRegionsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeRegionsWithContextCalls())
func (mock *ec2ClientMock) DescribeRegionsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeRegionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeRegionsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeRegionsWithContext.RLock()
	calls = mock.calls.DescribeRegionsWithContext
	lockec2ClientMockDescribeRegionsWithContext.RUnlock()
	return calls
}

// DescribeReservedInstances calls DescribeReservedInstancesFunc.
func (mock *ec2ClientMock) DescribeReservedInstances(in1 *ec2.DescribeReservedInstancesInput) (*ec2.DescribeReservedInstancesOutput, error) {
	if mock.DescribeReservedInstancesFunc == nil {
		panic("ec2ClientMock.DescribeReservedInstancesFunc: method is nil but ec2Client.DescribeReservedInstances was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeReservedInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeReservedInstances.Lock()
	mock.calls.DescribeReservedInstances = append(mock.calls.DescribeReservedInstances, callInfo)
	lockec2ClientMockDescribeReservedInstances.Unlock()
	return mock.DescribeReservedInstancesFunc(in1)
}

// DescribeReservedInstancesCalls gets all the calls that were made to DescribeReservedInstances.
// Check the length with:
//     len(mockedec2Client.DescribeReservedInstancesCalls())
func (mock *ec2ClientMock) DescribeReservedInstancesCalls() []struct {
	In1 *ec2.DescribeReservedInstancesInput
} {
	var calls []struct {
		In1 *ec2.DescribeReservedInstancesInput
	}
	lockec2ClientMockDescribeReservedInstances.RLock()
	calls = mock.calls.DescribeReservedInstances
	lockec2ClientMockDescribeReservedInstances.RUnlock()
	return calls
}

// DescribeReservedInstancesListings calls DescribeReservedInstancesListingsFunc.
func (mock *ec2ClientMock) DescribeReservedInstancesListings(in1 *ec2.DescribeReservedInstancesListingsInput) (*ec2.DescribeReservedInstancesListingsOutput, error) {
	if mock.DescribeReservedInstancesListingsFunc == nil {
		panic("ec2ClientMock.DescribeReservedInstancesListingsFunc: method is nil but ec2Client.DescribeReservedInstancesListings was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeReservedInstancesListingsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeReservedInstancesListings.Lock()
	mock.calls.DescribeReservedInstancesListings = append(mock.calls.DescribeReservedInstancesListings, callInfo)
	lockec2ClientMockDescribeReservedInstancesListings.Unlock()
	return mock.DescribeReservedInstancesListingsFunc(in1)
}

// DescribeReservedInstancesListingsCalls gets all the calls that were made to DescribeReservedInstancesListings.
// Check the length with:
//     len(mockedec2Client.DescribeReservedInstancesListingsCalls())
func (mock *ec2ClientMock) DescribeReservedInstancesListingsCalls() []struct {
	In1 *ec2.DescribeReservedInstancesListingsInput
} {
	var calls []struct {
		In1 *ec2.DescribeReservedInstancesListingsInput
	}
	lockec2ClientMockDescribeReservedInstancesListings.RLock()
	calls = mock.calls.DescribeReservedInstancesListings
	lockec2ClientMockDescribeReservedInstancesListings.RUnlock()
	return calls
}

// DescribeReservedInstancesListingsRequest calls DescribeReservedInstancesListingsRequestFunc.
func (mock *ec2ClientMock) DescribeReservedInstancesListingsRequest(in1 *ec2.DescribeReservedInstancesListingsInput) (*request.Request, *ec2.DescribeReservedInstancesListingsOutput) {
	if mock.DescribeReservedInstancesListingsRequestFunc == nil {
		panic("ec2ClientMock.DescribeReservedInstancesListingsRequestFunc: method is nil but ec2Client.DescribeReservedInstancesListingsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeReservedInstancesListingsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeReservedInstancesListingsRequest.Lock()
	mock.calls.DescribeReservedInstancesListingsRequest = append(mock.calls.DescribeReservedInstancesListingsRequest, callInfo)
	lockec2ClientMockDescribeReservedInstancesListingsRequest.Unlock()
	return mock.DescribeReservedInstancesListingsRequestFunc(in1)
}

// DescribeReservedInstancesListingsRequestCalls gets all the calls that were made to DescribeReservedInstancesListingsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeReservedInstancesListingsRequestCalls())
func (mock *ec2ClientMock) DescribeReservedInstancesListingsRequestCalls() []struct {
	In1 *ec2.DescribeReservedInstancesListingsInput
} {
	var calls []struct {
		In1 *ec2.DescribeReservedInstancesListingsInput
	}
	lockec2ClientMockDescribeReservedInstancesListingsRequest.RLock()
	calls = mock.calls.DescribeReservedInstancesListingsRequest
	lockec2ClientMockDescribeReservedInstancesListingsRequest.RUnlock()
	return calls
}

// DescribeReservedInstancesListingsWithContext calls DescribeReservedInstancesListingsWithContextFunc.
func (mock *ec2ClientMock) DescribeReservedInstancesListingsWithContext(in1 context.Context, in2 *ec2.DescribeReservedInstancesListingsInput, in3 ...request.Option) (*ec2.DescribeReservedInstancesListingsOutput, error) {
	if mock.DescribeReservedInstancesListingsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeReservedInstancesListingsWithContextFunc: method is nil but ec2Client.DescribeReservedInstancesListingsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeReservedInstancesListingsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeReservedInstancesListingsWithContext.Lock()
	mock.calls.DescribeReservedInstancesListingsWithContext = append(mock.calls.DescribeReservedInstancesListingsWithContext, callInfo)
	lockec2ClientMockDescribeReservedInstancesListingsWithContext.Unlock()
	return mock.DescribeReservedInstancesListingsWithContextFunc(in1, in2, in3...)
}

// DescribeReservedInstancesListingsWithContextCalls gets all the calls that were made to DescribeReservedInstancesListingsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeReservedInstancesListingsWithContextCalls())
func (mock *ec2ClientMock) DescribeReservedInstancesListingsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeReservedInstancesListingsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeReservedInstancesListingsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeReservedInstancesListingsWithContext.RLock()
	calls = mock.calls.DescribeReservedInstancesListingsWithContext
	lockec2ClientMockDescribeReservedInstancesListingsWithContext.RUnlock()
	return calls
}

// DescribeReservedInstancesModifications calls DescribeReservedInstancesModificationsFunc.
func (mock *ec2ClientMock) DescribeReservedInstancesModifications(in1 *ec2.DescribeReservedInstancesModificationsInput) (*ec2.DescribeReservedInstancesModificationsOutput, error) {
	if mock.DescribeReservedInstancesModificationsFunc == nil {
		panic("ec2ClientMock.DescribeReservedInstancesModificationsFunc: method is nil but ec2Client.DescribeReservedInstancesModifications was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeReservedInstancesModificationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeReservedInstancesModifications.Lock()
	mock.calls.DescribeReservedInstancesModifications = append(mock.calls.DescribeReservedInstancesModifications, callInfo)
	lockec2ClientMockDescribeReservedInstancesModifications.Unlock()
	return mock.DescribeReservedInstancesModificationsFunc(in1)
}

// DescribeReservedInstancesModificationsCalls gets all the calls that were made to DescribeReservedInstancesModifications.
// Check the length with:
//     len(mockedec2Client.DescribeReservedInstancesModificationsCalls())
func (mock *ec2ClientMock) DescribeReservedInstancesModificationsCalls() []struct {
	In1 *ec2.DescribeReservedInstancesModificationsInput
} {
	var calls []struct {
		In1 *ec2.DescribeReservedInstancesModificationsInput
	}
	lockec2ClientMockDescribeReservedInstancesModifications.RLock()
	calls = mock.calls.DescribeReservedInstancesModifications
	lockec2ClientMockDescribeReservedInstancesModifications.RUnlock()
	return calls
}

// DescribeReservedInstancesModificationsPages calls DescribeReservedInstancesModificationsPagesFunc.
func (mock *ec2ClientMock) DescribeReservedInstancesModificationsPages(in1 *ec2.DescribeReservedInstancesModificationsInput, in2 func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool) error {
	if mock.DescribeReservedInstancesModificationsPagesFunc == nil {
		panic("ec2ClientMock.DescribeReservedInstancesModificationsPagesFunc: method is nil but ec2Client.DescribeReservedInstancesModificationsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeReservedInstancesModificationsInput
		In2 func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeReservedInstancesModificationsPages.Lock()
	mock.calls.DescribeReservedInstancesModificationsPages = append(mock.calls.DescribeReservedInstancesModificationsPages, callInfo)
	lockec2ClientMockDescribeReservedInstancesModificationsPages.Unlock()
	return mock.DescribeReservedInstancesModificationsPagesFunc(in1, in2)
}

// DescribeReservedInstancesModificationsPagesCalls gets all the calls that were made to DescribeReservedInstancesModificationsPages.
// Check the length with:
//     len(mockedec2Client.DescribeReservedInstancesModificationsPagesCalls())
func (mock *ec2ClientMock) DescribeReservedInstancesModificationsPagesCalls() []struct {
	In1 *ec2.DescribeReservedInstancesModificationsInput
	In2 func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeReservedInstancesModificationsInput
		In2 func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool
	}
	lockec2ClientMockDescribeReservedInstancesModificationsPages.RLock()
	calls = mock.calls.DescribeReservedInstancesModificationsPages
	lockec2ClientMockDescribeReservedInstancesModificationsPages.RUnlock()
	return calls
}

// DescribeReservedInstancesModificationsPagesWithContext calls DescribeReservedInstancesModificationsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeReservedInstancesModificationsPagesWithContext(in1 context.Context, in2 *ec2.DescribeReservedInstancesModificationsInput, in3 func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeReservedInstancesModificationsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeReservedInstancesModificationsPagesWithContextFunc: method is nil but ec2Client.DescribeReservedInstancesModificationsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeReservedInstancesModificationsInput
		In3 func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeReservedInstancesModificationsPagesWithContext.Lock()
	mock.calls.DescribeReservedInstancesModificationsPagesWithContext = append(mock.calls.DescribeReservedInstancesModificationsPagesWithContext, callInfo)
	lockec2ClientMockDescribeReservedInstancesModificationsPagesWithContext.Unlock()
	return mock.DescribeReservedInstancesModificationsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeReservedInstancesModificationsPagesWithContextCalls gets all the calls that were made to DescribeReservedInstancesModificationsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeReservedInstancesModificationsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeReservedInstancesModificationsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeReservedInstancesModificationsInput
	In3 func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeReservedInstancesModificationsInput
		In3 func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeReservedInstancesModificationsPagesWithContext.RLock()
	calls = mock.calls.DescribeReservedInstancesModificationsPagesWithContext
	lockec2ClientMockDescribeReservedInstancesModificationsPagesWithContext.RUnlock()
	return calls
}

// DescribeReservedInstancesModificationsRequest calls DescribeReservedInstancesModificationsRequestFunc.
func (mock *ec2ClientMock) DescribeReservedInstancesModificationsRequest(in1 *ec2.DescribeReservedInstancesModificationsInput) (*request.Request, *ec2.DescribeReservedInstancesModificationsOutput) {
	if mock.DescribeReservedInstancesModificationsRequestFunc == nil {
		panic("ec2ClientMock.DescribeReservedInstancesModificationsRequestFunc: method is nil but ec2Client.DescribeReservedInstancesModificationsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeReservedInstancesModificationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeReservedInstancesModificationsRequest.Lock()
	mock.calls.DescribeReservedInstancesModificationsRequest = append(mock.calls.DescribeReservedInstancesModificationsRequest, callInfo)
	lockec2ClientMockDescribeReservedInstancesModificationsRequest.Unlock()
	return mock.DescribeReservedInstancesModificationsRequestFunc(in1)
}

// DescribeReservedInstancesModificationsRequestCalls gets all the calls that were made to DescribeReservedInstancesModificationsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeReservedInstancesModificationsRequestCalls())
func (mock *ec2ClientMock) DescribeReservedInstancesModificationsRequestCalls() []struct {
	In1 *ec2.DescribeReservedInstancesModificationsInput
} {
	var calls []struct {
		In1 *ec2.DescribeReservedInstancesModificationsInput
	}
	lockec2ClientMockDescribeReservedInstancesModificationsRequest.RLock()
	calls = mock.calls.DescribeReservedInstancesModificationsRequest
	lockec2ClientMockDescribeReservedInstancesModificationsRequest.RUnlock()
	return calls
}

// DescribeReservedInstancesModificationsWithContext calls DescribeReservedInstancesModificationsWithContextFunc.
func (mock *ec2ClientMock) DescribeReservedInstancesModificationsWithContext(in1 context.Context, in2 *ec2.DescribeReservedInstancesModificationsInput, in3 ...request.Option) (*ec2.DescribeReservedInstancesModificationsOutput, error) {
	if mock.DescribeReservedInstancesModificationsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeReservedInstancesModificationsWithContextFunc: method is nil but ec2Client.DescribeReservedInstancesModificationsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeReservedInstancesModificationsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeReservedInstancesModificationsWithContext.Lock()
	mock.calls.DescribeReservedInstancesModificationsWithContext = append(mock.calls.DescribeReservedInstancesModificationsWithContext, callInfo)
	lockec2ClientMockDescribeReservedInstancesModificationsWithContext.Unlock()
	return mock.DescribeReservedInstancesModificationsWithContextFunc(in1, in2, in3...)
}

// DescribeReservedInstancesModificationsWithContextCalls gets all the calls that were made to DescribeReservedInstancesModificationsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeReservedInstancesModificationsWithContextCalls())
func (mock *ec2ClientMock) DescribeReservedInstancesModificationsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeReservedInstancesModificationsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeReservedInstancesModificationsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeReservedInstancesModificationsWithContext.RLock()
	calls = mock.calls.DescribeReservedInstancesModificationsWithContext
	lockec2ClientMockDescribeReservedInstancesModificationsWithContext.RUnlock()
	return calls
}

// DescribeReservedInstancesOfferings calls DescribeReservedInstancesOfferingsFunc.
func (mock *ec2ClientMock) DescribeReservedInstancesOfferings(in1 *ec2.DescribeReservedInstancesOfferingsInput) (*ec2.DescribeReservedInstancesOfferingsOutput, error) {
	if mock.DescribeReservedInstancesOfferingsFunc == nil {
		panic("ec2ClientMock.DescribeReservedInstancesOfferingsFunc: method is nil but ec2Client.DescribeReservedInstancesOfferings was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeReservedInstancesOfferingsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeReservedInstancesOfferings.Lock()
	mock.calls.DescribeReservedInstancesOfferings = append(mock.calls.DescribeReservedInstancesOfferings, callInfo)
	lockec2ClientMockDescribeReservedInstancesOfferings.Unlock()
	return mock.DescribeReservedInstancesOfferingsFunc(in1)
}

// DescribeReservedInstancesOfferingsCalls gets all the calls that were made to DescribeReservedInstancesOfferings.
// Check the length with:
//     len(mockedec2Client.DescribeReservedInstancesOfferingsCalls())
func (mock *ec2ClientMock) DescribeReservedInstancesOfferingsCalls() []struct {
	In1 *ec2.DescribeReservedInstancesOfferingsInput
} {
	var calls []struct {
		In1 *ec2.DescribeReservedInstancesOfferingsInput
	}
	lockec2ClientMockDescribeReservedInstancesOfferings.RLock()
	calls = mock.calls.DescribeReservedInstancesOfferings
	lockec2ClientMockDescribeReservedInstancesOfferings.RUnlock()
	return calls
}

// DescribeReservedInstancesOfferingsPages calls DescribeReservedInstancesOfferingsPagesFunc.
func (mock *ec2ClientMock) DescribeReservedInstancesOfferingsPages(in1 *ec2.DescribeReservedInstancesOfferingsInput, in2 func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool) error {
	if mock.DescribeReservedInstancesOfferingsPagesFunc == nil {
		panic("ec2ClientMock.DescribeReservedInstancesOfferingsPagesFunc: method is nil but ec2Client.DescribeReservedInstancesOfferingsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeReservedInstancesOfferingsInput
		In2 func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeReservedInstancesOfferingsPages.Lock()
	mock.calls.DescribeReservedInstancesOfferingsPages = append(mock.calls.DescribeReservedInstancesOfferingsPages, callInfo)
	lockec2ClientMockDescribeReservedInstancesOfferingsPages.Unlock()
	return mock.DescribeReservedInstancesOfferingsPagesFunc(in1, in2)
}

// DescribeReservedInstancesOfferingsPagesCalls gets all the calls that were made to DescribeReservedInstancesOfferingsPages.
// Check the length with:
//     len(mockedec2Client.DescribeReservedInstancesOfferingsPagesCalls())
func (mock *ec2ClientMock) DescribeReservedInstancesOfferingsPagesCalls() []struct {
	In1 *ec2.DescribeReservedInstancesOfferingsInput
	In2 func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeReservedInstancesOfferingsInput
		In2 func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool
	}
	lockec2ClientMockDescribeReservedInstancesOfferingsPages.RLock()
	calls = mock.calls.DescribeReservedInstancesOfferingsPages
	lockec2ClientMockDescribeReservedInstancesOfferingsPages.RUnlock()
	return calls
}

// DescribeReservedInstancesOfferingsPagesWithContext calls DescribeReservedInstancesOfferingsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeReservedInstancesOfferingsPagesWithContext(in1 context.Context, in2 *ec2.DescribeReservedInstancesOfferingsInput, in3 func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeReservedInstancesOfferingsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeReservedInstancesOfferingsPagesWithContextFunc: method is nil but ec2Client.DescribeReservedInstancesOfferingsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeReservedInstancesOfferingsInput
		In3 func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeReservedInstancesOfferingsPagesWithContext.Lock()
	mock.calls.DescribeReservedInstancesOfferingsPagesWithContext = append(mock.calls.DescribeReservedInstancesOfferingsPagesWithContext, callInfo)
	lockec2ClientMockDescribeReservedInstancesOfferingsPagesWithContext.Unlock()
	return mock.DescribeReservedInstancesOfferingsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeReservedInstancesOfferingsPagesWithContextCalls gets all the calls that were made to DescribeReservedInstancesOfferingsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeReservedInstancesOfferingsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeReservedInstancesOfferingsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeReservedInstancesOfferingsInput
	In3 func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeReservedInstancesOfferingsInput
		In3 func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeReservedInstancesOfferingsPagesWithContext.RLock()
	calls = mock.calls.DescribeReservedInstancesOfferingsPagesWithContext
	lockec2ClientMockDescribeReservedInstancesOfferingsPagesWithContext.RUnlock()
	return calls
}

// DescribeReservedInstancesOfferingsRequest calls DescribeReservedInstancesOfferingsRequestFunc.
func (mock *ec2ClientMock) DescribeReservedInstancesOfferingsRequest(in1 *ec2.DescribeReservedInstancesOfferingsInput) (*request.Request, *ec2.DescribeReservedInstancesOfferingsOutput) {
	if mock.DescribeReservedInstancesOfferingsRequestFunc == nil {
		panic("ec2ClientMock.DescribeReservedInstancesOfferingsRequestFunc: method is nil but ec2Client.DescribeReservedInstancesOfferingsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeReservedInstancesOfferingsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeReservedInstancesOfferingsRequest.Lock()
	mock.calls.DescribeReservedInstancesOfferingsRequest = append(mock.calls.DescribeReservedInstancesOfferingsRequest, callInfo)
	lockec2ClientMockDescribeReservedInstancesOfferingsRequest.Unlock()
	return mock.DescribeReservedInstancesOfferingsRequestFunc(in1)
}

// DescribeReservedInstancesOfferingsRequestCalls gets all the calls that were made to DescribeReservedInstancesOfferingsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeReservedInstancesOfferingsRequestCalls())
func (mock *ec2ClientMock) DescribeReservedInstancesOfferingsRequestCalls() []struct {
	In1 *ec2.DescribeReservedInstancesOfferingsInput
} {
	var calls []struct {
		In1 *ec2.DescribeReservedInstancesOfferingsInput
	}
	lockec2ClientMockDescribeReservedInstancesOfferingsRequest.RLock()
	calls = mock.calls.DescribeReservedInstancesOfferingsRequest
	lockec2ClientMockDescribeReservedInstancesOfferingsRequest.RUnlock()
	return calls
}

// DescribeReservedInstancesOfferingsWithContext calls DescribeReservedInstancesOfferingsWithContextFunc.
func (mock *ec2ClientMock) DescribeReservedInstancesOfferingsWithContext(in1 context.Context, in2 *ec2.DescribeReservedInstancesOfferingsInput, in3 ...request.Option) (*ec2.DescribeReservedInstancesOfferingsOutput, error) {
	if mock.DescribeReservedInstancesOfferingsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeReservedInstancesOfferingsWithContextFunc: method is nil but ec2Client.DescribeReservedInstancesOfferingsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeReservedInstancesOfferingsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeReservedInstancesOfferingsWithContext.Lock()
	mock.calls.DescribeReservedInstancesOfferingsWithContext = append(mock.calls.DescribeReservedInstancesOfferingsWithContext, callInfo)
	lockec2ClientMockDescribeReservedInstancesOfferingsWithContext.Unlock()
	return mock.DescribeReservedInstancesOfferingsWithContextFunc(in1, in2, in3...)
}

// DescribeReservedInstancesOfferingsWithContextCalls gets all the calls that were made to DescribeReservedInstancesOfferingsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeReservedInstancesOfferingsWithContextCalls())
func (mock *ec2ClientMock) DescribeReservedInstancesOfferingsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeReservedInstancesOfferingsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeReservedInstancesOfferingsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeReservedInstancesOfferingsWithContext.RLock()
	calls = mock.calls.DescribeReservedInstancesOfferingsWithContext
	lockec2ClientMockDescribeReservedInstancesOfferingsWithContext.RUnlock()
	return calls
}

// DescribeReservedInstancesRequest calls DescribeReservedInstancesRequestFunc.
func (mock *ec2ClientMock) DescribeReservedInstancesRequest(in1 *ec2.DescribeReservedInstancesInput) (*request.Request, *ec2.DescribeReservedInstancesOutput) {
	if mock.DescribeReservedInstancesRequestFunc == nil {
		panic("ec2ClientMock.DescribeReservedInstancesRequestFunc: method is nil but ec2Client.DescribeReservedInstancesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeReservedInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeReservedInstancesRequest.Lock()
	mock.calls.DescribeReservedInstancesRequest = append(mock.calls.DescribeReservedInstancesRequest, callInfo)
	lockec2ClientMockDescribeReservedInstancesRequest.Unlock()
	return mock.DescribeReservedInstancesRequestFunc(in1)
}

// DescribeReservedInstancesRequestCalls gets all the calls that were made to DescribeReservedInstancesRequest.
// Check the length with:
//     len(mockedec2Client.DescribeReservedInstancesRequestCalls())
func (mock *ec2ClientMock) DescribeReservedInstancesRequestCalls() []struct {
	In1 *ec2.DescribeReservedInstancesInput
} {
	var calls []struct {
		In1 *ec2.DescribeReservedInstancesInput
	}
	lockec2ClientMockDescribeReservedInstancesRequest.RLock()
	calls = mock.calls.DescribeReservedInstancesRequest
	lockec2ClientMockDescribeReservedInstancesRequest.RUnlock()
	return calls
}

// DescribeReservedInstancesWithContext calls DescribeReservedInstancesWithContextFunc.
func (mock *ec2ClientMock) DescribeReservedInstancesWithContext(in1 context.Context, in2 *ec2.DescribeReservedInstancesInput, in3 ...request.Option) (*ec2.DescribeReservedInstancesOutput, error) {
	if mock.DescribeReservedInstancesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeReservedInstancesWithContextFunc: method is nil but ec2Client.DescribeReservedInstancesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeReservedInstancesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeReservedInstancesWithContext.Lock()
	mock.calls.DescribeReservedInstancesWithContext = append(mock.calls.DescribeReservedInstancesWithContext, callInfo)
	lockec2ClientMockDescribeReservedInstancesWithContext.Unlock()
	return mock.DescribeReservedInstancesWithContextFunc(in1, in2, in3...)
}

// DescribeReservedInstancesWithContextCalls gets all the calls that were made to DescribeReservedInstancesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeReservedInstancesWithContextCalls())
func (mock *ec2ClientMock) DescribeReservedInstancesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeReservedInstancesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeReservedInstancesInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeReservedInstancesWithContext.RLock()
	calls = mock.calls.DescribeReservedInstancesWithContext
	lockec2ClientMockDescribeReservedInstancesWithContext.RUnlock()
	return calls
}

// DescribeRouteTables calls DescribeRouteTablesFunc.
func (mock *ec2ClientMock) DescribeRouteTables(in1 *ec2.DescribeRouteTablesInput) (*ec2.DescribeRouteTablesOutput, error) {
	if mock.DescribeRouteTablesFunc == nil {
		panic("ec2ClientMock.DescribeRouteTablesFunc: method is nil but ec2Client.DescribeRouteTables was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeRouteTablesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeRouteTables.Lock()
	mock.calls.DescribeRouteTables = append(mock.calls.DescribeRouteTables, callInfo)
	lockec2ClientMockDescribeRouteTables.Unlock()
	return mock.DescribeRouteTablesFunc(in1)
}

// DescribeRouteTablesCalls gets all the calls that were made to DescribeRouteTables.
// Check the length with:
//     len(mockedec2Client.DescribeRouteTablesCalls())
func (mock *ec2ClientMock) DescribeRouteTablesCalls() []struct {
	In1 *ec2.DescribeRouteTablesInput
} {
	var calls []struct {
		In1 *ec2.DescribeRouteTablesInput
	}
	lockec2ClientMockDescribeRouteTables.RLock()
	calls = mock.calls.DescribeRouteTables
	lockec2ClientMockDescribeRouteTables.RUnlock()
	return calls
}

// DescribeRouteTablesPages calls DescribeRouteTablesPagesFunc.
func (mock *ec2ClientMock) DescribeRouteTablesPages(in1 *ec2.DescribeRouteTablesInput, in2 func(*ec2.DescribeRouteTablesOutput, bool) bool) error {
	if mock.DescribeRouteTablesPagesFunc == nil {
		panic("ec2ClientMock.DescribeRouteTablesPagesFunc: method is nil but ec2Client.DescribeRouteTablesPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeRouteTablesInput
		In2 func(*ec2.DescribeRouteTablesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeRouteTablesPages.Lock()
	mock.calls.DescribeRouteTablesPages = append(mock.calls.DescribeRouteTablesPages, callInfo)
	lockec2ClientMockDescribeRouteTablesPages.Unlock()
	return mock.DescribeRouteTablesPagesFunc(in1, in2)
}

// DescribeRouteTablesPagesCalls gets all the calls that were made to DescribeRouteTablesPages.
// Check the length with:
//     len(mockedec2Client.DescribeRouteTablesPagesCalls())
func (mock *ec2ClientMock) DescribeRouteTablesPagesCalls() []struct {
	In1 *ec2.DescribeRouteTablesInput
	In2 func(*ec2.DescribeRouteTablesOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeRouteTablesInput
		In2 func(*ec2.DescribeRouteTablesOutput, bool) bool
	}
	lockec2ClientMockDescribeRouteTablesPages.RLock()
	calls = mock.calls.DescribeRouteTablesPages
	lockec2ClientMockDescribeRouteTablesPages.RUnlock()
	return calls
}

// DescribeRouteTablesPagesWithContext calls DescribeRouteTablesPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeRouteTablesPagesWithContext(in1 context.Context, in2 *ec2.DescribeRouteTablesInput, in3 func(*ec2.DescribeRouteTablesOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeRouteTablesPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeRouteTablesPagesWithContextFunc: method is nil but ec2Client.DescribeRouteTablesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeRouteTablesInput
		In3 func(*ec2.DescribeRouteTablesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeRouteTablesPagesWithContext.Lock()
	mock.calls.DescribeRouteTablesPagesWithContext = append(mock.calls.DescribeRouteTablesPagesWithContext, callInfo)
	lockec2ClientMockDescribeRouteTablesPagesWithContext.Unlock()
	return mock.DescribeRouteTablesPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeRouteTablesPagesWithContextCalls gets all the calls that were made to DescribeRouteTablesPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeRouteTablesPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeRouteTablesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeRouteTablesInput
	In3 func(*ec2.DescribeRouteTablesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeRouteTablesInput
		In3 func(*ec2.DescribeRouteTablesOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeRouteTablesPagesWithContext.RLock()
	calls = mock.calls.DescribeRouteTablesPagesWithContext
	lockec2ClientMockDescribeRouteTablesPagesWithContext.RUnlock()
	return calls
}

// DescribeRouteTablesRequest calls DescribeRouteTablesRequestFunc.
func (mock *ec2ClientMock) DescribeRouteTablesRequest(in1 *ec2.DescribeRouteTablesInput) (*request.Request, *ec2.DescribeRouteTablesOutput) {
	if mock.DescribeRouteTablesRequestFunc == nil {
		panic("ec2ClientMock.DescribeRouteTablesRequestFunc: method is nil but ec2Client.DescribeRouteTablesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeRouteTablesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeRouteTablesRequest.Lock()
	mock.calls.DescribeRouteTablesRequest = append(mock.calls.DescribeRouteTablesRequest, callInfo)
	lockec2ClientMockDescribeRouteTablesRequest.Unlock()
	return mock.DescribeRouteTablesRequestFunc(in1)
}

// DescribeRouteTablesRequestCalls gets all the calls that were made to DescribeRouteTablesRequest.
// Check the length with:
//     len(mockedec2Client.DescribeRouteTablesRequestCalls())
func (mock *ec2ClientMock) DescribeRouteTablesRequestCalls() []struct {
	In1 *ec2.DescribeRouteTablesInput
} {
	var calls []struct {
		In1 *ec2.DescribeRouteTablesInput
	}
	lockec2ClientMockDescribeRouteTablesRequest.RLock()
	calls = mock.calls.DescribeRouteTablesRequest
	lockec2ClientMockDescribeRouteTablesRequest.RUnlock()
	return calls
}

// DescribeRouteTablesWithContext calls DescribeRouteTablesWithContextFunc.
func (mock *ec2ClientMock) DescribeRouteTablesWithContext(in1 context.Context, in2 *ec2.DescribeRouteTablesInput, in3 ...request.Option) (*ec2.DescribeRouteTablesOutput, error) {
	if mock.DescribeRouteTablesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeRouteTablesWithContextFunc: method is nil but ec2Client.DescribeRouteTablesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeRouteTablesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeRouteTablesWithContext.Lock()
	mock.calls.DescribeRouteTablesWithContext = append(mock.calls.DescribeRouteTablesWithContext, callInfo)
	lockec2ClientMockDescribeRouteTablesWithContext.Unlock()
	return mock.DescribeRouteTablesWithContextFunc(in1, in2, in3...)
}

// DescribeRouteTablesWithContextCalls gets all the calls that were made to DescribeRouteTablesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeRouteTablesWithContextCalls())
func (mock *ec2ClientMock) DescribeRouteTablesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeRouteTablesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeRouteTablesInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeRouteTablesWithContext.RLock()
	calls = mock.calls.DescribeRouteTablesWithContext
	lockec2ClientMockDescribeRouteTablesWithContext.RUnlock()
	return calls
}

// DescribeScheduledInstanceAvailability calls DescribeScheduledInstanceAvailabilityFunc.
func (mock *ec2ClientMock) DescribeScheduledInstanceAvailability(in1 *ec2.DescribeScheduledInstanceAvailabilityInput) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error) {
	if mock.DescribeScheduledInstanceAvailabilityFunc == nil {
		panic("ec2ClientMock.DescribeScheduledInstanceAvailabilityFunc: method is nil but ec2Client.DescribeScheduledInstanceAvailability was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeScheduledInstanceAvailabilityInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeScheduledInstanceAvailability.Lock()
	mock.calls.DescribeScheduledInstanceAvailability = append(mock.calls.DescribeScheduledInstanceAvailability, callInfo)
	lockec2ClientMockDescribeScheduledInstanceAvailability.Unlock()
	return mock.DescribeScheduledInstanceAvailabilityFunc(in1)
}

// DescribeScheduledInstanceAvailabilityCalls gets all the calls that were made to DescribeScheduledInstanceAvailability.
// Check the length with:
//     len(mockedec2Client.DescribeScheduledInstanceAvailabilityCalls())
func (mock *ec2ClientMock) DescribeScheduledInstanceAvailabilityCalls() []struct {
	In1 *ec2.DescribeScheduledInstanceAvailabilityInput
} {
	var calls []struct {
		In1 *ec2.DescribeScheduledInstanceAvailabilityInput
	}
	lockec2ClientMockDescribeScheduledInstanceAvailability.RLock()
	calls = mock.calls.DescribeScheduledInstanceAvailability
	lockec2ClientMockDescribeScheduledInstanceAvailability.RUnlock()
	return calls
}

// DescribeScheduledInstanceAvailabilityPages calls DescribeScheduledInstanceAvailabilityPagesFunc.
func (mock *ec2ClientMock) DescribeScheduledInstanceAvailabilityPages(in1 *ec2.DescribeScheduledInstanceAvailabilityInput, in2 func(*ec2.DescribeScheduledInstanceAvailabilityOutput, bool) bool) error {
	if mock.DescribeScheduledInstanceAvailabilityPagesFunc == nil {
		panic("ec2ClientMock.DescribeScheduledInstanceAvailabilityPagesFunc: method is nil but ec2Client.DescribeScheduledInstanceAvailabilityPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeScheduledInstanceAvailabilityInput
		In2 func(*ec2.DescribeScheduledInstanceAvailabilityOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeScheduledInstanceAvailabilityPages.Lock()
	mock.calls.DescribeScheduledInstanceAvailabilityPages = append(mock.calls.DescribeScheduledInstanceAvailabilityPages, callInfo)
	lockec2ClientMockDescribeScheduledInstanceAvailabilityPages.Unlock()
	return mock.DescribeScheduledInstanceAvailabilityPagesFunc(in1, in2)
}

// DescribeScheduledInstanceAvailabilityPagesCalls gets all the calls that were made to DescribeScheduledInstanceAvailabilityPages.
// Check the length with:
//     len(mockedec2Client.DescribeScheduledInstanceAvailabilityPagesCalls())
func (mock *ec2ClientMock) DescribeScheduledInstanceAvailabilityPagesCalls() []struct {
	In1 *ec2.DescribeScheduledInstanceAvailabilityInput
	In2 func(*ec2.DescribeScheduledInstanceAvailabilityOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeScheduledInstanceAvailabilityInput
		In2 func(*ec2.DescribeScheduledInstanceAvailabilityOutput, bool) bool
	}
	lockec2ClientMockDescribeScheduledInstanceAvailabilityPages.RLock()
	calls = mock.calls.DescribeScheduledInstanceAvailabilityPages
	lockec2ClientMockDescribeScheduledInstanceAvailabilityPages.RUnlock()
	return calls
}

// DescribeScheduledInstanceAvailabilityPagesWithContext calls DescribeScheduledInstanceAvailabilityPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeScheduledInstanceAvailabilityPagesWithContext(in1 context.Context, in2 *ec2.DescribeScheduledInstanceAvailabilityInput, in3 func(*ec2.DescribeScheduledInstanceAvailabilityOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeScheduledInstanceAvailabilityPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeScheduledInstanceAvailabilityPagesWithContextFunc: method is nil but ec2Client.DescribeScheduledInstanceAvailabilityPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeScheduledInstanceAvailabilityInput
		In3 func(*ec2.DescribeScheduledInstanceAvailabilityOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeScheduledInstanceAvailabilityPagesWithContext.Lock()
	mock.calls.DescribeScheduledInstanceAvailabilityPagesWithContext = append(mock.calls.DescribeScheduledInstanceAvailabilityPagesWithContext, callInfo)
	lockec2ClientMockDescribeScheduledInstanceAvailabilityPagesWithContext.Unlock()
	return mock.DescribeScheduledInstanceAvailabilityPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeScheduledInstanceAvailabilityPagesWithContextCalls gets all the calls that were made to DescribeScheduledInstanceAvailabilityPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeScheduledInstanceAvailabilityPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeScheduledInstanceAvailabilityPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeScheduledInstanceAvailabilityInput
	In3 func(*ec2.DescribeScheduledInstanceAvailabilityOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeScheduledInstanceAvailabilityInput
		In3 func(*ec2.DescribeScheduledInstanceAvailabilityOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeScheduledInstanceAvailabilityPagesWithContext.RLock()
	calls = mock.calls.DescribeScheduledInstanceAvailabilityPagesWithContext
	lockec2ClientMockDescribeScheduledInstanceAvailabilityPagesWithContext.RUnlock()
	return calls
}

// DescribeScheduledInstanceAvailabilityRequest calls DescribeScheduledInstanceAvailabilityRequestFunc.
func (mock *ec2ClientMock) DescribeScheduledInstanceAvailabilityRequest(in1 *ec2.DescribeScheduledInstanceAvailabilityInput) (*request.Request, *ec2.DescribeScheduledInstanceAvailabilityOutput) {
	if mock.DescribeScheduledInstanceAvailabilityRequestFunc == nil {
		panic("ec2ClientMock.DescribeScheduledInstanceAvailabilityRequestFunc: method is nil but ec2Client.DescribeScheduledInstanceAvailabilityRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeScheduledInstanceAvailabilityInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeScheduledInstanceAvailabilityRequest.Lock()
	mock.calls.DescribeScheduledInstanceAvailabilityRequest = append(mock.calls.DescribeScheduledInstanceAvailabilityRequest, callInfo)
	lockec2ClientMockDescribeScheduledInstanceAvailabilityRequest.Unlock()
	return mock.DescribeScheduledInstanceAvailabilityRequestFunc(in1)
}

// DescribeScheduledInstanceAvailabilityRequestCalls gets all the calls that were made to DescribeScheduledInstanceAvailabilityRequest.
// Check the length with:
//     len(mockedec2Client.DescribeScheduledInstanceAvailabilityRequestCalls())
func (mock *ec2ClientMock) DescribeScheduledInstanceAvailabilityRequestCalls() []struct {
	In1 *ec2.DescribeScheduledInstanceAvailabilityInput
} {
	var calls []struct {
		In1 *ec2.DescribeScheduledInstanceAvailabilityInput
	}
	lockec2ClientMockDescribeScheduledInstanceAvailabilityRequest.RLock()
	calls = mock.calls.DescribeScheduledInstanceAvailabilityRequest
	lockec2ClientMockDescribeScheduledInstanceAvailabilityRequest.RUnlock()
	return calls
}

// DescribeScheduledInstanceAvailabilityWithContext calls DescribeScheduledInstanceAvailabilityWithContextFunc.
func (mock *ec2ClientMock) DescribeScheduledInstanceAvailabilityWithContext(in1 context.Context, in2 *ec2.DescribeScheduledInstanceAvailabilityInput, in3 ...request.Option) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error) {
	if mock.DescribeScheduledInstanceAvailabilityWithContextFunc == nil {
		panic("ec2ClientMock.DescribeScheduledInstanceAvailabilityWithContextFunc: method is nil but ec2Client.DescribeScheduledInstanceAvailabilityWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeScheduledInstanceAvailabilityInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeScheduledInstanceAvailabilityWithContext.Lock()
	mock.calls.DescribeScheduledInstanceAvailabilityWithContext = append(mock.calls.DescribeScheduledInstanceAvailabilityWithContext, callInfo)
	lockec2ClientMockDescribeScheduledInstanceAvailabilityWithContext.Unlock()
	return mock.DescribeScheduledInstanceAvailabilityWithContextFunc(in1, in2, in3...)
}

// DescribeScheduledInstanceAvailabilityWithContextCalls gets all the calls that were made to DescribeScheduledInstanceAvailabilityWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeScheduledInstanceAvailabilityWithContextCalls())
func (mock *ec2ClientMock) DescribeScheduledInstanceAvailabilityWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeScheduledInstanceAvailabilityInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeScheduledInstanceAvailabilityInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeScheduledInstanceAvailabilityWithContext.RLock()
	calls = mock.calls.DescribeScheduledInstanceAvailabilityWithContext
	lockec2ClientMockDescribeScheduledInstanceAvailabilityWithContext.RUnlock()
	return calls
}

// DescribeScheduledInstances calls DescribeScheduledInstancesFunc.
func (mock *ec2ClientMock) DescribeScheduledInstances(in1 *ec2.DescribeScheduledInstancesInput) (*ec2.DescribeScheduledInstancesOutput, error) {
	if mock.DescribeScheduledInstancesFunc == nil {
		panic("ec2ClientMock.DescribeScheduledInstancesFunc: method is nil but ec2Client.DescribeScheduledInstances was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeScheduledInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeScheduledInstances.Lock()
	mock.calls.DescribeScheduledInstances = append(mock.calls.DescribeScheduledInstances, callInfo)
	lockec2ClientMockDescribeScheduledInstances.Unlock()
	return mock.DescribeScheduledInstancesFunc(in1)
}

// DescribeScheduledInstancesCalls gets all the calls that were made to DescribeScheduledInstances.
// Check the length with:
//     len(mockedec2Client.DescribeScheduledInstancesCalls())
func (mock *ec2ClientMock) DescribeScheduledInstancesCalls() []struct {
	In1 *ec2.DescribeScheduledInstancesInput
} {
	var calls []struct {
		In1 *ec2.DescribeScheduledInstancesInput
	}
	lockec2ClientMockDescribeScheduledInstances.RLock()
	calls = mock.calls.DescribeScheduledInstances
	lockec2ClientMockDescribeScheduledInstances.RUnlock()
	return calls
}

// DescribeScheduledInstancesPages calls DescribeScheduledInstancesPagesFunc.
func (mock *ec2ClientMock) DescribeScheduledInstancesPages(in1 *ec2.DescribeScheduledInstancesInput, in2 func(*ec2.DescribeScheduledInstancesOutput, bool) bool) error {
	if mock.DescribeScheduledInstancesPagesFunc == nil {
		panic("ec2ClientMock.DescribeScheduledInstancesPagesFunc: method is nil but ec2Client.DescribeScheduledInstancesPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeScheduledInstancesInput
		In2 func(*ec2.DescribeScheduledInstancesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeScheduledInstancesPages.Lock()
	mock.calls.DescribeScheduledInstancesPages = append(mock.calls.DescribeScheduledInstancesPages, callInfo)
	lockec2ClientMockDescribeScheduledInstancesPages.Unlock()
	return mock.DescribeScheduledInstancesPagesFunc(in1, in2)
}

// DescribeScheduledInstancesPagesCalls gets all the calls that were made to DescribeScheduledInstancesPages.
// Check the length with:
//     len(mockedec2Client.DescribeScheduledInstancesPagesCalls())
func (mock *ec2ClientMock) DescribeScheduledInstancesPagesCalls() []struct {
	In1 *ec2.DescribeScheduledInstancesInput
	In2 func(*ec2.DescribeScheduledInstancesOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeScheduledInstancesInput
		In2 func(*ec2.DescribeScheduledInstancesOutput, bool) bool
	}
	lockec2ClientMockDescribeScheduledInstancesPages.RLock()
	calls = mock.calls.DescribeScheduledInstancesPages
	lockec2ClientMockDescribeScheduledInstancesPages.RUnlock()
	return calls
}

// DescribeScheduledInstancesPagesWithContext calls DescribeScheduledInstancesPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeScheduledInstancesPagesWithContext(in1 context.Context, in2 *ec2.DescribeScheduledInstancesInput, in3 func(*ec2.DescribeScheduledInstancesOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeScheduledInstancesPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeScheduledInstancesPagesWithContextFunc: method is nil but ec2Client.DescribeScheduledInstancesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeScheduledInstancesInput
		In3 func(*ec2.DescribeScheduledInstancesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeScheduledInstancesPagesWithContext.Lock()
	mock.calls.DescribeScheduledInstancesPagesWithContext = append(mock.calls.DescribeScheduledInstancesPagesWithContext, callInfo)
	lockec2ClientMockDescribeScheduledInstancesPagesWithContext.Unlock()
	return mock.DescribeScheduledInstancesPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeScheduledInstancesPagesWithContextCalls gets all the calls that were made to DescribeScheduledInstancesPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeScheduledInstancesPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeScheduledInstancesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeScheduledInstancesInput
	In3 func(*ec2.DescribeScheduledInstancesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeScheduledInstancesInput
		In3 func(*ec2.DescribeScheduledInstancesOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeScheduledInstancesPagesWithContext.RLock()
	calls = mock.calls.DescribeScheduledInstancesPagesWithContext
	lockec2ClientMockDescribeScheduledInstancesPagesWithContext.RUnlock()
	return calls
}

// DescribeScheduledInstancesRequest calls DescribeScheduledInstancesRequestFunc.
func (mock *ec2ClientMock) DescribeScheduledInstancesRequest(in1 *ec2.DescribeScheduledInstancesInput) (*request.Request, *ec2.DescribeScheduledInstancesOutput) {
	if mock.DescribeScheduledInstancesRequestFunc == nil {
		panic("ec2ClientMock.DescribeScheduledInstancesRequestFunc: method is nil but ec2Client.DescribeScheduledInstancesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeScheduledInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeScheduledInstancesRequest.Lock()
	mock.calls.DescribeScheduledInstancesRequest = append(mock.calls.DescribeScheduledInstancesRequest, callInfo)
	lockec2ClientMockDescribeScheduledInstancesRequest.Unlock()
	return mock.DescribeScheduledInstancesRequestFunc(in1)
}

// DescribeScheduledInstancesRequestCalls gets all the calls that were made to DescribeScheduledInstancesRequest.
// Check the length with:
//     len(mockedec2Client.DescribeScheduledInstancesRequestCalls())
func (mock *ec2ClientMock) DescribeScheduledInstancesRequestCalls() []struct {
	In1 *ec2.DescribeScheduledInstancesInput
} {
	var calls []struct {
		In1 *ec2.DescribeScheduledInstancesInput
	}
	lockec2ClientMockDescribeScheduledInstancesRequest.RLock()
	calls = mock.calls.DescribeScheduledInstancesRequest
	lockec2ClientMockDescribeScheduledInstancesRequest.RUnlock()
	return calls
}

// DescribeScheduledInstancesWithContext calls DescribeScheduledInstancesWithContextFunc.
func (mock *ec2ClientMock) DescribeScheduledInstancesWithContext(in1 context.Context, in2 *ec2.DescribeScheduledInstancesInput, in3 ...request.Option) (*ec2.DescribeScheduledInstancesOutput, error) {
	if mock.DescribeScheduledInstancesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeScheduledInstancesWithContextFunc: method is nil but ec2Client.DescribeScheduledInstancesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeScheduledInstancesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeScheduledInstancesWithContext.Lock()
	mock.calls.DescribeScheduledInstancesWithContext = append(mock.calls.DescribeScheduledInstancesWithContext, callInfo)
	lockec2ClientMockDescribeScheduledInstancesWithContext.Unlock()
	return mock.DescribeScheduledInstancesWithContextFunc(in1, in2, in3...)
}

// DescribeScheduledInstancesWithContextCalls gets all the calls that were made to DescribeScheduledInstancesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeScheduledInstancesWithContextCalls())
func (mock *ec2ClientMock) DescribeScheduledInstancesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeScheduledInstancesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeScheduledInstancesInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeScheduledInstancesWithContext.RLock()
	calls = mock.calls.DescribeScheduledInstancesWithContext
	lockec2ClientMockDescribeScheduledInstancesWithContext.RUnlock()
	return calls
}

// DescribeSecurityGroupReferences calls DescribeSecurityGroupReferencesFunc.
func (mock *ec2ClientMock) DescribeSecurityGroupReferences(in1 *ec2.DescribeSecurityGroupReferencesInput) (*ec2.DescribeSecurityGroupReferencesOutput, error) {
	if mock.DescribeSecurityGroupReferencesFunc == nil {
		panic("ec2ClientMock.DescribeSecurityGroupReferencesFunc: method is nil but ec2Client.DescribeSecurityGroupReferences was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSecurityGroupReferencesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeSecurityGroupReferences.Lock()
	mock.calls.DescribeSecurityGroupReferences = append(mock.calls.DescribeSecurityGroupReferences, callInfo)
	lockec2ClientMockDescribeSecurityGroupReferences.Unlock()
	return mock.DescribeSecurityGroupReferencesFunc(in1)
}

// DescribeSecurityGroupReferencesCalls gets all the calls that were made to DescribeSecurityGroupReferences.
// Check the length with:
//     len(mockedec2Client.DescribeSecurityGroupReferencesCalls())
func (mock *ec2ClientMock) DescribeSecurityGroupReferencesCalls() []struct {
	In1 *ec2.DescribeSecurityGroupReferencesInput
} {
	var calls []struct {
		In1 *ec2.DescribeSecurityGroupReferencesInput
	}
	lockec2ClientMockDescribeSecurityGroupReferences.RLock()
	calls = mock.calls.DescribeSecurityGroupReferences
	lockec2ClientMockDescribeSecurityGroupReferences.RUnlock()
	return calls
}

// DescribeSecurityGroupReferencesRequest calls DescribeSecurityGroupReferencesRequestFunc.
func (mock *ec2ClientMock) DescribeSecurityGroupReferencesRequest(in1 *ec2.DescribeSecurityGroupReferencesInput) (*request.Request, *ec2.DescribeSecurityGroupReferencesOutput) {
	if mock.DescribeSecurityGroupReferencesRequestFunc == nil {
		panic("ec2ClientMock.DescribeSecurityGroupReferencesRequestFunc: method is nil but ec2Client.DescribeSecurityGroupReferencesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSecurityGroupReferencesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeSecurityGroupReferencesRequest.Lock()
	mock.calls.DescribeSecurityGroupReferencesRequest = append(mock.calls.DescribeSecurityGroupReferencesRequest, callInfo)
	lockec2ClientMockDescribeSecurityGroupReferencesRequest.Unlock()
	return mock.DescribeSecurityGroupReferencesRequestFunc(in1)
}

// DescribeSecurityGroupReferencesRequestCalls gets all the calls that were made to DescribeSecurityGroupReferencesRequest.
// Check the length with:
//     len(mockedec2Client.DescribeSecurityGroupReferencesRequestCalls())
func (mock *ec2ClientMock) DescribeSecurityGroupReferencesRequestCalls() []struct {
	In1 *ec2.DescribeSecurityGroupReferencesInput
} {
	var calls []struct {
		In1 *ec2.DescribeSecurityGroupReferencesInput
	}
	lockec2ClientMockDescribeSecurityGroupReferencesRequest.RLock()
	calls = mock.calls.DescribeSecurityGroupReferencesRequest
	lockec2ClientMockDescribeSecurityGroupReferencesRequest.RUnlock()
	return calls
}

// DescribeSecurityGroupReferencesWithContext calls DescribeSecurityGroupReferencesWithContextFunc.
func (mock *ec2ClientMock) DescribeSecurityGroupReferencesWithContext(in1 context.Context, in2 *ec2.DescribeSecurityGroupReferencesInput, in3 ...request.Option) (*ec2.DescribeSecurityGroupReferencesOutput, error) {
	if mock.DescribeSecurityGroupReferencesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeSecurityGroupReferencesWithContextFunc: method is nil but ec2Client.DescribeSecurityGroupReferencesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeSecurityGroupReferencesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeSecurityGroupReferencesWithContext.Lock()
	mock.calls.DescribeSecurityGroupReferencesWithContext = append(mock.calls.DescribeSecurityGroupReferencesWithContext, callInfo)
	lockec2ClientMockDescribeSecurityGroupReferencesWithContext.Unlock()
	return mock.DescribeSecurityGroupReferencesWithContextFunc(in1, in2, in3...)
}

// DescribeSecurityGroupReferencesWithContextCalls gets all the calls that were made to DescribeSecurityGroupReferencesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeSecurityGroupReferencesWithContextCalls())
func (mock *ec2ClientMock) DescribeSecurityGroupReferencesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeSecurityGroupReferencesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeSecurityGroupReferencesInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeSecurityGroupReferencesWithContext.RLock()
	calls = mock.calls.DescribeSecurityGroupReferencesWithContext
	lockec2ClientMockDescribeSecurityGroupReferencesWithContext.RUnlock()
	return calls
}

// DescribeSecurityGroups calls DescribeSecurityGroupsFunc.
func (mock *ec2ClientMock) DescribeSecurityGroups(in1 *ec2.DescribeSecurityGroupsInput) (*ec2.DescribeSecurityGroupsOutput, error) {
	if mock.DescribeSecurityGroupsFunc == nil {
		panic("ec2ClientMock.DescribeSecurityGroupsFunc: method is nil but ec2Client.DescribeSecurityGroups was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSecurityGroupsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeSecurityGroups.Lock()
	mock.calls.DescribeSecurityGroups = append(mock.calls.DescribeSecurityGroups, callInfo)
	lockec2ClientMockDescribeSecurityGroups.Unlock()
	return mock.DescribeSecurityGroupsFunc(in1)
}

// DescribeSecurityGroupsCalls gets all the calls that were made to DescribeSecurityGroups.
// Check the length with:
//     len(mockedec2Client.DescribeSecurityGroupsCalls())
func (mock *ec2ClientMock) DescribeSecurityGroupsCalls() []struct {
	In1 *ec2.DescribeSecurityGroupsInput
} {
	var calls []struct {
		In1 *ec2.DescribeSecurityGroupsInput
	}
	lockec2ClientMockDescribeSecurityGroups.RLock()
	calls = mock.calls.DescribeSecurityGroups
	lockec2ClientMockDescribeSecurityGroups.RUnlock()
	return calls
}

// DescribeSecurityGroupsPages calls DescribeSecurityGroupsPagesFunc.
func (mock *ec2ClientMock) DescribeSecurityGroupsPages(in1 *ec2.DescribeSecurityGroupsInput, in2 func(*ec2.DescribeSecurityGroupsOutput, bool) bool) error {
	if mock.DescribeSecurityGroupsPagesFunc == nil {
		panic("ec2ClientMock.DescribeSecurityGroupsPagesFunc: method is nil but ec2Client.DescribeSecurityGroupsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSecurityGroupsInput
		In2 func(*ec2.DescribeSecurityGroupsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeSecurityGroupsPages.Lock()
	mock.calls.DescribeSecurityGroupsPages = append(mock.calls.DescribeSecurityGroupsPages, callInfo)
	lockec2ClientMockDescribeSecurityGroupsPages.Unlock()
	return mock.DescribeSecurityGroupsPagesFunc(in1, in2)
}

// DescribeSecurityGroupsPagesCalls gets all the calls that were made to DescribeSecurityGroupsPages.
// Check the length with:
//     len(mockedec2Client.DescribeSecurityGroupsPagesCalls())
func (mock *ec2ClientMock) DescribeSecurityGroupsPagesCalls() []struct {
	In1 *ec2.DescribeSecurityGroupsInput
	In2 func(*ec2.DescribeSecurityGroupsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeSecurityGroupsInput
		In2 func(*ec2.DescribeSecurityGroupsOutput, bool) bool
	}
	lockec2ClientMockDescribeSecurityGroupsPages.RLock()
	calls = mock.calls.DescribeSecurityGroupsPages
	lockec2ClientMockDescribeSecurityGroupsPages.RUnlock()
	return calls
}

// DescribeSecurityGroupsPagesWithContext calls DescribeSecurityGroupsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeSecurityGroupsPagesWithContext(in1 context.Context, in2 *ec2.DescribeSecurityGroupsInput, in3 func(*ec2.DescribeSecurityGroupsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeSecurityGroupsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeSecurityGroupsPagesWithContextFunc: method is nil but ec2Client.DescribeSecurityGroupsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeSecurityGroupsInput
		In3 func(*ec2.DescribeSecurityGroupsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeSecurityGroupsPagesWithContext.Lock()
	mock.calls.DescribeSecurityGroupsPagesWithContext = append(mock.calls.DescribeSecurityGroupsPagesWithContext, callInfo)
	lockec2ClientMockDescribeSecurityGroupsPagesWithContext.Unlock()
	return mock.DescribeSecurityGroupsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeSecurityGroupsPagesWithContextCalls gets all the calls that were made to DescribeSecurityGroupsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeSecurityGroupsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeSecurityGroupsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeSecurityGroupsInput
	In3 func(*ec2.DescribeSecurityGroupsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeSecurityGroupsInput
		In3 func(*ec2.DescribeSecurityGroupsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeSecurityGroupsPagesWithContext.RLock()
	calls = mock.calls.DescribeSecurityGroupsPagesWithContext
	lockec2ClientMockDescribeSecurityGroupsPagesWithContext.RUnlock()
	return calls
}

// DescribeSecurityGroupsRequest calls DescribeSecurityGroupsRequestFunc.
func (mock *ec2ClientMock) DescribeSecurityGroupsRequest(in1 *ec2.DescribeSecurityGroupsInput) (*request.Request, *ec2.DescribeSecurityGroupsOutput) {
	if mock.DescribeSecurityGroupsRequestFunc == nil {
		panic("ec2ClientMock.DescribeSecurityGroupsRequestFunc: method is nil but ec2Client.DescribeSecurityGroupsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSecurityGroupsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeSecurityGroupsRequest.Lock()
	mock.calls.DescribeSecurityGroupsRequest = append(mock.calls.DescribeSecurityGroupsRequest, callInfo)
	lockec2ClientMockDescribeSecurityGroupsRequest.Unlock()
	return mock.DescribeSecurityGroupsRequestFunc(in1)
}

// DescribeSecurityGroupsRequestCalls gets all the calls that were made to DescribeSecurityGroupsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeSecurityGroupsRequestCalls())
func (mock *ec2ClientMock) DescribeSecurityGroupsRequestCalls() []struct {
	In1 *ec2.DescribeSecurityGroupsInput
} {
	var calls []struct {
		In1 *ec2.DescribeSecurityGroupsInput
	}
	lockec2ClientMockDescribeSecurityGroupsRequest.RLock()
	calls = mock.calls.DescribeSecurityGroupsRequest
	lockec2ClientMockDescribeSecurityGroupsRequest.RUnlock()
	return calls
}

// DescribeSecurityGroupsWithContext calls DescribeSecurityGroupsWithContextFunc.
func (mock *ec2ClientMock) DescribeSecurityGroupsWithContext(in1 context.Context, in2 *ec2.DescribeSecurityGroupsInput, in3 ...request.Option) (*ec2.DescribeSecurityGroupsOutput, error) {
	if mock.DescribeSecurityGroupsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeSecurityGroupsWithContextFunc: method is nil but ec2Client.DescribeSecurityGroupsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeSecurityGroupsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeSecurityGroupsWithContext.Lock()
	mock.calls.DescribeSecurityGroupsWithContext = append(mock.calls.DescribeSecurityGroupsWithContext, callInfo)
	lockec2ClientMockDescribeSecurityGroupsWithContext.Unlock()
	return mock.DescribeSecurityGroupsWithContextFunc(in1, in2, in3...)
}

// DescribeSecurityGroupsWithContextCalls gets all the calls that were made to DescribeSecurityGroupsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeSecurityGroupsWithContextCalls())
func (mock *ec2ClientMock) DescribeSecurityGroupsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeSecurityGroupsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeSecurityGroupsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeSecurityGroupsWithContext.RLock()
	calls = mock.calls.DescribeSecurityGroupsWithContext
	lockec2ClientMockDescribeSecurityGroupsWithContext.RUnlock()
	return calls
}

// DescribeSnapshotAttribute calls DescribeSnapshotAttributeFunc.
func (mock *ec2ClientMock) DescribeSnapshotAttribute(in1 *ec2.DescribeSnapshotAttributeInput) (*ec2.DescribeSnapshotAttributeOutput, error) {
	if mock.DescribeSnapshotAttributeFunc == nil {
		panic("ec2ClientMock.DescribeSnapshotAttributeFunc: method is nil but ec2Client.DescribeSnapshotAttribute was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSnapshotAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeSnapshotAttribute.Lock()
	mock.calls.DescribeSnapshotAttribute = append(mock.calls.DescribeSnapshotAttribute, callInfo)
	lockec2ClientMockDescribeSnapshotAttribute.Unlock()
	return mock.DescribeSnapshotAttributeFunc(in1)
}

// DescribeSnapshotAttributeCalls gets all the calls that were made to DescribeSnapshotAttribute.
// Check the length with:
//     len(mockedec2Client.DescribeSnapshotAttributeCalls())
func (mock *ec2ClientMock) DescribeSnapshotAttributeCalls() []struct {
	In1 *ec2.DescribeSnapshotAttributeInput
} {
	var calls []struct {
		In1 *ec2.DescribeSnapshotAttributeInput
	}
	lockec2ClientMockDescribeSnapshotAttribute.RLock()
	calls = mock.calls.DescribeSnapshotAttribute
	lockec2ClientMockDescribeSnapshotAttribute.RUnlock()
	return calls
}

// DescribeSnapshotAttributeRequest calls DescribeSnapshotAttributeRequestFunc.
func (mock *ec2ClientMock) DescribeSnapshotAttributeRequest(in1 *ec2.DescribeSnapshotAttributeInput) (*request.Request, *ec2.DescribeSnapshotAttributeOutput) {
	if mock.DescribeSnapshotAttributeRequestFunc == nil {
		panic("ec2ClientMock.DescribeSnapshotAttributeRequestFunc: method is nil but ec2Client.DescribeSnapshotAttributeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSnapshotAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeSnapshotAttributeRequest.Lock()
	mock.calls.DescribeSnapshotAttributeRequest = append(mock.calls.DescribeSnapshotAttributeRequest, callInfo)
	lockec2ClientMockDescribeSnapshotAttributeRequest.Unlock()
	return mock.DescribeSnapshotAttributeRequestFunc(in1)
}

// DescribeSnapshotAttributeRequestCalls gets all the calls that were made to DescribeSnapshotAttributeRequest.
// Check the length with:
//     len(mockedec2Client.DescribeSnapshotAttributeRequestCalls())
func (mock *ec2ClientMock) DescribeSnapshotAttributeRequestCalls() []struct {
	In1 *ec2.DescribeSnapshotAttributeInput
} {
	var calls []struct {
		In1 *ec2.DescribeSnapshotAttributeInput
	}
	lockec2ClientMockDescribeSnapshotAttributeRequest.RLock()
	calls = mock.calls.DescribeSnapshotAttributeRequest
	lockec2ClientMockDescribeSnapshotAttributeRequest.RUnlock()
	return calls
}

// DescribeSnapshotAttributeWithContext calls DescribeSnapshotAttributeWithContextFunc.
func (mock *ec2ClientMock) DescribeSnapshotAttributeWithContext(in1 context.Context, in2 *ec2.DescribeSnapshotAttributeInput, in3 ...request.Option) (*ec2.DescribeSnapshotAttributeOutput, error) {
	if mock.DescribeSnapshotAttributeWithContextFunc == nil {
		panic("ec2ClientMock.DescribeSnapshotAttributeWithContextFunc: method is nil but ec2Client.DescribeSnapshotAttributeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeSnapshotAttributeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeSnapshotAttributeWithContext.Lock()
	mock.calls.DescribeSnapshotAttributeWithContext = append(mock.calls.DescribeSnapshotAttributeWithContext, callInfo)
	lockec2ClientMockDescribeSnapshotAttributeWithContext.Unlock()
	return mock.DescribeSnapshotAttributeWithContextFunc(in1, in2, in3...)
}

// DescribeSnapshotAttributeWithContextCalls gets all the calls that were made to DescribeSnapshotAttributeWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeSnapshotAttributeWithContextCalls())
func (mock *ec2ClientMock) DescribeSnapshotAttributeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeSnapshotAttributeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeSnapshotAttributeInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeSnapshotAttributeWithContext.RLock()
	calls = mock.calls.DescribeSnapshotAttributeWithContext
	lockec2ClientMockDescribeSnapshotAttributeWithContext.RUnlock()
	return calls
}

// DescribeSnapshots calls DescribeSnapshotsFunc.
func (mock *ec2ClientMock) DescribeSnapshots(in1 *ec2.DescribeSnapshotsInput) (*ec2.DescribeSnapshotsOutput, error) {
	if mock.DescribeSnapshotsFunc == nil {
		panic("ec2ClientMock.DescribeSnapshotsFunc: method is nil but ec2Client.DescribeSnapshots was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSnapshotsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeSnapshots.Lock()
	mock.calls.DescribeSnapshots = append(mock.calls.DescribeSnapshots, callInfo)
	lockec2ClientMockDescribeSnapshots.Unlock()
	return mock.DescribeSnapshotsFunc(in1)
}

// DescribeSnapshotsCalls gets all the calls that were made to DescribeSnapshots.
// Check the length with:
//     len(mockedec2Client.DescribeSnapshotsCalls())
func (mock *ec2ClientMock) DescribeSnapshotsCalls() []struct {
	In1 *ec2.DescribeSnapshotsInput
} {
	var calls []struct {
		In1 *ec2.DescribeSnapshotsInput
	}
	lockec2ClientMockDescribeSnapshots.RLock()
	calls = mock.calls.DescribeSnapshots
	lockec2ClientMockDescribeSnapshots.RUnlock()
	return calls
}

// DescribeSnapshotsPages calls DescribeSnapshotsPagesFunc.
func (mock *ec2ClientMock) DescribeSnapshotsPages(in1 *ec2.DescribeSnapshotsInput, in2 func(*ec2.DescribeSnapshotsOutput, bool) bool) error {
	if mock.DescribeSnapshotsPagesFunc == nil {
		panic("ec2ClientMock.DescribeSnapshotsPagesFunc: method is nil but ec2Client.DescribeSnapshotsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSnapshotsInput
		In2 func(*ec2.DescribeSnapshotsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeSnapshotsPages.Lock()
	mock.calls.DescribeSnapshotsPages = append(mock.calls.DescribeSnapshotsPages, callInfo)
	lockec2ClientMockDescribeSnapshotsPages.Unlock()
	return mock.DescribeSnapshotsPagesFunc(in1, in2)
}

// DescribeSnapshotsPagesCalls gets all the calls that were made to DescribeSnapshotsPages.
// Check the length with:
//     len(mockedec2Client.DescribeSnapshotsPagesCalls())
func (mock *ec2ClientMock) DescribeSnapshotsPagesCalls() []struct {
	In1 *ec2.DescribeSnapshotsInput
	In2 func(*ec2.DescribeSnapshotsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeSnapshotsInput
		In2 func(*ec2.DescribeSnapshotsOutput, bool) bool
	}
	lockec2ClientMockDescribeSnapshotsPages.RLock()
	calls = mock.calls.DescribeSnapshotsPages
	lockec2ClientMockDescribeSnapshotsPages.RUnlock()
	return calls
}

// DescribeSnapshotsPagesWithContext calls DescribeSnapshotsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeSnapshotsPagesWithContext(in1 context.Context, in2 *ec2.DescribeSnapshotsInput, in3 func(*ec2.DescribeSnapshotsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeSnapshotsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeSnapshotsPagesWithContextFunc: method is nil but ec2Client.DescribeSnapshotsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeSnapshotsInput
		In3 func(*ec2.DescribeSnapshotsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeSnapshotsPagesWithContext.Lock()
	mock.calls.DescribeSnapshotsPagesWithContext = append(mock.calls.DescribeSnapshotsPagesWithContext, callInfo)
	lockec2ClientMockDescribeSnapshotsPagesWithContext.Unlock()
	return mock.DescribeSnapshotsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeSnapshotsPagesWithContextCalls gets all the calls that were made to DescribeSnapshotsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeSnapshotsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeSnapshotsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeSnapshotsInput
	In3 func(*ec2.DescribeSnapshotsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeSnapshotsInput
		In3 func(*ec2.DescribeSnapshotsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeSnapshotsPagesWithContext.RLock()
	calls = mock.calls.DescribeSnapshotsPagesWithContext
	lockec2ClientMockDescribeSnapshotsPagesWithContext.RUnlock()
	return calls
}

// DescribeSnapshotsRequest calls DescribeSnapshotsRequestFunc.
func (mock *ec2ClientMock) DescribeSnapshotsRequest(in1 *ec2.DescribeSnapshotsInput) (*request.Request, *ec2.DescribeSnapshotsOutput) {
	if mock.DescribeSnapshotsRequestFunc == nil {
		panic("ec2ClientMock.DescribeSnapshotsRequestFunc: method is nil but ec2Client.DescribeSnapshotsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSnapshotsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeSnapshotsRequest.Lock()
	mock.calls.DescribeSnapshotsRequest = append(mock.calls.DescribeSnapshotsRequest, callInfo)
	lockec2ClientMockDescribeSnapshotsRequest.Unlock()
	return mock.DescribeSnapshotsRequestFunc(in1)
}

// DescribeSnapshotsRequestCalls gets all the calls that were made to DescribeSnapshotsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeSnapshotsRequestCalls())
func (mock *ec2ClientMock) DescribeSnapshotsRequestCalls() []struct {
	In1 *ec2.DescribeSnapshotsInput
} {
	var calls []struct {
		In1 *ec2.DescribeSnapshotsInput
	}
	lockec2ClientMockDescribeSnapshotsRequest.RLock()
	calls = mock.calls.DescribeSnapshotsRequest
	lockec2ClientMockDescribeSnapshotsRequest.RUnlock()
	return calls
}

// DescribeSnapshotsWithContext calls DescribeSnapshotsWithContextFunc.
func (mock *ec2ClientMock) DescribeSnapshotsWithContext(in1 context.Context, in2 *ec2.DescribeSnapshotsInput, in3 ...request.Option) (*ec2.DescribeSnapshotsOutput, error) {
	if mock.DescribeSnapshotsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeSnapshotsWithContextFunc: method is nil but ec2Client.DescribeSnapshotsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeSnapshotsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeSnapshotsWithContext.Lock()
	mock.calls.DescribeSnapshotsWithContext = append(mock.calls.DescribeSnapshotsWithContext, callInfo)
	lockec2ClientMockDescribeSnapshotsWithContext.Unlock()
	return mock.DescribeSnapshotsWithContextFunc(in1, in2, in3...)
}

// DescribeSnapshotsWithContextCalls gets all the calls that were made to DescribeSnapshotsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeSnapshotsWithContextCalls())
func (mock *ec2ClientMock) DescribeSnapshotsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeSnapshotsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeSnapshotsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeSnapshotsWithContext.RLock()
	calls = mock.calls.DescribeSnapshotsWithContext
	lockec2ClientMockDescribeSnapshotsWithContext.RUnlock()
	return calls
}

// DescribeSpotDatafeedSubscription calls DescribeSpotDatafeedSubscriptionFunc.
func (mock *ec2ClientMock) DescribeSpotDatafeedSubscription(in1 *ec2.DescribeSpotDatafeedSubscriptionInput) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error) {
	if mock.DescribeSpotDatafeedSubscriptionFunc == nil {
		panic("ec2ClientMock.DescribeSpotDatafeedSubscriptionFunc: method is nil but ec2Client.DescribeSpotDatafeedSubscription was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSpotDatafeedSubscriptionInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeSpotDatafeedSubscription.Lock()
	mock.calls.DescribeSpotDatafeedSubscription = append(mock.calls.DescribeSpotDatafeedSubscription, callInfo)
	lockec2ClientMockDescribeSpotDatafeedSubscription.Unlock()
	return mock.DescribeSpotDatafeedSubscriptionFunc(in1)
}

// DescribeSpotDatafeedSubscriptionCalls gets all the calls that were made to DescribeSpotDatafeedSubscription.
// Check the length with:
//     len(mockedec2Client.DescribeSpotDatafeedSubscriptionCalls())
func (mock *ec2ClientMock) DescribeSpotDatafeedSubscriptionCalls() []struct {
	In1 *ec2.DescribeSpotDatafeedSubscriptionInput
} {
	var calls []struct {
		In1 *ec2.DescribeSpotDatafeedSubscriptionInput
	}
	lockec2ClientMockDescribeSpotDatafeedSubscription.RLock()
	calls = mock.calls.DescribeSpotDatafeedSubscription
	lockec2ClientMockDescribeSpotDatafeedSubscription.RUnlock()
	return calls
}

// DescribeSpotDatafeedSubscriptionRequest calls DescribeSpotDatafeedSubscriptionRequestFunc.
func (mock *ec2ClientMock) DescribeSpotDatafeedSubscriptionRequest(in1 *ec2.DescribeSpotDatafeedSubscriptionInput) (*request.Request, *ec2.DescribeSpotDatafeedSubscriptionOutput) {
	if mock.DescribeSpotDatafeedSubscriptionRequestFunc == nil {
		panic("ec2ClientMock.DescribeSpotDatafeedSubscriptionRequestFunc: method is nil but ec2Client.DescribeSpotDatafeedSubscriptionRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSpotDatafeedSubscriptionInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeSpotDatafeedSubscriptionRequest.Lock()
	mock.calls.DescribeSpotDatafeedSubscriptionRequest = append(mock.calls.DescribeSpotDatafeedSubscriptionRequest, callInfo)
	lockec2ClientMockDescribeSpotDatafeedSubscriptionRequest.Unlock()
	return mock.DescribeSpotDatafeedSubscriptionRequestFunc(in1)
}

// DescribeSpotDatafeedSubscriptionRequestCalls gets all the calls that were made to DescribeSpotDatafeedSubscriptionRequest.
// Check the length with:
//     len(mockedec2Client.DescribeSpotDatafeedSubscriptionRequestCalls())
func (mock *ec2ClientMock) DescribeSpotDatafeedSubscriptionRequestCalls() []struct {
	In1 *ec2.DescribeSpotDatafeedSubscriptionInput
} {
	var calls []struct {
		In1 *ec2.DescribeSpotDatafeedSubscriptionInput
	}
	lockec2ClientMockDescribeSpotDatafeedSubscriptionRequest.RLock()
	calls = mock.calls.DescribeSpotDatafeedSubscriptionRequest
	lockec2ClientMockDescribeSpotDatafeedSubscriptionRequest.RUnlock()
	return calls
}

// DescribeSpotDatafeedSubscriptionWithContext calls DescribeSpotDatafeedSubscriptionWithContextFunc.
func (mock *ec2ClientMock) DescribeSpotDatafeedSubscriptionWithContext(in1 context.Context, in2 *ec2.DescribeSpotDatafeedSubscriptionInput, in3 ...request.Option) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error) {
	if mock.DescribeSpotDatafeedSubscriptionWithContextFunc == nil {
		panic("ec2ClientMock.DescribeSpotDatafeedSubscriptionWithContextFunc: method is nil but ec2Client.DescribeSpotDatafeedSubscriptionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeSpotDatafeedSubscriptionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeSpotDatafeedSubscriptionWithContext.Lock()
	mock.calls.DescribeSpotDatafeedSubscriptionWithContext = append(mock.calls.DescribeSpotDatafeedSubscriptionWithContext, callInfo)
	lockec2ClientMockDescribeSpotDatafeedSubscriptionWithContext.Unlock()
	return mock.DescribeSpotDatafeedSubscriptionWithContextFunc(in1, in2, in3...)
}

// DescribeSpotDatafeedSubscriptionWithContextCalls gets all the calls that were made to DescribeSpotDatafeedSubscriptionWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeSpotDatafeedSubscriptionWithContextCalls())
func (mock *ec2ClientMock) DescribeSpotDatafeedSubscriptionWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeSpotDatafeedSubscriptionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeSpotDatafeedSubscriptionInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeSpotDatafeedSubscriptionWithContext.RLock()
	calls = mock.calls.DescribeSpotDatafeedSubscriptionWithContext
	lockec2ClientMockDescribeSpotDatafeedSubscriptionWithContext.RUnlock()
	return calls
}

// DescribeSpotFleetInstances calls DescribeSpotFleetInstancesFunc.
func (mock *ec2ClientMock) DescribeSpotFleetInstances(in1 *ec2.DescribeSpotFleetInstancesInput) (*ec2.DescribeSpotFleetInstancesOutput, error) {
	if mock.DescribeSpotFleetInstancesFunc == nil {
		panic("ec2ClientMock.DescribeSpotFleetInstancesFunc: method is nil but ec2Client.DescribeSpotFleetInstances was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSpotFleetInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeSpotFleetInstances.Lock()
	mock.calls.DescribeSpotFleetInstances = append(mock.calls.DescribeSpotFleetInstances, callInfo)
	lockec2ClientMockDescribeSpotFleetInstances.Unlock()
	return mock.DescribeSpotFleetInstancesFunc(in1)
}

// DescribeSpotFleetInstancesCalls gets all the calls that were made to DescribeSpotFleetInstances.
// Check the length with:
//     len(mockedec2Client.DescribeSpotFleetInstancesCalls())
func (mock *ec2ClientMock) DescribeSpotFleetInstancesCalls() []struct {
	In1 *ec2.DescribeSpotFleetInstancesInput
} {
	var calls []struct {
		In1 *ec2.DescribeSpotFleetInstancesInput
	}
	lockec2ClientMockDescribeSpotFleetInstances.RLock()
	calls = mock.calls.DescribeSpotFleetInstances
	lockec2ClientMockDescribeSpotFleetInstances.RUnlock()
	return calls
}

// DescribeSpotFleetInstancesRequest calls DescribeSpotFleetInstancesRequestFunc.
func (mock *ec2ClientMock) DescribeSpotFleetInstancesRequest(in1 *ec2.DescribeSpotFleetInstancesInput) (*request.Request, *ec2.DescribeSpotFleetInstancesOutput) {
	if mock.DescribeSpotFleetInstancesRequestFunc == nil {
		panic("ec2ClientMock.DescribeSpotFleetInstancesRequestFunc: method is nil but ec2Client.DescribeSpotFleetInstancesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSpotFleetInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeSpotFleetInstancesRequest.Lock()
	mock.calls.DescribeSpotFleetInstancesRequest = append(mock.calls.DescribeSpotFleetInstancesRequest, callInfo)
	lockec2ClientMockDescribeSpotFleetInstancesRequest.Unlock()
	return mock.DescribeSpotFleetInstancesRequestFunc(in1)
}

// DescribeSpotFleetInstancesRequestCalls gets all the calls that were made to DescribeSpotFleetInstancesRequest.
// Check the length with:
//     len(mockedec2Client.DescribeSpotFleetInstancesRequestCalls())
func (mock *ec2ClientMock) DescribeSpotFleetInstancesRequestCalls() []struct {
	In1 *ec2.DescribeSpotFleetInstancesInput
} {
	var calls []struct {
		In1 *ec2.DescribeSpotFleetInstancesInput
	}
	lockec2ClientMockDescribeSpotFleetInstancesRequest.RLock()
	calls = mock.calls.DescribeSpotFleetInstancesRequest
	lockec2ClientMockDescribeSpotFleetInstancesRequest.RUnlock()
	return calls
}

// DescribeSpotFleetInstancesWithContext calls DescribeSpotFleetInstancesWithContextFunc.
func (mock *ec2ClientMock) DescribeSpotFleetInstancesWithContext(in1 context.Context, in2 *ec2.DescribeSpotFleetInstancesInput, in3 ...request.Option) (*ec2.DescribeSpotFleetInstancesOutput, error) {
	if mock.DescribeSpotFleetInstancesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeSpotFleetInstancesWithContextFunc: method is nil but ec2Client.DescribeSpotFleetInstancesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeSpotFleetInstancesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeSpotFleetInstancesWithContext.Lock()
	mock.calls.DescribeSpotFleetInstancesWithContext = append(mock.calls.DescribeSpotFleetInstancesWithContext, callInfo)
	lockec2ClientMockDescribeSpotFleetInstancesWithContext.Unlock()
	return mock.DescribeSpotFleetInstancesWithContextFunc(in1, in2, in3...)
}

// DescribeSpotFleetInstancesWithContextCalls gets all the calls that were made to DescribeSpotFleetInstancesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeSpotFleetInstancesWithContextCalls())
func (mock *ec2ClientMock) DescribeSpotFleetInstancesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeSpotFleetInstancesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeSpotFleetInstancesInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeSpotFleetInstancesWithContext.RLock()
	calls = mock.calls.DescribeSpotFleetInstancesWithContext
	lockec2ClientMockDescribeSpotFleetInstancesWithContext.RUnlock()
	return calls
}

// DescribeSpotFleetRequestHistory calls DescribeSpotFleetRequestHistoryFunc.
func (mock *ec2ClientMock) DescribeSpotFleetRequestHistory(in1 *ec2.DescribeSpotFleetRequestHistoryInput) (*ec2.DescribeSpotFleetRequestHistoryOutput, error) {
	if mock.DescribeSpotFleetRequestHistoryFunc == nil {
		panic("ec2ClientMock.DescribeSpotFleetRequestHistoryFunc: method is nil but ec2Client.DescribeSpotFleetRequestHistory was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSpotFleetRequestHistoryInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeSpotFleetRequestHistory.Lock()
	mock.calls.DescribeSpotFleetRequestHistory = append(mock.calls.DescribeSpotFleetRequestHistory, callInfo)
	lockec2ClientMockDescribeSpotFleetRequestHistory.Unlock()
	return mock.DescribeSpotFleetRequestHistoryFunc(in1)
}

// DescribeSpotFleetRequestHistoryCalls gets all the calls that were made to DescribeSpotFleetRequestHistory.
// Check the length with:
//     len(mockedec2Client.DescribeSpotFleetRequestHistoryCalls())
func (mock *ec2ClientMock) DescribeSpotFleetRequestHistoryCalls() []struct {
	In1 *ec2.DescribeSpotFleetRequestHistoryInput
} {
	var calls []struct {
		In1 *ec2.DescribeSpotFleetRequestHistoryInput
	}
	lockec2ClientMockDescribeSpotFleetRequestHistory.RLock()
	calls = mock.calls.DescribeSpotFleetRequestHistory
	lockec2ClientMockDescribeSpotFleetRequestHistory.RUnlock()
	return calls
}

// DescribeSpotFleetRequestHistoryRequest calls DescribeSpotFleetRequestHistoryRequestFunc.
func (mock *ec2ClientMock) DescribeSpotFleetRequestHistoryRequest(in1 *ec2.DescribeSpotFleetRequestHistoryInput) (*request.Request, *ec2.DescribeSpotFleetRequestHistoryOutput) {
	if mock.DescribeSpotFleetRequestHistoryRequestFunc == nil {
		panic("ec2ClientMock.DescribeSpotFleetRequestHistoryRequestFunc: method is nil but ec2Client.DescribeSpotFleetRequestHistoryRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSpotFleetRequestHistoryInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeSpotFleetRequestHistoryRequest.Lock()
	mock.calls.DescribeSpotFleetRequestHistoryRequest = append(mock.calls.DescribeSpotFleetRequestHistoryRequest, callInfo)
	lockec2ClientMockDescribeSpotFleetRequestHistoryRequest.Unlock()
	return mock.DescribeSpotFleetRequestHistoryRequestFunc(in1)
}

// DescribeSpotFleetRequestHistoryRequestCalls gets all the calls that were made to DescribeSpotFleetRequestHistoryRequest.
// Check the length with:
//     len(mockedec2Client.DescribeSpotFleetRequestHistoryRequestCalls())
func (mock *ec2ClientMock) DescribeSpotFleetRequestHistoryRequestCalls() []struct {
	In1 *ec2.DescribeSpotFleetRequestHistoryInput
} {
	var calls []struct {
		In1 *ec2.DescribeSpotFleetRequestHistoryInput
	}
	lockec2ClientMockDescribeSpotFleetRequestHistoryRequest.RLock()
	calls = mock.calls.DescribeSpotFleetRequestHistoryRequest
	lockec2ClientMockDescribeSpotFleetRequestHistoryRequest.RUnlock()
	return calls
}

// DescribeSpotFleetRequestHistoryWithContext calls DescribeSpotFleetRequestHistoryWithContextFunc.
func (mock *ec2ClientMock) DescribeSpotFleetRequestHistoryWithContext(in1 context.Context, in2 *ec2.DescribeSpotFleetRequestHistoryInput, in3 ...request.Option) (*ec2.DescribeSpotFleetRequestHistoryOutput, error) {
	if mock.DescribeSpotFleetRequestHistoryWithContextFunc == nil {
		panic("ec2ClientMock.DescribeSpotFleetRequestHistoryWithContextFunc: method is nil but ec2Client.DescribeSpotFleetRequestHistoryWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeSpotFleetRequestHistoryInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeSpotFleetRequestHistoryWithContext.Lock()
	mock.calls.DescribeSpotFleetRequestHistoryWithContext = append(mock.calls.DescribeSpotFleetRequestHistoryWithContext, callInfo)
	lockec2ClientMockDescribeSpotFleetRequestHistoryWithContext.Unlock()
	return mock.DescribeSpotFleetRequestHistoryWithContextFunc(in1, in2, in3...)
}

// DescribeSpotFleetRequestHistoryWithContextCalls gets all the calls that were made to DescribeSpotFleetRequestHistoryWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeSpotFleetRequestHistoryWithContextCalls())
func (mock *ec2ClientMock) DescribeSpotFleetRequestHistoryWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeSpotFleetRequestHistoryInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeSpotFleetRequestHistoryInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeSpotFleetRequestHistoryWithContext.RLock()
	calls = mock.calls.DescribeSpotFleetRequestHistoryWithContext
	lockec2ClientMockDescribeSpotFleetRequestHistoryWithContext.RUnlock()
	return calls
}

// DescribeSpotFleetRequests calls DescribeSpotFleetRequestsFunc.
func (mock *ec2ClientMock) DescribeSpotFleetRequests(in1 *ec2.DescribeSpotFleetRequestsInput) (*ec2.DescribeSpotFleetRequestsOutput, error) {
	if mock.DescribeSpotFleetRequestsFunc == nil {
		panic("ec2ClientMock.DescribeSpotFleetRequestsFunc: method is nil but ec2Client.DescribeSpotFleetRequests was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSpotFleetRequestsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeSpotFleetRequests.Lock()
	mock.calls.DescribeSpotFleetRequests = append(mock.calls.DescribeSpotFleetRequests, callInfo)
	lockec2ClientMockDescribeSpotFleetRequests.Unlock()
	return mock.DescribeSpotFleetRequestsFunc(in1)
}

// DescribeSpotFleetRequestsCalls gets all the calls that were made to DescribeSpotFleetRequests.
// Check the length with:
//     len(mockedec2Client.DescribeSpotFleetRequestsCalls())
func (mock *ec2ClientMock) DescribeSpotFleetRequestsCalls() []struct {
	In1 *ec2.DescribeSpotFleetRequestsInput
} {
	var calls []struct {
		In1 *ec2.DescribeSpotFleetRequestsInput
	}
	lockec2ClientMockDescribeSpotFleetRequests.RLock()
	calls = mock.calls.DescribeSpotFleetRequests
	lockec2ClientMockDescribeSpotFleetRequests.RUnlock()
	return calls
}

// DescribeSpotFleetRequestsPages calls DescribeSpotFleetRequestsPagesFunc.
func (mock *ec2ClientMock) DescribeSpotFleetRequestsPages(in1 *ec2.DescribeSpotFleetRequestsInput, in2 func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool) error {
	if mock.DescribeSpotFleetRequestsPagesFunc == nil {
		panic("ec2ClientMock.DescribeSpotFleetRequestsPagesFunc: method is nil but ec2Client.DescribeSpotFleetRequestsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSpotFleetRequestsInput
		In2 func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeSpotFleetRequestsPages.Lock()
	mock.calls.DescribeSpotFleetRequestsPages = append(mock.calls.DescribeSpotFleetRequestsPages, callInfo)
	lockec2ClientMockDescribeSpotFleetRequestsPages.Unlock()
	return mock.DescribeSpotFleetRequestsPagesFunc(in1, in2)
}

// DescribeSpotFleetRequestsPagesCalls gets all the calls that were made to DescribeSpotFleetRequestsPages.
// Check the length with:
//     len(mockedec2Client.DescribeSpotFleetRequestsPagesCalls())
func (mock *ec2ClientMock) DescribeSpotFleetRequestsPagesCalls() []struct {
	In1 *ec2.DescribeSpotFleetRequestsInput
	In2 func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeSpotFleetRequestsInput
		In2 func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool
	}
	lockec2ClientMockDescribeSpotFleetRequestsPages.RLock()
	calls = mock.calls.DescribeSpotFleetRequestsPages
	lockec2ClientMockDescribeSpotFleetRequestsPages.RUnlock()
	return calls
}

// DescribeSpotFleetRequestsPagesWithContext calls DescribeSpotFleetRequestsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeSpotFleetRequestsPagesWithContext(in1 context.Context, in2 *ec2.DescribeSpotFleetRequestsInput, in3 func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeSpotFleetRequestsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeSpotFleetRequestsPagesWithContextFunc: method is nil but ec2Client.DescribeSpotFleetRequestsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeSpotFleetRequestsInput
		In3 func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeSpotFleetRequestsPagesWithContext.Lock()
	mock.calls.DescribeSpotFleetRequestsPagesWithContext = append(mock.calls.DescribeSpotFleetRequestsPagesWithContext, callInfo)
	lockec2ClientMockDescribeSpotFleetRequestsPagesWithContext.Unlock()
	return mock.DescribeSpotFleetRequestsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeSpotFleetRequestsPagesWithContextCalls gets all the calls that were made to DescribeSpotFleetRequestsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeSpotFleetRequestsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeSpotFleetRequestsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeSpotFleetRequestsInput
	In3 func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeSpotFleetRequestsInput
		In3 func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeSpotFleetRequestsPagesWithContext.RLock()
	calls = mock.calls.DescribeSpotFleetRequestsPagesWithContext
	lockec2ClientMockDescribeSpotFleetRequestsPagesWithContext.RUnlock()
	return calls
}

// DescribeSpotFleetRequestsRequest calls DescribeSpotFleetRequestsRequestFunc.
func (mock *ec2ClientMock) DescribeSpotFleetRequestsRequest(in1 *ec2.DescribeSpotFleetRequestsInput) (*request.Request, *ec2.DescribeSpotFleetRequestsOutput) {
	if mock.DescribeSpotFleetRequestsRequestFunc == nil {
		panic("ec2ClientMock.DescribeSpotFleetRequestsRequestFunc: method is nil but ec2Client.DescribeSpotFleetRequestsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSpotFleetRequestsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeSpotFleetRequestsRequest.Lock()
	mock.calls.DescribeSpotFleetRequestsRequest = append(mock.calls.DescribeSpotFleetRequestsRequest, callInfo)
	lockec2ClientMockDescribeSpotFleetRequestsRequest.Unlock()
	return mock.DescribeSpotFleetRequestsRequestFunc(in1)
}

// DescribeSpotFleetRequestsRequestCalls gets all the calls that were made to DescribeSpotFleetRequestsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeSpotFleetRequestsRequestCalls())
func (mock *ec2ClientMock) DescribeSpotFleetRequestsRequestCalls() []struct {
	In1 *ec2.DescribeSpotFleetRequestsInput
} {
	var calls []struct {
		In1 *ec2.DescribeSpotFleetRequestsInput
	}
	lockec2ClientMockDescribeSpotFleetRequestsRequest.RLock()
	calls = mock.calls.DescribeSpotFleetRequestsRequest
	lockec2ClientMockDescribeSpotFleetRequestsRequest.RUnlock()
	return calls
}

// DescribeSpotFleetRequestsWithContext calls DescribeSpotFleetRequestsWithContextFunc.
func (mock *ec2ClientMock) DescribeSpotFleetRequestsWithContext(in1 context.Context, in2 *ec2.DescribeSpotFleetRequestsInput, in3 ...request.Option) (*ec2.DescribeSpotFleetRequestsOutput, error) {
	if mock.DescribeSpotFleetRequestsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeSpotFleetRequestsWithContextFunc: method is nil but ec2Client.DescribeSpotFleetRequestsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeSpotFleetRequestsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeSpotFleetRequestsWithContext.Lock()
	mock.calls.DescribeSpotFleetRequestsWithContext = append(mock.calls.DescribeSpotFleetRequestsWithContext, callInfo)
	lockec2ClientMockDescribeSpotFleetRequestsWithContext.Unlock()
	return mock.DescribeSpotFleetRequestsWithContextFunc(in1, in2, in3...)
}

// DescribeSpotFleetRequestsWithContextCalls gets all the calls that were made to DescribeSpotFleetRequestsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeSpotFleetRequestsWithContextCalls())
func (mock *ec2ClientMock) DescribeSpotFleetRequestsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeSpotFleetRequestsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeSpotFleetRequestsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeSpotFleetRequestsWithContext.RLock()
	calls = mock.calls.DescribeSpotFleetRequestsWithContext
	lockec2ClientMockDescribeSpotFleetRequestsWithContext.RUnlock()
	return calls
}

// DescribeSpotInstanceRequests calls DescribeSpotInstanceRequestsFunc.
func (mock *ec2ClientMock) DescribeSpotInstanceRequests(in1 *ec2.DescribeSpotInstanceRequestsInput) (*ec2.DescribeSpotInstanceRequestsOutput, error) {
	if mock.DescribeSpotInstanceRequestsFunc == nil {
		panic("ec2ClientMock.DescribeSpotInstanceRequestsFunc: method is nil but ec2Client.DescribeSpotInstanceRequests was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSpotInstanceRequestsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeSpotInstanceRequests.Lock()
	mock.calls.DescribeSpotInstanceRequests = append(mock.calls.DescribeSpotInstanceRequests, callInfo)
	lockec2ClientMockDescribeSpotInstanceRequests.Unlock()
	return mock.DescribeSpotInstanceRequestsFunc(in1)
}

// DescribeSpotInstanceRequestsCalls gets all the calls that were made to DescribeSpotInstanceRequests.
// Check the length with:
//     len(mockedec2Client.DescribeSpotInstanceRequestsCalls())
func (mock *ec2ClientMock) DescribeSpotInstanceRequestsCalls() []struct {
	In1 *ec2.DescribeSpotInstanceRequestsInput
} {
	var calls []struct {
		In1 *ec2.DescribeSpotInstanceRequestsInput
	}
	lockec2ClientMockDescribeSpotInstanceRequests.RLock()
	calls = mock.calls.DescribeSpotInstanceRequests
	lockec2ClientMockDescribeSpotInstanceRequests.RUnlock()
	return calls
}

// DescribeSpotInstanceRequestsPages calls DescribeSpotInstanceRequestsPagesFunc.
func (mock *ec2ClientMock) DescribeSpotInstanceRequestsPages(in1 *ec2.DescribeSpotInstanceRequestsInput, in2 func(*ec2.DescribeSpotInstanceRequestsOutput, bool) bool) error {
	if mock.DescribeSpotInstanceRequestsPagesFunc == nil {
		panic("ec2ClientMock.DescribeSpotInstanceRequestsPagesFunc: method is nil but ec2Client.DescribeSpotInstanceRequestsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSpotInstanceRequestsInput
		In2 func(*ec2.DescribeSpotInstanceRequestsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeSpotInstanceRequestsPages.Lock()
	mock.calls.DescribeSpotInstanceRequestsPages = append(mock.calls.DescribeSpotInstanceRequestsPages, callInfo)
	lockec2ClientMockDescribeSpotInstanceRequestsPages.Unlock()
	return mock.DescribeSpotInstanceRequestsPagesFunc(in1, in2)
}

// DescribeSpotInstanceRequestsPagesCalls gets all the calls that were made to DescribeSpotInstanceRequestsPages.
// Check the length with:
//     len(mockedec2Client.DescribeSpotInstanceRequestsPagesCalls())
func (mock *ec2ClientMock) DescribeSpotInstanceRequestsPagesCalls() []struct {
	In1 *ec2.DescribeSpotInstanceRequestsInput
	In2 func(*ec2.DescribeSpotInstanceRequestsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeSpotInstanceRequestsInput
		In2 func(*ec2.DescribeSpotInstanceRequestsOutput, bool) bool
	}
	lockec2ClientMockDescribeSpotInstanceRequestsPages.RLock()
	calls = mock.calls.DescribeSpotInstanceRequestsPages
	lockec2ClientMockDescribeSpotInstanceRequestsPages.RUnlock()
	return calls
}

// DescribeSpotInstanceRequestsPagesWithContext calls DescribeSpotInstanceRequestsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeSpotInstanceRequestsPagesWithContext(in1 context.Context, in2 *ec2.DescribeSpotInstanceRequestsInput, in3 func(*ec2.DescribeSpotInstanceRequestsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeSpotInstanceRequestsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeSpotInstanceRequestsPagesWithContextFunc: method is nil but ec2Client.DescribeSpotInstanceRequestsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeSpotInstanceRequestsInput
		In3 func(*ec2.DescribeSpotInstanceRequestsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeSpotInstanceRequestsPagesWithContext.Lock()
	mock.calls.DescribeSpotInstanceRequestsPagesWithContext = append(mock.calls.DescribeSpotInstanceRequestsPagesWithContext, callInfo)
	lockec2ClientMockDescribeSpotInstanceRequestsPagesWithContext.Unlock()
	return mock.DescribeSpotInstanceRequestsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeSpotInstanceRequestsPagesWithContextCalls gets all the calls that were made to DescribeSpotInstanceRequestsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeSpotInstanceRequestsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeSpotInstanceRequestsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeSpotInstanceRequestsInput
	In3 func(*ec2.DescribeSpotInstanceRequestsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeSpotInstanceRequestsInput
		In3 func(*ec2.DescribeSpotInstanceRequestsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeSpotInstanceRequestsPagesWithContext.RLock()
	calls = mock.calls.DescribeSpotInstanceRequestsPagesWithContext
	lockec2ClientMockDescribeSpotInstanceRequestsPagesWithContext.RUnlock()
	return calls
}

// DescribeSpotInstanceRequestsRequest calls DescribeSpotInstanceRequestsRequestFunc.
func (mock *ec2ClientMock) DescribeSpotInstanceRequestsRequest(in1 *ec2.DescribeSpotInstanceRequestsInput) (*request.Request, *ec2.DescribeSpotInstanceRequestsOutput) {
	if mock.DescribeSpotInstanceRequestsRequestFunc == nil {
		panic("ec2ClientMock.DescribeSpotInstanceRequestsRequestFunc: method is nil but ec2Client.DescribeSpotInstanceRequestsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSpotInstanceRequestsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeSpotInstanceRequestsRequest.Lock()
	mock.calls.DescribeSpotInstanceRequestsRequest = append(mock.calls.DescribeSpotInstanceRequestsRequest, callInfo)
	lockec2ClientMockDescribeSpotInstanceRequestsRequest.Unlock()
	return mock.DescribeSpotInstanceRequestsRequestFunc(in1)
}

// DescribeSpotInstanceRequestsRequestCalls gets all the calls that were made to DescribeSpotInstanceRequestsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeSpotInstanceRequestsRequestCalls())
func (mock *ec2ClientMock) DescribeSpotInstanceRequestsRequestCalls() []struct {
	In1 *ec2.DescribeSpotInstanceRequestsInput
} {
	var calls []struct {
		In1 *ec2.DescribeSpotInstanceRequestsInput
	}
	lockec2ClientMockDescribeSpotInstanceRequestsRequest.RLock()
	calls = mock.calls.DescribeSpotInstanceRequestsRequest
	lockec2ClientMockDescribeSpotInstanceRequestsRequest.RUnlock()
	return calls
}

// DescribeSpotInstanceRequestsWithContext calls DescribeSpotInstanceRequestsWithContextFunc.
func (mock *ec2ClientMock) DescribeSpotInstanceRequestsWithContext(in1 context.Context, in2 *ec2.DescribeSpotInstanceRequestsInput, in3 ...request.Option) (*ec2.DescribeSpotInstanceRequestsOutput, error) {
	if mock.DescribeSpotInstanceRequestsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeSpotInstanceRequestsWithContextFunc: method is nil but ec2Client.DescribeSpotInstanceRequestsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeSpotInstanceRequestsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeSpotInstanceRequestsWithContext.Lock()
	mock.calls.DescribeSpotInstanceRequestsWithContext = append(mock.calls.DescribeSpotInstanceRequestsWithContext, callInfo)
	lockec2ClientMockDescribeSpotInstanceRequestsWithContext.Unlock()
	return mock.DescribeSpotInstanceRequestsWithContextFunc(in1, in2, in3...)
}

// DescribeSpotInstanceRequestsWithContextCalls gets all the calls that were made to DescribeSpotInstanceRequestsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeSpotInstanceRequestsWithContextCalls())
func (mock *ec2ClientMock) DescribeSpotInstanceRequestsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeSpotInstanceRequestsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeSpotInstanceRequestsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeSpotInstanceRequestsWithContext.RLock()
	calls = mock.calls.DescribeSpotInstanceRequestsWithContext
	lockec2ClientMockDescribeSpotInstanceRequestsWithContext.RUnlock()
	return calls
}

// DescribeSpotPriceHistory calls DescribeSpotPriceHistoryFunc.
func (mock *ec2ClientMock) DescribeSpotPriceHistory(in1 *ec2.DescribeSpotPriceHistoryInput) (*ec2.DescribeSpotPriceHistoryOutput, error) {
	if mock.DescribeSpotPriceHistoryFunc == nil {
		panic("ec2ClientMock.DescribeSpotPriceHistoryFunc: method is nil but ec2Client.DescribeSpotPriceHistory was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSpotPriceHistoryInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeSpotPriceHistory.Lock()
	mock.calls.DescribeSpotPriceHistory = append(mock.calls.DescribeSpotPriceHistory, callInfo)
	lockec2ClientMockDescribeSpotPriceHistory.Unlock()
	return mock.DescribeSpotPriceHistoryFunc(in1)
}

// DescribeSpotPriceHistoryCalls gets all the calls that were made to DescribeSpotPriceHistory.
// Check the length with:
//     len(mockedec2Client.DescribeSpotPriceHistoryCalls())
func (mock *ec2ClientMock) DescribeSpotPriceHistoryCalls() []struct {
	In1 *ec2.DescribeSpotPriceHistoryInput
} {
	var calls []struct {
		In1 *ec2.DescribeSpotPriceHistoryInput
	}
	lockec2ClientMockDescribeSpotPriceHistory.RLock()
	calls = mock.calls.DescribeSpotPriceHistory
	lockec2ClientMockDescribeSpotPriceHistory.RUnlock()
	return calls
}

// DescribeSpotPriceHistoryPages calls DescribeSpotPriceHistoryPagesFunc.
func (mock *ec2ClientMock) DescribeSpotPriceHistoryPages(in1 *ec2.DescribeSpotPriceHistoryInput, in2 func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool) error {
	if mock.DescribeSpotPriceHistoryPagesFunc == nil {
		panic("ec2ClientMock.DescribeSpotPriceHistoryPagesFunc: method is nil but ec2Client.DescribeSpotPriceHistoryPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSpotPriceHistoryInput
		In2 func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeSpotPriceHistoryPages.Lock()
	mock.calls.DescribeSpotPriceHistoryPages = append(mock.calls.DescribeSpotPriceHistoryPages, callInfo)
	lockec2ClientMockDescribeSpotPriceHistoryPages.Unlock()
	return mock.DescribeSpotPriceHistoryPagesFunc(in1, in2)
}

// DescribeSpotPriceHistoryPagesCalls gets all the calls that were made to DescribeSpotPriceHistoryPages.
// Check the length with:
//     len(mockedec2Client.DescribeSpotPriceHistoryPagesCalls())
func (mock *ec2ClientMock) DescribeSpotPriceHistoryPagesCalls() []struct {
	In1 *ec2.DescribeSpotPriceHistoryInput
	In2 func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeSpotPriceHistoryInput
		In2 func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool
	}
	lockec2ClientMockDescribeSpotPriceHistoryPages.RLock()
	calls = mock.calls.DescribeSpotPriceHistoryPages
	lockec2ClientMockDescribeSpotPriceHistoryPages.RUnlock()
	return calls
}

// DescribeSpotPriceHistoryPagesWithContext calls DescribeSpotPriceHistoryPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeSpotPriceHistoryPagesWithContext(in1 context.Context, in2 *ec2.DescribeSpotPriceHistoryInput, in3 func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeSpotPriceHistoryPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeSpotPriceHistoryPagesWithContextFunc: method is nil but ec2Client.DescribeSpotPriceHistoryPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeSpotPriceHistoryInput
		In3 func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeSpotPriceHistoryPagesWithContext.Lock()
	mock.calls.DescribeSpotPriceHistoryPagesWithContext = append(mock.calls.DescribeSpotPriceHistoryPagesWithContext, callInfo)
	lockec2ClientMockDescribeSpotPriceHistoryPagesWithContext.Unlock()
	return mock.DescribeSpotPriceHistoryPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeSpotPriceHistoryPagesWithContextCalls gets all the calls that were made to DescribeSpotPriceHistoryPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeSpotPriceHistoryPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeSpotPriceHistoryPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeSpotPriceHistoryInput
	In3 func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeSpotPriceHistoryInput
		In3 func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeSpotPriceHistoryPagesWithContext.RLock()
	calls = mock.calls.DescribeSpotPriceHistoryPagesWithContext
	lockec2ClientMockDescribeSpotPriceHistoryPagesWithContext.RUnlock()
	return calls
}

// DescribeSpotPriceHistoryRequest calls DescribeSpotPriceHistoryRequestFunc.
func (mock *ec2ClientMock) DescribeSpotPriceHistoryRequest(in1 *ec2.DescribeSpotPriceHistoryInput) (*request.Request, *ec2.DescribeSpotPriceHistoryOutput) {
	if mock.DescribeSpotPriceHistoryRequestFunc == nil {
		panic("ec2ClientMock.DescribeSpotPriceHistoryRequestFunc: method is nil but ec2Client.DescribeSpotPriceHistoryRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSpotPriceHistoryInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeSpotPriceHistoryRequest.Lock()
	mock.calls.DescribeSpotPriceHistoryRequest = append(mock.calls.DescribeSpotPriceHistoryRequest, callInfo)
	lockec2ClientMockDescribeSpotPriceHistoryRequest.Unlock()
	return mock.DescribeSpotPriceHistoryRequestFunc(in1)
}

// DescribeSpotPriceHistoryRequestCalls gets all the calls that were made to DescribeSpotPriceHistoryRequest.
// Check the length with:
//     len(mockedec2Client.DescribeSpotPriceHistoryRequestCalls())
func (mock *ec2ClientMock) DescribeSpotPriceHistoryRequestCalls() []struct {
	In1 *ec2.DescribeSpotPriceHistoryInput
} {
	var calls []struct {
		In1 *ec2.DescribeSpotPriceHistoryInput
	}
	lockec2ClientMockDescribeSpotPriceHistoryRequest.RLock()
	calls = mock.calls.DescribeSpotPriceHistoryRequest
	lockec2ClientMockDescribeSpotPriceHistoryRequest.RUnlock()
	return calls
}

// DescribeSpotPriceHistoryWithContext calls DescribeSpotPriceHistoryWithContextFunc.
func (mock *ec2ClientMock) DescribeSpotPriceHistoryWithContext(in1 context.Context, in2 *ec2.DescribeSpotPriceHistoryInput, in3 ...request.Option) (*ec2.DescribeSpotPriceHistoryOutput, error) {
	if mock.DescribeSpotPriceHistoryWithContextFunc == nil {
		panic("ec2ClientMock.DescribeSpotPriceHistoryWithContextFunc: method is nil but ec2Client.DescribeSpotPriceHistoryWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeSpotPriceHistoryInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeSpotPriceHistoryWithContext.Lock()
	mock.calls.DescribeSpotPriceHistoryWithContext = append(mock.calls.DescribeSpotPriceHistoryWithContext, callInfo)
	lockec2ClientMockDescribeSpotPriceHistoryWithContext.Unlock()
	return mock.DescribeSpotPriceHistoryWithContextFunc(in1, in2, in3...)
}

// DescribeSpotPriceHistoryWithContextCalls gets all the calls that were made to DescribeSpotPriceHistoryWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeSpotPriceHistoryWithContextCalls())
func (mock *ec2ClientMock) DescribeSpotPriceHistoryWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeSpotPriceHistoryInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeSpotPriceHistoryInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeSpotPriceHistoryWithContext.RLock()
	calls = mock.calls.DescribeSpotPriceHistoryWithContext
	lockec2ClientMockDescribeSpotPriceHistoryWithContext.RUnlock()
	return calls
}

// DescribeStaleSecurityGroups calls DescribeStaleSecurityGroupsFunc.
func (mock *ec2ClientMock) DescribeStaleSecurityGroups(in1 *ec2.DescribeStaleSecurityGroupsInput) (*ec2.DescribeStaleSecurityGroupsOutput, error) {
	if mock.DescribeStaleSecurityGroupsFunc == nil {
		panic("ec2ClientMock.DescribeStaleSecurityGroupsFunc: method is nil but ec2Client.DescribeStaleSecurityGroups was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeStaleSecurityGroupsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeStaleSecurityGroups.Lock()
	mock.calls.DescribeStaleSecurityGroups = append(mock.calls.DescribeStaleSecurityGroups, callInfo)
	lockec2ClientMockDescribeStaleSecurityGroups.Unlock()
	return mock.DescribeStaleSecurityGroupsFunc(in1)
}

// DescribeStaleSecurityGroupsCalls gets all the calls that were made to DescribeStaleSecurityGroups.
// Check the length with:
//     len(mockedec2Client.DescribeStaleSecurityGroupsCalls())
func (mock *ec2ClientMock) DescribeStaleSecurityGroupsCalls() []struct {
	In1 *ec2.DescribeStaleSecurityGroupsInput
} {
	var calls []struct {
		In1 *ec2.DescribeStaleSecurityGroupsInput
	}
	lockec2ClientMockDescribeStaleSecurityGroups.RLock()
	calls = mock.calls.DescribeStaleSecurityGroups
	lockec2ClientMockDescribeStaleSecurityGroups.RUnlock()
	return calls
}

// DescribeStaleSecurityGroupsPages calls DescribeStaleSecurityGroupsPagesFunc.
func (mock *ec2ClientMock) DescribeStaleSecurityGroupsPages(in1 *ec2.DescribeStaleSecurityGroupsInput, in2 func(*ec2.DescribeStaleSecurityGroupsOutput, bool) bool) error {
	if mock.DescribeStaleSecurityGroupsPagesFunc == nil {
		panic("ec2ClientMock.DescribeStaleSecurityGroupsPagesFunc: method is nil but ec2Client.DescribeStaleSecurityGroupsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeStaleSecurityGroupsInput
		In2 func(*ec2.DescribeStaleSecurityGroupsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeStaleSecurityGroupsPages.Lock()
	mock.calls.DescribeStaleSecurityGroupsPages = append(mock.calls.DescribeStaleSecurityGroupsPages, callInfo)
	lockec2ClientMockDescribeStaleSecurityGroupsPages.Unlock()
	return mock.DescribeStaleSecurityGroupsPagesFunc(in1, in2)
}

// DescribeStaleSecurityGroupsPagesCalls gets all the calls that were made to DescribeStaleSecurityGroupsPages.
// Check the length with:
//     len(mockedec2Client.DescribeStaleSecurityGroupsPagesCalls())
func (mock *ec2ClientMock) DescribeStaleSecurityGroupsPagesCalls() []struct {
	In1 *ec2.DescribeStaleSecurityGroupsInput
	In2 func(*ec2.DescribeStaleSecurityGroupsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeStaleSecurityGroupsInput
		In2 func(*ec2.DescribeStaleSecurityGroupsOutput, bool) bool
	}
	lockec2ClientMockDescribeStaleSecurityGroupsPages.RLock()
	calls = mock.calls.DescribeStaleSecurityGroupsPages
	lockec2ClientMockDescribeStaleSecurityGroupsPages.RUnlock()
	return calls
}

// DescribeStaleSecurityGroupsPagesWithContext calls DescribeStaleSecurityGroupsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeStaleSecurityGroupsPagesWithContext(in1 context.Context, in2 *ec2.DescribeStaleSecurityGroupsInput, in3 func(*ec2.DescribeStaleSecurityGroupsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeStaleSecurityGroupsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeStaleSecurityGroupsPagesWithContextFunc: method is nil but ec2Client.DescribeStaleSecurityGroupsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeStaleSecurityGroupsInput
		In3 func(*ec2.DescribeStaleSecurityGroupsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeStaleSecurityGroupsPagesWithContext.Lock()
	mock.calls.DescribeStaleSecurityGroupsPagesWithContext = append(mock.calls.DescribeStaleSecurityGroupsPagesWithContext, callInfo)
	lockec2ClientMockDescribeStaleSecurityGroupsPagesWithContext.Unlock()
	return mock.DescribeStaleSecurityGroupsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeStaleSecurityGroupsPagesWithContextCalls gets all the calls that were made to DescribeStaleSecurityGroupsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeStaleSecurityGroupsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeStaleSecurityGroupsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeStaleSecurityGroupsInput
	In3 func(*ec2.DescribeStaleSecurityGroupsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeStaleSecurityGroupsInput
		In3 func(*ec2.DescribeStaleSecurityGroupsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeStaleSecurityGroupsPagesWithContext.RLock()
	calls = mock.calls.DescribeStaleSecurityGroupsPagesWithContext
	lockec2ClientMockDescribeStaleSecurityGroupsPagesWithContext.RUnlock()
	return calls
}

// DescribeStaleSecurityGroupsRequest calls DescribeStaleSecurityGroupsRequestFunc.
func (mock *ec2ClientMock) DescribeStaleSecurityGroupsRequest(in1 *ec2.DescribeStaleSecurityGroupsInput) (*request.Request, *ec2.DescribeStaleSecurityGroupsOutput) {
	if mock.DescribeStaleSecurityGroupsRequestFunc == nil {
		panic("ec2ClientMock.DescribeStaleSecurityGroupsRequestFunc: method is nil but ec2Client.DescribeStaleSecurityGroupsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeStaleSecurityGroupsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeStaleSecurityGroupsRequest.Lock()
	mock.calls.DescribeStaleSecurityGroupsRequest = append(mock.calls.DescribeStaleSecurityGroupsRequest, callInfo)
	lockec2ClientMockDescribeStaleSecurityGroupsRequest.Unlock()
	return mock.DescribeStaleSecurityGroupsRequestFunc(in1)
}

// DescribeStaleSecurityGroupsRequestCalls gets all the calls that were made to DescribeStaleSecurityGroupsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeStaleSecurityGroupsRequestCalls())
func (mock *ec2ClientMock) DescribeStaleSecurityGroupsRequestCalls() []struct {
	In1 *ec2.DescribeStaleSecurityGroupsInput
} {
	var calls []struct {
		In1 *ec2.DescribeStaleSecurityGroupsInput
	}
	lockec2ClientMockDescribeStaleSecurityGroupsRequest.RLock()
	calls = mock.calls.DescribeStaleSecurityGroupsRequest
	lockec2ClientMockDescribeStaleSecurityGroupsRequest.RUnlock()
	return calls
}

// DescribeStaleSecurityGroupsWithContext calls DescribeStaleSecurityGroupsWithContextFunc.
func (mock *ec2ClientMock) DescribeStaleSecurityGroupsWithContext(in1 context.Context, in2 *ec2.DescribeStaleSecurityGroupsInput, in3 ...request.Option) (*ec2.DescribeStaleSecurityGroupsOutput, error) {
	if mock.DescribeStaleSecurityGroupsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeStaleSecurityGroupsWithContextFunc: method is nil but ec2Client.DescribeStaleSecurityGroupsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeStaleSecurityGroupsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeStaleSecurityGroupsWithContext.Lock()
	mock.calls.DescribeStaleSecurityGroupsWithContext = append(mock.calls.DescribeStaleSecurityGroupsWithContext, callInfo)
	lockec2ClientMockDescribeStaleSecurityGroupsWithContext.Unlock()
	return mock.DescribeStaleSecurityGroupsWithContextFunc(in1, in2, in3...)
}

// DescribeStaleSecurityGroupsWithContextCalls gets all the calls that were made to DescribeStaleSecurityGroupsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeStaleSecurityGroupsWithContextCalls())
func (mock *ec2ClientMock) DescribeStaleSecurityGroupsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeStaleSecurityGroupsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeStaleSecurityGroupsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeStaleSecurityGroupsWithContext.RLock()
	calls = mock.calls.DescribeStaleSecurityGroupsWithContext
	lockec2ClientMockDescribeStaleSecurityGroupsWithContext.RUnlock()
	return calls
}

// DescribeSubnets calls DescribeSubnetsFunc.
func (mock *ec2ClientMock) DescribeSubnets(in1 *ec2.DescribeSubnetsInput) (*ec2.DescribeSubnetsOutput, error) {
	if mock.DescribeSubnetsFunc == nil {
		panic("ec2ClientMock.DescribeSubnetsFunc: method is nil but ec2Client.DescribeSubnets was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSubnetsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeSubnets.Lock()
	mock.calls.DescribeSubnets = append(mock.calls.DescribeSubnets, callInfo)
	lockec2ClientMockDescribeSubnets.Unlock()
	return mock.DescribeSubnetsFunc(in1)
}

// DescribeSubnetsCalls gets all the calls that were made to DescribeSubnets.
// Check the length with:
//     len(mockedec2Client.DescribeSubnetsCalls())
func (mock *ec2ClientMock) DescribeSubnetsCalls() []struct {
	In1 *ec2.DescribeSubnetsInput
} {
	var calls []struct {
		In1 *ec2.DescribeSubnetsInput
	}
	lockec2ClientMockDescribeSubnets.RLock()
	calls = mock.calls.DescribeSubnets
	lockec2ClientMockDescribeSubnets.RUnlock()
	return calls
}

// DescribeSubnetsPages calls DescribeSubnetsPagesFunc.
func (mock *ec2ClientMock) DescribeSubnetsPages(in1 *ec2.DescribeSubnetsInput, in2 func(*ec2.DescribeSubnetsOutput, bool) bool) error {
	if mock.DescribeSubnetsPagesFunc == nil {
		panic("ec2ClientMock.DescribeSubnetsPagesFunc: method is nil but ec2Client.DescribeSubnetsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSubnetsInput
		In2 func(*ec2.DescribeSubnetsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeSubnetsPages.Lock()
	mock.calls.DescribeSubnetsPages = append(mock.calls.DescribeSubnetsPages, callInfo)
	lockec2ClientMockDescribeSubnetsPages.Unlock()
	return mock.DescribeSubnetsPagesFunc(in1, in2)
}

// DescribeSubnetsPagesCalls gets all the calls that were made to DescribeSubnetsPages.
// Check the length with:
//     len(mockedec2Client.DescribeSubnetsPagesCalls())
func (mock *ec2ClientMock) DescribeSubnetsPagesCalls() []struct {
	In1 *ec2.DescribeSubnetsInput
	In2 func(*ec2.DescribeSubnetsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeSubnetsInput
		In2 func(*ec2.DescribeSubnetsOutput, bool) bool
	}
	lockec2ClientMockDescribeSubnetsPages.RLock()
	calls = mock.calls.DescribeSubnetsPages
	lockec2ClientMockDescribeSubnetsPages.RUnlock()
	return calls
}

// DescribeSubnetsPagesWithContext calls DescribeSubnetsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeSubnetsPagesWithContext(in1 context.Context, in2 *ec2.DescribeSubnetsInput, in3 func(*ec2.DescribeSubnetsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeSubnetsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeSubnetsPagesWithContextFunc: method is nil but ec2Client.DescribeSubnetsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeSubnetsInput
		In3 func(*ec2.DescribeSubnetsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeSubnetsPagesWithContext.Lock()
	mock.calls.DescribeSubnetsPagesWithContext = append(mock.calls.DescribeSubnetsPagesWithContext, callInfo)
	lockec2ClientMockDescribeSubnetsPagesWithContext.Unlock()
	return mock.DescribeSubnetsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeSubnetsPagesWithContextCalls gets all the calls that were made to DescribeSubnetsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeSubnetsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeSubnetsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeSubnetsInput
	In3 func(*ec2.DescribeSubnetsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeSubnetsInput
		In3 func(*ec2.DescribeSubnetsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeSubnetsPagesWithContext.RLock()
	calls = mock.calls.DescribeSubnetsPagesWithContext
	lockec2ClientMockDescribeSubnetsPagesWithContext.RUnlock()
	return calls
}

// DescribeSubnetsRequest calls DescribeSubnetsRequestFunc.
func (mock *ec2ClientMock) DescribeSubnetsRequest(in1 *ec2.DescribeSubnetsInput) (*request.Request, *ec2.DescribeSubnetsOutput) {
	if mock.DescribeSubnetsRequestFunc == nil {
		panic("ec2ClientMock.DescribeSubnetsRequestFunc: method is nil but ec2Client.DescribeSubnetsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSubnetsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeSubnetsRequest.Lock()
	mock.calls.DescribeSubnetsRequest = append(mock.calls.DescribeSubnetsRequest, callInfo)
	lockec2ClientMockDescribeSubnetsRequest.Unlock()
	return mock.DescribeSubnetsRequestFunc(in1)
}

// DescribeSubnetsRequestCalls gets all the calls that were made to DescribeSubnetsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeSubnetsRequestCalls())
func (mock *ec2ClientMock) DescribeSubnetsRequestCalls() []struct {
	In1 *ec2.DescribeSubnetsInput
} {
	var calls []struct {
		In1 *ec2.DescribeSubnetsInput
	}
	lockec2ClientMockDescribeSubnetsRequest.RLock()
	calls = mock.calls.DescribeSubnetsRequest
	lockec2ClientMockDescribeSubnetsRequest.RUnlock()
	return calls
}

// DescribeSubnetsWithContext calls DescribeSubnetsWithContextFunc.
func (mock *ec2ClientMock) DescribeSubnetsWithContext(in1 context.Context, in2 *ec2.DescribeSubnetsInput, in3 ...request.Option) (*ec2.DescribeSubnetsOutput, error) {
	if mock.DescribeSubnetsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeSubnetsWithContextFunc: method is nil but ec2Client.DescribeSubnetsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeSubnetsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeSubnetsWithContext.Lock()
	mock.calls.DescribeSubnetsWithContext = append(mock.calls.DescribeSubnetsWithContext, callInfo)
	lockec2ClientMockDescribeSubnetsWithContext.Unlock()
	return mock.DescribeSubnetsWithContextFunc(in1, in2, in3...)
}

// DescribeSubnetsWithContextCalls gets all the calls that were made to DescribeSubnetsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeSubnetsWithContextCalls())
func (mock *ec2ClientMock) DescribeSubnetsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeSubnetsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeSubnetsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeSubnetsWithContext.RLock()
	calls = mock.calls.DescribeSubnetsWithContext
	lockec2ClientMockDescribeSubnetsWithContext.RUnlock()
	return calls
}

// DescribeTags calls DescribeTagsFunc.
func (mock *ec2ClientMock) DescribeTags(in1 *ec2.DescribeTagsInput) (*ec2.DescribeTagsOutput, error) {
	if mock.DescribeTagsFunc == nil {
		panic("ec2ClientMock.DescribeTagsFunc: method is nil but ec2Client.DescribeTags was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTagsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeTags.Lock()
	mock.calls.DescribeTags = append(mock.calls.DescribeTags, callInfo)
	lockec2ClientMockDescribeTags.Unlock()
	return mock.DescribeTagsFunc(in1)
}

// DescribeTagsCalls gets all the calls that were made to DescribeTags.
// Check the length with:
//     len(mockedec2Client.DescribeTagsCalls())
func (mock *ec2ClientMock) DescribeTagsCalls() []struct {
	In1 *ec2.DescribeTagsInput
} {
	var calls []struct {
		In1 *ec2.DescribeTagsInput
	}
	lockec2ClientMockDescribeTags.RLock()
	calls = mock.calls.DescribeTags
	lockec2ClientMockDescribeTags.RUnlock()
	return calls
}

// DescribeTagsPages calls DescribeTagsPagesFunc.
func (mock *ec2ClientMock) DescribeTagsPages(in1 *ec2.DescribeTagsInput, in2 func(*ec2.DescribeTagsOutput, bool) bool) error {
	if mock.DescribeTagsPagesFunc == nil {
		panic("ec2ClientMock.DescribeTagsPagesFunc: method is nil but ec2Client.DescribeTagsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTagsInput
		In2 func(*ec2.DescribeTagsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeTagsPages.Lock()
	mock.calls.DescribeTagsPages = append(mock.calls.DescribeTagsPages, callInfo)
	lockec2ClientMockDescribeTagsPages.Unlock()
	return mock.DescribeTagsPagesFunc(in1, in2)
}

// DescribeTagsPagesCalls gets all the calls that were made to DescribeTagsPages.
// Check the length with:
//     len(mockedec2Client.DescribeTagsPagesCalls())
func (mock *ec2ClientMock) DescribeTagsPagesCalls() []struct {
	In1 *ec2.DescribeTagsInput
	In2 func(*ec2.DescribeTagsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeTagsInput
		In2 func(*ec2.DescribeTagsOutput, bool) bool
	}
	lockec2ClientMockDescribeTagsPages.RLock()
	calls = mock.calls.DescribeTagsPages
	lockec2ClientMockDescribeTagsPages.RUnlock()
	return calls
}

// DescribeTagsPagesWithContext calls DescribeTagsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeTagsPagesWithContext(in1 context.Context, in2 *ec2.DescribeTagsInput, in3 func(*ec2.DescribeTagsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeTagsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeTagsPagesWithContextFunc: method is nil but ec2Client.DescribeTagsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeTagsInput
		In3 func(*ec2.DescribeTagsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeTagsPagesWithContext.Lock()
	mock.calls.DescribeTagsPagesWithContext = append(mock.calls.DescribeTagsPagesWithContext, callInfo)
	lockec2ClientMockDescribeTagsPagesWithContext.Unlock()
	return mock.DescribeTagsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeTagsPagesWithContextCalls gets all the calls that were made to DescribeTagsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeTagsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeTagsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeTagsInput
	In3 func(*ec2.DescribeTagsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeTagsInput
		In3 func(*ec2.DescribeTagsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeTagsPagesWithContext.RLock()
	calls = mock.calls.DescribeTagsPagesWithContext
	lockec2ClientMockDescribeTagsPagesWithContext.RUnlock()
	return calls
}

// DescribeTagsRequest calls DescribeTagsRequestFunc.
func (mock *ec2ClientMock) DescribeTagsRequest(in1 *ec2.DescribeTagsInput) (*request.Request, *ec2.DescribeTagsOutput) {
	if mock.DescribeTagsRequestFunc == nil {
		panic("ec2ClientMock.DescribeTagsRequestFunc: method is nil but ec2Client.DescribeTagsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTagsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeTagsRequest.Lock()
	mock.calls.DescribeTagsRequest = append(mock.calls.DescribeTagsRequest, callInfo)
	lockec2ClientMockDescribeTagsRequest.Unlock()
	return mock.DescribeTagsRequestFunc(in1)
}

// DescribeTagsRequestCalls gets all the calls that were made to DescribeTagsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeTagsRequestCalls())
func (mock *ec2ClientMock) DescribeTagsRequestCalls() []struct {
	In1 *ec2.DescribeTagsInput
} {
	var calls []struct {
		In1 *ec2.DescribeTagsInput
	}
	lockec2ClientMockDescribeTagsRequest.RLock()
	calls = mock.calls.DescribeTagsRequest
	lockec2ClientMockDescribeTagsRequest.RUnlock()
	return calls
}

// DescribeTagsWithContext calls DescribeTagsWithContextFunc.
func (mock *ec2ClientMock) DescribeTagsWithContext(in1 context.Context, in2 *ec2.DescribeTagsInput, in3 ...request.Option) (*ec2.DescribeTagsOutput, error) {
	if mock.DescribeTagsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeTagsWithContextFunc: method is nil but ec2Client.DescribeTagsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeTagsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeTagsWithContext.Lock()
	mock.calls.DescribeTagsWithContext = append(mock.calls.DescribeTagsWithContext, callInfo)
	lockec2ClientMockDescribeTagsWithContext.Unlock()
	return mock.DescribeTagsWithContextFunc(in1, in2, in3...)
}

// DescribeTagsWithContextCalls gets all the calls that were made to DescribeTagsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeTagsWithContextCalls())
func (mock *ec2ClientMock) DescribeTagsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeTagsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeTagsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeTagsWithContext.RLock()
	calls = mock.calls.DescribeTagsWithContext
	lockec2ClientMockDescribeTagsWithContext.RUnlock()
	return calls
}

// DescribeTrafficMirrorFilters calls DescribeTrafficMirrorFiltersFunc.
func (mock *ec2ClientMock) DescribeTrafficMirrorFilters(in1 *ec2.DescribeTrafficMirrorFiltersInput) (*ec2.DescribeTrafficMirrorFiltersOutput, error) {
	if mock.DescribeTrafficMirrorFiltersFunc == nil {
		panic("ec2ClientMock.DescribeTrafficMirrorFiltersFunc: method is nil but ec2Client.DescribeTrafficMirrorFilters was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTrafficMirrorFiltersInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeTrafficMirrorFilters.Lock()
	mock.calls.DescribeTrafficMirrorFilters = append(mock.calls.DescribeTrafficMirrorFilters, callInfo)
	lockec2ClientMockDescribeTrafficMirrorFilters.Unlock()
	return mock.DescribeTrafficMirrorFiltersFunc(in1)
}

// DescribeTrafficMirrorFiltersCalls gets all the calls that were made to DescribeTrafficMirrorFilters.
// Check the length with:
//     len(mockedec2Client.DescribeTrafficMirrorFiltersCalls())
func (mock *ec2ClientMock) DescribeTrafficMirrorFiltersCalls() []struct {
	In1 *ec2.DescribeTrafficMirrorFiltersInput
} {
	var calls []struct {
		In1 *ec2.DescribeTrafficMirrorFiltersInput
	}
	lockec2ClientMockDescribeTrafficMirrorFilters.RLock()
	calls = mock.calls.DescribeTrafficMirrorFilters
	lockec2ClientMockDescribeTrafficMirrorFilters.RUnlock()
	return calls
}

// DescribeTrafficMirrorFiltersPages calls DescribeTrafficMirrorFiltersPagesFunc.
func (mock *ec2ClientMock) DescribeTrafficMirrorFiltersPages(in1 *ec2.DescribeTrafficMirrorFiltersInput, in2 func(*ec2.DescribeTrafficMirrorFiltersOutput, bool) bool) error {
	if mock.DescribeTrafficMirrorFiltersPagesFunc == nil {
		panic("ec2ClientMock.DescribeTrafficMirrorFiltersPagesFunc: method is nil but ec2Client.DescribeTrafficMirrorFiltersPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTrafficMirrorFiltersInput
		In2 func(*ec2.DescribeTrafficMirrorFiltersOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeTrafficMirrorFiltersPages.Lock()
	mock.calls.DescribeTrafficMirrorFiltersPages = append(mock.calls.DescribeTrafficMirrorFiltersPages, callInfo)
	lockec2ClientMockDescribeTrafficMirrorFiltersPages.Unlock()
	return mock.DescribeTrafficMirrorFiltersPagesFunc(in1, in2)
}

// DescribeTrafficMirrorFiltersPagesCalls gets all the calls that were made to DescribeTrafficMirrorFiltersPages.
// Check the length with:
//     len(mockedec2Client.DescribeTrafficMirrorFiltersPagesCalls())
func (mock *ec2ClientMock) DescribeTrafficMirrorFiltersPagesCalls() []struct {
	In1 *ec2.DescribeTrafficMirrorFiltersInput
	In2 func(*ec2.DescribeTrafficMirrorFiltersOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeTrafficMirrorFiltersInput
		In2 func(*ec2.DescribeTrafficMirrorFiltersOutput, bool) bool
	}
	lockec2ClientMockDescribeTrafficMirrorFiltersPages.RLock()
	calls = mock.calls.DescribeTrafficMirrorFiltersPages
	lockec2ClientMockDescribeTrafficMirrorFiltersPages.RUnlock()
	return calls
}

// DescribeTrafficMirrorFiltersPagesWithContext calls DescribeTrafficMirrorFiltersPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeTrafficMirrorFiltersPagesWithContext(in1 context.Context, in2 *ec2.DescribeTrafficMirrorFiltersInput, in3 func(*ec2.DescribeTrafficMirrorFiltersOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeTrafficMirrorFiltersPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeTrafficMirrorFiltersPagesWithContextFunc: method is nil but ec2Client.DescribeTrafficMirrorFiltersPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeTrafficMirrorFiltersInput
		In3 func(*ec2.DescribeTrafficMirrorFiltersOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeTrafficMirrorFiltersPagesWithContext.Lock()
	mock.calls.DescribeTrafficMirrorFiltersPagesWithContext = append(mock.calls.DescribeTrafficMirrorFiltersPagesWithContext, callInfo)
	lockec2ClientMockDescribeTrafficMirrorFiltersPagesWithContext.Unlock()
	return mock.DescribeTrafficMirrorFiltersPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeTrafficMirrorFiltersPagesWithContextCalls gets all the calls that were made to DescribeTrafficMirrorFiltersPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeTrafficMirrorFiltersPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeTrafficMirrorFiltersPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeTrafficMirrorFiltersInput
	In3 func(*ec2.DescribeTrafficMirrorFiltersOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeTrafficMirrorFiltersInput
		In3 func(*ec2.DescribeTrafficMirrorFiltersOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeTrafficMirrorFiltersPagesWithContext.RLock()
	calls = mock.calls.DescribeTrafficMirrorFiltersPagesWithContext
	lockec2ClientMockDescribeTrafficMirrorFiltersPagesWithContext.RUnlock()
	return calls
}

// DescribeTrafficMirrorFiltersRequest calls DescribeTrafficMirrorFiltersRequestFunc.
func (mock *ec2ClientMock) DescribeTrafficMirrorFiltersRequest(in1 *ec2.DescribeTrafficMirrorFiltersInput) (*request.Request, *ec2.DescribeTrafficMirrorFiltersOutput) {
	if mock.DescribeTrafficMirrorFiltersRequestFunc == nil {
		panic("ec2ClientMock.DescribeTrafficMirrorFiltersRequestFunc: method is nil but ec2Client.DescribeTrafficMirrorFiltersRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTrafficMirrorFiltersInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeTrafficMirrorFiltersRequest.Lock()
	mock.calls.DescribeTrafficMirrorFiltersRequest = append(mock.calls.DescribeTrafficMirrorFiltersRequest, callInfo)
	lockec2ClientMockDescribeTrafficMirrorFiltersRequest.Unlock()
	return mock.DescribeTrafficMirrorFiltersRequestFunc(in1)
}

// DescribeTrafficMirrorFiltersRequestCalls gets all the calls that were made to DescribeTrafficMirrorFiltersRequest.
// Check the length with:
//     len(mockedec2Client.DescribeTrafficMirrorFiltersRequestCalls())
func (mock *ec2ClientMock) DescribeTrafficMirrorFiltersRequestCalls() []struct {
	In1 *ec2.DescribeTrafficMirrorFiltersInput
} {
	var calls []struct {
		In1 *ec2.DescribeTrafficMirrorFiltersInput
	}
	lockec2ClientMockDescribeTrafficMirrorFiltersRequest.RLock()
	calls = mock.calls.DescribeTrafficMirrorFiltersRequest
	lockec2ClientMockDescribeTrafficMirrorFiltersRequest.RUnlock()
	return calls
}

// DescribeTrafficMirrorFiltersWithContext calls DescribeTrafficMirrorFiltersWithContextFunc.
func (mock *ec2ClientMock) DescribeTrafficMirrorFiltersWithContext(in1 context.Context, in2 *ec2.DescribeTrafficMirrorFiltersInput, in3 ...request.Option) (*ec2.DescribeTrafficMirrorFiltersOutput, error) {
	if mock.DescribeTrafficMirrorFiltersWithContextFunc == nil {
		panic("ec2ClientMock.DescribeTrafficMirrorFiltersWithContextFunc: method is nil but ec2Client.DescribeTrafficMirrorFiltersWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeTrafficMirrorFiltersInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeTrafficMirrorFiltersWithContext.Lock()
	mock.calls.DescribeTrafficMirrorFiltersWithContext = append(mock.calls.DescribeTrafficMirrorFiltersWithContext, callInfo)
	lockec2ClientMockDescribeTrafficMirrorFiltersWithContext.Unlock()
	return mock.DescribeTrafficMirrorFiltersWithContextFunc(in1, in2, in3...)
}

// DescribeTrafficMirrorFiltersWithContextCalls gets all the calls that were made to DescribeTrafficMirrorFiltersWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeTrafficMirrorFiltersWithContextCalls())
func (mock *ec2ClientMock) DescribeTrafficMirrorFiltersWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeTrafficMirrorFiltersInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeTrafficMirrorFiltersInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeTrafficMirrorFiltersWithContext.RLock()
	calls = mock.calls.DescribeTrafficMirrorFiltersWithContext
	lockec2ClientMockDescribeTrafficMirrorFiltersWithContext.RUnlock()
	return calls
}

// DescribeTrafficMirrorSessions calls DescribeTrafficMirrorSessionsFunc.
func (mock *ec2ClientMock) DescribeTrafficMirrorSessions(in1 *ec2.DescribeTrafficMirrorSessionsInput) (*ec2.DescribeTrafficMirrorSessionsOutput, error) {
	if mock.DescribeTrafficMirrorSessionsFunc == nil {
		panic("ec2ClientMock.DescribeTrafficMirrorSessionsFunc: method is nil but ec2Client.DescribeTrafficMirrorSessions was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTrafficMirrorSessionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeTrafficMirrorSessions.Lock()
	mock.calls.DescribeTrafficMirrorSessions = append(mock.calls.DescribeTrafficMirrorSessions, callInfo)
	lockec2ClientMockDescribeTrafficMirrorSessions.Unlock()
	return mock.DescribeTrafficMirrorSessionsFunc(in1)
}

// DescribeTrafficMirrorSessionsCalls gets all the calls that were made to DescribeTrafficMirrorSessions.
// Check the length with:
//     len(mockedec2Client.DescribeTrafficMirrorSessionsCalls())
func (mock *ec2ClientMock) DescribeTrafficMirrorSessionsCalls() []struct {
	In1 *ec2.DescribeTrafficMirrorSessionsInput
} {
	var calls []struct {
		In1 *ec2.DescribeTrafficMirrorSessionsInput
	}
	lockec2ClientMockDescribeTrafficMirrorSessions.RLock()
	calls = mock.calls.DescribeTrafficMirrorSessions
	lockec2ClientMockDescribeTrafficMirrorSessions.RUnlock()
	return calls
}

// DescribeTrafficMirrorSessionsPages calls DescribeTrafficMirrorSessionsPagesFunc.
func (mock *ec2ClientMock) DescribeTrafficMirrorSessionsPages(in1 *ec2.DescribeTrafficMirrorSessionsInput, in2 func(*ec2.DescribeTrafficMirrorSessionsOutput, bool) bool) error {
	if mock.DescribeTrafficMirrorSessionsPagesFunc == nil {
		panic("ec2ClientMock.DescribeTrafficMirrorSessionsPagesFunc: method is nil but ec2Client.DescribeTrafficMirrorSessionsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTrafficMirrorSessionsInput
		In2 func(*ec2.DescribeTrafficMirrorSessionsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeTrafficMirrorSessionsPages.Lock()
	mock.calls.DescribeTrafficMirrorSessionsPages = append(mock.calls.DescribeTrafficMirrorSessionsPages, callInfo)
	lockec2ClientMockDescribeTrafficMirrorSessionsPages.Unlock()
	return mock.DescribeTrafficMirrorSessionsPagesFunc(in1, in2)
}

// DescribeTrafficMirrorSessionsPagesCalls gets all the calls that were made to DescribeTrafficMirrorSessionsPages.
// Check the length with:
//     len(mockedec2Client.DescribeTrafficMirrorSessionsPagesCalls())
func (mock *ec2ClientMock) DescribeTrafficMirrorSessionsPagesCalls() []struct {
	In1 *ec2.DescribeTrafficMirrorSessionsInput
	In2 func(*ec2.DescribeTrafficMirrorSessionsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeTrafficMirrorSessionsInput
		In2 func(*ec2.DescribeTrafficMirrorSessionsOutput, bool) bool
	}
	lockec2ClientMockDescribeTrafficMirrorSessionsPages.RLock()
	calls = mock.calls.DescribeTrafficMirrorSessionsPages
	lockec2ClientMockDescribeTrafficMirrorSessionsPages.RUnlock()
	return calls
}

// DescribeTrafficMirrorSessionsPagesWithContext calls DescribeTrafficMirrorSessionsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeTrafficMirrorSessionsPagesWithContext(in1 context.Context, in2 *ec2.DescribeTrafficMirrorSessionsInput, in3 func(*ec2.DescribeTrafficMirrorSessionsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeTrafficMirrorSessionsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeTrafficMirrorSessionsPagesWithContextFunc: method is nil but ec2Client.DescribeTrafficMirrorSessionsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeTrafficMirrorSessionsInput
		In3 func(*ec2.DescribeTrafficMirrorSessionsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeTrafficMirrorSessionsPagesWithContext.Lock()
	mock.calls.DescribeTrafficMirrorSessionsPagesWithContext = append(mock.calls.DescribeTrafficMirrorSessionsPagesWithContext, callInfo)
	lockec2ClientMockDescribeTrafficMirrorSessionsPagesWithContext.Unlock()
	return mock.DescribeTrafficMirrorSessionsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeTrafficMirrorSessionsPagesWithContextCalls gets all the calls that were made to DescribeTrafficMirrorSessionsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeTrafficMirrorSessionsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeTrafficMirrorSessionsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeTrafficMirrorSessionsInput
	In3 func(*ec2.DescribeTrafficMirrorSessionsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeTrafficMirrorSessionsInput
		In3 func(*ec2.DescribeTrafficMirrorSessionsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeTrafficMirrorSessionsPagesWithContext.RLock()
	calls = mock.calls.DescribeTrafficMirrorSessionsPagesWithContext
	lockec2ClientMockDescribeTrafficMirrorSessionsPagesWithContext.RUnlock()
	return calls
}

// DescribeTrafficMirrorSessionsRequest calls DescribeTrafficMirrorSessionsRequestFunc.
func (mock *ec2ClientMock) DescribeTrafficMirrorSessionsRequest(in1 *ec2.DescribeTrafficMirrorSessionsInput) (*request.Request, *ec2.DescribeTrafficMirrorSessionsOutput) {
	if mock.DescribeTrafficMirrorSessionsRequestFunc == nil {
		panic("ec2ClientMock.DescribeTrafficMirrorSessionsRequestFunc: method is nil but ec2Client.DescribeTrafficMirrorSessionsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTrafficMirrorSessionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeTrafficMirrorSessionsRequest.Lock()
	mock.calls.DescribeTrafficMirrorSessionsRequest = append(mock.calls.DescribeTrafficMirrorSessionsRequest, callInfo)
	lockec2ClientMockDescribeTrafficMirrorSessionsRequest.Unlock()
	return mock.DescribeTrafficMirrorSessionsRequestFunc(in1)
}

// DescribeTrafficMirrorSessionsRequestCalls gets all the calls that were made to DescribeTrafficMirrorSessionsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeTrafficMirrorSessionsRequestCalls())
func (mock *ec2ClientMock) DescribeTrafficMirrorSessionsRequestCalls() []struct {
	In1 *ec2.DescribeTrafficMirrorSessionsInput
} {
	var calls []struct {
		In1 *ec2.DescribeTrafficMirrorSessionsInput
	}
	lockec2ClientMockDescribeTrafficMirrorSessionsRequest.RLock()
	calls = mock.calls.DescribeTrafficMirrorSessionsRequest
	lockec2ClientMockDescribeTrafficMirrorSessionsRequest.RUnlock()
	return calls
}

// DescribeTrafficMirrorSessionsWithContext calls DescribeTrafficMirrorSessionsWithContextFunc.
func (mock *ec2ClientMock) DescribeTrafficMirrorSessionsWithContext(in1 context.Context, in2 *ec2.DescribeTrafficMirrorSessionsInput, in3 ...request.Option) (*ec2.DescribeTrafficMirrorSessionsOutput, error) {
	if mock.DescribeTrafficMirrorSessionsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeTrafficMirrorSessionsWithContextFunc: method is nil but ec2Client.DescribeTrafficMirrorSessionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeTrafficMirrorSessionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeTrafficMirrorSessionsWithContext.Lock()
	mock.calls.DescribeTrafficMirrorSessionsWithContext = append(mock.calls.DescribeTrafficMirrorSessionsWithContext, callInfo)
	lockec2ClientMockDescribeTrafficMirrorSessionsWithContext.Unlock()
	return mock.DescribeTrafficMirrorSessionsWithContextFunc(in1, in2, in3...)
}

// DescribeTrafficMirrorSessionsWithContextCalls gets all the calls that were made to DescribeTrafficMirrorSessionsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeTrafficMirrorSessionsWithContextCalls())
func (mock *ec2ClientMock) DescribeTrafficMirrorSessionsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeTrafficMirrorSessionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeTrafficMirrorSessionsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeTrafficMirrorSessionsWithContext.RLock()
	calls = mock.calls.DescribeTrafficMirrorSessionsWithContext
	lockec2ClientMockDescribeTrafficMirrorSessionsWithContext.RUnlock()
	return calls
}

// DescribeTrafficMirrorTargets calls DescribeTrafficMirrorTargetsFunc.
func (mock *ec2ClientMock) DescribeTrafficMirrorTargets(in1 *ec2.DescribeTrafficMirrorTargetsInput) (*ec2.DescribeTrafficMirrorTargetsOutput, error) {
	if mock.DescribeTrafficMirrorTargetsFunc == nil {
		panic("ec2ClientMock.DescribeTrafficMirrorTargetsFunc: method is nil but ec2Client.DescribeTrafficMirrorTargets was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTrafficMirrorTargetsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeTrafficMirrorTargets.Lock()
	mock.calls.DescribeTrafficMirrorTargets = append(mock.calls.DescribeTrafficMirrorTargets, callInfo)
	lockec2ClientMockDescribeTrafficMirrorTargets.Unlock()
	return mock.DescribeTrafficMirrorTargetsFunc(in1)
}

// DescribeTrafficMirrorTargetsCalls gets all the calls that were made to DescribeTrafficMirrorTargets.
// Check the length with:
//     len(mockedec2Client.DescribeTrafficMirrorTargetsCalls())
func (mock *ec2ClientMock) DescribeTrafficMirrorTargetsCalls() []struct {
	In1 *ec2.DescribeTrafficMirrorTargetsInput
} {
	var calls []struct {
		In1 *ec2.DescribeTrafficMirrorTargetsInput
	}
	lockec2ClientMockDescribeTrafficMirrorTargets.RLock()
	calls = mock.calls.DescribeTrafficMirrorTargets
	lockec2ClientMockDescribeTrafficMirrorTargets.RUnlock()
	return calls
}

// DescribeTrafficMirrorTargetsPages calls DescribeTrafficMirrorTargetsPagesFunc.
func (mock *ec2ClientMock) DescribeTrafficMirrorTargetsPages(in1 *ec2.DescribeTrafficMirrorTargetsInput, in2 func(*ec2.DescribeTrafficMirrorTargetsOutput, bool) bool) error {
	if mock.DescribeTrafficMirrorTargetsPagesFunc == nil {
		panic("ec2ClientMock.DescribeTrafficMirrorTargetsPagesFunc: method is nil but ec2Client.DescribeTrafficMirrorTargetsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTrafficMirrorTargetsInput
		In2 func(*ec2.DescribeTrafficMirrorTargetsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeTrafficMirrorTargetsPages.Lock()
	mock.calls.DescribeTrafficMirrorTargetsPages = append(mock.calls.DescribeTrafficMirrorTargetsPages, callInfo)
	lockec2ClientMockDescribeTrafficMirrorTargetsPages.Unlock()
	return mock.DescribeTrafficMirrorTargetsPagesFunc(in1, in2)
}

// DescribeTrafficMirrorTargetsPagesCalls gets all the calls that were made to DescribeTrafficMirrorTargetsPages.
// Check the length with:
//     len(mockedec2Client.DescribeTrafficMirrorTargetsPagesCalls())
func (mock *ec2ClientMock) DescribeTrafficMirrorTargetsPagesCalls() []struct {
	In1 *ec2.DescribeTrafficMirrorTargetsInput
	In2 func(*ec2.DescribeTrafficMirrorTargetsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeTrafficMirrorTargetsInput
		In2 func(*ec2.DescribeTrafficMirrorTargetsOutput, bool) bool
	}
	lockec2ClientMockDescribeTrafficMirrorTargetsPages.RLock()
	calls = mock.calls.DescribeTrafficMirrorTargetsPages
	lockec2ClientMockDescribeTrafficMirrorTargetsPages.RUnlock()
	return calls
}

// DescribeTrafficMirrorTargetsPagesWithContext calls DescribeTrafficMirrorTargetsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeTrafficMirrorTargetsPagesWithContext(in1 context.Context, in2 *ec2.DescribeTrafficMirrorTargetsInput, in3 func(*ec2.DescribeTrafficMirrorTargetsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeTrafficMirrorTargetsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeTrafficMirrorTargetsPagesWithContextFunc: method is nil but ec2Client.DescribeTrafficMirrorTargetsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeTrafficMirrorTargetsInput
		In3 func(*ec2.DescribeTrafficMirrorTargetsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeTrafficMirrorTargetsPagesWithContext.Lock()
	mock.calls.DescribeTrafficMirrorTargetsPagesWithContext = append(mock.calls.DescribeTrafficMirrorTargetsPagesWithContext, callInfo)
	lockec2ClientMockDescribeTrafficMirrorTargetsPagesWithContext.Unlock()
	return mock.DescribeTrafficMirrorTargetsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeTrafficMirrorTargetsPagesWithContextCalls gets all the calls that were made to DescribeTrafficMirrorTargetsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeTrafficMirrorTargetsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeTrafficMirrorTargetsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeTrafficMirrorTargetsInput
	In3 func(*ec2.DescribeTrafficMirrorTargetsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeTrafficMirrorTargetsInput
		In3 func(*ec2.DescribeTrafficMirrorTargetsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeTrafficMirrorTargetsPagesWithContext.RLock()
	calls = mock.calls.DescribeTrafficMirrorTargetsPagesWithContext
	lockec2ClientMockDescribeTrafficMirrorTargetsPagesWithContext.RUnlock()
	return calls
}

// DescribeTrafficMirrorTargetsRequest calls DescribeTrafficMirrorTargetsRequestFunc.
func (mock *ec2ClientMock) DescribeTrafficMirrorTargetsRequest(in1 *ec2.DescribeTrafficMirrorTargetsInput) (*request.Request, *ec2.DescribeTrafficMirrorTargetsOutput) {
	if mock.DescribeTrafficMirrorTargetsRequestFunc == nil {
		panic("ec2ClientMock.DescribeTrafficMirrorTargetsRequestFunc: method is nil but ec2Client.DescribeTrafficMirrorTargetsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTrafficMirrorTargetsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeTrafficMirrorTargetsRequest.Lock()
	mock.calls.DescribeTrafficMirrorTargetsRequest = append(mock.calls.DescribeTrafficMirrorTargetsRequest, callInfo)
	lockec2ClientMockDescribeTrafficMirrorTargetsRequest.Unlock()
	return mock.DescribeTrafficMirrorTargetsRequestFunc(in1)
}

// DescribeTrafficMirrorTargetsRequestCalls gets all the calls that were made to DescribeTrafficMirrorTargetsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeTrafficMirrorTargetsRequestCalls())
func (mock *ec2ClientMock) DescribeTrafficMirrorTargetsRequestCalls() []struct {
	In1 *ec2.DescribeTrafficMirrorTargetsInput
} {
	var calls []struct {
		In1 *ec2.DescribeTrafficMirrorTargetsInput
	}
	lockec2ClientMockDescribeTrafficMirrorTargetsRequest.RLock()
	calls = mock.calls.DescribeTrafficMirrorTargetsRequest
	lockec2ClientMockDescribeTrafficMirrorTargetsRequest.RUnlock()
	return calls
}

// DescribeTrafficMirrorTargetsWithContext calls DescribeTrafficMirrorTargetsWithContextFunc.
func (mock *ec2ClientMock) DescribeTrafficMirrorTargetsWithContext(in1 context.Context, in2 *ec2.DescribeTrafficMirrorTargetsInput, in3 ...request.Option) (*ec2.DescribeTrafficMirrorTargetsOutput, error) {
	if mock.DescribeTrafficMirrorTargetsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeTrafficMirrorTargetsWithContextFunc: method is nil but ec2Client.DescribeTrafficMirrorTargetsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeTrafficMirrorTargetsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeTrafficMirrorTargetsWithContext.Lock()
	mock.calls.DescribeTrafficMirrorTargetsWithContext = append(mock.calls.DescribeTrafficMirrorTargetsWithContext, callInfo)
	lockec2ClientMockDescribeTrafficMirrorTargetsWithContext.Unlock()
	return mock.DescribeTrafficMirrorTargetsWithContextFunc(in1, in2, in3...)
}

// DescribeTrafficMirrorTargetsWithContextCalls gets all the calls that were made to DescribeTrafficMirrorTargetsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeTrafficMirrorTargetsWithContextCalls())
func (mock *ec2ClientMock) DescribeTrafficMirrorTargetsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeTrafficMirrorTargetsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeTrafficMirrorTargetsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeTrafficMirrorTargetsWithContext.RLock()
	calls = mock.calls.DescribeTrafficMirrorTargetsWithContext
	lockec2ClientMockDescribeTrafficMirrorTargetsWithContext.RUnlock()
	return calls
}

// DescribeTransitGatewayAttachments calls DescribeTransitGatewayAttachmentsFunc.
func (mock *ec2ClientMock) DescribeTransitGatewayAttachments(in1 *ec2.DescribeTransitGatewayAttachmentsInput) (*ec2.DescribeTransitGatewayAttachmentsOutput, error) {
	if mock.DescribeTransitGatewayAttachmentsFunc == nil {
		panic("ec2ClientMock.DescribeTransitGatewayAttachmentsFunc: method is nil but ec2Client.DescribeTransitGatewayAttachments was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTransitGatewayAttachmentsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeTransitGatewayAttachments.Lock()
	mock.calls.DescribeTransitGatewayAttachments = append(mock.calls.DescribeTransitGatewayAttachments, callInfo)
	lockec2ClientMockDescribeTransitGatewayAttachments.Unlock()
	return mock.DescribeTransitGatewayAttachmentsFunc(in1)
}

// DescribeTransitGatewayAttachmentsCalls gets all the calls that were made to DescribeTransitGatewayAttachments.
// Check the length with:
//     len(mockedec2Client.DescribeTransitGatewayAttachmentsCalls())
func (mock *ec2ClientMock) DescribeTransitGatewayAttachmentsCalls() []struct {
	In1 *ec2.DescribeTransitGatewayAttachmentsInput
} {
	var calls []struct {
		In1 *ec2.DescribeTransitGatewayAttachmentsInput
	}
	lockec2ClientMockDescribeTransitGatewayAttachments.RLock()
	calls = mock.calls.DescribeTransitGatewayAttachments
	lockec2ClientMockDescribeTransitGatewayAttachments.RUnlock()
	return calls
}

// DescribeTransitGatewayAttachmentsPages calls DescribeTransitGatewayAttachmentsPagesFunc.
func (mock *ec2ClientMock) DescribeTransitGatewayAttachmentsPages(in1 *ec2.DescribeTransitGatewayAttachmentsInput, in2 func(*ec2.DescribeTransitGatewayAttachmentsOutput, bool) bool) error {
	if mock.DescribeTransitGatewayAttachmentsPagesFunc == nil {
		panic("ec2ClientMock.DescribeTransitGatewayAttachmentsPagesFunc: method is nil but ec2Client.DescribeTransitGatewayAttachmentsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTransitGatewayAttachmentsInput
		In2 func(*ec2.DescribeTransitGatewayAttachmentsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeTransitGatewayAttachmentsPages.Lock()
	mock.calls.DescribeTransitGatewayAttachmentsPages = append(mock.calls.DescribeTransitGatewayAttachmentsPages, callInfo)
	lockec2ClientMockDescribeTransitGatewayAttachmentsPages.Unlock()
	return mock.DescribeTransitGatewayAttachmentsPagesFunc(in1, in2)
}

// DescribeTransitGatewayAttachmentsPagesCalls gets all the calls that were made to DescribeTransitGatewayAttachmentsPages.
// Check the length with:
//     len(mockedec2Client.DescribeTransitGatewayAttachmentsPagesCalls())
func (mock *ec2ClientMock) DescribeTransitGatewayAttachmentsPagesCalls() []struct {
	In1 *ec2.DescribeTransitGatewayAttachmentsInput
	In2 func(*ec2.DescribeTransitGatewayAttachmentsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeTransitGatewayAttachmentsInput
		In2 func(*ec2.DescribeTransitGatewayAttachmentsOutput, bool) bool
	}
	lockec2ClientMockDescribeTransitGatewayAttachmentsPages.RLock()
	calls = mock.calls.DescribeTransitGatewayAttachmentsPages
	lockec2ClientMockDescribeTransitGatewayAttachmentsPages.RUnlock()
	return calls
}

// DescribeTransitGatewayAttachmentsPagesWithContext calls DescribeTransitGatewayAttachmentsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeTransitGatewayAttachmentsPagesWithContext(in1 context.Context, in2 *ec2.DescribeTransitGatewayAttachmentsInput, in3 func(*ec2.DescribeTransitGatewayAttachmentsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeTransitGatewayAttachmentsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeTransitGatewayAttachmentsPagesWithContextFunc: method is nil but ec2Client.DescribeTransitGatewayAttachmentsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeTransitGatewayAttachmentsInput
		In3 func(*ec2.DescribeTransitGatewayAttachmentsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeTransitGatewayAttachmentsPagesWithContext.Lock()
	mock.calls.DescribeTransitGatewayAttachmentsPagesWithContext = append(mock.calls.DescribeTransitGatewayAttachmentsPagesWithContext, callInfo)
	lockec2ClientMockDescribeTransitGatewayAttachmentsPagesWithContext.Unlock()
	return mock.DescribeTransitGatewayAttachmentsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeTransitGatewayAttachmentsPagesWithContextCalls gets all the calls that were made to DescribeTransitGatewayAttachmentsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeTransitGatewayAttachmentsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeTransitGatewayAttachmentsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeTransitGatewayAttachmentsInput
	In3 func(*ec2.DescribeTransitGatewayAttachmentsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeTransitGatewayAttachmentsInput
		In3 func(*ec2.DescribeTransitGatewayAttachmentsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeTransitGatewayAttachmentsPagesWithContext.RLock()
	calls = mock.calls.DescribeTransitGatewayAttachmentsPagesWithContext
	lockec2ClientMockDescribeTransitGatewayAttachmentsPagesWithContext.RUnlock()
	return calls
}

// DescribeTransitGatewayAttachmentsRequest calls DescribeTransitGatewayAttachmentsRequestFunc.
func (mock *ec2ClientMock) DescribeTransitGatewayAttachmentsRequest(in1 *ec2.DescribeTransitGatewayAttachmentsInput) (*request.Request, *ec2.DescribeTransitGatewayAttachmentsOutput) {
	if mock.DescribeTransitGatewayAttachmentsRequestFunc == nil {
		panic("ec2ClientMock.DescribeTransitGatewayAttachmentsRequestFunc: method is nil but ec2Client.DescribeTransitGatewayAttachmentsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTransitGatewayAttachmentsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeTransitGatewayAttachmentsRequest.Lock()
	mock.calls.DescribeTransitGatewayAttachmentsRequest = append(mock.calls.DescribeTransitGatewayAttachmentsRequest, callInfo)
	lockec2ClientMockDescribeTransitGatewayAttachmentsRequest.Unlock()
	return mock.DescribeTransitGatewayAttachmentsRequestFunc(in1)
}

// DescribeTransitGatewayAttachmentsRequestCalls gets all the calls that were made to DescribeTransitGatewayAttachmentsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeTransitGatewayAttachmentsRequestCalls())
func (mock *ec2ClientMock) DescribeTransitGatewayAttachmentsRequestCalls() []struct {
	In1 *ec2.DescribeTransitGatewayAttachmentsInput
} {
	var calls []struct {
		In1 *ec2.DescribeTransitGatewayAttachmentsInput
	}
	lockec2ClientMockDescribeTransitGatewayAttachmentsRequest.RLock()
	calls = mock.calls.DescribeTransitGatewayAttachmentsRequest
	lockec2ClientMockDescribeTransitGatewayAttachmentsRequest.RUnlock()
	return calls
}

// DescribeTransitGatewayAttachmentsWithContext calls DescribeTransitGatewayAttachmentsWithContextFunc.
func (mock *ec2ClientMock) DescribeTransitGatewayAttachmentsWithContext(in1 context.Context, in2 *ec2.DescribeTransitGatewayAttachmentsInput, in3 ...request.Option) (*ec2.DescribeTransitGatewayAttachmentsOutput, error) {
	if mock.DescribeTransitGatewayAttachmentsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeTransitGatewayAttachmentsWithContextFunc: method is nil but ec2Client.DescribeTransitGatewayAttachmentsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeTransitGatewayAttachmentsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeTransitGatewayAttachmentsWithContext.Lock()
	mock.calls.DescribeTransitGatewayAttachmentsWithContext = append(mock.calls.DescribeTransitGatewayAttachmentsWithContext, callInfo)
	lockec2ClientMockDescribeTransitGatewayAttachmentsWithContext.Unlock()
	return mock.DescribeTransitGatewayAttachmentsWithContextFunc(in1, in2, in3...)
}

// DescribeTransitGatewayAttachmentsWithContextCalls gets all the calls that were made to DescribeTransitGatewayAttachmentsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeTransitGatewayAttachmentsWithContextCalls())
func (mock *ec2ClientMock) DescribeTransitGatewayAttachmentsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeTransitGatewayAttachmentsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeTransitGatewayAttachmentsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeTransitGatewayAttachmentsWithContext.RLock()
	calls = mock.calls.DescribeTransitGatewayAttachmentsWithContext
	lockec2ClientMockDescribeTransitGatewayAttachmentsWithContext.RUnlock()
	return calls
}

// DescribeTransitGatewayMulticastDomains calls DescribeTransitGatewayMulticastDomainsFunc.
func (mock *ec2ClientMock) DescribeTransitGatewayMulticastDomains(in1 *ec2.DescribeTransitGatewayMulticastDomainsInput) (*ec2.DescribeTransitGatewayMulticastDomainsOutput, error) {
	if mock.DescribeTransitGatewayMulticastDomainsFunc == nil {
		panic("ec2ClientMock.DescribeTransitGatewayMulticastDomainsFunc: method is nil but ec2Client.DescribeTransitGatewayMulticastDomains was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTransitGatewayMulticastDomainsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeTransitGatewayMulticastDomains.Lock()
	mock.calls.DescribeTransitGatewayMulticastDomains = append(mock.calls.DescribeTransitGatewayMulticastDomains, callInfo)
	lockec2ClientMockDescribeTransitGatewayMulticastDomains.Unlock()
	return mock.DescribeTransitGatewayMulticastDomainsFunc(in1)
}

// DescribeTransitGatewayMulticastDomainsCalls gets all the calls that were made to DescribeTransitGatewayMulticastDomains.
// Check the length with:
//     len(mockedec2Client.DescribeTransitGatewayMulticastDomainsCalls())
func (mock *ec2ClientMock) DescribeTransitGatewayMulticastDomainsCalls() []struct {
	In1 *ec2.DescribeTransitGatewayMulticastDomainsInput
} {
	var calls []struct {
		In1 *ec2.DescribeTransitGatewayMulticastDomainsInput
	}
	lockec2ClientMockDescribeTransitGatewayMulticastDomains.RLock()
	calls = mock.calls.DescribeTransitGatewayMulticastDomains
	lockec2ClientMockDescribeTransitGatewayMulticastDomains.RUnlock()
	return calls
}

// DescribeTransitGatewayMulticastDomainsRequest calls DescribeTransitGatewayMulticastDomainsRequestFunc.
func (mock *ec2ClientMock) DescribeTransitGatewayMulticastDomainsRequest(in1 *ec2.DescribeTransitGatewayMulticastDomainsInput) (*request.Request, *ec2.DescribeTransitGatewayMulticastDomainsOutput) {
	if mock.DescribeTransitGatewayMulticastDomainsRequestFunc == nil {
		panic("ec2ClientMock.DescribeTransitGatewayMulticastDomainsRequestFunc: method is nil but ec2Client.DescribeTransitGatewayMulticastDomainsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTransitGatewayMulticastDomainsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeTransitGatewayMulticastDomainsRequest.Lock()
	mock.calls.DescribeTransitGatewayMulticastDomainsRequest = append(mock.calls.DescribeTransitGatewayMulticastDomainsRequest, callInfo)
	lockec2ClientMockDescribeTransitGatewayMulticastDomainsRequest.Unlock()
	return mock.DescribeTransitGatewayMulticastDomainsRequestFunc(in1)
}

// DescribeTransitGatewayMulticastDomainsRequestCalls gets all the calls that were made to DescribeTransitGatewayMulticastDomainsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeTransitGatewayMulticastDomainsRequestCalls())
func (mock *ec2ClientMock) DescribeTransitGatewayMulticastDomainsRequestCalls() []struct {
	In1 *ec2.DescribeTransitGatewayMulticastDomainsInput
} {
	var calls []struct {
		In1 *ec2.DescribeTransitGatewayMulticastDomainsInput
	}
	lockec2ClientMockDescribeTransitGatewayMulticastDomainsRequest.RLock()
	calls = mock.calls.DescribeTransitGatewayMulticastDomainsRequest
	lockec2ClientMockDescribeTransitGatewayMulticastDomainsRequest.RUnlock()
	return calls
}

// DescribeTransitGatewayMulticastDomainsWithContext calls DescribeTransitGatewayMulticastDomainsWithContextFunc.
func (mock *ec2ClientMock) DescribeTransitGatewayMulticastDomainsWithContext(in1 context.Context, in2 *ec2.DescribeTransitGatewayMulticastDomainsInput, in3 ...request.Option) (*ec2.DescribeTransitGatewayMulticastDomainsOutput, error) {
	if mock.DescribeTransitGatewayMulticastDomainsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeTransitGatewayMulticastDomainsWithContextFunc: method is nil but ec2Client.DescribeTransitGatewayMulticastDomainsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeTransitGatewayMulticastDomainsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeTransitGatewayMulticastDomainsWithContext.Lock()
	mock.calls.DescribeTransitGatewayMulticastDomainsWithContext = append(mock.calls.DescribeTransitGatewayMulticastDomainsWithContext, callInfo)
	lockec2ClientMockDescribeTransitGatewayMulticastDomainsWithContext.Unlock()
	return mock.DescribeTransitGatewayMulticastDomainsWithContextFunc(in1, in2, in3...)
}

// DescribeTransitGatewayMulticastDomainsWithContextCalls gets all the calls that were made to DescribeTransitGatewayMulticastDomainsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeTransitGatewayMulticastDomainsWithContextCalls())
func (mock *ec2ClientMock) DescribeTransitGatewayMulticastDomainsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeTransitGatewayMulticastDomainsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeTransitGatewayMulticastDomainsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeTransitGatewayMulticastDomainsWithContext.RLock()
	calls = mock.calls.DescribeTransitGatewayMulticastDomainsWithContext
	lockec2ClientMockDescribeTransitGatewayMulticastDomainsWithContext.RUnlock()
	return calls
}

// DescribeTransitGatewayPeeringAttachments calls DescribeTransitGatewayPeeringAttachmentsFunc.
func (mock *ec2ClientMock) DescribeTransitGatewayPeeringAttachments(in1 *ec2.DescribeTransitGatewayPeeringAttachmentsInput) (*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, error) {
	if mock.DescribeTransitGatewayPeeringAttachmentsFunc == nil {
		panic("ec2ClientMock.DescribeTransitGatewayPeeringAttachmentsFunc: method is nil but ec2Client.DescribeTransitGatewayPeeringAttachments was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTransitGatewayPeeringAttachmentsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeTransitGatewayPeeringAttachments.Lock()
	mock.calls.DescribeTransitGatewayPeeringAttachments = append(mock.calls.DescribeTransitGatewayPeeringAttachments, callInfo)
	lockec2ClientMockDescribeTransitGatewayPeeringAttachments.Unlock()
	return mock.DescribeTransitGatewayPeeringAttachmentsFunc(in1)
}

// DescribeTransitGatewayPeeringAttachmentsCalls gets all the calls that were made to DescribeTransitGatewayPeeringAttachments.
// Check the length with:
//     len(mockedec2Client.DescribeTransitGatewayPeeringAttachmentsCalls())
func (mock *ec2ClientMock) DescribeTransitGatewayPeeringAttachmentsCalls() []struct {
	In1 *ec2.DescribeTransitGatewayPeeringAttachmentsInput
} {
	var calls []struct {
		In1 *ec2.DescribeTransitGatewayPeeringAttachmentsInput
	}
	lockec2ClientMockDescribeTransitGatewayPeeringAttachments.RLock()
	calls = mock.calls.DescribeTransitGatewayPeeringAttachments
	lockec2ClientMockDescribeTransitGatewayPeeringAttachments.RUnlock()
	return calls
}

// DescribeTransitGatewayPeeringAttachmentsRequest calls DescribeTransitGatewayPeeringAttachmentsRequestFunc.
func (mock *ec2ClientMock) DescribeTransitGatewayPeeringAttachmentsRequest(in1 *ec2.DescribeTransitGatewayPeeringAttachmentsInput) (*request.Request, *ec2.DescribeTransitGatewayPeeringAttachmentsOutput) {
	if mock.DescribeTransitGatewayPeeringAttachmentsRequestFunc == nil {
		panic("ec2ClientMock.DescribeTransitGatewayPeeringAttachmentsRequestFunc: method is nil but ec2Client.DescribeTransitGatewayPeeringAttachmentsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTransitGatewayPeeringAttachmentsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeTransitGatewayPeeringAttachmentsRequest.Lock()
	mock.calls.DescribeTransitGatewayPeeringAttachmentsRequest = append(mock.calls.DescribeTransitGatewayPeeringAttachmentsRequest, callInfo)
	lockec2ClientMockDescribeTransitGatewayPeeringAttachmentsRequest.Unlock()
	return mock.DescribeTransitGatewayPeeringAttachmentsRequestFunc(in1)
}

// DescribeTransitGatewayPeeringAttachmentsRequestCalls gets all the calls that were made to DescribeTransitGatewayPeeringAttachmentsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeTransitGatewayPeeringAttachmentsRequestCalls())
func (mock *ec2ClientMock) DescribeTransitGatewayPeeringAttachmentsRequestCalls() []struct {
	In1 *ec2.DescribeTransitGatewayPeeringAttachmentsInput
} {
	var calls []struct {
		In1 *ec2.DescribeTransitGatewayPeeringAttachmentsInput
	}
	lockec2ClientMockDescribeTransitGatewayPeeringAttachmentsRequest.RLock()
	calls = mock.calls.DescribeTransitGatewayPeeringAttachmentsRequest
	lockec2ClientMockDescribeTransitGatewayPeeringAttachmentsRequest.RUnlock()
	return calls
}

// DescribeTransitGatewayPeeringAttachmentsWithContext calls DescribeTransitGatewayPeeringAttachmentsWithContextFunc.
func (mock *ec2ClientMock) DescribeTransitGatewayPeeringAttachmentsWithContext(in1 context.Context, in2 *ec2.DescribeTransitGatewayPeeringAttachmentsInput, in3 ...request.Option) (*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, error) {
	if mock.DescribeTransitGatewayPeeringAttachmentsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeTransitGatewayPeeringAttachmentsWithContextFunc: method is nil but ec2Client.DescribeTransitGatewayPeeringAttachmentsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeTransitGatewayPeeringAttachmentsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeTransitGatewayPeeringAttachmentsWithContext.Lock()
	mock.calls.DescribeTransitGatewayPeeringAttachmentsWithContext = append(mock.calls.DescribeTransitGatewayPeeringAttachmentsWithContext, callInfo)
	lockec2ClientMockDescribeTransitGatewayPeeringAttachmentsWithContext.Unlock()
	return mock.DescribeTransitGatewayPeeringAttachmentsWithContextFunc(in1, in2, in3...)
}

// DescribeTransitGatewayPeeringAttachmentsWithContextCalls gets all the calls that were made to DescribeTransitGatewayPeeringAttachmentsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeTransitGatewayPeeringAttachmentsWithContextCalls())
func (mock *ec2ClientMock) DescribeTransitGatewayPeeringAttachmentsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeTransitGatewayPeeringAttachmentsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeTransitGatewayPeeringAttachmentsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeTransitGatewayPeeringAttachmentsWithContext.RLock()
	calls = mock.calls.DescribeTransitGatewayPeeringAttachmentsWithContext
	lockec2ClientMockDescribeTransitGatewayPeeringAttachmentsWithContext.RUnlock()
	return calls
}

// DescribeTransitGatewayRouteTables calls DescribeTransitGatewayRouteTablesFunc.
func (mock *ec2ClientMock) DescribeTransitGatewayRouteTables(in1 *ec2.DescribeTransitGatewayRouteTablesInput) (*ec2.DescribeTransitGatewayRouteTablesOutput, error) {
	if mock.DescribeTransitGatewayRouteTablesFunc == nil {
		panic("ec2ClientMock.DescribeTransitGatewayRouteTablesFunc: method is nil but ec2Client.DescribeTransitGatewayRouteTables was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTransitGatewayRouteTablesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeTransitGatewayRouteTables.Lock()
	mock.calls.DescribeTransitGatewayRouteTables = append(mock.calls.DescribeTransitGatewayRouteTables, callInfo)
	lockec2ClientMockDescribeTransitGatewayRouteTables.Unlock()
	return mock.DescribeTransitGatewayRouteTablesFunc(in1)
}

// DescribeTransitGatewayRouteTablesCalls gets all the calls that were made to DescribeTransitGatewayRouteTables.
// Check the length with:
//     len(mockedec2Client.DescribeTransitGatewayRouteTablesCalls())
func (mock *ec2ClientMock) DescribeTransitGatewayRouteTablesCalls() []struct {
	In1 *ec2.DescribeTransitGatewayRouteTablesInput
} {
	var calls []struct {
		In1 *ec2.DescribeTransitGatewayRouteTablesInput
	}
	lockec2ClientMockDescribeTransitGatewayRouteTables.RLock()
	calls = mock.calls.DescribeTransitGatewayRouteTables
	lockec2ClientMockDescribeTransitGatewayRouteTables.RUnlock()
	return calls
}

// DescribeTransitGatewayRouteTablesPages calls DescribeTransitGatewayRouteTablesPagesFunc.
func (mock *ec2ClientMock) DescribeTransitGatewayRouteTablesPages(in1 *ec2.DescribeTransitGatewayRouteTablesInput, in2 func(*ec2.DescribeTransitGatewayRouteTablesOutput, bool) bool) error {
	if mock.DescribeTransitGatewayRouteTablesPagesFunc == nil {
		panic("ec2ClientMock.DescribeTransitGatewayRouteTablesPagesFunc: method is nil but ec2Client.DescribeTransitGatewayRouteTablesPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTransitGatewayRouteTablesInput
		In2 func(*ec2.DescribeTransitGatewayRouteTablesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeTransitGatewayRouteTablesPages.Lock()
	mock.calls.DescribeTransitGatewayRouteTablesPages = append(mock.calls.DescribeTransitGatewayRouteTablesPages, callInfo)
	lockec2ClientMockDescribeTransitGatewayRouteTablesPages.Unlock()
	return mock.DescribeTransitGatewayRouteTablesPagesFunc(in1, in2)
}

// DescribeTransitGatewayRouteTablesPagesCalls gets all the calls that were made to DescribeTransitGatewayRouteTablesPages.
// Check the length with:
//     len(mockedec2Client.DescribeTransitGatewayRouteTablesPagesCalls())
func (mock *ec2ClientMock) DescribeTransitGatewayRouteTablesPagesCalls() []struct {
	In1 *ec2.DescribeTransitGatewayRouteTablesInput
	In2 func(*ec2.DescribeTransitGatewayRouteTablesOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeTransitGatewayRouteTablesInput
		In2 func(*ec2.DescribeTransitGatewayRouteTablesOutput, bool) bool
	}
	lockec2ClientMockDescribeTransitGatewayRouteTablesPages.RLock()
	calls = mock.calls.DescribeTransitGatewayRouteTablesPages
	lockec2ClientMockDescribeTransitGatewayRouteTablesPages.RUnlock()
	return calls
}

// DescribeTransitGatewayRouteTablesPagesWithContext calls DescribeTransitGatewayRouteTablesPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeTransitGatewayRouteTablesPagesWithContext(in1 context.Context, in2 *ec2.DescribeTransitGatewayRouteTablesInput, in3 func(*ec2.DescribeTransitGatewayRouteTablesOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeTransitGatewayRouteTablesPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeTransitGatewayRouteTablesPagesWithContextFunc: method is nil but ec2Client.DescribeTransitGatewayRouteTablesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeTransitGatewayRouteTablesInput
		In3 func(*ec2.DescribeTransitGatewayRouteTablesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeTransitGatewayRouteTablesPagesWithContext.Lock()
	mock.calls.DescribeTransitGatewayRouteTablesPagesWithContext = append(mock.calls.DescribeTransitGatewayRouteTablesPagesWithContext, callInfo)
	lockec2ClientMockDescribeTransitGatewayRouteTablesPagesWithContext.Unlock()
	return mock.DescribeTransitGatewayRouteTablesPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeTransitGatewayRouteTablesPagesWithContextCalls gets all the calls that were made to DescribeTransitGatewayRouteTablesPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeTransitGatewayRouteTablesPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeTransitGatewayRouteTablesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeTransitGatewayRouteTablesInput
	In3 func(*ec2.DescribeTransitGatewayRouteTablesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeTransitGatewayRouteTablesInput
		In3 func(*ec2.DescribeTransitGatewayRouteTablesOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeTransitGatewayRouteTablesPagesWithContext.RLock()
	calls = mock.calls.DescribeTransitGatewayRouteTablesPagesWithContext
	lockec2ClientMockDescribeTransitGatewayRouteTablesPagesWithContext.RUnlock()
	return calls
}

// DescribeTransitGatewayRouteTablesRequest calls DescribeTransitGatewayRouteTablesRequestFunc.
func (mock *ec2ClientMock) DescribeTransitGatewayRouteTablesRequest(in1 *ec2.DescribeTransitGatewayRouteTablesInput) (*request.Request, *ec2.DescribeTransitGatewayRouteTablesOutput) {
	if mock.DescribeTransitGatewayRouteTablesRequestFunc == nil {
		panic("ec2ClientMock.DescribeTransitGatewayRouteTablesRequestFunc: method is nil but ec2Client.DescribeTransitGatewayRouteTablesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTransitGatewayRouteTablesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeTransitGatewayRouteTablesRequest.Lock()
	mock.calls.DescribeTransitGatewayRouteTablesRequest = append(mock.calls.DescribeTransitGatewayRouteTablesRequest, callInfo)
	lockec2ClientMockDescribeTransitGatewayRouteTablesRequest.Unlock()
	return mock.DescribeTransitGatewayRouteTablesRequestFunc(in1)
}

// DescribeTransitGatewayRouteTablesRequestCalls gets all the calls that were made to DescribeTransitGatewayRouteTablesRequest.
// Check the length with:
//     len(mockedec2Client.DescribeTransitGatewayRouteTablesRequestCalls())
func (mock *ec2ClientMock) DescribeTransitGatewayRouteTablesRequestCalls() []struct {
	In1 *ec2.DescribeTransitGatewayRouteTablesInput
} {
	var calls []struct {
		In1 *ec2.DescribeTransitGatewayRouteTablesInput
	}
	lockec2ClientMockDescribeTransitGatewayRouteTablesRequest.RLock()
	calls = mock.calls.DescribeTransitGatewayRouteTablesRequest
	lockec2ClientMockDescribeTransitGatewayRouteTablesRequest.RUnlock()
	return calls
}

// DescribeTransitGatewayRouteTablesWithContext calls DescribeTransitGatewayRouteTablesWithContextFunc.
func (mock *ec2ClientMock) DescribeTransitGatewayRouteTablesWithContext(in1 context.Context, in2 *ec2.DescribeTransitGatewayRouteTablesInput, in3 ...request.Option) (*ec2.DescribeTransitGatewayRouteTablesOutput, error) {
	if mock.DescribeTransitGatewayRouteTablesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeTransitGatewayRouteTablesWithContextFunc: method is nil but ec2Client.DescribeTransitGatewayRouteTablesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeTransitGatewayRouteTablesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeTransitGatewayRouteTablesWithContext.Lock()
	mock.calls.DescribeTransitGatewayRouteTablesWithContext = append(mock.calls.DescribeTransitGatewayRouteTablesWithContext, callInfo)
	lockec2ClientMockDescribeTransitGatewayRouteTablesWithContext.Unlock()
	return mock.DescribeTransitGatewayRouteTablesWithContextFunc(in1, in2, in3...)
}

// DescribeTransitGatewayRouteTablesWithContextCalls gets all the calls that were made to DescribeTransitGatewayRouteTablesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeTransitGatewayRouteTablesWithContextCalls())
func (mock *ec2ClientMock) DescribeTransitGatewayRouteTablesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeTransitGatewayRouteTablesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeTransitGatewayRouteTablesInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeTransitGatewayRouteTablesWithContext.RLock()
	calls = mock.calls.DescribeTransitGatewayRouteTablesWithContext
	lockec2ClientMockDescribeTransitGatewayRouteTablesWithContext.RUnlock()
	return calls
}

// DescribeTransitGatewayVpcAttachments calls DescribeTransitGatewayVpcAttachmentsFunc.
func (mock *ec2ClientMock) DescribeTransitGatewayVpcAttachments(in1 *ec2.DescribeTransitGatewayVpcAttachmentsInput) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error) {
	if mock.DescribeTransitGatewayVpcAttachmentsFunc == nil {
		panic("ec2ClientMock.DescribeTransitGatewayVpcAttachmentsFunc: method is nil but ec2Client.DescribeTransitGatewayVpcAttachments was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTransitGatewayVpcAttachmentsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeTransitGatewayVpcAttachments.Lock()
	mock.calls.DescribeTransitGatewayVpcAttachments = append(mock.calls.DescribeTransitGatewayVpcAttachments, callInfo)
	lockec2ClientMockDescribeTransitGatewayVpcAttachments.Unlock()
	return mock.DescribeTransitGatewayVpcAttachmentsFunc(in1)
}

// DescribeTransitGatewayVpcAttachmentsCalls gets all the calls that were made to DescribeTransitGatewayVpcAttachments.
// Check the length with:
//     len(mockedec2Client.DescribeTransitGatewayVpcAttachmentsCalls())
func (mock *ec2ClientMock) DescribeTransitGatewayVpcAttachmentsCalls() []struct {
	In1 *ec2.DescribeTransitGatewayVpcAttachmentsInput
} {
	var calls []struct {
		In1 *ec2.DescribeTransitGatewayVpcAttachmentsInput
	}
	lockec2ClientMockDescribeTransitGatewayVpcAttachments.RLock()
	calls = mock.calls.DescribeTransitGatewayVpcAttachments
	lockec2ClientMockDescribeTransitGatewayVpcAttachments.RUnlock()
	return calls
}

// DescribeTransitGatewayVpcAttachmentsPages calls DescribeTransitGatewayVpcAttachmentsPagesFunc.
func (mock *ec2ClientMock) DescribeTransitGatewayVpcAttachmentsPages(in1 *ec2.DescribeTransitGatewayVpcAttachmentsInput, in2 func(*ec2.DescribeTransitGatewayVpcAttachmentsOutput, bool) bool) error {
	if mock.DescribeTransitGatewayVpcAttachmentsPagesFunc == nil {
		panic("ec2ClientMock.DescribeTransitGatewayVpcAttachmentsPagesFunc: method is nil but ec2Client.DescribeTransitGatewayVpcAttachmentsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTransitGatewayVpcAttachmentsInput
		In2 func(*ec2.DescribeTransitGatewayVpcAttachmentsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeTransitGatewayVpcAttachmentsPages.Lock()
	mock.calls.DescribeTransitGatewayVpcAttachmentsPages = append(mock.calls.DescribeTransitGatewayVpcAttachmentsPages, callInfo)
	lockec2ClientMockDescribeTransitGatewayVpcAttachmentsPages.Unlock()
	return mock.DescribeTransitGatewayVpcAttachmentsPagesFunc(in1, in2)
}

// DescribeTransitGatewayVpcAttachmentsPagesCalls gets all the calls that were made to DescribeTransitGatewayVpcAttachmentsPages.
// Check the length with:
//     len(mockedec2Client.DescribeTransitGatewayVpcAttachmentsPagesCalls())
func (mock *ec2ClientMock) DescribeTransitGatewayVpcAttachmentsPagesCalls() []struct {
	In1 *ec2.DescribeTransitGatewayVpcAttachmentsInput
	In2 func(*ec2.DescribeTransitGatewayVpcAttachmentsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeTransitGatewayVpcAttachmentsInput
		In2 func(*ec2.DescribeTransitGatewayVpcAttachmentsOutput, bool) bool
	}
	lockec2ClientMockDescribeTransitGatewayVpcAttachmentsPages.RLock()
	calls = mock.calls.DescribeTransitGatewayVpcAttachmentsPages
	lockec2ClientMockDescribeTransitGatewayVpcAttachmentsPages.RUnlock()
	return calls
}

// DescribeTransitGatewayVpcAttachmentsPagesWithContext calls DescribeTransitGatewayVpcAttachmentsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeTransitGatewayVpcAttachmentsPagesWithContext(in1 context.Context, in2 *ec2.DescribeTransitGatewayVpcAttachmentsInput, in3 func(*ec2.DescribeTransitGatewayVpcAttachmentsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeTransitGatewayVpcAttachmentsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeTransitGatewayVpcAttachmentsPagesWithContextFunc: method is nil but ec2Client.DescribeTransitGatewayVpcAttachmentsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeTransitGatewayVpcAttachmentsInput
		In3 func(*ec2.DescribeTransitGatewayVpcAttachmentsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeTransitGatewayVpcAttachmentsPagesWithContext.Lock()
	mock.calls.DescribeTransitGatewayVpcAttachmentsPagesWithContext = append(mock.calls.DescribeTransitGatewayVpcAttachmentsPagesWithContext, callInfo)
	lockec2ClientMockDescribeTransitGatewayVpcAttachmentsPagesWithContext.Unlock()
	return mock.DescribeTransitGatewayVpcAttachmentsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeTransitGatewayVpcAttachmentsPagesWithContextCalls gets all the calls that were made to DescribeTransitGatewayVpcAttachmentsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeTransitGatewayVpcAttachmentsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeTransitGatewayVpcAttachmentsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeTransitGatewayVpcAttachmentsInput
	In3 func(*ec2.DescribeTransitGatewayVpcAttachmentsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeTransitGatewayVpcAttachmentsInput
		In3 func(*ec2.DescribeTransitGatewayVpcAttachmentsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeTransitGatewayVpcAttachmentsPagesWithContext.RLock()
	calls = mock.calls.DescribeTransitGatewayVpcAttachmentsPagesWithContext
	lockec2ClientMockDescribeTransitGatewayVpcAttachmentsPagesWithContext.RUnlock()
	return calls
}

// DescribeTransitGatewayVpcAttachmentsRequest calls DescribeTransitGatewayVpcAttachmentsRequestFunc.
func (mock *ec2ClientMock) DescribeTransitGatewayVpcAttachmentsRequest(in1 *ec2.DescribeTransitGatewayVpcAttachmentsInput) (*request.Request, *ec2.DescribeTransitGatewayVpcAttachmentsOutput) {
	if mock.DescribeTransitGatewayVpcAttachmentsRequestFunc == nil {
		panic("ec2ClientMock.DescribeTransitGatewayVpcAttachmentsRequestFunc: method is nil but ec2Client.DescribeTransitGatewayVpcAttachmentsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTransitGatewayVpcAttachmentsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeTransitGatewayVpcAttachmentsRequest.Lock()
	mock.calls.DescribeTransitGatewayVpcAttachmentsRequest = append(mock.calls.DescribeTransitGatewayVpcAttachmentsRequest, callInfo)
	lockec2ClientMockDescribeTransitGatewayVpcAttachmentsRequest.Unlock()
	return mock.DescribeTransitGatewayVpcAttachmentsRequestFunc(in1)
}

// DescribeTransitGatewayVpcAttachmentsRequestCalls gets all the calls that were made to DescribeTransitGatewayVpcAttachmentsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeTransitGatewayVpcAttachmentsRequestCalls())
func (mock *ec2ClientMock) DescribeTransitGatewayVpcAttachmentsRequestCalls() []struct {
	In1 *ec2.DescribeTransitGatewayVpcAttachmentsInput
} {
	var calls []struct {
		In1 *ec2.DescribeTransitGatewayVpcAttachmentsInput
	}
	lockec2ClientMockDescribeTransitGatewayVpcAttachmentsRequest.RLock()
	calls = mock.calls.DescribeTransitGatewayVpcAttachmentsRequest
	lockec2ClientMockDescribeTransitGatewayVpcAttachmentsRequest.RUnlock()
	return calls
}

// DescribeTransitGatewayVpcAttachmentsWithContext calls DescribeTransitGatewayVpcAttachmentsWithContextFunc.
func (mock *ec2ClientMock) DescribeTransitGatewayVpcAttachmentsWithContext(in1 context.Context, in2 *ec2.DescribeTransitGatewayVpcAttachmentsInput, in3 ...request.Option) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error) {
	if mock.DescribeTransitGatewayVpcAttachmentsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeTransitGatewayVpcAttachmentsWithContextFunc: method is nil but ec2Client.DescribeTransitGatewayVpcAttachmentsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeTransitGatewayVpcAttachmentsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeTransitGatewayVpcAttachmentsWithContext.Lock()
	mock.calls.DescribeTransitGatewayVpcAttachmentsWithContext = append(mock.calls.DescribeTransitGatewayVpcAttachmentsWithContext, callInfo)
	lockec2ClientMockDescribeTransitGatewayVpcAttachmentsWithContext.Unlock()
	return mock.DescribeTransitGatewayVpcAttachmentsWithContextFunc(in1, in2, in3...)
}

// DescribeTransitGatewayVpcAttachmentsWithContextCalls gets all the calls that were made to DescribeTransitGatewayVpcAttachmentsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeTransitGatewayVpcAttachmentsWithContextCalls())
func (mock *ec2ClientMock) DescribeTransitGatewayVpcAttachmentsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeTransitGatewayVpcAttachmentsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeTransitGatewayVpcAttachmentsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeTransitGatewayVpcAttachmentsWithContext.RLock()
	calls = mock.calls.DescribeTransitGatewayVpcAttachmentsWithContext
	lockec2ClientMockDescribeTransitGatewayVpcAttachmentsWithContext.RUnlock()
	return calls
}

// DescribeTransitGateways calls DescribeTransitGatewaysFunc.
func (mock *ec2ClientMock) DescribeTransitGateways(in1 *ec2.DescribeTransitGatewaysInput) (*ec2.DescribeTransitGatewaysOutput, error) {
	if mock.DescribeTransitGatewaysFunc == nil {
		panic("ec2ClientMock.DescribeTransitGatewaysFunc: method is nil but ec2Client.DescribeTransitGateways was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTransitGatewaysInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeTransitGateways.Lock()
	mock.calls.DescribeTransitGateways = append(mock.calls.DescribeTransitGateways, callInfo)
	lockec2ClientMockDescribeTransitGateways.Unlock()
	return mock.DescribeTransitGatewaysFunc(in1)
}

// DescribeTransitGatewaysCalls gets all the calls that were made to DescribeTransitGateways.
// Check the length with:
//     len(mockedec2Client.DescribeTransitGatewaysCalls())
func (mock *ec2ClientMock) DescribeTransitGatewaysCalls() []struct {
	In1 *ec2.DescribeTransitGatewaysInput
} {
	var calls []struct {
		In1 *ec2.DescribeTransitGatewaysInput
	}
	lockec2ClientMockDescribeTransitGateways.RLock()
	calls = mock.calls.DescribeTransitGateways
	lockec2ClientMockDescribeTransitGateways.RUnlock()
	return calls
}

// DescribeTransitGatewaysPages calls DescribeTransitGatewaysPagesFunc.
func (mock *ec2ClientMock) DescribeTransitGatewaysPages(in1 *ec2.DescribeTransitGatewaysInput, in2 func(*ec2.DescribeTransitGatewaysOutput, bool) bool) error {
	if mock.DescribeTransitGatewaysPagesFunc == nil {
		panic("ec2ClientMock.DescribeTransitGatewaysPagesFunc: method is nil but ec2Client.DescribeTransitGatewaysPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTransitGatewaysInput
		In2 func(*ec2.DescribeTransitGatewaysOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeTransitGatewaysPages.Lock()
	mock.calls.DescribeTransitGatewaysPages = append(mock.calls.DescribeTransitGatewaysPages, callInfo)
	lockec2ClientMockDescribeTransitGatewaysPages.Unlock()
	return mock.DescribeTransitGatewaysPagesFunc(in1, in2)
}

// DescribeTransitGatewaysPagesCalls gets all the calls that were made to DescribeTransitGatewaysPages.
// Check the length with:
//     len(mockedec2Client.DescribeTransitGatewaysPagesCalls())
func (mock *ec2ClientMock) DescribeTransitGatewaysPagesCalls() []struct {
	In1 *ec2.DescribeTransitGatewaysInput
	In2 func(*ec2.DescribeTransitGatewaysOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeTransitGatewaysInput
		In2 func(*ec2.DescribeTransitGatewaysOutput, bool) bool
	}
	lockec2ClientMockDescribeTransitGatewaysPages.RLock()
	calls = mock.calls.DescribeTransitGatewaysPages
	lockec2ClientMockDescribeTransitGatewaysPages.RUnlock()
	return calls
}

// DescribeTransitGatewaysPagesWithContext calls DescribeTransitGatewaysPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeTransitGatewaysPagesWithContext(in1 context.Context, in2 *ec2.DescribeTransitGatewaysInput, in3 func(*ec2.DescribeTransitGatewaysOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeTransitGatewaysPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeTransitGatewaysPagesWithContextFunc: method is nil but ec2Client.DescribeTransitGatewaysPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeTransitGatewaysInput
		In3 func(*ec2.DescribeTransitGatewaysOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeTransitGatewaysPagesWithContext.Lock()
	mock.calls.DescribeTransitGatewaysPagesWithContext = append(mock.calls.DescribeTransitGatewaysPagesWithContext, callInfo)
	lockec2ClientMockDescribeTransitGatewaysPagesWithContext.Unlock()
	return mock.DescribeTransitGatewaysPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeTransitGatewaysPagesWithContextCalls gets all the calls that were made to DescribeTransitGatewaysPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeTransitGatewaysPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeTransitGatewaysPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeTransitGatewaysInput
	In3 func(*ec2.DescribeTransitGatewaysOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeTransitGatewaysInput
		In3 func(*ec2.DescribeTransitGatewaysOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeTransitGatewaysPagesWithContext.RLock()
	calls = mock.calls.DescribeTransitGatewaysPagesWithContext
	lockec2ClientMockDescribeTransitGatewaysPagesWithContext.RUnlock()
	return calls
}

// DescribeTransitGatewaysRequest calls DescribeTransitGatewaysRequestFunc.
func (mock *ec2ClientMock) DescribeTransitGatewaysRequest(in1 *ec2.DescribeTransitGatewaysInput) (*request.Request, *ec2.DescribeTransitGatewaysOutput) {
	if mock.DescribeTransitGatewaysRequestFunc == nil {
		panic("ec2ClientMock.DescribeTransitGatewaysRequestFunc: method is nil but ec2Client.DescribeTransitGatewaysRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeTransitGatewaysInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeTransitGatewaysRequest.Lock()
	mock.calls.DescribeTransitGatewaysRequest = append(mock.calls.DescribeTransitGatewaysRequest, callInfo)
	lockec2ClientMockDescribeTransitGatewaysRequest.Unlock()
	return mock.DescribeTransitGatewaysRequestFunc(in1)
}

// DescribeTransitGatewaysRequestCalls gets all the calls that were made to DescribeTransitGatewaysRequest.
// Check the length with:
//     len(mockedec2Client.DescribeTransitGatewaysRequestCalls())
func (mock *ec2ClientMock) DescribeTransitGatewaysRequestCalls() []struct {
	In1 *ec2.DescribeTransitGatewaysInput
} {
	var calls []struct {
		In1 *ec2.DescribeTransitGatewaysInput
	}
	lockec2ClientMockDescribeTransitGatewaysRequest.RLock()
	calls = mock.calls.DescribeTransitGatewaysRequest
	lockec2ClientMockDescribeTransitGatewaysRequest.RUnlock()
	return calls
}

// DescribeTransitGatewaysWithContext calls DescribeTransitGatewaysWithContextFunc.
func (mock *ec2ClientMock) DescribeTransitGatewaysWithContext(in1 context.Context, in2 *ec2.DescribeTransitGatewaysInput, in3 ...request.Option) (*ec2.DescribeTransitGatewaysOutput, error) {
	if mock.DescribeTransitGatewaysWithContextFunc == nil {
		panic("ec2ClientMock.DescribeTransitGatewaysWithContextFunc: method is nil but ec2Client.DescribeTransitGatewaysWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeTransitGatewaysInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeTransitGatewaysWithContext.Lock()
	mock.calls.DescribeTransitGatewaysWithContext = append(mock.calls.DescribeTransitGatewaysWithContext, callInfo)
	lockec2ClientMockDescribeTransitGatewaysWithContext.Unlock()
	return mock.DescribeTransitGatewaysWithContextFunc(in1, in2, in3...)
}

// DescribeTransitGatewaysWithContextCalls gets all the calls that were made to DescribeTransitGatewaysWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeTransitGatewaysWithContextCalls())
func (mock *ec2ClientMock) DescribeTransitGatewaysWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeTransitGatewaysInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeTransitGatewaysInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeTransitGatewaysWithContext.RLock()
	calls = mock.calls.DescribeTransitGatewaysWithContext
	lockec2ClientMockDescribeTransitGatewaysWithContext.RUnlock()
	return calls
}

// DescribeVolumeAttribute calls DescribeVolumeAttributeFunc.
func (mock *ec2ClientMock) DescribeVolumeAttribute(in1 *ec2.DescribeVolumeAttributeInput) (*ec2.DescribeVolumeAttributeOutput, error) {
	if mock.DescribeVolumeAttributeFunc == nil {
		panic("ec2ClientMock.DescribeVolumeAttributeFunc: method is nil but ec2Client.DescribeVolumeAttribute was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVolumeAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVolumeAttribute.Lock()
	mock.calls.DescribeVolumeAttribute = append(mock.calls.DescribeVolumeAttribute, callInfo)
	lockec2ClientMockDescribeVolumeAttribute.Unlock()
	return mock.DescribeVolumeAttributeFunc(in1)
}

// DescribeVolumeAttributeCalls gets all the calls that were made to DescribeVolumeAttribute.
// Check the length with:
//     len(mockedec2Client.DescribeVolumeAttributeCalls())
func (mock *ec2ClientMock) DescribeVolumeAttributeCalls() []struct {
	In1 *ec2.DescribeVolumeAttributeInput
} {
	var calls []struct {
		In1 *ec2.DescribeVolumeAttributeInput
	}
	lockec2ClientMockDescribeVolumeAttribute.RLock()
	calls = mock.calls.DescribeVolumeAttribute
	lockec2ClientMockDescribeVolumeAttribute.RUnlock()
	return calls
}

// DescribeVolumeAttributeRequest calls DescribeVolumeAttributeRequestFunc.
func (mock *ec2ClientMock) DescribeVolumeAttributeRequest(in1 *ec2.DescribeVolumeAttributeInput) (*request.Request, *ec2.DescribeVolumeAttributeOutput) {
	if mock.DescribeVolumeAttributeRequestFunc == nil {
		panic("ec2ClientMock.DescribeVolumeAttributeRequestFunc: method is nil but ec2Client.DescribeVolumeAttributeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVolumeAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVolumeAttributeRequest.Lock()
	mock.calls.DescribeVolumeAttributeRequest = append(mock.calls.DescribeVolumeAttributeRequest, callInfo)
	lockec2ClientMockDescribeVolumeAttributeRequest.Unlock()
	return mock.DescribeVolumeAttributeRequestFunc(in1)
}

// DescribeVolumeAttributeRequestCalls gets all the calls that were made to DescribeVolumeAttributeRequest.
// Check the length with:
//     len(mockedec2Client.DescribeVolumeAttributeRequestCalls())
func (mock *ec2ClientMock) DescribeVolumeAttributeRequestCalls() []struct {
	In1 *ec2.DescribeVolumeAttributeInput
} {
	var calls []struct {
		In1 *ec2.DescribeVolumeAttributeInput
	}
	lockec2ClientMockDescribeVolumeAttributeRequest.RLock()
	calls = mock.calls.DescribeVolumeAttributeRequest
	lockec2ClientMockDescribeVolumeAttributeRequest.RUnlock()
	return calls
}

// DescribeVolumeAttributeWithContext calls DescribeVolumeAttributeWithContextFunc.
func (mock *ec2ClientMock) DescribeVolumeAttributeWithContext(in1 context.Context, in2 *ec2.DescribeVolumeAttributeInput, in3 ...request.Option) (*ec2.DescribeVolumeAttributeOutput, error) {
	if mock.DescribeVolumeAttributeWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVolumeAttributeWithContextFunc: method is nil but ec2Client.DescribeVolumeAttributeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVolumeAttributeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeVolumeAttributeWithContext.Lock()
	mock.calls.DescribeVolumeAttributeWithContext = append(mock.calls.DescribeVolumeAttributeWithContext, callInfo)
	lockec2ClientMockDescribeVolumeAttributeWithContext.Unlock()
	return mock.DescribeVolumeAttributeWithContextFunc(in1, in2, in3...)
}

// DescribeVolumeAttributeWithContextCalls gets all the calls that were made to DescribeVolumeAttributeWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVolumeAttributeWithContextCalls())
func (mock *ec2ClientMock) DescribeVolumeAttributeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVolumeAttributeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVolumeAttributeInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeVolumeAttributeWithContext.RLock()
	calls = mock.calls.DescribeVolumeAttributeWithContext
	lockec2ClientMockDescribeVolumeAttributeWithContext.RUnlock()
	return calls
}

// DescribeVolumeStatus calls DescribeVolumeStatusFunc.
func (mock *ec2ClientMock) DescribeVolumeStatus(in1 *ec2.DescribeVolumeStatusInput) (*ec2.DescribeVolumeStatusOutput, error) {
	if mock.DescribeVolumeStatusFunc == nil {
		panic("ec2ClientMock.DescribeVolumeStatusFunc: method is nil but ec2Client.DescribeVolumeStatus was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVolumeStatusInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVolumeStatus.Lock()
	mock.calls.DescribeVolumeStatus = append(mock.calls.DescribeVolumeStatus, callInfo)
	lockec2ClientMockDescribeVolumeStatus.Unlock()
	return mock.DescribeVolumeStatusFunc(in1)
}

// DescribeVolumeStatusCalls gets all the calls that were made to DescribeVolumeStatus.
// Check the length with:
//     len(mockedec2Client.DescribeVolumeStatusCalls())
func (mock *ec2ClientMock) DescribeVolumeStatusCalls() []struct {
	In1 *ec2.DescribeVolumeStatusInput
} {
	var calls []struct {
		In1 *ec2.DescribeVolumeStatusInput
	}
	lockec2ClientMockDescribeVolumeStatus.RLock()
	calls = mock.calls.DescribeVolumeStatus
	lockec2ClientMockDescribeVolumeStatus.RUnlock()
	return calls
}

// DescribeVolumeStatusPages calls DescribeVolumeStatusPagesFunc.
func (mock *ec2ClientMock) DescribeVolumeStatusPages(in1 *ec2.DescribeVolumeStatusInput, in2 func(*ec2.DescribeVolumeStatusOutput, bool) bool) error {
	if mock.DescribeVolumeStatusPagesFunc == nil {
		panic("ec2ClientMock.DescribeVolumeStatusPagesFunc: method is nil but ec2Client.DescribeVolumeStatusPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVolumeStatusInput
		In2 func(*ec2.DescribeVolumeStatusOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeVolumeStatusPages.Lock()
	mock.calls.DescribeVolumeStatusPages = append(mock.calls.DescribeVolumeStatusPages, callInfo)
	lockec2ClientMockDescribeVolumeStatusPages.Unlock()
	return mock.DescribeVolumeStatusPagesFunc(in1, in2)
}

// DescribeVolumeStatusPagesCalls gets all the calls that were made to DescribeVolumeStatusPages.
// Check the length with:
//     len(mockedec2Client.DescribeVolumeStatusPagesCalls())
func (mock *ec2ClientMock) DescribeVolumeStatusPagesCalls() []struct {
	In1 *ec2.DescribeVolumeStatusInput
	In2 func(*ec2.DescribeVolumeStatusOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeVolumeStatusInput
		In2 func(*ec2.DescribeVolumeStatusOutput, bool) bool
	}
	lockec2ClientMockDescribeVolumeStatusPages.RLock()
	calls = mock.calls.DescribeVolumeStatusPages
	lockec2ClientMockDescribeVolumeStatusPages.RUnlock()
	return calls
}

// DescribeVolumeStatusPagesWithContext calls DescribeVolumeStatusPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeVolumeStatusPagesWithContext(in1 context.Context, in2 *ec2.DescribeVolumeStatusInput, in3 func(*ec2.DescribeVolumeStatusOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeVolumeStatusPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVolumeStatusPagesWithContextFunc: method is nil but ec2Client.DescribeVolumeStatusPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVolumeStatusInput
		In3 func(*ec2.DescribeVolumeStatusOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeVolumeStatusPagesWithContext.Lock()
	mock.calls.DescribeVolumeStatusPagesWithContext = append(mock.calls.DescribeVolumeStatusPagesWithContext, callInfo)
	lockec2ClientMockDescribeVolumeStatusPagesWithContext.Unlock()
	return mock.DescribeVolumeStatusPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeVolumeStatusPagesWithContextCalls gets all the calls that were made to DescribeVolumeStatusPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVolumeStatusPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeVolumeStatusPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVolumeStatusInput
	In3 func(*ec2.DescribeVolumeStatusOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVolumeStatusInput
		In3 func(*ec2.DescribeVolumeStatusOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeVolumeStatusPagesWithContext.RLock()
	calls = mock.calls.DescribeVolumeStatusPagesWithContext
	lockec2ClientMockDescribeVolumeStatusPagesWithContext.RUnlock()
	return calls
}

// DescribeVolumeStatusRequest calls DescribeVolumeStatusRequestFunc.
func (mock *ec2ClientMock) DescribeVolumeStatusRequest(in1 *ec2.DescribeVolumeStatusInput) (*request.Request, *ec2.DescribeVolumeStatusOutput) {
	if mock.DescribeVolumeStatusRequestFunc == nil {
		panic("ec2ClientMock.DescribeVolumeStatusRequestFunc: method is nil but ec2Client.DescribeVolumeStatusRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVolumeStatusInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVolumeStatusRequest.Lock()
	mock.calls.DescribeVolumeStatusRequest = append(mock.calls.DescribeVolumeStatusRequest, callInfo)
	lockec2ClientMockDescribeVolumeStatusRequest.Unlock()
	return mock.DescribeVolumeStatusRequestFunc(in1)
}

// DescribeVolumeStatusRequestCalls gets all the calls that were made to DescribeVolumeStatusRequest.
// Check the length with:
//     len(mockedec2Client.DescribeVolumeStatusRequestCalls())
func (mock *ec2ClientMock) DescribeVolumeStatusRequestCalls() []struct {
	In1 *ec2.DescribeVolumeStatusInput
} {
	var calls []struct {
		In1 *ec2.DescribeVolumeStatusInput
	}
	lockec2ClientMockDescribeVolumeStatusRequest.RLock()
	calls = mock.calls.DescribeVolumeStatusRequest
	lockec2ClientMockDescribeVolumeStatusRequest.RUnlock()
	return calls
}

// DescribeVolumeStatusWithContext calls DescribeVolumeStatusWithContextFunc.
func (mock *ec2ClientMock) DescribeVolumeStatusWithContext(in1 context.Context, in2 *ec2.DescribeVolumeStatusInput, in3 ...request.Option) (*ec2.DescribeVolumeStatusOutput, error) {
	if mock.DescribeVolumeStatusWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVolumeStatusWithContextFunc: method is nil but ec2Client.DescribeVolumeStatusWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVolumeStatusInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeVolumeStatusWithContext.Lock()
	mock.calls.DescribeVolumeStatusWithContext = append(mock.calls.DescribeVolumeStatusWithContext, callInfo)
	lockec2ClientMockDescribeVolumeStatusWithContext.Unlock()
	return mock.DescribeVolumeStatusWithContextFunc(in1, in2, in3...)
}

// DescribeVolumeStatusWithContextCalls gets all the calls that were made to DescribeVolumeStatusWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVolumeStatusWithContextCalls())
func (mock *ec2ClientMock) DescribeVolumeStatusWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVolumeStatusInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVolumeStatusInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeVolumeStatusWithContext.RLock()
	calls = mock.calls.DescribeVolumeStatusWithContext
	lockec2ClientMockDescribeVolumeStatusWithContext.RUnlock()
	return calls
}

// DescribeVolumes calls DescribeVolumesFunc.
func (mock *ec2ClientMock) DescribeVolumes(in1 *ec2.DescribeVolumesInput) (*ec2.DescribeVolumesOutput, error) {
	if mock.DescribeVolumesFunc == nil {
		panic("ec2ClientMock.DescribeVolumesFunc: method is nil but ec2Client.DescribeVolumes was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVolumesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVolumes.Lock()
	mock.calls.DescribeVolumes = append(mock.calls.DescribeVolumes, callInfo)
	lockec2ClientMockDescribeVolumes.Unlock()
	return mock.DescribeVolumesFunc(in1)
}

// DescribeVolumesCalls gets all the calls that were made to DescribeVolumes.
// Check the length with:
//     len(mockedec2Client.DescribeVolumesCalls())
func (mock *ec2ClientMock) DescribeVolumesCalls() []struct {
	In1 *ec2.DescribeVolumesInput
} {
	var calls []struct {
		In1 *ec2.DescribeVolumesInput
	}
	lockec2ClientMockDescribeVolumes.RLock()
	calls = mock.calls.DescribeVolumes
	lockec2ClientMockDescribeVolumes.RUnlock()
	return calls
}

// DescribeVolumesModifications calls DescribeVolumesModificationsFunc.
func (mock *ec2ClientMock) DescribeVolumesModifications(in1 *ec2.DescribeVolumesModificationsInput) (*ec2.DescribeVolumesModificationsOutput, error) {
	if mock.DescribeVolumesModificationsFunc == nil {
		panic("ec2ClientMock.DescribeVolumesModificationsFunc: method is nil but ec2Client.DescribeVolumesModifications was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVolumesModificationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVolumesModifications.Lock()
	mock.calls.DescribeVolumesModifications = append(mock.calls.DescribeVolumesModifications, callInfo)
	lockec2ClientMockDescribeVolumesModifications.Unlock()
	return mock.DescribeVolumesModificationsFunc(in1)
}

// DescribeVolumesModificationsCalls gets all the calls that were made to DescribeVolumesModifications.
// Check the length with:
//     len(mockedec2Client.DescribeVolumesModificationsCalls())
func (mock *ec2ClientMock) DescribeVolumesModificationsCalls() []struct {
	In1 *ec2.DescribeVolumesModificationsInput
} {
	var calls []struct {
		In1 *ec2.DescribeVolumesModificationsInput
	}
	lockec2ClientMockDescribeVolumesModifications.RLock()
	calls = mock.calls.DescribeVolumesModifications
	lockec2ClientMockDescribeVolumesModifications.RUnlock()
	return calls
}

// DescribeVolumesModificationsPages calls DescribeVolumesModificationsPagesFunc.
func (mock *ec2ClientMock) DescribeVolumesModificationsPages(in1 *ec2.DescribeVolumesModificationsInput, in2 func(*ec2.DescribeVolumesModificationsOutput, bool) bool) error {
	if mock.DescribeVolumesModificationsPagesFunc == nil {
		panic("ec2ClientMock.DescribeVolumesModificationsPagesFunc: method is nil but ec2Client.DescribeVolumesModificationsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVolumesModificationsInput
		In2 func(*ec2.DescribeVolumesModificationsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeVolumesModificationsPages.Lock()
	mock.calls.DescribeVolumesModificationsPages = append(mock.calls.DescribeVolumesModificationsPages, callInfo)
	lockec2ClientMockDescribeVolumesModificationsPages.Unlock()
	return mock.DescribeVolumesModificationsPagesFunc(in1, in2)
}

// DescribeVolumesModificationsPagesCalls gets all the calls that were made to DescribeVolumesModificationsPages.
// Check the length with:
//     len(mockedec2Client.DescribeVolumesModificationsPagesCalls())
func (mock *ec2ClientMock) DescribeVolumesModificationsPagesCalls() []struct {
	In1 *ec2.DescribeVolumesModificationsInput
	In2 func(*ec2.DescribeVolumesModificationsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeVolumesModificationsInput
		In2 func(*ec2.DescribeVolumesModificationsOutput, bool) bool
	}
	lockec2ClientMockDescribeVolumesModificationsPages.RLock()
	calls = mock.calls.DescribeVolumesModificationsPages
	lockec2ClientMockDescribeVolumesModificationsPages.RUnlock()
	return calls
}

// DescribeVolumesModificationsPagesWithContext calls DescribeVolumesModificationsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeVolumesModificationsPagesWithContext(in1 context.Context, in2 *ec2.DescribeVolumesModificationsInput, in3 func(*ec2.DescribeVolumesModificationsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeVolumesModificationsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVolumesModificationsPagesWithContextFunc: method is nil but ec2Client.DescribeVolumesModificationsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVolumesModificationsInput
		In3 func(*ec2.DescribeVolumesModificationsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeVolumesModificationsPagesWithContext.Lock()
	mock.calls.DescribeVolumesModificationsPagesWithContext = append(mock.calls.DescribeVolumesModificationsPagesWithContext, callInfo)
	lockec2ClientMockDescribeVolumesModificationsPagesWithContext.Unlock()
	return mock.DescribeVolumesModificationsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeVolumesModificationsPagesWithContextCalls gets all the calls that were made to DescribeVolumesModificationsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVolumesModificationsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeVolumesModificationsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVolumesModificationsInput
	In3 func(*ec2.DescribeVolumesModificationsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVolumesModificationsInput
		In3 func(*ec2.DescribeVolumesModificationsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeVolumesModificationsPagesWithContext.RLock()
	calls = mock.calls.DescribeVolumesModificationsPagesWithContext
	lockec2ClientMockDescribeVolumesModificationsPagesWithContext.RUnlock()
	return calls
}

// DescribeVolumesModificationsRequest calls DescribeVolumesModificationsRequestFunc.
func (mock *ec2ClientMock) DescribeVolumesModificationsRequest(in1 *ec2.DescribeVolumesModificationsInput) (*request.Request, *ec2.DescribeVolumesModificationsOutput) {
	if mock.DescribeVolumesModificationsRequestFunc == nil {
		panic("ec2ClientMock.DescribeVolumesModificationsRequestFunc: method is nil but ec2Client.DescribeVolumesModificationsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVolumesModificationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVolumesModificationsRequest.Lock()
	mock.calls.DescribeVolumesModificationsRequest = append(mock.calls.DescribeVolumesModificationsRequest, callInfo)
	lockec2ClientMockDescribeVolumesModificationsRequest.Unlock()
	return mock.DescribeVolumesModificationsRequestFunc(in1)
}

// DescribeVolumesModificationsRequestCalls gets all the calls that were made to DescribeVolumesModificationsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeVolumesModificationsRequestCalls())
func (mock *ec2ClientMock) DescribeVolumesModificationsRequestCalls() []struct {
	In1 *ec2.DescribeVolumesModificationsInput
} {
	var calls []struct {
		In1 *ec2.DescribeVolumesModificationsInput
	}
	lockec2ClientMockDescribeVolumesModificationsRequest.RLock()
	calls = mock.calls.DescribeVolumesModificationsRequest
	lockec2ClientMockDescribeVolumesModificationsRequest.RUnlock()
	return calls
}

// DescribeVolumesModificationsWithContext calls DescribeVolumesModificationsWithContextFunc.
func (mock *ec2ClientMock) DescribeVolumesModificationsWithContext(in1 context.Context, in2 *ec2.DescribeVolumesModificationsInput, in3 ...request.Option) (*ec2.DescribeVolumesModificationsOutput, error) {
	if mock.DescribeVolumesModificationsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVolumesModificationsWithContextFunc: method is nil but ec2Client.DescribeVolumesModificationsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVolumesModificationsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeVolumesModificationsWithContext.Lock()
	mock.calls.DescribeVolumesModificationsWithContext = append(mock.calls.DescribeVolumesModificationsWithContext, callInfo)
	lockec2ClientMockDescribeVolumesModificationsWithContext.Unlock()
	return mock.DescribeVolumesModificationsWithContextFunc(in1, in2, in3...)
}

// DescribeVolumesModificationsWithContextCalls gets all the calls that were made to DescribeVolumesModificationsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVolumesModificationsWithContextCalls())
func (mock *ec2ClientMock) DescribeVolumesModificationsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVolumesModificationsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVolumesModificationsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeVolumesModificationsWithContext.RLock()
	calls = mock.calls.DescribeVolumesModificationsWithContext
	lockec2ClientMockDescribeVolumesModificationsWithContext.RUnlock()
	return calls
}

// DescribeVolumesPages calls DescribeVolumesPagesFunc.
func (mock *ec2ClientMock) DescribeVolumesPages(in1 *ec2.DescribeVolumesInput, in2 func(*ec2.DescribeVolumesOutput, bool) bool) error {
	if mock.DescribeVolumesPagesFunc == nil {
		panic("ec2ClientMock.DescribeVolumesPagesFunc: method is nil but ec2Client.DescribeVolumesPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVolumesInput
		In2 func(*ec2.DescribeVolumesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeVolumesPages.Lock()
	mock.calls.DescribeVolumesPages = append(mock.calls.DescribeVolumesPages, callInfo)
	lockec2ClientMockDescribeVolumesPages.Unlock()
	return mock.DescribeVolumesPagesFunc(in1, in2)
}

// DescribeVolumesPagesCalls gets all the calls that were made to DescribeVolumesPages.
// Check the length with:
//     len(mockedec2Client.DescribeVolumesPagesCalls())
func (mock *ec2ClientMock) DescribeVolumesPagesCalls() []struct {
	In1 *ec2.DescribeVolumesInput
	In2 func(*ec2.DescribeVolumesOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeVolumesInput
		In2 func(*ec2.DescribeVolumesOutput, bool) bool
	}
	lockec2ClientMockDescribeVolumesPages.RLock()
	calls = mock.calls.DescribeVolumesPages
	lockec2ClientMockDescribeVolumesPages.RUnlock()
	return calls
}

// DescribeVolumesPagesWithContext calls DescribeVolumesPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeVolumesPagesWithContext(in1 context.Context, in2 *ec2.DescribeVolumesInput, in3 func(*ec2.DescribeVolumesOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeVolumesPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVolumesPagesWithContextFunc: method is nil but ec2Client.DescribeVolumesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVolumesInput
		In3 func(*ec2.DescribeVolumesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeVolumesPagesWithContext.Lock()
	mock.calls.DescribeVolumesPagesWithContext = append(mock.calls.DescribeVolumesPagesWithContext, callInfo)
	lockec2ClientMockDescribeVolumesPagesWithContext.Unlock()
	return mock.DescribeVolumesPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeVolumesPagesWithContextCalls gets all the calls that were made to DescribeVolumesPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVolumesPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeVolumesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVolumesInput
	In3 func(*ec2.DescribeVolumesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVolumesInput
		In3 func(*ec2.DescribeVolumesOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeVolumesPagesWithContext.RLock()
	calls = mock.calls.DescribeVolumesPagesWithContext
	lockec2ClientMockDescribeVolumesPagesWithContext.RUnlock()
	return calls
}

// DescribeVolumesRequest calls DescribeVolumesRequestFunc.
func (mock *ec2ClientMock) DescribeVolumesRequest(in1 *ec2.DescribeVolumesInput) (*request.Request, *ec2.DescribeVolumesOutput) {
	if mock.DescribeVolumesRequestFunc == nil {
		panic("ec2ClientMock.DescribeVolumesRequestFunc: method is nil but ec2Client.DescribeVolumesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVolumesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVolumesRequest.Lock()
	mock.calls.DescribeVolumesRequest = append(mock.calls.DescribeVolumesRequest, callInfo)
	lockec2ClientMockDescribeVolumesRequest.Unlock()
	return mock.DescribeVolumesRequestFunc(in1)
}

// DescribeVolumesRequestCalls gets all the calls that were made to DescribeVolumesRequest.
// Check the length with:
//     len(mockedec2Client.DescribeVolumesRequestCalls())
func (mock *ec2ClientMock) DescribeVolumesRequestCalls() []struct {
	In1 *ec2.DescribeVolumesInput
} {
	var calls []struct {
		In1 *ec2.DescribeVolumesInput
	}
	lockec2ClientMockDescribeVolumesRequest.RLock()
	calls = mock.calls.DescribeVolumesRequest
	lockec2ClientMockDescribeVolumesRequest.RUnlock()
	return calls
}

// DescribeVolumesWithContext calls DescribeVolumesWithContextFunc.
func (mock *ec2ClientMock) DescribeVolumesWithContext(in1 context.Context, in2 *ec2.DescribeVolumesInput, in3 ...request.Option) (*ec2.DescribeVolumesOutput, error) {
	if mock.DescribeVolumesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVolumesWithContextFunc: method is nil but ec2Client.DescribeVolumesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVolumesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeVolumesWithContext.Lock()
	mock.calls.DescribeVolumesWithContext = append(mock.calls.DescribeVolumesWithContext, callInfo)
	lockec2ClientMockDescribeVolumesWithContext.Unlock()
	return mock.DescribeVolumesWithContextFunc(in1, in2, in3...)
}

// DescribeVolumesWithContextCalls gets all the calls that were made to DescribeVolumesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVolumesWithContextCalls())
func (mock *ec2ClientMock) DescribeVolumesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVolumesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVolumesInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeVolumesWithContext.RLock()
	calls = mock.calls.DescribeVolumesWithContext
	lockec2ClientMockDescribeVolumesWithContext.RUnlock()
	return calls
}

// DescribeVpcAttribute calls DescribeVpcAttributeFunc.
func (mock *ec2ClientMock) DescribeVpcAttribute(in1 *ec2.DescribeVpcAttributeInput) (*ec2.DescribeVpcAttributeOutput, error) {
	if mock.DescribeVpcAttributeFunc == nil {
		panic("ec2ClientMock.DescribeVpcAttributeFunc: method is nil but ec2Client.DescribeVpcAttribute was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVpcAttribute.Lock()
	mock.calls.DescribeVpcAttribute = append(mock.calls.DescribeVpcAttribute, callInfo)
	lockec2ClientMockDescribeVpcAttribute.Unlock()
	return mock.DescribeVpcAttributeFunc(in1)
}

// DescribeVpcAttributeCalls gets all the calls that were made to DescribeVpcAttribute.
// Check the length with:
//     len(mockedec2Client.DescribeVpcAttributeCalls())
func (mock *ec2ClientMock) DescribeVpcAttributeCalls() []struct {
	In1 *ec2.DescribeVpcAttributeInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpcAttributeInput
	}
	lockec2ClientMockDescribeVpcAttribute.RLock()
	calls = mock.calls.DescribeVpcAttribute
	lockec2ClientMockDescribeVpcAttribute.RUnlock()
	return calls
}

// DescribeVpcAttributeRequest calls DescribeVpcAttributeRequestFunc.
func (mock *ec2ClientMock) DescribeVpcAttributeRequest(in1 *ec2.DescribeVpcAttributeInput) (*request.Request, *ec2.DescribeVpcAttributeOutput) {
	if mock.DescribeVpcAttributeRequestFunc == nil {
		panic("ec2ClientMock.DescribeVpcAttributeRequestFunc: method is nil but ec2Client.DescribeVpcAttributeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVpcAttributeRequest.Lock()
	mock.calls.DescribeVpcAttributeRequest = append(mock.calls.DescribeVpcAttributeRequest, callInfo)
	lockec2ClientMockDescribeVpcAttributeRequest.Unlock()
	return mock.DescribeVpcAttributeRequestFunc(in1)
}

// DescribeVpcAttributeRequestCalls gets all the calls that were made to DescribeVpcAttributeRequest.
// Check the length with:
//     len(mockedec2Client.DescribeVpcAttributeRequestCalls())
func (mock *ec2ClientMock) DescribeVpcAttributeRequestCalls() []struct {
	In1 *ec2.DescribeVpcAttributeInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpcAttributeInput
	}
	lockec2ClientMockDescribeVpcAttributeRequest.RLock()
	calls = mock.calls.DescribeVpcAttributeRequest
	lockec2ClientMockDescribeVpcAttributeRequest.RUnlock()
	return calls
}

// DescribeVpcAttributeWithContext calls DescribeVpcAttributeWithContextFunc.
func (mock *ec2ClientMock) DescribeVpcAttributeWithContext(in1 context.Context, in2 *ec2.DescribeVpcAttributeInput, in3 ...request.Option) (*ec2.DescribeVpcAttributeOutput, error) {
	if mock.DescribeVpcAttributeWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVpcAttributeWithContextFunc: method is nil but ec2Client.DescribeVpcAttributeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpcAttributeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeVpcAttributeWithContext.Lock()
	mock.calls.DescribeVpcAttributeWithContext = append(mock.calls.DescribeVpcAttributeWithContext, callInfo)
	lockec2ClientMockDescribeVpcAttributeWithContext.Unlock()
	return mock.DescribeVpcAttributeWithContextFunc(in1, in2, in3...)
}

// DescribeVpcAttributeWithContextCalls gets all the calls that were made to DescribeVpcAttributeWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVpcAttributeWithContextCalls())
func (mock *ec2ClientMock) DescribeVpcAttributeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpcAttributeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpcAttributeInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeVpcAttributeWithContext.RLock()
	calls = mock.calls.DescribeVpcAttributeWithContext
	lockec2ClientMockDescribeVpcAttributeWithContext.RUnlock()
	return calls
}

// DescribeVpcClassicLink calls DescribeVpcClassicLinkFunc.
func (mock *ec2ClientMock) DescribeVpcClassicLink(in1 *ec2.DescribeVpcClassicLinkInput) (*ec2.DescribeVpcClassicLinkOutput, error) {
	if mock.DescribeVpcClassicLinkFunc == nil {
		panic("ec2ClientMock.DescribeVpcClassicLinkFunc: method is nil but ec2Client.DescribeVpcClassicLink was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcClassicLinkInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVpcClassicLink.Lock()
	mock.calls.DescribeVpcClassicLink = append(mock.calls.DescribeVpcClassicLink, callInfo)
	lockec2ClientMockDescribeVpcClassicLink.Unlock()
	return mock.DescribeVpcClassicLinkFunc(in1)
}

// DescribeVpcClassicLinkCalls gets all the calls that were made to DescribeVpcClassicLink.
// Check the length with:
//     len(mockedec2Client.DescribeVpcClassicLinkCalls())
func (mock *ec2ClientMock) DescribeVpcClassicLinkCalls() []struct {
	In1 *ec2.DescribeVpcClassicLinkInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpcClassicLinkInput
	}
	lockec2ClientMockDescribeVpcClassicLink.RLock()
	calls = mock.calls.DescribeVpcClassicLink
	lockec2ClientMockDescribeVpcClassicLink.RUnlock()
	return calls
}

// DescribeVpcClassicLinkDnsSupport calls DescribeVpcClassicLinkDnsSupportFunc.
func (mock *ec2ClientMock) DescribeVpcClassicLinkDnsSupport(in1 *ec2.DescribeVpcClassicLinkDnsSupportInput) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error) {
	if mock.DescribeVpcClassicLinkDnsSupportFunc == nil {
		panic("ec2ClientMock.DescribeVpcClassicLinkDnsSupportFunc: method is nil but ec2Client.DescribeVpcClassicLinkDnsSupport was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcClassicLinkDnsSupportInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVpcClassicLinkDnsSupport.Lock()
	mock.calls.DescribeVpcClassicLinkDnsSupport = append(mock.calls.DescribeVpcClassicLinkDnsSupport, callInfo)
	lockec2ClientMockDescribeVpcClassicLinkDnsSupport.Unlock()
	return mock.DescribeVpcClassicLinkDnsSupportFunc(in1)
}

// DescribeVpcClassicLinkDnsSupportCalls gets all the calls that were made to DescribeVpcClassicLinkDnsSupport.
// Check the length with:
//     len(mockedec2Client.DescribeVpcClassicLinkDnsSupportCalls())
func (mock *ec2ClientMock) DescribeVpcClassicLinkDnsSupportCalls() []struct {
	In1 *ec2.DescribeVpcClassicLinkDnsSupportInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpcClassicLinkDnsSupportInput
	}
	lockec2ClientMockDescribeVpcClassicLinkDnsSupport.RLock()
	calls = mock.calls.DescribeVpcClassicLinkDnsSupport
	lockec2ClientMockDescribeVpcClassicLinkDnsSupport.RUnlock()
	return calls
}

// DescribeVpcClassicLinkDnsSupportPages calls DescribeVpcClassicLinkDnsSupportPagesFunc.
func (mock *ec2ClientMock) DescribeVpcClassicLinkDnsSupportPages(in1 *ec2.DescribeVpcClassicLinkDnsSupportInput, in2 func(*ec2.DescribeVpcClassicLinkDnsSupportOutput, bool) bool) error {
	if mock.DescribeVpcClassicLinkDnsSupportPagesFunc == nil {
		panic("ec2ClientMock.DescribeVpcClassicLinkDnsSupportPagesFunc: method is nil but ec2Client.DescribeVpcClassicLinkDnsSupportPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcClassicLinkDnsSupportInput
		In2 func(*ec2.DescribeVpcClassicLinkDnsSupportOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeVpcClassicLinkDnsSupportPages.Lock()
	mock.calls.DescribeVpcClassicLinkDnsSupportPages = append(mock.calls.DescribeVpcClassicLinkDnsSupportPages, callInfo)
	lockec2ClientMockDescribeVpcClassicLinkDnsSupportPages.Unlock()
	return mock.DescribeVpcClassicLinkDnsSupportPagesFunc(in1, in2)
}

// DescribeVpcClassicLinkDnsSupportPagesCalls gets all the calls that were made to DescribeVpcClassicLinkDnsSupportPages.
// Check the length with:
//     len(mockedec2Client.DescribeVpcClassicLinkDnsSupportPagesCalls())
func (mock *ec2ClientMock) DescribeVpcClassicLinkDnsSupportPagesCalls() []struct {
	In1 *ec2.DescribeVpcClassicLinkDnsSupportInput
	In2 func(*ec2.DescribeVpcClassicLinkDnsSupportOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeVpcClassicLinkDnsSupportInput
		In2 func(*ec2.DescribeVpcClassicLinkDnsSupportOutput, bool) bool
	}
	lockec2ClientMockDescribeVpcClassicLinkDnsSupportPages.RLock()
	calls = mock.calls.DescribeVpcClassicLinkDnsSupportPages
	lockec2ClientMockDescribeVpcClassicLinkDnsSupportPages.RUnlock()
	return calls
}

// DescribeVpcClassicLinkDnsSupportPagesWithContext calls DescribeVpcClassicLinkDnsSupportPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeVpcClassicLinkDnsSupportPagesWithContext(in1 context.Context, in2 *ec2.DescribeVpcClassicLinkDnsSupportInput, in3 func(*ec2.DescribeVpcClassicLinkDnsSupportOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeVpcClassicLinkDnsSupportPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVpcClassicLinkDnsSupportPagesWithContextFunc: method is nil but ec2Client.DescribeVpcClassicLinkDnsSupportPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpcClassicLinkDnsSupportInput
		In3 func(*ec2.DescribeVpcClassicLinkDnsSupportOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeVpcClassicLinkDnsSupportPagesWithContext.Lock()
	mock.calls.DescribeVpcClassicLinkDnsSupportPagesWithContext = append(mock.calls.DescribeVpcClassicLinkDnsSupportPagesWithContext, callInfo)
	lockec2ClientMockDescribeVpcClassicLinkDnsSupportPagesWithContext.Unlock()
	return mock.DescribeVpcClassicLinkDnsSupportPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeVpcClassicLinkDnsSupportPagesWithContextCalls gets all the calls that were made to DescribeVpcClassicLinkDnsSupportPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVpcClassicLinkDnsSupportPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeVpcClassicLinkDnsSupportPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpcClassicLinkDnsSupportInput
	In3 func(*ec2.DescribeVpcClassicLinkDnsSupportOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpcClassicLinkDnsSupportInput
		In3 func(*ec2.DescribeVpcClassicLinkDnsSupportOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeVpcClassicLinkDnsSupportPagesWithContext.RLock()
	calls = mock.calls.DescribeVpcClassicLinkDnsSupportPagesWithContext
	lockec2ClientMockDescribeVpcClassicLinkDnsSupportPagesWithContext.RUnlock()
	return calls
}

// DescribeVpcClassicLinkDnsSupportRequest calls DescribeVpcClassicLinkDnsSupportRequestFunc.
func (mock *ec2ClientMock) DescribeVpcClassicLinkDnsSupportRequest(in1 *ec2.DescribeVpcClassicLinkDnsSupportInput) (*request.Request, *ec2.DescribeVpcClassicLinkDnsSupportOutput) {
	if mock.DescribeVpcClassicLinkDnsSupportRequestFunc == nil {
		panic("ec2ClientMock.DescribeVpcClassicLinkDnsSupportRequestFunc: method is nil but ec2Client.DescribeVpcClassicLinkDnsSupportRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcClassicLinkDnsSupportInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVpcClassicLinkDnsSupportRequest.Lock()
	mock.calls.DescribeVpcClassicLinkDnsSupportRequest = append(mock.calls.DescribeVpcClassicLinkDnsSupportRequest, callInfo)
	lockec2ClientMockDescribeVpcClassicLinkDnsSupportRequest.Unlock()
	return mock.DescribeVpcClassicLinkDnsSupportRequestFunc(in1)
}

// DescribeVpcClassicLinkDnsSupportRequestCalls gets all the calls that were made to DescribeVpcClassicLinkDnsSupportRequest.
// Check the length with:
//     len(mockedec2Client.DescribeVpcClassicLinkDnsSupportRequestCalls())
func (mock *ec2ClientMock) DescribeVpcClassicLinkDnsSupportRequestCalls() []struct {
	In1 *ec2.DescribeVpcClassicLinkDnsSupportInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpcClassicLinkDnsSupportInput
	}
	lockec2ClientMockDescribeVpcClassicLinkDnsSupportRequest.RLock()
	calls = mock.calls.DescribeVpcClassicLinkDnsSupportRequest
	lockec2ClientMockDescribeVpcClassicLinkDnsSupportRequest.RUnlock()
	return calls
}

// DescribeVpcClassicLinkDnsSupportWithContext calls DescribeVpcClassicLinkDnsSupportWithContextFunc.
func (mock *ec2ClientMock) DescribeVpcClassicLinkDnsSupportWithContext(in1 context.Context, in2 *ec2.DescribeVpcClassicLinkDnsSupportInput, in3 ...request.Option) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error) {
	if mock.DescribeVpcClassicLinkDnsSupportWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVpcClassicLinkDnsSupportWithContextFunc: method is nil but ec2Client.DescribeVpcClassicLinkDnsSupportWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpcClassicLinkDnsSupportInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeVpcClassicLinkDnsSupportWithContext.Lock()
	mock.calls.DescribeVpcClassicLinkDnsSupportWithContext = append(mock.calls.DescribeVpcClassicLinkDnsSupportWithContext, callInfo)
	lockec2ClientMockDescribeVpcClassicLinkDnsSupportWithContext.Unlock()
	return mock.DescribeVpcClassicLinkDnsSupportWithContextFunc(in1, in2, in3...)
}

// DescribeVpcClassicLinkDnsSupportWithContextCalls gets all the calls that were made to DescribeVpcClassicLinkDnsSupportWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVpcClassicLinkDnsSupportWithContextCalls())
func (mock *ec2ClientMock) DescribeVpcClassicLinkDnsSupportWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpcClassicLinkDnsSupportInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpcClassicLinkDnsSupportInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeVpcClassicLinkDnsSupportWithContext.RLock()
	calls = mock.calls.DescribeVpcClassicLinkDnsSupportWithContext
	lockec2ClientMockDescribeVpcClassicLinkDnsSupportWithContext.RUnlock()
	return calls
}

// DescribeVpcClassicLinkRequest calls DescribeVpcClassicLinkRequestFunc.
func (mock *ec2ClientMock) DescribeVpcClassicLinkRequest(in1 *ec2.DescribeVpcClassicLinkInput) (*request.Request, *ec2.DescribeVpcClassicLinkOutput) {
	if mock.DescribeVpcClassicLinkRequestFunc == nil {
		panic("ec2ClientMock.DescribeVpcClassicLinkRequestFunc: method is nil but ec2Client.DescribeVpcClassicLinkRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcClassicLinkInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVpcClassicLinkRequest.Lock()
	mock.calls.DescribeVpcClassicLinkRequest = append(mock.calls.DescribeVpcClassicLinkRequest, callInfo)
	lockec2ClientMockDescribeVpcClassicLinkRequest.Unlock()
	return mock.DescribeVpcClassicLinkRequestFunc(in1)
}

// DescribeVpcClassicLinkRequestCalls gets all the calls that were made to DescribeVpcClassicLinkRequest.
// Check the length with:
//     len(mockedec2Client.DescribeVpcClassicLinkRequestCalls())
func (mock *ec2ClientMock) DescribeVpcClassicLinkRequestCalls() []struct {
	In1 *ec2.DescribeVpcClassicLinkInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpcClassicLinkInput
	}
	lockec2ClientMockDescribeVpcClassicLinkRequest.RLock()
	calls = mock.calls.DescribeVpcClassicLinkRequest
	lockec2ClientMockDescribeVpcClassicLinkRequest.RUnlock()
	return calls
}

// DescribeVpcClassicLinkWithContext calls DescribeVpcClassicLinkWithContextFunc.
func (mock *ec2ClientMock) DescribeVpcClassicLinkWithContext(in1 context.Context, in2 *ec2.DescribeVpcClassicLinkInput, in3 ...request.Option) (*ec2.DescribeVpcClassicLinkOutput, error) {
	if mock.DescribeVpcClassicLinkWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVpcClassicLinkWithContextFunc: method is nil but ec2Client.DescribeVpcClassicLinkWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpcClassicLinkInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeVpcClassicLinkWithContext.Lock()
	mock.calls.DescribeVpcClassicLinkWithContext = append(mock.calls.DescribeVpcClassicLinkWithContext, callInfo)
	lockec2ClientMockDescribeVpcClassicLinkWithContext.Unlock()
	return mock.DescribeVpcClassicLinkWithContextFunc(in1, in2, in3...)
}

// DescribeVpcClassicLinkWithContextCalls gets all the calls that were made to DescribeVpcClassicLinkWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVpcClassicLinkWithContextCalls())
func (mock *ec2ClientMock) DescribeVpcClassicLinkWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpcClassicLinkInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpcClassicLinkInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeVpcClassicLinkWithContext.RLock()
	calls = mock.calls.DescribeVpcClassicLinkWithContext
	lockec2ClientMockDescribeVpcClassicLinkWithContext.RUnlock()
	return calls
}

// DescribeVpcEndpointConnectionNotifications calls DescribeVpcEndpointConnectionNotificationsFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointConnectionNotifications(in1 *ec2.DescribeVpcEndpointConnectionNotificationsInput) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error) {
	if mock.DescribeVpcEndpointConnectionNotificationsFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointConnectionNotificationsFunc: method is nil but ec2Client.DescribeVpcEndpointConnectionNotifications was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcEndpointConnectionNotificationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVpcEndpointConnectionNotifications.Lock()
	mock.calls.DescribeVpcEndpointConnectionNotifications = append(mock.calls.DescribeVpcEndpointConnectionNotifications, callInfo)
	lockec2ClientMockDescribeVpcEndpointConnectionNotifications.Unlock()
	return mock.DescribeVpcEndpointConnectionNotificationsFunc(in1)
}

// DescribeVpcEndpointConnectionNotificationsCalls gets all the calls that were made to DescribeVpcEndpointConnectionNotifications.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointConnectionNotificationsCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointConnectionNotificationsCalls() []struct {
	In1 *ec2.DescribeVpcEndpointConnectionNotificationsInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpcEndpointConnectionNotificationsInput
	}
	lockec2ClientMockDescribeVpcEndpointConnectionNotifications.RLock()
	calls = mock.calls.DescribeVpcEndpointConnectionNotifications
	lockec2ClientMockDescribeVpcEndpointConnectionNotifications.RUnlock()
	return calls
}

// DescribeVpcEndpointConnectionNotificationsPages calls DescribeVpcEndpointConnectionNotificationsPagesFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointConnectionNotificationsPages(in1 *ec2.DescribeVpcEndpointConnectionNotificationsInput, in2 func(*ec2.DescribeVpcEndpointConnectionNotificationsOutput, bool) bool) error {
	if mock.DescribeVpcEndpointConnectionNotificationsPagesFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointConnectionNotificationsPagesFunc: method is nil but ec2Client.DescribeVpcEndpointConnectionNotificationsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcEndpointConnectionNotificationsInput
		In2 func(*ec2.DescribeVpcEndpointConnectionNotificationsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeVpcEndpointConnectionNotificationsPages.Lock()
	mock.calls.DescribeVpcEndpointConnectionNotificationsPages = append(mock.calls.DescribeVpcEndpointConnectionNotificationsPages, callInfo)
	lockec2ClientMockDescribeVpcEndpointConnectionNotificationsPages.Unlock()
	return mock.DescribeVpcEndpointConnectionNotificationsPagesFunc(in1, in2)
}

// DescribeVpcEndpointConnectionNotificationsPagesCalls gets all the calls that were made to DescribeVpcEndpointConnectionNotificationsPages.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointConnectionNotificationsPagesCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointConnectionNotificationsPagesCalls() []struct {
	In1 *ec2.DescribeVpcEndpointConnectionNotificationsInput
	In2 func(*ec2.DescribeVpcEndpointConnectionNotificationsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeVpcEndpointConnectionNotificationsInput
		In2 func(*ec2.DescribeVpcEndpointConnectionNotificationsOutput, bool) bool
	}
	lockec2ClientMockDescribeVpcEndpointConnectionNotificationsPages.RLock()
	calls = mock.calls.DescribeVpcEndpointConnectionNotificationsPages
	lockec2ClientMockDescribeVpcEndpointConnectionNotificationsPages.RUnlock()
	return calls
}

// DescribeVpcEndpointConnectionNotificationsPagesWithContext calls DescribeVpcEndpointConnectionNotificationsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointConnectionNotificationsPagesWithContext(in1 context.Context, in2 *ec2.DescribeVpcEndpointConnectionNotificationsInput, in3 func(*ec2.DescribeVpcEndpointConnectionNotificationsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeVpcEndpointConnectionNotificationsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointConnectionNotificationsPagesWithContextFunc: method is nil but ec2Client.DescribeVpcEndpointConnectionNotificationsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpcEndpointConnectionNotificationsInput
		In3 func(*ec2.DescribeVpcEndpointConnectionNotificationsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeVpcEndpointConnectionNotificationsPagesWithContext.Lock()
	mock.calls.DescribeVpcEndpointConnectionNotificationsPagesWithContext = append(mock.calls.DescribeVpcEndpointConnectionNotificationsPagesWithContext, callInfo)
	lockec2ClientMockDescribeVpcEndpointConnectionNotificationsPagesWithContext.Unlock()
	return mock.DescribeVpcEndpointConnectionNotificationsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeVpcEndpointConnectionNotificationsPagesWithContextCalls gets all the calls that were made to DescribeVpcEndpointConnectionNotificationsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointConnectionNotificationsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointConnectionNotificationsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpcEndpointConnectionNotificationsInput
	In3 func(*ec2.DescribeVpcEndpointConnectionNotificationsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpcEndpointConnectionNotificationsInput
		In3 func(*ec2.DescribeVpcEndpointConnectionNotificationsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeVpcEndpointConnectionNotificationsPagesWithContext.RLock()
	calls = mock.calls.DescribeVpcEndpointConnectionNotificationsPagesWithContext
	lockec2ClientMockDescribeVpcEndpointConnectionNotificationsPagesWithContext.RUnlock()
	return calls
}

// DescribeVpcEndpointConnectionNotificationsRequest calls DescribeVpcEndpointConnectionNotificationsRequestFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointConnectionNotificationsRequest(in1 *ec2.DescribeVpcEndpointConnectionNotificationsInput) (*request.Request, *ec2.DescribeVpcEndpointConnectionNotificationsOutput) {
	if mock.DescribeVpcEndpointConnectionNotificationsRequestFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointConnectionNotificationsRequestFunc: method is nil but ec2Client.DescribeVpcEndpointConnectionNotificationsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcEndpointConnectionNotificationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVpcEndpointConnectionNotificationsRequest.Lock()
	mock.calls.DescribeVpcEndpointConnectionNotificationsRequest = append(mock.calls.DescribeVpcEndpointConnectionNotificationsRequest, callInfo)
	lockec2ClientMockDescribeVpcEndpointConnectionNotificationsRequest.Unlock()
	return mock.DescribeVpcEndpointConnectionNotificationsRequestFunc(in1)
}

// DescribeVpcEndpointConnectionNotificationsRequestCalls gets all the calls that were made to DescribeVpcEndpointConnectionNotificationsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointConnectionNotificationsRequestCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointConnectionNotificationsRequestCalls() []struct {
	In1 *ec2.DescribeVpcEndpointConnectionNotificationsInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpcEndpointConnectionNotificationsInput
	}
	lockec2ClientMockDescribeVpcEndpointConnectionNotificationsRequest.RLock()
	calls = mock.calls.DescribeVpcEndpointConnectionNotificationsRequest
	lockec2ClientMockDescribeVpcEndpointConnectionNotificationsRequest.RUnlock()
	return calls
}

// DescribeVpcEndpointConnectionNotificationsWithContext calls DescribeVpcEndpointConnectionNotificationsWithContextFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointConnectionNotificationsWithContext(in1 context.Context, in2 *ec2.DescribeVpcEndpointConnectionNotificationsInput, in3 ...request.Option) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error) {
	if mock.DescribeVpcEndpointConnectionNotificationsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointConnectionNotificationsWithContextFunc: method is nil but ec2Client.DescribeVpcEndpointConnectionNotificationsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpcEndpointConnectionNotificationsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeVpcEndpointConnectionNotificationsWithContext.Lock()
	mock.calls.DescribeVpcEndpointConnectionNotificationsWithContext = append(mock.calls.DescribeVpcEndpointConnectionNotificationsWithContext, callInfo)
	lockec2ClientMockDescribeVpcEndpointConnectionNotificationsWithContext.Unlock()
	return mock.DescribeVpcEndpointConnectionNotificationsWithContextFunc(in1, in2, in3...)
}

// DescribeVpcEndpointConnectionNotificationsWithContextCalls gets all the calls that were made to DescribeVpcEndpointConnectionNotificationsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointConnectionNotificationsWithContextCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointConnectionNotificationsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpcEndpointConnectionNotificationsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpcEndpointConnectionNotificationsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeVpcEndpointConnectionNotificationsWithContext.RLock()
	calls = mock.calls.DescribeVpcEndpointConnectionNotificationsWithContext
	lockec2ClientMockDescribeVpcEndpointConnectionNotificationsWithContext.RUnlock()
	return calls
}

// DescribeVpcEndpointConnections calls DescribeVpcEndpointConnectionsFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointConnections(in1 *ec2.DescribeVpcEndpointConnectionsInput) (*ec2.DescribeVpcEndpointConnectionsOutput, error) {
	if mock.DescribeVpcEndpointConnectionsFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointConnectionsFunc: method is nil but ec2Client.DescribeVpcEndpointConnections was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcEndpointConnectionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVpcEndpointConnections.Lock()
	mock.calls.DescribeVpcEndpointConnections = append(mock.calls.DescribeVpcEndpointConnections, callInfo)
	lockec2ClientMockDescribeVpcEndpointConnections.Unlock()
	return mock.DescribeVpcEndpointConnectionsFunc(in1)
}

// DescribeVpcEndpointConnectionsCalls gets all the calls that were made to DescribeVpcEndpointConnections.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointConnectionsCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointConnectionsCalls() []struct {
	In1 *ec2.DescribeVpcEndpointConnectionsInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpcEndpointConnectionsInput
	}
	lockec2ClientMockDescribeVpcEndpointConnections.RLock()
	calls = mock.calls.DescribeVpcEndpointConnections
	lockec2ClientMockDescribeVpcEndpointConnections.RUnlock()
	return calls
}

// DescribeVpcEndpointConnectionsPages calls DescribeVpcEndpointConnectionsPagesFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointConnectionsPages(in1 *ec2.DescribeVpcEndpointConnectionsInput, in2 func(*ec2.DescribeVpcEndpointConnectionsOutput, bool) bool) error {
	if mock.DescribeVpcEndpointConnectionsPagesFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointConnectionsPagesFunc: method is nil but ec2Client.DescribeVpcEndpointConnectionsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcEndpointConnectionsInput
		In2 func(*ec2.DescribeVpcEndpointConnectionsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeVpcEndpointConnectionsPages.Lock()
	mock.calls.DescribeVpcEndpointConnectionsPages = append(mock.calls.DescribeVpcEndpointConnectionsPages, callInfo)
	lockec2ClientMockDescribeVpcEndpointConnectionsPages.Unlock()
	return mock.DescribeVpcEndpointConnectionsPagesFunc(in1, in2)
}

// DescribeVpcEndpointConnectionsPagesCalls gets all the calls that were made to DescribeVpcEndpointConnectionsPages.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointConnectionsPagesCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointConnectionsPagesCalls() []struct {
	In1 *ec2.DescribeVpcEndpointConnectionsInput
	In2 func(*ec2.DescribeVpcEndpointConnectionsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeVpcEndpointConnectionsInput
		In2 func(*ec2.DescribeVpcEndpointConnectionsOutput, bool) bool
	}
	lockec2ClientMockDescribeVpcEndpointConnectionsPages.RLock()
	calls = mock.calls.DescribeVpcEndpointConnectionsPages
	lockec2ClientMockDescribeVpcEndpointConnectionsPages.RUnlock()
	return calls
}

// DescribeVpcEndpointConnectionsPagesWithContext calls DescribeVpcEndpointConnectionsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointConnectionsPagesWithContext(in1 context.Context, in2 *ec2.DescribeVpcEndpointConnectionsInput, in3 func(*ec2.DescribeVpcEndpointConnectionsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeVpcEndpointConnectionsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointConnectionsPagesWithContextFunc: method is nil but ec2Client.DescribeVpcEndpointConnectionsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpcEndpointConnectionsInput
		In3 func(*ec2.DescribeVpcEndpointConnectionsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeVpcEndpointConnectionsPagesWithContext.Lock()
	mock.calls.DescribeVpcEndpointConnectionsPagesWithContext = append(mock.calls.DescribeVpcEndpointConnectionsPagesWithContext, callInfo)
	lockec2ClientMockDescribeVpcEndpointConnectionsPagesWithContext.Unlock()
	return mock.DescribeVpcEndpointConnectionsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeVpcEndpointConnectionsPagesWithContextCalls gets all the calls that were made to DescribeVpcEndpointConnectionsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointConnectionsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointConnectionsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpcEndpointConnectionsInput
	In3 func(*ec2.DescribeVpcEndpointConnectionsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpcEndpointConnectionsInput
		In3 func(*ec2.DescribeVpcEndpointConnectionsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeVpcEndpointConnectionsPagesWithContext.RLock()
	calls = mock.calls.DescribeVpcEndpointConnectionsPagesWithContext
	lockec2ClientMockDescribeVpcEndpointConnectionsPagesWithContext.RUnlock()
	return calls
}

// DescribeVpcEndpointConnectionsRequest calls DescribeVpcEndpointConnectionsRequestFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointConnectionsRequest(in1 *ec2.DescribeVpcEndpointConnectionsInput) (*request.Request, *ec2.DescribeVpcEndpointConnectionsOutput) {
	if mock.DescribeVpcEndpointConnectionsRequestFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointConnectionsRequestFunc: method is nil but ec2Client.DescribeVpcEndpointConnectionsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcEndpointConnectionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVpcEndpointConnectionsRequest.Lock()
	mock.calls.DescribeVpcEndpointConnectionsRequest = append(mock.calls.DescribeVpcEndpointConnectionsRequest, callInfo)
	lockec2ClientMockDescribeVpcEndpointConnectionsRequest.Unlock()
	return mock.DescribeVpcEndpointConnectionsRequestFunc(in1)
}

// DescribeVpcEndpointConnectionsRequestCalls gets all the calls that were made to DescribeVpcEndpointConnectionsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointConnectionsRequestCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointConnectionsRequestCalls() []struct {
	In1 *ec2.DescribeVpcEndpointConnectionsInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpcEndpointConnectionsInput
	}
	lockec2ClientMockDescribeVpcEndpointConnectionsRequest.RLock()
	calls = mock.calls.DescribeVpcEndpointConnectionsRequest
	lockec2ClientMockDescribeVpcEndpointConnectionsRequest.RUnlock()
	return calls
}

// DescribeVpcEndpointConnectionsWithContext calls DescribeVpcEndpointConnectionsWithContextFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointConnectionsWithContext(in1 context.Context, in2 *ec2.DescribeVpcEndpointConnectionsInput, in3 ...request.Option) (*ec2.DescribeVpcEndpointConnectionsOutput, error) {
	if mock.DescribeVpcEndpointConnectionsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointConnectionsWithContextFunc: method is nil but ec2Client.DescribeVpcEndpointConnectionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpcEndpointConnectionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeVpcEndpointConnectionsWithContext.Lock()
	mock.calls.DescribeVpcEndpointConnectionsWithContext = append(mock.calls.DescribeVpcEndpointConnectionsWithContext, callInfo)
	lockec2ClientMockDescribeVpcEndpointConnectionsWithContext.Unlock()
	return mock.DescribeVpcEndpointConnectionsWithContextFunc(in1, in2, in3...)
}

// DescribeVpcEndpointConnectionsWithContextCalls gets all the calls that were made to DescribeVpcEndpointConnectionsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointConnectionsWithContextCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointConnectionsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpcEndpointConnectionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpcEndpointConnectionsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeVpcEndpointConnectionsWithContext.RLock()
	calls = mock.calls.DescribeVpcEndpointConnectionsWithContext
	lockec2ClientMockDescribeVpcEndpointConnectionsWithContext.RUnlock()
	return calls
}

// DescribeVpcEndpointServiceConfigurations calls DescribeVpcEndpointServiceConfigurationsFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointServiceConfigurations(in1 *ec2.DescribeVpcEndpointServiceConfigurationsInput) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error) {
	if mock.DescribeVpcEndpointServiceConfigurationsFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointServiceConfigurationsFunc: method is nil but ec2Client.DescribeVpcEndpointServiceConfigurations was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcEndpointServiceConfigurationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVpcEndpointServiceConfigurations.Lock()
	mock.calls.DescribeVpcEndpointServiceConfigurations = append(mock.calls.DescribeVpcEndpointServiceConfigurations, callInfo)
	lockec2ClientMockDescribeVpcEndpointServiceConfigurations.Unlock()
	return mock.DescribeVpcEndpointServiceConfigurationsFunc(in1)
}

// DescribeVpcEndpointServiceConfigurationsCalls gets all the calls that were made to DescribeVpcEndpointServiceConfigurations.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointServiceConfigurationsCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointServiceConfigurationsCalls() []struct {
	In1 *ec2.DescribeVpcEndpointServiceConfigurationsInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpcEndpointServiceConfigurationsInput
	}
	lockec2ClientMockDescribeVpcEndpointServiceConfigurations.RLock()
	calls = mock.calls.DescribeVpcEndpointServiceConfigurations
	lockec2ClientMockDescribeVpcEndpointServiceConfigurations.RUnlock()
	return calls
}

// DescribeVpcEndpointServiceConfigurationsPages calls DescribeVpcEndpointServiceConfigurationsPagesFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointServiceConfigurationsPages(in1 *ec2.DescribeVpcEndpointServiceConfigurationsInput, in2 func(*ec2.DescribeVpcEndpointServiceConfigurationsOutput, bool) bool) error {
	if mock.DescribeVpcEndpointServiceConfigurationsPagesFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointServiceConfigurationsPagesFunc: method is nil but ec2Client.DescribeVpcEndpointServiceConfigurationsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcEndpointServiceConfigurationsInput
		In2 func(*ec2.DescribeVpcEndpointServiceConfigurationsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeVpcEndpointServiceConfigurationsPages.Lock()
	mock.calls.DescribeVpcEndpointServiceConfigurationsPages = append(mock.calls.DescribeVpcEndpointServiceConfigurationsPages, callInfo)
	lockec2ClientMockDescribeVpcEndpointServiceConfigurationsPages.Unlock()
	return mock.DescribeVpcEndpointServiceConfigurationsPagesFunc(in1, in2)
}

// DescribeVpcEndpointServiceConfigurationsPagesCalls gets all the calls that were made to DescribeVpcEndpointServiceConfigurationsPages.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointServiceConfigurationsPagesCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointServiceConfigurationsPagesCalls() []struct {
	In1 *ec2.DescribeVpcEndpointServiceConfigurationsInput
	In2 func(*ec2.DescribeVpcEndpointServiceConfigurationsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeVpcEndpointServiceConfigurationsInput
		In2 func(*ec2.DescribeVpcEndpointServiceConfigurationsOutput, bool) bool
	}
	lockec2ClientMockDescribeVpcEndpointServiceConfigurationsPages.RLock()
	calls = mock.calls.DescribeVpcEndpointServiceConfigurationsPages
	lockec2ClientMockDescribeVpcEndpointServiceConfigurationsPages.RUnlock()
	return calls
}

// DescribeVpcEndpointServiceConfigurationsPagesWithContext calls DescribeVpcEndpointServiceConfigurationsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointServiceConfigurationsPagesWithContext(in1 context.Context, in2 *ec2.DescribeVpcEndpointServiceConfigurationsInput, in3 func(*ec2.DescribeVpcEndpointServiceConfigurationsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeVpcEndpointServiceConfigurationsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointServiceConfigurationsPagesWithContextFunc: method is nil but ec2Client.DescribeVpcEndpointServiceConfigurationsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpcEndpointServiceConfigurationsInput
		In3 func(*ec2.DescribeVpcEndpointServiceConfigurationsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeVpcEndpointServiceConfigurationsPagesWithContext.Lock()
	mock.calls.DescribeVpcEndpointServiceConfigurationsPagesWithContext = append(mock.calls.DescribeVpcEndpointServiceConfigurationsPagesWithContext, callInfo)
	lockec2ClientMockDescribeVpcEndpointServiceConfigurationsPagesWithContext.Unlock()
	return mock.DescribeVpcEndpointServiceConfigurationsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeVpcEndpointServiceConfigurationsPagesWithContextCalls gets all the calls that were made to DescribeVpcEndpointServiceConfigurationsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointServiceConfigurationsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointServiceConfigurationsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpcEndpointServiceConfigurationsInput
	In3 func(*ec2.DescribeVpcEndpointServiceConfigurationsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpcEndpointServiceConfigurationsInput
		In3 func(*ec2.DescribeVpcEndpointServiceConfigurationsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeVpcEndpointServiceConfigurationsPagesWithContext.RLock()
	calls = mock.calls.DescribeVpcEndpointServiceConfigurationsPagesWithContext
	lockec2ClientMockDescribeVpcEndpointServiceConfigurationsPagesWithContext.RUnlock()
	return calls
}

// DescribeVpcEndpointServiceConfigurationsRequest calls DescribeVpcEndpointServiceConfigurationsRequestFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointServiceConfigurationsRequest(in1 *ec2.DescribeVpcEndpointServiceConfigurationsInput) (*request.Request, *ec2.DescribeVpcEndpointServiceConfigurationsOutput) {
	if mock.DescribeVpcEndpointServiceConfigurationsRequestFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointServiceConfigurationsRequestFunc: method is nil but ec2Client.DescribeVpcEndpointServiceConfigurationsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcEndpointServiceConfigurationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVpcEndpointServiceConfigurationsRequest.Lock()
	mock.calls.DescribeVpcEndpointServiceConfigurationsRequest = append(mock.calls.DescribeVpcEndpointServiceConfigurationsRequest, callInfo)
	lockec2ClientMockDescribeVpcEndpointServiceConfigurationsRequest.Unlock()
	return mock.DescribeVpcEndpointServiceConfigurationsRequestFunc(in1)
}

// DescribeVpcEndpointServiceConfigurationsRequestCalls gets all the calls that were made to DescribeVpcEndpointServiceConfigurationsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointServiceConfigurationsRequestCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointServiceConfigurationsRequestCalls() []struct {
	In1 *ec2.DescribeVpcEndpointServiceConfigurationsInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpcEndpointServiceConfigurationsInput
	}
	lockec2ClientMockDescribeVpcEndpointServiceConfigurationsRequest.RLock()
	calls = mock.calls.DescribeVpcEndpointServiceConfigurationsRequest
	lockec2ClientMockDescribeVpcEndpointServiceConfigurationsRequest.RUnlock()
	return calls
}

// DescribeVpcEndpointServiceConfigurationsWithContext calls DescribeVpcEndpointServiceConfigurationsWithContextFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointServiceConfigurationsWithContext(in1 context.Context, in2 *ec2.DescribeVpcEndpointServiceConfigurationsInput, in3 ...request.Option) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error) {
	if mock.DescribeVpcEndpointServiceConfigurationsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointServiceConfigurationsWithContextFunc: method is nil but ec2Client.DescribeVpcEndpointServiceConfigurationsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpcEndpointServiceConfigurationsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeVpcEndpointServiceConfigurationsWithContext.Lock()
	mock.calls.DescribeVpcEndpointServiceConfigurationsWithContext = append(mock.calls.DescribeVpcEndpointServiceConfigurationsWithContext, callInfo)
	lockec2ClientMockDescribeVpcEndpointServiceConfigurationsWithContext.Unlock()
	return mock.DescribeVpcEndpointServiceConfigurationsWithContextFunc(in1, in2, in3...)
}

// DescribeVpcEndpointServiceConfigurationsWithContextCalls gets all the calls that were made to DescribeVpcEndpointServiceConfigurationsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointServiceConfigurationsWithContextCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointServiceConfigurationsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpcEndpointServiceConfigurationsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpcEndpointServiceConfigurationsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeVpcEndpointServiceConfigurationsWithContext.RLock()
	calls = mock.calls.DescribeVpcEndpointServiceConfigurationsWithContext
	lockec2ClientMockDescribeVpcEndpointServiceConfigurationsWithContext.RUnlock()
	return calls
}

// DescribeVpcEndpointServicePermissions calls DescribeVpcEndpointServicePermissionsFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointServicePermissions(in1 *ec2.DescribeVpcEndpointServicePermissionsInput) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error) {
	if mock.DescribeVpcEndpointServicePermissionsFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointServicePermissionsFunc: method is nil but ec2Client.DescribeVpcEndpointServicePermissions was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcEndpointServicePermissionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVpcEndpointServicePermissions.Lock()
	mock.calls.DescribeVpcEndpointServicePermissions = append(mock.calls.DescribeVpcEndpointServicePermissions, callInfo)
	lockec2ClientMockDescribeVpcEndpointServicePermissions.Unlock()
	return mock.DescribeVpcEndpointServicePermissionsFunc(in1)
}

// DescribeVpcEndpointServicePermissionsCalls gets all the calls that were made to DescribeVpcEndpointServicePermissions.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointServicePermissionsCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointServicePermissionsCalls() []struct {
	In1 *ec2.DescribeVpcEndpointServicePermissionsInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpcEndpointServicePermissionsInput
	}
	lockec2ClientMockDescribeVpcEndpointServicePermissions.RLock()
	calls = mock.calls.DescribeVpcEndpointServicePermissions
	lockec2ClientMockDescribeVpcEndpointServicePermissions.RUnlock()
	return calls
}

// DescribeVpcEndpointServicePermissionsPages calls DescribeVpcEndpointServicePermissionsPagesFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointServicePermissionsPages(in1 *ec2.DescribeVpcEndpointServicePermissionsInput, in2 func(*ec2.DescribeVpcEndpointServicePermissionsOutput, bool) bool) error {
	if mock.DescribeVpcEndpointServicePermissionsPagesFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointServicePermissionsPagesFunc: method is nil but ec2Client.DescribeVpcEndpointServicePermissionsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcEndpointServicePermissionsInput
		In2 func(*ec2.DescribeVpcEndpointServicePermissionsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeVpcEndpointServicePermissionsPages.Lock()
	mock.calls.DescribeVpcEndpointServicePermissionsPages = append(mock.calls.DescribeVpcEndpointServicePermissionsPages, callInfo)
	lockec2ClientMockDescribeVpcEndpointServicePermissionsPages.Unlock()
	return mock.DescribeVpcEndpointServicePermissionsPagesFunc(in1, in2)
}

// DescribeVpcEndpointServicePermissionsPagesCalls gets all the calls that were made to DescribeVpcEndpointServicePermissionsPages.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointServicePermissionsPagesCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointServicePermissionsPagesCalls() []struct {
	In1 *ec2.DescribeVpcEndpointServicePermissionsInput
	In2 func(*ec2.DescribeVpcEndpointServicePermissionsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeVpcEndpointServicePermissionsInput
		In2 func(*ec2.DescribeVpcEndpointServicePermissionsOutput, bool) bool
	}
	lockec2ClientMockDescribeVpcEndpointServicePermissionsPages.RLock()
	calls = mock.calls.DescribeVpcEndpointServicePermissionsPages
	lockec2ClientMockDescribeVpcEndpointServicePermissionsPages.RUnlock()
	return calls
}

// DescribeVpcEndpointServicePermissionsPagesWithContext calls DescribeVpcEndpointServicePermissionsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointServicePermissionsPagesWithContext(in1 context.Context, in2 *ec2.DescribeVpcEndpointServicePermissionsInput, in3 func(*ec2.DescribeVpcEndpointServicePermissionsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeVpcEndpointServicePermissionsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointServicePermissionsPagesWithContextFunc: method is nil but ec2Client.DescribeVpcEndpointServicePermissionsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpcEndpointServicePermissionsInput
		In3 func(*ec2.DescribeVpcEndpointServicePermissionsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeVpcEndpointServicePermissionsPagesWithContext.Lock()
	mock.calls.DescribeVpcEndpointServicePermissionsPagesWithContext = append(mock.calls.DescribeVpcEndpointServicePermissionsPagesWithContext, callInfo)
	lockec2ClientMockDescribeVpcEndpointServicePermissionsPagesWithContext.Unlock()
	return mock.DescribeVpcEndpointServicePermissionsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeVpcEndpointServicePermissionsPagesWithContextCalls gets all the calls that were made to DescribeVpcEndpointServicePermissionsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointServicePermissionsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointServicePermissionsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpcEndpointServicePermissionsInput
	In3 func(*ec2.DescribeVpcEndpointServicePermissionsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpcEndpointServicePermissionsInput
		In3 func(*ec2.DescribeVpcEndpointServicePermissionsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeVpcEndpointServicePermissionsPagesWithContext.RLock()
	calls = mock.calls.DescribeVpcEndpointServicePermissionsPagesWithContext
	lockec2ClientMockDescribeVpcEndpointServicePermissionsPagesWithContext.RUnlock()
	return calls
}

// DescribeVpcEndpointServicePermissionsRequest calls DescribeVpcEndpointServicePermissionsRequestFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointServicePermissionsRequest(in1 *ec2.DescribeVpcEndpointServicePermissionsInput) (*request.Request, *ec2.DescribeVpcEndpointServicePermissionsOutput) {
	if mock.DescribeVpcEndpointServicePermissionsRequestFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointServicePermissionsRequestFunc: method is nil but ec2Client.DescribeVpcEndpointServicePermissionsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcEndpointServicePermissionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVpcEndpointServicePermissionsRequest.Lock()
	mock.calls.DescribeVpcEndpointServicePermissionsRequest = append(mock.calls.DescribeVpcEndpointServicePermissionsRequest, callInfo)
	lockec2ClientMockDescribeVpcEndpointServicePermissionsRequest.Unlock()
	return mock.DescribeVpcEndpointServicePermissionsRequestFunc(in1)
}

// DescribeVpcEndpointServicePermissionsRequestCalls gets all the calls that were made to DescribeVpcEndpointServicePermissionsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointServicePermissionsRequestCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointServicePermissionsRequestCalls() []struct {
	In1 *ec2.DescribeVpcEndpointServicePermissionsInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpcEndpointServicePermissionsInput
	}
	lockec2ClientMockDescribeVpcEndpointServicePermissionsRequest.RLock()
	calls = mock.calls.DescribeVpcEndpointServicePermissionsRequest
	lockec2ClientMockDescribeVpcEndpointServicePermissionsRequest.RUnlock()
	return calls
}

// DescribeVpcEndpointServicePermissionsWithContext calls DescribeVpcEndpointServicePermissionsWithContextFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointServicePermissionsWithContext(in1 context.Context, in2 *ec2.DescribeVpcEndpointServicePermissionsInput, in3 ...request.Option) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error) {
	if mock.DescribeVpcEndpointServicePermissionsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointServicePermissionsWithContextFunc: method is nil but ec2Client.DescribeVpcEndpointServicePermissionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpcEndpointServicePermissionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeVpcEndpointServicePermissionsWithContext.Lock()
	mock.calls.DescribeVpcEndpointServicePermissionsWithContext = append(mock.calls.DescribeVpcEndpointServicePermissionsWithContext, callInfo)
	lockec2ClientMockDescribeVpcEndpointServicePermissionsWithContext.Unlock()
	return mock.DescribeVpcEndpointServicePermissionsWithContextFunc(in1, in2, in3...)
}

// DescribeVpcEndpointServicePermissionsWithContextCalls gets all the calls that were made to DescribeVpcEndpointServicePermissionsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointServicePermissionsWithContextCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointServicePermissionsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpcEndpointServicePermissionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpcEndpointServicePermissionsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeVpcEndpointServicePermissionsWithContext.RLock()
	calls = mock.calls.DescribeVpcEndpointServicePermissionsWithContext
	lockec2ClientMockDescribeVpcEndpointServicePermissionsWithContext.RUnlock()
	return calls
}

// DescribeVpcEndpointServices calls DescribeVpcEndpointServicesFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointServices(in1 *ec2.DescribeVpcEndpointServicesInput) (*ec2.DescribeVpcEndpointServicesOutput, error) {
	if mock.DescribeVpcEndpointServicesFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointServicesFunc: method is nil but ec2Client.DescribeVpcEndpointServices was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcEndpointServicesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVpcEndpointServices.Lock()
	mock.calls.DescribeVpcEndpointServices = append(mock.calls.DescribeVpcEndpointServices, callInfo)
	lockec2ClientMockDescribeVpcEndpointServices.Unlock()
	return mock.DescribeVpcEndpointServicesFunc(in1)
}

// DescribeVpcEndpointServicesCalls gets all the calls that were made to DescribeVpcEndpointServices.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointServicesCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointServicesCalls() []struct {
	In1 *ec2.DescribeVpcEndpointServicesInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpcEndpointServicesInput
	}
	lockec2ClientMockDescribeVpcEndpointServices.RLock()
	calls = mock.calls.DescribeVpcEndpointServices
	lockec2ClientMockDescribeVpcEndpointServices.RUnlock()
	return calls
}

// DescribeVpcEndpointServicesRequest calls DescribeVpcEndpointServicesRequestFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointServicesRequest(in1 *ec2.DescribeVpcEndpointServicesInput) (*request.Request, *ec2.DescribeVpcEndpointServicesOutput) {
	if mock.DescribeVpcEndpointServicesRequestFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointServicesRequestFunc: method is nil but ec2Client.DescribeVpcEndpointServicesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcEndpointServicesInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVpcEndpointServicesRequest.Lock()
	mock.calls.DescribeVpcEndpointServicesRequest = append(mock.calls.DescribeVpcEndpointServicesRequest, callInfo)
	lockec2ClientMockDescribeVpcEndpointServicesRequest.Unlock()
	return mock.DescribeVpcEndpointServicesRequestFunc(in1)
}

// DescribeVpcEndpointServicesRequestCalls gets all the calls that were made to DescribeVpcEndpointServicesRequest.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointServicesRequestCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointServicesRequestCalls() []struct {
	In1 *ec2.DescribeVpcEndpointServicesInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpcEndpointServicesInput
	}
	lockec2ClientMockDescribeVpcEndpointServicesRequest.RLock()
	calls = mock.calls.DescribeVpcEndpointServicesRequest
	lockec2ClientMockDescribeVpcEndpointServicesRequest.RUnlock()
	return calls
}

// DescribeVpcEndpointServicesWithContext calls DescribeVpcEndpointServicesWithContextFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointServicesWithContext(in1 context.Context, in2 *ec2.DescribeVpcEndpointServicesInput, in3 ...request.Option) (*ec2.DescribeVpcEndpointServicesOutput, error) {
	if mock.DescribeVpcEndpointServicesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointServicesWithContextFunc: method is nil but ec2Client.DescribeVpcEndpointServicesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpcEndpointServicesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeVpcEndpointServicesWithContext.Lock()
	mock.calls.DescribeVpcEndpointServicesWithContext = append(mock.calls.DescribeVpcEndpointServicesWithContext, callInfo)
	lockec2ClientMockDescribeVpcEndpointServicesWithContext.Unlock()
	return mock.DescribeVpcEndpointServicesWithContextFunc(in1, in2, in3...)
}

// DescribeVpcEndpointServicesWithContextCalls gets all the calls that were made to DescribeVpcEndpointServicesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointServicesWithContextCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointServicesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpcEndpointServicesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpcEndpointServicesInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeVpcEndpointServicesWithContext.RLock()
	calls = mock.calls.DescribeVpcEndpointServicesWithContext
	lockec2ClientMockDescribeVpcEndpointServicesWithContext.RUnlock()
	return calls
}

// DescribeVpcEndpoints calls DescribeVpcEndpointsFunc.
func (mock *ec2ClientMock) DescribeVpcEndpoints(in1 *ec2.DescribeVpcEndpointsInput) (*ec2.DescribeVpcEndpointsOutput, error) {
	if mock.DescribeVpcEndpointsFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointsFunc: method is nil but ec2Client.DescribeVpcEndpoints was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcEndpointsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVpcEndpoints.Lock()
	mock.calls.DescribeVpcEndpoints = append(mock.calls.DescribeVpcEndpoints, callInfo)
	lockec2ClientMockDescribeVpcEndpoints.Unlock()
	return mock.DescribeVpcEndpointsFunc(in1)
}

// DescribeVpcEndpointsCalls gets all the calls that were made to DescribeVpcEndpoints.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointsCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointsCalls() []struct {
	In1 *ec2.DescribeVpcEndpointsInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpcEndpointsInput
	}
	lockec2ClientMockDescribeVpcEndpoints.RLock()
	calls = mock.calls.DescribeVpcEndpoints
	lockec2ClientMockDescribeVpcEndpoints.RUnlock()
	return calls
}

// DescribeVpcEndpointsPages calls DescribeVpcEndpointsPagesFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointsPages(in1 *ec2.DescribeVpcEndpointsInput, in2 func(*ec2.DescribeVpcEndpointsOutput, bool) bool) error {
	if mock.DescribeVpcEndpointsPagesFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointsPagesFunc: method is nil but ec2Client.DescribeVpcEndpointsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcEndpointsInput
		In2 func(*ec2.DescribeVpcEndpointsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeVpcEndpointsPages.Lock()
	mock.calls.DescribeVpcEndpointsPages = append(mock.calls.DescribeVpcEndpointsPages, callInfo)
	lockec2ClientMockDescribeVpcEndpointsPages.Unlock()
	return mock.DescribeVpcEndpointsPagesFunc(in1, in2)
}

// DescribeVpcEndpointsPagesCalls gets all the calls that were made to DescribeVpcEndpointsPages.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointsPagesCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointsPagesCalls() []struct {
	In1 *ec2.DescribeVpcEndpointsInput
	In2 func(*ec2.DescribeVpcEndpointsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeVpcEndpointsInput
		In2 func(*ec2.DescribeVpcEndpointsOutput, bool) bool
	}
	lockec2ClientMockDescribeVpcEndpointsPages.RLock()
	calls = mock.calls.DescribeVpcEndpointsPages
	lockec2ClientMockDescribeVpcEndpointsPages.RUnlock()
	return calls
}

// DescribeVpcEndpointsPagesWithContext calls DescribeVpcEndpointsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointsPagesWithContext(in1 context.Context, in2 *ec2.DescribeVpcEndpointsInput, in3 func(*ec2.DescribeVpcEndpointsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeVpcEndpointsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointsPagesWithContextFunc: method is nil but ec2Client.DescribeVpcEndpointsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpcEndpointsInput
		In3 func(*ec2.DescribeVpcEndpointsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeVpcEndpointsPagesWithContext.Lock()
	mock.calls.DescribeVpcEndpointsPagesWithContext = append(mock.calls.DescribeVpcEndpointsPagesWithContext, callInfo)
	lockec2ClientMockDescribeVpcEndpointsPagesWithContext.Unlock()
	return mock.DescribeVpcEndpointsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeVpcEndpointsPagesWithContextCalls gets all the calls that were made to DescribeVpcEndpointsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpcEndpointsInput
	In3 func(*ec2.DescribeVpcEndpointsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpcEndpointsInput
		In3 func(*ec2.DescribeVpcEndpointsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeVpcEndpointsPagesWithContext.RLock()
	calls = mock.calls.DescribeVpcEndpointsPagesWithContext
	lockec2ClientMockDescribeVpcEndpointsPagesWithContext.RUnlock()
	return calls
}

// DescribeVpcEndpointsRequest calls DescribeVpcEndpointsRequestFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointsRequest(in1 *ec2.DescribeVpcEndpointsInput) (*request.Request, *ec2.DescribeVpcEndpointsOutput) {
	if mock.DescribeVpcEndpointsRequestFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointsRequestFunc: method is nil but ec2Client.DescribeVpcEndpointsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcEndpointsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVpcEndpointsRequest.Lock()
	mock.calls.DescribeVpcEndpointsRequest = append(mock.calls.DescribeVpcEndpointsRequest, callInfo)
	lockec2ClientMockDescribeVpcEndpointsRequest.Unlock()
	return mock.DescribeVpcEndpointsRequestFunc(in1)
}

// DescribeVpcEndpointsRequestCalls gets all the calls that were made to DescribeVpcEndpointsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointsRequestCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointsRequestCalls() []struct {
	In1 *ec2.DescribeVpcEndpointsInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpcEndpointsInput
	}
	lockec2ClientMockDescribeVpcEndpointsRequest.RLock()
	calls = mock.calls.DescribeVpcEndpointsRequest
	lockec2ClientMockDescribeVpcEndpointsRequest.RUnlock()
	return calls
}

// DescribeVpcEndpointsWithContext calls DescribeVpcEndpointsWithContextFunc.
func (mock *ec2ClientMock) DescribeVpcEndpointsWithContext(in1 context.Context, in2 *ec2.DescribeVpcEndpointsInput, in3 ...request.Option) (*ec2.DescribeVpcEndpointsOutput, error) {
	if mock.DescribeVpcEndpointsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVpcEndpointsWithContextFunc: method is nil but ec2Client.DescribeVpcEndpointsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpcEndpointsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeVpcEndpointsWithContext.Lock()
	mock.calls.DescribeVpcEndpointsWithContext = append(mock.calls.DescribeVpcEndpointsWithContext, callInfo)
	lockec2ClientMockDescribeVpcEndpointsWithContext.Unlock()
	return mock.DescribeVpcEndpointsWithContextFunc(in1, in2, in3...)
}

// DescribeVpcEndpointsWithContextCalls gets all the calls that were made to DescribeVpcEndpointsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVpcEndpointsWithContextCalls())
func (mock *ec2ClientMock) DescribeVpcEndpointsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpcEndpointsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpcEndpointsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeVpcEndpointsWithContext.RLock()
	calls = mock.calls.DescribeVpcEndpointsWithContext
	lockec2ClientMockDescribeVpcEndpointsWithContext.RUnlock()
	return calls
}

// DescribeVpcPeeringConnections calls DescribeVpcPeeringConnectionsFunc.
func (mock *ec2ClientMock) DescribeVpcPeeringConnections(in1 *ec2.DescribeVpcPeeringConnectionsInput) (*ec2.DescribeVpcPeeringConnectionsOutput, error) {
	if mock.DescribeVpcPeeringConnectionsFunc == nil {
		panic("ec2ClientMock.DescribeVpcPeeringConnectionsFunc: method is nil but ec2Client.DescribeVpcPeeringConnections was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcPeeringConnectionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVpcPeeringConnections.Lock()
	mock.calls.DescribeVpcPeeringConnections = append(mock.calls.DescribeVpcPeeringConnections, callInfo)
	lockec2ClientMockDescribeVpcPeeringConnections.Unlock()
	return mock.DescribeVpcPeeringConnectionsFunc(in1)
}

// DescribeVpcPeeringConnectionsCalls gets all the calls that were made to DescribeVpcPeeringConnections.
// Check the length with:
//     len(mockedec2Client.DescribeVpcPeeringConnectionsCalls())
func (mock *ec2ClientMock) DescribeVpcPeeringConnectionsCalls() []struct {
	In1 *ec2.DescribeVpcPeeringConnectionsInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpcPeeringConnectionsInput
	}
	lockec2ClientMockDescribeVpcPeeringConnections.RLock()
	calls = mock.calls.DescribeVpcPeeringConnections
	lockec2ClientMockDescribeVpcPeeringConnections.RUnlock()
	return calls
}

// DescribeVpcPeeringConnectionsPages calls DescribeVpcPeeringConnectionsPagesFunc.
func (mock *ec2ClientMock) DescribeVpcPeeringConnectionsPages(in1 *ec2.DescribeVpcPeeringConnectionsInput, in2 func(*ec2.DescribeVpcPeeringConnectionsOutput, bool) bool) error {
	if mock.DescribeVpcPeeringConnectionsPagesFunc == nil {
		panic("ec2ClientMock.DescribeVpcPeeringConnectionsPagesFunc: method is nil but ec2Client.DescribeVpcPeeringConnectionsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcPeeringConnectionsInput
		In2 func(*ec2.DescribeVpcPeeringConnectionsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeVpcPeeringConnectionsPages.Lock()
	mock.calls.DescribeVpcPeeringConnectionsPages = append(mock.calls.DescribeVpcPeeringConnectionsPages, callInfo)
	lockec2ClientMockDescribeVpcPeeringConnectionsPages.Unlock()
	return mock.DescribeVpcPeeringConnectionsPagesFunc(in1, in2)
}

// DescribeVpcPeeringConnectionsPagesCalls gets all the calls that were made to DescribeVpcPeeringConnectionsPages.
// Check the length with:
//     len(mockedec2Client.DescribeVpcPeeringConnectionsPagesCalls())
func (mock *ec2ClientMock) DescribeVpcPeeringConnectionsPagesCalls() []struct {
	In1 *ec2.DescribeVpcPeeringConnectionsInput
	In2 func(*ec2.DescribeVpcPeeringConnectionsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeVpcPeeringConnectionsInput
		In2 func(*ec2.DescribeVpcPeeringConnectionsOutput, bool) bool
	}
	lockec2ClientMockDescribeVpcPeeringConnectionsPages.RLock()
	calls = mock.calls.DescribeVpcPeeringConnectionsPages
	lockec2ClientMockDescribeVpcPeeringConnectionsPages.RUnlock()
	return calls
}

// DescribeVpcPeeringConnectionsPagesWithContext calls DescribeVpcPeeringConnectionsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeVpcPeeringConnectionsPagesWithContext(in1 context.Context, in2 *ec2.DescribeVpcPeeringConnectionsInput, in3 func(*ec2.DescribeVpcPeeringConnectionsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeVpcPeeringConnectionsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVpcPeeringConnectionsPagesWithContextFunc: method is nil but ec2Client.DescribeVpcPeeringConnectionsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpcPeeringConnectionsInput
		In3 func(*ec2.DescribeVpcPeeringConnectionsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeVpcPeeringConnectionsPagesWithContext.Lock()
	mock.calls.DescribeVpcPeeringConnectionsPagesWithContext = append(mock.calls.DescribeVpcPeeringConnectionsPagesWithContext, callInfo)
	lockec2ClientMockDescribeVpcPeeringConnectionsPagesWithContext.Unlock()
	return mock.DescribeVpcPeeringConnectionsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeVpcPeeringConnectionsPagesWithContextCalls gets all the calls that were made to DescribeVpcPeeringConnectionsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVpcPeeringConnectionsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeVpcPeeringConnectionsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpcPeeringConnectionsInput
	In3 func(*ec2.DescribeVpcPeeringConnectionsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpcPeeringConnectionsInput
		In3 func(*ec2.DescribeVpcPeeringConnectionsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeVpcPeeringConnectionsPagesWithContext.RLock()
	calls = mock.calls.DescribeVpcPeeringConnectionsPagesWithContext
	lockec2ClientMockDescribeVpcPeeringConnectionsPagesWithContext.RUnlock()
	return calls
}

// DescribeVpcPeeringConnectionsRequest calls DescribeVpcPeeringConnectionsRequestFunc.
func (mock *ec2ClientMock) DescribeVpcPeeringConnectionsRequest(in1 *ec2.DescribeVpcPeeringConnectionsInput) (*request.Request, *ec2.DescribeVpcPeeringConnectionsOutput) {
	if mock.DescribeVpcPeeringConnectionsRequestFunc == nil {
		panic("ec2ClientMock.DescribeVpcPeeringConnectionsRequestFunc: method is nil but ec2Client.DescribeVpcPeeringConnectionsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcPeeringConnectionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVpcPeeringConnectionsRequest.Lock()
	mock.calls.DescribeVpcPeeringConnectionsRequest = append(mock.calls.DescribeVpcPeeringConnectionsRequest, callInfo)
	lockec2ClientMockDescribeVpcPeeringConnectionsRequest.Unlock()
	return mock.DescribeVpcPeeringConnectionsRequestFunc(in1)
}

// DescribeVpcPeeringConnectionsRequestCalls gets all the calls that were made to DescribeVpcPeeringConnectionsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeVpcPeeringConnectionsRequestCalls())
func (mock *ec2ClientMock) DescribeVpcPeeringConnectionsRequestCalls() []struct {
	In1 *ec2.DescribeVpcPeeringConnectionsInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpcPeeringConnectionsInput
	}
	lockec2ClientMockDescribeVpcPeeringConnectionsRequest.RLock()
	calls = mock.calls.DescribeVpcPeeringConnectionsRequest
	lockec2ClientMockDescribeVpcPeeringConnectionsRequest.RUnlock()
	return calls
}

// DescribeVpcPeeringConnectionsWithContext calls DescribeVpcPeeringConnectionsWithContextFunc.
func (mock *ec2ClientMock) DescribeVpcPeeringConnectionsWithContext(in1 context.Context, in2 *ec2.DescribeVpcPeeringConnectionsInput, in3 ...request.Option) (*ec2.DescribeVpcPeeringConnectionsOutput, error) {
	if mock.DescribeVpcPeeringConnectionsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVpcPeeringConnectionsWithContextFunc: method is nil but ec2Client.DescribeVpcPeeringConnectionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpcPeeringConnectionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeVpcPeeringConnectionsWithContext.Lock()
	mock.calls.DescribeVpcPeeringConnectionsWithContext = append(mock.calls.DescribeVpcPeeringConnectionsWithContext, callInfo)
	lockec2ClientMockDescribeVpcPeeringConnectionsWithContext.Unlock()
	return mock.DescribeVpcPeeringConnectionsWithContextFunc(in1, in2, in3...)
}

// DescribeVpcPeeringConnectionsWithContextCalls gets all the calls that were made to DescribeVpcPeeringConnectionsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVpcPeeringConnectionsWithContextCalls())
func (mock *ec2ClientMock) DescribeVpcPeeringConnectionsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpcPeeringConnectionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpcPeeringConnectionsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeVpcPeeringConnectionsWithContext.RLock()
	calls = mock.calls.DescribeVpcPeeringConnectionsWithContext
	lockec2ClientMockDescribeVpcPeeringConnectionsWithContext.RUnlock()
	return calls
}

// DescribeVpcs calls DescribeVpcsFunc.
func (mock *ec2ClientMock) DescribeVpcs(in1 *ec2.DescribeVpcsInput) (*ec2.DescribeVpcsOutput, error) {
	if mock.DescribeVpcsFunc == nil {
		panic("ec2ClientMock.DescribeVpcsFunc: method is nil but ec2Client.DescribeVpcs was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVpcs.Lock()
	mock.calls.DescribeVpcs = append(mock.calls.DescribeVpcs, callInfo)
	lockec2ClientMockDescribeVpcs.Unlock()
	return mock.DescribeVpcsFunc(in1)
}

// DescribeVpcsCalls gets all the calls that were made to DescribeVpcs.
// Check the length with:
//     len(mockedec2Client.DescribeVpcsCalls())
func (mock *ec2ClientMock) DescribeVpcsCalls() []struct {
	In1 *ec2.DescribeVpcsInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpcsInput
	}
	lockec2ClientMockDescribeVpcs.RLock()
	calls = mock.calls.DescribeVpcs
	lockec2ClientMockDescribeVpcs.RUnlock()
	return calls
}

// DescribeVpcsPages calls DescribeVpcsPagesFunc.
func (mock *ec2ClientMock) DescribeVpcsPages(in1 *ec2.DescribeVpcsInput, in2 func(*ec2.DescribeVpcsOutput, bool) bool) error {
	if mock.DescribeVpcsPagesFunc == nil {
		panic("ec2ClientMock.DescribeVpcsPagesFunc: method is nil but ec2Client.DescribeVpcsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcsInput
		In2 func(*ec2.DescribeVpcsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockDescribeVpcsPages.Lock()
	mock.calls.DescribeVpcsPages = append(mock.calls.DescribeVpcsPages, callInfo)
	lockec2ClientMockDescribeVpcsPages.Unlock()
	return mock.DescribeVpcsPagesFunc(in1, in2)
}

// DescribeVpcsPagesCalls gets all the calls that were made to DescribeVpcsPages.
// Check the length with:
//     len(mockedec2Client.DescribeVpcsPagesCalls())
func (mock *ec2ClientMock) DescribeVpcsPagesCalls() []struct {
	In1 *ec2.DescribeVpcsInput
	In2 func(*ec2.DescribeVpcsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.DescribeVpcsInput
		In2 func(*ec2.DescribeVpcsOutput, bool) bool
	}
	lockec2ClientMockDescribeVpcsPages.RLock()
	calls = mock.calls.DescribeVpcsPages
	lockec2ClientMockDescribeVpcsPages.RUnlock()
	return calls
}

// DescribeVpcsPagesWithContext calls DescribeVpcsPagesWithContextFunc.
func (mock *ec2ClientMock) DescribeVpcsPagesWithContext(in1 context.Context, in2 *ec2.DescribeVpcsInput, in3 func(*ec2.DescribeVpcsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeVpcsPagesWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVpcsPagesWithContextFunc: method is nil but ec2Client.DescribeVpcsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpcsInput
		In3 func(*ec2.DescribeVpcsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockDescribeVpcsPagesWithContext.Lock()
	mock.calls.DescribeVpcsPagesWithContext = append(mock.calls.DescribeVpcsPagesWithContext, callInfo)
	lockec2ClientMockDescribeVpcsPagesWithContext.Unlock()
	return mock.DescribeVpcsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeVpcsPagesWithContextCalls gets all the calls that were made to DescribeVpcsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVpcsPagesWithContextCalls())
func (mock *ec2ClientMock) DescribeVpcsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpcsInput
	In3 func(*ec2.DescribeVpcsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpcsInput
		In3 func(*ec2.DescribeVpcsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockDescribeVpcsPagesWithContext.RLock()
	calls = mock.calls.DescribeVpcsPagesWithContext
	lockec2ClientMockDescribeVpcsPagesWithContext.RUnlock()
	return calls
}

// DescribeVpcsRequest calls DescribeVpcsRequestFunc.
func (mock *ec2ClientMock) DescribeVpcsRequest(in1 *ec2.DescribeVpcsInput) (*request.Request, *ec2.DescribeVpcsOutput) {
	if mock.DescribeVpcsRequestFunc == nil {
		panic("ec2ClientMock.DescribeVpcsRequestFunc: method is nil but ec2Client.DescribeVpcsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVpcsRequest.Lock()
	mock.calls.DescribeVpcsRequest = append(mock.calls.DescribeVpcsRequest, callInfo)
	lockec2ClientMockDescribeVpcsRequest.Unlock()
	return mock.DescribeVpcsRequestFunc(in1)
}

// DescribeVpcsRequestCalls gets all the calls that were made to DescribeVpcsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeVpcsRequestCalls())
func (mock *ec2ClientMock) DescribeVpcsRequestCalls() []struct {
	In1 *ec2.DescribeVpcsInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpcsInput
	}
	lockec2ClientMockDescribeVpcsRequest.RLock()
	calls = mock.calls.DescribeVpcsRequest
	lockec2ClientMockDescribeVpcsRequest.RUnlock()
	return calls
}

// DescribeVpcsWithContext calls DescribeVpcsWithContextFunc.
func (mock *ec2ClientMock) DescribeVpcsWithContext(in1 context.Context, in2 *ec2.DescribeVpcsInput, in3 ...request.Option) (*ec2.DescribeVpcsOutput, error) {
	if mock.DescribeVpcsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVpcsWithContextFunc: method is nil but ec2Client.DescribeVpcsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpcsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeVpcsWithContext.Lock()
	mock.calls.DescribeVpcsWithContext = append(mock.calls.DescribeVpcsWithContext, callInfo)
	lockec2ClientMockDescribeVpcsWithContext.Unlock()
	return mock.DescribeVpcsWithContextFunc(in1, in2, in3...)
}

// DescribeVpcsWithContextCalls gets all the calls that were made to DescribeVpcsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVpcsWithContextCalls())
func (mock *ec2ClientMock) DescribeVpcsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpcsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpcsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeVpcsWithContext.RLock()
	calls = mock.calls.DescribeVpcsWithContext
	lockec2ClientMockDescribeVpcsWithContext.RUnlock()
	return calls
}

// DescribeVpnConnections calls DescribeVpnConnectionsFunc.
func (mock *ec2ClientMock) DescribeVpnConnections(in1 *ec2.DescribeVpnConnectionsInput) (*ec2.DescribeVpnConnectionsOutput, error) {
	if mock.DescribeVpnConnectionsFunc == nil {
		panic("ec2ClientMock.DescribeVpnConnectionsFunc: method is nil but ec2Client.DescribeVpnConnections was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpnConnectionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVpnConnections.Lock()
	mock.calls.DescribeVpnConnections = append(mock.calls.DescribeVpnConnections, callInfo)
	lockec2ClientMockDescribeVpnConnections.Unlock()
	return mock.DescribeVpnConnectionsFunc(in1)
}

// DescribeVpnConnectionsCalls gets all the calls that were made to DescribeVpnConnections.
// Check the length with:
//     len(mockedec2Client.DescribeVpnConnectionsCalls())
func (mock *ec2ClientMock) DescribeVpnConnectionsCalls() []struct {
	In1 *ec2.DescribeVpnConnectionsInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpnConnectionsInput
	}
	lockec2ClientMockDescribeVpnConnections.RLock()
	calls = mock.calls.DescribeVpnConnections
	lockec2ClientMockDescribeVpnConnections.RUnlock()
	return calls
}

// DescribeVpnConnectionsRequest calls DescribeVpnConnectionsRequestFunc.
func (mock *ec2ClientMock) DescribeVpnConnectionsRequest(in1 *ec2.DescribeVpnConnectionsInput) (*request.Request, *ec2.DescribeVpnConnectionsOutput) {
	if mock.DescribeVpnConnectionsRequestFunc == nil {
		panic("ec2ClientMock.DescribeVpnConnectionsRequestFunc: method is nil but ec2Client.DescribeVpnConnectionsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpnConnectionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVpnConnectionsRequest.Lock()
	mock.calls.DescribeVpnConnectionsRequest = append(mock.calls.DescribeVpnConnectionsRequest, callInfo)
	lockec2ClientMockDescribeVpnConnectionsRequest.Unlock()
	return mock.DescribeVpnConnectionsRequestFunc(in1)
}

// DescribeVpnConnectionsRequestCalls gets all the calls that were made to DescribeVpnConnectionsRequest.
// Check the length with:
//     len(mockedec2Client.DescribeVpnConnectionsRequestCalls())
func (mock *ec2ClientMock) DescribeVpnConnectionsRequestCalls() []struct {
	In1 *ec2.DescribeVpnConnectionsInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpnConnectionsInput
	}
	lockec2ClientMockDescribeVpnConnectionsRequest.RLock()
	calls = mock.calls.DescribeVpnConnectionsRequest
	lockec2ClientMockDescribeVpnConnectionsRequest.RUnlock()
	return calls
}

// DescribeVpnConnectionsWithContext calls DescribeVpnConnectionsWithContextFunc.
func (mock *ec2ClientMock) DescribeVpnConnectionsWithContext(in1 context.Context, in2 *ec2.DescribeVpnConnectionsInput, in3 ...request.Option) (*ec2.DescribeVpnConnectionsOutput, error) {
	if mock.DescribeVpnConnectionsWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVpnConnectionsWithContextFunc: method is nil but ec2Client.DescribeVpnConnectionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpnConnectionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeVpnConnectionsWithContext.Lock()
	mock.calls.DescribeVpnConnectionsWithContext = append(mock.calls.DescribeVpnConnectionsWithContext, callInfo)
	lockec2ClientMockDescribeVpnConnectionsWithContext.Unlock()
	return mock.DescribeVpnConnectionsWithContextFunc(in1, in2, in3...)
}

// DescribeVpnConnectionsWithContextCalls gets all the calls that were made to DescribeVpnConnectionsWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVpnConnectionsWithContextCalls())
func (mock *ec2ClientMock) DescribeVpnConnectionsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpnConnectionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpnConnectionsInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeVpnConnectionsWithContext.RLock()
	calls = mock.calls.DescribeVpnConnectionsWithContext
	lockec2ClientMockDescribeVpnConnectionsWithContext.RUnlock()
	return calls
}

// DescribeVpnGateways calls DescribeVpnGatewaysFunc.
func (mock *ec2ClientMock) DescribeVpnGateways(in1 *ec2.DescribeVpnGatewaysInput) (*ec2.DescribeVpnGatewaysOutput, error) {
	if mock.DescribeVpnGatewaysFunc == nil {
		panic("ec2ClientMock.DescribeVpnGatewaysFunc: method is nil but ec2Client.DescribeVpnGateways was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpnGatewaysInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVpnGateways.Lock()
	mock.calls.DescribeVpnGateways = append(mock.calls.DescribeVpnGateways, callInfo)
	lockec2ClientMockDescribeVpnGateways.Unlock()
	return mock.DescribeVpnGatewaysFunc(in1)
}

// DescribeVpnGatewaysCalls gets all the calls that were made to DescribeVpnGateways.
// Check the length with:
//     len(mockedec2Client.DescribeVpnGatewaysCalls())
func (mock *ec2ClientMock) DescribeVpnGatewaysCalls() []struct {
	In1 *ec2.DescribeVpnGatewaysInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpnGatewaysInput
	}
	lockec2ClientMockDescribeVpnGateways.RLock()
	calls = mock.calls.DescribeVpnGateways
	lockec2ClientMockDescribeVpnGateways.RUnlock()
	return calls
}

// DescribeVpnGatewaysRequest calls DescribeVpnGatewaysRequestFunc.
func (mock *ec2ClientMock) DescribeVpnGatewaysRequest(in1 *ec2.DescribeVpnGatewaysInput) (*request.Request, *ec2.DescribeVpnGatewaysOutput) {
	if mock.DescribeVpnGatewaysRequestFunc == nil {
		panic("ec2ClientMock.DescribeVpnGatewaysRequestFunc: method is nil but ec2Client.DescribeVpnGatewaysRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpnGatewaysInput
	}{
		In1: in1,
	}
	lockec2ClientMockDescribeVpnGatewaysRequest.Lock()
	mock.calls.DescribeVpnGatewaysRequest = append(mock.calls.DescribeVpnGatewaysRequest, callInfo)
	lockec2ClientMockDescribeVpnGatewaysRequest.Unlock()
	return mock.DescribeVpnGatewaysRequestFunc(in1)
}

// DescribeVpnGatewaysRequestCalls gets all the calls that were made to DescribeVpnGatewaysRequest.
// Check the length with:
//     len(mockedec2Client.DescribeVpnGatewaysRequestCalls())
func (mock *ec2ClientMock) DescribeVpnGatewaysRequestCalls() []struct {
	In1 *ec2.DescribeVpnGatewaysInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpnGatewaysInput
	}
	lockec2ClientMockDescribeVpnGatewaysRequest.RLock()
	calls = mock.calls.DescribeVpnGatewaysRequest
	lockec2ClientMockDescribeVpnGatewaysRequest.RUnlock()
	return calls
}

// DescribeVpnGatewaysWithContext calls DescribeVpnGatewaysWithContextFunc.
func (mock *ec2ClientMock) DescribeVpnGatewaysWithContext(in1 context.Context, in2 *ec2.DescribeVpnGatewaysInput, in3 ...request.Option) (*ec2.DescribeVpnGatewaysOutput, error) {
	if mock.DescribeVpnGatewaysWithContextFunc == nil {
		panic("ec2ClientMock.DescribeVpnGatewaysWithContextFunc: method is nil but ec2Client.DescribeVpnGatewaysWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpnGatewaysInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDescribeVpnGatewaysWithContext.Lock()
	mock.calls.DescribeVpnGatewaysWithContext = append(mock.calls.DescribeVpnGatewaysWithContext, callInfo)
	lockec2ClientMockDescribeVpnGatewaysWithContext.Unlock()
	return mock.DescribeVpnGatewaysWithContextFunc(in1, in2, in3...)
}

// DescribeVpnGatewaysWithContextCalls gets all the calls that were made to DescribeVpnGatewaysWithContext.
// Check the length with:
//     len(mockedec2Client.DescribeVpnGatewaysWithContextCalls())
func (mock *ec2ClientMock) DescribeVpnGatewaysWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpnGatewaysInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpnGatewaysInput
		In3 []request.Option
	}
	lockec2ClientMockDescribeVpnGatewaysWithContext.RLock()
	calls = mock.calls.DescribeVpnGatewaysWithContext
	lockec2ClientMockDescribeVpnGatewaysWithContext.RUnlock()
	return calls
}

// DetachClassicLinkVpc calls DetachClassicLinkVpcFunc.
func (mock *ec2ClientMock) DetachClassicLinkVpc(in1 *ec2.DetachClassicLinkVpcInput) (*ec2.DetachClassicLinkVpcOutput, error) {
	if mock.DetachClassicLinkVpcFunc == nil {
		panic("ec2ClientMock.DetachClassicLinkVpcFunc: method is nil but ec2Client.DetachClassicLinkVpc was just called")
	}
	callInfo := struct {
		In1 *ec2.DetachClassicLinkVpcInput
	}{
		In1: in1,
	}
	lockec2ClientMockDetachClassicLinkVpc.Lock()
	mock.calls.DetachClassicLinkVpc = append(mock.calls.DetachClassicLinkVpc, callInfo)
	lockec2ClientMockDetachClassicLinkVpc.Unlock()
	return mock.DetachClassicLinkVpcFunc(in1)
}

// DetachClassicLinkVpcCalls gets all the calls that were made to DetachClassicLinkVpc.
// Check the length with:
//     len(mockedec2Client.DetachClassicLinkVpcCalls())
func (mock *ec2ClientMock) DetachClassicLinkVpcCalls() []struct {
	In1 *ec2.DetachClassicLinkVpcInput
} {
	var calls []struct {
		In1 *ec2.DetachClassicLinkVpcInput
	}
	lockec2ClientMockDetachClassicLinkVpc.RLock()
	calls = mock.calls.DetachClassicLinkVpc
	lockec2ClientMockDetachClassicLinkVpc.RUnlock()
	return calls
}

// DetachClassicLinkVpcRequest calls DetachClassicLinkVpcRequestFunc.
func (mock *ec2ClientMock) DetachClassicLinkVpcRequest(in1 *ec2.DetachClassicLinkVpcInput) (*request.Request, *ec2.DetachClassicLinkVpcOutput) {
	if mock.DetachClassicLinkVpcRequestFunc == nil {
		panic("ec2ClientMock.DetachClassicLinkVpcRequestFunc: method is nil but ec2Client.DetachClassicLinkVpcRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DetachClassicLinkVpcInput
	}{
		In1: in1,
	}
	lockec2ClientMockDetachClassicLinkVpcRequest.Lock()
	mock.calls.DetachClassicLinkVpcRequest = append(mock.calls.DetachClassicLinkVpcRequest, callInfo)
	lockec2ClientMockDetachClassicLinkVpcRequest.Unlock()
	return mock.DetachClassicLinkVpcRequestFunc(in1)
}

// DetachClassicLinkVpcRequestCalls gets all the calls that were made to DetachClassicLinkVpcRequest.
// Check the length with:
//     len(mockedec2Client.DetachClassicLinkVpcRequestCalls())
func (mock *ec2ClientMock) DetachClassicLinkVpcRequestCalls() []struct {
	In1 *ec2.DetachClassicLinkVpcInput
} {
	var calls []struct {
		In1 *ec2.DetachClassicLinkVpcInput
	}
	lockec2ClientMockDetachClassicLinkVpcRequest.RLock()
	calls = mock.calls.DetachClassicLinkVpcRequest
	lockec2ClientMockDetachClassicLinkVpcRequest.RUnlock()
	return calls
}

// DetachClassicLinkVpcWithContext calls DetachClassicLinkVpcWithContextFunc.
func (mock *ec2ClientMock) DetachClassicLinkVpcWithContext(in1 context.Context, in2 *ec2.DetachClassicLinkVpcInput, in3 ...request.Option) (*ec2.DetachClassicLinkVpcOutput, error) {
	if mock.DetachClassicLinkVpcWithContextFunc == nil {
		panic("ec2ClientMock.DetachClassicLinkVpcWithContextFunc: method is nil but ec2Client.DetachClassicLinkVpcWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DetachClassicLinkVpcInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDetachClassicLinkVpcWithContext.Lock()
	mock.calls.DetachClassicLinkVpcWithContext = append(mock.calls.DetachClassicLinkVpcWithContext, callInfo)
	lockec2ClientMockDetachClassicLinkVpcWithContext.Unlock()
	return mock.DetachClassicLinkVpcWithContextFunc(in1, in2, in3...)
}

// DetachClassicLinkVpcWithContextCalls gets all the calls that were made to DetachClassicLinkVpcWithContext.
// Check the length with:
//     len(mockedec2Client.DetachClassicLinkVpcWithContextCalls())
func (mock *ec2ClientMock) DetachClassicLinkVpcWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DetachClassicLinkVpcInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DetachClassicLinkVpcInput
		In3 []request.Option
	}
	lockec2ClientMockDetachClassicLinkVpcWithContext.RLock()
	calls = mock.calls.DetachClassicLinkVpcWithContext
	lockec2ClientMockDetachClassicLinkVpcWithContext.RUnlock()
	return calls
}

// DetachInternetGateway calls DetachInternetGatewayFunc.
func (mock *ec2ClientMock) DetachInternetGateway(in1 *ec2.DetachInternetGatewayInput) (*ec2.DetachInternetGatewayOutput, error) {
	if mock.DetachInternetGatewayFunc == nil {
		panic("ec2ClientMock.DetachInternetGatewayFunc: method is nil but ec2Client.DetachInternetGateway was just called")
	}
	callInfo := struct {
		In1 *ec2.DetachInternetGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockDetachInternetGateway.Lock()
	mock.calls.DetachInternetGateway = append(mock.calls.DetachInternetGateway, callInfo)
	lockec2ClientMockDetachInternetGateway.Unlock()
	return mock.DetachInternetGatewayFunc(in1)
}

// DetachInternetGatewayCalls gets all the calls that were made to DetachInternetGateway.
// Check the length with:
//     len(mockedec2Client.DetachInternetGatewayCalls())
func (mock *ec2ClientMock) DetachInternetGatewayCalls() []struct {
	In1 *ec2.DetachInternetGatewayInput
} {
	var calls []struct {
		In1 *ec2.DetachInternetGatewayInput
	}
	lockec2ClientMockDetachInternetGateway.RLock()
	calls = mock.calls.DetachInternetGateway
	lockec2ClientMockDetachInternetGateway.RUnlock()
	return calls
}

// DetachInternetGatewayRequest calls DetachInternetGatewayRequestFunc.
func (mock *ec2ClientMock) DetachInternetGatewayRequest(in1 *ec2.DetachInternetGatewayInput) (*request.Request, *ec2.DetachInternetGatewayOutput) {
	if mock.DetachInternetGatewayRequestFunc == nil {
		panic("ec2ClientMock.DetachInternetGatewayRequestFunc: method is nil but ec2Client.DetachInternetGatewayRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DetachInternetGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockDetachInternetGatewayRequest.Lock()
	mock.calls.DetachInternetGatewayRequest = append(mock.calls.DetachInternetGatewayRequest, callInfo)
	lockec2ClientMockDetachInternetGatewayRequest.Unlock()
	return mock.DetachInternetGatewayRequestFunc(in1)
}

// DetachInternetGatewayRequestCalls gets all the calls that were made to DetachInternetGatewayRequest.
// Check the length with:
//     len(mockedec2Client.DetachInternetGatewayRequestCalls())
func (mock *ec2ClientMock) DetachInternetGatewayRequestCalls() []struct {
	In1 *ec2.DetachInternetGatewayInput
} {
	var calls []struct {
		In1 *ec2.DetachInternetGatewayInput
	}
	lockec2ClientMockDetachInternetGatewayRequest.RLock()
	calls = mock.calls.DetachInternetGatewayRequest
	lockec2ClientMockDetachInternetGatewayRequest.RUnlock()
	return calls
}

// DetachInternetGatewayWithContext calls DetachInternetGatewayWithContextFunc.
func (mock *ec2ClientMock) DetachInternetGatewayWithContext(in1 context.Context, in2 *ec2.DetachInternetGatewayInput, in3 ...request.Option) (*ec2.DetachInternetGatewayOutput, error) {
	if mock.DetachInternetGatewayWithContextFunc == nil {
		panic("ec2ClientMock.DetachInternetGatewayWithContextFunc: method is nil but ec2Client.DetachInternetGatewayWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DetachInternetGatewayInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDetachInternetGatewayWithContext.Lock()
	mock.calls.DetachInternetGatewayWithContext = append(mock.calls.DetachInternetGatewayWithContext, callInfo)
	lockec2ClientMockDetachInternetGatewayWithContext.Unlock()
	return mock.DetachInternetGatewayWithContextFunc(in1, in2, in3...)
}

// DetachInternetGatewayWithContextCalls gets all the calls that were made to DetachInternetGatewayWithContext.
// Check the length with:
//     len(mockedec2Client.DetachInternetGatewayWithContextCalls())
func (mock *ec2ClientMock) DetachInternetGatewayWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DetachInternetGatewayInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DetachInternetGatewayInput
		In3 []request.Option
	}
	lockec2ClientMockDetachInternetGatewayWithContext.RLock()
	calls = mock.calls.DetachInternetGatewayWithContext
	lockec2ClientMockDetachInternetGatewayWithContext.RUnlock()
	return calls
}

// DetachNetworkInterface calls DetachNetworkInterfaceFunc.
func (mock *ec2ClientMock) DetachNetworkInterface(in1 *ec2.DetachNetworkInterfaceInput) (*ec2.DetachNetworkInterfaceOutput, error) {
	if mock.DetachNetworkInterfaceFunc == nil {
		panic("ec2ClientMock.DetachNetworkInterfaceFunc: method is nil but ec2Client.DetachNetworkInterface was just called")
	}
	callInfo := struct {
		In1 *ec2.DetachNetworkInterfaceInput
	}{
		In1: in1,
	}
	lockec2ClientMockDetachNetworkInterface.Lock()
	mock.calls.DetachNetworkInterface = append(mock.calls.DetachNetworkInterface, callInfo)
	lockec2ClientMockDetachNetworkInterface.Unlock()
	return mock.DetachNetworkInterfaceFunc(in1)
}

// DetachNetworkInterfaceCalls gets all the calls that were made to DetachNetworkInterface.
// Check the length with:
//     len(mockedec2Client.DetachNetworkInterfaceCalls())
func (mock *ec2ClientMock) DetachNetworkInterfaceCalls() []struct {
	In1 *ec2.DetachNetworkInterfaceInput
} {
	var calls []struct {
		In1 *ec2.DetachNetworkInterfaceInput
	}
	lockec2ClientMockDetachNetworkInterface.RLock()
	calls = mock.calls.DetachNetworkInterface
	lockec2ClientMockDetachNetworkInterface.RUnlock()
	return calls
}

// DetachNetworkInterfaceRequest calls DetachNetworkInterfaceRequestFunc.
func (mock *ec2ClientMock) DetachNetworkInterfaceRequest(in1 *ec2.DetachNetworkInterfaceInput) (*request.Request, *ec2.DetachNetworkInterfaceOutput) {
	if mock.DetachNetworkInterfaceRequestFunc == nil {
		panic("ec2ClientMock.DetachNetworkInterfaceRequestFunc: method is nil but ec2Client.DetachNetworkInterfaceRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DetachNetworkInterfaceInput
	}{
		In1: in1,
	}
	lockec2ClientMockDetachNetworkInterfaceRequest.Lock()
	mock.calls.DetachNetworkInterfaceRequest = append(mock.calls.DetachNetworkInterfaceRequest, callInfo)
	lockec2ClientMockDetachNetworkInterfaceRequest.Unlock()
	return mock.DetachNetworkInterfaceRequestFunc(in1)
}

// DetachNetworkInterfaceRequestCalls gets all the calls that were made to DetachNetworkInterfaceRequest.
// Check the length with:
//     len(mockedec2Client.DetachNetworkInterfaceRequestCalls())
func (mock *ec2ClientMock) DetachNetworkInterfaceRequestCalls() []struct {
	In1 *ec2.DetachNetworkInterfaceInput
} {
	var calls []struct {
		In1 *ec2.DetachNetworkInterfaceInput
	}
	lockec2ClientMockDetachNetworkInterfaceRequest.RLock()
	calls = mock.calls.DetachNetworkInterfaceRequest
	lockec2ClientMockDetachNetworkInterfaceRequest.RUnlock()
	return calls
}

// DetachNetworkInterfaceWithContext calls DetachNetworkInterfaceWithContextFunc.
func (mock *ec2ClientMock) DetachNetworkInterfaceWithContext(in1 context.Context, in2 *ec2.DetachNetworkInterfaceInput, in3 ...request.Option) (*ec2.DetachNetworkInterfaceOutput, error) {
	if mock.DetachNetworkInterfaceWithContextFunc == nil {
		panic("ec2ClientMock.DetachNetworkInterfaceWithContextFunc: method is nil but ec2Client.DetachNetworkInterfaceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DetachNetworkInterfaceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDetachNetworkInterfaceWithContext.Lock()
	mock.calls.DetachNetworkInterfaceWithContext = append(mock.calls.DetachNetworkInterfaceWithContext, callInfo)
	lockec2ClientMockDetachNetworkInterfaceWithContext.Unlock()
	return mock.DetachNetworkInterfaceWithContextFunc(in1, in2, in3...)
}

// DetachNetworkInterfaceWithContextCalls gets all the calls that were made to DetachNetworkInterfaceWithContext.
// Check the length with:
//     len(mockedec2Client.DetachNetworkInterfaceWithContextCalls())
func (mock *ec2ClientMock) DetachNetworkInterfaceWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DetachNetworkInterfaceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DetachNetworkInterfaceInput
		In3 []request.Option
	}
	lockec2ClientMockDetachNetworkInterfaceWithContext.RLock()
	calls = mock.calls.DetachNetworkInterfaceWithContext
	lockec2ClientMockDetachNetworkInterfaceWithContext.RUnlock()
	return calls
}

// DetachVolume calls DetachVolumeFunc.
func (mock *ec2ClientMock) DetachVolume(in1 *ec2.DetachVolumeInput) (*ec2.VolumeAttachment, error) {
	if mock.DetachVolumeFunc == nil {
		panic("ec2ClientMock.DetachVolumeFunc: method is nil but ec2Client.DetachVolume was just called")
	}
	callInfo := struct {
		In1 *ec2.DetachVolumeInput
	}{
		In1: in1,
	}
	lockec2ClientMockDetachVolume.Lock()
	mock.calls.DetachVolume = append(mock.calls.DetachVolume, callInfo)
	lockec2ClientMockDetachVolume.Unlock()
	return mock.DetachVolumeFunc(in1)
}

// DetachVolumeCalls gets all the calls that were made to DetachVolume.
// Check the length with:
//     len(mockedec2Client.DetachVolumeCalls())
func (mock *ec2ClientMock) DetachVolumeCalls() []struct {
	In1 *ec2.DetachVolumeInput
} {
	var calls []struct {
		In1 *ec2.DetachVolumeInput
	}
	lockec2ClientMockDetachVolume.RLock()
	calls = mock.calls.DetachVolume
	lockec2ClientMockDetachVolume.RUnlock()
	return calls
}

// DetachVolumeRequest calls DetachVolumeRequestFunc.
func (mock *ec2ClientMock) DetachVolumeRequest(in1 *ec2.DetachVolumeInput) (*request.Request, *ec2.VolumeAttachment) {
	if mock.DetachVolumeRequestFunc == nil {
		panic("ec2ClientMock.DetachVolumeRequestFunc: method is nil but ec2Client.DetachVolumeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DetachVolumeInput
	}{
		In1: in1,
	}
	lockec2ClientMockDetachVolumeRequest.Lock()
	mock.calls.DetachVolumeRequest = append(mock.calls.DetachVolumeRequest, callInfo)
	lockec2ClientMockDetachVolumeRequest.Unlock()
	return mock.DetachVolumeRequestFunc(in1)
}

// DetachVolumeRequestCalls gets all the calls that were made to DetachVolumeRequest.
// Check the length with:
//     len(mockedec2Client.DetachVolumeRequestCalls())
func (mock *ec2ClientMock) DetachVolumeRequestCalls() []struct {
	In1 *ec2.DetachVolumeInput
} {
	var calls []struct {
		In1 *ec2.DetachVolumeInput
	}
	lockec2ClientMockDetachVolumeRequest.RLock()
	calls = mock.calls.DetachVolumeRequest
	lockec2ClientMockDetachVolumeRequest.RUnlock()
	return calls
}

// DetachVolumeWithContext calls DetachVolumeWithContextFunc.
func (mock *ec2ClientMock) DetachVolumeWithContext(in1 context.Context, in2 *ec2.DetachVolumeInput, in3 ...request.Option) (*ec2.VolumeAttachment, error) {
	if mock.DetachVolumeWithContextFunc == nil {
		panic("ec2ClientMock.DetachVolumeWithContextFunc: method is nil but ec2Client.DetachVolumeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DetachVolumeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDetachVolumeWithContext.Lock()
	mock.calls.DetachVolumeWithContext = append(mock.calls.DetachVolumeWithContext, callInfo)
	lockec2ClientMockDetachVolumeWithContext.Unlock()
	return mock.DetachVolumeWithContextFunc(in1, in2, in3...)
}

// DetachVolumeWithContextCalls gets all the calls that were made to DetachVolumeWithContext.
// Check the length with:
//     len(mockedec2Client.DetachVolumeWithContextCalls())
func (mock *ec2ClientMock) DetachVolumeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DetachVolumeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DetachVolumeInput
		In3 []request.Option
	}
	lockec2ClientMockDetachVolumeWithContext.RLock()
	calls = mock.calls.DetachVolumeWithContext
	lockec2ClientMockDetachVolumeWithContext.RUnlock()
	return calls
}

// DetachVpnGateway calls DetachVpnGatewayFunc.
func (mock *ec2ClientMock) DetachVpnGateway(in1 *ec2.DetachVpnGatewayInput) (*ec2.DetachVpnGatewayOutput, error) {
	if mock.DetachVpnGatewayFunc == nil {
		panic("ec2ClientMock.DetachVpnGatewayFunc: method is nil but ec2Client.DetachVpnGateway was just called")
	}
	callInfo := struct {
		In1 *ec2.DetachVpnGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockDetachVpnGateway.Lock()
	mock.calls.DetachVpnGateway = append(mock.calls.DetachVpnGateway, callInfo)
	lockec2ClientMockDetachVpnGateway.Unlock()
	return mock.DetachVpnGatewayFunc(in1)
}

// DetachVpnGatewayCalls gets all the calls that were made to DetachVpnGateway.
// Check the length with:
//     len(mockedec2Client.DetachVpnGatewayCalls())
func (mock *ec2ClientMock) DetachVpnGatewayCalls() []struct {
	In1 *ec2.DetachVpnGatewayInput
} {
	var calls []struct {
		In1 *ec2.DetachVpnGatewayInput
	}
	lockec2ClientMockDetachVpnGateway.RLock()
	calls = mock.calls.DetachVpnGateway
	lockec2ClientMockDetachVpnGateway.RUnlock()
	return calls
}

// DetachVpnGatewayRequest calls DetachVpnGatewayRequestFunc.
func (mock *ec2ClientMock) DetachVpnGatewayRequest(in1 *ec2.DetachVpnGatewayInput) (*request.Request, *ec2.DetachVpnGatewayOutput) {
	if mock.DetachVpnGatewayRequestFunc == nil {
		panic("ec2ClientMock.DetachVpnGatewayRequestFunc: method is nil but ec2Client.DetachVpnGatewayRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DetachVpnGatewayInput
	}{
		In1: in1,
	}
	lockec2ClientMockDetachVpnGatewayRequest.Lock()
	mock.calls.DetachVpnGatewayRequest = append(mock.calls.DetachVpnGatewayRequest, callInfo)
	lockec2ClientMockDetachVpnGatewayRequest.Unlock()
	return mock.DetachVpnGatewayRequestFunc(in1)
}

// DetachVpnGatewayRequestCalls gets all the calls that were made to DetachVpnGatewayRequest.
// Check the length with:
//     len(mockedec2Client.DetachVpnGatewayRequestCalls())
func (mock *ec2ClientMock) DetachVpnGatewayRequestCalls() []struct {
	In1 *ec2.DetachVpnGatewayInput
} {
	var calls []struct {
		In1 *ec2.DetachVpnGatewayInput
	}
	lockec2ClientMockDetachVpnGatewayRequest.RLock()
	calls = mock.calls.DetachVpnGatewayRequest
	lockec2ClientMockDetachVpnGatewayRequest.RUnlock()
	return calls
}

// DetachVpnGatewayWithContext calls DetachVpnGatewayWithContextFunc.
func (mock *ec2ClientMock) DetachVpnGatewayWithContext(in1 context.Context, in2 *ec2.DetachVpnGatewayInput, in3 ...request.Option) (*ec2.DetachVpnGatewayOutput, error) {
	if mock.DetachVpnGatewayWithContextFunc == nil {
		panic("ec2ClientMock.DetachVpnGatewayWithContextFunc: method is nil but ec2Client.DetachVpnGatewayWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DetachVpnGatewayInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDetachVpnGatewayWithContext.Lock()
	mock.calls.DetachVpnGatewayWithContext = append(mock.calls.DetachVpnGatewayWithContext, callInfo)
	lockec2ClientMockDetachVpnGatewayWithContext.Unlock()
	return mock.DetachVpnGatewayWithContextFunc(in1, in2, in3...)
}

// DetachVpnGatewayWithContextCalls gets all the calls that were made to DetachVpnGatewayWithContext.
// Check the length with:
//     len(mockedec2Client.DetachVpnGatewayWithContextCalls())
func (mock *ec2ClientMock) DetachVpnGatewayWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DetachVpnGatewayInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DetachVpnGatewayInput
		In3 []request.Option
	}
	lockec2ClientMockDetachVpnGatewayWithContext.RLock()
	calls = mock.calls.DetachVpnGatewayWithContext
	lockec2ClientMockDetachVpnGatewayWithContext.RUnlock()
	return calls
}

// DisableEbsEncryptionByDefault calls DisableEbsEncryptionByDefaultFunc.
func (mock *ec2ClientMock) DisableEbsEncryptionByDefault(in1 *ec2.DisableEbsEncryptionByDefaultInput) (*ec2.DisableEbsEncryptionByDefaultOutput, error) {
	if mock.DisableEbsEncryptionByDefaultFunc == nil {
		panic("ec2ClientMock.DisableEbsEncryptionByDefaultFunc: method is nil but ec2Client.DisableEbsEncryptionByDefault was just called")
	}
	callInfo := struct {
		In1 *ec2.DisableEbsEncryptionByDefaultInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisableEbsEncryptionByDefault.Lock()
	mock.calls.DisableEbsEncryptionByDefault = append(mock.calls.DisableEbsEncryptionByDefault, callInfo)
	lockec2ClientMockDisableEbsEncryptionByDefault.Unlock()
	return mock.DisableEbsEncryptionByDefaultFunc(in1)
}

// DisableEbsEncryptionByDefaultCalls gets all the calls that were made to DisableEbsEncryptionByDefault.
// Check the length with:
//     len(mockedec2Client.DisableEbsEncryptionByDefaultCalls())
func (mock *ec2ClientMock) DisableEbsEncryptionByDefaultCalls() []struct {
	In1 *ec2.DisableEbsEncryptionByDefaultInput
} {
	var calls []struct {
		In1 *ec2.DisableEbsEncryptionByDefaultInput
	}
	lockec2ClientMockDisableEbsEncryptionByDefault.RLock()
	calls = mock.calls.DisableEbsEncryptionByDefault
	lockec2ClientMockDisableEbsEncryptionByDefault.RUnlock()
	return calls
}

// DisableEbsEncryptionByDefaultRequest calls DisableEbsEncryptionByDefaultRequestFunc.
func (mock *ec2ClientMock) DisableEbsEncryptionByDefaultRequest(in1 *ec2.DisableEbsEncryptionByDefaultInput) (*request.Request, *ec2.DisableEbsEncryptionByDefaultOutput) {
	if mock.DisableEbsEncryptionByDefaultRequestFunc == nil {
		panic("ec2ClientMock.DisableEbsEncryptionByDefaultRequestFunc: method is nil but ec2Client.DisableEbsEncryptionByDefaultRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DisableEbsEncryptionByDefaultInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisableEbsEncryptionByDefaultRequest.Lock()
	mock.calls.DisableEbsEncryptionByDefaultRequest = append(mock.calls.DisableEbsEncryptionByDefaultRequest, callInfo)
	lockec2ClientMockDisableEbsEncryptionByDefaultRequest.Unlock()
	return mock.DisableEbsEncryptionByDefaultRequestFunc(in1)
}

// DisableEbsEncryptionByDefaultRequestCalls gets all the calls that were made to DisableEbsEncryptionByDefaultRequest.
// Check the length with:
//     len(mockedec2Client.DisableEbsEncryptionByDefaultRequestCalls())
func (mock *ec2ClientMock) DisableEbsEncryptionByDefaultRequestCalls() []struct {
	In1 *ec2.DisableEbsEncryptionByDefaultInput
} {
	var calls []struct {
		In1 *ec2.DisableEbsEncryptionByDefaultInput
	}
	lockec2ClientMockDisableEbsEncryptionByDefaultRequest.RLock()
	calls = mock.calls.DisableEbsEncryptionByDefaultRequest
	lockec2ClientMockDisableEbsEncryptionByDefaultRequest.RUnlock()
	return calls
}

// DisableEbsEncryptionByDefaultWithContext calls DisableEbsEncryptionByDefaultWithContextFunc.
func (mock *ec2ClientMock) DisableEbsEncryptionByDefaultWithContext(in1 context.Context, in2 *ec2.DisableEbsEncryptionByDefaultInput, in3 ...request.Option) (*ec2.DisableEbsEncryptionByDefaultOutput, error) {
	if mock.DisableEbsEncryptionByDefaultWithContextFunc == nil {
		panic("ec2ClientMock.DisableEbsEncryptionByDefaultWithContextFunc: method is nil but ec2Client.DisableEbsEncryptionByDefaultWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DisableEbsEncryptionByDefaultInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDisableEbsEncryptionByDefaultWithContext.Lock()
	mock.calls.DisableEbsEncryptionByDefaultWithContext = append(mock.calls.DisableEbsEncryptionByDefaultWithContext, callInfo)
	lockec2ClientMockDisableEbsEncryptionByDefaultWithContext.Unlock()
	return mock.DisableEbsEncryptionByDefaultWithContextFunc(in1, in2, in3...)
}

// DisableEbsEncryptionByDefaultWithContextCalls gets all the calls that were made to DisableEbsEncryptionByDefaultWithContext.
// Check the length with:
//     len(mockedec2Client.DisableEbsEncryptionByDefaultWithContextCalls())
func (mock *ec2ClientMock) DisableEbsEncryptionByDefaultWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DisableEbsEncryptionByDefaultInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DisableEbsEncryptionByDefaultInput
		In3 []request.Option
	}
	lockec2ClientMockDisableEbsEncryptionByDefaultWithContext.RLock()
	calls = mock.calls.DisableEbsEncryptionByDefaultWithContext
	lockec2ClientMockDisableEbsEncryptionByDefaultWithContext.RUnlock()
	return calls
}

// DisableFastSnapshotRestores calls DisableFastSnapshotRestoresFunc.
func (mock *ec2ClientMock) DisableFastSnapshotRestores(in1 *ec2.DisableFastSnapshotRestoresInput) (*ec2.DisableFastSnapshotRestoresOutput, error) {
	if mock.DisableFastSnapshotRestoresFunc == nil {
		panic("ec2ClientMock.DisableFastSnapshotRestoresFunc: method is nil but ec2Client.DisableFastSnapshotRestores was just called")
	}
	callInfo := struct {
		In1 *ec2.DisableFastSnapshotRestoresInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisableFastSnapshotRestores.Lock()
	mock.calls.DisableFastSnapshotRestores = append(mock.calls.DisableFastSnapshotRestores, callInfo)
	lockec2ClientMockDisableFastSnapshotRestores.Unlock()
	return mock.DisableFastSnapshotRestoresFunc(in1)
}

// DisableFastSnapshotRestoresCalls gets all the calls that were made to DisableFastSnapshotRestores.
// Check the length with:
//     len(mockedec2Client.DisableFastSnapshotRestoresCalls())
func (mock *ec2ClientMock) DisableFastSnapshotRestoresCalls() []struct {
	In1 *ec2.DisableFastSnapshotRestoresInput
} {
	var calls []struct {
		In1 *ec2.DisableFastSnapshotRestoresInput
	}
	lockec2ClientMockDisableFastSnapshotRestores.RLock()
	calls = mock.calls.DisableFastSnapshotRestores
	lockec2ClientMockDisableFastSnapshotRestores.RUnlock()
	return calls
}

// DisableFastSnapshotRestoresRequest calls DisableFastSnapshotRestoresRequestFunc.
func (mock *ec2ClientMock) DisableFastSnapshotRestoresRequest(in1 *ec2.DisableFastSnapshotRestoresInput) (*request.Request, *ec2.DisableFastSnapshotRestoresOutput) {
	if mock.DisableFastSnapshotRestoresRequestFunc == nil {
		panic("ec2ClientMock.DisableFastSnapshotRestoresRequestFunc: method is nil but ec2Client.DisableFastSnapshotRestoresRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DisableFastSnapshotRestoresInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisableFastSnapshotRestoresRequest.Lock()
	mock.calls.DisableFastSnapshotRestoresRequest = append(mock.calls.DisableFastSnapshotRestoresRequest, callInfo)
	lockec2ClientMockDisableFastSnapshotRestoresRequest.Unlock()
	return mock.DisableFastSnapshotRestoresRequestFunc(in1)
}

// DisableFastSnapshotRestoresRequestCalls gets all the calls that were made to DisableFastSnapshotRestoresRequest.
// Check the length with:
//     len(mockedec2Client.DisableFastSnapshotRestoresRequestCalls())
func (mock *ec2ClientMock) DisableFastSnapshotRestoresRequestCalls() []struct {
	In1 *ec2.DisableFastSnapshotRestoresInput
} {
	var calls []struct {
		In1 *ec2.DisableFastSnapshotRestoresInput
	}
	lockec2ClientMockDisableFastSnapshotRestoresRequest.RLock()
	calls = mock.calls.DisableFastSnapshotRestoresRequest
	lockec2ClientMockDisableFastSnapshotRestoresRequest.RUnlock()
	return calls
}

// DisableFastSnapshotRestoresWithContext calls DisableFastSnapshotRestoresWithContextFunc.
func (mock *ec2ClientMock) DisableFastSnapshotRestoresWithContext(in1 context.Context, in2 *ec2.DisableFastSnapshotRestoresInput, in3 ...request.Option) (*ec2.DisableFastSnapshotRestoresOutput, error) {
	if mock.DisableFastSnapshotRestoresWithContextFunc == nil {
		panic("ec2ClientMock.DisableFastSnapshotRestoresWithContextFunc: method is nil but ec2Client.DisableFastSnapshotRestoresWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DisableFastSnapshotRestoresInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDisableFastSnapshotRestoresWithContext.Lock()
	mock.calls.DisableFastSnapshotRestoresWithContext = append(mock.calls.DisableFastSnapshotRestoresWithContext, callInfo)
	lockec2ClientMockDisableFastSnapshotRestoresWithContext.Unlock()
	return mock.DisableFastSnapshotRestoresWithContextFunc(in1, in2, in3...)
}

// DisableFastSnapshotRestoresWithContextCalls gets all the calls that were made to DisableFastSnapshotRestoresWithContext.
// Check the length with:
//     len(mockedec2Client.DisableFastSnapshotRestoresWithContextCalls())
func (mock *ec2ClientMock) DisableFastSnapshotRestoresWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DisableFastSnapshotRestoresInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DisableFastSnapshotRestoresInput
		In3 []request.Option
	}
	lockec2ClientMockDisableFastSnapshotRestoresWithContext.RLock()
	calls = mock.calls.DisableFastSnapshotRestoresWithContext
	lockec2ClientMockDisableFastSnapshotRestoresWithContext.RUnlock()
	return calls
}

// DisableTransitGatewayRouteTablePropagation calls DisableTransitGatewayRouteTablePropagationFunc.
func (mock *ec2ClientMock) DisableTransitGatewayRouteTablePropagation(in1 *ec2.DisableTransitGatewayRouteTablePropagationInput) (*ec2.DisableTransitGatewayRouteTablePropagationOutput, error) {
	if mock.DisableTransitGatewayRouteTablePropagationFunc == nil {
		panic("ec2ClientMock.DisableTransitGatewayRouteTablePropagationFunc: method is nil but ec2Client.DisableTransitGatewayRouteTablePropagation was just called")
	}
	callInfo := struct {
		In1 *ec2.DisableTransitGatewayRouteTablePropagationInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisableTransitGatewayRouteTablePropagation.Lock()
	mock.calls.DisableTransitGatewayRouteTablePropagation = append(mock.calls.DisableTransitGatewayRouteTablePropagation, callInfo)
	lockec2ClientMockDisableTransitGatewayRouteTablePropagation.Unlock()
	return mock.DisableTransitGatewayRouteTablePropagationFunc(in1)
}

// DisableTransitGatewayRouteTablePropagationCalls gets all the calls that were made to DisableTransitGatewayRouteTablePropagation.
// Check the length with:
//     len(mockedec2Client.DisableTransitGatewayRouteTablePropagationCalls())
func (mock *ec2ClientMock) DisableTransitGatewayRouteTablePropagationCalls() []struct {
	In1 *ec2.DisableTransitGatewayRouteTablePropagationInput
} {
	var calls []struct {
		In1 *ec2.DisableTransitGatewayRouteTablePropagationInput
	}
	lockec2ClientMockDisableTransitGatewayRouteTablePropagation.RLock()
	calls = mock.calls.DisableTransitGatewayRouteTablePropagation
	lockec2ClientMockDisableTransitGatewayRouteTablePropagation.RUnlock()
	return calls
}

// DisableTransitGatewayRouteTablePropagationRequest calls DisableTransitGatewayRouteTablePropagationRequestFunc.
func (mock *ec2ClientMock) DisableTransitGatewayRouteTablePropagationRequest(in1 *ec2.DisableTransitGatewayRouteTablePropagationInput) (*request.Request, *ec2.DisableTransitGatewayRouteTablePropagationOutput) {
	if mock.DisableTransitGatewayRouteTablePropagationRequestFunc == nil {
		panic("ec2ClientMock.DisableTransitGatewayRouteTablePropagationRequestFunc: method is nil but ec2Client.DisableTransitGatewayRouteTablePropagationRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DisableTransitGatewayRouteTablePropagationInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisableTransitGatewayRouteTablePropagationRequest.Lock()
	mock.calls.DisableTransitGatewayRouteTablePropagationRequest = append(mock.calls.DisableTransitGatewayRouteTablePropagationRequest, callInfo)
	lockec2ClientMockDisableTransitGatewayRouteTablePropagationRequest.Unlock()
	return mock.DisableTransitGatewayRouteTablePropagationRequestFunc(in1)
}

// DisableTransitGatewayRouteTablePropagationRequestCalls gets all the calls that were made to DisableTransitGatewayRouteTablePropagationRequest.
// Check the length with:
//     len(mockedec2Client.DisableTransitGatewayRouteTablePropagationRequestCalls())
func (mock *ec2ClientMock) DisableTransitGatewayRouteTablePropagationRequestCalls() []struct {
	In1 *ec2.DisableTransitGatewayRouteTablePropagationInput
} {
	var calls []struct {
		In1 *ec2.DisableTransitGatewayRouteTablePropagationInput
	}
	lockec2ClientMockDisableTransitGatewayRouteTablePropagationRequest.RLock()
	calls = mock.calls.DisableTransitGatewayRouteTablePropagationRequest
	lockec2ClientMockDisableTransitGatewayRouteTablePropagationRequest.RUnlock()
	return calls
}

// DisableTransitGatewayRouteTablePropagationWithContext calls DisableTransitGatewayRouteTablePropagationWithContextFunc.
func (mock *ec2ClientMock) DisableTransitGatewayRouteTablePropagationWithContext(in1 context.Context, in2 *ec2.DisableTransitGatewayRouteTablePropagationInput, in3 ...request.Option) (*ec2.DisableTransitGatewayRouteTablePropagationOutput, error) {
	if mock.DisableTransitGatewayRouteTablePropagationWithContextFunc == nil {
		panic("ec2ClientMock.DisableTransitGatewayRouteTablePropagationWithContextFunc: method is nil but ec2Client.DisableTransitGatewayRouteTablePropagationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DisableTransitGatewayRouteTablePropagationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDisableTransitGatewayRouteTablePropagationWithContext.Lock()
	mock.calls.DisableTransitGatewayRouteTablePropagationWithContext = append(mock.calls.DisableTransitGatewayRouteTablePropagationWithContext, callInfo)
	lockec2ClientMockDisableTransitGatewayRouteTablePropagationWithContext.Unlock()
	return mock.DisableTransitGatewayRouteTablePropagationWithContextFunc(in1, in2, in3...)
}

// DisableTransitGatewayRouteTablePropagationWithContextCalls gets all the calls that were made to DisableTransitGatewayRouteTablePropagationWithContext.
// Check the length with:
//     len(mockedec2Client.DisableTransitGatewayRouteTablePropagationWithContextCalls())
func (mock *ec2ClientMock) DisableTransitGatewayRouteTablePropagationWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DisableTransitGatewayRouteTablePropagationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DisableTransitGatewayRouteTablePropagationInput
		In3 []request.Option
	}
	lockec2ClientMockDisableTransitGatewayRouteTablePropagationWithContext.RLock()
	calls = mock.calls.DisableTransitGatewayRouteTablePropagationWithContext
	lockec2ClientMockDisableTransitGatewayRouteTablePropagationWithContext.RUnlock()
	return calls
}

// DisableVgwRoutePropagation calls DisableVgwRoutePropagationFunc.
func (mock *ec2ClientMock) DisableVgwRoutePropagation(in1 *ec2.DisableVgwRoutePropagationInput) (*ec2.DisableVgwRoutePropagationOutput, error) {
	if mock.DisableVgwRoutePropagationFunc == nil {
		panic("ec2ClientMock.DisableVgwRoutePropagationFunc: method is nil but ec2Client.DisableVgwRoutePropagation was just called")
	}
	callInfo := struct {
		In1 *ec2.DisableVgwRoutePropagationInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisableVgwRoutePropagation.Lock()
	mock.calls.DisableVgwRoutePropagation = append(mock.calls.DisableVgwRoutePropagation, callInfo)
	lockec2ClientMockDisableVgwRoutePropagation.Unlock()
	return mock.DisableVgwRoutePropagationFunc(in1)
}

// DisableVgwRoutePropagationCalls gets all the calls that were made to DisableVgwRoutePropagation.
// Check the length with:
//     len(mockedec2Client.DisableVgwRoutePropagationCalls())
func (mock *ec2ClientMock) DisableVgwRoutePropagationCalls() []struct {
	In1 *ec2.DisableVgwRoutePropagationInput
} {
	var calls []struct {
		In1 *ec2.DisableVgwRoutePropagationInput
	}
	lockec2ClientMockDisableVgwRoutePropagation.RLock()
	calls = mock.calls.DisableVgwRoutePropagation
	lockec2ClientMockDisableVgwRoutePropagation.RUnlock()
	return calls
}

// DisableVgwRoutePropagationRequest calls DisableVgwRoutePropagationRequestFunc.
func (mock *ec2ClientMock) DisableVgwRoutePropagationRequest(in1 *ec2.DisableVgwRoutePropagationInput) (*request.Request, *ec2.DisableVgwRoutePropagationOutput) {
	if mock.DisableVgwRoutePropagationRequestFunc == nil {
		panic("ec2ClientMock.DisableVgwRoutePropagationRequestFunc: method is nil but ec2Client.DisableVgwRoutePropagationRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DisableVgwRoutePropagationInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisableVgwRoutePropagationRequest.Lock()
	mock.calls.DisableVgwRoutePropagationRequest = append(mock.calls.DisableVgwRoutePropagationRequest, callInfo)
	lockec2ClientMockDisableVgwRoutePropagationRequest.Unlock()
	return mock.DisableVgwRoutePropagationRequestFunc(in1)
}

// DisableVgwRoutePropagationRequestCalls gets all the calls that were made to DisableVgwRoutePropagationRequest.
// Check the length with:
//     len(mockedec2Client.DisableVgwRoutePropagationRequestCalls())
func (mock *ec2ClientMock) DisableVgwRoutePropagationRequestCalls() []struct {
	In1 *ec2.DisableVgwRoutePropagationInput
} {
	var calls []struct {
		In1 *ec2.DisableVgwRoutePropagationInput
	}
	lockec2ClientMockDisableVgwRoutePropagationRequest.RLock()
	calls = mock.calls.DisableVgwRoutePropagationRequest
	lockec2ClientMockDisableVgwRoutePropagationRequest.RUnlock()
	return calls
}

// DisableVgwRoutePropagationWithContext calls DisableVgwRoutePropagationWithContextFunc.
func (mock *ec2ClientMock) DisableVgwRoutePropagationWithContext(in1 context.Context, in2 *ec2.DisableVgwRoutePropagationInput, in3 ...request.Option) (*ec2.DisableVgwRoutePropagationOutput, error) {
	if mock.DisableVgwRoutePropagationWithContextFunc == nil {
		panic("ec2ClientMock.DisableVgwRoutePropagationWithContextFunc: method is nil but ec2Client.DisableVgwRoutePropagationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DisableVgwRoutePropagationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDisableVgwRoutePropagationWithContext.Lock()
	mock.calls.DisableVgwRoutePropagationWithContext = append(mock.calls.DisableVgwRoutePropagationWithContext, callInfo)
	lockec2ClientMockDisableVgwRoutePropagationWithContext.Unlock()
	return mock.DisableVgwRoutePropagationWithContextFunc(in1, in2, in3...)
}

// DisableVgwRoutePropagationWithContextCalls gets all the calls that were made to DisableVgwRoutePropagationWithContext.
// Check the length with:
//     len(mockedec2Client.DisableVgwRoutePropagationWithContextCalls())
func (mock *ec2ClientMock) DisableVgwRoutePropagationWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DisableVgwRoutePropagationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DisableVgwRoutePropagationInput
		In3 []request.Option
	}
	lockec2ClientMockDisableVgwRoutePropagationWithContext.RLock()
	calls = mock.calls.DisableVgwRoutePropagationWithContext
	lockec2ClientMockDisableVgwRoutePropagationWithContext.RUnlock()
	return calls
}

// DisableVpcClassicLink calls DisableVpcClassicLinkFunc.
func (mock *ec2ClientMock) DisableVpcClassicLink(in1 *ec2.DisableVpcClassicLinkInput) (*ec2.DisableVpcClassicLinkOutput, error) {
	if mock.DisableVpcClassicLinkFunc == nil {
		panic("ec2ClientMock.DisableVpcClassicLinkFunc: method is nil but ec2Client.DisableVpcClassicLink was just called")
	}
	callInfo := struct {
		In1 *ec2.DisableVpcClassicLinkInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisableVpcClassicLink.Lock()
	mock.calls.DisableVpcClassicLink = append(mock.calls.DisableVpcClassicLink, callInfo)
	lockec2ClientMockDisableVpcClassicLink.Unlock()
	return mock.DisableVpcClassicLinkFunc(in1)
}

// DisableVpcClassicLinkCalls gets all the calls that were made to DisableVpcClassicLink.
// Check the length with:
//     len(mockedec2Client.DisableVpcClassicLinkCalls())
func (mock *ec2ClientMock) DisableVpcClassicLinkCalls() []struct {
	In1 *ec2.DisableVpcClassicLinkInput
} {
	var calls []struct {
		In1 *ec2.DisableVpcClassicLinkInput
	}
	lockec2ClientMockDisableVpcClassicLink.RLock()
	calls = mock.calls.DisableVpcClassicLink
	lockec2ClientMockDisableVpcClassicLink.RUnlock()
	return calls
}

// DisableVpcClassicLinkDnsSupport calls DisableVpcClassicLinkDnsSupportFunc.
func (mock *ec2ClientMock) DisableVpcClassicLinkDnsSupport(in1 *ec2.DisableVpcClassicLinkDnsSupportInput) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error) {
	if mock.DisableVpcClassicLinkDnsSupportFunc == nil {
		panic("ec2ClientMock.DisableVpcClassicLinkDnsSupportFunc: method is nil but ec2Client.DisableVpcClassicLinkDnsSupport was just called")
	}
	callInfo := struct {
		In1 *ec2.DisableVpcClassicLinkDnsSupportInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisableVpcClassicLinkDnsSupport.Lock()
	mock.calls.DisableVpcClassicLinkDnsSupport = append(mock.calls.DisableVpcClassicLinkDnsSupport, callInfo)
	lockec2ClientMockDisableVpcClassicLinkDnsSupport.Unlock()
	return mock.DisableVpcClassicLinkDnsSupportFunc(in1)
}

// DisableVpcClassicLinkDnsSupportCalls gets all the calls that were made to DisableVpcClassicLinkDnsSupport.
// Check the length with:
//     len(mockedec2Client.DisableVpcClassicLinkDnsSupportCalls())
func (mock *ec2ClientMock) DisableVpcClassicLinkDnsSupportCalls() []struct {
	In1 *ec2.DisableVpcClassicLinkDnsSupportInput
} {
	var calls []struct {
		In1 *ec2.DisableVpcClassicLinkDnsSupportInput
	}
	lockec2ClientMockDisableVpcClassicLinkDnsSupport.RLock()
	calls = mock.calls.DisableVpcClassicLinkDnsSupport
	lockec2ClientMockDisableVpcClassicLinkDnsSupport.RUnlock()
	return calls
}

// DisableVpcClassicLinkDnsSupportRequest calls DisableVpcClassicLinkDnsSupportRequestFunc.
func (mock *ec2ClientMock) DisableVpcClassicLinkDnsSupportRequest(in1 *ec2.DisableVpcClassicLinkDnsSupportInput) (*request.Request, *ec2.DisableVpcClassicLinkDnsSupportOutput) {
	if mock.DisableVpcClassicLinkDnsSupportRequestFunc == nil {
		panic("ec2ClientMock.DisableVpcClassicLinkDnsSupportRequestFunc: method is nil but ec2Client.DisableVpcClassicLinkDnsSupportRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DisableVpcClassicLinkDnsSupportInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisableVpcClassicLinkDnsSupportRequest.Lock()
	mock.calls.DisableVpcClassicLinkDnsSupportRequest = append(mock.calls.DisableVpcClassicLinkDnsSupportRequest, callInfo)
	lockec2ClientMockDisableVpcClassicLinkDnsSupportRequest.Unlock()
	return mock.DisableVpcClassicLinkDnsSupportRequestFunc(in1)
}

// DisableVpcClassicLinkDnsSupportRequestCalls gets all the calls that were made to DisableVpcClassicLinkDnsSupportRequest.
// Check the length with:
//     len(mockedec2Client.DisableVpcClassicLinkDnsSupportRequestCalls())
func (mock *ec2ClientMock) DisableVpcClassicLinkDnsSupportRequestCalls() []struct {
	In1 *ec2.DisableVpcClassicLinkDnsSupportInput
} {
	var calls []struct {
		In1 *ec2.DisableVpcClassicLinkDnsSupportInput
	}
	lockec2ClientMockDisableVpcClassicLinkDnsSupportRequest.RLock()
	calls = mock.calls.DisableVpcClassicLinkDnsSupportRequest
	lockec2ClientMockDisableVpcClassicLinkDnsSupportRequest.RUnlock()
	return calls
}

// DisableVpcClassicLinkDnsSupportWithContext calls DisableVpcClassicLinkDnsSupportWithContextFunc.
func (mock *ec2ClientMock) DisableVpcClassicLinkDnsSupportWithContext(in1 context.Context, in2 *ec2.DisableVpcClassicLinkDnsSupportInput, in3 ...request.Option) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error) {
	if mock.DisableVpcClassicLinkDnsSupportWithContextFunc == nil {
		panic("ec2ClientMock.DisableVpcClassicLinkDnsSupportWithContextFunc: method is nil but ec2Client.DisableVpcClassicLinkDnsSupportWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DisableVpcClassicLinkDnsSupportInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDisableVpcClassicLinkDnsSupportWithContext.Lock()
	mock.calls.DisableVpcClassicLinkDnsSupportWithContext = append(mock.calls.DisableVpcClassicLinkDnsSupportWithContext, callInfo)
	lockec2ClientMockDisableVpcClassicLinkDnsSupportWithContext.Unlock()
	return mock.DisableVpcClassicLinkDnsSupportWithContextFunc(in1, in2, in3...)
}

// DisableVpcClassicLinkDnsSupportWithContextCalls gets all the calls that were made to DisableVpcClassicLinkDnsSupportWithContext.
// Check the length with:
//     len(mockedec2Client.DisableVpcClassicLinkDnsSupportWithContextCalls())
func (mock *ec2ClientMock) DisableVpcClassicLinkDnsSupportWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DisableVpcClassicLinkDnsSupportInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DisableVpcClassicLinkDnsSupportInput
		In3 []request.Option
	}
	lockec2ClientMockDisableVpcClassicLinkDnsSupportWithContext.RLock()
	calls = mock.calls.DisableVpcClassicLinkDnsSupportWithContext
	lockec2ClientMockDisableVpcClassicLinkDnsSupportWithContext.RUnlock()
	return calls
}

// DisableVpcClassicLinkRequest calls DisableVpcClassicLinkRequestFunc.
func (mock *ec2ClientMock) DisableVpcClassicLinkRequest(in1 *ec2.DisableVpcClassicLinkInput) (*request.Request, *ec2.DisableVpcClassicLinkOutput) {
	if mock.DisableVpcClassicLinkRequestFunc == nil {
		panic("ec2ClientMock.DisableVpcClassicLinkRequestFunc: method is nil but ec2Client.DisableVpcClassicLinkRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DisableVpcClassicLinkInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisableVpcClassicLinkRequest.Lock()
	mock.calls.DisableVpcClassicLinkRequest = append(mock.calls.DisableVpcClassicLinkRequest, callInfo)
	lockec2ClientMockDisableVpcClassicLinkRequest.Unlock()
	return mock.DisableVpcClassicLinkRequestFunc(in1)
}

// DisableVpcClassicLinkRequestCalls gets all the calls that were made to DisableVpcClassicLinkRequest.
// Check the length with:
//     len(mockedec2Client.DisableVpcClassicLinkRequestCalls())
func (mock *ec2ClientMock) DisableVpcClassicLinkRequestCalls() []struct {
	In1 *ec2.DisableVpcClassicLinkInput
} {
	var calls []struct {
		In1 *ec2.DisableVpcClassicLinkInput
	}
	lockec2ClientMockDisableVpcClassicLinkRequest.RLock()
	calls = mock.calls.DisableVpcClassicLinkRequest
	lockec2ClientMockDisableVpcClassicLinkRequest.RUnlock()
	return calls
}

// DisableVpcClassicLinkWithContext calls DisableVpcClassicLinkWithContextFunc.
func (mock *ec2ClientMock) DisableVpcClassicLinkWithContext(in1 context.Context, in2 *ec2.DisableVpcClassicLinkInput, in3 ...request.Option) (*ec2.DisableVpcClassicLinkOutput, error) {
	if mock.DisableVpcClassicLinkWithContextFunc == nil {
		panic("ec2ClientMock.DisableVpcClassicLinkWithContextFunc: method is nil but ec2Client.DisableVpcClassicLinkWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DisableVpcClassicLinkInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDisableVpcClassicLinkWithContext.Lock()
	mock.calls.DisableVpcClassicLinkWithContext = append(mock.calls.DisableVpcClassicLinkWithContext, callInfo)
	lockec2ClientMockDisableVpcClassicLinkWithContext.Unlock()
	return mock.DisableVpcClassicLinkWithContextFunc(in1, in2, in3...)
}

// DisableVpcClassicLinkWithContextCalls gets all the calls that were made to DisableVpcClassicLinkWithContext.
// Check the length with:
//     len(mockedec2Client.DisableVpcClassicLinkWithContextCalls())
func (mock *ec2ClientMock) DisableVpcClassicLinkWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DisableVpcClassicLinkInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DisableVpcClassicLinkInput
		In3 []request.Option
	}
	lockec2ClientMockDisableVpcClassicLinkWithContext.RLock()
	calls = mock.calls.DisableVpcClassicLinkWithContext
	lockec2ClientMockDisableVpcClassicLinkWithContext.RUnlock()
	return calls
}

// DisassociateAddress calls DisassociateAddressFunc.
func (mock *ec2ClientMock) DisassociateAddress(in1 *ec2.DisassociateAddressInput) (*ec2.DisassociateAddressOutput, error) {
	if mock.DisassociateAddressFunc == nil {
		panic("ec2ClientMock.DisassociateAddressFunc: method is nil but ec2Client.DisassociateAddress was just called")
	}
	callInfo := struct {
		In1 *ec2.DisassociateAddressInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisassociateAddress.Lock()
	mock.calls.DisassociateAddress = append(mock.calls.DisassociateAddress, callInfo)
	lockec2ClientMockDisassociateAddress.Unlock()
	return mock.DisassociateAddressFunc(in1)
}

// DisassociateAddressCalls gets all the calls that were made to DisassociateAddress.
// Check the length with:
//     len(mockedec2Client.DisassociateAddressCalls())
func (mock *ec2ClientMock) DisassociateAddressCalls() []struct {
	In1 *ec2.DisassociateAddressInput
} {
	var calls []struct {
		In1 *ec2.DisassociateAddressInput
	}
	lockec2ClientMockDisassociateAddress.RLock()
	calls = mock.calls.DisassociateAddress
	lockec2ClientMockDisassociateAddress.RUnlock()
	return calls
}

// DisassociateAddressRequest calls DisassociateAddressRequestFunc.
func (mock *ec2ClientMock) DisassociateAddressRequest(in1 *ec2.DisassociateAddressInput) (*request.Request, *ec2.DisassociateAddressOutput) {
	if mock.DisassociateAddressRequestFunc == nil {
		panic("ec2ClientMock.DisassociateAddressRequestFunc: method is nil but ec2Client.DisassociateAddressRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DisassociateAddressInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisassociateAddressRequest.Lock()
	mock.calls.DisassociateAddressRequest = append(mock.calls.DisassociateAddressRequest, callInfo)
	lockec2ClientMockDisassociateAddressRequest.Unlock()
	return mock.DisassociateAddressRequestFunc(in1)
}

// DisassociateAddressRequestCalls gets all the calls that were made to DisassociateAddressRequest.
// Check the length with:
//     len(mockedec2Client.DisassociateAddressRequestCalls())
func (mock *ec2ClientMock) DisassociateAddressRequestCalls() []struct {
	In1 *ec2.DisassociateAddressInput
} {
	var calls []struct {
		In1 *ec2.DisassociateAddressInput
	}
	lockec2ClientMockDisassociateAddressRequest.RLock()
	calls = mock.calls.DisassociateAddressRequest
	lockec2ClientMockDisassociateAddressRequest.RUnlock()
	return calls
}

// DisassociateAddressWithContext calls DisassociateAddressWithContextFunc.
func (mock *ec2ClientMock) DisassociateAddressWithContext(in1 context.Context, in2 *ec2.DisassociateAddressInput, in3 ...request.Option) (*ec2.DisassociateAddressOutput, error) {
	if mock.DisassociateAddressWithContextFunc == nil {
		panic("ec2ClientMock.DisassociateAddressWithContextFunc: method is nil but ec2Client.DisassociateAddressWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DisassociateAddressInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDisassociateAddressWithContext.Lock()
	mock.calls.DisassociateAddressWithContext = append(mock.calls.DisassociateAddressWithContext, callInfo)
	lockec2ClientMockDisassociateAddressWithContext.Unlock()
	return mock.DisassociateAddressWithContextFunc(in1, in2, in3...)
}

// DisassociateAddressWithContextCalls gets all the calls that were made to DisassociateAddressWithContext.
// Check the length with:
//     len(mockedec2Client.DisassociateAddressWithContextCalls())
func (mock *ec2ClientMock) DisassociateAddressWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DisassociateAddressInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DisassociateAddressInput
		In3 []request.Option
	}
	lockec2ClientMockDisassociateAddressWithContext.RLock()
	calls = mock.calls.DisassociateAddressWithContext
	lockec2ClientMockDisassociateAddressWithContext.RUnlock()
	return calls
}

// DisassociateClientVpnTargetNetwork calls DisassociateClientVpnTargetNetworkFunc.
func (mock *ec2ClientMock) DisassociateClientVpnTargetNetwork(in1 *ec2.DisassociateClientVpnTargetNetworkInput) (*ec2.DisassociateClientVpnTargetNetworkOutput, error) {
	if mock.DisassociateClientVpnTargetNetworkFunc == nil {
		panic("ec2ClientMock.DisassociateClientVpnTargetNetworkFunc: method is nil but ec2Client.DisassociateClientVpnTargetNetwork was just called")
	}
	callInfo := struct {
		In1 *ec2.DisassociateClientVpnTargetNetworkInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisassociateClientVpnTargetNetwork.Lock()
	mock.calls.DisassociateClientVpnTargetNetwork = append(mock.calls.DisassociateClientVpnTargetNetwork, callInfo)
	lockec2ClientMockDisassociateClientVpnTargetNetwork.Unlock()
	return mock.DisassociateClientVpnTargetNetworkFunc(in1)
}

// DisassociateClientVpnTargetNetworkCalls gets all the calls that were made to DisassociateClientVpnTargetNetwork.
// Check the length with:
//     len(mockedec2Client.DisassociateClientVpnTargetNetworkCalls())
func (mock *ec2ClientMock) DisassociateClientVpnTargetNetworkCalls() []struct {
	In1 *ec2.DisassociateClientVpnTargetNetworkInput
} {
	var calls []struct {
		In1 *ec2.DisassociateClientVpnTargetNetworkInput
	}
	lockec2ClientMockDisassociateClientVpnTargetNetwork.RLock()
	calls = mock.calls.DisassociateClientVpnTargetNetwork
	lockec2ClientMockDisassociateClientVpnTargetNetwork.RUnlock()
	return calls
}

// DisassociateClientVpnTargetNetworkRequest calls DisassociateClientVpnTargetNetworkRequestFunc.
func (mock *ec2ClientMock) DisassociateClientVpnTargetNetworkRequest(in1 *ec2.DisassociateClientVpnTargetNetworkInput) (*request.Request, *ec2.DisassociateClientVpnTargetNetworkOutput) {
	if mock.DisassociateClientVpnTargetNetworkRequestFunc == nil {
		panic("ec2ClientMock.DisassociateClientVpnTargetNetworkRequestFunc: method is nil but ec2Client.DisassociateClientVpnTargetNetworkRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DisassociateClientVpnTargetNetworkInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisassociateClientVpnTargetNetworkRequest.Lock()
	mock.calls.DisassociateClientVpnTargetNetworkRequest = append(mock.calls.DisassociateClientVpnTargetNetworkRequest, callInfo)
	lockec2ClientMockDisassociateClientVpnTargetNetworkRequest.Unlock()
	return mock.DisassociateClientVpnTargetNetworkRequestFunc(in1)
}

// DisassociateClientVpnTargetNetworkRequestCalls gets all the calls that were made to DisassociateClientVpnTargetNetworkRequest.
// Check the length with:
//     len(mockedec2Client.DisassociateClientVpnTargetNetworkRequestCalls())
func (mock *ec2ClientMock) DisassociateClientVpnTargetNetworkRequestCalls() []struct {
	In1 *ec2.DisassociateClientVpnTargetNetworkInput
} {
	var calls []struct {
		In1 *ec2.DisassociateClientVpnTargetNetworkInput
	}
	lockec2ClientMockDisassociateClientVpnTargetNetworkRequest.RLock()
	calls = mock.calls.DisassociateClientVpnTargetNetworkRequest
	lockec2ClientMockDisassociateClientVpnTargetNetworkRequest.RUnlock()
	return calls
}

// DisassociateClientVpnTargetNetworkWithContext calls DisassociateClientVpnTargetNetworkWithContextFunc.
func (mock *ec2ClientMock) DisassociateClientVpnTargetNetworkWithContext(in1 context.Context, in2 *ec2.DisassociateClientVpnTargetNetworkInput, in3 ...request.Option) (*ec2.DisassociateClientVpnTargetNetworkOutput, error) {
	if mock.DisassociateClientVpnTargetNetworkWithContextFunc == nil {
		panic("ec2ClientMock.DisassociateClientVpnTargetNetworkWithContextFunc: method is nil but ec2Client.DisassociateClientVpnTargetNetworkWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DisassociateClientVpnTargetNetworkInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDisassociateClientVpnTargetNetworkWithContext.Lock()
	mock.calls.DisassociateClientVpnTargetNetworkWithContext = append(mock.calls.DisassociateClientVpnTargetNetworkWithContext, callInfo)
	lockec2ClientMockDisassociateClientVpnTargetNetworkWithContext.Unlock()
	return mock.DisassociateClientVpnTargetNetworkWithContextFunc(in1, in2, in3...)
}

// DisassociateClientVpnTargetNetworkWithContextCalls gets all the calls that were made to DisassociateClientVpnTargetNetworkWithContext.
// Check the length with:
//     len(mockedec2Client.DisassociateClientVpnTargetNetworkWithContextCalls())
func (mock *ec2ClientMock) DisassociateClientVpnTargetNetworkWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DisassociateClientVpnTargetNetworkInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DisassociateClientVpnTargetNetworkInput
		In3 []request.Option
	}
	lockec2ClientMockDisassociateClientVpnTargetNetworkWithContext.RLock()
	calls = mock.calls.DisassociateClientVpnTargetNetworkWithContext
	lockec2ClientMockDisassociateClientVpnTargetNetworkWithContext.RUnlock()
	return calls
}

// DisassociateIamInstanceProfile calls DisassociateIamInstanceProfileFunc.
func (mock *ec2ClientMock) DisassociateIamInstanceProfile(in1 *ec2.DisassociateIamInstanceProfileInput) (*ec2.DisassociateIamInstanceProfileOutput, error) {
	if mock.DisassociateIamInstanceProfileFunc == nil {
		panic("ec2ClientMock.DisassociateIamInstanceProfileFunc: method is nil but ec2Client.DisassociateIamInstanceProfile was just called")
	}
	callInfo := struct {
		In1 *ec2.DisassociateIamInstanceProfileInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisassociateIamInstanceProfile.Lock()
	mock.calls.DisassociateIamInstanceProfile = append(mock.calls.DisassociateIamInstanceProfile, callInfo)
	lockec2ClientMockDisassociateIamInstanceProfile.Unlock()
	return mock.DisassociateIamInstanceProfileFunc(in1)
}

// DisassociateIamInstanceProfileCalls gets all the calls that were made to DisassociateIamInstanceProfile.
// Check the length with:
//     len(mockedec2Client.DisassociateIamInstanceProfileCalls())
func (mock *ec2ClientMock) DisassociateIamInstanceProfileCalls() []struct {
	In1 *ec2.DisassociateIamInstanceProfileInput
} {
	var calls []struct {
		In1 *ec2.DisassociateIamInstanceProfileInput
	}
	lockec2ClientMockDisassociateIamInstanceProfile.RLock()
	calls = mock.calls.DisassociateIamInstanceProfile
	lockec2ClientMockDisassociateIamInstanceProfile.RUnlock()
	return calls
}

// DisassociateIamInstanceProfileRequest calls DisassociateIamInstanceProfileRequestFunc.
func (mock *ec2ClientMock) DisassociateIamInstanceProfileRequest(in1 *ec2.DisassociateIamInstanceProfileInput) (*request.Request, *ec2.DisassociateIamInstanceProfileOutput) {
	if mock.DisassociateIamInstanceProfileRequestFunc == nil {
		panic("ec2ClientMock.DisassociateIamInstanceProfileRequestFunc: method is nil but ec2Client.DisassociateIamInstanceProfileRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DisassociateIamInstanceProfileInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisassociateIamInstanceProfileRequest.Lock()
	mock.calls.DisassociateIamInstanceProfileRequest = append(mock.calls.DisassociateIamInstanceProfileRequest, callInfo)
	lockec2ClientMockDisassociateIamInstanceProfileRequest.Unlock()
	return mock.DisassociateIamInstanceProfileRequestFunc(in1)
}

// DisassociateIamInstanceProfileRequestCalls gets all the calls that were made to DisassociateIamInstanceProfileRequest.
// Check the length with:
//     len(mockedec2Client.DisassociateIamInstanceProfileRequestCalls())
func (mock *ec2ClientMock) DisassociateIamInstanceProfileRequestCalls() []struct {
	In1 *ec2.DisassociateIamInstanceProfileInput
} {
	var calls []struct {
		In1 *ec2.DisassociateIamInstanceProfileInput
	}
	lockec2ClientMockDisassociateIamInstanceProfileRequest.RLock()
	calls = mock.calls.DisassociateIamInstanceProfileRequest
	lockec2ClientMockDisassociateIamInstanceProfileRequest.RUnlock()
	return calls
}

// DisassociateIamInstanceProfileWithContext calls DisassociateIamInstanceProfileWithContextFunc.
func (mock *ec2ClientMock) DisassociateIamInstanceProfileWithContext(in1 context.Context, in2 *ec2.DisassociateIamInstanceProfileInput, in3 ...request.Option) (*ec2.DisassociateIamInstanceProfileOutput, error) {
	if mock.DisassociateIamInstanceProfileWithContextFunc == nil {
		panic("ec2ClientMock.DisassociateIamInstanceProfileWithContextFunc: method is nil but ec2Client.DisassociateIamInstanceProfileWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DisassociateIamInstanceProfileInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDisassociateIamInstanceProfileWithContext.Lock()
	mock.calls.DisassociateIamInstanceProfileWithContext = append(mock.calls.DisassociateIamInstanceProfileWithContext, callInfo)
	lockec2ClientMockDisassociateIamInstanceProfileWithContext.Unlock()
	return mock.DisassociateIamInstanceProfileWithContextFunc(in1, in2, in3...)
}

// DisassociateIamInstanceProfileWithContextCalls gets all the calls that were made to DisassociateIamInstanceProfileWithContext.
// Check the length with:
//     len(mockedec2Client.DisassociateIamInstanceProfileWithContextCalls())
func (mock *ec2ClientMock) DisassociateIamInstanceProfileWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DisassociateIamInstanceProfileInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DisassociateIamInstanceProfileInput
		In3 []request.Option
	}
	lockec2ClientMockDisassociateIamInstanceProfileWithContext.RLock()
	calls = mock.calls.DisassociateIamInstanceProfileWithContext
	lockec2ClientMockDisassociateIamInstanceProfileWithContext.RUnlock()
	return calls
}

// DisassociateRouteTable calls DisassociateRouteTableFunc.
func (mock *ec2ClientMock) DisassociateRouteTable(in1 *ec2.DisassociateRouteTableInput) (*ec2.DisassociateRouteTableOutput, error) {
	if mock.DisassociateRouteTableFunc == nil {
		panic("ec2ClientMock.DisassociateRouteTableFunc: method is nil but ec2Client.DisassociateRouteTable was just called")
	}
	callInfo := struct {
		In1 *ec2.DisassociateRouteTableInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisassociateRouteTable.Lock()
	mock.calls.DisassociateRouteTable = append(mock.calls.DisassociateRouteTable, callInfo)
	lockec2ClientMockDisassociateRouteTable.Unlock()
	return mock.DisassociateRouteTableFunc(in1)
}

// DisassociateRouteTableCalls gets all the calls that were made to DisassociateRouteTable.
// Check the length with:
//     len(mockedec2Client.DisassociateRouteTableCalls())
func (mock *ec2ClientMock) DisassociateRouteTableCalls() []struct {
	In1 *ec2.DisassociateRouteTableInput
} {
	var calls []struct {
		In1 *ec2.DisassociateRouteTableInput
	}
	lockec2ClientMockDisassociateRouteTable.RLock()
	calls = mock.calls.DisassociateRouteTable
	lockec2ClientMockDisassociateRouteTable.RUnlock()
	return calls
}

// DisassociateRouteTableRequest calls DisassociateRouteTableRequestFunc.
func (mock *ec2ClientMock) DisassociateRouteTableRequest(in1 *ec2.DisassociateRouteTableInput) (*request.Request, *ec2.DisassociateRouteTableOutput) {
	if mock.DisassociateRouteTableRequestFunc == nil {
		panic("ec2ClientMock.DisassociateRouteTableRequestFunc: method is nil but ec2Client.DisassociateRouteTableRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DisassociateRouteTableInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisassociateRouteTableRequest.Lock()
	mock.calls.DisassociateRouteTableRequest = append(mock.calls.DisassociateRouteTableRequest, callInfo)
	lockec2ClientMockDisassociateRouteTableRequest.Unlock()
	return mock.DisassociateRouteTableRequestFunc(in1)
}

// DisassociateRouteTableRequestCalls gets all the calls that were made to DisassociateRouteTableRequest.
// Check the length with:
//     len(mockedec2Client.DisassociateRouteTableRequestCalls())
func (mock *ec2ClientMock) DisassociateRouteTableRequestCalls() []struct {
	In1 *ec2.DisassociateRouteTableInput
} {
	var calls []struct {
		In1 *ec2.DisassociateRouteTableInput
	}
	lockec2ClientMockDisassociateRouteTableRequest.RLock()
	calls = mock.calls.DisassociateRouteTableRequest
	lockec2ClientMockDisassociateRouteTableRequest.RUnlock()
	return calls
}

// DisassociateRouteTableWithContext calls DisassociateRouteTableWithContextFunc.
func (mock *ec2ClientMock) DisassociateRouteTableWithContext(in1 context.Context, in2 *ec2.DisassociateRouteTableInput, in3 ...request.Option) (*ec2.DisassociateRouteTableOutput, error) {
	if mock.DisassociateRouteTableWithContextFunc == nil {
		panic("ec2ClientMock.DisassociateRouteTableWithContextFunc: method is nil but ec2Client.DisassociateRouteTableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DisassociateRouteTableInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDisassociateRouteTableWithContext.Lock()
	mock.calls.DisassociateRouteTableWithContext = append(mock.calls.DisassociateRouteTableWithContext, callInfo)
	lockec2ClientMockDisassociateRouteTableWithContext.Unlock()
	return mock.DisassociateRouteTableWithContextFunc(in1, in2, in3...)
}

// DisassociateRouteTableWithContextCalls gets all the calls that were made to DisassociateRouteTableWithContext.
// Check the length with:
//     len(mockedec2Client.DisassociateRouteTableWithContextCalls())
func (mock *ec2ClientMock) DisassociateRouteTableWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DisassociateRouteTableInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DisassociateRouteTableInput
		In3 []request.Option
	}
	lockec2ClientMockDisassociateRouteTableWithContext.RLock()
	calls = mock.calls.DisassociateRouteTableWithContext
	lockec2ClientMockDisassociateRouteTableWithContext.RUnlock()
	return calls
}

// DisassociateSubnetCidrBlock calls DisassociateSubnetCidrBlockFunc.
func (mock *ec2ClientMock) DisassociateSubnetCidrBlock(in1 *ec2.DisassociateSubnetCidrBlockInput) (*ec2.DisassociateSubnetCidrBlockOutput, error) {
	if mock.DisassociateSubnetCidrBlockFunc == nil {
		panic("ec2ClientMock.DisassociateSubnetCidrBlockFunc: method is nil but ec2Client.DisassociateSubnetCidrBlock was just called")
	}
	callInfo := struct {
		In1 *ec2.DisassociateSubnetCidrBlockInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisassociateSubnetCidrBlock.Lock()
	mock.calls.DisassociateSubnetCidrBlock = append(mock.calls.DisassociateSubnetCidrBlock, callInfo)
	lockec2ClientMockDisassociateSubnetCidrBlock.Unlock()
	return mock.DisassociateSubnetCidrBlockFunc(in1)
}

// DisassociateSubnetCidrBlockCalls gets all the calls that were made to DisassociateSubnetCidrBlock.
// Check the length with:
//     len(mockedec2Client.DisassociateSubnetCidrBlockCalls())
func (mock *ec2ClientMock) DisassociateSubnetCidrBlockCalls() []struct {
	In1 *ec2.DisassociateSubnetCidrBlockInput
} {
	var calls []struct {
		In1 *ec2.DisassociateSubnetCidrBlockInput
	}
	lockec2ClientMockDisassociateSubnetCidrBlock.RLock()
	calls = mock.calls.DisassociateSubnetCidrBlock
	lockec2ClientMockDisassociateSubnetCidrBlock.RUnlock()
	return calls
}

// DisassociateSubnetCidrBlockRequest calls DisassociateSubnetCidrBlockRequestFunc.
func (mock *ec2ClientMock) DisassociateSubnetCidrBlockRequest(in1 *ec2.DisassociateSubnetCidrBlockInput) (*request.Request, *ec2.DisassociateSubnetCidrBlockOutput) {
	if mock.DisassociateSubnetCidrBlockRequestFunc == nil {
		panic("ec2ClientMock.DisassociateSubnetCidrBlockRequestFunc: method is nil but ec2Client.DisassociateSubnetCidrBlockRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DisassociateSubnetCidrBlockInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisassociateSubnetCidrBlockRequest.Lock()
	mock.calls.DisassociateSubnetCidrBlockRequest = append(mock.calls.DisassociateSubnetCidrBlockRequest, callInfo)
	lockec2ClientMockDisassociateSubnetCidrBlockRequest.Unlock()
	return mock.DisassociateSubnetCidrBlockRequestFunc(in1)
}

// DisassociateSubnetCidrBlockRequestCalls gets all the calls that were made to DisassociateSubnetCidrBlockRequest.
// Check the length with:
//     len(mockedec2Client.DisassociateSubnetCidrBlockRequestCalls())
func (mock *ec2ClientMock) DisassociateSubnetCidrBlockRequestCalls() []struct {
	In1 *ec2.DisassociateSubnetCidrBlockInput
} {
	var calls []struct {
		In1 *ec2.DisassociateSubnetCidrBlockInput
	}
	lockec2ClientMockDisassociateSubnetCidrBlockRequest.RLock()
	calls = mock.calls.DisassociateSubnetCidrBlockRequest
	lockec2ClientMockDisassociateSubnetCidrBlockRequest.RUnlock()
	return calls
}

// DisassociateSubnetCidrBlockWithContext calls DisassociateSubnetCidrBlockWithContextFunc.
func (mock *ec2ClientMock) DisassociateSubnetCidrBlockWithContext(in1 context.Context, in2 *ec2.DisassociateSubnetCidrBlockInput, in3 ...request.Option) (*ec2.DisassociateSubnetCidrBlockOutput, error) {
	if mock.DisassociateSubnetCidrBlockWithContextFunc == nil {
		panic("ec2ClientMock.DisassociateSubnetCidrBlockWithContextFunc: method is nil but ec2Client.DisassociateSubnetCidrBlockWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DisassociateSubnetCidrBlockInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDisassociateSubnetCidrBlockWithContext.Lock()
	mock.calls.DisassociateSubnetCidrBlockWithContext = append(mock.calls.DisassociateSubnetCidrBlockWithContext, callInfo)
	lockec2ClientMockDisassociateSubnetCidrBlockWithContext.Unlock()
	return mock.DisassociateSubnetCidrBlockWithContextFunc(in1, in2, in3...)
}

// DisassociateSubnetCidrBlockWithContextCalls gets all the calls that were made to DisassociateSubnetCidrBlockWithContext.
// Check the length with:
//     len(mockedec2Client.DisassociateSubnetCidrBlockWithContextCalls())
func (mock *ec2ClientMock) DisassociateSubnetCidrBlockWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DisassociateSubnetCidrBlockInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DisassociateSubnetCidrBlockInput
		In3 []request.Option
	}
	lockec2ClientMockDisassociateSubnetCidrBlockWithContext.RLock()
	calls = mock.calls.DisassociateSubnetCidrBlockWithContext
	lockec2ClientMockDisassociateSubnetCidrBlockWithContext.RUnlock()
	return calls
}

// DisassociateTransitGatewayMulticastDomain calls DisassociateTransitGatewayMulticastDomainFunc.
func (mock *ec2ClientMock) DisassociateTransitGatewayMulticastDomain(in1 *ec2.DisassociateTransitGatewayMulticastDomainInput) (*ec2.DisassociateTransitGatewayMulticastDomainOutput, error) {
	if mock.DisassociateTransitGatewayMulticastDomainFunc == nil {
		panic("ec2ClientMock.DisassociateTransitGatewayMulticastDomainFunc: method is nil but ec2Client.DisassociateTransitGatewayMulticastDomain was just called")
	}
	callInfo := struct {
		In1 *ec2.DisassociateTransitGatewayMulticastDomainInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisassociateTransitGatewayMulticastDomain.Lock()
	mock.calls.DisassociateTransitGatewayMulticastDomain = append(mock.calls.DisassociateTransitGatewayMulticastDomain, callInfo)
	lockec2ClientMockDisassociateTransitGatewayMulticastDomain.Unlock()
	return mock.DisassociateTransitGatewayMulticastDomainFunc(in1)
}

// DisassociateTransitGatewayMulticastDomainCalls gets all the calls that were made to DisassociateTransitGatewayMulticastDomain.
// Check the length with:
//     len(mockedec2Client.DisassociateTransitGatewayMulticastDomainCalls())
func (mock *ec2ClientMock) DisassociateTransitGatewayMulticastDomainCalls() []struct {
	In1 *ec2.DisassociateTransitGatewayMulticastDomainInput
} {
	var calls []struct {
		In1 *ec2.DisassociateTransitGatewayMulticastDomainInput
	}
	lockec2ClientMockDisassociateTransitGatewayMulticastDomain.RLock()
	calls = mock.calls.DisassociateTransitGatewayMulticastDomain
	lockec2ClientMockDisassociateTransitGatewayMulticastDomain.RUnlock()
	return calls
}

// DisassociateTransitGatewayMulticastDomainRequest calls DisassociateTransitGatewayMulticastDomainRequestFunc.
func (mock *ec2ClientMock) DisassociateTransitGatewayMulticastDomainRequest(in1 *ec2.DisassociateTransitGatewayMulticastDomainInput) (*request.Request, *ec2.DisassociateTransitGatewayMulticastDomainOutput) {
	if mock.DisassociateTransitGatewayMulticastDomainRequestFunc == nil {
		panic("ec2ClientMock.DisassociateTransitGatewayMulticastDomainRequestFunc: method is nil but ec2Client.DisassociateTransitGatewayMulticastDomainRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DisassociateTransitGatewayMulticastDomainInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisassociateTransitGatewayMulticastDomainRequest.Lock()
	mock.calls.DisassociateTransitGatewayMulticastDomainRequest = append(mock.calls.DisassociateTransitGatewayMulticastDomainRequest, callInfo)
	lockec2ClientMockDisassociateTransitGatewayMulticastDomainRequest.Unlock()
	return mock.DisassociateTransitGatewayMulticastDomainRequestFunc(in1)
}

// DisassociateTransitGatewayMulticastDomainRequestCalls gets all the calls that were made to DisassociateTransitGatewayMulticastDomainRequest.
// Check the length with:
//     len(mockedec2Client.DisassociateTransitGatewayMulticastDomainRequestCalls())
func (mock *ec2ClientMock) DisassociateTransitGatewayMulticastDomainRequestCalls() []struct {
	In1 *ec2.DisassociateTransitGatewayMulticastDomainInput
} {
	var calls []struct {
		In1 *ec2.DisassociateTransitGatewayMulticastDomainInput
	}
	lockec2ClientMockDisassociateTransitGatewayMulticastDomainRequest.RLock()
	calls = mock.calls.DisassociateTransitGatewayMulticastDomainRequest
	lockec2ClientMockDisassociateTransitGatewayMulticastDomainRequest.RUnlock()
	return calls
}

// DisassociateTransitGatewayMulticastDomainWithContext calls DisassociateTransitGatewayMulticastDomainWithContextFunc.
func (mock *ec2ClientMock) DisassociateTransitGatewayMulticastDomainWithContext(in1 context.Context, in2 *ec2.DisassociateTransitGatewayMulticastDomainInput, in3 ...request.Option) (*ec2.DisassociateTransitGatewayMulticastDomainOutput, error) {
	if mock.DisassociateTransitGatewayMulticastDomainWithContextFunc == nil {
		panic("ec2ClientMock.DisassociateTransitGatewayMulticastDomainWithContextFunc: method is nil but ec2Client.DisassociateTransitGatewayMulticastDomainWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DisassociateTransitGatewayMulticastDomainInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDisassociateTransitGatewayMulticastDomainWithContext.Lock()
	mock.calls.DisassociateTransitGatewayMulticastDomainWithContext = append(mock.calls.DisassociateTransitGatewayMulticastDomainWithContext, callInfo)
	lockec2ClientMockDisassociateTransitGatewayMulticastDomainWithContext.Unlock()
	return mock.DisassociateTransitGatewayMulticastDomainWithContextFunc(in1, in2, in3...)
}

// DisassociateTransitGatewayMulticastDomainWithContextCalls gets all the calls that were made to DisassociateTransitGatewayMulticastDomainWithContext.
// Check the length with:
//     len(mockedec2Client.DisassociateTransitGatewayMulticastDomainWithContextCalls())
func (mock *ec2ClientMock) DisassociateTransitGatewayMulticastDomainWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DisassociateTransitGatewayMulticastDomainInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DisassociateTransitGatewayMulticastDomainInput
		In3 []request.Option
	}
	lockec2ClientMockDisassociateTransitGatewayMulticastDomainWithContext.RLock()
	calls = mock.calls.DisassociateTransitGatewayMulticastDomainWithContext
	lockec2ClientMockDisassociateTransitGatewayMulticastDomainWithContext.RUnlock()
	return calls
}

// DisassociateTransitGatewayRouteTable calls DisassociateTransitGatewayRouteTableFunc.
func (mock *ec2ClientMock) DisassociateTransitGatewayRouteTable(in1 *ec2.DisassociateTransitGatewayRouteTableInput) (*ec2.DisassociateTransitGatewayRouteTableOutput, error) {
	if mock.DisassociateTransitGatewayRouteTableFunc == nil {
		panic("ec2ClientMock.DisassociateTransitGatewayRouteTableFunc: method is nil but ec2Client.DisassociateTransitGatewayRouteTable was just called")
	}
	callInfo := struct {
		In1 *ec2.DisassociateTransitGatewayRouteTableInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisassociateTransitGatewayRouteTable.Lock()
	mock.calls.DisassociateTransitGatewayRouteTable = append(mock.calls.DisassociateTransitGatewayRouteTable, callInfo)
	lockec2ClientMockDisassociateTransitGatewayRouteTable.Unlock()
	return mock.DisassociateTransitGatewayRouteTableFunc(in1)
}

// DisassociateTransitGatewayRouteTableCalls gets all the calls that were made to DisassociateTransitGatewayRouteTable.
// Check the length with:
//     len(mockedec2Client.DisassociateTransitGatewayRouteTableCalls())
func (mock *ec2ClientMock) DisassociateTransitGatewayRouteTableCalls() []struct {
	In1 *ec2.DisassociateTransitGatewayRouteTableInput
} {
	var calls []struct {
		In1 *ec2.DisassociateTransitGatewayRouteTableInput
	}
	lockec2ClientMockDisassociateTransitGatewayRouteTable.RLock()
	calls = mock.calls.DisassociateTransitGatewayRouteTable
	lockec2ClientMockDisassociateTransitGatewayRouteTable.RUnlock()
	return calls
}

// DisassociateTransitGatewayRouteTableRequest calls DisassociateTransitGatewayRouteTableRequestFunc.
func (mock *ec2ClientMock) DisassociateTransitGatewayRouteTableRequest(in1 *ec2.DisassociateTransitGatewayRouteTableInput) (*request.Request, *ec2.DisassociateTransitGatewayRouteTableOutput) {
	if mock.DisassociateTransitGatewayRouteTableRequestFunc == nil {
		panic("ec2ClientMock.DisassociateTransitGatewayRouteTableRequestFunc: method is nil but ec2Client.DisassociateTransitGatewayRouteTableRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DisassociateTransitGatewayRouteTableInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisassociateTransitGatewayRouteTableRequest.Lock()
	mock.calls.DisassociateTransitGatewayRouteTableRequest = append(mock.calls.DisassociateTransitGatewayRouteTableRequest, callInfo)
	lockec2ClientMockDisassociateTransitGatewayRouteTableRequest.Unlock()
	return mock.DisassociateTransitGatewayRouteTableRequestFunc(in1)
}

// DisassociateTransitGatewayRouteTableRequestCalls gets all the calls that were made to DisassociateTransitGatewayRouteTableRequest.
// Check the length with:
//     len(mockedec2Client.DisassociateTransitGatewayRouteTableRequestCalls())
func (mock *ec2ClientMock) DisassociateTransitGatewayRouteTableRequestCalls() []struct {
	In1 *ec2.DisassociateTransitGatewayRouteTableInput
} {
	var calls []struct {
		In1 *ec2.DisassociateTransitGatewayRouteTableInput
	}
	lockec2ClientMockDisassociateTransitGatewayRouteTableRequest.RLock()
	calls = mock.calls.DisassociateTransitGatewayRouteTableRequest
	lockec2ClientMockDisassociateTransitGatewayRouteTableRequest.RUnlock()
	return calls
}

// DisassociateTransitGatewayRouteTableWithContext calls DisassociateTransitGatewayRouteTableWithContextFunc.
func (mock *ec2ClientMock) DisassociateTransitGatewayRouteTableWithContext(in1 context.Context, in2 *ec2.DisassociateTransitGatewayRouteTableInput, in3 ...request.Option) (*ec2.DisassociateTransitGatewayRouteTableOutput, error) {
	if mock.DisassociateTransitGatewayRouteTableWithContextFunc == nil {
		panic("ec2ClientMock.DisassociateTransitGatewayRouteTableWithContextFunc: method is nil but ec2Client.DisassociateTransitGatewayRouteTableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DisassociateTransitGatewayRouteTableInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDisassociateTransitGatewayRouteTableWithContext.Lock()
	mock.calls.DisassociateTransitGatewayRouteTableWithContext = append(mock.calls.DisassociateTransitGatewayRouteTableWithContext, callInfo)
	lockec2ClientMockDisassociateTransitGatewayRouteTableWithContext.Unlock()
	return mock.DisassociateTransitGatewayRouteTableWithContextFunc(in1, in2, in3...)
}

// DisassociateTransitGatewayRouteTableWithContextCalls gets all the calls that were made to DisassociateTransitGatewayRouteTableWithContext.
// Check the length with:
//     len(mockedec2Client.DisassociateTransitGatewayRouteTableWithContextCalls())
func (mock *ec2ClientMock) DisassociateTransitGatewayRouteTableWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DisassociateTransitGatewayRouteTableInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DisassociateTransitGatewayRouteTableInput
		In3 []request.Option
	}
	lockec2ClientMockDisassociateTransitGatewayRouteTableWithContext.RLock()
	calls = mock.calls.DisassociateTransitGatewayRouteTableWithContext
	lockec2ClientMockDisassociateTransitGatewayRouteTableWithContext.RUnlock()
	return calls
}

// DisassociateVpcCidrBlock calls DisassociateVpcCidrBlockFunc.
func (mock *ec2ClientMock) DisassociateVpcCidrBlock(in1 *ec2.DisassociateVpcCidrBlockInput) (*ec2.DisassociateVpcCidrBlockOutput, error) {
	if mock.DisassociateVpcCidrBlockFunc == nil {
		panic("ec2ClientMock.DisassociateVpcCidrBlockFunc: method is nil but ec2Client.DisassociateVpcCidrBlock was just called")
	}
	callInfo := struct {
		In1 *ec2.DisassociateVpcCidrBlockInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisassociateVpcCidrBlock.Lock()
	mock.calls.DisassociateVpcCidrBlock = append(mock.calls.DisassociateVpcCidrBlock, callInfo)
	lockec2ClientMockDisassociateVpcCidrBlock.Unlock()
	return mock.DisassociateVpcCidrBlockFunc(in1)
}

// DisassociateVpcCidrBlockCalls gets all the calls that were made to DisassociateVpcCidrBlock.
// Check the length with:
//     len(mockedec2Client.DisassociateVpcCidrBlockCalls())
func (mock *ec2ClientMock) DisassociateVpcCidrBlockCalls() []struct {
	In1 *ec2.DisassociateVpcCidrBlockInput
} {
	var calls []struct {
		In1 *ec2.DisassociateVpcCidrBlockInput
	}
	lockec2ClientMockDisassociateVpcCidrBlock.RLock()
	calls = mock.calls.DisassociateVpcCidrBlock
	lockec2ClientMockDisassociateVpcCidrBlock.RUnlock()
	return calls
}

// DisassociateVpcCidrBlockRequest calls DisassociateVpcCidrBlockRequestFunc.
func (mock *ec2ClientMock) DisassociateVpcCidrBlockRequest(in1 *ec2.DisassociateVpcCidrBlockInput) (*request.Request, *ec2.DisassociateVpcCidrBlockOutput) {
	if mock.DisassociateVpcCidrBlockRequestFunc == nil {
		panic("ec2ClientMock.DisassociateVpcCidrBlockRequestFunc: method is nil but ec2Client.DisassociateVpcCidrBlockRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.DisassociateVpcCidrBlockInput
	}{
		In1: in1,
	}
	lockec2ClientMockDisassociateVpcCidrBlockRequest.Lock()
	mock.calls.DisassociateVpcCidrBlockRequest = append(mock.calls.DisassociateVpcCidrBlockRequest, callInfo)
	lockec2ClientMockDisassociateVpcCidrBlockRequest.Unlock()
	return mock.DisassociateVpcCidrBlockRequestFunc(in1)
}

// DisassociateVpcCidrBlockRequestCalls gets all the calls that were made to DisassociateVpcCidrBlockRequest.
// Check the length with:
//     len(mockedec2Client.DisassociateVpcCidrBlockRequestCalls())
func (mock *ec2ClientMock) DisassociateVpcCidrBlockRequestCalls() []struct {
	In1 *ec2.DisassociateVpcCidrBlockInput
} {
	var calls []struct {
		In1 *ec2.DisassociateVpcCidrBlockInput
	}
	lockec2ClientMockDisassociateVpcCidrBlockRequest.RLock()
	calls = mock.calls.DisassociateVpcCidrBlockRequest
	lockec2ClientMockDisassociateVpcCidrBlockRequest.RUnlock()
	return calls
}

// DisassociateVpcCidrBlockWithContext calls DisassociateVpcCidrBlockWithContextFunc.
func (mock *ec2ClientMock) DisassociateVpcCidrBlockWithContext(in1 context.Context, in2 *ec2.DisassociateVpcCidrBlockInput, in3 ...request.Option) (*ec2.DisassociateVpcCidrBlockOutput, error) {
	if mock.DisassociateVpcCidrBlockWithContextFunc == nil {
		panic("ec2ClientMock.DisassociateVpcCidrBlockWithContextFunc: method is nil but ec2Client.DisassociateVpcCidrBlockWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DisassociateVpcCidrBlockInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockDisassociateVpcCidrBlockWithContext.Lock()
	mock.calls.DisassociateVpcCidrBlockWithContext = append(mock.calls.DisassociateVpcCidrBlockWithContext, callInfo)
	lockec2ClientMockDisassociateVpcCidrBlockWithContext.Unlock()
	return mock.DisassociateVpcCidrBlockWithContextFunc(in1, in2, in3...)
}

// DisassociateVpcCidrBlockWithContextCalls gets all the calls that were made to DisassociateVpcCidrBlockWithContext.
// Check the length with:
//     len(mockedec2Client.DisassociateVpcCidrBlockWithContextCalls())
func (mock *ec2ClientMock) DisassociateVpcCidrBlockWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DisassociateVpcCidrBlockInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DisassociateVpcCidrBlockInput
		In3 []request.Option
	}
	lockec2ClientMockDisassociateVpcCidrBlockWithContext.RLock()
	calls = mock.calls.DisassociateVpcCidrBlockWithContext
	lockec2ClientMockDisassociateVpcCidrBlockWithContext.RUnlock()
	return calls
}

// EnableEbsEncryptionByDefault calls EnableEbsEncryptionByDefaultFunc.
func (mock *ec2ClientMock) EnableEbsEncryptionByDefault(in1 *ec2.EnableEbsEncryptionByDefaultInput) (*ec2.EnableEbsEncryptionByDefaultOutput, error) {
	if mock.EnableEbsEncryptionByDefaultFunc == nil {
		panic("ec2ClientMock.EnableEbsEncryptionByDefaultFunc: method is nil but ec2Client.EnableEbsEncryptionByDefault was just called")
	}
	callInfo := struct {
		In1 *ec2.EnableEbsEncryptionByDefaultInput
	}{
		In1: in1,
	}
	lockec2ClientMockEnableEbsEncryptionByDefault.Lock()
	mock.calls.EnableEbsEncryptionByDefault = append(mock.calls.EnableEbsEncryptionByDefault, callInfo)
	lockec2ClientMockEnableEbsEncryptionByDefault.Unlock()
	return mock.EnableEbsEncryptionByDefaultFunc(in1)
}

// EnableEbsEncryptionByDefaultCalls gets all the calls that were made to EnableEbsEncryptionByDefault.
// Check the length with:
//     len(mockedec2Client.EnableEbsEncryptionByDefaultCalls())
func (mock *ec2ClientMock) EnableEbsEncryptionByDefaultCalls() []struct {
	In1 *ec2.EnableEbsEncryptionByDefaultInput
} {
	var calls []struct {
		In1 *ec2.EnableEbsEncryptionByDefaultInput
	}
	lockec2ClientMockEnableEbsEncryptionByDefault.RLock()
	calls = mock.calls.EnableEbsEncryptionByDefault
	lockec2ClientMockEnableEbsEncryptionByDefault.RUnlock()
	return calls
}

// EnableEbsEncryptionByDefaultRequest calls EnableEbsEncryptionByDefaultRequestFunc.
func (mock *ec2ClientMock) EnableEbsEncryptionByDefaultRequest(in1 *ec2.EnableEbsEncryptionByDefaultInput) (*request.Request, *ec2.EnableEbsEncryptionByDefaultOutput) {
	if mock.EnableEbsEncryptionByDefaultRequestFunc == nil {
		panic("ec2ClientMock.EnableEbsEncryptionByDefaultRequestFunc: method is nil but ec2Client.EnableEbsEncryptionByDefaultRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.EnableEbsEncryptionByDefaultInput
	}{
		In1: in1,
	}
	lockec2ClientMockEnableEbsEncryptionByDefaultRequest.Lock()
	mock.calls.EnableEbsEncryptionByDefaultRequest = append(mock.calls.EnableEbsEncryptionByDefaultRequest, callInfo)
	lockec2ClientMockEnableEbsEncryptionByDefaultRequest.Unlock()
	return mock.EnableEbsEncryptionByDefaultRequestFunc(in1)
}

// EnableEbsEncryptionByDefaultRequestCalls gets all the calls that were made to EnableEbsEncryptionByDefaultRequest.
// Check the length with:
//     len(mockedec2Client.EnableEbsEncryptionByDefaultRequestCalls())
func (mock *ec2ClientMock) EnableEbsEncryptionByDefaultRequestCalls() []struct {
	In1 *ec2.EnableEbsEncryptionByDefaultInput
} {
	var calls []struct {
		In1 *ec2.EnableEbsEncryptionByDefaultInput
	}
	lockec2ClientMockEnableEbsEncryptionByDefaultRequest.RLock()
	calls = mock.calls.EnableEbsEncryptionByDefaultRequest
	lockec2ClientMockEnableEbsEncryptionByDefaultRequest.RUnlock()
	return calls
}

// EnableEbsEncryptionByDefaultWithContext calls EnableEbsEncryptionByDefaultWithContextFunc.
func (mock *ec2ClientMock) EnableEbsEncryptionByDefaultWithContext(in1 context.Context, in2 *ec2.EnableEbsEncryptionByDefaultInput, in3 ...request.Option) (*ec2.EnableEbsEncryptionByDefaultOutput, error) {
	if mock.EnableEbsEncryptionByDefaultWithContextFunc == nil {
		panic("ec2ClientMock.EnableEbsEncryptionByDefaultWithContextFunc: method is nil but ec2Client.EnableEbsEncryptionByDefaultWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.EnableEbsEncryptionByDefaultInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockEnableEbsEncryptionByDefaultWithContext.Lock()
	mock.calls.EnableEbsEncryptionByDefaultWithContext = append(mock.calls.EnableEbsEncryptionByDefaultWithContext, callInfo)
	lockec2ClientMockEnableEbsEncryptionByDefaultWithContext.Unlock()
	return mock.EnableEbsEncryptionByDefaultWithContextFunc(in1, in2, in3...)
}

// EnableEbsEncryptionByDefaultWithContextCalls gets all the calls that were made to EnableEbsEncryptionByDefaultWithContext.
// Check the length with:
//     len(mockedec2Client.EnableEbsEncryptionByDefaultWithContextCalls())
func (mock *ec2ClientMock) EnableEbsEncryptionByDefaultWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.EnableEbsEncryptionByDefaultInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.EnableEbsEncryptionByDefaultInput
		In3 []request.Option
	}
	lockec2ClientMockEnableEbsEncryptionByDefaultWithContext.RLock()
	calls = mock.calls.EnableEbsEncryptionByDefaultWithContext
	lockec2ClientMockEnableEbsEncryptionByDefaultWithContext.RUnlock()
	return calls
}

// EnableFastSnapshotRestores calls EnableFastSnapshotRestoresFunc.
func (mock *ec2ClientMock) EnableFastSnapshotRestores(in1 *ec2.EnableFastSnapshotRestoresInput) (*ec2.EnableFastSnapshotRestoresOutput, error) {
	if mock.EnableFastSnapshotRestoresFunc == nil {
		panic("ec2ClientMock.EnableFastSnapshotRestoresFunc: method is nil but ec2Client.EnableFastSnapshotRestores was just called")
	}
	callInfo := struct {
		In1 *ec2.EnableFastSnapshotRestoresInput
	}{
		In1: in1,
	}
	lockec2ClientMockEnableFastSnapshotRestores.Lock()
	mock.calls.EnableFastSnapshotRestores = append(mock.calls.EnableFastSnapshotRestores, callInfo)
	lockec2ClientMockEnableFastSnapshotRestores.Unlock()
	return mock.EnableFastSnapshotRestoresFunc(in1)
}

// EnableFastSnapshotRestoresCalls gets all the calls that were made to EnableFastSnapshotRestores.
// Check the length with:
//     len(mockedec2Client.EnableFastSnapshotRestoresCalls())
func (mock *ec2ClientMock) EnableFastSnapshotRestoresCalls() []struct {
	In1 *ec2.EnableFastSnapshotRestoresInput
} {
	var calls []struct {
		In1 *ec2.EnableFastSnapshotRestoresInput
	}
	lockec2ClientMockEnableFastSnapshotRestores.RLock()
	calls = mock.calls.EnableFastSnapshotRestores
	lockec2ClientMockEnableFastSnapshotRestores.RUnlock()
	return calls
}

// EnableFastSnapshotRestoresRequest calls EnableFastSnapshotRestoresRequestFunc.
func (mock *ec2ClientMock) EnableFastSnapshotRestoresRequest(in1 *ec2.EnableFastSnapshotRestoresInput) (*request.Request, *ec2.EnableFastSnapshotRestoresOutput) {
	if mock.EnableFastSnapshotRestoresRequestFunc == nil {
		panic("ec2ClientMock.EnableFastSnapshotRestoresRequestFunc: method is nil but ec2Client.EnableFastSnapshotRestoresRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.EnableFastSnapshotRestoresInput
	}{
		In1: in1,
	}
	lockec2ClientMockEnableFastSnapshotRestoresRequest.Lock()
	mock.calls.EnableFastSnapshotRestoresRequest = append(mock.calls.EnableFastSnapshotRestoresRequest, callInfo)
	lockec2ClientMockEnableFastSnapshotRestoresRequest.Unlock()
	return mock.EnableFastSnapshotRestoresRequestFunc(in1)
}

// EnableFastSnapshotRestoresRequestCalls gets all the calls that were made to EnableFastSnapshotRestoresRequest.
// Check the length with:
//     len(mockedec2Client.EnableFastSnapshotRestoresRequestCalls())
func (mock *ec2ClientMock) EnableFastSnapshotRestoresRequestCalls() []struct {
	In1 *ec2.EnableFastSnapshotRestoresInput
} {
	var calls []struct {
		In1 *ec2.EnableFastSnapshotRestoresInput
	}
	lockec2ClientMockEnableFastSnapshotRestoresRequest.RLock()
	calls = mock.calls.EnableFastSnapshotRestoresRequest
	lockec2ClientMockEnableFastSnapshotRestoresRequest.RUnlock()
	return calls
}

// EnableFastSnapshotRestoresWithContext calls EnableFastSnapshotRestoresWithContextFunc.
func (mock *ec2ClientMock) EnableFastSnapshotRestoresWithContext(in1 context.Context, in2 *ec2.EnableFastSnapshotRestoresInput, in3 ...request.Option) (*ec2.EnableFastSnapshotRestoresOutput, error) {
	if mock.EnableFastSnapshotRestoresWithContextFunc == nil {
		panic("ec2ClientMock.EnableFastSnapshotRestoresWithContextFunc: method is nil but ec2Client.EnableFastSnapshotRestoresWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.EnableFastSnapshotRestoresInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockEnableFastSnapshotRestoresWithContext.Lock()
	mock.calls.EnableFastSnapshotRestoresWithContext = append(mock.calls.EnableFastSnapshotRestoresWithContext, callInfo)
	lockec2ClientMockEnableFastSnapshotRestoresWithContext.Unlock()
	return mock.EnableFastSnapshotRestoresWithContextFunc(in1, in2, in3...)
}

// EnableFastSnapshotRestoresWithContextCalls gets all the calls that were made to EnableFastSnapshotRestoresWithContext.
// Check the length with:
//     len(mockedec2Client.EnableFastSnapshotRestoresWithContextCalls())
func (mock *ec2ClientMock) EnableFastSnapshotRestoresWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.EnableFastSnapshotRestoresInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.EnableFastSnapshotRestoresInput
		In3 []request.Option
	}
	lockec2ClientMockEnableFastSnapshotRestoresWithContext.RLock()
	calls = mock.calls.EnableFastSnapshotRestoresWithContext
	lockec2ClientMockEnableFastSnapshotRestoresWithContext.RUnlock()
	return calls
}

// EnableTransitGatewayRouteTablePropagation calls EnableTransitGatewayRouteTablePropagationFunc.
func (mock *ec2ClientMock) EnableTransitGatewayRouteTablePropagation(in1 *ec2.EnableTransitGatewayRouteTablePropagationInput) (*ec2.EnableTransitGatewayRouteTablePropagationOutput, error) {
	if mock.EnableTransitGatewayRouteTablePropagationFunc == nil {
		panic("ec2ClientMock.EnableTransitGatewayRouteTablePropagationFunc: method is nil but ec2Client.EnableTransitGatewayRouteTablePropagation was just called")
	}
	callInfo := struct {
		In1 *ec2.EnableTransitGatewayRouteTablePropagationInput
	}{
		In1: in1,
	}
	lockec2ClientMockEnableTransitGatewayRouteTablePropagation.Lock()
	mock.calls.EnableTransitGatewayRouteTablePropagation = append(mock.calls.EnableTransitGatewayRouteTablePropagation, callInfo)
	lockec2ClientMockEnableTransitGatewayRouteTablePropagation.Unlock()
	return mock.EnableTransitGatewayRouteTablePropagationFunc(in1)
}

// EnableTransitGatewayRouteTablePropagationCalls gets all the calls that were made to EnableTransitGatewayRouteTablePropagation.
// Check the length with:
//     len(mockedec2Client.EnableTransitGatewayRouteTablePropagationCalls())
func (mock *ec2ClientMock) EnableTransitGatewayRouteTablePropagationCalls() []struct {
	In1 *ec2.EnableTransitGatewayRouteTablePropagationInput
} {
	var calls []struct {
		In1 *ec2.EnableTransitGatewayRouteTablePropagationInput
	}
	lockec2ClientMockEnableTransitGatewayRouteTablePropagation.RLock()
	calls = mock.calls.EnableTransitGatewayRouteTablePropagation
	lockec2ClientMockEnableTransitGatewayRouteTablePropagation.RUnlock()
	return calls
}

// EnableTransitGatewayRouteTablePropagationRequest calls EnableTransitGatewayRouteTablePropagationRequestFunc.
func (mock *ec2ClientMock) EnableTransitGatewayRouteTablePropagationRequest(in1 *ec2.EnableTransitGatewayRouteTablePropagationInput) (*request.Request, *ec2.EnableTransitGatewayRouteTablePropagationOutput) {
	if mock.EnableTransitGatewayRouteTablePropagationRequestFunc == nil {
		panic("ec2ClientMock.EnableTransitGatewayRouteTablePropagationRequestFunc: method is nil but ec2Client.EnableTransitGatewayRouteTablePropagationRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.EnableTransitGatewayRouteTablePropagationInput
	}{
		In1: in1,
	}
	lockec2ClientMockEnableTransitGatewayRouteTablePropagationRequest.Lock()
	mock.calls.EnableTransitGatewayRouteTablePropagationRequest = append(mock.calls.EnableTransitGatewayRouteTablePropagationRequest, callInfo)
	lockec2ClientMockEnableTransitGatewayRouteTablePropagationRequest.Unlock()
	return mock.EnableTransitGatewayRouteTablePropagationRequestFunc(in1)
}

// EnableTransitGatewayRouteTablePropagationRequestCalls gets all the calls that were made to EnableTransitGatewayRouteTablePropagationRequest.
// Check the length with:
//     len(mockedec2Client.EnableTransitGatewayRouteTablePropagationRequestCalls())
func (mock *ec2ClientMock) EnableTransitGatewayRouteTablePropagationRequestCalls() []struct {
	In1 *ec2.EnableTransitGatewayRouteTablePropagationInput
} {
	var calls []struct {
		In1 *ec2.EnableTransitGatewayRouteTablePropagationInput
	}
	lockec2ClientMockEnableTransitGatewayRouteTablePropagationRequest.RLock()
	calls = mock.calls.EnableTransitGatewayRouteTablePropagationRequest
	lockec2ClientMockEnableTransitGatewayRouteTablePropagationRequest.RUnlock()
	return calls
}

// EnableTransitGatewayRouteTablePropagationWithContext calls EnableTransitGatewayRouteTablePropagationWithContextFunc.
func (mock *ec2ClientMock) EnableTransitGatewayRouteTablePropagationWithContext(in1 context.Context, in2 *ec2.EnableTransitGatewayRouteTablePropagationInput, in3 ...request.Option) (*ec2.EnableTransitGatewayRouteTablePropagationOutput, error) {
	if mock.EnableTransitGatewayRouteTablePropagationWithContextFunc == nil {
		panic("ec2ClientMock.EnableTransitGatewayRouteTablePropagationWithContextFunc: method is nil but ec2Client.EnableTransitGatewayRouteTablePropagationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.EnableTransitGatewayRouteTablePropagationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockEnableTransitGatewayRouteTablePropagationWithContext.Lock()
	mock.calls.EnableTransitGatewayRouteTablePropagationWithContext = append(mock.calls.EnableTransitGatewayRouteTablePropagationWithContext, callInfo)
	lockec2ClientMockEnableTransitGatewayRouteTablePropagationWithContext.Unlock()
	return mock.EnableTransitGatewayRouteTablePropagationWithContextFunc(in1, in2, in3...)
}

// EnableTransitGatewayRouteTablePropagationWithContextCalls gets all the calls that were made to EnableTransitGatewayRouteTablePropagationWithContext.
// Check the length with:
//     len(mockedec2Client.EnableTransitGatewayRouteTablePropagationWithContextCalls())
func (mock *ec2ClientMock) EnableTransitGatewayRouteTablePropagationWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.EnableTransitGatewayRouteTablePropagationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.EnableTransitGatewayRouteTablePropagationInput
		In3 []request.Option
	}
	lockec2ClientMockEnableTransitGatewayRouteTablePropagationWithContext.RLock()
	calls = mock.calls.EnableTransitGatewayRouteTablePropagationWithContext
	lockec2ClientMockEnableTransitGatewayRouteTablePropagationWithContext.RUnlock()
	return calls
}

// EnableVgwRoutePropagation calls EnableVgwRoutePropagationFunc.
func (mock *ec2ClientMock) EnableVgwRoutePropagation(in1 *ec2.EnableVgwRoutePropagationInput) (*ec2.EnableVgwRoutePropagationOutput, error) {
	if mock.EnableVgwRoutePropagationFunc == nil {
		panic("ec2ClientMock.EnableVgwRoutePropagationFunc: method is nil but ec2Client.EnableVgwRoutePropagation was just called")
	}
	callInfo := struct {
		In1 *ec2.EnableVgwRoutePropagationInput
	}{
		In1: in1,
	}
	lockec2ClientMockEnableVgwRoutePropagation.Lock()
	mock.calls.EnableVgwRoutePropagation = append(mock.calls.EnableVgwRoutePropagation, callInfo)
	lockec2ClientMockEnableVgwRoutePropagation.Unlock()
	return mock.EnableVgwRoutePropagationFunc(in1)
}

// EnableVgwRoutePropagationCalls gets all the calls that were made to EnableVgwRoutePropagation.
// Check the length with:
//     len(mockedec2Client.EnableVgwRoutePropagationCalls())
func (mock *ec2ClientMock) EnableVgwRoutePropagationCalls() []struct {
	In1 *ec2.EnableVgwRoutePropagationInput
} {
	var calls []struct {
		In1 *ec2.EnableVgwRoutePropagationInput
	}
	lockec2ClientMockEnableVgwRoutePropagation.RLock()
	calls = mock.calls.EnableVgwRoutePropagation
	lockec2ClientMockEnableVgwRoutePropagation.RUnlock()
	return calls
}

// EnableVgwRoutePropagationRequest calls EnableVgwRoutePropagationRequestFunc.
func (mock *ec2ClientMock) EnableVgwRoutePropagationRequest(in1 *ec2.EnableVgwRoutePropagationInput) (*request.Request, *ec2.EnableVgwRoutePropagationOutput) {
	if mock.EnableVgwRoutePropagationRequestFunc == nil {
		panic("ec2ClientMock.EnableVgwRoutePropagationRequestFunc: method is nil but ec2Client.EnableVgwRoutePropagationRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.EnableVgwRoutePropagationInput
	}{
		In1: in1,
	}
	lockec2ClientMockEnableVgwRoutePropagationRequest.Lock()
	mock.calls.EnableVgwRoutePropagationRequest = append(mock.calls.EnableVgwRoutePropagationRequest, callInfo)
	lockec2ClientMockEnableVgwRoutePropagationRequest.Unlock()
	return mock.EnableVgwRoutePropagationRequestFunc(in1)
}

// EnableVgwRoutePropagationRequestCalls gets all the calls that were made to EnableVgwRoutePropagationRequest.
// Check the length with:
//     len(mockedec2Client.EnableVgwRoutePropagationRequestCalls())
func (mock *ec2ClientMock) EnableVgwRoutePropagationRequestCalls() []struct {
	In1 *ec2.EnableVgwRoutePropagationInput
} {
	var calls []struct {
		In1 *ec2.EnableVgwRoutePropagationInput
	}
	lockec2ClientMockEnableVgwRoutePropagationRequest.RLock()
	calls = mock.calls.EnableVgwRoutePropagationRequest
	lockec2ClientMockEnableVgwRoutePropagationRequest.RUnlock()
	return calls
}

// EnableVgwRoutePropagationWithContext calls EnableVgwRoutePropagationWithContextFunc.
func (mock *ec2ClientMock) EnableVgwRoutePropagationWithContext(in1 context.Context, in2 *ec2.EnableVgwRoutePropagationInput, in3 ...request.Option) (*ec2.EnableVgwRoutePropagationOutput, error) {
	if mock.EnableVgwRoutePropagationWithContextFunc == nil {
		panic("ec2ClientMock.EnableVgwRoutePropagationWithContextFunc: method is nil but ec2Client.EnableVgwRoutePropagationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.EnableVgwRoutePropagationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockEnableVgwRoutePropagationWithContext.Lock()
	mock.calls.EnableVgwRoutePropagationWithContext = append(mock.calls.EnableVgwRoutePropagationWithContext, callInfo)
	lockec2ClientMockEnableVgwRoutePropagationWithContext.Unlock()
	return mock.EnableVgwRoutePropagationWithContextFunc(in1, in2, in3...)
}

// EnableVgwRoutePropagationWithContextCalls gets all the calls that were made to EnableVgwRoutePropagationWithContext.
// Check the length with:
//     len(mockedec2Client.EnableVgwRoutePropagationWithContextCalls())
func (mock *ec2ClientMock) EnableVgwRoutePropagationWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.EnableVgwRoutePropagationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.EnableVgwRoutePropagationInput
		In3 []request.Option
	}
	lockec2ClientMockEnableVgwRoutePropagationWithContext.RLock()
	calls = mock.calls.EnableVgwRoutePropagationWithContext
	lockec2ClientMockEnableVgwRoutePropagationWithContext.RUnlock()
	return calls
}

// EnableVolumeIO calls EnableVolumeIOFunc.
func (mock *ec2ClientMock) EnableVolumeIO(in1 *ec2.EnableVolumeIOInput) (*ec2.EnableVolumeIOOutput, error) {
	if mock.EnableVolumeIOFunc == nil {
		panic("ec2ClientMock.EnableVolumeIOFunc: method is nil but ec2Client.EnableVolumeIO was just called")
	}
	callInfo := struct {
		In1 *ec2.EnableVolumeIOInput
	}{
		In1: in1,
	}
	lockec2ClientMockEnableVolumeIO.Lock()
	mock.calls.EnableVolumeIO = append(mock.calls.EnableVolumeIO, callInfo)
	lockec2ClientMockEnableVolumeIO.Unlock()
	return mock.EnableVolumeIOFunc(in1)
}

// EnableVolumeIOCalls gets all the calls that were made to EnableVolumeIO.
// Check the length with:
//     len(mockedec2Client.EnableVolumeIOCalls())
func (mock *ec2ClientMock) EnableVolumeIOCalls() []struct {
	In1 *ec2.EnableVolumeIOInput
} {
	var calls []struct {
		In1 *ec2.EnableVolumeIOInput
	}
	lockec2ClientMockEnableVolumeIO.RLock()
	calls = mock.calls.EnableVolumeIO
	lockec2ClientMockEnableVolumeIO.RUnlock()
	return calls
}

// EnableVolumeIORequest calls EnableVolumeIORequestFunc.
func (mock *ec2ClientMock) EnableVolumeIORequest(in1 *ec2.EnableVolumeIOInput) (*request.Request, *ec2.EnableVolumeIOOutput) {
	if mock.EnableVolumeIORequestFunc == nil {
		panic("ec2ClientMock.EnableVolumeIORequestFunc: method is nil but ec2Client.EnableVolumeIORequest was just called")
	}
	callInfo := struct {
		In1 *ec2.EnableVolumeIOInput
	}{
		In1: in1,
	}
	lockec2ClientMockEnableVolumeIORequest.Lock()
	mock.calls.EnableVolumeIORequest = append(mock.calls.EnableVolumeIORequest, callInfo)
	lockec2ClientMockEnableVolumeIORequest.Unlock()
	return mock.EnableVolumeIORequestFunc(in1)
}

// EnableVolumeIORequestCalls gets all the calls that were made to EnableVolumeIORequest.
// Check the length with:
//     len(mockedec2Client.EnableVolumeIORequestCalls())
func (mock *ec2ClientMock) EnableVolumeIORequestCalls() []struct {
	In1 *ec2.EnableVolumeIOInput
} {
	var calls []struct {
		In1 *ec2.EnableVolumeIOInput
	}
	lockec2ClientMockEnableVolumeIORequest.RLock()
	calls = mock.calls.EnableVolumeIORequest
	lockec2ClientMockEnableVolumeIORequest.RUnlock()
	return calls
}

// EnableVolumeIOWithContext calls EnableVolumeIOWithContextFunc.
func (mock *ec2ClientMock) EnableVolumeIOWithContext(in1 context.Context, in2 *ec2.EnableVolumeIOInput, in3 ...request.Option) (*ec2.EnableVolumeIOOutput, error) {
	if mock.EnableVolumeIOWithContextFunc == nil {
		panic("ec2ClientMock.EnableVolumeIOWithContextFunc: method is nil but ec2Client.EnableVolumeIOWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.EnableVolumeIOInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockEnableVolumeIOWithContext.Lock()
	mock.calls.EnableVolumeIOWithContext = append(mock.calls.EnableVolumeIOWithContext, callInfo)
	lockec2ClientMockEnableVolumeIOWithContext.Unlock()
	return mock.EnableVolumeIOWithContextFunc(in1, in2, in3...)
}

// EnableVolumeIOWithContextCalls gets all the calls that were made to EnableVolumeIOWithContext.
// Check the length with:
//     len(mockedec2Client.EnableVolumeIOWithContextCalls())
func (mock *ec2ClientMock) EnableVolumeIOWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.EnableVolumeIOInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.EnableVolumeIOInput
		In3 []request.Option
	}
	lockec2ClientMockEnableVolumeIOWithContext.RLock()
	calls = mock.calls.EnableVolumeIOWithContext
	lockec2ClientMockEnableVolumeIOWithContext.RUnlock()
	return calls
}

// EnableVpcClassicLink calls EnableVpcClassicLinkFunc.
func (mock *ec2ClientMock) EnableVpcClassicLink(in1 *ec2.EnableVpcClassicLinkInput) (*ec2.EnableVpcClassicLinkOutput, error) {
	if mock.EnableVpcClassicLinkFunc == nil {
		panic("ec2ClientMock.EnableVpcClassicLinkFunc: method is nil but ec2Client.EnableVpcClassicLink was just called")
	}
	callInfo := struct {
		In1 *ec2.EnableVpcClassicLinkInput
	}{
		In1: in1,
	}
	lockec2ClientMockEnableVpcClassicLink.Lock()
	mock.calls.EnableVpcClassicLink = append(mock.calls.EnableVpcClassicLink, callInfo)
	lockec2ClientMockEnableVpcClassicLink.Unlock()
	return mock.EnableVpcClassicLinkFunc(in1)
}

// EnableVpcClassicLinkCalls gets all the calls that were made to EnableVpcClassicLink.
// Check the length with:
//     len(mockedec2Client.EnableVpcClassicLinkCalls())
func (mock *ec2ClientMock) EnableVpcClassicLinkCalls() []struct {
	In1 *ec2.EnableVpcClassicLinkInput
} {
	var calls []struct {
		In1 *ec2.EnableVpcClassicLinkInput
	}
	lockec2ClientMockEnableVpcClassicLink.RLock()
	calls = mock.calls.EnableVpcClassicLink
	lockec2ClientMockEnableVpcClassicLink.RUnlock()
	return calls
}

// EnableVpcClassicLinkDnsSupport calls EnableVpcClassicLinkDnsSupportFunc.
func (mock *ec2ClientMock) EnableVpcClassicLinkDnsSupport(in1 *ec2.EnableVpcClassicLinkDnsSupportInput) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error) {
	if mock.EnableVpcClassicLinkDnsSupportFunc == nil {
		panic("ec2ClientMock.EnableVpcClassicLinkDnsSupportFunc: method is nil but ec2Client.EnableVpcClassicLinkDnsSupport was just called")
	}
	callInfo := struct {
		In1 *ec2.EnableVpcClassicLinkDnsSupportInput
	}{
		In1: in1,
	}
	lockec2ClientMockEnableVpcClassicLinkDnsSupport.Lock()
	mock.calls.EnableVpcClassicLinkDnsSupport = append(mock.calls.EnableVpcClassicLinkDnsSupport, callInfo)
	lockec2ClientMockEnableVpcClassicLinkDnsSupport.Unlock()
	return mock.EnableVpcClassicLinkDnsSupportFunc(in1)
}

// EnableVpcClassicLinkDnsSupportCalls gets all the calls that were made to EnableVpcClassicLinkDnsSupport.
// Check the length with:
//     len(mockedec2Client.EnableVpcClassicLinkDnsSupportCalls())
func (mock *ec2ClientMock) EnableVpcClassicLinkDnsSupportCalls() []struct {
	In1 *ec2.EnableVpcClassicLinkDnsSupportInput
} {
	var calls []struct {
		In1 *ec2.EnableVpcClassicLinkDnsSupportInput
	}
	lockec2ClientMockEnableVpcClassicLinkDnsSupport.RLock()
	calls = mock.calls.EnableVpcClassicLinkDnsSupport
	lockec2ClientMockEnableVpcClassicLinkDnsSupport.RUnlock()
	return calls
}

// EnableVpcClassicLinkDnsSupportRequest calls EnableVpcClassicLinkDnsSupportRequestFunc.
func (mock *ec2ClientMock) EnableVpcClassicLinkDnsSupportRequest(in1 *ec2.EnableVpcClassicLinkDnsSupportInput) (*request.Request, *ec2.EnableVpcClassicLinkDnsSupportOutput) {
	if mock.EnableVpcClassicLinkDnsSupportRequestFunc == nil {
		panic("ec2ClientMock.EnableVpcClassicLinkDnsSupportRequestFunc: method is nil but ec2Client.EnableVpcClassicLinkDnsSupportRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.EnableVpcClassicLinkDnsSupportInput
	}{
		In1: in1,
	}
	lockec2ClientMockEnableVpcClassicLinkDnsSupportRequest.Lock()
	mock.calls.EnableVpcClassicLinkDnsSupportRequest = append(mock.calls.EnableVpcClassicLinkDnsSupportRequest, callInfo)
	lockec2ClientMockEnableVpcClassicLinkDnsSupportRequest.Unlock()
	return mock.EnableVpcClassicLinkDnsSupportRequestFunc(in1)
}

// EnableVpcClassicLinkDnsSupportRequestCalls gets all the calls that were made to EnableVpcClassicLinkDnsSupportRequest.
// Check the length with:
//     len(mockedec2Client.EnableVpcClassicLinkDnsSupportRequestCalls())
func (mock *ec2ClientMock) EnableVpcClassicLinkDnsSupportRequestCalls() []struct {
	In1 *ec2.EnableVpcClassicLinkDnsSupportInput
} {
	var calls []struct {
		In1 *ec2.EnableVpcClassicLinkDnsSupportInput
	}
	lockec2ClientMockEnableVpcClassicLinkDnsSupportRequest.RLock()
	calls = mock.calls.EnableVpcClassicLinkDnsSupportRequest
	lockec2ClientMockEnableVpcClassicLinkDnsSupportRequest.RUnlock()
	return calls
}

// EnableVpcClassicLinkDnsSupportWithContext calls EnableVpcClassicLinkDnsSupportWithContextFunc.
func (mock *ec2ClientMock) EnableVpcClassicLinkDnsSupportWithContext(in1 context.Context, in2 *ec2.EnableVpcClassicLinkDnsSupportInput, in3 ...request.Option) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error) {
	if mock.EnableVpcClassicLinkDnsSupportWithContextFunc == nil {
		panic("ec2ClientMock.EnableVpcClassicLinkDnsSupportWithContextFunc: method is nil but ec2Client.EnableVpcClassicLinkDnsSupportWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.EnableVpcClassicLinkDnsSupportInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockEnableVpcClassicLinkDnsSupportWithContext.Lock()
	mock.calls.EnableVpcClassicLinkDnsSupportWithContext = append(mock.calls.EnableVpcClassicLinkDnsSupportWithContext, callInfo)
	lockec2ClientMockEnableVpcClassicLinkDnsSupportWithContext.Unlock()
	return mock.EnableVpcClassicLinkDnsSupportWithContextFunc(in1, in2, in3...)
}

// EnableVpcClassicLinkDnsSupportWithContextCalls gets all the calls that were made to EnableVpcClassicLinkDnsSupportWithContext.
// Check the length with:
//     len(mockedec2Client.EnableVpcClassicLinkDnsSupportWithContextCalls())
func (mock *ec2ClientMock) EnableVpcClassicLinkDnsSupportWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.EnableVpcClassicLinkDnsSupportInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.EnableVpcClassicLinkDnsSupportInput
		In3 []request.Option
	}
	lockec2ClientMockEnableVpcClassicLinkDnsSupportWithContext.RLock()
	calls = mock.calls.EnableVpcClassicLinkDnsSupportWithContext
	lockec2ClientMockEnableVpcClassicLinkDnsSupportWithContext.RUnlock()
	return calls
}

// EnableVpcClassicLinkRequest calls EnableVpcClassicLinkRequestFunc.
func (mock *ec2ClientMock) EnableVpcClassicLinkRequest(in1 *ec2.EnableVpcClassicLinkInput) (*request.Request, *ec2.EnableVpcClassicLinkOutput) {
	if mock.EnableVpcClassicLinkRequestFunc == nil {
		panic("ec2ClientMock.EnableVpcClassicLinkRequestFunc: method is nil but ec2Client.EnableVpcClassicLinkRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.EnableVpcClassicLinkInput
	}{
		In1: in1,
	}
	lockec2ClientMockEnableVpcClassicLinkRequest.Lock()
	mock.calls.EnableVpcClassicLinkRequest = append(mock.calls.EnableVpcClassicLinkRequest, callInfo)
	lockec2ClientMockEnableVpcClassicLinkRequest.Unlock()
	return mock.EnableVpcClassicLinkRequestFunc(in1)
}

// EnableVpcClassicLinkRequestCalls gets all the calls that were made to EnableVpcClassicLinkRequest.
// Check the length with:
//     len(mockedec2Client.EnableVpcClassicLinkRequestCalls())
func (mock *ec2ClientMock) EnableVpcClassicLinkRequestCalls() []struct {
	In1 *ec2.EnableVpcClassicLinkInput
} {
	var calls []struct {
		In1 *ec2.EnableVpcClassicLinkInput
	}
	lockec2ClientMockEnableVpcClassicLinkRequest.RLock()
	calls = mock.calls.EnableVpcClassicLinkRequest
	lockec2ClientMockEnableVpcClassicLinkRequest.RUnlock()
	return calls
}

// EnableVpcClassicLinkWithContext calls EnableVpcClassicLinkWithContextFunc.
func (mock *ec2ClientMock) EnableVpcClassicLinkWithContext(in1 context.Context, in2 *ec2.EnableVpcClassicLinkInput, in3 ...request.Option) (*ec2.EnableVpcClassicLinkOutput, error) {
	if mock.EnableVpcClassicLinkWithContextFunc == nil {
		panic("ec2ClientMock.EnableVpcClassicLinkWithContextFunc: method is nil but ec2Client.EnableVpcClassicLinkWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.EnableVpcClassicLinkInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockEnableVpcClassicLinkWithContext.Lock()
	mock.calls.EnableVpcClassicLinkWithContext = append(mock.calls.EnableVpcClassicLinkWithContext, callInfo)
	lockec2ClientMockEnableVpcClassicLinkWithContext.Unlock()
	return mock.EnableVpcClassicLinkWithContextFunc(in1, in2, in3...)
}

// EnableVpcClassicLinkWithContextCalls gets all the calls that were made to EnableVpcClassicLinkWithContext.
// Check the length with:
//     len(mockedec2Client.EnableVpcClassicLinkWithContextCalls())
func (mock *ec2ClientMock) EnableVpcClassicLinkWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.EnableVpcClassicLinkInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.EnableVpcClassicLinkInput
		In3 []request.Option
	}
	lockec2ClientMockEnableVpcClassicLinkWithContext.RLock()
	calls = mock.calls.EnableVpcClassicLinkWithContext
	lockec2ClientMockEnableVpcClassicLinkWithContext.RUnlock()
	return calls
}

// ExportClientVpnClientCertificateRevocationList calls ExportClientVpnClientCertificateRevocationListFunc.
func (mock *ec2ClientMock) ExportClientVpnClientCertificateRevocationList(in1 *ec2.ExportClientVpnClientCertificateRevocationListInput) (*ec2.ExportClientVpnClientCertificateRevocationListOutput, error) {
	if mock.ExportClientVpnClientCertificateRevocationListFunc == nil {
		panic("ec2ClientMock.ExportClientVpnClientCertificateRevocationListFunc: method is nil but ec2Client.ExportClientVpnClientCertificateRevocationList was just called")
	}
	callInfo := struct {
		In1 *ec2.ExportClientVpnClientCertificateRevocationListInput
	}{
		In1: in1,
	}
	lockec2ClientMockExportClientVpnClientCertificateRevocationList.Lock()
	mock.calls.ExportClientVpnClientCertificateRevocationList = append(mock.calls.ExportClientVpnClientCertificateRevocationList, callInfo)
	lockec2ClientMockExportClientVpnClientCertificateRevocationList.Unlock()
	return mock.ExportClientVpnClientCertificateRevocationListFunc(in1)
}

// ExportClientVpnClientCertificateRevocationListCalls gets all the calls that were made to ExportClientVpnClientCertificateRevocationList.
// Check the length with:
//     len(mockedec2Client.ExportClientVpnClientCertificateRevocationListCalls())
func (mock *ec2ClientMock) ExportClientVpnClientCertificateRevocationListCalls() []struct {
	In1 *ec2.ExportClientVpnClientCertificateRevocationListInput
} {
	var calls []struct {
		In1 *ec2.ExportClientVpnClientCertificateRevocationListInput
	}
	lockec2ClientMockExportClientVpnClientCertificateRevocationList.RLock()
	calls = mock.calls.ExportClientVpnClientCertificateRevocationList
	lockec2ClientMockExportClientVpnClientCertificateRevocationList.RUnlock()
	return calls
}

// ExportClientVpnClientCertificateRevocationListRequest calls ExportClientVpnClientCertificateRevocationListRequestFunc.
func (mock *ec2ClientMock) ExportClientVpnClientCertificateRevocationListRequest(in1 *ec2.ExportClientVpnClientCertificateRevocationListInput) (*request.Request, *ec2.ExportClientVpnClientCertificateRevocationListOutput) {
	if mock.ExportClientVpnClientCertificateRevocationListRequestFunc == nil {
		panic("ec2ClientMock.ExportClientVpnClientCertificateRevocationListRequestFunc: method is nil but ec2Client.ExportClientVpnClientCertificateRevocationListRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ExportClientVpnClientCertificateRevocationListInput
	}{
		In1: in1,
	}
	lockec2ClientMockExportClientVpnClientCertificateRevocationListRequest.Lock()
	mock.calls.ExportClientVpnClientCertificateRevocationListRequest = append(mock.calls.ExportClientVpnClientCertificateRevocationListRequest, callInfo)
	lockec2ClientMockExportClientVpnClientCertificateRevocationListRequest.Unlock()
	return mock.ExportClientVpnClientCertificateRevocationListRequestFunc(in1)
}

// ExportClientVpnClientCertificateRevocationListRequestCalls gets all the calls that were made to ExportClientVpnClientCertificateRevocationListRequest.
// Check the length with:
//     len(mockedec2Client.ExportClientVpnClientCertificateRevocationListRequestCalls())
func (mock *ec2ClientMock) ExportClientVpnClientCertificateRevocationListRequestCalls() []struct {
	In1 *ec2.ExportClientVpnClientCertificateRevocationListInput
} {
	var calls []struct {
		In1 *ec2.ExportClientVpnClientCertificateRevocationListInput
	}
	lockec2ClientMockExportClientVpnClientCertificateRevocationListRequest.RLock()
	calls = mock.calls.ExportClientVpnClientCertificateRevocationListRequest
	lockec2ClientMockExportClientVpnClientCertificateRevocationListRequest.RUnlock()
	return calls
}

// ExportClientVpnClientCertificateRevocationListWithContext calls ExportClientVpnClientCertificateRevocationListWithContextFunc.
func (mock *ec2ClientMock) ExportClientVpnClientCertificateRevocationListWithContext(in1 context.Context, in2 *ec2.ExportClientVpnClientCertificateRevocationListInput, in3 ...request.Option) (*ec2.ExportClientVpnClientCertificateRevocationListOutput, error) {
	if mock.ExportClientVpnClientCertificateRevocationListWithContextFunc == nil {
		panic("ec2ClientMock.ExportClientVpnClientCertificateRevocationListWithContextFunc: method is nil but ec2Client.ExportClientVpnClientCertificateRevocationListWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ExportClientVpnClientCertificateRevocationListInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockExportClientVpnClientCertificateRevocationListWithContext.Lock()
	mock.calls.ExportClientVpnClientCertificateRevocationListWithContext = append(mock.calls.ExportClientVpnClientCertificateRevocationListWithContext, callInfo)
	lockec2ClientMockExportClientVpnClientCertificateRevocationListWithContext.Unlock()
	return mock.ExportClientVpnClientCertificateRevocationListWithContextFunc(in1, in2, in3...)
}

// ExportClientVpnClientCertificateRevocationListWithContextCalls gets all the calls that were made to ExportClientVpnClientCertificateRevocationListWithContext.
// Check the length with:
//     len(mockedec2Client.ExportClientVpnClientCertificateRevocationListWithContextCalls())
func (mock *ec2ClientMock) ExportClientVpnClientCertificateRevocationListWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ExportClientVpnClientCertificateRevocationListInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ExportClientVpnClientCertificateRevocationListInput
		In3 []request.Option
	}
	lockec2ClientMockExportClientVpnClientCertificateRevocationListWithContext.RLock()
	calls = mock.calls.ExportClientVpnClientCertificateRevocationListWithContext
	lockec2ClientMockExportClientVpnClientCertificateRevocationListWithContext.RUnlock()
	return calls
}

// ExportClientVpnClientConfiguration calls ExportClientVpnClientConfigurationFunc.
func (mock *ec2ClientMock) ExportClientVpnClientConfiguration(in1 *ec2.ExportClientVpnClientConfigurationInput) (*ec2.ExportClientVpnClientConfigurationOutput, error) {
	if mock.ExportClientVpnClientConfigurationFunc == nil {
		panic("ec2ClientMock.ExportClientVpnClientConfigurationFunc: method is nil but ec2Client.ExportClientVpnClientConfiguration was just called")
	}
	callInfo := struct {
		In1 *ec2.ExportClientVpnClientConfigurationInput
	}{
		In1: in1,
	}
	lockec2ClientMockExportClientVpnClientConfiguration.Lock()
	mock.calls.ExportClientVpnClientConfiguration = append(mock.calls.ExportClientVpnClientConfiguration, callInfo)
	lockec2ClientMockExportClientVpnClientConfiguration.Unlock()
	return mock.ExportClientVpnClientConfigurationFunc(in1)
}

// ExportClientVpnClientConfigurationCalls gets all the calls that were made to ExportClientVpnClientConfiguration.
// Check the length with:
//     len(mockedec2Client.ExportClientVpnClientConfigurationCalls())
func (mock *ec2ClientMock) ExportClientVpnClientConfigurationCalls() []struct {
	In1 *ec2.ExportClientVpnClientConfigurationInput
} {
	var calls []struct {
		In1 *ec2.ExportClientVpnClientConfigurationInput
	}
	lockec2ClientMockExportClientVpnClientConfiguration.RLock()
	calls = mock.calls.ExportClientVpnClientConfiguration
	lockec2ClientMockExportClientVpnClientConfiguration.RUnlock()
	return calls
}

// ExportClientVpnClientConfigurationRequest calls ExportClientVpnClientConfigurationRequestFunc.
func (mock *ec2ClientMock) ExportClientVpnClientConfigurationRequest(in1 *ec2.ExportClientVpnClientConfigurationInput) (*request.Request, *ec2.ExportClientVpnClientConfigurationOutput) {
	if mock.ExportClientVpnClientConfigurationRequestFunc == nil {
		panic("ec2ClientMock.ExportClientVpnClientConfigurationRequestFunc: method is nil but ec2Client.ExportClientVpnClientConfigurationRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ExportClientVpnClientConfigurationInput
	}{
		In1: in1,
	}
	lockec2ClientMockExportClientVpnClientConfigurationRequest.Lock()
	mock.calls.ExportClientVpnClientConfigurationRequest = append(mock.calls.ExportClientVpnClientConfigurationRequest, callInfo)
	lockec2ClientMockExportClientVpnClientConfigurationRequest.Unlock()
	return mock.ExportClientVpnClientConfigurationRequestFunc(in1)
}

// ExportClientVpnClientConfigurationRequestCalls gets all the calls that were made to ExportClientVpnClientConfigurationRequest.
// Check the length with:
//     len(mockedec2Client.ExportClientVpnClientConfigurationRequestCalls())
func (mock *ec2ClientMock) ExportClientVpnClientConfigurationRequestCalls() []struct {
	In1 *ec2.ExportClientVpnClientConfigurationInput
} {
	var calls []struct {
		In1 *ec2.ExportClientVpnClientConfigurationInput
	}
	lockec2ClientMockExportClientVpnClientConfigurationRequest.RLock()
	calls = mock.calls.ExportClientVpnClientConfigurationRequest
	lockec2ClientMockExportClientVpnClientConfigurationRequest.RUnlock()
	return calls
}

// ExportClientVpnClientConfigurationWithContext calls ExportClientVpnClientConfigurationWithContextFunc.
func (mock *ec2ClientMock) ExportClientVpnClientConfigurationWithContext(in1 context.Context, in2 *ec2.ExportClientVpnClientConfigurationInput, in3 ...request.Option) (*ec2.ExportClientVpnClientConfigurationOutput, error) {
	if mock.ExportClientVpnClientConfigurationWithContextFunc == nil {
		panic("ec2ClientMock.ExportClientVpnClientConfigurationWithContextFunc: method is nil but ec2Client.ExportClientVpnClientConfigurationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ExportClientVpnClientConfigurationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockExportClientVpnClientConfigurationWithContext.Lock()
	mock.calls.ExportClientVpnClientConfigurationWithContext = append(mock.calls.ExportClientVpnClientConfigurationWithContext, callInfo)
	lockec2ClientMockExportClientVpnClientConfigurationWithContext.Unlock()
	return mock.ExportClientVpnClientConfigurationWithContextFunc(in1, in2, in3...)
}

// ExportClientVpnClientConfigurationWithContextCalls gets all the calls that were made to ExportClientVpnClientConfigurationWithContext.
// Check the length with:
//     len(mockedec2Client.ExportClientVpnClientConfigurationWithContextCalls())
func (mock *ec2ClientMock) ExportClientVpnClientConfigurationWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ExportClientVpnClientConfigurationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ExportClientVpnClientConfigurationInput
		In3 []request.Option
	}
	lockec2ClientMockExportClientVpnClientConfigurationWithContext.RLock()
	calls = mock.calls.ExportClientVpnClientConfigurationWithContext
	lockec2ClientMockExportClientVpnClientConfigurationWithContext.RUnlock()
	return calls
}

// ExportImage calls ExportImageFunc.
func (mock *ec2ClientMock) ExportImage(in1 *ec2.ExportImageInput) (*ec2.ExportImageOutput, error) {
	if mock.ExportImageFunc == nil {
		panic("ec2ClientMock.ExportImageFunc: method is nil but ec2Client.ExportImage was just called")
	}
	callInfo := struct {
		In1 *ec2.ExportImageInput
	}{
		In1: in1,
	}
	lockec2ClientMockExportImage.Lock()
	mock.calls.ExportImage = append(mock.calls.ExportImage, callInfo)
	lockec2ClientMockExportImage.Unlock()
	return mock.ExportImageFunc(in1)
}

// ExportImageCalls gets all the calls that were made to ExportImage.
// Check the length with:
//     len(mockedec2Client.ExportImageCalls())
func (mock *ec2ClientMock) ExportImageCalls() []struct {
	In1 *ec2.ExportImageInput
} {
	var calls []struct {
		In1 *ec2.ExportImageInput
	}
	lockec2ClientMockExportImage.RLock()
	calls = mock.calls.ExportImage
	lockec2ClientMockExportImage.RUnlock()
	return calls
}

// ExportImageRequest calls ExportImageRequestFunc.
func (mock *ec2ClientMock) ExportImageRequest(in1 *ec2.ExportImageInput) (*request.Request, *ec2.ExportImageOutput) {
	if mock.ExportImageRequestFunc == nil {
		panic("ec2ClientMock.ExportImageRequestFunc: method is nil but ec2Client.ExportImageRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ExportImageInput
	}{
		In1: in1,
	}
	lockec2ClientMockExportImageRequest.Lock()
	mock.calls.ExportImageRequest = append(mock.calls.ExportImageRequest, callInfo)
	lockec2ClientMockExportImageRequest.Unlock()
	return mock.ExportImageRequestFunc(in1)
}

// ExportImageRequestCalls gets all the calls that were made to ExportImageRequest.
// Check the length with:
//     len(mockedec2Client.ExportImageRequestCalls())
func (mock *ec2ClientMock) ExportImageRequestCalls() []struct {
	In1 *ec2.ExportImageInput
} {
	var calls []struct {
		In1 *ec2.ExportImageInput
	}
	lockec2ClientMockExportImageRequest.RLock()
	calls = mock.calls.ExportImageRequest
	lockec2ClientMockExportImageRequest.RUnlock()
	return calls
}

// ExportImageWithContext calls ExportImageWithContextFunc.
func (mock *ec2ClientMock) ExportImageWithContext(in1 context.Context, in2 *ec2.ExportImageInput, in3 ...request.Option) (*ec2.ExportImageOutput, error) {
	if mock.ExportImageWithContextFunc == nil {
		panic("ec2ClientMock.ExportImageWithContextFunc: method is nil but ec2Client.ExportImageWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ExportImageInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockExportImageWithContext.Lock()
	mock.calls.ExportImageWithContext = append(mock.calls.ExportImageWithContext, callInfo)
	lockec2ClientMockExportImageWithContext.Unlock()
	return mock.ExportImageWithContextFunc(in1, in2, in3...)
}

// ExportImageWithContextCalls gets all the calls that were made to ExportImageWithContext.
// Check the length with:
//     len(mockedec2Client.ExportImageWithContextCalls())
func (mock *ec2ClientMock) ExportImageWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ExportImageInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ExportImageInput
		In3 []request.Option
	}
	lockec2ClientMockExportImageWithContext.RLock()
	calls = mock.calls.ExportImageWithContext
	lockec2ClientMockExportImageWithContext.RUnlock()
	return calls
}

// ExportTransitGatewayRoutes calls ExportTransitGatewayRoutesFunc.
func (mock *ec2ClientMock) ExportTransitGatewayRoutes(in1 *ec2.ExportTransitGatewayRoutesInput) (*ec2.ExportTransitGatewayRoutesOutput, error) {
	if mock.ExportTransitGatewayRoutesFunc == nil {
		panic("ec2ClientMock.ExportTransitGatewayRoutesFunc: method is nil but ec2Client.ExportTransitGatewayRoutes was just called")
	}
	callInfo := struct {
		In1 *ec2.ExportTransitGatewayRoutesInput
	}{
		In1: in1,
	}
	lockec2ClientMockExportTransitGatewayRoutes.Lock()
	mock.calls.ExportTransitGatewayRoutes = append(mock.calls.ExportTransitGatewayRoutes, callInfo)
	lockec2ClientMockExportTransitGatewayRoutes.Unlock()
	return mock.ExportTransitGatewayRoutesFunc(in1)
}

// ExportTransitGatewayRoutesCalls gets all the calls that were made to ExportTransitGatewayRoutes.
// Check the length with:
//     len(mockedec2Client.ExportTransitGatewayRoutesCalls())
func (mock *ec2ClientMock) ExportTransitGatewayRoutesCalls() []struct {
	In1 *ec2.ExportTransitGatewayRoutesInput
} {
	var calls []struct {
		In1 *ec2.ExportTransitGatewayRoutesInput
	}
	lockec2ClientMockExportTransitGatewayRoutes.RLock()
	calls = mock.calls.ExportTransitGatewayRoutes
	lockec2ClientMockExportTransitGatewayRoutes.RUnlock()
	return calls
}

// ExportTransitGatewayRoutesRequest calls ExportTransitGatewayRoutesRequestFunc.
func (mock *ec2ClientMock) ExportTransitGatewayRoutesRequest(in1 *ec2.ExportTransitGatewayRoutesInput) (*request.Request, *ec2.ExportTransitGatewayRoutesOutput) {
	if mock.ExportTransitGatewayRoutesRequestFunc == nil {
		panic("ec2ClientMock.ExportTransitGatewayRoutesRequestFunc: method is nil but ec2Client.ExportTransitGatewayRoutesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ExportTransitGatewayRoutesInput
	}{
		In1: in1,
	}
	lockec2ClientMockExportTransitGatewayRoutesRequest.Lock()
	mock.calls.ExportTransitGatewayRoutesRequest = append(mock.calls.ExportTransitGatewayRoutesRequest, callInfo)
	lockec2ClientMockExportTransitGatewayRoutesRequest.Unlock()
	return mock.ExportTransitGatewayRoutesRequestFunc(in1)
}

// ExportTransitGatewayRoutesRequestCalls gets all the calls that were made to ExportTransitGatewayRoutesRequest.
// Check the length with:
//     len(mockedec2Client.ExportTransitGatewayRoutesRequestCalls())
func (mock *ec2ClientMock) ExportTransitGatewayRoutesRequestCalls() []struct {
	In1 *ec2.ExportTransitGatewayRoutesInput
} {
	var calls []struct {
		In1 *ec2.ExportTransitGatewayRoutesInput
	}
	lockec2ClientMockExportTransitGatewayRoutesRequest.RLock()
	calls = mock.calls.ExportTransitGatewayRoutesRequest
	lockec2ClientMockExportTransitGatewayRoutesRequest.RUnlock()
	return calls
}

// ExportTransitGatewayRoutesWithContext calls ExportTransitGatewayRoutesWithContextFunc.
func (mock *ec2ClientMock) ExportTransitGatewayRoutesWithContext(in1 context.Context, in2 *ec2.ExportTransitGatewayRoutesInput, in3 ...request.Option) (*ec2.ExportTransitGatewayRoutesOutput, error) {
	if mock.ExportTransitGatewayRoutesWithContextFunc == nil {
		panic("ec2ClientMock.ExportTransitGatewayRoutesWithContextFunc: method is nil but ec2Client.ExportTransitGatewayRoutesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ExportTransitGatewayRoutesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockExportTransitGatewayRoutesWithContext.Lock()
	mock.calls.ExportTransitGatewayRoutesWithContext = append(mock.calls.ExportTransitGatewayRoutesWithContext, callInfo)
	lockec2ClientMockExportTransitGatewayRoutesWithContext.Unlock()
	return mock.ExportTransitGatewayRoutesWithContextFunc(in1, in2, in3...)
}

// ExportTransitGatewayRoutesWithContextCalls gets all the calls that were made to ExportTransitGatewayRoutesWithContext.
// Check the length with:
//     len(mockedec2Client.ExportTransitGatewayRoutesWithContextCalls())
func (mock *ec2ClientMock) ExportTransitGatewayRoutesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ExportTransitGatewayRoutesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ExportTransitGatewayRoutesInput
		In3 []request.Option
	}
	lockec2ClientMockExportTransitGatewayRoutesWithContext.RLock()
	calls = mock.calls.ExportTransitGatewayRoutesWithContext
	lockec2ClientMockExportTransitGatewayRoutesWithContext.RUnlock()
	return calls
}

// GetAssociatedIpv6PoolCidrs calls GetAssociatedIpv6PoolCidrsFunc.
func (mock *ec2ClientMock) GetAssociatedIpv6PoolCidrs(in1 *ec2.GetAssociatedIpv6PoolCidrsInput) (*ec2.GetAssociatedIpv6PoolCidrsOutput, error) {
	if mock.GetAssociatedIpv6PoolCidrsFunc == nil {
		panic("ec2ClientMock.GetAssociatedIpv6PoolCidrsFunc: method is nil but ec2Client.GetAssociatedIpv6PoolCidrs was just called")
	}
	callInfo := struct {
		In1 *ec2.GetAssociatedIpv6PoolCidrsInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetAssociatedIpv6PoolCidrs.Lock()
	mock.calls.GetAssociatedIpv6PoolCidrs = append(mock.calls.GetAssociatedIpv6PoolCidrs, callInfo)
	lockec2ClientMockGetAssociatedIpv6PoolCidrs.Unlock()
	return mock.GetAssociatedIpv6PoolCidrsFunc(in1)
}

// GetAssociatedIpv6PoolCidrsCalls gets all the calls that were made to GetAssociatedIpv6PoolCidrs.
// Check the length with:
//     len(mockedec2Client.GetAssociatedIpv6PoolCidrsCalls())
func (mock *ec2ClientMock) GetAssociatedIpv6PoolCidrsCalls() []struct {
	In1 *ec2.GetAssociatedIpv6PoolCidrsInput
} {
	var calls []struct {
		In1 *ec2.GetAssociatedIpv6PoolCidrsInput
	}
	lockec2ClientMockGetAssociatedIpv6PoolCidrs.RLock()
	calls = mock.calls.GetAssociatedIpv6PoolCidrs
	lockec2ClientMockGetAssociatedIpv6PoolCidrs.RUnlock()
	return calls
}

// GetAssociatedIpv6PoolCidrsPages calls GetAssociatedIpv6PoolCidrsPagesFunc.
func (mock *ec2ClientMock) GetAssociatedIpv6PoolCidrsPages(in1 *ec2.GetAssociatedIpv6PoolCidrsInput, in2 func(*ec2.GetAssociatedIpv6PoolCidrsOutput, bool) bool) error {
	if mock.GetAssociatedIpv6PoolCidrsPagesFunc == nil {
		panic("ec2ClientMock.GetAssociatedIpv6PoolCidrsPagesFunc: method is nil but ec2Client.GetAssociatedIpv6PoolCidrsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.GetAssociatedIpv6PoolCidrsInput
		In2 func(*ec2.GetAssociatedIpv6PoolCidrsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockGetAssociatedIpv6PoolCidrsPages.Lock()
	mock.calls.GetAssociatedIpv6PoolCidrsPages = append(mock.calls.GetAssociatedIpv6PoolCidrsPages, callInfo)
	lockec2ClientMockGetAssociatedIpv6PoolCidrsPages.Unlock()
	return mock.GetAssociatedIpv6PoolCidrsPagesFunc(in1, in2)
}

// GetAssociatedIpv6PoolCidrsPagesCalls gets all the calls that were made to GetAssociatedIpv6PoolCidrsPages.
// Check the length with:
//     len(mockedec2Client.GetAssociatedIpv6PoolCidrsPagesCalls())
func (mock *ec2ClientMock) GetAssociatedIpv6PoolCidrsPagesCalls() []struct {
	In1 *ec2.GetAssociatedIpv6PoolCidrsInput
	In2 func(*ec2.GetAssociatedIpv6PoolCidrsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.GetAssociatedIpv6PoolCidrsInput
		In2 func(*ec2.GetAssociatedIpv6PoolCidrsOutput, bool) bool
	}
	lockec2ClientMockGetAssociatedIpv6PoolCidrsPages.RLock()
	calls = mock.calls.GetAssociatedIpv6PoolCidrsPages
	lockec2ClientMockGetAssociatedIpv6PoolCidrsPages.RUnlock()
	return calls
}

// GetAssociatedIpv6PoolCidrsPagesWithContext calls GetAssociatedIpv6PoolCidrsPagesWithContextFunc.
func (mock *ec2ClientMock) GetAssociatedIpv6PoolCidrsPagesWithContext(in1 context.Context, in2 *ec2.GetAssociatedIpv6PoolCidrsInput, in3 func(*ec2.GetAssociatedIpv6PoolCidrsOutput, bool) bool, in4 ...request.Option) error {
	if mock.GetAssociatedIpv6PoolCidrsPagesWithContextFunc == nil {
		panic("ec2ClientMock.GetAssociatedIpv6PoolCidrsPagesWithContextFunc: method is nil but ec2Client.GetAssociatedIpv6PoolCidrsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.GetAssociatedIpv6PoolCidrsInput
		In3 func(*ec2.GetAssociatedIpv6PoolCidrsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockGetAssociatedIpv6PoolCidrsPagesWithContext.Lock()
	mock.calls.GetAssociatedIpv6PoolCidrsPagesWithContext = append(mock.calls.GetAssociatedIpv6PoolCidrsPagesWithContext, callInfo)
	lockec2ClientMockGetAssociatedIpv6PoolCidrsPagesWithContext.Unlock()
	return mock.GetAssociatedIpv6PoolCidrsPagesWithContextFunc(in1, in2, in3, in4...)
}

// GetAssociatedIpv6PoolCidrsPagesWithContextCalls gets all the calls that were made to GetAssociatedIpv6PoolCidrsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.GetAssociatedIpv6PoolCidrsPagesWithContextCalls())
func (mock *ec2ClientMock) GetAssociatedIpv6PoolCidrsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.GetAssociatedIpv6PoolCidrsInput
	In3 func(*ec2.GetAssociatedIpv6PoolCidrsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.GetAssociatedIpv6PoolCidrsInput
		In3 func(*ec2.GetAssociatedIpv6PoolCidrsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockGetAssociatedIpv6PoolCidrsPagesWithContext.RLock()
	calls = mock.calls.GetAssociatedIpv6PoolCidrsPagesWithContext
	lockec2ClientMockGetAssociatedIpv6PoolCidrsPagesWithContext.RUnlock()
	return calls
}

// GetAssociatedIpv6PoolCidrsRequest calls GetAssociatedIpv6PoolCidrsRequestFunc.
func (mock *ec2ClientMock) GetAssociatedIpv6PoolCidrsRequest(in1 *ec2.GetAssociatedIpv6PoolCidrsInput) (*request.Request, *ec2.GetAssociatedIpv6PoolCidrsOutput) {
	if mock.GetAssociatedIpv6PoolCidrsRequestFunc == nil {
		panic("ec2ClientMock.GetAssociatedIpv6PoolCidrsRequestFunc: method is nil but ec2Client.GetAssociatedIpv6PoolCidrsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.GetAssociatedIpv6PoolCidrsInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetAssociatedIpv6PoolCidrsRequest.Lock()
	mock.calls.GetAssociatedIpv6PoolCidrsRequest = append(mock.calls.GetAssociatedIpv6PoolCidrsRequest, callInfo)
	lockec2ClientMockGetAssociatedIpv6PoolCidrsRequest.Unlock()
	return mock.GetAssociatedIpv6PoolCidrsRequestFunc(in1)
}

// GetAssociatedIpv6PoolCidrsRequestCalls gets all the calls that were made to GetAssociatedIpv6PoolCidrsRequest.
// Check the length with:
//     len(mockedec2Client.GetAssociatedIpv6PoolCidrsRequestCalls())
func (mock *ec2ClientMock) GetAssociatedIpv6PoolCidrsRequestCalls() []struct {
	In1 *ec2.GetAssociatedIpv6PoolCidrsInput
} {
	var calls []struct {
		In1 *ec2.GetAssociatedIpv6PoolCidrsInput
	}
	lockec2ClientMockGetAssociatedIpv6PoolCidrsRequest.RLock()
	calls = mock.calls.GetAssociatedIpv6PoolCidrsRequest
	lockec2ClientMockGetAssociatedIpv6PoolCidrsRequest.RUnlock()
	return calls
}

// GetAssociatedIpv6PoolCidrsWithContext calls GetAssociatedIpv6PoolCidrsWithContextFunc.
func (mock *ec2ClientMock) GetAssociatedIpv6PoolCidrsWithContext(in1 context.Context, in2 *ec2.GetAssociatedIpv6PoolCidrsInput, in3 ...request.Option) (*ec2.GetAssociatedIpv6PoolCidrsOutput, error) {
	if mock.GetAssociatedIpv6PoolCidrsWithContextFunc == nil {
		panic("ec2ClientMock.GetAssociatedIpv6PoolCidrsWithContextFunc: method is nil but ec2Client.GetAssociatedIpv6PoolCidrsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.GetAssociatedIpv6PoolCidrsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockGetAssociatedIpv6PoolCidrsWithContext.Lock()
	mock.calls.GetAssociatedIpv6PoolCidrsWithContext = append(mock.calls.GetAssociatedIpv6PoolCidrsWithContext, callInfo)
	lockec2ClientMockGetAssociatedIpv6PoolCidrsWithContext.Unlock()
	return mock.GetAssociatedIpv6PoolCidrsWithContextFunc(in1, in2, in3...)
}

// GetAssociatedIpv6PoolCidrsWithContextCalls gets all the calls that were made to GetAssociatedIpv6PoolCidrsWithContext.
// Check the length with:
//     len(mockedec2Client.GetAssociatedIpv6PoolCidrsWithContextCalls())
func (mock *ec2ClientMock) GetAssociatedIpv6PoolCidrsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.GetAssociatedIpv6PoolCidrsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.GetAssociatedIpv6PoolCidrsInput
		In3 []request.Option
	}
	lockec2ClientMockGetAssociatedIpv6PoolCidrsWithContext.RLock()
	calls = mock.calls.GetAssociatedIpv6PoolCidrsWithContext
	lockec2ClientMockGetAssociatedIpv6PoolCidrsWithContext.RUnlock()
	return calls
}

// GetCapacityReservationUsage calls GetCapacityReservationUsageFunc.
func (mock *ec2ClientMock) GetCapacityReservationUsage(in1 *ec2.GetCapacityReservationUsageInput) (*ec2.GetCapacityReservationUsageOutput, error) {
	if mock.GetCapacityReservationUsageFunc == nil {
		panic("ec2ClientMock.GetCapacityReservationUsageFunc: method is nil but ec2Client.GetCapacityReservationUsage was just called")
	}
	callInfo := struct {
		In1 *ec2.GetCapacityReservationUsageInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetCapacityReservationUsage.Lock()
	mock.calls.GetCapacityReservationUsage = append(mock.calls.GetCapacityReservationUsage, callInfo)
	lockec2ClientMockGetCapacityReservationUsage.Unlock()
	return mock.GetCapacityReservationUsageFunc(in1)
}

// GetCapacityReservationUsageCalls gets all the calls that were made to GetCapacityReservationUsage.
// Check the length with:
//     len(mockedec2Client.GetCapacityReservationUsageCalls())
func (mock *ec2ClientMock) GetCapacityReservationUsageCalls() []struct {
	In1 *ec2.GetCapacityReservationUsageInput
} {
	var calls []struct {
		In1 *ec2.GetCapacityReservationUsageInput
	}
	lockec2ClientMockGetCapacityReservationUsage.RLock()
	calls = mock.calls.GetCapacityReservationUsage
	lockec2ClientMockGetCapacityReservationUsage.RUnlock()
	return calls
}

// GetCapacityReservationUsageRequest calls GetCapacityReservationUsageRequestFunc.
func (mock *ec2ClientMock) GetCapacityReservationUsageRequest(in1 *ec2.GetCapacityReservationUsageInput) (*request.Request, *ec2.GetCapacityReservationUsageOutput) {
	if mock.GetCapacityReservationUsageRequestFunc == nil {
		panic("ec2ClientMock.GetCapacityReservationUsageRequestFunc: method is nil but ec2Client.GetCapacityReservationUsageRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.GetCapacityReservationUsageInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetCapacityReservationUsageRequest.Lock()
	mock.calls.GetCapacityReservationUsageRequest = append(mock.calls.GetCapacityReservationUsageRequest, callInfo)
	lockec2ClientMockGetCapacityReservationUsageRequest.Unlock()
	return mock.GetCapacityReservationUsageRequestFunc(in1)
}

// GetCapacityReservationUsageRequestCalls gets all the calls that were made to GetCapacityReservationUsageRequest.
// Check the length with:
//     len(mockedec2Client.GetCapacityReservationUsageRequestCalls())
func (mock *ec2ClientMock) GetCapacityReservationUsageRequestCalls() []struct {
	In1 *ec2.GetCapacityReservationUsageInput
} {
	var calls []struct {
		In1 *ec2.GetCapacityReservationUsageInput
	}
	lockec2ClientMockGetCapacityReservationUsageRequest.RLock()
	calls = mock.calls.GetCapacityReservationUsageRequest
	lockec2ClientMockGetCapacityReservationUsageRequest.RUnlock()
	return calls
}

// GetCapacityReservationUsageWithContext calls GetCapacityReservationUsageWithContextFunc.
func (mock *ec2ClientMock) GetCapacityReservationUsageWithContext(in1 context.Context, in2 *ec2.GetCapacityReservationUsageInput, in3 ...request.Option) (*ec2.GetCapacityReservationUsageOutput, error) {
	if mock.GetCapacityReservationUsageWithContextFunc == nil {
		panic("ec2ClientMock.GetCapacityReservationUsageWithContextFunc: method is nil but ec2Client.GetCapacityReservationUsageWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.GetCapacityReservationUsageInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockGetCapacityReservationUsageWithContext.Lock()
	mock.calls.GetCapacityReservationUsageWithContext = append(mock.calls.GetCapacityReservationUsageWithContext, callInfo)
	lockec2ClientMockGetCapacityReservationUsageWithContext.Unlock()
	return mock.GetCapacityReservationUsageWithContextFunc(in1, in2, in3...)
}

// GetCapacityReservationUsageWithContextCalls gets all the calls that were made to GetCapacityReservationUsageWithContext.
// Check the length with:
//     len(mockedec2Client.GetCapacityReservationUsageWithContextCalls())
func (mock *ec2ClientMock) GetCapacityReservationUsageWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.GetCapacityReservationUsageInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.GetCapacityReservationUsageInput
		In3 []request.Option
	}
	lockec2ClientMockGetCapacityReservationUsageWithContext.RLock()
	calls = mock.calls.GetCapacityReservationUsageWithContext
	lockec2ClientMockGetCapacityReservationUsageWithContext.RUnlock()
	return calls
}

// GetCoipPoolUsage calls GetCoipPoolUsageFunc.
func (mock *ec2ClientMock) GetCoipPoolUsage(in1 *ec2.GetCoipPoolUsageInput) (*ec2.GetCoipPoolUsageOutput, error) {
	if mock.GetCoipPoolUsageFunc == nil {
		panic("ec2ClientMock.GetCoipPoolUsageFunc: method is nil but ec2Client.GetCoipPoolUsage was just called")
	}
	callInfo := struct {
		In1 *ec2.GetCoipPoolUsageInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetCoipPoolUsage.Lock()
	mock.calls.GetCoipPoolUsage = append(mock.calls.GetCoipPoolUsage, callInfo)
	lockec2ClientMockGetCoipPoolUsage.Unlock()
	return mock.GetCoipPoolUsageFunc(in1)
}

// GetCoipPoolUsageCalls gets all the calls that were made to GetCoipPoolUsage.
// Check the length with:
//     len(mockedec2Client.GetCoipPoolUsageCalls())
func (mock *ec2ClientMock) GetCoipPoolUsageCalls() []struct {
	In1 *ec2.GetCoipPoolUsageInput
} {
	var calls []struct {
		In1 *ec2.GetCoipPoolUsageInput
	}
	lockec2ClientMockGetCoipPoolUsage.RLock()
	calls = mock.calls.GetCoipPoolUsage
	lockec2ClientMockGetCoipPoolUsage.RUnlock()
	return calls
}

// GetCoipPoolUsageRequest calls GetCoipPoolUsageRequestFunc.
func (mock *ec2ClientMock) GetCoipPoolUsageRequest(in1 *ec2.GetCoipPoolUsageInput) (*request.Request, *ec2.GetCoipPoolUsageOutput) {
	if mock.GetCoipPoolUsageRequestFunc == nil {
		panic("ec2ClientMock.GetCoipPoolUsageRequestFunc: method is nil but ec2Client.GetCoipPoolUsageRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.GetCoipPoolUsageInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetCoipPoolUsageRequest.Lock()
	mock.calls.GetCoipPoolUsageRequest = append(mock.calls.GetCoipPoolUsageRequest, callInfo)
	lockec2ClientMockGetCoipPoolUsageRequest.Unlock()
	return mock.GetCoipPoolUsageRequestFunc(in1)
}

// GetCoipPoolUsageRequestCalls gets all the calls that were made to GetCoipPoolUsageRequest.
// Check the length with:
//     len(mockedec2Client.GetCoipPoolUsageRequestCalls())
func (mock *ec2ClientMock) GetCoipPoolUsageRequestCalls() []struct {
	In1 *ec2.GetCoipPoolUsageInput
} {
	var calls []struct {
		In1 *ec2.GetCoipPoolUsageInput
	}
	lockec2ClientMockGetCoipPoolUsageRequest.RLock()
	calls = mock.calls.GetCoipPoolUsageRequest
	lockec2ClientMockGetCoipPoolUsageRequest.RUnlock()
	return calls
}

// GetCoipPoolUsageWithContext calls GetCoipPoolUsageWithContextFunc.
func (mock *ec2ClientMock) GetCoipPoolUsageWithContext(in1 context.Context, in2 *ec2.GetCoipPoolUsageInput, in3 ...request.Option) (*ec2.GetCoipPoolUsageOutput, error) {
	if mock.GetCoipPoolUsageWithContextFunc == nil {
		panic("ec2ClientMock.GetCoipPoolUsageWithContextFunc: method is nil but ec2Client.GetCoipPoolUsageWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.GetCoipPoolUsageInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockGetCoipPoolUsageWithContext.Lock()
	mock.calls.GetCoipPoolUsageWithContext = append(mock.calls.GetCoipPoolUsageWithContext, callInfo)
	lockec2ClientMockGetCoipPoolUsageWithContext.Unlock()
	return mock.GetCoipPoolUsageWithContextFunc(in1, in2, in3...)
}

// GetCoipPoolUsageWithContextCalls gets all the calls that were made to GetCoipPoolUsageWithContext.
// Check the length with:
//     len(mockedec2Client.GetCoipPoolUsageWithContextCalls())
func (mock *ec2ClientMock) GetCoipPoolUsageWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.GetCoipPoolUsageInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.GetCoipPoolUsageInput
		In3 []request.Option
	}
	lockec2ClientMockGetCoipPoolUsageWithContext.RLock()
	calls = mock.calls.GetCoipPoolUsageWithContext
	lockec2ClientMockGetCoipPoolUsageWithContext.RUnlock()
	return calls
}

// GetConsoleOutput calls GetConsoleOutputFunc.
func (mock *ec2ClientMock) GetConsoleOutput(in1 *ec2.GetConsoleOutputInput) (*ec2.GetConsoleOutputOutput, error) {
	if mock.GetConsoleOutputFunc == nil {
		panic("ec2ClientMock.GetConsoleOutputFunc: method is nil but ec2Client.GetConsoleOutput was just called")
	}
	callInfo := struct {
		In1 *ec2.GetConsoleOutputInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetConsoleOutput.Lock()
	mock.calls.GetConsoleOutput = append(mock.calls.GetConsoleOutput, callInfo)
	lockec2ClientMockGetConsoleOutput.Unlock()
	return mock.GetConsoleOutputFunc(in1)
}

// GetConsoleOutputCalls gets all the calls that were made to GetConsoleOutput.
// Check the length with:
//     len(mockedec2Client.GetConsoleOutputCalls())
func (mock *ec2ClientMock) GetConsoleOutputCalls() []struct {
	In1 *ec2.GetConsoleOutputInput
} {
	var calls []struct {
		In1 *ec2.GetConsoleOutputInput
	}
	lockec2ClientMockGetConsoleOutput.RLock()
	calls = mock.calls.GetConsoleOutput
	lockec2ClientMockGetConsoleOutput.RUnlock()
	return calls
}

// GetConsoleOutputRequest calls GetConsoleOutputRequestFunc.
func (mock *ec2ClientMock) GetConsoleOutputRequest(in1 *ec2.GetConsoleOutputInput) (*request.Request, *ec2.GetConsoleOutputOutput) {
	if mock.GetConsoleOutputRequestFunc == nil {
		panic("ec2ClientMock.GetConsoleOutputRequestFunc: method is nil but ec2Client.GetConsoleOutputRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.GetConsoleOutputInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetConsoleOutputRequest.Lock()
	mock.calls.GetConsoleOutputRequest = append(mock.calls.GetConsoleOutputRequest, callInfo)
	lockec2ClientMockGetConsoleOutputRequest.Unlock()
	return mock.GetConsoleOutputRequestFunc(in1)
}

// GetConsoleOutputRequestCalls gets all the calls that were made to GetConsoleOutputRequest.
// Check the length with:
//     len(mockedec2Client.GetConsoleOutputRequestCalls())
func (mock *ec2ClientMock) GetConsoleOutputRequestCalls() []struct {
	In1 *ec2.GetConsoleOutputInput
} {
	var calls []struct {
		In1 *ec2.GetConsoleOutputInput
	}
	lockec2ClientMockGetConsoleOutputRequest.RLock()
	calls = mock.calls.GetConsoleOutputRequest
	lockec2ClientMockGetConsoleOutputRequest.RUnlock()
	return calls
}

// GetConsoleOutputWithContext calls GetConsoleOutputWithContextFunc.
func (mock *ec2ClientMock) GetConsoleOutputWithContext(in1 context.Context, in2 *ec2.GetConsoleOutputInput, in3 ...request.Option) (*ec2.GetConsoleOutputOutput, error) {
	if mock.GetConsoleOutputWithContextFunc == nil {
		panic("ec2ClientMock.GetConsoleOutputWithContextFunc: method is nil but ec2Client.GetConsoleOutputWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.GetConsoleOutputInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockGetConsoleOutputWithContext.Lock()
	mock.calls.GetConsoleOutputWithContext = append(mock.calls.GetConsoleOutputWithContext, callInfo)
	lockec2ClientMockGetConsoleOutputWithContext.Unlock()
	return mock.GetConsoleOutputWithContextFunc(in1, in2, in3...)
}

// GetConsoleOutputWithContextCalls gets all the calls that were made to GetConsoleOutputWithContext.
// Check the length with:
//     len(mockedec2Client.GetConsoleOutputWithContextCalls())
func (mock *ec2ClientMock) GetConsoleOutputWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.GetConsoleOutputInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.GetConsoleOutputInput
		In3 []request.Option
	}
	lockec2ClientMockGetConsoleOutputWithContext.RLock()
	calls = mock.calls.GetConsoleOutputWithContext
	lockec2ClientMockGetConsoleOutputWithContext.RUnlock()
	return calls
}

// GetConsoleScreenshot calls GetConsoleScreenshotFunc.
func (mock *ec2ClientMock) GetConsoleScreenshot(in1 *ec2.GetConsoleScreenshotInput) (*ec2.GetConsoleScreenshotOutput, error) {
	if mock.GetConsoleScreenshotFunc == nil {
		panic("ec2ClientMock.GetConsoleScreenshotFunc: method is nil but ec2Client.GetConsoleScreenshot was just called")
	}
	callInfo := struct {
		In1 *ec2.GetConsoleScreenshotInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetConsoleScreenshot.Lock()
	mock.calls.GetConsoleScreenshot = append(mock.calls.GetConsoleScreenshot, callInfo)
	lockec2ClientMockGetConsoleScreenshot.Unlock()
	return mock.GetConsoleScreenshotFunc(in1)
}

// GetConsoleScreenshotCalls gets all the calls that were made to GetConsoleScreenshot.
// Check the length with:
//     len(mockedec2Client.GetConsoleScreenshotCalls())
func (mock *ec2ClientMock) GetConsoleScreenshotCalls() []struct {
	In1 *ec2.GetConsoleScreenshotInput
} {
	var calls []struct {
		In1 *ec2.GetConsoleScreenshotInput
	}
	lockec2ClientMockGetConsoleScreenshot.RLock()
	calls = mock.calls.GetConsoleScreenshot
	lockec2ClientMockGetConsoleScreenshot.RUnlock()
	return calls
}

// GetConsoleScreenshotRequest calls GetConsoleScreenshotRequestFunc.
func (mock *ec2ClientMock) GetConsoleScreenshotRequest(in1 *ec2.GetConsoleScreenshotInput) (*request.Request, *ec2.GetConsoleScreenshotOutput) {
	if mock.GetConsoleScreenshotRequestFunc == nil {
		panic("ec2ClientMock.GetConsoleScreenshotRequestFunc: method is nil but ec2Client.GetConsoleScreenshotRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.GetConsoleScreenshotInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetConsoleScreenshotRequest.Lock()
	mock.calls.GetConsoleScreenshotRequest = append(mock.calls.GetConsoleScreenshotRequest, callInfo)
	lockec2ClientMockGetConsoleScreenshotRequest.Unlock()
	return mock.GetConsoleScreenshotRequestFunc(in1)
}

// GetConsoleScreenshotRequestCalls gets all the calls that were made to GetConsoleScreenshotRequest.
// Check the length with:
//     len(mockedec2Client.GetConsoleScreenshotRequestCalls())
func (mock *ec2ClientMock) GetConsoleScreenshotRequestCalls() []struct {
	In1 *ec2.GetConsoleScreenshotInput
} {
	var calls []struct {
		In1 *ec2.GetConsoleScreenshotInput
	}
	lockec2ClientMockGetConsoleScreenshotRequest.RLock()
	calls = mock.calls.GetConsoleScreenshotRequest
	lockec2ClientMockGetConsoleScreenshotRequest.RUnlock()
	return calls
}

// GetConsoleScreenshotWithContext calls GetConsoleScreenshotWithContextFunc.
func (mock *ec2ClientMock) GetConsoleScreenshotWithContext(in1 context.Context, in2 *ec2.GetConsoleScreenshotInput, in3 ...request.Option) (*ec2.GetConsoleScreenshotOutput, error) {
	if mock.GetConsoleScreenshotWithContextFunc == nil {
		panic("ec2ClientMock.GetConsoleScreenshotWithContextFunc: method is nil but ec2Client.GetConsoleScreenshotWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.GetConsoleScreenshotInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockGetConsoleScreenshotWithContext.Lock()
	mock.calls.GetConsoleScreenshotWithContext = append(mock.calls.GetConsoleScreenshotWithContext, callInfo)
	lockec2ClientMockGetConsoleScreenshotWithContext.Unlock()
	return mock.GetConsoleScreenshotWithContextFunc(in1, in2, in3...)
}

// GetConsoleScreenshotWithContextCalls gets all the calls that were made to GetConsoleScreenshotWithContext.
// Check the length with:
//     len(mockedec2Client.GetConsoleScreenshotWithContextCalls())
func (mock *ec2ClientMock) GetConsoleScreenshotWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.GetConsoleScreenshotInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.GetConsoleScreenshotInput
		In3 []request.Option
	}
	lockec2ClientMockGetConsoleScreenshotWithContext.RLock()
	calls = mock.calls.GetConsoleScreenshotWithContext
	lockec2ClientMockGetConsoleScreenshotWithContext.RUnlock()
	return calls
}

// GetDefaultCreditSpecification calls GetDefaultCreditSpecificationFunc.
func (mock *ec2ClientMock) GetDefaultCreditSpecification(in1 *ec2.GetDefaultCreditSpecificationInput) (*ec2.GetDefaultCreditSpecificationOutput, error) {
	if mock.GetDefaultCreditSpecificationFunc == nil {
		panic("ec2ClientMock.GetDefaultCreditSpecificationFunc: method is nil but ec2Client.GetDefaultCreditSpecification was just called")
	}
	callInfo := struct {
		In1 *ec2.GetDefaultCreditSpecificationInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetDefaultCreditSpecification.Lock()
	mock.calls.GetDefaultCreditSpecification = append(mock.calls.GetDefaultCreditSpecification, callInfo)
	lockec2ClientMockGetDefaultCreditSpecification.Unlock()
	return mock.GetDefaultCreditSpecificationFunc(in1)
}

// GetDefaultCreditSpecificationCalls gets all the calls that were made to GetDefaultCreditSpecification.
// Check the length with:
//     len(mockedec2Client.GetDefaultCreditSpecificationCalls())
func (mock *ec2ClientMock) GetDefaultCreditSpecificationCalls() []struct {
	In1 *ec2.GetDefaultCreditSpecificationInput
} {
	var calls []struct {
		In1 *ec2.GetDefaultCreditSpecificationInput
	}
	lockec2ClientMockGetDefaultCreditSpecification.RLock()
	calls = mock.calls.GetDefaultCreditSpecification
	lockec2ClientMockGetDefaultCreditSpecification.RUnlock()
	return calls
}

// GetDefaultCreditSpecificationRequest calls GetDefaultCreditSpecificationRequestFunc.
func (mock *ec2ClientMock) GetDefaultCreditSpecificationRequest(in1 *ec2.GetDefaultCreditSpecificationInput) (*request.Request, *ec2.GetDefaultCreditSpecificationOutput) {
	if mock.GetDefaultCreditSpecificationRequestFunc == nil {
		panic("ec2ClientMock.GetDefaultCreditSpecificationRequestFunc: method is nil but ec2Client.GetDefaultCreditSpecificationRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.GetDefaultCreditSpecificationInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetDefaultCreditSpecificationRequest.Lock()
	mock.calls.GetDefaultCreditSpecificationRequest = append(mock.calls.GetDefaultCreditSpecificationRequest, callInfo)
	lockec2ClientMockGetDefaultCreditSpecificationRequest.Unlock()
	return mock.GetDefaultCreditSpecificationRequestFunc(in1)
}

// GetDefaultCreditSpecificationRequestCalls gets all the calls that were made to GetDefaultCreditSpecificationRequest.
// Check the length with:
//     len(mockedec2Client.GetDefaultCreditSpecificationRequestCalls())
func (mock *ec2ClientMock) GetDefaultCreditSpecificationRequestCalls() []struct {
	In1 *ec2.GetDefaultCreditSpecificationInput
} {
	var calls []struct {
		In1 *ec2.GetDefaultCreditSpecificationInput
	}
	lockec2ClientMockGetDefaultCreditSpecificationRequest.RLock()
	calls = mock.calls.GetDefaultCreditSpecificationRequest
	lockec2ClientMockGetDefaultCreditSpecificationRequest.RUnlock()
	return calls
}

// GetDefaultCreditSpecificationWithContext calls GetDefaultCreditSpecificationWithContextFunc.
func (mock *ec2ClientMock) GetDefaultCreditSpecificationWithContext(in1 context.Context, in2 *ec2.GetDefaultCreditSpecificationInput, in3 ...request.Option) (*ec2.GetDefaultCreditSpecificationOutput, error) {
	if mock.GetDefaultCreditSpecificationWithContextFunc == nil {
		panic("ec2ClientMock.GetDefaultCreditSpecificationWithContextFunc: method is nil but ec2Client.GetDefaultCreditSpecificationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.GetDefaultCreditSpecificationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockGetDefaultCreditSpecificationWithContext.Lock()
	mock.calls.GetDefaultCreditSpecificationWithContext = append(mock.calls.GetDefaultCreditSpecificationWithContext, callInfo)
	lockec2ClientMockGetDefaultCreditSpecificationWithContext.Unlock()
	return mock.GetDefaultCreditSpecificationWithContextFunc(in1, in2, in3...)
}

// GetDefaultCreditSpecificationWithContextCalls gets all the calls that were made to GetDefaultCreditSpecificationWithContext.
// Check the length with:
//     len(mockedec2Client.GetDefaultCreditSpecificationWithContextCalls())
func (mock *ec2ClientMock) GetDefaultCreditSpecificationWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.GetDefaultCreditSpecificationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.GetDefaultCreditSpecificationInput
		In3 []request.Option
	}
	lockec2ClientMockGetDefaultCreditSpecificationWithContext.RLock()
	calls = mock.calls.GetDefaultCreditSpecificationWithContext
	lockec2ClientMockGetDefaultCreditSpecificationWithContext.RUnlock()
	return calls
}

// GetEbsDefaultKmsKeyId calls GetEbsDefaultKmsKeyIdFunc.
func (mock *ec2ClientMock) GetEbsDefaultKmsKeyId(in1 *ec2.GetEbsDefaultKmsKeyIdInput) (*ec2.GetEbsDefaultKmsKeyIdOutput, error) {
	if mock.GetEbsDefaultKmsKeyIdFunc == nil {
		panic("ec2ClientMock.GetEbsDefaultKmsKeyIdFunc: method is nil but ec2Client.GetEbsDefaultKmsKeyId was just called")
	}
	callInfo := struct {
		In1 *ec2.GetEbsDefaultKmsKeyIdInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetEbsDefaultKmsKeyId.Lock()
	mock.calls.GetEbsDefaultKmsKeyId = append(mock.calls.GetEbsDefaultKmsKeyId, callInfo)
	lockec2ClientMockGetEbsDefaultKmsKeyId.Unlock()
	return mock.GetEbsDefaultKmsKeyIdFunc(in1)
}

// GetEbsDefaultKmsKeyIdCalls gets all the calls that were made to GetEbsDefaultKmsKeyId.
// Check the length with:
//     len(mockedec2Client.GetEbsDefaultKmsKeyIdCalls())
func (mock *ec2ClientMock) GetEbsDefaultKmsKeyIdCalls() []struct {
	In1 *ec2.GetEbsDefaultKmsKeyIdInput
} {
	var calls []struct {
		In1 *ec2.GetEbsDefaultKmsKeyIdInput
	}
	lockec2ClientMockGetEbsDefaultKmsKeyId.RLock()
	calls = mock.calls.GetEbsDefaultKmsKeyId
	lockec2ClientMockGetEbsDefaultKmsKeyId.RUnlock()
	return calls
}

// GetEbsDefaultKmsKeyIdRequest calls GetEbsDefaultKmsKeyIdRequestFunc.
func (mock *ec2ClientMock) GetEbsDefaultKmsKeyIdRequest(in1 *ec2.GetEbsDefaultKmsKeyIdInput) (*request.Request, *ec2.GetEbsDefaultKmsKeyIdOutput) {
	if mock.GetEbsDefaultKmsKeyIdRequestFunc == nil {
		panic("ec2ClientMock.GetEbsDefaultKmsKeyIdRequestFunc: method is nil but ec2Client.GetEbsDefaultKmsKeyIdRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.GetEbsDefaultKmsKeyIdInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetEbsDefaultKmsKeyIdRequest.Lock()
	mock.calls.GetEbsDefaultKmsKeyIdRequest = append(mock.calls.GetEbsDefaultKmsKeyIdRequest, callInfo)
	lockec2ClientMockGetEbsDefaultKmsKeyIdRequest.Unlock()
	return mock.GetEbsDefaultKmsKeyIdRequestFunc(in1)
}

// GetEbsDefaultKmsKeyIdRequestCalls gets all the calls that were made to GetEbsDefaultKmsKeyIdRequest.
// Check the length with:
//     len(mockedec2Client.GetEbsDefaultKmsKeyIdRequestCalls())
func (mock *ec2ClientMock) GetEbsDefaultKmsKeyIdRequestCalls() []struct {
	In1 *ec2.GetEbsDefaultKmsKeyIdInput
} {
	var calls []struct {
		In1 *ec2.GetEbsDefaultKmsKeyIdInput
	}
	lockec2ClientMockGetEbsDefaultKmsKeyIdRequest.RLock()
	calls = mock.calls.GetEbsDefaultKmsKeyIdRequest
	lockec2ClientMockGetEbsDefaultKmsKeyIdRequest.RUnlock()
	return calls
}

// GetEbsDefaultKmsKeyIdWithContext calls GetEbsDefaultKmsKeyIdWithContextFunc.
func (mock *ec2ClientMock) GetEbsDefaultKmsKeyIdWithContext(in1 context.Context, in2 *ec2.GetEbsDefaultKmsKeyIdInput, in3 ...request.Option) (*ec2.GetEbsDefaultKmsKeyIdOutput, error) {
	if mock.GetEbsDefaultKmsKeyIdWithContextFunc == nil {
		panic("ec2ClientMock.GetEbsDefaultKmsKeyIdWithContextFunc: method is nil but ec2Client.GetEbsDefaultKmsKeyIdWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.GetEbsDefaultKmsKeyIdInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockGetEbsDefaultKmsKeyIdWithContext.Lock()
	mock.calls.GetEbsDefaultKmsKeyIdWithContext = append(mock.calls.GetEbsDefaultKmsKeyIdWithContext, callInfo)
	lockec2ClientMockGetEbsDefaultKmsKeyIdWithContext.Unlock()
	return mock.GetEbsDefaultKmsKeyIdWithContextFunc(in1, in2, in3...)
}

// GetEbsDefaultKmsKeyIdWithContextCalls gets all the calls that were made to GetEbsDefaultKmsKeyIdWithContext.
// Check the length with:
//     len(mockedec2Client.GetEbsDefaultKmsKeyIdWithContextCalls())
func (mock *ec2ClientMock) GetEbsDefaultKmsKeyIdWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.GetEbsDefaultKmsKeyIdInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.GetEbsDefaultKmsKeyIdInput
		In3 []request.Option
	}
	lockec2ClientMockGetEbsDefaultKmsKeyIdWithContext.RLock()
	calls = mock.calls.GetEbsDefaultKmsKeyIdWithContext
	lockec2ClientMockGetEbsDefaultKmsKeyIdWithContext.RUnlock()
	return calls
}

// GetEbsEncryptionByDefault calls GetEbsEncryptionByDefaultFunc.
func (mock *ec2ClientMock) GetEbsEncryptionByDefault(in1 *ec2.GetEbsEncryptionByDefaultInput) (*ec2.GetEbsEncryptionByDefaultOutput, error) {
	if mock.GetEbsEncryptionByDefaultFunc == nil {
		panic("ec2ClientMock.GetEbsEncryptionByDefaultFunc: method is nil but ec2Client.GetEbsEncryptionByDefault was just called")
	}
	callInfo := struct {
		In1 *ec2.GetEbsEncryptionByDefaultInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetEbsEncryptionByDefault.Lock()
	mock.calls.GetEbsEncryptionByDefault = append(mock.calls.GetEbsEncryptionByDefault, callInfo)
	lockec2ClientMockGetEbsEncryptionByDefault.Unlock()
	return mock.GetEbsEncryptionByDefaultFunc(in1)
}

// GetEbsEncryptionByDefaultCalls gets all the calls that were made to GetEbsEncryptionByDefault.
// Check the length with:
//     len(mockedec2Client.GetEbsEncryptionByDefaultCalls())
func (mock *ec2ClientMock) GetEbsEncryptionByDefaultCalls() []struct {
	In1 *ec2.GetEbsEncryptionByDefaultInput
} {
	var calls []struct {
		In1 *ec2.GetEbsEncryptionByDefaultInput
	}
	lockec2ClientMockGetEbsEncryptionByDefault.RLock()
	calls = mock.calls.GetEbsEncryptionByDefault
	lockec2ClientMockGetEbsEncryptionByDefault.RUnlock()
	return calls
}

// GetEbsEncryptionByDefaultRequest calls GetEbsEncryptionByDefaultRequestFunc.
func (mock *ec2ClientMock) GetEbsEncryptionByDefaultRequest(in1 *ec2.GetEbsEncryptionByDefaultInput) (*request.Request, *ec2.GetEbsEncryptionByDefaultOutput) {
	if mock.GetEbsEncryptionByDefaultRequestFunc == nil {
		panic("ec2ClientMock.GetEbsEncryptionByDefaultRequestFunc: method is nil but ec2Client.GetEbsEncryptionByDefaultRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.GetEbsEncryptionByDefaultInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetEbsEncryptionByDefaultRequest.Lock()
	mock.calls.GetEbsEncryptionByDefaultRequest = append(mock.calls.GetEbsEncryptionByDefaultRequest, callInfo)
	lockec2ClientMockGetEbsEncryptionByDefaultRequest.Unlock()
	return mock.GetEbsEncryptionByDefaultRequestFunc(in1)
}

// GetEbsEncryptionByDefaultRequestCalls gets all the calls that were made to GetEbsEncryptionByDefaultRequest.
// Check the length with:
//     len(mockedec2Client.GetEbsEncryptionByDefaultRequestCalls())
func (mock *ec2ClientMock) GetEbsEncryptionByDefaultRequestCalls() []struct {
	In1 *ec2.GetEbsEncryptionByDefaultInput
} {
	var calls []struct {
		In1 *ec2.GetEbsEncryptionByDefaultInput
	}
	lockec2ClientMockGetEbsEncryptionByDefaultRequest.RLock()
	calls = mock.calls.GetEbsEncryptionByDefaultRequest
	lockec2ClientMockGetEbsEncryptionByDefaultRequest.RUnlock()
	return calls
}

// GetEbsEncryptionByDefaultWithContext calls GetEbsEncryptionByDefaultWithContextFunc.
func (mock *ec2ClientMock) GetEbsEncryptionByDefaultWithContext(in1 context.Context, in2 *ec2.GetEbsEncryptionByDefaultInput, in3 ...request.Option) (*ec2.GetEbsEncryptionByDefaultOutput, error) {
	if mock.GetEbsEncryptionByDefaultWithContextFunc == nil {
		panic("ec2ClientMock.GetEbsEncryptionByDefaultWithContextFunc: method is nil but ec2Client.GetEbsEncryptionByDefaultWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.GetEbsEncryptionByDefaultInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockGetEbsEncryptionByDefaultWithContext.Lock()
	mock.calls.GetEbsEncryptionByDefaultWithContext = append(mock.calls.GetEbsEncryptionByDefaultWithContext, callInfo)
	lockec2ClientMockGetEbsEncryptionByDefaultWithContext.Unlock()
	return mock.GetEbsEncryptionByDefaultWithContextFunc(in1, in2, in3...)
}

// GetEbsEncryptionByDefaultWithContextCalls gets all the calls that were made to GetEbsEncryptionByDefaultWithContext.
// Check the length with:
//     len(mockedec2Client.GetEbsEncryptionByDefaultWithContextCalls())
func (mock *ec2ClientMock) GetEbsEncryptionByDefaultWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.GetEbsEncryptionByDefaultInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.GetEbsEncryptionByDefaultInput
		In3 []request.Option
	}
	lockec2ClientMockGetEbsEncryptionByDefaultWithContext.RLock()
	calls = mock.calls.GetEbsEncryptionByDefaultWithContext
	lockec2ClientMockGetEbsEncryptionByDefaultWithContext.RUnlock()
	return calls
}

// GetHostReservationPurchasePreview calls GetHostReservationPurchasePreviewFunc.
func (mock *ec2ClientMock) GetHostReservationPurchasePreview(in1 *ec2.GetHostReservationPurchasePreviewInput) (*ec2.GetHostReservationPurchasePreviewOutput, error) {
	if mock.GetHostReservationPurchasePreviewFunc == nil {
		panic("ec2ClientMock.GetHostReservationPurchasePreviewFunc: method is nil but ec2Client.GetHostReservationPurchasePreview was just called")
	}
	callInfo := struct {
		In1 *ec2.GetHostReservationPurchasePreviewInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetHostReservationPurchasePreview.Lock()
	mock.calls.GetHostReservationPurchasePreview = append(mock.calls.GetHostReservationPurchasePreview, callInfo)
	lockec2ClientMockGetHostReservationPurchasePreview.Unlock()
	return mock.GetHostReservationPurchasePreviewFunc(in1)
}

// GetHostReservationPurchasePreviewCalls gets all the calls that were made to GetHostReservationPurchasePreview.
// Check the length with:
//     len(mockedec2Client.GetHostReservationPurchasePreviewCalls())
func (mock *ec2ClientMock) GetHostReservationPurchasePreviewCalls() []struct {
	In1 *ec2.GetHostReservationPurchasePreviewInput
} {
	var calls []struct {
		In1 *ec2.GetHostReservationPurchasePreviewInput
	}
	lockec2ClientMockGetHostReservationPurchasePreview.RLock()
	calls = mock.calls.GetHostReservationPurchasePreview
	lockec2ClientMockGetHostReservationPurchasePreview.RUnlock()
	return calls
}

// GetHostReservationPurchasePreviewRequest calls GetHostReservationPurchasePreviewRequestFunc.
func (mock *ec2ClientMock) GetHostReservationPurchasePreviewRequest(in1 *ec2.GetHostReservationPurchasePreviewInput) (*request.Request, *ec2.GetHostReservationPurchasePreviewOutput) {
	if mock.GetHostReservationPurchasePreviewRequestFunc == nil {
		panic("ec2ClientMock.GetHostReservationPurchasePreviewRequestFunc: method is nil but ec2Client.GetHostReservationPurchasePreviewRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.GetHostReservationPurchasePreviewInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetHostReservationPurchasePreviewRequest.Lock()
	mock.calls.GetHostReservationPurchasePreviewRequest = append(mock.calls.GetHostReservationPurchasePreviewRequest, callInfo)
	lockec2ClientMockGetHostReservationPurchasePreviewRequest.Unlock()
	return mock.GetHostReservationPurchasePreviewRequestFunc(in1)
}

// GetHostReservationPurchasePreviewRequestCalls gets all the calls that were made to GetHostReservationPurchasePreviewRequest.
// Check the length with:
//     len(mockedec2Client.GetHostReservationPurchasePreviewRequestCalls())
func (mock *ec2ClientMock) GetHostReservationPurchasePreviewRequestCalls() []struct {
	In1 *ec2.GetHostReservationPurchasePreviewInput
} {
	var calls []struct {
		In1 *ec2.GetHostReservationPurchasePreviewInput
	}
	lockec2ClientMockGetHostReservationPurchasePreviewRequest.RLock()
	calls = mock.calls.GetHostReservationPurchasePreviewRequest
	lockec2ClientMockGetHostReservationPurchasePreviewRequest.RUnlock()
	return calls
}

// GetHostReservationPurchasePreviewWithContext calls GetHostReservationPurchasePreviewWithContextFunc.
func (mock *ec2ClientMock) GetHostReservationPurchasePreviewWithContext(in1 context.Context, in2 *ec2.GetHostReservationPurchasePreviewInput, in3 ...request.Option) (*ec2.GetHostReservationPurchasePreviewOutput, error) {
	if mock.GetHostReservationPurchasePreviewWithContextFunc == nil {
		panic("ec2ClientMock.GetHostReservationPurchasePreviewWithContextFunc: method is nil but ec2Client.GetHostReservationPurchasePreviewWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.GetHostReservationPurchasePreviewInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockGetHostReservationPurchasePreviewWithContext.Lock()
	mock.calls.GetHostReservationPurchasePreviewWithContext = append(mock.calls.GetHostReservationPurchasePreviewWithContext, callInfo)
	lockec2ClientMockGetHostReservationPurchasePreviewWithContext.Unlock()
	return mock.GetHostReservationPurchasePreviewWithContextFunc(in1, in2, in3...)
}

// GetHostReservationPurchasePreviewWithContextCalls gets all the calls that were made to GetHostReservationPurchasePreviewWithContext.
// Check the length with:
//     len(mockedec2Client.GetHostReservationPurchasePreviewWithContextCalls())
func (mock *ec2ClientMock) GetHostReservationPurchasePreviewWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.GetHostReservationPurchasePreviewInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.GetHostReservationPurchasePreviewInput
		In3 []request.Option
	}
	lockec2ClientMockGetHostReservationPurchasePreviewWithContext.RLock()
	calls = mock.calls.GetHostReservationPurchasePreviewWithContext
	lockec2ClientMockGetHostReservationPurchasePreviewWithContext.RUnlock()
	return calls
}

// GetLaunchTemplateData calls GetLaunchTemplateDataFunc.
func (mock *ec2ClientMock) GetLaunchTemplateData(in1 *ec2.GetLaunchTemplateDataInput) (*ec2.GetLaunchTemplateDataOutput, error) {
	if mock.GetLaunchTemplateDataFunc == nil {
		panic("ec2ClientMock.GetLaunchTemplateDataFunc: method is nil but ec2Client.GetLaunchTemplateData was just called")
	}
	callInfo := struct {
		In1 *ec2.GetLaunchTemplateDataInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetLaunchTemplateData.Lock()
	mock.calls.GetLaunchTemplateData = append(mock.calls.GetLaunchTemplateData, callInfo)
	lockec2ClientMockGetLaunchTemplateData.Unlock()
	return mock.GetLaunchTemplateDataFunc(in1)
}

// GetLaunchTemplateDataCalls gets all the calls that were made to GetLaunchTemplateData.
// Check the length with:
//     len(mockedec2Client.GetLaunchTemplateDataCalls())
func (mock *ec2ClientMock) GetLaunchTemplateDataCalls() []struct {
	In1 *ec2.GetLaunchTemplateDataInput
} {
	var calls []struct {
		In1 *ec2.GetLaunchTemplateDataInput
	}
	lockec2ClientMockGetLaunchTemplateData.RLock()
	calls = mock.calls.GetLaunchTemplateData
	lockec2ClientMockGetLaunchTemplateData.RUnlock()
	return calls
}

// GetLaunchTemplateDataRequest calls GetLaunchTemplateDataRequestFunc.
func (mock *ec2ClientMock) GetLaunchTemplateDataRequest(in1 *ec2.GetLaunchTemplateDataInput) (*request.Request, *ec2.GetLaunchTemplateDataOutput) {
	if mock.GetLaunchTemplateDataRequestFunc == nil {
		panic("ec2ClientMock.GetLaunchTemplateDataRequestFunc: method is nil but ec2Client.GetLaunchTemplateDataRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.GetLaunchTemplateDataInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetLaunchTemplateDataRequest.Lock()
	mock.calls.GetLaunchTemplateDataRequest = append(mock.calls.GetLaunchTemplateDataRequest, callInfo)
	lockec2ClientMockGetLaunchTemplateDataRequest.Unlock()
	return mock.GetLaunchTemplateDataRequestFunc(in1)
}

// GetLaunchTemplateDataRequestCalls gets all the calls that were made to GetLaunchTemplateDataRequest.
// Check the length with:
//     len(mockedec2Client.GetLaunchTemplateDataRequestCalls())
func (mock *ec2ClientMock) GetLaunchTemplateDataRequestCalls() []struct {
	In1 *ec2.GetLaunchTemplateDataInput
} {
	var calls []struct {
		In1 *ec2.GetLaunchTemplateDataInput
	}
	lockec2ClientMockGetLaunchTemplateDataRequest.RLock()
	calls = mock.calls.GetLaunchTemplateDataRequest
	lockec2ClientMockGetLaunchTemplateDataRequest.RUnlock()
	return calls
}

// GetLaunchTemplateDataWithContext calls GetLaunchTemplateDataWithContextFunc.
func (mock *ec2ClientMock) GetLaunchTemplateDataWithContext(in1 context.Context, in2 *ec2.GetLaunchTemplateDataInput, in3 ...request.Option) (*ec2.GetLaunchTemplateDataOutput, error) {
	if mock.GetLaunchTemplateDataWithContextFunc == nil {
		panic("ec2ClientMock.GetLaunchTemplateDataWithContextFunc: method is nil but ec2Client.GetLaunchTemplateDataWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.GetLaunchTemplateDataInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockGetLaunchTemplateDataWithContext.Lock()
	mock.calls.GetLaunchTemplateDataWithContext = append(mock.calls.GetLaunchTemplateDataWithContext, callInfo)
	lockec2ClientMockGetLaunchTemplateDataWithContext.Unlock()
	return mock.GetLaunchTemplateDataWithContextFunc(in1, in2, in3...)
}

// GetLaunchTemplateDataWithContextCalls gets all the calls that were made to GetLaunchTemplateDataWithContext.
// Check the length with:
//     len(mockedec2Client.GetLaunchTemplateDataWithContextCalls())
func (mock *ec2ClientMock) GetLaunchTemplateDataWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.GetLaunchTemplateDataInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.GetLaunchTemplateDataInput
		In3 []request.Option
	}
	lockec2ClientMockGetLaunchTemplateDataWithContext.RLock()
	calls = mock.calls.GetLaunchTemplateDataWithContext
	lockec2ClientMockGetLaunchTemplateDataWithContext.RUnlock()
	return calls
}

// GetPasswordData calls GetPasswordDataFunc.
func (mock *ec2ClientMock) GetPasswordData(in1 *ec2.GetPasswordDataInput) (*ec2.GetPasswordDataOutput, error) {
	if mock.GetPasswordDataFunc == nil {
		panic("ec2ClientMock.GetPasswordDataFunc: method is nil but ec2Client.GetPasswordData was just called")
	}
	callInfo := struct {
		In1 *ec2.GetPasswordDataInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetPasswordData.Lock()
	mock.calls.GetPasswordData = append(mock.calls.GetPasswordData, callInfo)
	lockec2ClientMockGetPasswordData.Unlock()
	return mock.GetPasswordDataFunc(in1)
}

// GetPasswordDataCalls gets all the calls that were made to GetPasswordData.
// Check the length with:
//     len(mockedec2Client.GetPasswordDataCalls())
func (mock *ec2ClientMock) GetPasswordDataCalls() []struct {
	In1 *ec2.GetPasswordDataInput
} {
	var calls []struct {
		In1 *ec2.GetPasswordDataInput
	}
	lockec2ClientMockGetPasswordData.RLock()
	calls = mock.calls.GetPasswordData
	lockec2ClientMockGetPasswordData.RUnlock()
	return calls
}

// GetPasswordDataRequest calls GetPasswordDataRequestFunc.
func (mock *ec2ClientMock) GetPasswordDataRequest(in1 *ec2.GetPasswordDataInput) (*request.Request, *ec2.GetPasswordDataOutput) {
	if mock.GetPasswordDataRequestFunc == nil {
		panic("ec2ClientMock.GetPasswordDataRequestFunc: method is nil but ec2Client.GetPasswordDataRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.GetPasswordDataInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetPasswordDataRequest.Lock()
	mock.calls.GetPasswordDataRequest = append(mock.calls.GetPasswordDataRequest, callInfo)
	lockec2ClientMockGetPasswordDataRequest.Unlock()
	return mock.GetPasswordDataRequestFunc(in1)
}

// GetPasswordDataRequestCalls gets all the calls that were made to GetPasswordDataRequest.
// Check the length with:
//     len(mockedec2Client.GetPasswordDataRequestCalls())
func (mock *ec2ClientMock) GetPasswordDataRequestCalls() []struct {
	In1 *ec2.GetPasswordDataInput
} {
	var calls []struct {
		In1 *ec2.GetPasswordDataInput
	}
	lockec2ClientMockGetPasswordDataRequest.RLock()
	calls = mock.calls.GetPasswordDataRequest
	lockec2ClientMockGetPasswordDataRequest.RUnlock()
	return calls
}

// GetPasswordDataWithContext calls GetPasswordDataWithContextFunc.
func (mock *ec2ClientMock) GetPasswordDataWithContext(in1 context.Context, in2 *ec2.GetPasswordDataInput, in3 ...request.Option) (*ec2.GetPasswordDataOutput, error) {
	if mock.GetPasswordDataWithContextFunc == nil {
		panic("ec2ClientMock.GetPasswordDataWithContextFunc: method is nil but ec2Client.GetPasswordDataWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.GetPasswordDataInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockGetPasswordDataWithContext.Lock()
	mock.calls.GetPasswordDataWithContext = append(mock.calls.GetPasswordDataWithContext, callInfo)
	lockec2ClientMockGetPasswordDataWithContext.Unlock()
	return mock.GetPasswordDataWithContextFunc(in1, in2, in3...)
}

// GetPasswordDataWithContextCalls gets all the calls that were made to GetPasswordDataWithContext.
// Check the length with:
//     len(mockedec2Client.GetPasswordDataWithContextCalls())
func (mock *ec2ClientMock) GetPasswordDataWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.GetPasswordDataInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.GetPasswordDataInput
		In3 []request.Option
	}
	lockec2ClientMockGetPasswordDataWithContext.RLock()
	calls = mock.calls.GetPasswordDataWithContext
	lockec2ClientMockGetPasswordDataWithContext.RUnlock()
	return calls
}

// GetReservedInstancesExchangeQuote calls GetReservedInstancesExchangeQuoteFunc.
func (mock *ec2ClientMock) GetReservedInstancesExchangeQuote(in1 *ec2.GetReservedInstancesExchangeQuoteInput) (*ec2.GetReservedInstancesExchangeQuoteOutput, error) {
	if mock.GetReservedInstancesExchangeQuoteFunc == nil {
		panic("ec2ClientMock.GetReservedInstancesExchangeQuoteFunc: method is nil but ec2Client.GetReservedInstancesExchangeQuote was just called")
	}
	callInfo := struct {
		In1 *ec2.GetReservedInstancesExchangeQuoteInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetReservedInstancesExchangeQuote.Lock()
	mock.calls.GetReservedInstancesExchangeQuote = append(mock.calls.GetReservedInstancesExchangeQuote, callInfo)
	lockec2ClientMockGetReservedInstancesExchangeQuote.Unlock()
	return mock.GetReservedInstancesExchangeQuoteFunc(in1)
}

// GetReservedInstancesExchangeQuoteCalls gets all the calls that were made to GetReservedInstancesExchangeQuote.
// Check the length with:
//     len(mockedec2Client.GetReservedInstancesExchangeQuoteCalls())
func (mock *ec2ClientMock) GetReservedInstancesExchangeQuoteCalls() []struct {
	In1 *ec2.GetReservedInstancesExchangeQuoteInput
} {
	var calls []struct {
		In1 *ec2.GetReservedInstancesExchangeQuoteInput
	}
	lockec2ClientMockGetReservedInstancesExchangeQuote.RLock()
	calls = mock.calls.GetReservedInstancesExchangeQuote
	lockec2ClientMockGetReservedInstancesExchangeQuote.RUnlock()
	return calls
}

// GetReservedInstancesExchangeQuoteRequest calls GetReservedInstancesExchangeQuoteRequestFunc.
func (mock *ec2ClientMock) GetReservedInstancesExchangeQuoteRequest(in1 *ec2.GetReservedInstancesExchangeQuoteInput) (*request.Request, *ec2.GetReservedInstancesExchangeQuoteOutput) {
	if mock.GetReservedInstancesExchangeQuoteRequestFunc == nil {
		panic("ec2ClientMock.GetReservedInstancesExchangeQuoteRequestFunc: method is nil but ec2Client.GetReservedInstancesExchangeQuoteRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.GetReservedInstancesExchangeQuoteInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetReservedInstancesExchangeQuoteRequest.Lock()
	mock.calls.GetReservedInstancesExchangeQuoteRequest = append(mock.calls.GetReservedInstancesExchangeQuoteRequest, callInfo)
	lockec2ClientMockGetReservedInstancesExchangeQuoteRequest.Unlock()
	return mock.GetReservedInstancesExchangeQuoteRequestFunc(in1)
}

// GetReservedInstancesExchangeQuoteRequestCalls gets all the calls that were made to GetReservedInstancesExchangeQuoteRequest.
// Check the length with:
//     len(mockedec2Client.GetReservedInstancesExchangeQuoteRequestCalls())
func (mock *ec2ClientMock) GetReservedInstancesExchangeQuoteRequestCalls() []struct {
	In1 *ec2.GetReservedInstancesExchangeQuoteInput
} {
	var calls []struct {
		In1 *ec2.GetReservedInstancesExchangeQuoteInput
	}
	lockec2ClientMockGetReservedInstancesExchangeQuoteRequest.RLock()
	calls = mock.calls.GetReservedInstancesExchangeQuoteRequest
	lockec2ClientMockGetReservedInstancesExchangeQuoteRequest.RUnlock()
	return calls
}

// GetReservedInstancesExchangeQuoteWithContext calls GetReservedInstancesExchangeQuoteWithContextFunc.
func (mock *ec2ClientMock) GetReservedInstancesExchangeQuoteWithContext(in1 context.Context, in2 *ec2.GetReservedInstancesExchangeQuoteInput, in3 ...request.Option) (*ec2.GetReservedInstancesExchangeQuoteOutput, error) {
	if mock.GetReservedInstancesExchangeQuoteWithContextFunc == nil {
		panic("ec2ClientMock.GetReservedInstancesExchangeQuoteWithContextFunc: method is nil but ec2Client.GetReservedInstancesExchangeQuoteWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.GetReservedInstancesExchangeQuoteInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockGetReservedInstancesExchangeQuoteWithContext.Lock()
	mock.calls.GetReservedInstancesExchangeQuoteWithContext = append(mock.calls.GetReservedInstancesExchangeQuoteWithContext, callInfo)
	lockec2ClientMockGetReservedInstancesExchangeQuoteWithContext.Unlock()
	return mock.GetReservedInstancesExchangeQuoteWithContextFunc(in1, in2, in3...)
}

// GetReservedInstancesExchangeQuoteWithContextCalls gets all the calls that were made to GetReservedInstancesExchangeQuoteWithContext.
// Check the length with:
//     len(mockedec2Client.GetReservedInstancesExchangeQuoteWithContextCalls())
func (mock *ec2ClientMock) GetReservedInstancesExchangeQuoteWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.GetReservedInstancesExchangeQuoteInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.GetReservedInstancesExchangeQuoteInput
		In3 []request.Option
	}
	lockec2ClientMockGetReservedInstancesExchangeQuoteWithContext.RLock()
	calls = mock.calls.GetReservedInstancesExchangeQuoteWithContext
	lockec2ClientMockGetReservedInstancesExchangeQuoteWithContext.RUnlock()
	return calls
}

// GetTransitGatewayAttachmentPropagations calls GetTransitGatewayAttachmentPropagationsFunc.
func (mock *ec2ClientMock) GetTransitGatewayAttachmentPropagations(in1 *ec2.GetTransitGatewayAttachmentPropagationsInput) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error) {
	if mock.GetTransitGatewayAttachmentPropagationsFunc == nil {
		panic("ec2ClientMock.GetTransitGatewayAttachmentPropagationsFunc: method is nil but ec2Client.GetTransitGatewayAttachmentPropagations was just called")
	}
	callInfo := struct {
		In1 *ec2.GetTransitGatewayAttachmentPropagationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetTransitGatewayAttachmentPropagations.Lock()
	mock.calls.GetTransitGatewayAttachmentPropagations = append(mock.calls.GetTransitGatewayAttachmentPropagations, callInfo)
	lockec2ClientMockGetTransitGatewayAttachmentPropagations.Unlock()
	return mock.GetTransitGatewayAttachmentPropagationsFunc(in1)
}

// GetTransitGatewayAttachmentPropagationsCalls gets all the calls that were made to GetTransitGatewayAttachmentPropagations.
// Check the length with:
//     len(mockedec2Client.GetTransitGatewayAttachmentPropagationsCalls())
func (mock *ec2ClientMock) GetTransitGatewayAttachmentPropagationsCalls() []struct {
	In1 *ec2.GetTransitGatewayAttachmentPropagationsInput
} {
	var calls []struct {
		In1 *ec2.GetTransitGatewayAttachmentPropagationsInput
	}
	lockec2ClientMockGetTransitGatewayAttachmentPropagations.RLock()
	calls = mock.calls.GetTransitGatewayAttachmentPropagations
	lockec2ClientMockGetTransitGatewayAttachmentPropagations.RUnlock()
	return calls
}

// GetTransitGatewayAttachmentPropagationsPages calls GetTransitGatewayAttachmentPropagationsPagesFunc.
func (mock *ec2ClientMock) GetTransitGatewayAttachmentPropagationsPages(in1 *ec2.GetTransitGatewayAttachmentPropagationsInput, in2 func(*ec2.GetTransitGatewayAttachmentPropagationsOutput, bool) bool) error {
	if mock.GetTransitGatewayAttachmentPropagationsPagesFunc == nil {
		panic("ec2ClientMock.GetTransitGatewayAttachmentPropagationsPagesFunc: method is nil but ec2Client.GetTransitGatewayAttachmentPropagationsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.GetTransitGatewayAttachmentPropagationsInput
		In2 func(*ec2.GetTransitGatewayAttachmentPropagationsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockGetTransitGatewayAttachmentPropagationsPages.Lock()
	mock.calls.GetTransitGatewayAttachmentPropagationsPages = append(mock.calls.GetTransitGatewayAttachmentPropagationsPages, callInfo)
	lockec2ClientMockGetTransitGatewayAttachmentPropagationsPages.Unlock()
	return mock.GetTransitGatewayAttachmentPropagationsPagesFunc(in1, in2)
}

// GetTransitGatewayAttachmentPropagationsPagesCalls gets all the calls that were made to GetTransitGatewayAttachmentPropagationsPages.
// Check the length with:
//     len(mockedec2Client.GetTransitGatewayAttachmentPropagationsPagesCalls())
func (mock *ec2ClientMock) GetTransitGatewayAttachmentPropagationsPagesCalls() []struct {
	In1 *ec2.GetTransitGatewayAttachmentPropagationsInput
	In2 func(*ec2.GetTransitGatewayAttachmentPropagationsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.GetTransitGatewayAttachmentPropagationsInput
		In2 func(*ec2.GetTransitGatewayAttachmentPropagationsOutput, bool) bool
	}
	lockec2ClientMockGetTransitGatewayAttachmentPropagationsPages.RLock()
	calls = mock.calls.GetTransitGatewayAttachmentPropagationsPages
	lockec2ClientMockGetTransitGatewayAttachmentPropagationsPages.RUnlock()
	return calls
}

// GetTransitGatewayAttachmentPropagationsPagesWithContext calls GetTransitGatewayAttachmentPropagationsPagesWithContextFunc.
func (mock *ec2ClientMock) GetTransitGatewayAttachmentPropagationsPagesWithContext(in1 context.Context, in2 *ec2.GetTransitGatewayAttachmentPropagationsInput, in3 func(*ec2.GetTransitGatewayAttachmentPropagationsOutput, bool) bool, in4 ...request.Option) error {
	if mock.GetTransitGatewayAttachmentPropagationsPagesWithContextFunc == nil {
		panic("ec2ClientMock.GetTransitGatewayAttachmentPropagationsPagesWithContextFunc: method is nil but ec2Client.GetTransitGatewayAttachmentPropagationsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.GetTransitGatewayAttachmentPropagationsInput
		In3 func(*ec2.GetTransitGatewayAttachmentPropagationsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockGetTransitGatewayAttachmentPropagationsPagesWithContext.Lock()
	mock.calls.GetTransitGatewayAttachmentPropagationsPagesWithContext = append(mock.calls.GetTransitGatewayAttachmentPropagationsPagesWithContext, callInfo)
	lockec2ClientMockGetTransitGatewayAttachmentPropagationsPagesWithContext.Unlock()
	return mock.GetTransitGatewayAttachmentPropagationsPagesWithContextFunc(in1, in2, in3, in4...)
}

// GetTransitGatewayAttachmentPropagationsPagesWithContextCalls gets all the calls that were made to GetTransitGatewayAttachmentPropagationsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.GetTransitGatewayAttachmentPropagationsPagesWithContextCalls())
func (mock *ec2ClientMock) GetTransitGatewayAttachmentPropagationsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.GetTransitGatewayAttachmentPropagationsInput
	In3 func(*ec2.GetTransitGatewayAttachmentPropagationsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.GetTransitGatewayAttachmentPropagationsInput
		In3 func(*ec2.GetTransitGatewayAttachmentPropagationsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockGetTransitGatewayAttachmentPropagationsPagesWithContext.RLock()
	calls = mock.calls.GetTransitGatewayAttachmentPropagationsPagesWithContext
	lockec2ClientMockGetTransitGatewayAttachmentPropagationsPagesWithContext.RUnlock()
	return calls
}

// GetTransitGatewayAttachmentPropagationsRequest calls GetTransitGatewayAttachmentPropagationsRequestFunc.
func (mock *ec2ClientMock) GetTransitGatewayAttachmentPropagationsRequest(in1 *ec2.GetTransitGatewayAttachmentPropagationsInput) (*request.Request, *ec2.GetTransitGatewayAttachmentPropagationsOutput) {
	if mock.GetTransitGatewayAttachmentPropagationsRequestFunc == nil {
		panic("ec2ClientMock.GetTransitGatewayAttachmentPropagationsRequestFunc: method is nil but ec2Client.GetTransitGatewayAttachmentPropagationsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.GetTransitGatewayAttachmentPropagationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetTransitGatewayAttachmentPropagationsRequest.Lock()
	mock.calls.GetTransitGatewayAttachmentPropagationsRequest = append(mock.calls.GetTransitGatewayAttachmentPropagationsRequest, callInfo)
	lockec2ClientMockGetTransitGatewayAttachmentPropagationsRequest.Unlock()
	return mock.GetTransitGatewayAttachmentPropagationsRequestFunc(in1)
}

// GetTransitGatewayAttachmentPropagationsRequestCalls gets all the calls that were made to GetTransitGatewayAttachmentPropagationsRequest.
// Check the length with:
//     len(mockedec2Client.GetTransitGatewayAttachmentPropagationsRequestCalls())
func (mock *ec2ClientMock) GetTransitGatewayAttachmentPropagationsRequestCalls() []struct {
	In1 *ec2.GetTransitGatewayAttachmentPropagationsInput
} {
	var calls []struct {
		In1 *ec2.GetTransitGatewayAttachmentPropagationsInput
	}
	lockec2ClientMockGetTransitGatewayAttachmentPropagationsRequest.RLock()
	calls = mock.calls.GetTransitGatewayAttachmentPropagationsRequest
	lockec2ClientMockGetTransitGatewayAttachmentPropagationsRequest.RUnlock()
	return calls
}

// GetTransitGatewayAttachmentPropagationsWithContext calls GetTransitGatewayAttachmentPropagationsWithContextFunc.
func (mock *ec2ClientMock) GetTransitGatewayAttachmentPropagationsWithContext(in1 context.Context, in2 *ec2.GetTransitGatewayAttachmentPropagationsInput, in3 ...request.Option) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error) {
	if mock.GetTransitGatewayAttachmentPropagationsWithContextFunc == nil {
		panic("ec2ClientMock.GetTransitGatewayAttachmentPropagationsWithContextFunc: method is nil but ec2Client.GetTransitGatewayAttachmentPropagationsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.GetTransitGatewayAttachmentPropagationsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockGetTransitGatewayAttachmentPropagationsWithContext.Lock()
	mock.calls.GetTransitGatewayAttachmentPropagationsWithContext = append(mock.calls.GetTransitGatewayAttachmentPropagationsWithContext, callInfo)
	lockec2ClientMockGetTransitGatewayAttachmentPropagationsWithContext.Unlock()
	return mock.GetTransitGatewayAttachmentPropagationsWithContextFunc(in1, in2, in3...)
}

// GetTransitGatewayAttachmentPropagationsWithContextCalls gets all the calls that were made to GetTransitGatewayAttachmentPropagationsWithContext.
// Check the length with:
//     len(mockedec2Client.GetTransitGatewayAttachmentPropagationsWithContextCalls())
func (mock *ec2ClientMock) GetTransitGatewayAttachmentPropagationsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.GetTransitGatewayAttachmentPropagationsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.GetTransitGatewayAttachmentPropagationsInput
		In3 []request.Option
	}
	lockec2ClientMockGetTransitGatewayAttachmentPropagationsWithContext.RLock()
	calls = mock.calls.GetTransitGatewayAttachmentPropagationsWithContext
	lockec2ClientMockGetTransitGatewayAttachmentPropagationsWithContext.RUnlock()
	return calls
}

// GetTransitGatewayMulticastDomainAssociations calls GetTransitGatewayMulticastDomainAssociationsFunc.
func (mock *ec2ClientMock) GetTransitGatewayMulticastDomainAssociations(in1 *ec2.GetTransitGatewayMulticastDomainAssociationsInput) (*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, error) {
	if mock.GetTransitGatewayMulticastDomainAssociationsFunc == nil {
		panic("ec2ClientMock.GetTransitGatewayMulticastDomainAssociationsFunc: method is nil but ec2Client.GetTransitGatewayMulticastDomainAssociations was just called")
	}
	callInfo := struct {
		In1 *ec2.GetTransitGatewayMulticastDomainAssociationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetTransitGatewayMulticastDomainAssociations.Lock()
	mock.calls.GetTransitGatewayMulticastDomainAssociations = append(mock.calls.GetTransitGatewayMulticastDomainAssociations, callInfo)
	lockec2ClientMockGetTransitGatewayMulticastDomainAssociations.Unlock()
	return mock.GetTransitGatewayMulticastDomainAssociationsFunc(in1)
}

// GetTransitGatewayMulticastDomainAssociationsCalls gets all the calls that were made to GetTransitGatewayMulticastDomainAssociations.
// Check the length with:
//     len(mockedec2Client.GetTransitGatewayMulticastDomainAssociationsCalls())
func (mock *ec2ClientMock) GetTransitGatewayMulticastDomainAssociationsCalls() []struct {
	In1 *ec2.GetTransitGatewayMulticastDomainAssociationsInput
} {
	var calls []struct {
		In1 *ec2.GetTransitGatewayMulticastDomainAssociationsInput
	}
	lockec2ClientMockGetTransitGatewayMulticastDomainAssociations.RLock()
	calls = mock.calls.GetTransitGatewayMulticastDomainAssociations
	lockec2ClientMockGetTransitGatewayMulticastDomainAssociations.RUnlock()
	return calls
}

// GetTransitGatewayMulticastDomainAssociationsRequest calls GetTransitGatewayMulticastDomainAssociationsRequestFunc.
func (mock *ec2ClientMock) GetTransitGatewayMulticastDomainAssociationsRequest(in1 *ec2.GetTransitGatewayMulticastDomainAssociationsInput) (*request.Request, *ec2.GetTransitGatewayMulticastDomainAssociationsOutput) {
	if mock.GetTransitGatewayMulticastDomainAssociationsRequestFunc == nil {
		panic("ec2ClientMock.GetTransitGatewayMulticastDomainAssociationsRequestFunc: method is nil but ec2Client.GetTransitGatewayMulticastDomainAssociationsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.GetTransitGatewayMulticastDomainAssociationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetTransitGatewayMulticastDomainAssociationsRequest.Lock()
	mock.calls.GetTransitGatewayMulticastDomainAssociationsRequest = append(mock.calls.GetTransitGatewayMulticastDomainAssociationsRequest, callInfo)
	lockec2ClientMockGetTransitGatewayMulticastDomainAssociationsRequest.Unlock()
	return mock.GetTransitGatewayMulticastDomainAssociationsRequestFunc(in1)
}

// GetTransitGatewayMulticastDomainAssociationsRequestCalls gets all the calls that were made to GetTransitGatewayMulticastDomainAssociationsRequest.
// Check the length with:
//     len(mockedec2Client.GetTransitGatewayMulticastDomainAssociationsRequestCalls())
func (mock *ec2ClientMock) GetTransitGatewayMulticastDomainAssociationsRequestCalls() []struct {
	In1 *ec2.GetTransitGatewayMulticastDomainAssociationsInput
} {
	var calls []struct {
		In1 *ec2.GetTransitGatewayMulticastDomainAssociationsInput
	}
	lockec2ClientMockGetTransitGatewayMulticastDomainAssociationsRequest.RLock()
	calls = mock.calls.GetTransitGatewayMulticastDomainAssociationsRequest
	lockec2ClientMockGetTransitGatewayMulticastDomainAssociationsRequest.RUnlock()
	return calls
}

// GetTransitGatewayMulticastDomainAssociationsWithContext calls GetTransitGatewayMulticastDomainAssociationsWithContextFunc.
func (mock *ec2ClientMock) GetTransitGatewayMulticastDomainAssociationsWithContext(in1 context.Context, in2 *ec2.GetTransitGatewayMulticastDomainAssociationsInput, in3 ...request.Option) (*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, error) {
	if mock.GetTransitGatewayMulticastDomainAssociationsWithContextFunc == nil {
		panic("ec2ClientMock.GetTransitGatewayMulticastDomainAssociationsWithContextFunc: method is nil but ec2Client.GetTransitGatewayMulticastDomainAssociationsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.GetTransitGatewayMulticastDomainAssociationsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockGetTransitGatewayMulticastDomainAssociationsWithContext.Lock()
	mock.calls.GetTransitGatewayMulticastDomainAssociationsWithContext = append(mock.calls.GetTransitGatewayMulticastDomainAssociationsWithContext, callInfo)
	lockec2ClientMockGetTransitGatewayMulticastDomainAssociationsWithContext.Unlock()
	return mock.GetTransitGatewayMulticastDomainAssociationsWithContextFunc(in1, in2, in3...)
}

// GetTransitGatewayMulticastDomainAssociationsWithContextCalls gets all the calls that were made to GetTransitGatewayMulticastDomainAssociationsWithContext.
// Check the length with:
//     len(mockedec2Client.GetTransitGatewayMulticastDomainAssociationsWithContextCalls())
func (mock *ec2ClientMock) GetTransitGatewayMulticastDomainAssociationsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.GetTransitGatewayMulticastDomainAssociationsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.GetTransitGatewayMulticastDomainAssociationsInput
		In3 []request.Option
	}
	lockec2ClientMockGetTransitGatewayMulticastDomainAssociationsWithContext.RLock()
	calls = mock.calls.GetTransitGatewayMulticastDomainAssociationsWithContext
	lockec2ClientMockGetTransitGatewayMulticastDomainAssociationsWithContext.RUnlock()
	return calls
}

// GetTransitGatewayRouteTableAssociations calls GetTransitGatewayRouteTableAssociationsFunc.
func (mock *ec2ClientMock) GetTransitGatewayRouteTableAssociations(in1 *ec2.GetTransitGatewayRouteTableAssociationsInput) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error) {
	if mock.GetTransitGatewayRouteTableAssociationsFunc == nil {
		panic("ec2ClientMock.GetTransitGatewayRouteTableAssociationsFunc: method is nil but ec2Client.GetTransitGatewayRouteTableAssociations was just called")
	}
	callInfo := struct {
		In1 *ec2.GetTransitGatewayRouteTableAssociationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetTransitGatewayRouteTableAssociations.Lock()
	mock.calls.GetTransitGatewayRouteTableAssociations = append(mock.calls.GetTransitGatewayRouteTableAssociations, callInfo)
	lockec2ClientMockGetTransitGatewayRouteTableAssociations.Unlock()
	return mock.GetTransitGatewayRouteTableAssociationsFunc(in1)
}

// GetTransitGatewayRouteTableAssociationsCalls gets all the calls that were made to GetTransitGatewayRouteTableAssociations.
// Check the length with:
//     len(mockedec2Client.GetTransitGatewayRouteTableAssociationsCalls())
func (mock *ec2ClientMock) GetTransitGatewayRouteTableAssociationsCalls() []struct {
	In1 *ec2.GetTransitGatewayRouteTableAssociationsInput
} {
	var calls []struct {
		In1 *ec2.GetTransitGatewayRouteTableAssociationsInput
	}
	lockec2ClientMockGetTransitGatewayRouteTableAssociations.RLock()
	calls = mock.calls.GetTransitGatewayRouteTableAssociations
	lockec2ClientMockGetTransitGatewayRouteTableAssociations.RUnlock()
	return calls
}

// GetTransitGatewayRouteTableAssociationsPages calls GetTransitGatewayRouteTableAssociationsPagesFunc.
func (mock *ec2ClientMock) GetTransitGatewayRouteTableAssociationsPages(in1 *ec2.GetTransitGatewayRouteTableAssociationsInput, in2 func(*ec2.GetTransitGatewayRouteTableAssociationsOutput, bool) bool) error {
	if mock.GetTransitGatewayRouteTableAssociationsPagesFunc == nil {
		panic("ec2ClientMock.GetTransitGatewayRouteTableAssociationsPagesFunc: method is nil but ec2Client.GetTransitGatewayRouteTableAssociationsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.GetTransitGatewayRouteTableAssociationsInput
		In2 func(*ec2.GetTransitGatewayRouteTableAssociationsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockGetTransitGatewayRouteTableAssociationsPages.Lock()
	mock.calls.GetTransitGatewayRouteTableAssociationsPages = append(mock.calls.GetTransitGatewayRouteTableAssociationsPages, callInfo)
	lockec2ClientMockGetTransitGatewayRouteTableAssociationsPages.Unlock()
	return mock.GetTransitGatewayRouteTableAssociationsPagesFunc(in1, in2)
}

// GetTransitGatewayRouteTableAssociationsPagesCalls gets all the calls that were made to GetTransitGatewayRouteTableAssociationsPages.
// Check the length with:
//     len(mockedec2Client.GetTransitGatewayRouteTableAssociationsPagesCalls())
func (mock *ec2ClientMock) GetTransitGatewayRouteTableAssociationsPagesCalls() []struct {
	In1 *ec2.GetTransitGatewayRouteTableAssociationsInput
	In2 func(*ec2.GetTransitGatewayRouteTableAssociationsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.GetTransitGatewayRouteTableAssociationsInput
		In2 func(*ec2.GetTransitGatewayRouteTableAssociationsOutput, bool) bool
	}
	lockec2ClientMockGetTransitGatewayRouteTableAssociationsPages.RLock()
	calls = mock.calls.GetTransitGatewayRouteTableAssociationsPages
	lockec2ClientMockGetTransitGatewayRouteTableAssociationsPages.RUnlock()
	return calls
}

// GetTransitGatewayRouteTableAssociationsPagesWithContext calls GetTransitGatewayRouteTableAssociationsPagesWithContextFunc.
func (mock *ec2ClientMock) GetTransitGatewayRouteTableAssociationsPagesWithContext(in1 context.Context, in2 *ec2.GetTransitGatewayRouteTableAssociationsInput, in3 func(*ec2.GetTransitGatewayRouteTableAssociationsOutput, bool) bool, in4 ...request.Option) error {
	if mock.GetTransitGatewayRouteTableAssociationsPagesWithContextFunc == nil {
		panic("ec2ClientMock.GetTransitGatewayRouteTableAssociationsPagesWithContextFunc: method is nil but ec2Client.GetTransitGatewayRouteTableAssociationsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.GetTransitGatewayRouteTableAssociationsInput
		In3 func(*ec2.GetTransitGatewayRouteTableAssociationsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockGetTransitGatewayRouteTableAssociationsPagesWithContext.Lock()
	mock.calls.GetTransitGatewayRouteTableAssociationsPagesWithContext = append(mock.calls.GetTransitGatewayRouteTableAssociationsPagesWithContext, callInfo)
	lockec2ClientMockGetTransitGatewayRouteTableAssociationsPagesWithContext.Unlock()
	return mock.GetTransitGatewayRouteTableAssociationsPagesWithContextFunc(in1, in2, in3, in4...)
}

// GetTransitGatewayRouteTableAssociationsPagesWithContextCalls gets all the calls that were made to GetTransitGatewayRouteTableAssociationsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.GetTransitGatewayRouteTableAssociationsPagesWithContextCalls())
func (mock *ec2ClientMock) GetTransitGatewayRouteTableAssociationsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.GetTransitGatewayRouteTableAssociationsInput
	In3 func(*ec2.GetTransitGatewayRouteTableAssociationsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.GetTransitGatewayRouteTableAssociationsInput
		In3 func(*ec2.GetTransitGatewayRouteTableAssociationsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockGetTransitGatewayRouteTableAssociationsPagesWithContext.RLock()
	calls = mock.calls.GetTransitGatewayRouteTableAssociationsPagesWithContext
	lockec2ClientMockGetTransitGatewayRouteTableAssociationsPagesWithContext.RUnlock()
	return calls
}

// GetTransitGatewayRouteTableAssociationsRequest calls GetTransitGatewayRouteTableAssociationsRequestFunc.
func (mock *ec2ClientMock) GetTransitGatewayRouteTableAssociationsRequest(in1 *ec2.GetTransitGatewayRouteTableAssociationsInput) (*request.Request, *ec2.GetTransitGatewayRouteTableAssociationsOutput) {
	if mock.GetTransitGatewayRouteTableAssociationsRequestFunc == nil {
		panic("ec2ClientMock.GetTransitGatewayRouteTableAssociationsRequestFunc: method is nil but ec2Client.GetTransitGatewayRouteTableAssociationsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.GetTransitGatewayRouteTableAssociationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetTransitGatewayRouteTableAssociationsRequest.Lock()
	mock.calls.GetTransitGatewayRouteTableAssociationsRequest = append(mock.calls.GetTransitGatewayRouteTableAssociationsRequest, callInfo)
	lockec2ClientMockGetTransitGatewayRouteTableAssociationsRequest.Unlock()
	return mock.GetTransitGatewayRouteTableAssociationsRequestFunc(in1)
}

// GetTransitGatewayRouteTableAssociationsRequestCalls gets all the calls that were made to GetTransitGatewayRouteTableAssociationsRequest.
// Check the length with:
//     len(mockedec2Client.GetTransitGatewayRouteTableAssociationsRequestCalls())
func (mock *ec2ClientMock) GetTransitGatewayRouteTableAssociationsRequestCalls() []struct {
	In1 *ec2.GetTransitGatewayRouteTableAssociationsInput
} {
	var calls []struct {
		In1 *ec2.GetTransitGatewayRouteTableAssociationsInput
	}
	lockec2ClientMockGetTransitGatewayRouteTableAssociationsRequest.RLock()
	calls = mock.calls.GetTransitGatewayRouteTableAssociationsRequest
	lockec2ClientMockGetTransitGatewayRouteTableAssociationsRequest.RUnlock()
	return calls
}

// GetTransitGatewayRouteTableAssociationsWithContext calls GetTransitGatewayRouteTableAssociationsWithContextFunc.
func (mock *ec2ClientMock) GetTransitGatewayRouteTableAssociationsWithContext(in1 context.Context, in2 *ec2.GetTransitGatewayRouteTableAssociationsInput, in3 ...request.Option) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error) {
	if mock.GetTransitGatewayRouteTableAssociationsWithContextFunc == nil {
		panic("ec2ClientMock.GetTransitGatewayRouteTableAssociationsWithContextFunc: method is nil but ec2Client.GetTransitGatewayRouteTableAssociationsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.GetTransitGatewayRouteTableAssociationsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockGetTransitGatewayRouteTableAssociationsWithContext.Lock()
	mock.calls.GetTransitGatewayRouteTableAssociationsWithContext = append(mock.calls.GetTransitGatewayRouteTableAssociationsWithContext, callInfo)
	lockec2ClientMockGetTransitGatewayRouteTableAssociationsWithContext.Unlock()
	return mock.GetTransitGatewayRouteTableAssociationsWithContextFunc(in1, in2, in3...)
}

// GetTransitGatewayRouteTableAssociationsWithContextCalls gets all the calls that were made to GetTransitGatewayRouteTableAssociationsWithContext.
// Check the length with:
//     len(mockedec2Client.GetTransitGatewayRouteTableAssociationsWithContextCalls())
func (mock *ec2ClientMock) GetTransitGatewayRouteTableAssociationsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.GetTransitGatewayRouteTableAssociationsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.GetTransitGatewayRouteTableAssociationsInput
		In3 []request.Option
	}
	lockec2ClientMockGetTransitGatewayRouteTableAssociationsWithContext.RLock()
	calls = mock.calls.GetTransitGatewayRouteTableAssociationsWithContext
	lockec2ClientMockGetTransitGatewayRouteTableAssociationsWithContext.RUnlock()
	return calls
}

// GetTransitGatewayRouteTablePropagations calls GetTransitGatewayRouteTablePropagationsFunc.
func (mock *ec2ClientMock) GetTransitGatewayRouteTablePropagations(in1 *ec2.GetTransitGatewayRouteTablePropagationsInput) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error) {
	if mock.GetTransitGatewayRouteTablePropagationsFunc == nil {
		panic("ec2ClientMock.GetTransitGatewayRouteTablePropagationsFunc: method is nil but ec2Client.GetTransitGatewayRouteTablePropagations was just called")
	}
	callInfo := struct {
		In1 *ec2.GetTransitGatewayRouteTablePropagationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetTransitGatewayRouteTablePropagations.Lock()
	mock.calls.GetTransitGatewayRouteTablePropagations = append(mock.calls.GetTransitGatewayRouteTablePropagations, callInfo)
	lockec2ClientMockGetTransitGatewayRouteTablePropagations.Unlock()
	return mock.GetTransitGatewayRouteTablePropagationsFunc(in1)
}

// GetTransitGatewayRouteTablePropagationsCalls gets all the calls that were made to GetTransitGatewayRouteTablePropagations.
// Check the length with:
//     len(mockedec2Client.GetTransitGatewayRouteTablePropagationsCalls())
func (mock *ec2ClientMock) GetTransitGatewayRouteTablePropagationsCalls() []struct {
	In1 *ec2.GetTransitGatewayRouteTablePropagationsInput
} {
	var calls []struct {
		In1 *ec2.GetTransitGatewayRouteTablePropagationsInput
	}
	lockec2ClientMockGetTransitGatewayRouteTablePropagations.RLock()
	calls = mock.calls.GetTransitGatewayRouteTablePropagations
	lockec2ClientMockGetTransitGatewayRouteTablePropagations.RUnlock()
	return calls
}

// GetTransitGatewayRouteTablePropagationsPages calls GetTransitGatewayRouteTablePropagationsPagesFunc.
func (mock *ec2ClientMock) GetTransitGatewayRouteTablePropagationsPages(in1 *ec2.GetTransitGatewayRouteTablePropagationsInput, in2 func(*ec2.GetTransitGatewayRouteTablePropagationsOutput, bool) bool) error {
	if mock.GetTransitGatewayRouteTablePropagationsPagesFunc == nil {
		panic("ec2ClientMock.GetTransitGatewayRouteTablePropagationsPagesFunc: method is nil but ec2Client.GetTransitGatewayRouteTablePropagationsPages was just called")
	}
	callInfo := struct {
		In1 *ec2.GetTransitGatewayRouteTablePropagationsInput
		In2 func(*ec2.GetTransitGatewayRouteTablePropagationsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockec2ClientMockGetTransitGatewayRouteTablePropagationsPages.Lock()
	mock.calls.GetTransitGatewayRouteTablePropagationsPages = append(mock.calls.GetTransitGatewayRouteTablePropagationsPages, callInfo)
	lockec2ClientMockGetTransitGatewayRouteTablePropagationsPages.Unlock()
	return mock.GetTransitGatewayRouteTablePropagationsPagesFunc(in1, in2)
}

// GetTransitGatewayRouteTablePropagationsPagesCalls gets all the calls that were made to GetTransitGatewayRouteTablePropagationsPages.
// Check the length with:
//     len(mockedec2Client.GetTransitGatewayRouteTablePropagationsPagesCalls())
func (mock *ec2ClientMock) GetTransitGatewayRouteTablePropagationsPagesCalls() []struct {
	In1 *ec2.GetTransitGatewayRouteTablePropagationsInput
	In2 func(*ec2.GetTransitGatewayRouteTablePropagationsOutput, bool) bool
} {
	var calls []struct {
		In1 *ec2.GetTransitGatewayRouteTablePropagationsInput
		In2 func(*ec2.GetTransitGatewayRouteTablePropagationsOutput, bool) bool
	}
	lockec2ClientMockGetTransitGatewayRouteTablePropagationsPages.RLock()
	calls = mock.calls.GetTransitGatewayRouteTablePropagationsPages
	lockec2ClientMockGetTransitGatewayRouteTablePropagationsPages.RUnlock()
	return calls
}

// GetTransitGatewayRouteTablePropagationsPagesWithContext calls GetTransitGatewayRouteTablePropagationsPagesWithContextFunc.
func (mock *ec2ClientMock) GetTransitGatewayRouteTablePropagationsPagesWithContext(in1 context.Context, in2 *ec2.GetTransitGatewayRouteTablePropagationsInput, in3 func(*ec2.GetTransitGatewayRouteTablePropagationsOutput, bool) bool, in4 ...request.Option) error {
	if mock.GetTransitGatewayRouteTablePropagationsPagesWithContextFunc == nil {
		panic("ec2ClientMock.GetTransitGatewayRouteTablePropagationsPagesWithContextFunc: method is nil but ec2Client.GetTransitGatewayRouteTablePropagationsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.GetTransitGatewayRouteTablePropagationsInput
		In3 func(*ec2.GetTransitGatewayRouteTablePropagationsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockec2ClientMockGetTransitGatewayRouteTablePropagationsPagesWithContext.Lock()
	mock.calls.GetTransitGatewayRouteTablePropagationsPagesWithContext = append(mock.calls.GetTransitGatewayRouteTablePropagationsPagesWithContext, callInfo)
	lockec2ClientMockGetTransitGatewayRouteTablePropagationsPagesWithContext.Unlock()
	return mock.GetTransitGatewayRouteTablePropagationsPagesWithContextFunc(in1, in2, in3, in4...)
}

// GetTransitGatewayRouteTablePropagationsPagesWithContextCalls gets all the calls that were made to GetTransitGatewayRouteTablePropagationsPagesWithContext.
// Check the length with:
//     len(mockedec2Client.GetTransitGatewayRouteTablePropagationsPagesWithContextCalls())
func (mock *ec2ClientMock) GetTransitGatewayRouteTablePropagationsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.GetTransitGatewayRouteTablePropagationsInput
	In3 func(*ec2.GetTransitGatewayRouteTablePropagationsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.GetTransitGatewayRouteTablePropagationsInput
		In3 func(*ec2.GetTransitGatewayRouteTablePropagationsOutput, bool) bool
		In4 []request.Option
	}
	lockec2ClientMockGetTransitGatewayRouteTablePropagationsPagesWithContext.RLock()
	calls = mock.calls.GetTransitGatewayRouteTablePropagationsPagesWithContext
	lockec2ClientMockGetTransitGatewayRouteTablePropagationsPagesWithContext.RUnlock()
	return calls
}

// GetTransitGatewayRouteTablePropagationsRequest calls GetTransitGatewayRouteTablePropagationsRequestFunc.
func (mock *ec2ClientMock) GetTransitGatewayRouteTablePropagationsRequest(in1 *ec2.GetTransitGatewayRouteTablePropagationsInput) (*request.Request, *ec2.GetTransitGatewayRouteTablePropagationsOutput) {
	if mock.GetTransitGatewayRouteTablePropagationsRequestFunc == nil {
		panic("ec2ClientMock.GetTransitGatewayRouteTablePropagationsRequestFunc: method is nil but ec2Client.GetTransitGatewayRouteTablePropagationsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.GetTransitGatewayRouteTablePropagationsInput
	}{
		In1: in1,
	}
	lockec2ClientMockGetTransitGatewayRouteTablePropagationsRequest.Lock()
	mock.calls.GetTransitGatewayRouteTablePropagationsRequest = append(mock.calls.GetTransitGatewayRouteTablePropagationsRequest, callInfo)
	lockec2ClientMockGetTransitGatewayRouteTablePropagationsRequest.Unlock()
	return mock.GetTransitGatewayRouteTablePropagationsRequestFunc(in1)
}

// GetTransitGatewayRouteTablePropagationsRequestCalls gets all the calls that were made to GetTransitGatewayRouteTablePropagationsRequest.
// Check the length with:
//     len(mockedec2Client.GetTransitGatewayRouteTablePropagationsRequestCalls())
func (mock *ec2ClientMock) GetTransitGatewayRouteTablePropagationsRequestCalls() []struct {
	In1 *ec2.GetTransitGatewayRouteTablePropagationsInput
} {
	var calls []struct {
		In1 *ec2.GetTransitGatewayRouteTablePropagationsInput
	}
	lockec2ClientMockGetTransitGatewayRouteTablePropagationsRequest.RLock()
	calls = mock.calls.GetTransitGatewayRouteTablePropagationsRequest
	lockec2ClientMockGetTransitGatewayRouteTablePropagationsRequest.RUnlock()
	return calls
}

// GetTransitGatewayRouteTablePropagationsWithContext calls GetTransitGatewayRouteTablePropagationsWithContextFunc.
func (mock *ec2ClientMock) GetTransitGatewayRouteTablePropagationsWithContext(in1 context.Context, in2 *ec2.GetTransitGatewayRouteTablePropagationsInput, in3 ...request.Option) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error) {
	if mock.GetTransitGatewayRouteTablePropagationsWithContextFunc == nil {
		panic("ec2ClientMock.GetTransitGatewayRouteTablePropagationsWithContextFunc: method is nil but ec2Client.GetTransitGatewayRouteTablePropagationsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.GetTransitGatewayRouteTablePropagationsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockGetTransitGatewayRouteTablePropagationsWithContext.Lock()
	mock.calls.GetTransitGatewayRouteTablePropagationsWithContext = append(mock.calls.GetTransitGatewayRouteTablePropagationsWithContext, callInfo)
	lockec2ClientMockGetTransitGatewayRouteTablePropagationsWithContext.Unlock()
	return mock.GetTransitGatewayRouteTablePropagationsWithContextFunc(in1, in2, in3...)
}

// GetTransitGatewayRouteTablePropagationsWithContextCalls gets all the calls that were made to GetTransitGatewayRouteTablePropagationsWithContext.
// Check the length with:
//     len(mockedec2Client.GetTransitGatewayRouteTablePropagationsWithContextCalls())
func (mock *ec2ClientMock) GetTransitGatewayRouteTablePropagationsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.GetTransitGatewayRouteTablePropagationsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.GetTransitGatewayRouteTablePropagationsInput
		In3 []request.Option
	}
	lockec2ClientMockGetTransitGatewayRouteTablePropagationsWithContext.RLock()
	calls = mock.calls.GetTransitGatewayRouteTablePropagationsWithContext
	lockec2ClientMockGetTransitGatewayRouteTablePropagationsWithContext.RUnlock()
	return calls
}

// ImportClientVpnClientCertificateRevocationList calls ImportClientVpnClientCertificateRevocationListFunc.
func (mock *ec2ClientMock) ImportClientVpnClientCertificateRevocationList(in1 *ec2.ImportClientVpnClientCertificateRevocationListInput) (*ec2.ImportClientVpnClientCertificateRevocationListOutput, error) {
	if mock.ImportClientVpnClientCertificateRevocationListFunc == nil {
		panic("ec2ClientMock.ImportClientVpnClientCertificateRevocationListFunc: method is nil but ec2Client.ImportClientVpnClientCertificateRevocationList was just called")
	}
	callInfo := struct {
		In1 *ec2.ImportClientVpnClientCertificateRevocationListInput
	}{
		In1: in1,
	}
	lockec2ClientMockImportClientVpnClientCertificateRevocationList.Lock()
	mock.calls.ImportClientVpnClientCertificateRevocationList = append(mock.calls.ImportClientVpnClientCertificateRevocationList, callInfo)
	lockec2ClientMockImportClientVpnClientCertificateRevocationList.Unlock()
	return mock.ImportClientVpnClientCertificateRevocationListFunc(in1)
}

// ImportClientVpnClientCertificateRevocationListCalls gets all the calls that were made to ImportClientVpnClientCertificateRevocationList.
// Check the length with:
//     len(mockedec2Client.ImportClientVpnClientCertificateRevocationListCalls())
func (mock *ec2ClientMock) ImportClientVpnClientCertificateRevocationListCalls() []struct {
	In1 *ec2.ImportClientVpnClientCertificateRevocationListInput
} {
	var calls []struct {
		In1 *ec2.ImportClientVpnClientCertificateRevocationListInput
	}
	lockec2ClientMockImportClientVpnClientCertificateRevocationList.RLock()
	calls = mock.calls.ImportClientVpnClientCertificateRevocationList
	lockec2ClientMockImportClientVpnClientCertificateRevocationList.RUnlock()
	return calls
}

// ImportClientVpnClientCertificateRevocationListRequest calls ImportClientVpnClientCertificateRevocationListRequestFunc.
func (mock *ec2ClientMock) ImportClientVpnClientCertificateRevocationListRequest(in1 *ec2.ImportClientVpnClientCertificateRevocationListInput) (*request.Request, *ec2.ImportClientVpnClientCertificateRevocationListOutput) {
	if mock.ImportClientVpnClientCertificateRevocationListRequestFunc == nil {
		panic("ec2ClientMock.ImportClientVpnClientCertificateRevocationListRequestFunc: method is nil but ec2Client.ImportClientVpnClientCertificateRevocationListRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ImportClientVpnClientCertificateRevocationListInput
	}{
		In1: in1,
	}
	lockec2ClientMockImportClientVpnClientCertificateRevocationListRequest.Lock()
	mock.calls.ImportClientVpnClientCertificateRevocationListRequest = append(mock.calls.ImportClientVpnClientCertificateRevocationListRequest, callInfo)
	lockec2ClientMockImportClientVpnClientCertificateRevocationListRequest.Unlock()
	return mock.ImportClientVpnClientCertificateRevocationListRequestFunc(in1)
}

// ImportClientVpnClientCertificateRevocationListRequestCalls gets all the calls that were made to ImportClientVpnClientCertificateRevocationListRequest.
// Check the length with:
//     len(mockedec2Client.ImportClientVpnClientCertificateRevocationListRequestCalls())
func (mock *ec2ClientMock) ImportClientVpnClientCertificateRevocationListRequestCalls() []struct {
	In1 *ec2.ImportClientVpnClientCertificateRevocationListInput
} {
	var calls []struct {
		In1 *ec2.ImportClientVpnClientCertificateRevocationListInput
	}
	lockec2ClientMockImportClientVpnClientCertificateRevocationListRequest.RLock()
	calls = mock.calls.ImportClientVpnClientCertificateRevocationListRequest
	lockec2ClientMockImportClientVpnClientCertificateRevocationListRequest.RUnlock()
	return calls
}

// ImportClientVpnClientCertificateRevocationListWithContext calls ImportClientVpnClientCertificateRevocationListWithContextFunc.
func (mock *ec2ClientMock) ImportClientVpnClientCertificateRevocationListWithContext(in1 context.Context, in2 *ec2.ImportClientVpnClientCertificateRevocationListInput, in3 ...request.Option) (*ec2.ImportClientVpnClientCertificateRevocationListOutput, error) {
	if mock.ImportClientVpnClientCertificateRevocationListWithContextFunc == nil {
		panic("ec2ClientMock.ImportClientVpnClientCertificateRevocationListWithContextFunc: method is nil but ec2Client.ImportClientVpnClientCertificateRevocationListWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ImportClientVpnClientCertificateRevocationListInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockImportClientVpnClientCertificateRevocationListWithContext.Lock()
	mock.calls.ImportClientVpnClientCertificateRevocationListWithContext = append(mock.calls.ImportClientVpnClientCertificateRevocationListWithContext, callInfo)
	lockec2ClientMockImportClientVpnClientCertificateRevocationListWithContext.Unlock()
	return mock.ImportClientVpnClientCertificateRevocationListWithContextFunc(in1, in2, in3...)
}

// ImportClientVpnClientCertificateRevocationListWithContextCalls gets all the calls that were made to ImportClientVpnClientCertificateRevocationListWithContext.
// Check the length with:
//     len(mockedec2Client.ImportClientVpnClientCertificateRevocationListWithContextCalls())
func (mock *ec2ClientMock) ImportClientVpnClientCertificateRevocationListWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ImportClientVpnClientCertificateRevocationListInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ImportClientVpnClientCertificateRevocationListInput
		In3 []request.Option
	}
	lockec2ClientMockImportClientVpnClientCertificateRevocationListWithContext.RLock()
	calls = mock.calls.ImportClientVpnClientCertificateRevocationListWithContext
	lockec2ClientMockImportClientVpnClientCertificateRevocationListWithContext.RUnlock()
	return calls
}

// ImportImage calls ImportImageFunc.
func (mock *ec2ClientMock) ImportImage(in1 *ec2.ImportImageInput) (*ec2.ImportImageOutput, error) {
	if mock.ImportImageFunc == nil {
		panic("ec2ClientMock.ImportImageFunc: method is nil but ec2Client.ImportImage was just called")
	}
	callInfo := struct {
		In1 *ec2.ImportImageInput
	}{
		In1: in1,
	}
	lockec2ClientMockImportImage.Lock()
	mock.calls.ImportImage = append(mock.calls.ImportImage, callInfo)
	lockec2ClientMockImportImage.Unlock()
	return mock.ImportImageFunc(in1)
}

// ImportImageCalls gets all the calls that were made to ImportImage.
// Check the length with:
//     len(mockedec2Client.ImportImageCalls())
func (mock *ec2ClientMock) ImportImageCalls() []struct {
	In1 *ec2.ImportImageInput
} {
	var calls []struct {
		In1 *ec2.ImportImageInput
	}
	lockec2ClientMockImportImage.RLock()
	calls = mock.calls.ImportImage
	lockec2ClientMockImportImage.RUnlock()
	return calls
}

// ImportImageRequest calls ImportImageRequestFunc.
func (mock *ec2ClientMock) ImportImageRequest(in1 *ec2.ImportImageInput) (*request.Request, *ec2.ImportImageOutput) {
	if mock.ImportImageRequestFunc == nil {
		panic("ec2ClientMock.ImportImageRequestFunc: method is nil but ec2Client.ImportImageRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ImportImageInput
	}{
		In1: in1,
	}
	lockec2ClientMockImportImageRequest.Lock()
	mock.calls.ImportImageRequest = append(mock.calls.ImportImageRequest, callInfo)
	lockec2ClientMockImportImageRequest.Unlock()
	return mock.ImportImageRequestFunc(in1)
}

// ImportImageRequestCalls gets all the calls that were made to ImportImageRequest.
// Check the length with:
//     len(mockedec2Client.ImportImageRequestCalls())
func (mock *ec2ClientMock) ImportImageRequestCalls() []struct {
	In1 *ec2.ImportImageInput
} {
	var calls []struct {
		In1 *ec2.ImportImageInput
	}
	lockec2ClientMockImportImageRequest.RLock()
	calls = mock.calls.ImportImageRequest
	lockec2ClientMockImportImageRequest.RUnlock()
	return calls
}

// ImportImageWithContext calls ImportImageWithContextFunc.
func (mock *ec2ClientMock) ImportImageWithContext(in1 context.Context, in2 *ec2.ImportImageInput, in3 ...request.Option) (*ec2.ImportImageOutput, error) {
	if mock.ImportImageWithContextFunc == nil {
		panic("ec2ClientMock.ImportImageWithContextFunc: method is nil but ec2Client.ImportImageWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ImportImageInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockImportImageWithContext.Lock()
	mock.calls.ImportImageWithContext = append(mock.calls.ImportImageWithContext, callInfo)
	lockec2ClientMockImportImageWithContext.Unlock()
	return mock.ImportImageWithContextFunc(in1, in2, in3...)
}

// ImportImageWithContextCalls gets all the calls that were made to ImportImageWithContext.
// Check the length with:
//     len(mockedec2Client.ImportImageWithContextCalls())
func (mock *ec2ClientMock) ImportImageWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ImportImageInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ImportImageInput
		In3 []request.Option
	}
	lockec2ClientMockImportImageWithContext.RLock()
	calls = mock.calls.ImportImageWithContext
	lockec2ClientMockImportImageWithContext.RUnlock()
	return calls
}

// ImportInstance calls ImportInstanceFunc.
func (mock *ec2ClientMock) ImportInstance(in1 *ec2.ImportInstanceInput) (*ec2.ImportInstanceOutput, error) {
	if mock.ImportInstanceFunc == nil {
		panic("ec2ClientMock.ImportInstanceFunc: method is nil but ec2Client.ImportInstance was just called")
	}
	callInfo := struct {
		In1 *ec2.ImportInstanceInput
	}{
		In1: in1,
	}
	lockec2ClientMockImportInstance.Lock()
	mock.calls.ImportInstance = append(mock.calls.ImportInstance, callInfo)
	lockec2ClientMockImportInstance.Unlock()
	return mock.ImportInstanceFunc(in1)
}

// ImportInstanceCalls gets all the calls that were made to ImportInstance.
// Check the length with:
//     len(mockedec2Client.ImportInstanceCalls())
func (mock *ec2ClientMock) ImportInstanceCalls() []struct {
	In1 *ec2.ImportInstanceInput
} {
	var calls []struct {
		In1 *ec2.ImportInstanceInput
	}
	lockec2ClientMockImportInstance.RLock()
	calls = mock.calls.ImportInstance
	lockec2ClientMockImportInstance.RUnlock()
	return calls
}

// ImportInstanceRequest calls ImportInstanceRequestFunc.
func (mock *ec2ClientMock) ImportInstanceRequest(in1 *ec2.ImportInstanceInput) (*request.Request, *ec2.ImportInstanceOutput) {
	if mock.ImportInstanceRequestFunc == nil {
		panic("ec2ClientMock.ImportInstanceRequestFunc: method is nil but ec2Client.ImportInstanceRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ImportInstanceInput
	}{
		In1: in1,
	}
	lockec2ClientMockImportInstanceRequest.Lock()
	mock.calls.ImportInstanceRequest = append(mock.calls.ImportInstanceRequest, callInfo)
	lockec2ClientMockImportInstanceRequest.Unlock()
	return mock.ImportInstanceRequestFunc(in1)
}

// ImportInstanceRequestCalls gets all the calls that were made to ImportInstanceRequest.
// Check the length with:
//     len(mockedec2Client.ImportInstanceRequestCalls())
func (mock *ec2ClientMock) ImportInstanceRequestCalls() []struct {
	In1 *ec2.ImportInstanceInput
} {
	var calls []struct {
		In1 *ec2.ImportInstanceInput
	}
	lockec2ClientMockImportInstanceRequest.RLock()
	calls = mock.calls.ImportInstanceRequest
	lockec2ClientMockImportInstanceRequest.RUnlock()
	return calls
}

// ImportInstanceWithContext calls ImportInstanceWithContextFunc.
func (mock *ec2ClientMock) ImportInstanceWithContext(in1 context.Context, in2 *ec2.ImportInstanceInput, in3 ...request.Option) (*ec2.ImportInstanceOutput, error) {
	if mock.ImportInstanceWithContextFunc == nil {
		panic("ec2ClientMock.ImportInstanceWithContextFunc: method is nil but ec2Client.ImportInstanceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ImportInstanceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockImportInstanceWithContext.Lock()
	mock.calls.ImportInstanceWithContext = append(mock.calls.ImportInstanceWithContext, callInfo)
	lockec2ClientMockImportInstanceWithContext.Unlock()
	return mock.ImportInstanceWithContextFunc(in1, in2, in3...)
}

// ImportInstanceWithContextCalls gets all the calls that were made to ImportInstanceWithContext.
// Check the length with:
//     len(mockedec2Client.ImportInstanceWithContextCalls())
func (mock *ec2ClientMock) ImportInstanceWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ImportInstanceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ImportInstanceInput
		In3 []request.Option
	}
	lockec2ClientMockImportInstanceWithContext.RLock()
	calls = mock.calls.ImportInstanceWithContext
	lockec2ClientMockImportInstanceWithContext.RUnlock()
	return calls
}

// ImportKeyPair calls ImportKeyPairFunc.
func (mock *ec2ClientMock) ImportKeyPair(in1 *ec2.ImportKeyPairInput) (*ec2.ImportKeyPairOutput, error) {
	if mock.ImportKeyPairFunc == nil {
		panic("ec2ClientMock.ImportKeyPairFunc: method is nil but ec2Client.ImportKeyPair was just called")
	}
	callInfo := struct {
		In1 *ec2.ImportKeyPairInput
	}{
		In1: in1,
	}
	lockec2ClientMockImportKeyPair.Lock()
	mock.calls.ImportKeyPair = append(mock.calls.ImportKeyPair, callInfo)
	lockec2ClientMockImportKeyPair.Unlock()
	return mock.ImportKeyPairFunc(in1)
}

// ImportKeyPairCalls gets all the calls that were made to ImportKeyPair.
// Check the length with:
//     len(mockedec2Client.ImportKeyPairCalls())
func (mock *ec2ClientMock) ImportKeyPairCalls() []struct {
	In1 *ec2.ImportKeyPairInput
} {
	var calls []struct {
		In1 *ec2.ImportKeyPairInput
	}
	lockec2ClientMockImportKeyPair.RLock()
	calls = mock.calls.ImportKeyPair
	lockec2ClientMockImportKeyPair.RUnlock()
	return calls
}

// ImportKeyPairRequest calls ImportKeyPairRequestFunc.
func (mock *ec2ClientMock) ImportKeyPairRequest(in1 *ec2.ImportKeyPairInput) (*request.Request, *ec2.ImportKeyPairOutput) {
	if mock.ImportKeyPairRequestFunc == nil {
		panic("ec2ClientMock.ImportKeyPairRequestFunc: method is nil but ec2Client.ImportKeyPairRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ImportKeyPairInput
	}{
		In1: in1,
	}
	lockec2ClientMockImportKeyPairRequest.Lock()
	mock.calls.ImportKeyPairRequest = append(mock.calls.ImportKeyPairRequest, callInfo)
	lockec2ClientMockImportKeyPairRequest.Unlock()
	return mock.ImportKeyPairRequestFunc(in1)
}

// ImportKeyPairRequestCalls gets all the calls that were made to ImportKeyPairRequest.
// Check the length with:
//     len(mockedec2Client.ImportKeyPairRequestCalls())
func (mock *ec2ClientMock) ImportKeyPairRequestCalls() []struct {
	In1 *ec2.ImportKeyPairInput
} {
	var calls []struct {
		In1 *ec2.ImportKeyPairInput
	}
	lockec2ClientMockImportKeyPairRequest.RLock()
	calls = mock.calls.ImportKeyPairRequest
	lockec2ClientMockImportKeyPairRequest.RUnlock()
	return calls
}

// ImportKeyPairWithContext calls ImportKeyPairWithContextFunc.
func (mock *ec2ClientMock) ImportKeyPairWithContext(in1 context.Context, in2 *ec2.ImportKeyPairInput, in3 ...request.Option) (*ec2.ImportKeyPairOutput, error) {
	if mock.ImportKeyPairWithContextFunc == nil {
		panic("ec2ClientMock.ImportKeyPairWithContextFunc: method is nil but ec2Client.ImportKeyPairWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ImportKeyPairInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockImportKeyPairWithContext.Lock()
	mock.calls.ImportKeyPairWithContext = append(mock.calls.ImportKeyPairWithContext, callInfo)
	lockec2ClientMockImportKeyPairWithContext.Unlock()
	return mock.ImportKeyPairWithContextFunc(in1, in2, in3...)
}

// ImportKeyPairWithContextCalls gets all the calls that were made to ImportKeyPairWithContext.
// Check the length with:
//     len(mockedec2Client.ImportKeyPairWithContextCalls())
func (mock *ec2ClientMock) ImportKeyPairWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ImportKeyPairInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ImportKeyPairInput
		In3 []request.Option
	}
	lockec2ClientMockImportKeyPairWithContext.RLock()
	calls = mock.calls.ImportKeyPairWithContext
	lockec2ClientMockImportKeyPairWithContext.RUnlock()
	return calls
}

// ImportSnapshot calls ImportSnapshotFunc.
func (mock *ec2ClientMock) ImportSnapshot(in1 *ec2.ImportSnapshotInput) (*ec2.ImportSnapshotOutput, error) {
	if mock.ImportSnapshotFunc == nil {
		panic("ec2ClientMock.ImportSnapshotFunc: method is nil but ec2Client.ImportSnapshot was just called")
	}
	callInfo := struct {
		In1 *ec2.ImportSnapshotInput
	}{
		In1: in1,
	}
	lockec2ClientMockImportSnapshot.Lock()
	mock.calls.ImportSnapshot = append(mock.calls.ImportSnapshot, callInfo)
	lockec2ClientMockImportSnapshot.Unlock()
	return mock.ImportSnapshotFunc(in1)
}

// ImportSnapshotCalls gets all the calls that were made to ImportSnapshot.
// Check the length with:
//     len(mockedec2Client.ImportSnapshotCalls())
func (mock *ec2ClientMock) ImportSnapshotCalls() []struct {
	In1 *ec2.ImportSnapshotInput
} {
	var calls []struct {
		In1 *ec2.ImportSnapshotInput
	}
	lockec2ClientMockImportSnapshot.RLock()
	calls = mock.calls.ImportSnapshot
	lockec2ClientMockImportSnapshot.RUnlock()
	return calls
}

// ImportSnapshotRequest calls ImportSnapshotRequestFunc.
func (mock *ec2ClientMock) ImportSnapshotRequest(in1 *ec2.ImportSnapshotInput) (*request.Request, *ec2.ImportSnapshotOutput) {
	if mock.ImportSnapshotRequestFunc == nil {
		panic("ec2ClientMock.ImportSnapshotRequestFunc: method is nil but ec2Client.ImportSnapshotRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ImportSnapshotInput
	}{
		In1: in1,
	}
	lockec2ClientMockImportSnapshotRequest.Lock()
	mock.calls.ImportSnapshotRequest = append(mock.calls.ImportSnapshotRequest, callInfo)
	lockec2ClientMockImportSnapshotRequest.Unlock()
	return mock.ImportSnapshotRequestFunc(in1)
}

// ImportSnapshotRequestCalls gets all the calls that were made to ImportSnapshotRequest.
// Check the length with:
//     len(mockedec2Client.ImportSnapshotRequestCalls())
func (mock *ec2ClientMock) ImportSnapshotRequestCalls() []struct {
	In1 *ec2.ImportSnapshotInput
} {
	var calls []struct {
		In1 *ec2.ImportSnapshotInput
	}
	lockec2ClientMockImportSnapshotRequest.RLock()
	calls = mock.calls.ImportSnapshotRequest
	lockec2ClientMockImportSnapshotRequest.RUnlock()
	return calls
}

// ImportSnapshotWithContext calls ImportSnapshotWithContextFunc.
func (mock *ec2ClientMock) ImportSnapshotWithContext(in1 context.Context, in2 *ec2.ImportSnapshotInput, in3 ...request.Option) (*ec2.ImportSnapshotOutput, error) {
	if mock.ImportSnapshotWithContextFunc == nil {
		panic("ec2ClientMock.ImportSnapshotWithContextFunc: method is nil but ec2Client.ImportSnapshotWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ImportSnapshotInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockImportSnapshotWithContext.Lock()
	mock.calls.ImportSnapshotWithContext = append(mock.calls.ImportSnapshotWithContext, callInfo)
	lockec2ClientMockImportSnapshotWithContext.Unlock()
	return mock.ImportSnapshotWithContextFunc(in1, in2, in3...)
}

// ImportSnapshotWithContextCalls gets all the calls that were made to ImportSnapshotWithContext.
// Check the length with:
//     len(mockedec2Client.ImportSnapshotWithContextCalls())
func (mock *ec2ClientMock) ImportSnapshotWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ImportSnapshotInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ImportSnapshotInput
		In3 []request.Option
	}
	lockec2ClientMockImportSnapshotWithContext.RLock()
	calls = mock.calls.ImportSnapshotWithContext
	lockec2ClientMockImportSnapshotWithContext.RUnlock()
	return calls
}

// ImportVolume calls ImportVolumeFunc.
func (mock *ec2ClientMock) ImportVolume(in1 *ec2.ImportVolumeInput) (*ec2.ImportVolumeOutput, error) {
	if mock.ImportVolumeFunc == nil {
		panic("ec2ClientMock.ImportVolumeFunc: method is nil but ec2Client.ImportVolume was just called")
	}
	callInfo := struct {
		In1 *ec2.ImportVolumeInput
	}{
		In1: in1,
	}
	lockec2ClientMockImportVolume.Lock()
	mock.calls.ImportVolume = append(mock.calls.ImportVolume, callInfo)
	lockec2ClientMockImportVolume.Unlock()
	return mock.ImportVolumeFunc(in1)
}

// ImportVolumeCalls gets all the calls that were made to ImportVolume.
// Check the length with:
//     len(mockedec2Client.ImportVolumeCalls())
func (mock *ec2ClientMock) ImportVolumeCalls() []struct {
	In1 *ec2.ImportVolumeInput
} {
	var calls []struct {
		In1 *ec2.ImportVolumeInput
	}
	lockec2ClientMockImportVolume.RLock()
	calls = mock.calls.ImportVolume
	lockec2ClientMockImportVolume.RUnlock()
	return calls
}

// ImportVolumeRequest calls ImportVolumeRequestFunc.
func (mock *ec2ClientMock) ImportVolumeRequest(in1 *ec2.ImportVolumeInput) (*request.Request, *ec2.ImportVolumeOutput) {
	if mock.ImportVolumeRequestFunc == nil {
		panic("ec2ClientMock.ImportVolumeRequestFunc: method is nil but ec2Client.ImportVolumeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ImportVolumeInput
	}{
		In1: in1,
	}
	lockec2ClientMockImportVolumeRequest.Lock()
	mock.calls.ImportVolumeRequest = append(mock.calls.ImportVolumeRequest, callInfo)
	lockec2ClientMockImportVolumeRequest.Unlock()
	return mock.ImportVolumeRequestFunc(in1)
}

// ImportVolumeRequestCalls gets all the calls that were made to ImportVolumeRequest.
// Check the length with:
//     len(mockedec2Client.ImportVolumeRequestCalls())
func (mock *ec2ClientMock) ImportVolumeRequestCalls() []struct {
	In1 *ec2.ImportVolumeInput
} {
	var calls []struct {
		In1 *ec2.ImportVolumeInput
	}
	lockec2ClientMockImportVolumeRequest.RLock()
	calls = mock.calls.ImportVolumeRequest
	lockec2ClientMockImportVolumeRequest.RUnlock()
	return calls
}

// ImportVolumeWithContext calls ImportVolumeWithContextFunc.
func (mock *ec2ClientMock) ImportVolumeWithContext(in1 context.Context, in2 *ec2.ImportVolumeInput, in3 ...request.Option) (*ec2.ImportVolumeOutput, error) {
	if mock.ImportVolumeWithContextFunc == nil {
		panic("ec2ClientMock.ImportVolumeWithContextFunc: method is nil but ec2Client.ImportVolumeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ImportVolumeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockImportVolumeWithContext.Lock()
	mock.calls.ImportVolumeWithContext = append(mock.calls.ImportVolumeWithContext, callInfo)
	lockec2ClientMockImportVolumeWithContext.Unlock()
	return mock.ImportVolumeWithContextFunc(in1, in2, in3...)
}

// ImportVolumeWithContextCalls gets all the calls that were made to ImportVolumeWithContext.
// Check the length with:
//     len(mockedec2Client.ImportVolumeWithContextCalls())
func (mock *ec2ClientMock) ImportVolumeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ImportVolumeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ImportVolumeInput
		In3 []request.Option
	}
	lockec2ClientMockImportVolumeWithContext.RLock()
	calls = mock.calls.ImportVolumeWithContext
	lockec2ClientMockImportVolumeWithContext.RUnlock()
	return calls
}

// ModifyCapacityReservation calls ModifyCapacityReservationFunc.
func (mock *ec2ClientMock) ModifyCapacityReservation(in1 *ec2.ModifyCapacityReservationInput) (*ec2.ModifyCapacityReservationOutput, error) {
	if mock.ModifyCapacityReservationFunc == nil {
		panic("ec2ClientMock.ModifyCapacityReservationFunc: method is nil but ec2Client.ModifyCapacityReservation was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyCapacityReservationInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyCapacityReservation.Lock()
	mock.calls.ModifyCapacityReservation = append(mock.calls.ModifyCapacityReservation, callInfo)
	lockec2ClientMockModifyCapacityReservation.Unlock()
	return mock.ModifyCapacityReservationFunc(in1)
}

// ModifyCapacityReservationCalls gets all the calls that were made to ModifyCapacityReservation.
// Check the length with:
//     len(mockedec2Client.ModifyCapacityReservationCalls())
func (mock *ec2ClientMock) ModifyCapacityReservationCalls() []struct {
	In1 *ec2.ModifyCapacityReservationInput
} {
	var calls []struct {
		In1 *ec2.ModifyCapacityReservationInput
	}
	lockec2ClientMockModifyCapacityReservation.RLock()
	calls = mock.calls.ModifyCapacityReservation
	lockec2ClientMockModifyCapacityReservation.RUnlock()
	return calls
}

// ModifyCapacityReservationRequest calls ModifyCapacityReservationRequestFunc.
func (mock *ec2ClientMock) ModifyCapacityReservationRequest(in1 *ec2.ModifyCapacityReservationInput) (*request.Request, *ec2.ModifyCapacityReservationOutput) {
	if mock.ModifyCapacityReservationRequestFunc == nil {
		panic("ec2ClientMock.ModifyCapacityReservationRequestFunc: method is nil but ec2Client.ModifyCapacityReservationRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyCapacityReservationInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyCapacityReservationRequest.Lock()
	mock.calls.ModifyCapacityReservationRequest = append(mock.calls.ModifyCapacityReservationRequest, callInfo)
	lockec2ClientMockModifyCapacityReservationRequest.Unlock()
	return mock.ModifyCapacityReservationRequestFunc(in1)
}

// ModifyCapacityReservationRequestCalls gets all the calls that were made to ModifyCapacityReservationRequest.
// Check the length with:
//     len(mockedec2Client.ModifyCapacityReservationRequestCalls())
func (mock *ec2ClientMock) ModifyCapacityReservationRequestCalls() []struct {
	In1 *ec2.ModifyCapacityReservationInput
} {
	var calls []struct {
		In1 *ec2.ModifyCapacityReservationInput
	}
	lockec2ClientMockModifyCapacityReservationRequest.RLock()
	calls = mock.calls.ModifyCapacityReservationRequest
	lockec2ClientMockModifyCapacityReservationRequest.RUnlock()
	return calls
}

// ModifyCapacityReservationWithContext calls ModifyCapacityReservationWithContextFunc.
func (mock *ec2ClientMock) ModifyCapacityReservationWithContext(in1 context.Context, in2 *ec2.ModifyCapacityReservationInput, in3 ...request.Option) (*ec2.ModifyCapacityReservationOutput, error) {
	if mock.ModifyCapacityReservationWithContextFunc == nil {
		panic("ec2ClientMock.ModifyCapacityReservationWithContextFunc: method is nil but ec2Client.ModifyCapacityReservationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyCapacityReservationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyCapacityReservationWithContext.Lock()
	mock.calls.ModifyCapacityReservationWithContext = append(mock.calls.ModifyCapacityReservationWithContext, callInfo)
	lockec2ClientMockModifyCapacityReservationWithContext.Unlock()
	return mock.ModifyCapacityReservationWithContextFunc(in1, in2, in3...)
}

// ModifyCapacityReservationWithContextCalls gets all the calls that were made to ModifyCapacityReservationWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyCapacityReservationWithContextCalls())
func (mock *ec2ClientMock) ModifyCapacityReservationWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyCapacityReservationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyCapacityReservationInput
		In3 []request.Option
	}
	lockec2ClientMockModifyCapacityReservationWithContext.RLock()
	calls = mock.calls.ModifyCapacityReservationWithContext
	lockec2ClientMockModifyCapacityReservationWithContext.RUnlock()
	return calls
}

// ModifyClientVpnEndpoint calls ModifyClientVpnEndpointFunc.
func (mock *ec2ClientMock) ModifyClientVpnEndpoint(in1 *ec2.ModifyClientVpnEndpointInput) (*ec2.ModifyClientVpnEndpointOutput, error) {
	if mock.ModifyClientVpnEndpointFunc == nil {
		panic("ec2ClientMock.ModifyClientVpnEndpointFunc: method is nil but ec2Client.ModifyClientVpnEndpoint was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyClientVpnEndpointInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyClientVpnEndpoint.Lock()
	mock.calls.ModifyClientVpnEndpoint = append(mock.calls.ModifyClientVpnEndpoint, callInfo)
	lockec2ClientMockModifyClientVpnEndpoint.Unlock()
	return mock.ModifyClientVpnEndpointFunc(in1)
}

// ModifyClientVpnEndpointCalls gets all the calls that were made to ModifyClientVpnEndpoint.
// Check the length with:
//     len(mockedec2Client.ModifyClientVpnEndpointCalls())
func (mock *ec2ClientMock) ModifyClientVpnEndpointCalls() []struct {
	In1 *ec2.ModifyClientVpnEndpointInput
} {
	var calls []struct {
		In1 *ec2.ModifyClientVpnEndpointInput
	}
	lockec2ClientMockModifyClientVpnEndpoint.RLock()
	calls = mock.calls.ModifyClientVpnEndpoint
	lockec2ClientMockModifyClientVpnEndpoint.RUnlock()
	return calls
}

// ModifyClientVpnEndpointRequest calls ModifyClientVpnEndpointRequestFunc.
func (mock *ec2ClientMock) ModifyClientVpnEndpointRequest(in1 *ec2.ModifyClientVpnEndpointInput) (*request.Request, *ec2.ModifyClientVpnEndpointOutput) {
	if mock.ModifyClientVpnEndpointRequestFunc == nil {
		panic("ec2ClientMock.ModifyClientVpnEndpointRequestFunc: method is nil but ec2Client.ModifyClientVpnEndpointRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyClientVpnEndpointInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyClientVpnEndpointRequest.Lock()
	mock.calls.ModifyClientVpnEndpointRequest = append(mock.calls.ModifyClientVpnEndpointRequest, callInfo)
	lockec2ClientMockModifyClientVpnEndpointRequest.Unlock()
	return mock.ModifyClientVpnEndpointRequestFunc(in1)
}

// ModifyClientVpnEndpointRequestCalls gets all the calls that were made to ModifyClientVpnEndpointRequest.
// Check the length with:
//     len(mockedec2Client.ModifyClientVpnEndpointRequestCalls())
func (mock *ec2ClientMock) ModifyClientVpnEndpointRequestCalls() []struct {
	In1 *ec2.ModifyClientVpnEndpointInput
} {
	var calls []struct {
		In1 *ec2.ModifyClientVpnEndpointInput
	}
	lockec2ClientMockModifyClientVpnEndpointRequest.RLock()
	calls = mock.calls.ModifyClientVpnEndpointRequest
	lockec2ClientMockModifyClientVpnEndpointRequest.RUnlock()
	return calls
}

// ModifyClientVpnEndpointWithContext calls ModifyClientVpnEndpointWithContextFunc.
func (mock *ec2ClientMock) ModifyClientVpnEndpointWithContext(in1 context.Context, in2 *ec2.ModifyClientVpnEndpointInput, in3 ...request.Option) (*ec2.ModifyClientVpnEndpointOutput, error) {
	if mock.ModifyClientVpnEndpointWithContextFunc == nil {
		panic("ec2ClientMock.ModifyClientVpnEndpointWithContextFunc: method is nil but ec2Client.ModifyClientVpnEndpointWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyClientVpnEndpointInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyClientVpnEndpointWithContext.Lock()
	mock.calls.ModifyClientVpnEndpointWithContext = append(mock.calls.ModifyClientVpnEndpointWithContext, callInfo)
	lockec2ClientMockModifyClientVpnEndpointWithContext.Unlock()
	return mock.ModifyClientVpnEndpointWithContextFunc(in1, in2, in3...)
}

// ModifyClientVpnEndpointWithContextCalls gets all the calls that were made to ModifyClientVpnEndpointWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyClientVpnEndpointWithContextCalls())
func (mock *ec2ClientMock) ModifyClientVpnEndpointWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyClientVpnEndpointInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyClientVpnEndpointInput
		In3 []request.Option
	}
	lockec2ClientMockModifyClientVpnEndpointWithContext.RLock()
	calls = mock.calls.ModifyClientVpnEndpointWithContext
	lockec2ClientMockModifyClientVpnEndpointWithContext.RUnlock()
	return calls
}

// ModifyDefaultCreditSpecification calls ModifyDefaultCreditSpecificationFunc.
func (mock *ec2ClientMock) ModifyDefaultCreditSpecification(in1 *ec2.ModifyDefaultCreditSpecificationInput) (*ec2.ModifyDefaultCreditSpecificationOutput, error) {
	if mock.ModifyDefaultCreditSpecificationFunc == nil {
		panic("ec2ClientMock.ModifyDefaultCreditSpecificationFunc: method is nil but ec2Client.ModifyDefaultCreditSpecification was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyDefaultCreditSpecificationInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyDefaultCreditSpecification.Lock()
	mock.calls.ModifyDefaultCreditSpecification = append(mock.calls.ModifyDefaultCreditSpecification, callInfo)
	lockec2ClientMockModifyDefaultCreditSpecification.Unlock()
	return mock.ModifyDefaultCreditSpecificationFunc(in1)
}

// ModifyDefaultCreditSpecificationCalls gets all the calls that were made to ModifyDefaultCreditSpecification.
// Check the length with:
//     len(mockedec2Client.ModifyDefaultCreditSpecificationCalls())
func (mock *ec2ClientMock) ModifyDefaultCreditSpecificationCalls() []struct {
	In1 *ec2.ModifyDefaultCreditSpecificationInput
} {
	var calls []struct {
		In1 *ec2.ModifyDefaultCreditSpecificationInput
	}
	lockec2ClientMockModifyDefaultCreditSpecification.RLock()
	calls = mock.calls.ModifyDefaultCreditSpecification
	lockec2ClientMockModifyDefaultCreditSpecification.RUnlock()
	return calls
}

// ModifyDefaultCreditSpecificationRequest calls ModifyDefaultCreditSpecificationRequestFunc.
func (mock *ec2ClientMock) ModifyDefaultCreditSpecificationRequest(in1 *ec2.ModifyDefaultCreditSpecificationInput) (*request.Request, *ec2.ModifyDefaultCreditSpecificationOutput) {
	if mock.ModifyDefaultCreditSpecificationRequestFunc == nil {
		panic("ec2ClientMock.ModifyDefaultCreditSpecificationRequestFunc: method is nil but ec2Client.ModifyDefaultCreditSpecificationRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyDefaultCreditSpecificationInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyDefaultCreditSpecificationRequest.Lock()
	mock.calls.ModifyDefaultCreditSpecificationRequest = append(mock.calls.ModifyDefaultCreditSpecificationRequest, callInfo)
	lockec2ClientMockModifyDefaultCreditSpecificationRequest.Unlock()
	return mock.ModifyDefaultCreditSpecificationRequestFunc(in1)
}

// ModifyDefaultCreditSpecificationRequestCalls gets all the calls that were made to ModifyDefaultCreditSpecificationRequest.
// Check the length with:
//     len(mockedec2Client.ModifyDefaultCreditSpecificationRequestCalls())
func (mock *ec2ClientMock) ModifyDefaultCreditSpecificationRequestCalls() []struct {
	In1 *ec2.ModifyDefaultCreditSpecificationInput
} {
	var calls []struct {
		In1 *ec2.ModifyDefaultCreditSpecificationInput
	}
	lockec2ClientMockModifyDefaultCreditSpecificationRequest.RLock()
	calls = mock.calls.ModifyDefaultCreditSpecificationRequest
	lockec2ClientMockModifyDefaultCreditSpecificationRequest.RUnlock()
	return calls
}

// ModifyDefaultCreditSpecificationWithContext calls ModifyDefaultCreditSpecificationWithContextFunc.
func (mock *ec2ClientMock) ModifyDefaultCreditSpecificationWithContext(in1 context.Context, in2 *ec2.ModifyDefaultCreditSpecificationInput, in3 ...request.Option) (*ec2.ModifyDefaultCreditSpecificationOutput, error) {
	if mock.ModifyDefaultCreditSpecificationWithContextFunc == nil {
		panic("ec2ClientMock.ModifyDefaultCreditSpecificationWithContextFunc: method is nil but ec2Client.ModifyDefaultCreditSpecificationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyDefaultCreditSpecificationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyDefaultCreditSpecificationWithContext.Lock()
	mock.calls.ModifyDefaultCreditSpecificationWithContext = append(mock.calls.ModifyDefaultCreditSpecificationWithContext, callInfo)
	lockec2ClientMockModifyDefaultCreditSpecificationWithContext.Unlock()
	return mock.ModifyDefaultCreditSpecificationWithContextFunc(in1, in2, in3...)
}

// ModifyDefaultCreditSpecificationWithContextCalls gets all the calls that were made to ModifyDefaultCreditSpecificationWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyDefaultCreditSpecificationWithContextCalls())
func (mock *ec2ClientMock) ModifyDefaultCreditSpecificationWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyDefaultCreditSpecificationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyDefaultCreditSpecificationInput
		In3 []request.Option
	}
	lockec2ClientMockModifyDefaultCreditSpecificationWithContext.RLock()
	calls = mock.calls.ModifyDefaultCreditSpecificationWithContext
	lockec2ClientMockModifyDefaultCreditSpecificationWithContext.RUnlock()
	return calls
}

// ModifyEbsDefaultKmsKeyId calls ModifyEbsDefaultKmsKeyIdFunc.
func (mock *ec2ClientMock) ModifyEbsDefaultKmsKeyId(in1 *ec2.ModifyEbsDefaultKmsKeyIdInput) (*ec2.ModifyEbsDefaultKmsKeyIdOutput, error) {
	if mock.ModifyEbsDefaultKmsKeyIdFunc == nil {
		panic("ec2ClientMock.ModifyEbsDefaultKmsKeyIdFunc: method is nil but ec2Client.ModifyEbsDefaultKmsKeyId was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyEbsDefaultKmsKeyIdInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyEbsDefaultKmsKeyId.Lock()
	mock.calls.ModifyEbsDefaultKmsKeyId = append(mock.calls.ModifyEbsDefaultKmsKeyId, callInfo)
	lockec2ClientMockModifyEbsDefaultKmsKeyId.Unlock()
	return mock.ModifyEbsDefaultKmsKeyIdFunc(in1)
}

// ModifyEbsDefaultKmsKeyIdCalls gets all the calls that were made to ModifyEbsDefaultKmsKeyId.
// Check the length with:
//     len(mockedec2Client.ModifyEbsDefaultKmsKeyIdCalls())
func (mock *ec2ClientMock) ModifyEbsDefaultKmsKeyIdCalls() []struct {
	In1 *ec2.ModifyEbsDefaultKmsKeyIdInput
} {
	var calls []struct {
		In1 *ec2.ModifyEbsDefaultKmsKeyIdInput
	}
	lockec2ClientMockModifyEbsDefaultKmsKeyId.RLock()
	calls = mock.calls.ModifyEbsDefaultKmsKeyId
	lockec2ClientMockModifyEbsDefaultKmsKeyId.RUnlock()
	return calls
}

// ModifyEbsDefaultKmsKeyIdRequest calls ModifyEbsDefaultKmsKeyIdRequestFunc.
func (mock *ec2ClientMock) ModifyEbsDefaultKmsKeyIdRequest(in1 *ec2.ModifyEbsDefaultKmsKeyIdInput) (*request.Request, *ec2.ModifyEbsDefaultKmsKeyIdOutput) {
	if mock.ModifyEbsDefaultKmsKeyIdRequestFunc == nil {
		panic("ec2ClientMock.ModifyEbsDefaultKmsKeyIdRequestFunc: method is nil but ec2Client.ModifyEbsDefaultKmsKeyIdRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyEbsDefaultKmsKeyIdInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyEbsDefaultKmsKeyIdRequest.Lock()
	mock.calls.ModifyEbsDefaultKmsKeyIdRequest = append(mock.calls.ModifyEbsDefaultKmsKeyIdRequest, callInfo)
	lockec2ClientMockModifyEbsDefaultKmsKeyIdRequest.Unlock()
	return mock.ModifyEbsDefaultKmsKeyIdRequestFunc(in1)
}

// ModifyEbsDefaultKmsKeyIdRequestCalls gets all the calls that were made to ModifyEbsDefaultKmsKeyIdRequest.
// Check the length with:
//     len(mockedec2Client.ModifyEbsDefaultKmsKeyIdRequestCalls())
func (mock *ec2ClientMock) ModifyEbsDefaultKmsKeyIdRequestCalls() []struct {
	In1 *ec2.ModifyEbsDefaultKmsKeyIdInput
} {
	var calls []struct {
		In1 *ec2.ModifyEbsDefaultKmsKeyIdInput
	}
	lockec2ClientMockModifyEbsDefaultKmsKeyIdRequest.RLock()
	calls = mock.calls.ModifyEbsDefaultKmsKeyIdRequest
	lockec2ClientMockModifyEbsDefaultKmsKeyIdRequest.RUnlock()
	return calls
}

// ModifyEbsDefaultKmsKeyIdWithContext calls ModifyEbsDefaultKmsKeyIdWithContextFunc.
func (mock *ec2ClientMock) ModifyEbsDefaultKmsKeyIdWithContext(in1 context.Context, in2 *ec2.ModifyEbsDefaultKmsKeyIdInput, in3 ...request.Option) (*ec2.ModifyEbsDefaultKmsKeyIdOutput, error) {
	if mock.ModifyEbsDefaultKmsKeyIdWithContextFunc == nil {
		panic("ec2ClientMock.ModifyEbsDefaultKmsKeyIdWithContextFunc: method is nil but ec2Client.ModifyEbsDefaultKmsKeyIdWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyEbsDefaultKmsKeyIdInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyEbsDefaultKmsKeyIdWithContext.Lock()
	mock.calls.ModifyEbsDefaultKmsKeyIdWithContext = append(mock.calls.ModifyEbsDefaultKmsKeyIdWithContext, callInfo)
	lockec2ClientMockModifyEbsDefaultKmsKeyIdWithContext.Unlock()
	return mock.ModifyEbsDefaultKmsKeyIdWithContextFunc(in1, in2, in3...)
}

// ModifyEbsDefaultKmsKeyIdWithContextCalls gets all the calls that were made to ModifyEbsDefaultKmsKeyIdWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyEbsDefaultKmsKeyIdWithContextCalls())
func (mock *ec2ClientMock) ModifyEbsDefaultKmsKeyIdWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyEbsDefaultKmsKeyIdInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyEbsDefaultKmsKeyIdInput
		In3 []request.Option
	}
	lockec2ClientMockModifyEbsDefaultKmsKeyIdWithContext.RLock()
	calls = mock.calls.ModifyEbsDefaultKmsKeyIdWithContext
	lockec2ClientMockModifyEbsDefaultKmsKeyIdWithContext.RUnlock()
	return calls
}

// ModifyFleet calls ModifyFleetFunc.
func (mock *ec2ClientMock) ModifyFleet(in1 *ec2.ModifyFleetInput) (*ec2.ModifyFleetOutput, error) {
	if mock.ModifyFleetFunc == nil {
		panic("ec2ClientMock.ModifyFleetFunc: method is nil but ec2Client.ModifyFleet was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyFleetInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyFleet.Lock()
	mock.calls.ModifyFleet = append(mock.calls.ModifyFleet, callInfo)
	lockec2ClientMockModifyFleet.Unlock()
	return mock.ModifyFleetFunc(in1)
}

// ModifyFleetCalls gets all the calls that were made to ModifyFleet.
// Check the length with:
//     len(mockedec2Client.ModifyFleetCalls())
func (mock *ec2ClientMock) ModifyFleetCalls() []struct {
	In1 *ec2.ModifyFleetInput
} {
	var calls []struct {
		In1 *ec2.ModifyFleetInput
	}
	lockec2ClientMockModifyFleet.RLock()
	calls = mock.calls.ModifyFleet
	lockec2ClientMockModifyFleet.RUnlock()
	return calls
}

// ModifyFleetRequest calls ModifyFleetRequestFunc.
func (mock *ec2ClientMock) ModifyFleetRequest(in1 *ec2.ModifyFleetInput) (*request.Request, *ec2.ModifyFleetOutput) {
	if mock.ModifyFleetRequestFunc == nil {
		panic("ec2ClientMock.ModifyFleetRequestFunc: method is nil but ec2Client.ModifyFleetRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyFleetInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyFleetRequest.Lock()
	mock.calls.ModifyFleetRequest = append(mock.calls.ModifyFleetRequest, callInfo)
	lockec2ClientMockModifyFleetRequest.Unlock()
	return mock.ModifyFleetRequestFunc(in1)
}

// ModifyFleetRequestCalls gets all the calls that were made to ModifyFleetRequest.
// Check the length with:
//     len(mockedec2Client.ModifyFleetRequestCalls())
func (mock *ec2ClientMock) ModifyFleetRequestCalls() []struct {
	In1 *ec2.ModifyFleetInput
} {
	var calls []struct {
		In1 *ec2.ModifyFleetInput
	}
	lockec2ClientMockModifyFleetRequest.RLock()
	calls = mock.calls.ModifyFleetRequest
	lockec2ClientMockModifyFleetRequest.RUnlock()
	return calls
}

// ModifyFleetWithContext calls ModifyFleetWithContextFunc.
func (mock *ec2ClientMock) ModifyFleetWithContext(in1 context.Context, in2 *ec2.ModifyFleetInput, in3 ...request.Option) (*ec2.ModifyFleetOutput, error) {
	if mock.ModifyFleetWithContextFunc == nil {
		panic("ec2ClientMock.ModifyFleetWithContextFunc: method is nil but ec2Client.ModifyFleetWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyFleetInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyFleetWithContext.Lock()
	mock.calls.ModifyFleetWithContext = append(mock.calls.ModifyFleetWithContext, callInfo)
	lockec2ClientMockModifyFleetWithContext.Unlock()
	return mock.ModifyFleetWithContextFunc(in1, in2, in3...)
}

// ModifyFleetWithContextCalls gets all the calls that were made to ModifyFleetWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyFleetWithContextCalls())
func (mock *ec2ClientMock) ModifyFleetWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyFleetInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyFleetInput
		In3 []request.Option
	}
	lockec2ClientMockModifyFleetWithContext.RLock()
	calls = mock.calls.ModifyFleetWithContext
	lockec2ClientMockModifyFleetWithContext.RUnlock()
	return calls
}

// ModifyFpgaImageAttribute calls ModifyFpgaImageAttributeFunc.
func (mock *ec2ClientMock) ModifyFpgaImageAttribute(in1 *ec2.ModifyFpgaImageAttributeInput) (*ec2.ModifyFpgaImageAttributeOutput, error) {
	if mock.ModifyFpgaImageAttributeFunc == nil {
		panic("ec2ClientMock.ModifyFpgaImageAttributeFunc: method is nil but ec2Client.ModifyFpgaImageAttribute was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyFpgaImageAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyFpgaImageAttribute.Lock()
	mock.calls.ModifyFpgaImageAttribute = append(mock.calls.ModifyFpgaImageAttribute, callInfo)
	lockec2ClientMockModifyFpgaImageAttribute.Unlock()
	return mock.ModifyFpgaImageAttributeFunc(in1)
}

// ModifyFpgaImageAttributeCalls gets all the calls that were made to ModifyFpgaImageAttribute.
// Check the length with:
//     len(mockedec2Client.ModifyFpgaImageAttributeCalls())
func (mock *ec2ClientMock) ModifyFpgaImageAttributeCalls() []struct {
	In1 *ec2.ModifyFpgaImageAttributeInput
} {
	var calls []struct {
		In1 *ec2.ModifyFpgaImageAttributeInput
	}
	lockec2ClientMockModifyFpgaImageAttribute.RLock()
	calls = mock.calls.ModifyFpgaImageAttribute
	lockec2ClientMockModifyFpgaImageAttribute.RUnlock()
	return calls
}

// ModifyFpgaImageAttributeRequest calls ModifyFpgaImageAttributeRequestFunc.
func (mock *ec2ClientMock) ModifyFpgaImageAttributeRequest(in1 *ec2.ModifyFpgaImageAttributeInput) (*request.Request, *ec2.ModifyFpgaImageAttributeOutput) {
	if mock.ModifyFpgaImageAttributeRequestFunc == nil {
		panic("ec2ClientMock.ModifyFpgaImageAttributeRequestFunc: method is nil but ec2Client.ModifyFpgaImageAttributeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyFpgaImageAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyFpgaImageAttributeRequest.Lock()
	mock.calls.ModifyFpgaImageAttributeRequest = append(mock.calls.ModifyFpgaImageAttributeRequest, callInfo)
	lockec2ClientMockModifyFpgaImageAttributeRequest.Unlock()
	return mock.ModifyFpgaImageAttributeRequestFunc(in1)
}

// ModifyFpgaImageAttributeRequestCalls gets all the calls that were made to ModifyFpgaImageAttributeRequest.
// Check the length with:
//     len(mockedec2Client.ModifyFpgaImageAttributeRequestCalls())
func (mock *ec2ClientMock) ModifyFpgaImageAttributeRequestCalls() []struct {
	In1 *ec2.ModifyFpgaImageAttributeInput
} {
	var calls []struct {
		In1 *ec2.ModifyFpgaImageAttributeInput
	}
	lockec2ClientMockModifyFpgaImageAttributeRequest.RLock()
	calls = mock.calls.ModifyFpgaImageAttributeRequest
	lockec2ClientMockModifyFpgaImageAttributeRequest.RUnlock()
	return calls
}

// ModifyFpgaImageAttributeWithContext calls ModifyFpgaImageAttributeWithContextFunc.
func (mock *ec2ClientMock) ModifyFpgaImageAttributeWithContext(in1 context.Context, in2 *ec2.ModifyFpgaImageAttributeInput, in3 ...request.Option) (*ec2.ModifyFpgaImageAttributeOutput, error) {
	if mock.ModifyFpgaImageAttributeWithContextFunc == nil {
		panic("ec2ClientMock.ModifyFpgaImageAttributeWithContextFunc: method is nil but ec2Client.ModifyFpgaImageAttributeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyFpgaImageAttributeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyFpgaImageAttributeWithContext.Lock()
	mock.calls.ModifyFpgaImageAttributeWithContext = append(mock.calls.ModifyFpgaImageAttributeWithContext, callInfo)
	lockec2ClientMockModifyFpgaImageAttributeWithContext.Unlock()
	return mock.ModifyFpgaImageAttributeWithContextFunc(in1, in2, in3...)
}

// ModifyFpgaImageAttributeWithContextCalls gets all the calls that were made to ModifyFpgaImageAttributeWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyFpgaImageAttributeWithContextCalls())
func (mock *ec2ClientMock) ModifyFpgaImageAttributeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyFpgaImageAttributeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyFpgaImageAttributeInput
		In3 []request.Option
	}
	lockec2ClientMockModifyFpgaImageAttributeWithContext.RLock()
	calls = mock.calls.ModifyFpgaImageAttributeWithContext
	lockec2ClientMockModifyFpgaImageAttributeWithContext.RUnlock()
	return calls
}

// ModifyHosts calls ModifyHostsFunc.
func (mock *ec2ClientMock) ModifyHosts(in1 *ec2.ModifyHostsInput) (*ec2.ModifyHostsOutput, error) {
	if mock.ModifyHostsFunc == nil {
		panic("ec2ClientMock.ModifyHostsFunc: method is nil but ec2Client.ModifyHosts was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyHostsInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyHosts.Lock()
	mock.calls.ModifyHosts = append(mock.calls.ModifyHosts, callInfo)
	lockec2ClientMockModifyHosts.Unlock()
	return mock.ModifyHostsFunc(in1)
}

// ModifyHostsCalls gets all the calls that were made to ModifyHosts.
// Check the length with:
//     len(mockedec2Client.ModifyHostsCalls())
func (mock *ec2ClientMock) ModifyHostsCalls() []struct {
	In1 *ec2.ModifyHostsInput
} {
	var calls []struct {
		In1 *ec2.ModifyHostsInput
	}
	lockec2ClientMockModifyHosts.RLock()
	calls = mock.calls.ModifyHosts
	lockec2ClientMockModifyHosts.RUnlock()
	return calls
}

// ModifyHostsRequest calls ModifyHostsRequestFunc.
func (mock *ec2ClientMock) ModifyHostsRequest(in1 *ec2.ModifyHostsInput) (*request.Request, *ec2.ModifyHostsOutput) {
	if mock.ModifyHostsRequestFunc == nil {
		panic("ec2ClientMock.ModifyHostsRequestFunc: method is nil but ec2Client.ModifyHostsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyHostsInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyHostsRequest.Lock()
	mock.calls.ModifyHostsRequest = append(mock.calls.ModifyHostsRequest, callInfo)
	lockec2ClientMockModifyHostsRequest.Unlock()
	return mock.ModifyHostsRequestFunc(in1)
}

// ModifyHostsRequestCalls gets all the calls that were made to ModifyHostsRequest.
// Check the length with:
//     len(mockedec2Client.ModifyHostsRequestCalls())
func (mock *ec2ClientMock) ModifyHostsRequestCalls() []struct {
	In1 *ec2.ModifyHostsInput
} {
	var calls []struct {
		In1 *ec2.ModifyHostsInput
	}
	lockec2ClientMockModifyHostsRequest.RLock()
	calls = mock.calls.ModifyHostsRequest
	lockec2ClientMockModifyHostsRequest.RUnlock()
	return calls
}

// ModifyHostsWithContext calls ModifyHostsWithContextFunc.
func (mock *ec2ClientMock) ModifyHostsWithContext(in1 context.Context, in2 *ec2.ModifyHostsInput, in3 ...request.Option) (*ec2.ModifyHostsOutput, error) {
	if mock.ModifyHostsWithContextFunc == nil {
		panic("ec2ClientMock.ModifyHostsWithContextFunc: method is nil but ec2Client.ModifyHostsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyHostsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyHostsWithContext.Lock()
	mock.calls.ModifyHostsWithContext = append(mock.calls.ModifyHostsWithContext, callInfo)
	lockec2ClientMockModifyHostsWithContext.Unlock()
	return mock.ModifyHostsWithContextFunc(in1, in2, in3...)
}

// ModifyHostsWithContextCalls gets all the calls that were made to ModifyHostsWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyHostsWithContextCalls())
func (mock *ec2ClientMock) ModifyHostsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyHostsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyHostsInput
		In3 []request.Option
	}
	lockec2ClientMockModifyHostsWithContext.RLock()
	calls = mock.calls.ModifyHostsWithContext
	lockec2ClientMockModifyHostsWithContext.RUnlock()
	return calls
}

// ModifyIdFormat calls ModifyIdFormatFunc.
func (mock *ec2ClientMock) ModifyIdFormat(in1 *ec2.ModifyIdFormatInput) (*ec2.ModifyIdFormatOutput, error) {
	if mock.ModifyIdFormatFunc == nil {
		panic("ec2ClientMock.ModifyIdFormatFunc: method is nil but ec2Client.ModifyIdFormat was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyIdFormatInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyIdFormat.Lock()
	mock.calls.ModifyIdFormat = append(mock.calls.ModifyIdFormat, callInfo)
	lockec2ClientMockModifyIdFormat.Unlock()
	return mock.ModifyIdFormatFunc(in1)
}

// ModifyIdFormatCalls gets all the calls that were made to ModifyIdFormat.
// Check the length with:
//     len(mockedec2Client.ModifyIdFormatCalls())
func (mock *ec2ClientMock) ModifyIdFormatCalls() []struct {
	In1 *ec2.ModifyIdFormatInput
} {
	var calls []struct {
		In1 *ec2.ModifyIdFormatInput
	}
	lockec2ClientMockModifyIdFormat.RLock()
	calls = mock.calls.ModifyIdFormat
	lockec2ClientMockModifyIdFormat.RUnlock()
	return calls
}

// ModifyIdFormatRequest calls ModifyIdFormatRequestFunc.
func (mock *ec2ClientMock) ModifyIdFormatRequest(in1 *ec2.ModifyIdFormatInput) (*request.Request, *ec2.ModifyIdFormatOutput) {
	if mock.ModifyIdFormatRequestFunc == nil {
		panic("ec2ClientMock.ModifyIdFormatRequestFunc: method is nil but ec2Client.ModifyIdFormatRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyIdFormatInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyIdFormatRequest.Lock()
	mock.calls.ModifyIdFormatRequest = append(mock.calls.ModifyIdFormatRequest, callInfo)
	lockec2ClientMockModifyIdFormatRequest.Unlock()
	return mock.ModifyIdFormatRequestFunc(in1)
}

// ModifyIdFormatRequestCalls gets all the calls that were made to ModifyIdFormatRequest.
// Check the length with:
//     len(mockedec2Client.ModifyIdFormatRequestCalls())
func (mock *ec2ClientMock) ModifyIdFormatRequestCalls() []struct {
	In1 *ec2.ModifyIdFormatInput
} {
	var calls []struct {
		In1 *ec2.ModifyIdFormatInput
	}
	lockec2ClientMockModifyIdFormatRequest.RLock()
	calls = mock.calls.ModifyIdFormatRequest
	lockec2ClientMockModifyIdFormatRequest.RUnlock()
	return calls
}

// ModifyIdFormatWithContext calls ModifyIdFormatWithContextFunc.
func (mock *ec2ClientMock) ModifyIdFormatWithContext(in1 context.Context, in2 *ec2.ModifyIdFormatInput, in3 ...request.Option) (*ec2.ModifyIdFormatOutput, error) {
	if mock.ModifyIdFormatWithContextFunc == nil {
		panic("ec2ClientMock.ModifyIdFormatWithContextFunc: method is nil but ec2Client.ModifyIdFormatWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyIdFormatInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyIdFormatWithContext.Lock()
	mock.calls.ModifyIdFormatWithContext = append(mock.calls.ModifyIdFormatWithContext, callInfo)
	lockec2ClientMockModifyIdFormatWithContext.Unlock()
	return mock.ModifyIdFormatWithContextFunc(in1, in2, in3...)
}

// ModifyIdFormatWithContextCalls gets all the calls that were made to ModifyIdFormatWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyIdFormatWithContextCalls())
func (mock *ec2ClientMock) ModifyIdFormatWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyIdFormatInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyIdFormatInput
		In3 []request.Option
	}
	lockec2ClientMockModifyIdFormatWithContext.RLock()
	calls = mock.calls.ModifyIdFormatWithContext
	lockec2ClientMockModifyIdFormatWithContext.RUnlock()
	return calls
}

// ModifyIdentityIdFormat calls ModifyIdentityIdFormatFunc.
func (mock *ec2ClientMock) ModifyIdentityIdFormat(in1 *ec2.ModifyIdentityIdFormatInput) (*ec2.ModifyIdentityIdFormatOutput, error) {
	if mock.ModifyIdentityIdFormatFunc == nil {
		panic("ec2ClientMock.ModifyIdentityIdFormatFunc: method is nil but ec2Client.ModifyIdentityIdFormat was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyIdentityIdFormatInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyIdentityIdFormat.Lock()
	mock.calls.ModifyIdentityIdFormat = append(mock.calls.ModifyIdentityIdFormat, callInfo)
	lockec2ClientMockModifyIdentityIdFormat.Unlock()
	return mock.ModifyIdentityIdFormatFunc(in1)
}

// ModifyIdentityIdFormatCalls gets all the calls that were made to ModifyIdentityIdFormat.
// Check the length with:
//     len(mockedec2Client.ModifyIdentityIdFormatCalls())
func (mock *ec2ClientMock) ModifyIdentityIdFormatCalls() []struct {
	In1 *ec2.ModifyIdentityIdFormatInput
} {
	var calls []struct {
		In1 *ec2.ModifyIdentityIdFormatInput
	}
	lockec2ClientMockModifyIdentityIdFormat.RLock()
	calls = mock.calls.ModifyIdentityIdFormat
	lockec2ClientMockModifyIdentityIdFormat.RUnlock()
	return calls
}

// ModifyIdentityIdFormatRequest calls ModifyIdentityIdFormatRequestFunc.
func (mock *ec2ClientMock) ModifyIdentityIdFormatRequest(in1 *ec2.ModifyIdentityIdFormatInput) (*request.Request, *ec2.ModifyIdentityIdFormatOutput) {
	if mock.ModifyIdentityIdFormatRequestFunc == nil {
		panic("ec2ClientMock.ModifyIdentityIdFormatRequestFunc: method is nil but ec2Client.ModifyIdentityIdFormatRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyIdentityIdFormatInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyIdentityIdFormatRequest.Lock()
	mock.calls.ModifyIdentityIdFormatRequest = append(mock.calls.ModifyIdentityIdFormatRequest, callInfo)
	lockec2ClientMockModifyIdentityIdFormatRequest.Unlock()
	return mock.ModifyIdentityIdFormatRequestFunc(in1)
}

// ModifyIdentityIdFormatRequestCalls gets all the calls that were made to ModifyIdentityIdFormatRequest.
// Check the length with:
//     len(mockedec2Client.ModifyIdentityIdFormatRequestCalls())
func (mock *ec2ClientMock) ModifyIdentityIdFormatRequestCalls() []struct {
	In1 *ec2.ModifyIdentityIdFormatInput
} {
	var calls []struct {
		In1 *ec2.ModifyIdentityIdFormatInput
	}
	lockec2ClientMockModifyIdentityIdFormatRequest.RLock()
	calls = mock.calls.ModifyIdentityIdFormatRequest
	lockec2ClientMockModifyIdentityIdFormatRequest.RUnlock()
	return calls
}

// ModifyIdentityIdFormatWithContext calls ModifyIdentityIdFormatWithContextFunc.
func (mock *ec2ClientMock) ModifyIdentityIdFormatWithContext(in1 context.Context, in2 *ec2.ModifyIdentityIdFormatInput, in3 ...request.Option) (*ec2.ModifyIdentityIdFormatOutput, error) {
	if mock.ModifyIdentityIdFormatWithContextFunc == nil {
		panic("ec2ClientMock.ModifyIdentityIdFormatWithContextFunc: method is nil but ec2Client.ModifyIdentityIdFormatWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyIdentityIdFormatInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyIdentityIdFormatWithContext.Lock()
	mock.calls.ModifyIdentityIdFormatWithContext = append(mock.calls.ModifyIdentityIdFormatWithContext, callInfo)
	lockec2ClientMockModifyIdentityIdFormatWithContext.Unlock()
	return mock.ModifyIdentityIdFormatWithContextFunc(in1, in2, in3...)
}

// ModifyIdentityIdFormatWithContextCalls gets all the calls that were made to ModifyIdentityIdFormatWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyIdentityIdFormatWithContextCalls())
func (mock *ec2ClientMock) ModifyIdentityIdFormatWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyIdentityIdFormatInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyIdentityIdFormatInput
		In3 []request.Option
	}
	lockec2ClientMockModifyIdentityIdFormatWithContext.RLock()
	calls = mock.calls.ModifyIdentityIdFormatWithContext
	lockec2ClientMockModifyIdentityIdFormatWithContext.RUnlock()
	return calls
}

// ModifyImageAttribute calls ModifyImageAttributeFunc.
func (mock *ec2ClientMock) ModifyImageAttribute(in1 *ec2.ModifyImageAttributeInput) (*ec2.ModifyImageAttributeOutput, error) {
	if mock.ModifyImageAttributeFunc == nil {
		panic("ec2ClientMock.ModifyImageAttributeFunc: method is nil but ec2Client.ModifyImageAttribute was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyImageAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyImageAttribute.Lock()
	mock.calls.ModifyImageAttribute = append(mock.calls.ModifyImageAttribute, callInfo)
	lockec2ClientMockModifyImageAttribute.Unlock()
	return mock.ModifyImageAttributeFunc(in1)
}

// ModifyImageAttributeCalls gets all the calls that were made to ModifyImageAttribute.
// Check the length with:
//     len(mockedec2Client.ModifyImageAttributeCalls())
func (mock *ec2ClientMock) ModifyImageAttributeCalls() []struct {
	In1 *ec2.ModifyImageAttributeInput
} {
	var calls []struct {
		In1 *ec2.ModifyImageAttributeInput
	}
	lockec2ClientMockModifyImageAttribute.RLock()
	calls = mock.calls.ModifyImageAttribute
	lockec2ClientMockModifyImageAttribute.RUnlock()
	return calls
}

// ModifyImageAttributeRequest calls ModifyImageAttributeRequestFunc.
func (mock *ec2ClientMock) ModifyImageAttributeRequest(in1 *ec2.ModifyImageAttributeInput) (*request.Request, *ec2.ModifyImageAttributeOutput) {
	if mock.ModifyImageAttributeRequestFunc == nil {
		panic("ec2ClientMock.ModifyImageAttributeRequestFunc: method is nil but ec2Client.ModifyImageAttributeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyImageAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyImageAttributeRequest.Lock()
	mock.calls.ModifyImageAttributeRequest = append(mock.calls.ModifyImageAttributeRequest, callInfo)
	lockec2ClientMockModifyImageAttributeRequest.Unlock()
	return mock.ModifyImageAttributeRequestFunc(in1)
}

// ModifyImageAttributeRequestCalls gets all the calls that were made to ModifyImageAttributeRequest.
// Check the length with:
//     len(mockedec2Client.ModifyImageAttributeRequestCalls())
func (mock *ec2ClientMock) ModifyImageAttributeRequestCalls() []struct {
	In1 *ec2.ModifyImageAttributeInput
} {
	var calls []struct {
		In1 *ec2.ModifyImageAttributeInput
	}
	lockec2ClientMockModifyImageAttributeRequest.RLock()
	calls = mock.calls.ModifyImageAttributeRequest
	lockec2ClientMockModifyImageAttributeRequest.RUnlock()
	return calls
}

// ModifyImageAttributeWithContext calls ModifyImageAttributeWithContextFunc.
func (mock *ec2ClientMock) ModifyImageAttributeWithContext(in1 context.Context, in2 *ec2.ModifyImageAttributeInput, in3 ...request.Option) (*ec2.ModifyImageAttributeOutput, error) {
	if mock.ModifyImageAttributeWithContextFunc == nil {
		panic("ec2ClientMock.ModifyImageAttributeWithContextFunc: method is nil but ec2Client.ModifyImageAttributeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyImageAttributeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyImageAttributeWithContext.Lock()
	mock.calls.ModifyImageAttributeWithContext = append(mock.calls.ModifyImageAttributeWithContext, callInfo)
	lockec2ClientMockModifyImageAttributeWithContext.Unlock()
	return mock.ModifyImageAttributeWithContextFunc(in1, in2, in3...)
}

// ModifyImageAttributeWithContextCalls gets all the calls that were made to ModifyImageAttributeWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyImageAttributeWithContextCalls())
func (mock *ec2ClientMock) ModifyImageAttributeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyImageAttributeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyImageAttributeInput
		In3 []request.Option
	}
	lockec2ClientMockModifyImageAttributeWithContext.RLock()
	calls = mock.calls.ModifyImageAttributeWithContext
	lockec2ClientMockModifyImageAttributeWithContext.RUnlock()
	return calls
}

// ModifyInstanceAttribute calls ModifyInstanceAttributeFunc.
func (mock *ec2ClientMock) ModifyInstanceAttribute(in1 *ec2.ModifyInstanceAttributeInput) (*ec2.ModifyInstanceAttributeOutput, error) {
	if mock.ModifyInstanceAttributeFunc == nil {
		panic("ec2ClientMock.ModifyInstanceAttributeFunc: method is nil but ec2Client.ModifyInstanceAttribute was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyInstanceAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyInstanceAttribute.Lock()
	mock.calls.ModifyInstanceAttribute = append(mock.calls.ModifyInstanceAttribute, callInfo)
	lockec2ClientMockModifyInstanceAttribute.Unlock()
	return mock.ModifyInstanceAttributeFunc(in1)
}

// ModifyInstanceAttributeCalls gets all the calls that were made to ModifyInstanceAttribute.
// Check the length with:
//     len(mockedec2Client.ModifyInstanceAttributeCalls())
func (mock *ec2ClientMock) ModifyInstanceAttributeCalls() []struct {
	In1 *ec2.ModifyInstanceAttributeInput
} {
	var calls []struct {
		In1 *ec2.ModifyInstanceAttributeInput
	}
	lockec2ClientMockModifyInstanceAttribute.RLock()
	calls = mock.calls.ModifyInstanceAttribute
	lockec2ClientMockModifyInstanceAttribute.RUnlock()
	return calls
}

// ModifyInstanceAttributeRequest calls ModifyInstanceAttributeRequestFunc.
func (mock *ec2ClientMock) ModifyInstanceAttributeRequest(in1 *ec2.ModifyInstanceAttributeInput) (*request.Request, *ec2.ModifyInstanceAttributeOutput) {
	if mock.ModifyInstanceAttributeRequestFunc == nil {
		panic("ec2ClientMock.ModifyInstanceAttributeRequestFunc: method is nil but ec2Client.ModifyInstanceAttributeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyInstanceAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyInstanceAttributeRequest.Lock()
	mock.calls.ModifyInstanceAttributeRequest = append(mock.calls.ModifyInstanceAttributeRequest, callInfo)
	lockec2ClientMockModifyInstanceAttributeRequest.Unlock()
	return mock.ModifyInstanceAttributeRequestFunc(in1)
}

// ModifyInstanceAttributeRequestCalls gets all the calls that were made to ModifyInstanceAttributeRequest.
// Check the length with:
//     len(mockedec2Client.ModifyInstanceAttributeRequestCalls())
func (mock *ec2ClientMock) ModifyInstanceAttributeRequestCalls() []struct {
	In1 *ec2.ModifyInstanceAttributeInput
} {
	var calls []struct {
		In1 *ec2.ModifyInstanceAttributeInput
	}
	lockec2ClientMockModifyInstanceAttributeRequest.RLock()
	calls = mock.calls.ModifyInstanceAttributeRequest
	lockec2ClientMockModifyInstanceAttributeRequest.RUnlock()
	return calls
}

// ModifyInstanceAttributeWithContext calls ModifyInstanceAttributeWithContextFunc.
func (mock *ec2ClientMock) ModifyInstanceAttributeWithContext(in1 context.Context, in2 *ec2.ModifyInstanceAttributeInput, in3 ...request.Option) (*ec2.ModifyInstanceAttributeOutput, error) {
	if mock.ModifyInstanceAttributeWithContextFunc == nil {
		panic("ec2ClientMock.ModifyInstanceAttributeWithContextFunc: method is nil but ec2Client.ModifyInstanceAttributeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyInstanceAttributeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyInstanceAttributeWithContext.Lock()
	mock.calls.ModifyInstanceAttributeWithContext = append(mock.calls.ModifyInstanceAttributeWithContext, callInfo)
	lockec2ClientMockModifyInstanceAttributeWithContext.Unlock()
	return mock.ModifyInstanceAttributeWithContextFunc(in1, in2, in3...)
}

// ModifyInstanceAttributeWithContextCalls gets all the calls that were made to ModifyInstanceAttributeWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyInstanceAttributeWithContextCalls())
func (mock *ec2ClientMock) ModifyInstanceAttributeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyInstanceAttributeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyInstanceAttributeInput
		In3 []request.Option
	}
	lockec2ClientMockModifyInstanceAttributeWithContext.RLock()
	calls = mock.calls.ModifyInstanceAttributeWithContext
	lockec2ClientMockModifyInstanceAttributeWithContext.RUnlock()
	return calls
}

// ModifyInstanceCapacityReservationAttributes calls ModifyInstanceCapacityReservationAttributesFunc.
func (mock *ec2ClientMock) ModifyInstanceCapacityReservationAttributes(in1 *ec2.ModifyInstanceCapacityReservationAttributesInput) (*ec2.ModifyInstanceCapacityReservationAttributesOutput, error) {
	if mock.ModifyInstanceCapacityReservationAttributesFunc == nil {
		panic("ec2ClientMock.ModifyInstanceCapacityReservationAttributesFunc: method is nil but ec2Client.ModifyInstanceCapacityReservationAttributes was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyInstanceCapacityReservationAttributesInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyInstanceCapacityReservationAttributes.Lock()
	mock.calls.ModifyInstanceCapacityReservationAttributes = append(mock.calls.ModifyInstanceCapacityReservationAttributes, callInfo)
	lockec2ClientMockModifyInstanceCapacityReservationAttributes.Unlock()
	return mock.ModifyInstanceCapacityReservationAttributesFunc(in1)
}

// ModifyInstanceCapacityReservationAttributesCalls gets all the calls that were made to ModifyInstanceCapacityReservationAttributes.
// Check the length with:
//     len(mockedec2Client.ModifyInstanceCapacityReservationAttributesCalls())
func (mock *ec2ClientMock) ModifyInstanceCapacityReservationAttributesCalls() []struct {
	In1 *ec2.ModifyInstanceCapacityReservationAttributesInput
} {
	var calls []struct {
		In1 *ec2.ModifyInstanceCapacityReservationAttributesInput
	}
	lockec2ClientMockModifyInstanceCapacityReservationAttributes.RLock()
	calls = mock.calls.ModifyInstanceCapacityReservationAttributes
	lockec2ClientMockModifyInstanceCapacityReservationAttributes.RUnlock()
	return calls
}

// ModifyInstanceCapacityReservationAttributesRequest calls ModifyInstanceCapacityReservationAttributesRequestFunc.
func (mock *ec2ClientMock) ModifyInstanceCapacityReservationAttributesRequest(in1 *ec2.ModifyInstanceCapacityReservationAttributesInput) (*request.Request, *ec2.ModifyInstanceCapacityReservationAttributesOutput) {
	if mock.ModifyInstanceCapacityReservationAttributesRequestFunc == nil {
		panic("ec2ClientMock.ModifyInstanceCapacityReservationAttributesRequestFunc: method is nil but ec2Client.ModifyInstanceCapacityReservationAttributesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyInstanceCapacityReservationAttributesInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyInstanceCapacityReservationAttributesRequest.Lock()
	mock.calls.ModifyInstanceCapacityReservationAttributesRequest = append(mock.calls.ModifyInstanceCapacityReservationAttributesRequest, callInfo)
	lockec2ClientMockModifyInstanceCapacityReservationAttributesRequest.Unlock()
	return mock.ModifyInstanceCapacityReservationAttributesRequestFunc(in1)
}

// ModifyInstanceCapacityReservationAttributesRequestCalls gets all the calls that were made to ModifyInstanceCapacityReservationAttributesRequest.
// Check the length with:
//     len(mockedec2Client.ModifyInstanceCapacityReservationAttributesRequestCalls())
func (mock *ec2ClientMock) ModifyInstanceCapacityReservationAttributesRequestCalls() []struct {
	In1 *ec2.ModifyInstanceCapacityReservationAttributesInput
} {
	var calls []struct {
		In1 *ec2.ModifyInstanceCapacityReservationAttributesInput
	}
	lockec2ClientMockModifyInstanceCapacityReservationAttributesRequest.RLock()
	calls = mock.calls.ModifyInstanceCapacityReservationAttributesRequest
	lockec2ClientMockModifyInstanceCapacityReservationAttributesRequest.RUnlock()
	return calls
}

// ModifyInstanceCapacityReservationAttributesWithContext calls ModifyInstanceCapacityReservationAttributesWithContextFunc.
func (mock *ec2ClientMock) ModifyInstanceCapacityReservationAttributesWithContext(in1 context.Context, in2 *ec2.ModifyInstanceCapacityReservationAttributesInput, in3 ...request.Option) (*ec2.ModifyInstanceCapacityReservationAttributesOutput, error) {
	if mock.ModifyInstanceCapacityReservationAttributesWithContextFunc == nil {
		panic("ec2ClientMock.ModifyInstanceCapacityReservationAttributesWithContextFunc: method is nil but ec2Client.ModifyInstanceCapacityReservationAttributesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyInstanceCapacityReservationAttributesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyInstanceCapacityReservationAttributesWithContext.Lock()
	mock.calls.ModifyInstanceCapacityReservationAttributesWithContext = append(mock.calls.ModifyInstanceCapacityReservationAttributesWithContext, callInfo)
	lockec2ClientMockModifyInstanceCapacityReservationAttributesWithContext.Unlock()
	return mock.ModifyInstanceCapacityReservationAttributesWithContextFunc(in1, in2, in3...)
}

// ModifyInstanceCapacityReservationAttributesWithContextCalls gets all the calls that were made to ModifyInstanceCapacityReservationAttributesWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyInstanceCapacityReservationAttributesWithContextCalls())
func (mock *ec2ClientMock) ModifyInstanceCapacityReservationAttributesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyInstanceCapacityReservationAttributesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyInstanceCapacityReservationAttributesInput
		In3 []request.Option
	}
	lockec2ClientMockModifyInstanceCapacityReservationAttributesWithContext.RLock()
	calls = mock.calls.ModifyInstanceCapacityReservationAttributesWithContext
	lockec2ClientMockModifyInstanceCapacityReservationAttributesWithContext.RUnlock()
	return calls
}

// ModifyInstanceCreditSpecification calls ModifyInstanceCreditSpecificationFunc.
func (mock *ec2ClientMock) ModifyInstanceCreditSpecification(in1 *ec2.ModifyInstanceCreditSpecificationInput) (*ec2.ModifyInstanceCreditSpecificationOutput, error) {
	if mock.ModifyInstanceCreditSpecificationFunc == nil {
		panic("ec2ClientMock.ModifyInstanceCreditSpecificationFunc: method is nil but ec2Client.ModifyInstanceCreditSpecification was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyInstanceCreditSpecificationInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyInstanceCreditSpecification.Lock()
	mock.calls.ModifyInstanceCreditSpecification = append(mock.calls.ModifyInstanceCreditSpecification, callInfo)
	lockec2ClientMockModifyInstanceCreditSpecification.Unlock()
	return mock.ModifyInstanceCreditSpecificationFunc(in1)
}

// ModifyInstanceCreditSpecificationCalls gets all the calls that were made to ModifyInstanceCreditSpecification.
// Check the length with:
//     len(mockedec2Client.ModifyInstanceCreditSpecificationCalls())
func (mock *ec2ClientMock) ModifyInstanceCreditSpecificationCalls() []struct {
	In1 *ec2.ModifyInstanceCreditSpecificationInput
} {
	var calls []struct {
		In1 *ec2.ModifyInstanceCreditSpecificationInput
	}
	lockec2ClientMockModifyInstanceCreditSpecification.RLock()
	calls = mock.calls.ModifyInstanceCreditSpecification
	lockec2ClientMockModifyInstanceCreditSpecification.RUnlock()
	return calls
}

// ModifyInstanceCreditSpecificationRequest calls ModifyInstanceCreditSpecificationRequestFunc.
func (mock *ec2ClientMock) ModifyInstanceCreditSpecificationRequest(in1 *ec2.ModifyInstanceCreditSpecificationInput) (*request.Request, *ec2.ModifyInstanceCreditSpecificationOutput) {
	if mock.ModifyInstanceCreditSpecificationRequestFunc == nil {
		panic("ec2ClientMock.ModifyInstanceCreditSpecificationRequestFunc: method is nil but ec2Client.ModifyInstanceCreditSpecificationRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyInstanceCreditSpecificationInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyInstanceCreditSpecificationRequest.Lock()
	mock.calls.ModifyInstanceCreditSpecificationRequest = append(mock.calls.ModifyInstanceCreditSpecificationRequest, callInfo)
	lockec2ClientMockModifyInstanceCreditSpecificationRequest.Unlock()
	return mock.ModifyInstanceCreditSpecificationRequestFunc(in1)
}

// ModifyInstanceCreditSpecificationRequestCalls gets all the calls that were made to ModifyInstanceCreditSpecificationRequest.
// Check the length with:
//     len(mockedec2Client.ModifyInstanceCreditSpecificationRequestCalls())
func (mock *ec2ClientMock) ModifyInstanceCreditSpecificationRequestCalls() []struct {
	In1 *ec2.ModifyInstanceCreditSpecificationInput
} {
	var calls []struct {
		In1 *ec2.ModifyInstanceCreditSpecificationInput
	}
	lockec2ClientMockModifyInstanceCreditSpecificationRequest.RLock()
	calls = mock.calls.ModifyInstanceCreditSpecificationRequest
	lockec2ClientMockModifyInstanceCreditSpecificationRequest.RUnlock()
	return calls
}

// ModifyInstanceCreditSpecificationWithContext calls ModifyInstanceCreditSpecificationWithContextFunc.
func (mock *ec2ClientMock) ModifyInstanceCreditSpecificationWithContext(in1 context.Context, in2 *ec2.ModifyInstanceCreditSpecificationInput, in3 ...request.Option) (*ec2.ModifyInstanceCreditSpecificationOutput, error) {
	if mock.ModifyInstanceCreditSpecificationWithContextFunc == nil {
		panic("ec2ClientMock.ModifyInstanceCreditSpecificationWithContextFunc: method is nil but ec2Client.ModifyInstanceCreditSpecificationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyInstanceCreditSpecificationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyInstanceCreditSpecificationWithContext.Lock()
	mock.calls.ModifyInstanceCreditSpecificationWithContext = append(mock.calls.ModifyInstanceCreditSpecificationWithContext, callInfo)
	lockec2ClientMockModifyInstanceCreditSpecificationWithContext.Unlock()
	return mock.ModifyInstanceCreditSpecificationWithContextFunc(in1, in2, in3...)
}

// ModifyInstanceCreditSpecificationWithContextCalls gets all the calls that were made to ModifyInstanceCreditSpecificationWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyInstanceCreditSpecificationWithContextCalls())
func (mock *ec2ClientMock) ModifyInstanceCreditSpecificationWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyInstanceCreditSpecificationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyInstanceCreditSpecificationInput
		In3 []request.Option
	}
	lockec2ClientMockModifyInstanceCreditSpecificationWithContext.RLock()
	calls = mock.calls.ModifyInstanceCreditSpecificationWithContext
	lockec2ClientMockModifyInstanceCreditSpecificationWithContext.RUnlock()
	return calls
}

// ModifyInstanceEventStartTime calls ModifyInstanceEventStartTimeFunc.
func (mock *ec2ClientMock) ModifyInstanceEventStartTime(in1 *ec2.ModifyInstanceEventStartTimeInput) (*ec2.ModifyInstanceEventStartTimeOutput, error) {
	if mock.ModifyInstanceEventStartTimeFunc == nil {
		panic("ec2ClientMock.ModifyInstanceEventStartTimeFunc: method is nil but ec2Client.ModifyInstanceEventStartTime was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyInstanceEventStartTimeInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyInstanceEventStartTime.Lock()
	mock.calls.ModifyInstanceEventStartTime = append(mock.calls.ModifyInstanceEventStartTime, callInfo)
	lockec2ClientMockModifyInstanceEventStartTime.Unlock()
	return mock.ModifyInstanceEventStartTimeFunc(in1)
}

// ModifyInstanceEventStartTimeCalls gets all the calls that were made to ModifyInstanceEventStartTime.
// Check the length with:
//     len(mockedec2Client.ModifyInstanceEventStartTimeCalls())
func (mock *ec2ClientMock) ModifyInstanceEventStartTimeCalls() []struct {
	In1 *ec2.ModifyInstanceEventStartTimeInput
} {
	var calls []struct {
		In1 *ec2.ModifyInstanceEventStartTimeInput
	}
	lockec2ClientMockModifyInstanceEventStartTime.RLock()
	calls = mock.calls.ModifyInstanceEventStartTime
	lockec2ClientMockModifyInstanceEventStartTime.RUnlock()
	return calls
}

// ModifyInstanceEventStartTimeRequest calls ModifyInstanceEventStartTimeRequestFunc.
func (mock *ec2ClientMock) ModifyInstanceEventStartTimeRequest(in1 *ec2.ModifyInstanceEventStartTimeInput) (*request.Request, *ec2.ModifyInstanceEventStartTimeOutput) {
	if mock.ModifyInstanceEventStartTimeRequestFunc == nil {
		panic("ec2ClientMock.ModifyInstanceEventStartTimeRequestFunc: method is nil but ec2Client.ModifyInstanceEventStartTimeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyInstanceEventStartTimeInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyInstanceEventStartTimeRequest.Lock()
	mock.calls.ModifyInstanceEventStartTimeRequest = append(mock.calls.ModifyInstanceEventStartTimeRequest, callInfo)
	lockec2ClientMockModifyInstanceEventStartTimeRequest.Unlock()
	return mock.ModifyInstanceEventStartTimeRequestFunc(in1)
}

// ModifyInstanceEventStartTimeRequestCalls gets all the calls that were made to ModifyInstanceEventStartTimeRequest.
// Check the length with:
//     len(mockedec2Client.ModifyInstanceEventStartTimeRequestCalls())
func (mock *ec2ClientMock) ModifyInstanceEventStartTimeRequestCalls() []struct {
	In1 *ec2.ModifyInstanceEventStartTimeInput
} {
	var calls []struct {
		In1 *ec2.ModifyInstanceEventStartTimeInput
	}
	lockec2ClientMockModifyInstanceEventStartTimeRequest.RLock()
	calls = mock.calls.ModifyInstanceEventStartTimeRequest
	lockec2ClientMockModifyInstanceEventStartTimeRequest.RUnlock()
	return calls
}

// ModifyInstanceEventStartTimeWithContext calls ModifyInstanceEventStartTimeWithContextFunc.
func (mock *ec2ClientMock) ModifyInstanceEventStartTimeWithContext(in1 context.Context, in2 *ec2.ModifyInstanceEventStartTimeInput, in3 ...request.Option) (*ec2.ModifyInstanceEventStartTimeOutput, error) {
	if mock.ModifyInstanceEventStartTimeWithContextFunc == nil {
		panic("ec2ClientMock.ModifyInstanceEventStartTimeWithContextFunc: method is nil but ec2Client.ModifyInstanceEventStartTimeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyInstanceEventStartTimeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyInstanceEventStartTimeWithContext.Lock()
	mock.calls.ModifyInstanceEventStartTimeWithContext = append(mock.calls.ModifyInstanceEventStartTimeWithContext, callInfo)
	lockec2ClientMockModifyInstanceEventStartTimeWithContext.Unlock()
	return mock.ModifyInstanceEventStartTimeWithContextFunc(in1, in2, in3...)
}

// ModifyInstanceEventStartTimeWithContextCalls gets all the calls that were made to ModifyInstanceEventStartTimeWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyInstanceEventStartTimeWithContextCalls())
func (mock *ec2ClientMock) ModifyInstanceEventStartTimeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyInstanceEventStartTimeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyInstanceEventStartTimeInput
		In3 []request.Option
	}
	lockec2ClientMockModifyInstanceEventStartTimeWithContext.RLock()
	calls = mock.calls.ModifyInstanceEventStartTimeWithContext
	lockec2ClientMockModifyInstanceEventStartTimeWithContext.RUnlock()
	return calls
}

// ModifyInstanceMetadataOptions calls ModifyInstanceMetadataOptionsFunc.
func (mock *ec2ClientMock) ModifyInstanceMetadataOptions(in1 *ec2.ModifyInstanceMetadataOptionsInput) (*ec2.ModifyInstanceMetadataOptionsOutput, error) {
	if mock.ModifyInstanceMetadataOptionsFunc == nil {
		panic("ec2ClientMock.ModifyInstanceMetadataOptionsFunc: method is nil but ec2Client.ModifyInstanceMetadataOptions was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyInstanceMetadataOptionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyInstanceMetadataOptions.Lock()
	mock.calls.ModifyInstanceMetadataOptions = append(mock.calls.ModifyInstanceMetadataOptions, callInfo)
	lockec2ClientMockModifyInstanceMetadataOptions.Unlock()
	return mock.ModifyInstanceMetadataOptionsFunc(in1)
}

// ModifyInstanceMetadataOptionsCalls gets all the calls that were made to ModifyInstanceMetadataOptions.
// Check the length with:
//     len(mockedec2Client.ModifyInstanceMetadataOptionsCalls())
func (mock *ec2ClientMock) ModifyInstanceMetadataOptionsCalls() []struct {
	In1 *ec2.ModifyInstanceMetadataOptionsInput
} {
	var calls []struct {
		In1 *ec2.ModifyInstanceMetadataOptionsInput
	}
	lockec2ClientMockModifyInstanceMetadataOptions.RLock()
	calls = mock.calls.ModifyInstanceMetadataOptions
	lockec2ClientMockModifyInstanceMetadataOptions.RUnlock()
	return calls
}

// ModifyInstanceMetadataOptionsRequest calls ModifyInstanceMetadataOptionsRequestFunc.
func (mock *ec2ClientMock) ModifyInstanceMetadataOptionsRequest(in1 *ec2.ModifyInstanceMetadataOptionsInput) (*request.Request, *ec2.ModifyInstanceMetadataOptionsOutput) {
	if mock.ModifyInstanceMetadataOptionsRequestFunc == nil {
		panic("ec2ClientMock.ModifyInstanceMetadataOptionsRequestFunc: method is nil but ec2Client.ModifyInstanceMetadataOptionsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyInstanceMetadataOptionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyInstanceMetadataOptionsRequest.Lock()
	mock.calls.ModifyInstanceMetadataOptionsRequest = append(mock.calls.ModifyInstanceMetadataOptionsRequest, callInfo)
	lockec2ClientMockModifyInstanceMetadataOptionsRequest.Unlock()
	return mock.ModifyInstanceMetadataOptionsRequestFunc(in1)
}

// ModifyInstanceMetadataOptionsRequestCalls gets all the calls that were made to ModifyInstanceMetadataOptionsRequest.
// Check the length with:
//     len(mockedec2Client.ModifyInstanceMetadataOptionsRequestCalls())
func (mock *ec2ClientMock) ModifyInstanceMetadataOptionsRequestCalls() []struct {
	In1 *ec2.ModifyInstanceMetadataOptionsInput
} {
	var calls []struct {
		In1 *ec2.ModifyInstanceMetadataOptionsInput
	}
	lockec2ClientMockModifyInstanceMetadataOptionsRequest.RLock()
	calls = mock.calls.ModifyInstanceMetadataOptionsRequest
	lockec2ClientMockModifyInstanceMetadataOptionsRequest.RUnlock()
	return calls
}

// ModifyInstanceMetadataOptionsWithContext calls ModifyInstanceMetadataOptionsWithContextFunc.
func (mock *ec2ClientMock) ModifyInstanceMetadataOptionsWithContext(in1 context.Context, in2 *ec2.ModifyInstanceMetadataOptionsInput, in3 ...request.Option) (*ec2.ModifyInstanceMetadataOptionsOutput, error) {
	if mock.ModifyInstanceMetadataOptionsWithContextFunc == nil {
		panic("ec2ClientMock.ModifyInstanceMetadataOptionsWithContextFunc: method is nil but ec2Client.ModifyInstanceMetadataOptionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyInstanceMetadataOptionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyInstanceMetadataOptionsWithContext.Lock()
	mock.calls.ModifyInstanceMetadataOptionsWithContext = append(mock.calls.ModifyInstanceMetadataOptionsWithContext, callInfo)
	lockec2ClientMockModifyInstanceMetadataOptionsWithContext.Unlock()
	return mock.ModifyInstanceMetadataOptionsWithContextFunc(in1, in2, in3...)
}

// ModifyInstanceMetadataOptionsWithContextCalls gets all the calls that were made to ModifyInstanceMetadataOptionsWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyInstanceMetadataOptionsWithContextCalls())
func (mock *ec2ClientMock) ModifyInstanceMetadataOptionsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyInstanceMetadataOptionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyInstanceMetadataOptionsInput
		In3 []request.Option
	}
	lockec2ClientMockModifyInstanceMetadataOptionsWithContext.RLock()
	calls = mock.calls.ModifyInstanceMetadataOptionsWithContext
	lockec2ClientMockModifyInstanceMetadataOptionsWithContext.RUnlock()
	return calls
}

// ModifyInstancePlacement calls ModifyInstancePlacementFunc.
func (mock *ec2ClientMock) ModifyInstancePlacement(in1 *ec2.ModifyInstancePlacementInput) (*ec2.ModifyInstancePlacementOutput, error) {
	if mock.ModifyInstancePlacementFunc == nil {
		panic("ec2ClientMock.ModifyInstancePlacementFunc: method is nil but ec2Client.ModifyInstancePlacement was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyInstancePlacementInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyInstancePlacement.Lock()
	mock.calls.ModifyInstancePlacement = append(mock.calls.ModifyInstancePlacement, callInfo)
	lockec2ClientMockModifyInstancePlacement.Unlock()
	return mock.ModifyInstancePlacementFunc(in1)
}

// ModifyInstancePlacementCalls gets all the calls that were made to ModifyInstancePlacement.
// Check the length with:
//     len(mockedec2Client.ModifyInstancePlacementCalls())
func (mock *ec2ClientMock) ModifyInstancePlacementCalls() []struct {
	In1 *ec2.ModifyInstancePlacementInput
} {
	var calls []struct {
		In1 *ec2.ModifyInstancePlacementInput
	}
	lockec2ClientMockModifyInstancePlacement.RLock()
	calls = mock.calls.ModifyInstancePlacement
	lockec2ClientMockModifyInstancePlacement.RUnlock()
	return calls
}

// ModifyInstancePlacementRequest calls ModifyInstancePlacementRequestFunc.
func (mock *ec2ClientMock) ModifyInstancePlacementRequest(in1 *ec2.ModifyInstancePlacementInput) (*request.Request, *ec2.ModifyInstancePlacementOutput) {
	if mock.ModifyInstancePlacementRequestFunc == nil {
		panic("ec2ClientMock.ModifyInstancePlacementRequestFunc: method is nil but ec2Client.ModifyInstancePlacementRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyInstancePlacementInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyInstancePlacementRequest.Lock()
	mock.calls.ModifyInstancePlacementRequest = append(mock.calls.ModifyInstancePlacementRequest, callInfo)
	lockec2ClientMockModifyInstancePlacementRequest.Unlock()
	return mock.ModifyInstancePlacementRequestFunc(in1)
}

// ModifyInstancePlacementRequestCalls gets all the calls that were made to ModifyInstancePlacementRequest.
// Check the length with:
//     len(mockedec2Client.ModifyInstancePlacementRequestCalls())
func (mock *ec2ClientMock) ModifyInstancePlacementRequestCalls() []struct {
	In1 *ec2.ModifyInstancePlacementInput
} {
	var calls []struct {
		In1 *ec2.ModifyInstancePlacementInput
	}
	lockec2ClientMockModifyInstancePlacementRequest.RLock()
	calls = mock.calls.ModifyInstancePlacementRequest
	lockec2ClientMockModifyInstancePlacementRequest.RUnlock()
	return calls
}

// ModifyInstancePlacementWithContext calls ModifyInstancePlacementWithContextFunc.
func (mock *ec2ClientMock) ModifyInstancePlacementWithContext(in1 context.Context, in2 *ec2.ModifyInstancePlacementInput, in3 ...request.Option) (*ec2.ModifyInstancePlacementOutput, error) {
	if mock.ModifyInstancePlacementWithContextFunc == nil {
		panic("ec2ClientMock.ModifyInstancePlacementWithContextFunc: method is nil but ec2Client.ModifyInstancePlacementWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyInstancePlacementInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyInstancePlacementWithContext.Lock()
	mock.calls.ModifyInstancePlacementWithContext = append(mock.calls.ModifyInstancePlacementWithContext, callInfo)
	lockec2ClientMockModifyInstancePlacementWithContext.Unlock()
	return mock.ModifyInstancePlacementWithContextFunc(in1, in2, in3...)
}

// ModifyInstancePlacementWithContextCalls gets all the calls that were made to ModifyInstancePlacementWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyInstancePlacementWithContextCalls())
func (mock *ec2ClientMock) ModifyInstancePlacementWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyInstancePlacementInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyInstancePlacementInput
		In3 []request.Option
	}
	lockec2ClientMockModifyInstancePlacementWithContext.RLock()
	calls = mock.calls.ModifyInstancePlacementWithContext
	lockec2ClientMockModifyInstancePlacementWithContext.RUnlock()
	return calls
}

// ModifyLaunchTemplate calls ModifyLaunchTemplateFunc.
func (mock *ec2ClientMock) ModifyLaunchTemplate(in1 *ec2.ModifyLaunchTemplateInput) (*ec2.ModifyLaunchTemplateOutput, error) {
	if mock.ModifyLaunchTemplateFunc == nil {
		panic("ec2ClientMock.ModifyLaunchTemplateFunc: method is nil but ec2Client.ModifyLaunchTemplate was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyLaunchTemplateInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyLaunchTemplate.Lock()
	mock.calls.ModifyLaunchTemplate = append(mock.calls.ModifyLaunchTemplate, callInfo)
	lockec2ClientMockModifyLaunchTemplate.Unlock()
	return mock.ModifyLaunchTemplateFunc(in1)
}

// ModifyLaunchTemplateCalls gets all the calls that were made to ModifyLaunchTemplate.
// Check the length with:
//     len(mockedec2Client.ModifyLaunchTemplateCalls())
func (mock *ec2ClientMock) ModifyLaunchTemplateCalls() []struct {
	In1 *ec2.ModifyLaunchTemplateInput
} {
	var calls []struct {
		In1 *ec2.ModifyLaunchTemplateInput
	}
	lockec2ClientMockModifyLaunchTemplate.RLock()
	calls = mock.calls.ModifyLaunchTemplate
	lockec2ClientMockModifyLaunchTemplate.RUnlock()
	return calls
}

// ModifyLaunchTemplateRequest calls ModifyLaunchTemplateRequestFunc.
func (mock *ec2ClientMock) ModifyLaunchTemplateRequest(in1 *ec2.ModifyLaunchTemplateInput) (*request.Request, *ec2.ModifyLaunchTemplateOutput) {
	if mock.ModifyLaunchTemplateRequestFunc == nil {
		panic("ec2ClientMock.ModifyLaunchTemplateRequestFunc: method is nil but ec2Client.ModifyLaunchTemplateRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyLaunchTemplateInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyLaunchTemplateRequest.Lock()
	mock.calls.ModifyLaunchTemplateRequest = append(mock.calls.ModifyLaunchTemplateRequest, callInfo)
	lockec2ClientMockModifyLaunchTemplateRequest.Unlock()
	return mock.ModifyLaunchTemplateRequestFunc(in1)
}

// ModifyLaunchTemplateRequestCalls gets all the calls that were made to ModifyLaunchTemplateRequest.
// Check the length with:
//     len(mockedec2Client.ModifyLaunchTemplateRequestCalls())
func (mock *ec2ClientMock) ModifyLaunchTemplateRequestCalls() []struct {
	In1 *ec2.ModifyLaunchTemplateInput
} {
	var calls []struct {
		In1 *ec2.ModifyLaunchTemplateInput
	}
	lockec2ClientMockModifyLaunchTemplateRequest.RLock()
	calls = mock.calls.ModifyLaunchTemplateRequest
	lockec2ClientMockModifyLaunchTemplateRequest.RUnlock()
	return calls
}

// ModifyLaunchTemplateWithContext calls ModifyLaunchTemplateWithContextFunc.
func (mock *ec2ClientMock) ModifyLaunchTemplateWithContext(in1 context.Context, in2 *ec2.ModifyLaunchTemplateInput, in3 ...request.Option) (*ec2.ModifyLaunchTemplateOutput, error) {
	if mock.ModifyLaunchTemplateWithContextFunc == nil {
		panic("ec2ClientMock.ModifyLaunchTemplateWithContextFunc: method is nil but ec2Client.ModifyLaunchTemplateWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyLaunchTemplateInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyLaunchTemplateWithContext.Lock()
	mock.calls.ModifyLaunchTemplateWithContext = append(mock.calls.ModifyLaunchTemplateWithContext, callInfo)
	lockec2ClientMockModifyLaunchTemplateWithContext.Unlock()
	return mock.ModifyLaunchTemplateWithContextFunc(in1, in2, in3...)
}

// ModifyLaunchTemplateWithContextCalls gets all the calls that were made to ModifyLaunchTemplateWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyLaunchTemplateWithContextCalls())
func (mock *ec2ClientMock) ModifyLaunchTemplateWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyLaunchTemplateInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyLaunchTemplateInput
		In3 []request.Option
	}
	lockec2ClientMockModifyLaunchTemplateWithContext.RLock()
	calls = mock.calls.ModifyLaunchTemplateWithContext
	lockec2ClientMockModifyLaunchTemplateWithContext.RUnlock()
	return calls
}

// ModifyNetworkInterfaceAttribute calls ModifyNetworkInterfaceAttributeFunc.
func (mock *ec2ClientMock) ModifyNetworkInterfaceAttribute(in1 *ec2.ModifyNetworkInterfaceAttributeInput) (*ec2.ModifyNetworkInterfaceAttributeOutput, error) {
	if mock.ModifyNetworkInterfaceAttributeFunc == nil {
		panic("ec2ClientMock.ModifyNetworkInterfaceAttributeFunc: method is nil but ec2Client.ModifyNetworkInterfaceAttribute was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyNetworkInterfaceAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyNetworkInterfaceAttribute.Lock()
	mock.calls.ModifyNetworkInterfaceAttribute = append(mock.calls.ModifyNetworkInterfaceAttribute, callInfo)
	lockec2ClientMockModifyNetworkInterfaceAttribute.Unlock()
	return mock.ModifyNetworkInterfaceAttributeFunc(in1)
}

// ModifyNetworkInterfaceAttributeCalls gets all the calls that were made to ModifyNetworkInterfaceAttribute.
// Check the length with:
//     len(mockedec2Client.ModifyNetworkInterfaceAttributeCalls())
func (mock *ec2ClientMock) ModifyNetworkInterfaceAttributeCalls() []struct {
	In1 *ec2.ModifyNetworkInterfaceAttributeInput
} {
	var calls []struct {
		In1 *ec2.ModifyNetworkInterfaceAttributeInput
	}
	lockec2ClientMockModifyNetworkInterfaceAttribute.RLock()
	calls = mock.calls.ModifyNetworkInterfaceAttribute
	lockec2ClientMockModifyNetworkInterfaceAttribute.RUnlock()
	return calls
}

// ModifyNetworkInterfaceAttributeRequest calls ModifyNetworkInterfaceAttributeRequestFunc.
func (mock *ec2ClientMock) ModifyNetworkInterfaceAttributeRequest(in1 *ec2.ModifyNetworkInterfaceAttributeInput) (*request.Request, *ec2.ModifyNetworkInterfaceAttributeOutput) {
	if mock.ModifyNetworkInterfaceAttributeRequestFunc == nil {
		panic("ec2ClientMock.ModifyNetworkInterfaceAttributeRequestFunc: method is nil but ec2Client.ModifyNetworkInterfaceAttributeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyNetworkInterfaceAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyNetworkInterfaceAttributeRequest.Lock()
	mock.calls.ModifyNetworkInterfaceAttributeRequest = append(mock.calls.ModifyNetworkInterfaceAttributeRequest, callInfo)
	lockec2ClientMockModifyNetworkInterfaceAttributeRequest.Unlock()
	return mock.ModifyNetworkInterfaceAttributeRequestFunc(in1)
}

// ModifyNetworkInterfaceAttributeRequestCalls gets all the calls that were made to ModifyNetworkInterfaceAttributeRequest.
// Check the length with:
//     len(mockedec2Client.ModifyNetworkInterfaceAttributeRequestCalls())
func (mock *ec2ClientMock) ModifyNetworkInterfaceAttributeRequestCalls() []struct {
	In1 *ec2.ModifyNetworkInterfaceAttributeInput
} {
	var calls []struct {
		In1 *ec2.ModifyNetworkInterfaceAttributeInput
	}
	lockec2ClientMockModifyNetworkInterfaceAttributeRequest.RLock()
	calls = mock.calls.ModifyNetworkInterfaceAttributeRequest
	lockec2ClientMockModifyNetworkInterfaceAttributeRequest.RUnlock()
	return calls
}

// ModifyNetworkInterfaceAttributeWithContext calls ModifyNetworkInterfaceAttributeWithContextFunc.
func (mock *ec2ClientMock) ModifyNetworkInterfaceAttributeWithContext(in1 context.Context, in2 *ec2.ModifyNetworkInterfaceAttributeInput, in3 ...request.Option) (*ec2.ModifyNetworkInterfaceAttributeOutput, error) {
	if mock.ModifyNetworkInterfaceAttributeWithContextFunc == nil {
		panic("ec2ClientMock.ModifyNetworkInterfaceAttributeWithContextFunc: method is nil but ec2Client.ModifyNetworkInterfaceAttributeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyNetworkInterfaceAttributeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyNetworkInterfaceAttributeWithContext.Lock()
	mock.calls.ModifyNetworkInterfaceAttributeWithContext = append(mock.calls.ModifyNetworkInterfaceAttributeWithContext, callInfo)
	lockec2ClientMockModifyNetworkInterfaceAttributeWithContext.Unlock()
	return mock.ModifyNetworkInterfaceAttributeWithContextFunc(in1, in2, in3...)
}

// ModifyNetworkInterfaceAttributeWithContextCalls gets all the calls that were made to ModifyNetworkInterfaceAttributeWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyNetworkInterfaceAttributeWithContextCalls())
func (mock *ec2ClientMock) ModifyNetworkInterfaceAttributeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyNetworkInterfaceAttributeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyNetworkInterfaceAttributeInput
		In3 []request.Option
	}
	lockec2ClientMockModifyNetworkInterfaceAttributeWithContext.RLock()
	calls = mock.calls.ModifyNetworkInterfaceAttributeWithContext
	lockec2ClientMockModifyNetworkInterfaceAttributeWithContext.RUnlock()
	return calls
}

// ModifyReservedInstances calls ModifyReservedInstancesFunc.
func (mock *ec2ClientMock) ModifyReservedInstances(in1 *ec2.ModifyReservedInstancesInput) (*ec2.ModifyReservedInstancesOutput, error) {
	if mock.ModifyReservedInstancesFunc == nil {
		panic("ec2ClientMock.ModifyReservedInstancesFunc: method is nil but ec2Client.ModifyReservedInstances was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyReservedInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyReservedInstances.Lock()
	mock.calls.ModifyReservedInstances = append(mock.calls.ModifyReservedInstances, callInfo)
	lockec2ClientMockModifyReservedInstances.Unlock()
	return mock.ModifyReservedInstancesFunc(in1)
}

// ModifyReservedInstancesCalls gets all the calls that were made to ModifyReservedInstances.
// Check the length with:
//     len(mockedec2Client.ModifyReservedInstancesCalls())
func (mock *ec2ClientMock) ModifyReservedInstancesCalls() []struct {
	In1 *ec2.ModifyReservedInstancesInput
} {
	var calls []struct {
		In1 *ec2.ModifyReservedInstancesInput
	}
	lockec2ClientMockModifyReservedInstances.RLock()
	calls = mock.calls.ModifyReservedInstances
	lockec2ClientMockModifyReservedInstances.RUnlock()
	return calls
}

// ModifyReservedInstancesRequest calls ModifyReservedInstancesRequestFunc.
func (mock *ec2ClientMock) ModifyReservedInstancesRequest(in1 *ec2.ModifyReservedInstancesInput) (*request.Request, *ec2.ModifyReservedInstancesOutput) {
	if mock.ModifyReservedInstancesRequestFunc == nil {
		panic("ec2ClientMock.ModifyReservedInstancesRequestFunc: method is nil but ec2Client.ModifyReservedInstancesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyReservedInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyReservedInstancesRequest.Lock()
	mock.calls.ModifyReservedInstancesRequest = append(mock.calls.ModifyReservedInstancesRequest, callInfo)
	lockec2ClientMockModifyReservedInstancesRequest.Unlock()
	return mock.ModifyReservedInstancesRequestFunc(in1)
}

// ModifyReservedInstancesRequestCalls gets all the calls that were made to ModifyReservedInstancesRequest.
// Check the length with:
//     len(mockedec2Client.ModifyReservedInstancesRequestCalls())
func (mock *ec2ClientMock) ModifyReservedInstancesRequestCalls() []struct {
	In1 *ec2.ModifyReservedInstancesInput
} {
	var calls []struct {
		In1 *ec2.ModifyReservedInstancesInput
	}
	lockec2ClientMockModifyReservedInstancesRequest.RLock()
	calls = mock.calls.ModifyReservedInstancesRequest
	lockec2ClientMockModifyReservedInstancesRequest.RUnlock()
	return calls
}

// ModifyReservedInstancesWithContext calls ModifyReservedInstancesWithContextFunc.
func (mock *ec2ClientMock) ModifyReservedInstancesWithContext(in1 context.Context, in2 *ec2.ModifyReservedInstancesInput, in3 ...request.Option) (*ec2.ModifyReservedInstancesOutput, error) {
	if mock.ModifyReservedInstancesWithContextFunc == nil {
		panic("ec2ClientMock.ModifyReservedInstancesWithContextFunc: method is nil but ec2Client.ModifyReservedInstancesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyReservedInstancesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyReservedInstancesWithContext.Lock()
	mock.calls.ModifyReservedInstancesWithContext = append(mock.calls.ModifyReservedInstancesWithContext, callInfo)
	lockec2ClientMockModifyReservedInstancesWithContext.Unlock()
	return mock.ModifyReservedInstancesWithContextFunc(in1, in2, in3...)
}

// ModifyReservedInstancesWithContextCalls gets all the calls that were made to ModifyReservedInstancesWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyReservedInstancesWithContextCalls())
func (mock *ec2ClientMock) ModifyReservedInstancesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyReservedInstancesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyReservedInstancesInput
		In3 []request.Option
	}
	lockec2ClientMockModifyReservedInstancesWithContext.RLock()
	calls = mock.calls.ModifyReservedInstancesWithContext
	lockec2ClientMockModifyReservedInstancesWithContext.RUnlock()
	return calls
}

// ModifySnapshotAttribute calls ModifySnapshotAttributeFunc.
func (mock *ec2ClientMock) ModifySnapshotAttribute(in1 *ec2.ModifySnapshotAttributeInput) (*ec2.ModifySnapshotAttributeOutput, error) {
	if mock.ModifySnapshotAttributeFunc == nil {
		panic("ec2ClientMock.ModifySnapshotAttributeFunc: method is nil but ec2Client.ModifySnapshotAttribute was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifySnapshotAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifySnapshotAttribute.Lock()
	mock.calls.ModifySnapshotAttribute = append(mock.calls.ModifySnapshotAttribute, callInfo)
	lockec2ClientMockModifySnapshotAttribute.Unlock()
	return mock.ModifySnapshotAttributeFunc(in1)
}

// ModifySnapshotAttributeCalls gets all the calls that were made to ModifySnapshotAttribute.
// Check the length with:
//     len(mockedec2Client.ModifySnapshotAttributeCalls())
func (mock *ec2ClientMock) ModifySnapshotAttributeCalls() []struct {
	In1 *ec2.ModifySnapshotAttributeInput
} {
	var calls []struct {
		In1 *ec2.ModifySnapshotAttributeInput
	}
	lockec2ClientMockModifySnapshotAttribute.RLock()
	calls = mock.calls.ModifySnapshotAttribute
	lockec2ClientMockModifySnapshotAttribute.RUnlock()
	return calls
}

// ModifySnapshotAttributeRequest calls ModifySnapshotAttributeRequestFunc.
func (mock *ec2ClientMock) ModifySnapshotAttributeRequest(in1 *ec2.ModifySnapshotAttributeInput) (*request.Request, *ec2.ModifySnapshotAttributeOutput) {
	if mock.ModifySnapshotAttributeRequestFunc == nil {
		panic("ec2ClientMock.ModifySnapshotAttributeRequestFunc: method is nil but ec2Client.ModifySnapshotAttributeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifySnapshotAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifySnapshotAttributeRequest.Lock()
	mock.calls.ModifySnapshotAttributeRequest = append(mock.calls.ModifySnapshotAttributeRequest, callInfo)
	lockec2ClientMockModifySnapshotAttributeRequest.Unlock()
	return mock.ModifySnapshotAttributeRequestFunc(in1)
}

// ModifySnapshotAttributeRequestCalls gets all the calls that were made to ModifySnapshotAttributeRequest.
// Check the length with:
//     len(mockedec2Client.ModifySnapshotAttributeRequestCalls())
func (mock *ec2ClientMock) ModifySnapshotAttributeRequestCalls() []struct {
	In1 *ec2.ModifySnapshotAttributeInput
} {
	var calls []struct {
		In1 *ec2.ModifySnapshotAttributeInput
	}
	lockec2ClientMockModifySnapshotAttributeRequest.RLock()
	calls = mock.calls.ModifySnapshotAttributeRequest
	lockec2ClientMockModifySnapshotAttributeRequest.RUnlock()
	return calls
}

// ModifySnapshotAttributeWithContext calls ModifySnapshotAttributeWithContextFunc.
func (mock *ec2ClientMock) ModifySnapshotAttributeWithContext(in1 context.Context, in2 *ec2.ModifySnapshotAttributeInput, in3 ...request.Option) (*ec2.ModifySnapshotAttributeOutput, error) {
	if mock.ModifySnapshotAttributeWithContextFunc == nil {
		panic("ec2ClientMock.ModifySnapshotAttributeWithContextFunc: method is nil but ec2Client.ModifySnapshotAttributeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifySnapshotAttributeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifySnapshotAttributeWithContext.Lock()
	mock.calls.ModifySnapshotAttributeWithContext = append(mock.calls.ModifySnapshotAttributeWithContext, callInfo)
	lockec2ClientMockModifySnapshotAttributeWithContext.Unlock()
	return mock.ModifySnapshotAttributeWithContextFunc(in1, in2, in3...)
}

// ModifySnapshotAttributeWithContextCalls gets all the calls that were made to ModifySnapshotAttributeWithContext.
// Check the length with:
//     len(mockedec2Client.ModifySnapshotAttributeWithContextCalls())
func (mock *ec2ClientMock) ModifySnapshotAttributeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifySnapshotAttributeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifySnapshotAttributeInput
		In3 []request.Option
	}
	lockec2ClientMockModifySnapshotAttributeWithContext.RLock()
	calls = mock.calls.ModifySnapshotAttributeWithContext
	lockec2ClientMockModifySnapshotAttributeWithContext.RUnlock()
	return calls
}

// ModifySpotFleetRequest calls ModifySpotFleetRequestFunc.
func (mock *ec2ClientMock) ModifySpotFleetRequest(in1 *ec2.ModifySpotFleetRequestInput) (*ec2.ModifySpotFleetRequestOutput, error) {
	if mock.ModifySpotFleetRequestFunc == nil {
		panic("ec2ClientMock.ModifySpotFleetRequestFunc: method is nil but ec2Client.ModifySpotFleetRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifySpotFleetRequestInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifySpotFleetRequest.Lock()
	mock.calls.ModifySpotFleetRequest = append(mock.calls.ModifySpotFleetRequest, callInfo)
	lockec2ClientMockModifySpotFleetRequest.Unlock()
	return mock.ModifySpotFleetRequestFunc(in1)
}

// ModifySpotFleetRequestCalls gets all the calls that were made to ModifySpotFleetRequest.
// Check the length with:
//     len(mockedec2Client.ModifySpotFleetRequestCalls())
func (mock *ec2ClientMock) ModifySpotFleetRequestCalls() []struct {
	In1 *ec2.ModifySpotFleetRequestInput
} {
	var calls []struct {
		In1 *ec2.ModifySpotFleetRequestInput
	}
	lockec2ClientMockModifySpotFleetRequest.RLock()
	calls = mock.calls.ModifySpotFleetRequest
	lockec2ClientMockModifySpotFleetRequest.RUnlock()
	return calls
}

// ModifySpotFleetRequestRequest calls ModifySpotFleetRequestRequestFunc.
func (mock *ec2ClientMock) ModifySpotFleetRequestRequest(in1 *ec2.ModifySpotFleetRequestInput) (*request.Request, *ec2.ModifySpotFleetRequestOutput) {
	if mock.ModifySpotFleetRequestRequestFunc == nil {
		panic("ec2ClientMock.ModifySpotFleetRequestRequestFunc: method is nil but ec2Client.ModifySpotFleetRequestRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifySpotFleetRequestInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifySpotFleetRequestRequest.Lock()
	mock.calls.ModifySpotFleetRequestRequest = append(mock.calls.ModifySpotFleetRequestRequest, callInfo)
	lockec2ClientMockModifySpotFleetRequestRequest.Unlock()
	return mock.ModifySpotFleetRequestRequestFunc(in1)
}

// ModifySpotFleetRequestRequestCalls gets all the calls that were made to ModifySpotFleetRequestRequest.
// Check the length with:
//     len(mockedec2Client.ModifySpotFleetRequestRequestCalls())
func (mock *ec2ClientMock) ModifySpotFleetRequestRequestCalls() []struct {
	In1 *ec2.ModifySpotFleetRequestInput
} {
	var calls []struct {
		In1 *ec2.ModifySpotFleetRequestInput
	}
	lockec2ClientMockModifySpotFleetRequestRequest.RLock()
	calls = mock.calls.ModifySpotFleetRequestRequest
	lockec2ClientMockModifySpotFleetRequestRequest.RUnlock()
	return calls
}

// ModifySpotFleetRequestWithContext calls ModifySpotFleetRequestWithContextFunc.
func (mock *ec2ClientMock) ModifySpotFleetRequestWithContext(in1 context.Context, in2 *ec2.ModifySpotFleetRequestInput, in3 ...request.Option) (*ec2.ModifySpotFleetRequestOutput, error) {
	if mock.ModifySpotFleetRequestWithContextFunc == nil {
		panic("ec2ClientMock.ModifySpotFleetRequestWithContextFunc: method is nil but ec2Client.ModifySpotFleetRequestWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifySpotFleetRequestInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifySpotFleetRequestWithContext.Lock()
	mock.calls.ModifySpotFleetRequestWithContext = append(mock.calls.ModifySpotFleetRequestWithContext, callInfo)
	lockec2ClientMockModifySpotFleetRequestWithContext.Unlock()
	return mock.ModifySpotFleetRequestWithContextFunc(in1, in2, in3...)
}

// ModifySpotFleetRequestWithContextCalls gets all the calls that were made to ModifySpotFleetRequestWithContext.
// Check the length with:
//     len(mockedec2Client.ModifySpotFleetRequestWithContextCalls())
func (mock *ec2ClientMock) ModifySpotFleetRequestWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifySpotFleetRequestInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifySpotFleetRequestInput
		In3 []request.Option
	}
	lockec2ClientMockModifySpotFleetRequestWithContext.RLock()
	calls = mock.calls.ModifySpotFleetRequestWithContext
	lockec2ClientMockModifySpotFleetRequestWithContext.RUnlock()
	return calls
}

// ModifySubnetAttribute calls ModifySubnetAttributeFunc.
func (mock *ec2ClientMock) ModifySubnetAttribute(in1 *ec2.ModifySubnetAttributeInput) (*ec2.ModifySubnetAttributeOutput, error) {
	if mock.ModifySubnetAttributeFunc == nil {
		panic("ec2ClientMock.ModifySubnetAttributeFunc: method is nil but ec2Client.ModifySubnetAttribute was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifySubnetAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifySubnetAttribute.Lock()
	mock.calls.ModifySubnetAttribute = append(mock.calls.ModifySubnetAttribute, callInfo)
	lockec2ClientMockModifySubnetAttribute.Unlock()
	return mock.ModifySubnetAttributeFunc(in1)
}

// ModifySubnetAttributeCalls gets all the calls that were made to ModifySubnetAttribute.
// Check the length with:
//     len(mockedec2Client.ModifySubnetAttributeCalls())
func (mock *ec2ClientMock) ModifySubnetAttributeCalls() []struct {
	In1 *ec2.ModifySubnetAttributeInput
} {
	var calls []struct {
		In1 *ec2.ModifySubnetAttributeInput
	}
	lockec2ClientMockModifySubnetAttribute.RLock()
	calls = mock.calls.ModifySubnetAttribute
	lockec2ClientMockModifySubnetAttribute.RUnlock()
	return calls
}

// ModifySubnetAttributeRequest calls ModifySubnetAttributeRequestFunc.
func (mock *ec2ClientMock) ModifySubnetAttributeRequest(in1 *ec2.ModifySubnetAttributeInput) (*request.Request, *ec2.ModifySubnetAttributeOutput) {
	if mock.ModifySubnetAttributeRequestFunc == nil {
		panic("ec2ClientMock.ModifySubnetAttributeRequestFunc: method is nil but ec2Client.ModifySubnetAttributeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifySubnetAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifySubnetAttributeRequest.Lock()
	mock.calls.ModifySubnetAttributeRequest = append(mock.calls.ModifySubnetAttributeRequest, callInfo)
	lockec2ClientMockModifySubnetAttributeRequest.Unlock()
	return mock.ModifySubnetAttributeRequestFunc(in1)
}

// ModifySubnetAttributeRequestCalls gets all the calls that were made to ModifySubnetAttributeRequest.
// Check the length with:
//     len(mockedec2Client.ModifySubnetAttributeRequestCalls())
func (mock *ec2ClientMock) ModifySubnetAttributeRequestCalls() []struct {
	In1 *ec2.ModifySubnetAttributeInput
} {
	var calls []struct {
		In1 *ec2.ModifySubnetAttributeInput
	}
	lockec2ClientMockModifySubnetAttributeRequest.RLock()
	calls = mock.calls.ModifySubnetAttributeRequest
	lockec2ClientMockModifySubnetAttributeRequest.RUnlock()
	return calls
}

// ModifySubnetAttributeWithContext calls ModifySubnetAttributeWithContextFunc.
func (mock *ec2ClientMock) ModifySubnetAttributeWithContext(in1 context.Context, in2 *ec2.ModifySubnetAttributeInput, in3 ...request.Option) (*ec2.ModifySubnetAttributeOutput, error) {
	if mock.ModifySubnetAttributeWithContextFunc == nil {
		panic("ec2ClientMock.ModifySubnetAttributeWithContextFunc: method is nil but ec2Client.ModifySubnetAttributeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifySubnetAttributeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifySubnetAttributeWithContext.Lock()
	mock.calls.ModifySubnetAttributeWithContext = append(mock.calls.ModifySubnetAttributeWithContext, callInfo)
	lockec2ClientMockModifySubnetAttributeWithContext.Unlock()
	return mock.ModifySubnetAttributeWithContextFunc(in1, in2, in3...)
}

// ModifySubnetAttributeWithContextCalls gets all the calls that were made to ModifySubnetAttributeWithContext.
// Check the length with:
//     len(mockedec2Client.ModifySubnetAttributeWithContextCalls())
func (mock *ec2ClientMock) ModifySubnetAttributeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifySubnetAttributeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifySubnetAttributeInput
		In3 []request.Option
	}
	lockec2ClientMockModifySubnetAttributeWithContext.RLock()
	calls = mock.calls.ModifySubnetAttributeWithContext
	lockec2ClientMockModifySubnetAttributeWithContext.RUnlock()
	return calls
}

// ModifyTrafficMirrorFilterNetworkServices calls ModifyTrafficMirrorFilterNetworkServicesFunc.
func (mock *ec2ClientMock) ModifyTrafficMirrorFilterNetworkServices(in1 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput) (*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput, error) {
	if mock.ModifyTrafficMirrorFilterNetworkServicesFunc == nil {
		panic("ec2ClientMock.ModifyTrafficMirrorFilterNetworkServicesFunc: method is nil but ec2Client.ModifyTrafficMirrorFilterNetworkServices was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyTrafficMirrorFilterNetworkServices.Lock()
	mock.calls.ModifyTrafficMirrorFilterNetworkServices = append(mock.calls.ModifyTrafficMirrorFilterNetworkServices, callInfo)
	lockec2ClientMockModifyTrafficMirrorFilterNetworkServices.Unlock()
	return mock.ModifyTrafficMirrorFilterNetworkServicesFunc(in1)
}

// ModifyTrafficMirrorFilterNetworkServicesCalls gets all the calls that were made to ModifyTrafficMirrorFilterNetworkServices.
// Check the length with:
//     len(mockedec2Client.ModifyTrafficMirrorFilterNetworkServicesCalls())
func (mock *ec2ClientMock) ModifyTrafficMirrorFilterNetworkServicesCalls() []struct {
	In1 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput
} {
	var calls []struct {
		In1 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput
	}
	lockec2ClientMockModifyTrafficMirrorFilterNetworkServices.RLock()
	calls = mock.calls.ModifyTrafficMirrorFilterNetworkServices
	lockec2ClientMockModifyTrafficMirrorFilterNetworkServices.RUnlock()
	return calls
}

// ModifyTrafficMirrorFilterNetworkServicesRequest calls ModifyTrafficMirrorFilterNetworkServicesRequestFunc.
func (mock *ec2ClientMock) ModifyTrafficMirrorFilterNetworkServicesRequest(in1 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput) (*request.Request, *ec2.ModifyTrafficMirrorFilterNetworkServicesOutput) {
	if mock.ModifyTrafficMirrorFilterNetworkServicesRequestFunc == nil {
		panic("ec2ClientMock.ModifyTrafficMirrorFilterNetworkServicesRequestFunc: method is nil but ec2Client.ModifyTrafficMirrorFilterNetworkServicesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyTrafficMirrorFilterNetworkServicesRequest.Lock()
	mock.calls.ModifyTrafficMirrorFilterNetworkServicesRequest = append(mock.calls.ModifyTrafficMirrorFilterNetworkServicesRequest, callInfo)
	lockec2ClientMockModifyTrafficMirrorFilterNetworkServicesRequest.Unlock()
	return mock.ModifyTrafficMirrorFilterNetworkServicesRequestFunc(in1)
}

// ModifyTrafficMirrorFilterNetworkServicesRequestCalls gets all the calls that were made to ModifyTrafficMirrorFilterNetworkServicesRequest.
// Check the length with:
//     len(mockedec2Client.ModifyTrafficMirrorFilterNetworkServicesRequestCalls())
func (mock *ec2ClientMock) ModifyTrafficMirrorFilterNetworkServicesRequestCalls() []struct {
	In1 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput
} {
	var calls []struct {
		In1 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput
	}
	lockec2ClientMockModifyTrafficMirrorFilterNetworkServicesRequest.RLock()
	calls = mock.calls.ModifyTrafficMirrorFilterNetworkServicesRequest
	lockec2ClientMockModifyTrafficMirrorFilterNetworkServicesRequest.RUnlock()
	return calls
}

// ModifyTrafficMirrorFilterNetworkServicesWithContext calls ModifyTrafficMirrorFilterNetworkServicesWithContextFunc.
func (mock *ec2ClientMock) ModifyTrafficMirrorFilterNetworkServicesWithContext(in1 context.Context, in2 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput, in3 ...request.Option) (*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput, error) {
	if mock.ModifyTrafficMirrorFilterNetworkServicesWithContextFunc == nil {
		panic("ec2ClientMock.ModifyTrafficMirrorFilterNetworkServicesWithContextFunc: method is nil but ec2Client.ModifyTrafficMirrorFilterNetworkServicesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyTrafficMirrorFilterNetworkServicesWithContext.Lock()
	mock.calls.ModifyTrafficMirrorFilterNetworkServicesWithContext = append(mock.calls.ModifyTrafficMirrorFilterNetworkServicesWithContext, callInfo)
	lockec2ClientMockModifyTrafficMirrorFilterNetworkServicesWithContext.Unlock()
	return mock.ModifyTrafficMirrorFilterNetworkServicesWithContextFunc(in1, in2, in3...)
}

// ModifyTrafficMirrorFilterNetworkServicesWithContextCalls gets all the calls that were made to ModifyTrafficMirrorFilterNetworkServicesWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyTrafficMirrorFilterNetworkServicesWithContextCalls())
func (mock *ec2ClientMock) ModifyTrafficMirrorFilterNetworkServicesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput
		In3 []request.Option
	}
	lockec2ClientMockModifyTrafficMirrorFilterNetworkServicesWithContext.RLock()
	calls = mock.calls.ModifyTrafficMirrorFilterNetworkServicesWithContext
	lockec2ClientMockModifyTrafficMirrorFilterNetworkServicesWithContext.RUnlock()
	return calls
}

// ModifyTrafficMirrorFilterRule calls ModifyTrafficMirrorFilterRuleFunc.
func (mock *ec2ClientMock) ModifyTrafficMirrorFilterRule(in1 *ec2.ModifyTrafficMirrorFilterRuleInput) (*ec2.ModifyTrafficMirrorFilterRuleOutput, error) {
	if mock.ModifyTrafficMirrorFilterRuleFunc == nil {
		panic("ec2ClientMock.ModifyTrafficMirrorFilterRuleFunc: method is nil but ec2Client.ModifyTrafficMirrorFilterRule was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyTrafficMirrorFilterRuleInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyTrafficMirrorFilterRule.Lock()
	mock.calls.ModifyTrafficMirrorFilterRule = append(mock.calls.ModifyTrafficMirrorFilterRule, callInfo)
	lockec2ClientMockModifyTrafficMirrorFilterRule.Unlock()
	return mock.ModifyTrafficMirrorFilterRuleFunc(in1)
}

// ModifyTrafficMirrorFilterRuleCalls gets all the calls that were made to ModifyTrafficMirrorFilterRule.
// Check the length with:
//     len(mockedec2Client.ModifyTrafficMirrorFilterRuleCalls())
func (mock *ec2ClientMock) ModifyTrafficMirrorFilterRuleCalls() []struct {
	In1 *ec2.ModifyTrafficMirrorFilterRuleInput
} {
	var calls []struct {
		In1 *ec2.ModifyTrafficMirrorFilterRuleInput
	}
	lockec2ClientMockModifyTrafficMirrorFilterRule.RLock()
	calls = mock.calls.ModifyTrafficMirrorFilterRule
	lockec2ClientMockModifyTrafficMirrorFilterRule.RUnlock()
	return calls
}

// ModifyTrafficMirrorFilterRuleRequest calls ModifyTrafficMirrorFilterRuleRequestFunc.
func (mock *ec2ClientMock) ModifyTrafficMirrorFilterRuleRequest(in1 *ec2.ModifyTrafficMirrorFilterRuleInput) (*request.Request, *ec2.ModifyTrafficMirrorFilterRuleOutput) {
	if mock.ModifyTrafficMirrorFilterRuleRequestFunc == nil {
		panic("ec2ClientMock.ModifyTrafficMirrorFilterRuleRequestFunc: method is nil but ec2Client.ModifyTrafficMirrorFilterRuleRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyTrafficMirrorFilterRuleInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyTrafficMirrorFilterRuleRequest.Lock()
	mock.calls.ModifyTrafficMirrorFilterRuleRequest = append(mock.calls.ModifyTrafficMirrorFilterRuleRequest, callInfo)
	lockec2ClientMockModifyTrafficMirrorFilterRuleRequest.Unlock()
	return mock.ModifyTrafficMirrorFilterRuleRequestFunc(in1)
}

// ModifyTrafficMirrorFilterRuleRequestCalls gets all the calls that were made to ModifyTrafficMirrorFilterRuleRequest.
// Check the length with:
//     len(mockedec2Client.ModifyTrafficMirrorFilterRuleRequestCalls())
func (mock *ec2ClientMock) ModifyTrafficMirrorFilterRuleRequestCalls() []struct {
	In1 *ec2.ModifyTrafficMirrorFilterRuleInput
} {
	var calls []struct {
		In1 *ec2.ModifyTrafficMirrorFilterRuleInput
	}
	lockec2ClientMockModifyTrafficMirrorFilterRuleRequest.RLock()
	calls = mock.calls.ModifyTrafficMirrorFilterRuleRequest
	lockec2ClientMockModifyTrafficMirrorFilterRuleRequest.RUnlock()
	return calls
}

// ModifyTrafficMirrorFilterRuleWithContext calls ModifyTrafficMirrorFilterRuleWithContextFunc.
func (mock *ec2ClientMock) ModifyTrafficMirrorFilterRuleWithContext(in1 context.Context, in2 *ec2.ModifyTrafficMirrorFilterRuleInput, in3 ...request.Option) (*ec2.ModifyTrafficMirrorFilterRuleOutput, error) {
	if mock.ModifyTrafficMirrorFilterRuleWithContextFunc == nil {
		panic("ec2ClientMock.ModifyTrafficMirrorFilterRuleWithContextFunc: method is nil but ec2Client.ModifyTrafficMirrorFilterRuleWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyTrafficMirrorFilterRuleInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyTrafficMirrorFilterRuleWithContext.Lock()
	mock.calls.ModifyTrafficMirrorFilterRuleWithContext = append(mock.calls.ModifyTrafficMirrorFilterRuleWithContext, callInfo)
	lockec2ClientMockModifyTrafficMirrorFilterRuleWithContext.Unlock()
	return mock.ModifyTrafficMirrorFilterRuleWithContextFunc(in1, in2, in3...)
}

// ModifyTrafficMirrorFilterRuleWithContextCalls gets all the calls that were made to ModifyTrafficMirrorFilterRuleWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyTrafficMirrorFilterRuleWithContextCalls())
func (mock *ec2ClientMock) ModifyTrafficMirrorFilterRuleWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyTrafficMirrorFilterRuleInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyTrafficMirrorFilterRuleInput
		In3 []request.Option
	}
	lockec2ClientMockModifyTrafficMirrorFilterRuleWithContext.RLock()
	calls = mock.calls.ModifyTrafficMirrorFilterRuleWithContext
	lockec2ClientMockModifyTrafficMirrorFilterRuleWithContext.RUnlock()
	return calls
}

// ModifyTrafficMirrorSession calls ModifyTrafficMirrorSessionFunc.
func (mock *ec2ClientMock) ModifyTrafficMirrorSession(in1 *ec2.ModifyTrafficMirrorSessionInput) (*ec2.ModifyTrafficMirrorSessionOutput, error) {
	if mock.ModifyTrafficMirrorSessionFunc == nil {
		panic("ec2ClientMock.ModifyTrafficMirrorSessionFunc: method is nil but ec2Client.ModifyTrafficMirrorSession was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyTrafficMirrorSessionInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyTrafficMirrorSession.Lock()
	mock.calls.ModifyTrafficMirrorSession = append(mock.calls.ModifyTrafficMirrorSession, callInfo)
	lockec2ClientMockModifyTrafficMirrorSession.Unlock()
	return mock.ModifyTrafficMirrorSessionFunc(in1)
}

// ModifyTrafficMirrorSessionCalls gets all the calls that were made to ModifyTrafficMirrorSession.
// Check the length with:
//     len(mockedec2Client.ModifyTrafficMirrorSessionCalls())
func (mock *ec2ClientMock) ModifyTrafficMirrorSessionCalls() []struct {
	In1 *ec2.ModifyTrafficMirrorSessionInput
} {
	var calls []struct {
		In1 *ec2.ModifyTrafficMirrorSessionInput
	}
	lockec2ClientMockModifyTrafficMirrorSession.RLock()
	calls = mock.calls.ModifyTrafficMirrorSession
	lockec2ClientMockModifyTrafficMirrorSession.RUnlock()
	return calls
}

// ModifyTrafficMirrorSessionRequest calls ModifyTrafficMirrorSessionRequestFunc.
func (mock *ec2ClientMock) ModifyTrafficMirrorSessionRequest(in1 *ec2.ModifyTrafficMirrorSessionInput) (*request.Request, *ec2.ModifyTrafficMirrorSessionOutput) {
	if mock.ModifyTrafficMirrorSessionRequestFunc == nil {
		panic("ec2ClientMock.ModifyTrafficMirrorSessionRequestFunc: method is nil but ec2Client.ModifyTrafficMirrorSessionRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyTrafficMirrorSessionInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyTrafficMirrorSessionRequest.Lock()
	mock.calls.ModifyTrafficMirrorSessionRequest = append(mock.calls.ModifyTrafficMirrorSessionRequest, callInfo)
	lockec2ClientMockModifyTrafficMirrorSessionRequest.Unlock()
	return mock.ModifyTrafficMirrorSessionRequestFunc(in1)
}

// ModifyTrafficMirrorSessionRequestCalls gets all the calls that were made to ModifyTrafficMirrorSessionRequest.
// Check the length with:
//     len(mockedec2Client.ModifyTrafficMirrorSessionRequestCalls())
func (mock *ec2ClientMock) ModifyTrafficMirrorSessionRequestCalls() []struct {
	In1 *ec2.ModifyTrafficMirrorSessionInput
} {
	var calls []struct {
		In1 *ec2.ModifyTrafficMirrorSessionInput
	}
	lockec2ClientMockModifyTrafficMirrorSessionRequest.RLock()
	calls = mock.calls.ModifyTrafficMirrorSessionRequest
	lockec2ClientMockModifyTrafficMirrorSessionRequest.RUnlock()
	return calls
}

// ModifyTrafficMirrorSessionWithContext calls ModifyTrafficMirrorSessionWithContextFunc.
func (mock *ec2ClientMock) ModifyTrafficMirrorSessionWithContext(in1 context.Context, in2 *ec2.ModifyTrafficMirrorSessionInput, in3 ...request.Option) (*ec2.ModifyTrafficMirrorSessionOutput, error) {
	if mock.ModifyTrafficMirrorSessionWithContextFunc == nil {
		panic("ec2ClientMock.ModifyTrafficMirrorSessionWithContextFunc: method is nil but ec2Client.ModifyTrafficMirrorSessionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyTrafficMirrorSessionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyTrafficMirrorSessionWithContext.Lock()
	mock.calls.ModifyTrafficMirrorSessionWithContext = append(mock.calls.ModifyTrafficMirrorSessionWithContext, callInfo)
	lockec2ClientMockModifyTrafficMirrorSessionWithContext.Unlock()
	return mock.ModifyTrafficMirrorSessionWithContextFunc(in1, in2, in3...)
}

// ModifyTrafficMirrorSessionWithContextCalls gets all the calls that were made to ModifyTrafficMirrorSessionWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyTrafficMirrorSessionWithContextCalls())
func (mock *ec2ClientMock) ModifyTrafficMirrorSessionWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyTrafficMirrorSessionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyTrafficMirrorSessionInput
		In3 []request.Option
	}
	lockec2ClientMockModifyTrafficMirrorSessionWithContext.RLock()
	calls = mock.calls.ModifyTrafficMirrorSessionWithContext
	lockec2ClientMockModifyTrafficMirrorSessionWithContext.RUnlock()
	return calls
}

// ModifyTransitGatewayVpcAttachment calls ModifyTransitGatewayVpcAttachmentFunc.
func (mock *ec2ClientMock) ModifyTransitGatewayVpcAttachment(in1 *ec2.ModifyTransitGatewayVpcAttachmentInput) (*ec2.ModifyTransitGatewayVpcAttachmentOutput, error) {
	if mock.ModifyTransitGatewayVpcAttachmentFunc == nil {
		panic("ec2ClientMock.ModifyTransitGatewayVpcAttachmentFunc: method is nil but ec2Client.ModifyTransitGatewayVpcAttachment was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyTransitGatewayVpcAttachmentInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyTransitGatewayVpcAttachment.Lock()
	mock.calls.ModifyTransitGatewayVpcAttachment = append(mock.calls.ModifyTransitGatewayVpcAttachment, callInfo)
	lockec2ClientMockModifyTransitGatewayVpcAttachment.Unlock()
	return mock.ModifyTransitGatewayVpcAttachmentFunc(in1)
}

// ModifyTransitGatewayVpcAttachmentCalls gets all the calls that were made to ModifyTransitGatewayVpcAttachment.
// Check the length with:
//     len(mockedec2Client.ModifyTransitGatewayVpcAttachmentCalls())
func (mock *ec2ClientMock) ModifyTransitGatewayVpcAttachmentCalls() []struct {
	In1 *ec2.ModifyTransitGatewayVpcAttachmentInput
} {
	var calls []struct {
		In1 *ec2.ModifyTransitGatewayVpcAttachmentInput
	}
	lockec2ClientMockModifyTransitGatewayVpcAttachment.RLock()
	calls = mock.calls.ModifyTransitGatewayVpcAttachment
	lockec2ClientMockModifyTransitGatewayVpcAttachment.RUnlock()
	return calls
}

// ModifyTransitGatewayVpcAttachmentRequest calls ModifyTransitGatewayVpcAttachmentRequestFunc.
func (mock *ec2ClientMock) ModifyTransitGatewayVpcAttachmentRequest(in1 *ec2.ModifyTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.ModifyTransitGatewayVpcAttachmentOutput) {
	if mock.ModifyTransitGatewayVpcAttachmentRequestFunc == nil {
		panic("ec2ClientMock.ModifyTransitGatewayVpcAttachmentRequestFunc: method is nil but ec2Client.ModifyTransitGatewayVpcAttachmentRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyTransitGatewayVpcAttachmentInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyTransitGatewayVpcAttachmentRequest.Lock()
	mock.calls.ModifyTransitGatewayVpcAttachmentRequest = append(mock.calls.ModifyTransitGatewayVpcAttachmentRequest, callInfo)
	lockec2ClientMockModifyTransitGatewayVpcAttachmentRequest.Unlock()
	return mock.ModifyTransitGatewayVpcAttachmentRequestFunc(in1)
}

// ModifyTransitGatewayVpcAttachmentRequestCalls gets all the calls that were made to ModifyTransitGatewayVpcAttachmentRequest.
// Check the length with:
//     len(mockedec2Client.ModifyTransitGatewayVpcAttachmentRequestCalls())
func (mock *ec2ClientMock) ModifyTransitGatewayVpcAttachmentRequestCalls() []struct {
	In1 *ec2.ModifyTransitGatewayVpcAttachmentInput
} {
	var calls []struct {
		In1 *ec2.ModifyTransitGatewayVpcAttachmentInput
	}
	lockec2ClientMockModifyTransitGatewayVpcAttachmentRequest.RLock()
	calls = mock.calls.ModifyTransitGatewayVpcAttachmentRequest
	lockec2ClientMockModifyTransitGatewayVpcAttachmentRequest.RUnlock()
	return calls
}

// ModifyTransitGatewayVpcAttachmentWithContext calls ModifyTransitGatewayVpcAttachmentWithContextFunc.
func (mock *ec2ClientMock) ModifyTransitGatewayVpcAttachmentWithContext(in1 context.Context, in2 *ec2.ModifyTransitGatewayVpcAttachmentInput, in3 ...request.Option) (*ec2.ModifyTransitGatewayVpcAttachmentOutput, error) {
	if mock.ModifyTransitGatewayVpcAttachmentWithContextFunc == nil {
		panic("ec2ClientMock.ModifyTransitGatewayVpcAttachmentWithContextFunc: method is nil but ec2Client.ModifyTransitGatewayVpcAttachmentWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyTransitGatewayVpcAttachmentInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyTransitGatewayVpcAttachmentWithContext.Lock()
	mock.calls.ModifyTransitGatewayVpcAttachmentWithContext = append(mock.calls.ModifyTransitGatewayVpcAttachmentWithContext, callInfo)
	lockec2ClientMockModifyTransitGatewayVpcAttachmentWithContext.Unlock()
	return mock.ModifyTransitGatewayVpcAttachmentWithContextFunc(in1, in2, in3...)
}

// ModifyTransitGatewayVpcAttachmentWithContextCalls gets all the calls that were made to ModifyTransitGatewayVpcAttachmentWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyTransitGatewayVpcAttachmentWithContextCalls())
func (mock *ec2ClientMock) ModifyTransitGatewayVpcAttachmentWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyTransitGatewayVpcAttachmentInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyTransitGatewayVpcAttachmentInput
		In3 []request.Option
	}
	lockec2ClientMockModifyTransitGatewayVpcAttachmentWithContext.RLock()
	calls = mock.calls.ModifyTransitGatewayVpcAttachmentWithContext
	lockec2ClientMockModifyTransitGatewayVpcAttachmentWithContext.RUnlock()
	return calls
}

// ModifyVolume calls ModifyVolumeFunc.
func (mock *ec2ClientMock) ModifyVolume(in1 *ec2.ModifyVolumeInput) (*ec2.ModifyVolumeOutput, error) {
	if mock.ModifyVolumeFunc == nil {
		panic("ec2ClientMock.ModifyVolumeFunc: method is nil but ec2Client.ModifyVolume was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyVolumeInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyVolume.Lock()
	mock.calls.ModifyVolume = append(mock.calls.ModifyVolume, callInfo)
	lockec2ClientMockModifyVolume.Unlock()
	return mock.ModifyVolumeFunc(in1)
}

// ModifyVolumeCalls gets all the calls that were made to ModifyVolume.
// Check the length with:
//     len(mockedec2Client.ModifyVolumeCalls())
func (mock *ec2ClientMock) ModifyVolumeCalls() []struct {
	In1 *ec2.ModifyVolumeInput
} {
	var calls []struct {
		In1 *ec2.ModifyVolumeInput
	}
	lockec2ClientMockModifyVolume.RLock()
	calls = mock.calls.ModifyVolume
	lockec2ClientMockModifyVolume.RUnlock()
	return calls
}

// ModifyVolumeAttribute calls ModifyVolumeAttributeFunc.
func (mock *ec2ClientMock) ModifyVolumeAttribute(in1 *ec2.ModifyVolumeAttributeInput) (*ec2.ModifyVolumeAttributeOutput, error) {
	if mock.ModifyVolumeAttributeFunc == nil {
		panic("ec2ClientMock.ModifyVolumeAttributeFunc: method is nil but ec2Client.ModifyVolumeAttribute was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyVolumeAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyVolumeAttribute.Lock()
	mock.calls.ModifyVolumeAttribute = append(mock.calls.ModifyVolumeAttribute, callInfo)
	lockec2ClientMockModifyVolumeAttribute.Unlock()
	return mock.ModifyVolumeAttributeFunc(in1)
}

// ModifyVolumeAttributeCalls gets all the calls that were made to ModifyVolumeAttribute.
// Check the length with:
//     len(mockedec2Client.ModifyVolumeAttributeCalls())
func (mock *ec2ClientMock) ModifyVolumeAttributeCalls() []struct {
	In1 *ec2.ModifyVolumeAttributeInput
} {
	var calls []struct {
		In1 *ec2.ModifyVolumeAttributeInput
	}
	lockec2ClientMockModifyVolumeAttribute.RLock()
	calls = mock.calls.ModifyVolumeAttribute
	lockec2ClientMockModifyVolumeAttribute.RUnlock()
	return calls
}

// ModifyVolumeAttributeRequest calls ModifyVolumeAttributeRequestFunc.
func (mock *ec2ClientMock) ModifyVolumeAttributeRequest(in1 *ec2.ModifyVolumeAttributeInput) (*request.Request, *ec2.ModifyVolumeAttributeOutput) {
	if mock.ModifyVolumeAttributeRequestFunc == nil {
		panic("ec2ClientMock.ModifyVolumeAttributeRequestFunc: method is nil but ec2Client.ModifyVolumeAttributeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyVolumeAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyVolumeAttributeRequest.Lock()
	mock.calls.ModifyVolumeAttributeRequest = append(mock.calls.ModifyVolumeAttributeRequest, callInfo)
	lockec2ClientMockModifyVolumeAttributeRequest.Unlock()
	return mock.ModifyVolumeAttributeRequestFunc(in1)
}

// ModifyVolumeAttributeRequestCalls gets all the calls that were made to ModifyVolumeAttributeRequest.
// Check the length with:
//     len(mockedec2Client.ModifyVolumeAttributeRequestCalls())
func (mock *ec2ClientMock) ModifyVolumeAttributeRequestCalls() []struct {
	In1 *ec2.ModifyVolumeAttributeInput
} {
	var calls []struct {
		In1 *ec2.ModifyVolumeAttributeInput
	}
	lockec2ClientMockModifyVolumeAttributeRequest.RLock()
	calls = mock.calls.ModifyVolumeAttributeRequest
	lockec2ClientMockModifyVolumeAttributeRequest.RUnlock()
	return calls
}

// ModifyVolumeAttributeWithContext calls ModifyVolumeAttributeWithContextFunc.
func (mock *ec2ClientMock) ModifyVolumeAttributeWithContext(in1 context.Context, in2 *ec2.ModifyVolumeAttributeInput, in3 ...request.Option) (*ec2.ModifyVolumeAttributeOutput, error) {
	if mock.ModifyVolumeAttributeWithContextFunc == nil {
		panic("ec2ClientMock.ModifyVolumeAttributeWithContextFunc: method is nil but ec2Client.ModifyVolumeAttributeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyVolumeAttributeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyVolumeAttributeWithContext.Lock()
	mock.calls.ModifyVolumeAttributeWithContext = append(mock.calls.ModifyVolumeAttributeWithContext, callInfo)
	lockec2ClientMockModifyVolumeAttributeWithContext.Unlock()
	return mock.ModifyVolumeAttributeWithContextFunc(in1, in2, in3...)
}

// ModifyVolumeAttributeWithContextCalls gets all the calls that were made to ModifyVolumeAttributeWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyVolumeAttributeWithContextCalls())
func (mock *ec2ClientMock) ModifyVolumeAttributeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyVolumeAttributeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyVolumeAttributeInput
		In3 []request.Option
	}
	lockec2ClientMockModifyVolumeAttributeWithContext.RLock()
	calls = mock.calls.ModifyVolumeAttributeWithContext
	lockec2ClientMockModifyVolumeAttributeWithContext.RUnlock()
	return calls
}

// ModifyVolumeRequest calls ModifyVolumeRequestFunc.
func (mock *ec2ClientMock) ModifyVolumeRequest(in1 *ec2.ModifyVolumeInput) (*request.Request, *ec2.ModifyVolumeOutput) {
	if mock.ModifyVolumeRequestFunc == nil {
		panic("ec2ClientMock.ModifyVolumeRequestFunc: method is nil but ec2Client.ModifyVolumeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyVolumeInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyVolumeRequest.Lock()
	mock.calls.ModifyVolumeRequest = append(mock.calls.ModifyVolumeRequest, callInfo)
	lockec2ClientMockModifyVolumeRequest.Unlock()
	return mock.ModifyVolumeRequestFunc(in1)
}

// ModifyVolumeRequestCalls gets all the calls that were made to ModifyVolumeRequest.
// Check the length with:
//     len(mockedec2Client.ModifyVolumeRequestCalls())
func (mock *ec2ClientMock) ModifyVolumeRequestCalls() []struct {
	In1 *ec2.ModifyVolumeInput
} {
	var calls []struct {
		In1 *ec2.ModifyVolumeInput
	}
	lockec2ClientMockModifyVolumeRequest.RLock()
	calls = mock.calls.ModifyVolumeRequest
	lockec2ClientMockModifyVolumeRequest.RUnlock()
	return calls
}

// ModifyVolumeWithContext calls ModifyVolumeWithContextFunc.
func (mock *ec2ClientMock) ModifyVolumeWithContext(in1 context.Context, in2 *ec2.ModifyVolumeInput, in3 ...request.Option) (*ec2.ModifyVolumeOutput, error) {
	if mock.ModifyVolumeWithContextFunc == nil {
		panic("ec2ClientMock.ModifyVolumeWithContextFunc: method is nil but ec2Client.ModifyVolumeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyVolumeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyVolumeWithContext.Lock()
	mock.calls.ModifyVolumeWithContext = append(mock.calls.ModifyVolumeWithContext, callInfo)
	lockec2ClientMockModifyVolumeWithContext.Unlock()
	return mock.ModifyVolumeWithContextFunc(in1, in2, in3...)
}

// ModifyVolumeWithContextCalls gets all the calls that were made to ModifyVolumeWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyVolumeWithContextCalls())
func (mock *ec2ClientMock) ModifyVolumeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyVolumeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyVolumeInput
		In3 []request.Option
	}
	lockec2ClientMockModifyVolumeWithContext.RLock()
	calls = mock.calls.ModifyVolumeWithContext
	lockec2ClientMockModifyVolumeWithContext.RUnlock()
	return calls
}

// ModifyVpcAttribute calls ModifyVpcAttributeFunc.
func (mock *ec2ClientMock) ModifyVpcAttribute(in1 *ec2.ModifyVpcAttributeInput) (*ec2.ModifyVpcAttributeOutput, error) {
	if mock.ModifyVpcAttributeFunc == nil {
		panic("ec2ClientMock.ModifyVpcAttributeFunc: method is nil but ec2Client.ModifyVpcAttribute was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyVpcAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyVpcAttribute.Lock()
	mock.calls.ModifyVpcAttribute = append(mock.calls.ModifyVpcAttribute, callInfo)
	lockec2ClientMockModifyVpcAttribute.Unlock()
	return mock.ModifyVpcAttributeFunc(in1)
}

// ModifyVpcAttributeCalls gets all the calls that were made to ModifyVpcAttribute.
// Check the length with:
//     len(mockedec2Client.ModifyVpcAttributeCalls())
func (mock *ec2ClientMock) ModifyVpcAttributeCalls() []struct {
	In1 *ec2.ModifyVpcAttributeInput
} {
	var calls []struct {
		In1 *ec2.ModifyVpcAttributeInput
	}
	lockec2ClientMockModifyVpcAttribute.RLock()
	calls = mock.calls.ModifyVpcAttribute
	lockec2ClientMockModifyVpcAttribute.RUnlock()
	return calls
}

// ModifyVpcAttributeRequest calls ModifyVpcAttributeRequestFunc.
func (mock *ec2ClientMock) ModifyVpcAttributeRequest(in1 *ec2.ModifyVpcAttributeInput) (*request.Request, *ec2.ModifyVpcAttributeOutput) {
	if mock.ModifyVpcAttributeRequestFunc == nil {
		panic("ec2ClientMock.ModifyVpcAttributeRequestFunc: method is nil but ec2Client.ModifyVpcAttributeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyVpcAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyVpcAttributeRequest.Lock()
	mock.calls.ModifyVpcAttributeRequest = append(mock.calls.ModifyVpcAttributeRequest, callInfo)
	lockec2ClientMockModifyVpcAttributeRequest.Unlock()
	return mock.ModifyVpcAttributeRequestFunc(in1)
}

// ModifyVpcAttributeRequestCalls gets all the calls that were made to ModifyVpcAttributeRequest.
// Check the length with:
//     len(mockedec2Client.ModifyVpcAttributeRequestCalls())
func (mock *ec2ClientMock) ModifyVpcAttributeRequestCalls() []struct {
	In1 *ec2.ModifyVpcAttributeInput
} {
	var calls []struct {
		In1 *ec2.ModifyVpcAttributeInput
	}
	lockec2ClientMockModifyVpcAttributeRequest.RLock()
	calls = mock.calls.ModifyVpcAttributeRequest
	lockec2ClientMockModifyVpcAttributeRequest.RUnlock()
	return calls
}

// ModifyVpcAttributeWithContext calls ModifyVpcAttributeWithContextFunc.
func (mock *ec2ClientMock) ModifyVpcAttributeWithContext(in1 context.Context, in2 *ec2.ModifyVpcAttributeInput, in3 ...request.Option) (*ec2.ModifyVpcAttributeOutput, error) {
	if mock.ModifyVpcAttributeWithContextFunc == nil {
		panic("ec2ClientMock.ModifyVpcAttributeWithContextFunc: method is nil but ec2Client.ModifyVpcAttributeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyVpcAttributeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyVpcAttributeWithContext.Lock()
	mock.calls.ModifyVpcAttributeWithContext = append(mock.calls.ModifyVpcAttributeWithContext, callInfo)
	lockec2ClientMockModifyVpcAttributeWithContext.Unlock()
	return mock.ModifyVpcAttributeWithContextFunc(in1, in2, in3...)
}

// ModifyVpcAttributeWithContextCalls gets all the calls that were made to ModifyVpcAttributeWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyVpcAttributeWithContextCalls())
func (mock *ec2ClientMock) ModifyVpcAttributeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyVpcAttributeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyVpcAttributeInput
		In3 []request.Option
	}
	lockec2ClientMockModifyVpcAttributeWithContext.RLock()
	calls = mock.calls.ModifyVpcAttributeWithContext
	lockec2ClientMockModifyVpcAttributeWithContext.RUnlock()
	return calls
}

// ModifyVpcEndpoint calls ModifyVpcEndpointFunc.
func (mock *ec2ClientMock) ModifyVpcEndpoint(in1 *ec2.ModifyVpcEndpointInput) (*ec2.ModifyVpcEndpointOutput, error) {
	if mock.ModifyVpcEndpointFunc == nil {
		panic("ec2ClientMock.ModifyVpcEndpointFunc: method is nil but ec2Client.ModifyVpcEndpoint was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyVpcEndpointInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyVpcEndpoint.Lock()
	mock.calls.ModifyVpcEndpoint = append(mock.calls.ModifyVpcEndpoint, callInfo)
	lockec2ClientMockModifyVpcEndpoint.Unlock()
	return mock.ModifyVpcEndpointFunc(in1)
}

// ModifyVpcEndpointCalls gets all the calls that were made to ModifyVpcEndpoint.
// Check the length with:
//     len(mockedec2Client.ModifyVpcEndpointCalls())
func (mock *ec2ClientMock) ModifyVpcEndpointCalls() []struct {
	In1 *ec2.ModifyVpcEndpointInput
} {
	var calls []struct {
		In1 *ec2.ModifyVpcEndpointInput
	}
	lockec2ClientMockModifyVpcEndpoint.RLock()
	calls = mock.calls.ModifyVpcEndpoint
	lockec2ClientMockModifyVpcEndpoint.RUnlock()
	return calls
}

// ModifyVpcEndpointConnectionNotification calls ModifyVpcEndpointConnectionNotificationFunc.
func (mock *ec2ClientMock) ModifyVpcEndpointConnectionNotification(in1 *ec2.ModifyVpcEndpointConnectionNotificationInput) (*ec2.ModifyVpcEndpointConnectionNotificationOutput, error) {
	if mock.ModifyVpcEndpointConnectionNotificationFunc == nil {
		panic("ec2ClientMock.ModifyVpcEndpointConnectionNotificationFunc: method is nil but ec2Client.ModifyVpcEndpointConnectionNotification was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyVpcEndpointConnectionNotificationInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyVpcEndpointConnectionNotification.Lock()
	mock.calls.ModifyVpcEndpointConnectionNotification = append(mock.calls.ModifyVpcEndpointConnectionNotification, callInfo)
	lockec2ClientMockModifyVpcEndpointConnectionNotification.Unlock()
	return mock.ModifyVpcEndpointConnectionNotificationFunc(in1)
}

// ModifyVpcEndpointConnectionNotificationCalls gets all the calls that were made to ModifyVpcEndpointConnectionNotification.
// Check the length with:
//     len(mockedec2Client.ModifyVpcEndpointConnectionNotificationCalls())
func (mock *ec2ClientMock) ModifyVpcEndpointConnectionNotificationCalls() []struct {
	In1 *ec2.ModifyVpcEndpointConnectionNotificationInput
} {
	var calls []struct {
		In1 *ec2.ModifyVpcEndpointConnectionNotificationInput
	}
	lockec2ClientMockModifyVpcEndpointConnectionNotification.RLock()
	calls = mock.calls.ModifyVpcEndpointConnectionNotification
	lockec2ClientMockModifyVpcEndpointConnectionNotification.RUnlock()
	return calls
}

// ModifyVpcEndpointConnectionNotificationRequest calls ModifyVpcEndpointConnectionNotificationRequestFunc.
func (mock *ec2ClientMock) ModifyVpcEndpointConnectionNotificationRequest(in1 *ec2.ModifyVpcEndpointConnectionNotificationInput) (*request.Request, *ec2.ModifyVpcEndpointConnectionNotificationOutput) {
	if mock.ModifyVpcEndpointConnectionNotificationRequestFunc == nil {
		panic("ec2ClientMock.ModifyVpcEndpointConnectionNotificationRequestFunc: method is nil but ec2Client.ModifyVpcEndpointConnectionNotificationRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyVpcEndpointConnectionNotificationInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyVpcEndpointConnectionNotificationRequest.Lock()
	mock.calls.ModifyVpcEndpointConnectionNotificationRequest = append(mock.calls.ModifyVpcEndpointConnectionNotificationRequest, callInfo)
	lockec2ClientMockModifyVpcEndpointConnectionNotificationRequest.Unlock()
	return mock.ModifyVpcEndpointConnectionNotificationRequestFunc(in1)
}

// ModifyVpcEndpointConnectionNotificationRequestCalls gets all the calls that were made to ModifyVpcEndpointConnectionNotificationRequest.
// Check the length with:
//     len(mockedec2Client.ModifyVpcEndpointConnectionNotificationRequestCalls())
func (mock *ec2ClientMock) ModifyVpcEndpointConnectionNotificationRequestCalls() []struct {
	In1 *ec2.ModifyVpcEndpointConnectionNotificationInput
} {
	var calls []struct {
		In1 *ec2.ModifyVpcEndpointConnectionNotificationInput
	}
	lockec2ClientMockModifyVpcEndpointConnectionNotificationRequest.RLock()
	calls = mock.calls.ModifyVpcEndpointConnectionNotificationRequest
	lockec2ClientMockModifyVpcEndpointConnectionNotificationRequest.RUnlock()
	return calls
}

// ModifyVpcEndpointConnectionNotificationWithContext calls ModifyVpcEndpointConnectionNotificationWithContextFunc.
func (mock *ec2ClientMock) ModifyVpcEndpointConnectionNotificationWithContext(in1 context.Context, in2 *ec2.ModifyVpcEndpointConnectionNotificationInput, in3 ...request.Option) (*ec2.ModifyVpcEndpointConnectionNotificationOutput, error) {
	if mock.ModifyVpcEndpointConnectionNotificationWithContextFunc == nil {
		panic("ec2ClientMock.ModifyVpcEndpointConnectionNotificationWithContextFunc: method is nil but ec2Client.ModifyVpcEndpointConnectionNotificationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyVpcEndpointConnectionNotificationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyVpcEndpointConnectionNotificationWithContext.Lock()
	mock.calls.ModifyVpcEndpointConnectionNotificationWithContext = append(mock.calls.ModifyVpcEndpointConnectionNotificationWithContext, callInfo)
	lockec2ClientMockModifyVpcEndpointConnectionNotificationWithContext.Unlock()
	return mock.ModifyVpcEndpointConnectionNotificationWithContextFunc(in1, in2, in3...)
}

// ModifyVpcEndpointConnectionNotificationWithContextCalls gets all the calls that were made to ModifyVpcEndpointConnectionNotificationWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyVpcEndpointConnectionNotificationWithContextCalls())
func (mock *ec2ClientMock) ModifyVpcEndpointConnectionNotificationWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyVpcEndpointConnectionNotificationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyVpcEndpointConnectionNotificationInput
		In3 []request.Option
	}
	lockec2ClientMockModifyVpcEndpointConnectionNotificationWithContext.RLock()
	calls = mock.calls.ModifyVpcEndpointConnectionNotificationWithContext
	lockec2ClientMockModifyVpcEndpointConnectionNotificationWithContext.RUnlock()
	return calls
}

// ModifyVpcEndpointRequest calls ModifyVpcEndpointRequestFunc.
func (mock *ec2ClientMock) ModifyVpcEndpointRequest(in1 *ec2.ModifyVpcEndpointInput) (*request.Request, *ec2.ModifyVpcEndpointOutput) {
	if mock.ModifyVpcEndpointRequestFunc == nil {
		panic("ec2ClientMock.ModifyVpcEndpointRequestFunc: method is nil but ec2Client.ModifyVpcEndpointRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyVpcEndpointInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyVpcEndpointRequest.Lock()
	mock.calls.ModifyVpcEndpointRequest = append(mock.calls.ModifyVpcEndpointRequest, callInfo)
	lockec2ClientMockModifyVpcEndpointRequest.Unlock()
	return mock.ModifyVpcEndpointRequestFunc(in1)
}

// ModifyVpcEndpointRequestCalls gets all the calls that were made to ModifyVpcEndpointRequest.
// Check the length with:
//     len(mockedec2Client.ModifyVpcEndpointRequestCalls())
func (mock *ec2ClientMock) ModifyVpcEndpointRequestCalls() []struct {
	In1 *ec2.ModifyVpcEndpointInput
} {
	var calls []struct {
		In1 *ec2.ModifyVpcEndpointInput
	}
	lockec2ClientMockModifyVpcEndpointRequest.RLock()
	calls = mock.calls.ModifyVpcEndpointRequest
	lockec2ClientMockModifyVpcEndpointRequest.RUnlock()
	return calls
}

// ModifyVpcEndpointServiceConfiguration calls ModifyVpcEndpointServiceConfigurationFunc.
func (mock *ec2ClientMock) ModifyVpcEndpointServiceConfiguration(in1 *ec2.ModifyVpcEndpointServiceConfigurationInput) (*ec2.ModifyVpcEndpointServiceConfigurationOutput, error) {
	if mock.ModifyVpcEndpointServiceConfigurationFunc == nil {
		panic("ec2ClientMock.ModifyVpcEndpointServiceConfigurationFunc: method is nil but ec2Client.ModifyVpcEndpointServiceConfiguration was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyVpcEndpointServiceConfigurationInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyVpcEndpointServiceConfiguration.Lock()
	mock.calls.ModifyVpcEndpointServiceConfiguration = append(mock.calls.ModifyVpcEndpointServiceConfiguration, callInfo)
	lockec2ClientMockModifyVpcEndpointServiceConfiguration.Unlock()
	return mock.ModifyVpcEndpointServiceConfigurationFunc(in1)
}

// ModifyVpcEndpointServiceConfigurationCalls gets all the calls that were made to ModifyVpcEndpointServiceConfiguration.
// Check the length with:
//     len(mockedec2Client.ModifyVpcEndpointServiceConfigurationCalls())
func (mock *ec2ClientMock) ModifyVpcEndpointServiceConfigurationCalls() []struct {
	In1 *ec2.ModifyVpcEndpointServiceConfigurationInput
} {
	var calls []struct {
		In1 *ec2.ModifyVpcEndpointServiceConfigurationInput
	}
	lockec2ClientMockModifyVpcEndpointServiceConfiguration.RLock()
	calls = mock.calls.ModifyVpcEndpointServiceConfiguration
	lockec2ClientMockModifyVpcEndpointServiceConfiguration.RUnlock()
	return calls
}

// ModifyVpcEndpointServiceConfigurationRequest calls ModifyVpcEndpointServiceConfigurationRequestFunc.
func (mock *ec2ClientMock) ModifyVpcEndpointServiceConfigurationRequest(in1 *ec2.ModifyVpcEndpointServiceConfigurationInput) (*request.Request, *ec2.ModifyVpcEndpointServiceConfigurationOutput) {
	if mock.ModifyVpcEndpointServiceConfigurationRequestFunc == nil {
		panic("ec2ClientMock.ModifyVpcEndpointServiceConfigurationRequestFunc: method is nil but ec2Client.ModifyVpcEndpointServiceConfigurationRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyVpcEndpointServiceConfigurationInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyVpcEndpointServiceConfigurationRequest.Lock()
	mock.calls.ModifyVpcEndpointServiceConfigurationRequest = append(mock.calls.ModifyVpcEndpointServiceConfigurationRequest, callInfo)
	lockec2ClientMockModifyVpcEndpointServiceConfigurationRequest.Unlock()
	return mock.ModifyVpcEndpointServiceConfigurationRequestFunc(in1)
}

// ModifyVpcEndpointServiceConfigurationRequestCalls gets all the calls that were made to ModifyVpcEndpointServiceConfigurationRequest.
// Check the length with:
//     len(mockedec2Client.ModifyVpcEndpointServiceConfigurationRequestCalls())
func (mock *ec2ClientMock) ModifyVpcEndpointServiceConfigurationRequestCalls() []struct {
	In1 *ec2.ModifyVpcEndpointServiceConfigurationInput
} {
	var calls []struct {
		In1 *ec2.ModifyVpcEndpointServiceConfigurationInput
	}
	lockec2ClientMockModifyVpcEndpointServiceConfigurationRequest.RLock()
	calls = mock.calls.ModifyVpcEndpointServiceConfigurationRequest
	lockec2ClientMockModifyVpcEndpointServiceConfigurationRequest.RUnlock()
	return calls
}

// ModifyVpcEndpointServiceConfigurationWithContext calls ModifyVpcEndpointServiceConfigurationWithContextFunc.
func (mock *ec2ClientMock) ModifyVpcEndpointServiceConfigurationWithContext(in1 context.Context, in2 *ec2.ModifyVpcEndpointServiceConfigurationInput, in3 ...request.Option) (*ec2.ModifyVpcEndpointServiceConfigurationOutput, error) {
	if mock.ModifyVpcEndpointServiceConfigurationWithContextFunc == nil {
		panic("ec2ClientMock.ModifyVpcEndpointServiceConfigurationWithContextFunc: method is nil but ec2Client.ModifyVpcEndpointServiceConfigurationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyVpcEndpointServiceConfigurationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyVpcEndpointServiceConfigurationWithContext.Lock()
	mock.calls.ModifyVpcEndpointServiceConfigurationWithContext = append(mock.calls.ModifyVpcEndpointServiceConfigurationWithContext, callInfo)
	lockec2ClientMockModifyVpcEndpointServiceConfigurationWithContext.Unlock()
	return mock.ModifyVpcEndpointServiceConfigurationWithContextFunc(in1, in2, in3...)
}

// ModifyVpcEndpointServiceConfigurationWithContextCalls gets all the calls that were made to ModifyVpcEndpointServiceConfigurationWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyVpcEndpointServiceConfigurationWithContextCalls())
func (mock *ec2ClientMock) ModifyVpcEndpointServiceConfigurationWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyVpcEndpointServiceConfigurationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyVpcEndpointServiceConfigurationInput
		In3 []request.Option
	}
	lockec2ClientMockModifyVpcEndpointServiceConfigurationWithContext.RLock()
	calls = mock.calls.ModifyVpcEndpointServiceConfigurationWithContext
	lockec2ClientMockModifyVpcEndpointServiceConfigurationWithContext.RUnlock()
	return calls
}

// ModifyVpcEndpointServicePermissions calls ModifyVpcEndpointServicePermissionsFunc.
func (mock *ec2ClientMock) ModifyVpcEndpointServicePermissions(in1 *ec2.ModifyVpcEndpointServicePermissionsInput) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error) {
	if mock.ModifyVpcEndpointServicePermissionsFunc == nil {
		panic("ec2ClientMock.ModifyVpcEndpointServicePermissionsFunc: method is nil but ec2Client.ModifyVpcEndpointServicePermissions was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyVpcEndpointServicePermissionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyVpcEndpointServicePermissions.Lock()
	mock.calls.ModifyVpcEndpointServicePermissions = append(mock.calls.ModifyVpcEndpointServicePermissions, callInfo)
	lockec2ClientMockModifyVpcEndpointServicePermissions.Unlock()
	return mock.ModifyVpcEndpointServicePermissionsFunc(in1)
}

// ModifyVpcEndpointServicePermissionsCalls gets all the calls that were made to ModifyVpcEndpointServicePermissions.
// Check the length with:
//     len(mockedec2Client.ModifyVpcEndpointServicePermissionsCalls())
func (mock *ec2ClientMock) ModifyVpcEndpointServicePermissionsCalls() []struct {
	In1 *ec2.ModifyVpcEndpointServicePermissionsInput
} {
	var calls []struct {
		In1 *ec2.ModifyVpcEndpointServicePermissionsInput
	}
	lockec2ClientMockModifyVpcEndpointServicePermissions.RLock()
	calls = mock.calls.ModifyVpcEndpointServicePermissions
	lockec2ClientMockModifyVpcEndpointServicePermissions.RUnlock()
	return calls
}

// ModifyVpcEndpointServicePermissionsRequest calls ModifyVpcEndpointServicePermissionsRequestFunc.
func (mock *ec2ClientMock) ModifyVpcEndpointServicePermissionsRequest(in1 *ec2.ModifyVpcEndpointServicePermissionsInput) (*request.Request, *ec2.ModifyVpcEndpointServicePermissionsOutput) {
	if mock.ModifyVpcEndpointServicePermissionsRequestFunc == nil {
		panic("ec2ClientMock.ModifyVpcEndpointServicePermissionsRequestFunc: method is nil but ec2Client.ModifyVpcEndpointServicePermissionsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyVpcEndpointServicePermissionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyVpcEndpointServicePermissionsRequest.Lock()
	mock.calls.ModifyVpcEndpointServicePermissionsRequest = append(mock.calls.ModifyVpcEndpointServicePermissionsRequest, callInfo)
	lockec2ClientMockModifyVpcEndpointServicePermissionsRequest.Unlock()
	return mock.ModifyVpcEndpointServicePermissionsRequestFunc(in1)
}

// ModifyVpcEndpointServicePermissionsRequestCalls gets all the calls that were made to ModifyVpcEndpointServicePermissionsRequest.
// Check the length with:
//     len(mockedec2Client.ModifyVpcEndpointServicePermissionsRequestCalls())
func (mock *ec2ClientMock) ModifyVpcEndpointServicePermissionsRequestCalls() []struct {
	In1 *ec2.ModifyVpcEndpointServicePermissionsInput
} {
	var calls []struct {
		In1 *ec2.ModifyVpcEndpointServicePermissionsInput
	}
	lockec2ClientMockModifyVpcEndpointServicePermissionsRequest.RLock()
	calls = mock.calls.ModifyVpcEndpointServicePermissionsRequest
	lockec2ClientMockModifyVpcEndpointServicePermissionsRequest.RUnlock()
	return calls
}

// ModifyVpcEndpointServicePermissionsWithContext calls ModifyVpcEndpointServicePermissionsWithContextFunc.
func (mock *ec2ClientMock) ModifyVpcEndpointServicePermissionsWithContext(in1 context.Context, in2 *ec2.ModifyVpcEndpointServicePermissionsInput, in3 ...request.Option) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error) {
	if mock.ModifyVpcEndpointServicePermissionsWithContextFunc == nil {
		panic("ec2ClientMock.ModifyVpcEndpointServicePermissionsWithContextFunc: method is nil but ec2Client.ModifyVpcEndpointServicePermissionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyVpcEndpointServicePermissionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyVpcEndpointServicePermissionsWithContext.Lock()
	mock.calls.ModifyVpcEndpointServicePermissionsWithContext = append(mock.calls.ModifyVpcEndpointServicePermissionsWithContext, callInfo)
	lockec2ClientMockModifyVpcEndpointServicePermissionsWithContext.Unlock()
	return mock.ModifyVpcEndpointServicePermissionsWithContextFunc(in1, in2, in3...)
}

// ModifyVpcEndpointServicePermissionsWithContextCalls gets all the calls that were made to ModifyVpcEndpointServicePermissionsWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyVpcEndpointServicePermissionsWithContextCalls())
func (mock *ec2ClientMock) ModifyVpcEndpointServicePermissionsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyVpcEndpointServicePermissionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyVpcEndpointServicePermissionsInput
		In3 []request.Option
	}
	lockec2ClientMockModifyVpcEndpointServicePermissionsWithContext.RLock()
	calls = mock.calls.ModifyVpcEndpointServicePermissionsWithContext
	lockec2ClientMockModifyVpcEndpointServicePermissionsWithContext.RUnlock()
	return calls
}

// ModifyVpcEndpointWithContext calls ModifyVpcEndpointWithContextFunc.
func (mock *ec2ClientMock) ModifyVpcEndpointWithContext(in1 context.Context, in2 *ec2.ModifyVpcEndpointInput, in3 ...request.Option) (*ec2.ModifyVpcEndpointOutput, error) {
	if mock.ModifyVpcEndpointWithContextFunc == nil {
		panic("ec2ClientMock.ModifyVpcEndpointWithContextFunc: method is nil but ec2Client.ModifyVpcEndpointWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyVpcEndpointInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyVpcEndpointWithContext.Lock()
	mock.calls.ModifyVpcEndpointWithContext = append(mock.calls.ModifyVpcEndpointWithContext, callInfo)
	lockec2ClientMockModifyVpcEndpointWithContext.Unlock()
	return mock.ModifyVpcEndpointWithContextFunc(in1, in2, in3...)
}

// ModifyVpcEndpointWithContextCalls gets all the calls that were made to ModifyVpcEndpointWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyVpcEndpointWithContextCalls())
func (mock *ec2ClientMock) ModifyVpcEndpointWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyVpcEndpointInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyVpcEndpointInput
		In3 []request.Option
	}
	lockec2ClientMockModifyVpcEndpointWithContext.RLock()
	calls = mock.calls.ModifyVpcEndpointWithContext
	lockec2ClientMockModifyVpcEndpointWithContext.RUnlock()
	return calls
}

// ModifyVpcPeeringConnectionOptions calls ModifyVpcPeeringConnectionOptionsFunc.
func (mock *ec2ClientMock) ModifyVpcPeeringConnectionOptions(in1 *ec2.ModifyVpcPeeringConnectionOptionsInput) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error) {
	if mock.ModifyVpcPeeringConnectionOptionsFunc == nil {
		panic("ec2ClientMock.ModifyVpcPeeringConnectionOptionsFunc: method is nil but ec2Client.ModifyVpcPeeringConnectionOptions was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyVpcPeeringConnectionOptionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyVpcPeeringConnectionOptions.Lock()
	mock.calls.ModifyVpcPeeringConnectionOptions = append(mock.calls.ModifyVpcPeeringConnectionOptions, callInfo)
	lockec2ClientMockModifyVpcPeeringConnectionOptions.Unlock()
	return mock.ModifyVpcPeeringConnectionOptionsFunc(in1)
}

// ModifyVpcPeeringConnectionOptionsCalls gets all the calls that were made to ModifyVpcPeeringConnectionOptions.
// Check the length with:
//     len(mockedec2Client.ModifyVpcPeeringConnectionOptionsCalls())
func (mock *ec2ClientMock) ModifyVpcPeeringConnectionOptionsCalls() []struct {
	In1 *ec2.ModifyVpcPeeringConnectionOptionsInput
} {
	var calls []struct {
		In1 *ec2.ModifyVpcPeeringConnectionOptionsInput
	}
	lockec2ClientMockModifyVpcPeeringConnectionOptions.RLock()
	calls = mock.calls.ModifyVpcPeeringConnectionOptions
	lockec2ClientMockModifyVpcPeeringConnectionOptions.RUnlock()
	return calls
}

// ModifyVpcPeeringConnectionOptionsRequest calls ModifyVpcPeeringConnectionOptionsRequestFunc.
func (mock *ec2ClientMock) ModifyVpcPeeringConnectionOptionsRequest(in1 *ec2.ModifyVpcPeeringConnectionOptionsInput) (*request.Request, *ec2.ModifyVpcPeeringConnectionOptionsOutput) {
	if mock.ModifyVpcPeeringConnectionOptionsRequestFunc == nil {
		panic("ec2ClientMock.ModifyVpcPeeringConnectionOptionsRequestFunc: method is nil but ec2Client.ModifyVpcPeeringConnectionOptionsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyVpcPeeringConnectionOptionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyVpcPeeringConnectionOptionsRequest.Lock()
	mock.calls.ModifyVpcPeeringConnectionOptionsRequest = append(mock.calls.ModifyVpcPeeringConnectionOptionsRequest, callInfo)
	lockec2ClientMockModifyVpcPeeringConnectionOptionsRequest.Unlock()
	return mock.ModifyVpcPeeringConnectionOptionsRequestFunc(in1)
}

// ModifyVpcPeeringConnectionOptionsRequestCalls gets all the calls that were made to ModifyVpcPeeringConnectionOptionsRequest.
// Check the length with:
//     len(mockedec2Client.ModifyVpcPeeringConnectionOptionsRequestCalls())
func (mock *ec2ClientMock) ModifyVpcPeeringConnectionOptionsRequestCalls() []struct {
	In1 *ec2.ModifyVpcPeeringConnectionOptionsInput
} {
	var calls []struct {
		In1 *ec2.ModifyVpcPeeringConnectionOptionsInput
	}
	lockec2ClientMockModifyVpcPeeringConnectionOptionsRequest.RLock()
	calls = mock.calls.ModifyVpcPeeringConnectionOptionsRequest
	lockec2ClientMockModifyVpcPeeringConnectionOptionsRequest.RUnlock()
	return calls
}

// ModifyVpcPeeringConnectionOptionsWithContext calls ModifyVpcPeeringConnectionOptionsWithContextFunc.
func (mock *ec2ClientMock) ModifyVpcPeeringConnectionOptionsWithContext(in1 context.Context, in2 *ec2.ModifyVpcPeeringConnectionOptionsInput, in3 ...request.Option) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error) {
	if mock.ModifyVpcPeeringConnectionOptionsWithContextFunc == nil {
		panic("ec2ClientMock.ModifyVpcPeeringConnectionOptionsWithContextFunc: method is nil but ec2Client.ModifyVpcPeeringConnectionOptionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyVpcPeeringConnectionOptionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyVpcPeeringConnectionOptionsWithContext.Lock()
	mock.calls.ModifyVpcPeeringConnectionOptionsWithContext = append(mock.calls.ModifyVpcPeeringConnectionOptionsWithContext, callInfo)
	lockec2ClientMockModifyVpcPeeringConnectionOptionsWithContext.Unlock()
	return mock.ModifyVpcPeeringConnectionOptionsWithContextFunc(in1, in2, in3...)
}

// ModifyVpcPeeringConnectionOptionsWithContextCalls gets all the calls that were made to ModifyVpcPeeringConnectionOptionsWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyVpcPeeringConnectionOptionsWithContextCalls())
func (mock *ec2ClientMock) ModifyVpcPeeringConnectionOptionsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyVpcPeeringConnectionOptionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyVpcPeeringConnectionOptionsInput
		In3 []request.Option
	}
	lockec2ClientMockModifyVpcPeeringConnectionOptionsWithContext.RLock()
	calls = mock.calls.ModifyVpcPeeringConnectionOptionsWithContext
	lockec2ClientMockModifyVpcPeeringConnectionOptionsWithContext.RUnlock()
	return calls
}

// ModifyVpcTenancy calls ModifyVpcTenancyFunc.
func (mock *ec2ClientMock) ModifyVpcTenancy(in1 *ec2.ModifyVpcTenancyInput) (*ec2.ModifyVpcTenancyOutput, error) {
	if mock.ModifyVpcTenancyFunc == nil {
		panic("ec2ClientMock.ModifyVpcTenancyFunc: method is nil but ec2Client.ModifyVpcTenancy was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyVpcTenancyInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyVpcTenancy.Lock()
	mock.calls.ModifyVpcTenancy = append(mock.calls.ModifyVpcTenancy, callInfo)
	lockec2ClientMockModifyVpcTenancy.Unlock()
	return mock.ModifyVpcTenancyFunc(in1)
}

// ModifyVpcTenancyCalls gets all the calls that were made to ModifyVpcTenancy.
// Check the length with:
//     len(mockedec2Client.ModifyVpcTenancyCalls())
func (mock *ec2ClientMock) ModifyVpcTenancyCalls() []struct {
	In1 *ec2.ModifyVpcTenancyInput
} {
	var calls []struct {
		In1 *ec2.ModifyVpcTenancyInput
	}
	lockec2ClientMockModifyVpcTenancy.RLock()
	calls = mock.calls.ModifyVpcTenancy
	lockec2ClientMockModifyVpcTenancy.RUnlock()
	return calls
}

// ModifyVpcTenancyRequest calls ModifyVpcTenancyRequestFunc.
func (mock *ec2ClientMock) ModifyVpcTenancyRequest(in1 *ec2.ModifyVpcTenancyInput) (*request.Request, *ec2.ModifyVpcTenancyOutput) {
	if mock.ModifyVpcTenancyRequestFunc == nil {
		panic("ec2ClientMock.ModifyVpcTenancyRequestFunc: method is nil but ec2Client.ModifyVpcTenancyRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyVpcTenancyInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyVpcTenancyRequest.Lock()
	mock.calls.ModifyVpcTenancyRequest = append(mock.calls.ModifyVpcTenancyRequest, callInfo)
	lockec2ClientMockModifyVpcTenancyRequest.Unlock()
	return mock.ModifyVpcTenancyRequestFunc(in1)
}

// ModifyVpcTenancyRequestCalls gets all the calls that were made to ModifyVpcTenancyRequest.
// Check the length with:
//     len(mockedec2Client.ModifyVpcTenancyRequestCalls())
func (mock *ec2ClientMock) ModifyVpcTenancyRequestCalls() []struct {
	In1 *ec2.ModifyVpcTenancyInput
} {
	var calls []struct {
		In1 *ec2.ModifyVpcTenancyInput
	}
	lockec2ClientMockModifyVpcTenancyRequest.RLock()
	calls = mock.calls.ModifyVpcTenancyRequest
	lockec2ClientMockModifyVpcTenancyRequest.RUnlock()
	return calls
}

// ModifyVpcTenancyWithContext calls ModifyVpcTenancyWithContextFunc.
func (mock *ec2ClientMock) ModifyVpcTenancyWithContext(in1 context.Context, in2 *ec2.ModifyVpcTenancyInput, in3 ...request.Option) (*ec2.ModifyVpcTenancyOutput, error) {
	if mock.ModifyVpcTenancyWithContextFunc == nil {
		panic("ec2ClientMock.ModifyVpcTenancyWithContextFunc: method is nil but ec2Client.ModifyVpcTenancyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyVpcTenancyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyVpcTenancyWithContext.Lock()
	mock.calls.ModifyVpcTenancyWithContext = append(mock.calls.ModifyVpcTenancyWithContext, callInfo)
	lockec2ClientMockModifyVpcTenancyWithContext.Unlock()
	return mock.ModifyVpcTenancyWithContextFunc(in1, in2, in3...)
}

// ModifyVpcTenancyWithContextCalls gets all the calls that were made to ModifyVpcTenancyWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyVpcTenancyWithContextCalls())
func (mock *ec2ClientMock) ModifyVpcTenancyWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyVpcTenancyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyVpcTenancyInput
		In3 []request.Option
	}
	lockec2ClientMockModifyVpcTenancyWithContext.RLock()
	calls = mock.calls.ModifyVpcTenancyWithContext
	lockec2ClientMockModifyVpcTenancyWithContext.RUnlock()
	return calls
}

// ModifyVpnConnection calls ModifyVpnConnectionFunc.
func (mock *ec2ClientMock) ModifyVpnConnection(in1 *ec2.ModifyVpnConnectionInput) (*ec2.ModifyVpnConnectionOutput, error) {
	if mock.ModifyVpnConnectionFunc == nil {
		panic("ec2ClientMock.ModifyVpnConnectionFunc: method is nil but ec2Client.ModifyVpnConnection was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyVpnConnectionInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyVpnConnection.Lock()
	mock.calls.ModifyVpnConnection = append(mock.calls.ModifyVpnConnection, callInfo)
	lockec2ClientMockModifyVpnConnection.Unlock()
	return mock.ModifyVpnConnectionFunc(in1)
}

// ModifyVpnConnectionCalls gets all the calls that were made to ModifyVpnConnection.
// Check the length with:
//     len(mockedec2Client.ModifyVpnConnectionCalls())
func (mock *ec2ClientMock) ModifyVpnConnectionCalls() []struct {
	In1 *ec2.ModifyVpnConnectionInput
} {
	var calls []struct {
		In1 *ec2.ModifyVpnConnectionInput
	}
	lockec2ClientMockModifyVpnConnection.RLock()
	calls = mock.calls.ModifyVpnConnection
	lockec2ClientMockModifyVpnConnection.RUnlock()
	return calls
}

// ModifyVpnConnectionRequest calls ModifyVpnConnectionRequestFunc.
func (mock *ec2ClientMock) ModifyVpnConnectionRequest(in1 *ec2.ModifyVpnConnectionInput) (*request.Request, *ec2.ModifyVpnConnectionOutput) {
	if mock.ModifyVpnConnectionRequestFunc == nil {
		panic("ec2ClientMock.ModifyVpnConnectionRequestFunc: method is nil but ec2Client.ModifyVpnConnectionRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyVpnConnectionInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyVpnConnectionRequest.Lock()
	mock.calls.ModifyVpnConnectionRequest = append(mock.calls.ModifyVpnConnectionRequest, callInfo)
	lockec2ClientMockModifyVpnConnectionRequest.Unlock()
	return mock.ModifyVpnConnectionRequestFunc(in1)
}

// ModifyVpnConnectionRequestCalls gets all the calls that were made to ModifyVpnConnectionRequest.
// Check the length with:
//     len(mockedec2Client.ModifyVpnConnectionRequestCalls())
func (mock *ec2ClientMock) ModifyVpnConnectionRequestCalls() []struct {
	In1 *ec2.ModifyVpnConnectionInput
} {
	var calls []struct {
		In1 *ec2.ModifyVpnConnectionInput
	}
	lockec2ClientMockModifyVpnConnectionRequest.RLock()
	calls = mock.calls.ModifyVpnConnectionRequest
	lockec2ClientMockModifyVpnConnectionRequest.RUnlock()
	return calls
}

// ModifyVpnConnectionWithContext calls ModifyVpnConnectionWithContextFunc.
func (mock *ec2ClientMock) ModifyVpnConnectionWithContext(in1 context.Context, in2 *ec2.ModifyVpnConnectionInput, in3 ...request.Option) (*ec2.ModifyVpnConnectionOutput, error) {
	if mock.ModifyVpnConnectionWithContextFunc == nil {
		panic("ec2ClientMock.ModifyVpnConnectionWithContextFunc: method is nil but ec2Client.ModifyVpnConnectionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyVpnConnectionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyVpnConnectionWithContext.Lock()
	mock.calls.ModifyVpnConnectionWithContext = append(mock.calls.ModifyVpnConnectionWithContext, callInfo)
	lockec2ClientMockModifyVpnConnectionWithContext.Unlock()
	return mock.ModifyVpnConnectionWithContextFunc(in1, in2, in3...)
}

// ModifyVpnConnectionWithContextCalls gets all the calls that were made to ModifyVpnConnectionWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyVpnConnectionWithContextCalls())
func (mock *ec2ClientMock) ModifyVpnConnectionWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyVpnConnectionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyVpnConnectionInput
		In3 []request.Option
	}
	lockec2ClientMockModifyVpnConnectionWithContext.RLock()
	calls = mock.calls.ModifyVpnConnectionWithContext
	lockec2ClientMockModifyVpnConnectionWithContext.RUnlock()
	return calls
}

// ModifyVpnTunnelCertificate calls ModifyVpnTunnelCertificateFunc.
func (mock *ec2ClientMock) ModifyVpnTunnelCertificate(in1 *ec2.ModifyVpnTunnelCertificateInput) (*ec2.ModifyVpnTunnelCertificateOutput, error) {
	if mock.ModifyVpnTunnelCertificateFunc == nil {
		panic("ec2ClientMock.ModifyVpnTunnelCertificateFunc: method is nil but ec2Client.ModifyVpnTunnelCertificate was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyVpnTunnelCertificateInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyVpnTunnelCertificate.Lock()
	mock.calls.ModifyVpnTunnelCertificate = append(mock.calls.ModifyVpnTunnelCertificate, callInfo)
	lockec2ClientMockModifyVpnTunnelCertificate.Unlock()
	return mock.ModifyVpnTunnelCertificateFunc(in1)
}

// ModifyVpnTunnelCertificateCalls gets all the calls that were made to ModifyVpnTunnelCertificate.
// Check the length with:
//     len(mockedec2Client.ModifyVpnTunnelCertificateCalls())
func (mock *ec2ClientMock) ModifyVpnTunnelCertificateCalls() []struct {
	In1 *ec2.ModifyVpnTunnelCertificateInput
} {
	var calls []struct {
		In1 *ec2.ModifyVpnTunnelCertificateInput
	}
	lockec2ClientMockModifyVpnTunnelCertificate.RLock()
	calls = mock.calls.ModifyVpnTunnelCertificate
	lockec2ClientMockModifyVpnTunnelCertificate.RUnlock()
	return calls
}

// ModifyVpnTunnelCertificateRequest calls ModifyVpnTunnelCertificateRequestFunc.
func (mock *ec2ClientMock) ModifyVpnTunnelCertificateRequest(in1 *ec2.ModifyVpnTunnelCertificateInput) (*request.Request, *ec2.ModifyVpnTunnelCertificateOutput) {
	if mock.ModifyVpnTunnelCertificateRequestFunc == nil {
		panic("ec2ClientMock.ModifyVpnTunnelCertificateRequestFunc: method is nil but ec2Client.ModifyVpnTunnelCertificateRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyVpnTunnelCertificateInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyVpnTunnelCertificateRequest.Lock()
	mock.calls.ModifyVpnTunnelCertificateRequest = append(mock.calls.ModifyVpnTunnelCertificateRequest, callInfo)
	lockec2ClientMockModifyVpnTunnelCertificateRequest.Unlock()
	return mock.ModifyVpnTunnelCertificateRequestFunc(in1)
}

// ModifyVpnTunnelCertificateRequestCalls gets all the calls that were made to ModifyVpnTunnelCertificateRequest.
// Check the length with:
//     len(mockedec2Client.ModifyVpnTunnelCertificateRequestCalls())
func (mock *ec2ClientMock) ModifyVpnTunnelCertificateRequestCalls() []struct {
	In1 *ec2.ModifyVpnTunnelCertificateInput
} {
	var calls []struct {
		In1 *ec2.ModifyVpnTunnelCertificateInput
	}
	lockec2ClientMockModifyVpnTunnelCertificateRequest.RLock()
	calls = mock.calls.ModifyVpnTunnelCertificateRequest
	lockec2ClientMockModifyVpnTunnelCertificateRequest.RUnlock()
	return calls
}

// ModifyVpnTunnelCertificateWithContext calls ModifyVpnTunnelCertificateWithContextFunc.
func (mock *ec2ClientMock) ModifyVpnTunnelCertificateWithContext(in1 context.Context, in2 *ec2.ModifyVpnTunnelCertificateInput, in3 ...request.Option) (*ec2.ModifyVpnTunnelCertificateOutput, error) {
	if mock.ModifyVpnTunnelCertificateWithContextFunc == nil {
		panic("ec2ClientMock.ModifyVpnTunnelCertificateWithContextFunc: method is nil but ec2Client.ModifyVpnTunnelCertificateWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyVpnTunnelCertificateInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyVpnTunnelCertificateWithContext.Lock()
	mock.calls.ModifyVpnTunnelCertificateWithContext = append(mock.calls.ModifyVpnTunnelCertificateWithContext, callInfo)
	lockec2ClientMockModifyVpnTunnelCertificateWithContext.Unlock()
	return mock.ModifyVpnTunnelCertificateWithContextFunc(in1, in2, in3...)
}

// ModifyVpnTunnelCertificateWithContextCalls gets all the calls that were made to ModifyVpnTunnelCertificateWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyVpnTunnelCertificateWithContextCalls())
func (mock *ec2ClientMock) ModifyVpnTunnelCertificateWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyVpnTunnelCertificateInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyVpnTunnelCertificateInput
		In3 []request.Option
	}
	lockec2ClientMockModifyVpnTunnelCertificateWithContext.RLock()
	calls = mock.calls.ModifyVpnTunnelCertificateWithContext
	lockec2ClientMockModifyVpnTunnelCertificateWithContext.RUnlock()
	return calls
}

// ModifyVpnTunnelOptions calls ModifyVpnTunnelOptionsFunc.
func (mock *ec2ClientMock) ModifyVpnTunnelOptions(in1 *ec2.ModifyVpnTunnelOptionsInput) (*ec2.ModifyVpnTunnelOptionsOutput, error) {
	if mock.ModifyVpnTunnelOptionsFunc == nil {
		panic("ec2ClientMock.ModifyVpnTunnelOptionsFunc: method is nil but ec2Client.ModifyVpnTunnelOptions was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyVpnTunnelOptionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyVpnTunnelOptions.Lock()
	mock.calls.ModifyVpnTunnelOptions = append(mock.calls.ModifyVpnTunnelOptions, callInfo)
	lockec2ClientMockModifyVpnTunnelOptions.Unlock()
	return mock.ModifyVpnTunnelOptionsFunc(in1)
}

// ModifyVpnTunnelOptionsCalls gets all the calls that were made to ModifyVpnTunnelOptions.
// Check the length with:
//     len(mockedec2Client.ModifyVpnTunnelOptionsCalls())
func (mock *ec2ClientMock) ModifyVpnTunnelOptionsCalls() []struct {
	In1 *ec2.ModifyVpnTunnelOptionsInput
} {
	var calls []struct {
		In1 *ec2.ModifyVpnTunnelOptionsInput
	}
	lockec2ClientMockModifyVpnTunnelOptions.RLock()
	calls = mock.calls.ModifyVpnTunnelOptions
	lockec2ClientMockModifyVpnTunnelOptions.RUnlock()
	return calls
}

// ModifyVpnTunnelOptionsRequest calls ModifyVpnTunnelOptionsRequestFunc.
func (mock *ec2ClientMock) ModifyVpnTunnelOptionsRequest(in1 *ec2.ModifyVpnTunnelOptionsInput) (*request.Request, *ec2.ModifyVpnTunnelOptionsOutput) {
	if mock.ModifyVpnTunnelOptionsRequestFunc == nil {
		panic("ec2ClientMock.ModifyVpnTunnelOptionsRequestFunc: method is nil but ec2Client.ModifyVpnTunnelOptionsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ModifyVpnTunnelOptionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockModifyVpnTunnelOptionsRequest.Lock()
	mock.calls.ModifyVpnTunnelOptionsRequest = append(mock.calls.ModifyVpnTunnelOptionsRequest, callInfo)
	lockec2ClientMockModifyVpnTunnelOptionsRequest.Unlock()
	return mock.ModifyVpnTunnelOptionsRequestFunc(in1)
}

// ModifyVpnTunnelOptionsRequestCalls gets all the calls that were made to ModifyVpnTunnelOptionsRequest.
// Check the length with:
//     len(mockedec2Client.ModifyVpnTunnelOptionsRequestCalls())
func (mock *ec2ClientMock) ModifyVpnTunnelOptionsRequestCalls() []struct {
	In1 *ec2.ModifyVpnTunnelOptionsInput
} {
	var calls []struct {
		In1 *ec2.ModifyVpnTunnelOptionsInput
	}
	lockec2ClientMockModifyVpnTunnelOptionsRequest.RLock()
	calls = mock.calls.ModifyVpnTunnelOptionsRequest
	lockec2ClientMockModifyVpnTunnelOptionsRequest.RUnlock()
	return calls
}

// ModifyVpnTunnelOptionsWithContext calls ModifyVpnTunnelOptionsWithContextFunc.
func (mock *ec2ClientMock) ModifyVpnTunnelOptionsWithContext(in1 context.Context, in2 *ec2.ModifyVpnTunnelOptionsInput, in3 ...request.Option) (*ec2.ModifyVpnTunnelOptionsOutput, error) {
	if mock.ModifyVpnTunnelOptionsWithContextFunc == nil {
		panic("ec2ClientMock.ModifyVpnTunnelOptionsWithContextFunc: method is nil but ec2Client.ModifyVpnTunnelOptionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ModifyVpnTunnelOptionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockModifyVpnTunnelOptionsWithContext.Lock()
	mock.calls.ModifyVpnTunnelOptionsWithContext = append(mock.calls.ModifyVpnTunnelOptionsWithContext, callInfo)
	lockec2ClientMockModifyVpnTunnelOptionsWithContext.Unlock()
	return mock.ModifyVpnTunnelOptionsWithContextFunc(in1, in2, in3...)
}

// ModifyVpnTunnelOptionsWithContextCalls gets all the calls that were made to ModifyVpnTunnelOptionsWithContext.
// Check the length with:
//     len(mockedec2Client.ModifyVpnTunnelOptionsWithContextCalls())
func (mock *ec2ClientMock) ModifyVpnTunnelOptionsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ModifyVpnTunnelOptionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ModifyVpnTunnelOptionsInput
		In3 []request.Option
	}
	lockec2ClientMockModifyVpnTunnelOptionsWithContext.RLock()
	calls = mock.calls.ModifyVpnTunnelOptionsWithContext
	lockec2ClientMockModifyVpnTunnelOptionsWithContext.RUnlock()
	return calls
}

// MonitorInstances calls MonitorInstancesFunc.
func (mock *ec2ClientMock) MonitorInstances(in1 *ec2.MonitorInstancesInput) (*ec2.MonitorInstancesOutput, error) {
	if mock.MonitorInstancesFunc == nil {
		panic("ec2ClientMock.MonitorInstancesFunc: method is nil but ec2Client.MonitorInstances was just called")
	}
	callInfo := struct {
		In1 *ec2.MonitorInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockMonitorInstances.Lock()
	mock.calls.MonitorInstances = append(mock.calls.MonitorInstances, callInfo)
	lockec2ClientMockMonitorInstances.Unlock()
	return mock.MonitorInstancesFunc(in1)
}

// MonitorInstancesCalls gets all the calls that were made to MonitorInstances.
// Check the length with:
//     len(mockedec2Client.MonitorInstancesCalls())
func (mock *ec2ClientMock) MonitorInstancesCalls() []struct {
	In1 *ec2.MonitorInstancesInput
} {
	var calls []struct {
		In1 *ec2.MonitorInstancesInput
	}
	lockec2ClientMockMonitorInstances.RLock()
	calls = mock.calls.MonitorInstances
	lockec2ClientMockMonitorInstances.RUnlock()
	return calls
}

// MonitorInstancesRequest calls MonitorInstancesRequestFunc.
func (mock *ec2ClientMock) MonitorInstancesRequest(in1 *ec2.MonitorInstancesInput) (*request.Request, *ec2.MonitorInstancesOutput) {
	if mock.MonitorInstancesRequestFunc == nil {
		panic("ec2ClientMock.MonitorInstancesRequestFunc: method is nil but ec2Client.MonitorInstancesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.MonitorInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockMonitorInstancesRequest.Lock()
	mock.calls.MonitorInstancesRequest = append(mock.calls.MonitorInstancesRequest, callInfo)
	lockec2ClientMockMonitorInstancesRequest.Unlock()
	return mock.MonitorInstancesRequestFunc(in1)
}

// MonitorInstancesRequestCalls gets all the calls that were made to MonitorInstancesRequest.
// Check the length with:
//     len(mockedec2Client.MonitorInstancesRequestCalls())
func (mock *ec2ClientMock) MonitorInstancesRequestCalls() []struct {
	In1 *ec2.MonitorInstancesInput
} {
	var calls []struct {
		In1 *ec2.MonitorInstancesInput
	}
	lockec2ClientMockMonitorInstancesRequest.RLock()
	calls = mock.calls.MonitorInstancesRequest
	lockec2ClientMockMonitorInstancesRequest.RUnlock()
	return calls
}

// MonitorInstancesWithContext calls MonitorInstancesWithContextFunc.
func (mock *ec2ClientMock) MonitorInstancesWithContext(in1 context.Context, in2 *ec2.MonitorInstancesInput, in3 ...request.Option) (*ec2.MonitorInstancesOutput, error) {
	if mock.MonitorInstancesWithContextFunc == nil {
		panic("ec2ClientMock.MonitorInstancesWithContextFunc: method is nil but ec2Client.MonitorInstancesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.MonitorInstancesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockMonitorInstancesWithContext.Lock()
	mock.calls.MonitorInstancesWithContext = append(mock.calls.MonitorInstancesWithContext, callInfo)
	lockec2ClientMockMonitorInstancesWithContext.Unlock()
	return mock.MonitorInstancesWithContextFunc(in1, in2, in3...)
}

// MonitorInstancesWithContextCalls gets all the calls that were made to MonitorInstancesWithContext.
// Check the length with:
//     len(mockedec2Client.MonitorInstancesWithContextCalls())
func (mock *ec2ClientMock) MonitorInstancesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.MonitorInstancesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.MonitorInstancesInput
		In3 []request.Option
	}
	lockec2ClientMockMonitorInstancesWithContext.RLock()
	calls = mock.calls.MonitorInstancesWithContext
	lockec2ClientMockMonitorInstancesWithContext.RUnlock()
	return calls
}

// MoveAddressToVpc calls MoveAddressToVpcFunc.
func (mock *ec2ClientMock) MoveAddressToVpc(in1 *ec2.MoveAddressToVpcInput) (*ec2.MoveAddressToVpcOutput, error) {
	if mock.MoveAddressToVpcFunc == nil {
		panic("ec2ClientMock.MoveAddressToVpcFunc: method is nil but ec2Client.MoveAddressToVpc was just called")
	}
	callInfo := struct {
		In1 *ec2.MoveAddressToVpcInput
	}{
		In1: in1,
	}
	lockec2ClientMockMoveAddressToVpc.Lock()
	mock.calls.MoveAddressToVpc = append(mock.calls.MoveAddressToVpc, callInfo)
	lockec2ClientMockMoveAddressToVpc.Unlock()
	return mock.MoveAddressToVpcFunc(in1)
}

// MoveAddressToVpcCalls gets all the calls that were made to MoveAddressToVpc.
// Check the length with:
//     len(mockedec2Client.MoveAddressToVpcCalls())
func (mock *ec2ClientMock) MoveAddressToVpcCalls() []struct {
	In1 *ec2.MoveAddressToVpcInput
} {
	var calls []struct {
		In1 *ec2.MoveAddressToVpcInput
	}
	lockec2ClientMockMoveAddressToVpc.RLock()
	calls = mock.calls.MoveAddressToVpc
	lockec2ClientMockMoveAddressToVpc.RUnlock()
	return calls
}

// MoveAddressToVpcRequest calls MoveAddressToVpcRequestFunc.
func (mock *ec2ClientMock) MoveAddressToVpcRequest(in1 *ec2.MoveAddressToVpcInput) (*request.Request, *ec2.MoveAddressToVpcOutput) {
	if mock.MoveAddressToVpcRequestFunc == nil {
		panic("ec2ClientMock.MoveAddressToVpcRequestFunc: method is nil but ec2Client.MoveAddressToVpcRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.MoveAddressToVpcInput
	}{
		In1: in1,
	}
	lockec2ClientMockMoveAddressToVpcRequest.Lock()
	mock.calls.MoveAddressToVpcRequest = append(mock.calls.MoveAddressToVpcRequest, callInfo)
	lockec2ClientMockMoveAddressToVpcRequest.Unlock()
	return mock.MoveAddressToVpcRequestFunc(in1)
}

// MoveAddressToVpcRequestCalls gets all the calls that were made to MoveAddressToVpcRequest.
// Check the length with:
//     len(mockedec2Client.MoveAddressToVpcRequestCalls())
func (mock *ec2ClientMock) MoveAddressToVpcRequestCalls() []struct {
	In1 *ec2.MoveAddressToVpcInput
} {
	var calls []struct {
		In1 *ec2.MoveAddressToVpcInput
	}
	lockec2ClientMockMoveAddressToVpcRequest.RLock()
	calls = mock.calls.MoveAddressToVpcRequest
	lockec2ClientMockMoveAddressToVpcRequest.RUnlock()
	return calls
}

// MoveAddressToVpcWithContext calls MoveAddressToVpcWithContextFunc.
func (mock *ec2ClientMock) MoveAddressToVpcWithContext(in1 context.Context, in2 *ec2.MoveAddressToVpcInput, in3 ...request.Option) (*ec2.MoveAddressToVpcOutput, error) {
	if mock.MoveAddressToVpcWithContextFunc == nil {
		panic("ec2ClientMock.MoveAddressToVpcWithContextFunc: method is nil but ec2Client.MoveAddressToVpcWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.MoveAddressToVpcInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockMoveAddressToVpcWithContext.Lock()
	mock.calls.MoveAddressToVpcWithContext = append(mock.calls.MoveAddressToVpcWithContext, callInfo)
	lockec2ClientMockMoveAddressToVpcWithContext.Unlock()
	return mock.MoveAddressToVpcWithContextFunc(in1, in2, in3...)
}

// MoveAddressToVpcWithContextCalls gets all the calls that were made to MoveAddressToVpcWithContext.
// Check the length with:
//     len(mockedec2Client.MoveAddressToVpcWithContextCalls())
func (mock *ec2ClientMock) MoveAddressToVpcWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.MoveAddressToVpcInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.MoveAddressToVpcInput
		In3 []request.Option
	}
	lockec2ClientMockMoveAddressToVpcWithContext.RLock()
	calls = mock.calls.MoveAddressToVpcWithContext
	lockec2ClientMockMoveAddressToVpcWithContext.RUnlock()
	return calls
}

// ProvisionByoipCidr calls ProvisionByoipCidrFunc.
func (mock *ec2ClientMock) ProvisionByoipCidr(in1 *ec2.ProvisionByoipCidrInput) (*ec2.ProvisionByoipCidrOutput, error) {
	if mock.ProvisionByoipCidrFunc == nil {
		panic("ec2ClientMock.ProvisionByoipCidrFunc: method is nil but ec2Client.ProvisionByoipCidr was just called")
	}
	callInfo := struct {
		In1 *ec2.ProvisionByoipCidrInput
	}{
		In1: in1,
	}
	lockec2ClientMockProvisionByoipCidr.Lock()
	mock.calls.ProvisionByoipCidr = append(mock.calls.ProvisionByoipCidr, callInfo)
	lockec2ClientMockProvisionByoipCidr.Unlock()
	return mock.ProvisionByoipCidrFunc(in1)
}

// ProvisionByoipCidrCalls gets all the calls that were made to ProvisionByoipCidr.
// Check the length with:
//     len(mockedec2Client.ProvisionByoipCidrCalls())
func (mock *ec2ClientMock) ProvisionByoipCidrCalls() []struct {
	In1 *ec2.ProvisionByoipCidrInput
} {
	var calls []struct {
		In1 *ec2.ProvisionByoipCidrInput
	}
	lockec2ClientMockProvisionByoipCidr.RLock()
	calls = mock.calls.ProvisionByoipCidr
	lockec2ClientMockProvisionByoipCidr.RUnlock()
	return calls
}

// ProvisionByoipCidrRequest calls ProvisionByoipCidrRequestFunc.
func (mock *ec2ClientMock) ProvisionByoipCidrRequest(in1 *ec2.ProvisionByoipCidrInput) (*request.Request, *ec2.ProvisionByoipCidrOutput) {
	if mock.ProvisionByoipCidrRequestFunc == nil {
		panic("ec2ClientMock.ProvisionByoipCidrRequestFunc: method is nil but ec2Client.ProvisionByoipCidrRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ProvisionByoipCidrInput
	}{
		In1: in1,
	}
	lockec2ClientMockProvisionByoipCidrRequest.Lock()
	mock.calls.ProvisionByoipCidrRequest = append(mock.calls.ProvisionByoipCidrRequest, callInfo)
	lockec2ClientMockProvisionByoipCidrRequest.Unlock()
	return mock.ProvisionByoipCidrRequestFunc(in1)
}

// ProvisionByoipCidrRequestCalls gets all the calls that were made to ProvisionByoipCidrRequest.
// Check the length with:
//     len(mockedec2Client.ProvisionByoipCidrRequestCalls())
func (mock *ec2ClientMock) ProvisionByoipCidrRequestCalls() []struct {
	In1 *ec2.ProvisionByoipCidrInput
} {
	var calls []struct {
		In1 *ec2.ProvisionByoipCidrInput
	}
	lockec2ClientMockProvisionByoipCidrRequest.RLock()
	calls = mock.calls.ProvisionByoipCidrRequest
	lockec2ClientMockProvisionByoipCidrRequest.RUnlock()
	return calls
}

// ProvisionByoipCidrWithContext calls ProvisionByoipCidrWithContextFunc.
func (mock *ec2ClientMock) ProvisionByoipCidrWithContext(in1 context.Context, in2 *ec2.ProvisionByoipCidrInput, in3 ...request.Option) (*ec2.ProvisionByoipCidrOutput, error) {
	if mock.ProvisionByoipCidrWithContextFunc == nil {
		panic("ec2ClientMock.ProvisionByoipCidrWithContextFunc: method is nil but ec2Client.ProvisionByoipCidrWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ProvisionByoipCidrInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockProvisionByoipCidrWithContext.Lock()
	mock.calls.ProvisionByoipCidrWithContext = append(mock.calls.ProvisionByoipCidrWithContext, callInfo)
	lockec2ClientMockProvisionByoipCidrWithContext.Unlock()
	return mock.ProvisionByoipCidrWithContextFunc(in1, in2, in3...)
}

// ProvisionByoipCidrWithContextCalls gets all the calls that were made to ProvisionByoipCidrWithContext.
// Check the length with:
//     len(mockedec2Client.ProvisionByoipCidrWithContextCalls())
func (mock *ec2ClientMock) ProvisionByoipCidrWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ProvisionByoipCidrInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ProvisionByoipCidrInput
		In3 []request.Option
	}
	lockec2ClientMockProvisionByoipCidrWithContext.RLock()
	calls = mock.calls.ProvisionByoipCidrWithContext
	lockec2ClientMockProvisionByoipCidrWithContext.RUnlock()
	return calls
}

// PurchaseHostReservation calls PurchaseHostReservationFunc.
func (mock *ec2ClientMock) PurchaseHostReservation(in1 *ec2.PurchaseHostReservationInput) (*ec2.PurchaseHostReservationOutput, error) {
	if mock.PurchaseHostReservationFunc == nil {
		panic("ec2ClientMock.PurchaseHostReservationFunc: method is nil but ec2Client.PurchaseHostReservation was just called")
	}
	callInfo := struct {
		In1 *ec2.PurchaseHostReservationInput
	}{
		In1: in1,
	}
	lockec2ClientMockPurchaseHostReservation.Lock()
	mock.calls.PurchaseHostReservation = append(mock.calls.PurchaseHostReservation, callInfo)
	lockec2ClientMockPurchaseHostReservation.Unlock()
	return mock.PurchaseHostReservationFunc(in1)
}

// PurchaseHostReservationCalls gets all the calls that were made to PurchaseHostReservation.
// Check the length with:
//     len(mockedec2Client.PurchaseHostReservationCalls())
func (mock *ec2ClientMock) PurchaseHostReservationCalls() []struct {
	In1 *ec2.PurchaseHostReservationInput
} {
	var calls []struct {
		In1 *ec2.PurchaseHostReservationInput
	}
	lockec2ClientMockPurchaseHostReservation.RLock()
	calls = mock.calls.PurchaseHostReservation
	lockec2ClientMockPurchaseHostReservation.RUnlock()
	return calls
}

// PurchaseHostReservationRequest calls PurchaseHostReservationRequestFunc.
func (mock *ec2ClientMock) PurchaseHostReservationRequest(in1 *ec2.PurchaseHostReservationInput) (*request.Request, *ec2.PurchaseHostReservationOutput) {
	if mock.PurchaseHostReservationRequestFunc == nil {
		panic("ec2ClientMock.PurchaseHostReservationRequestFunc: method is nil but ec2Client.PurchaseHostReservationRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.PurchaseHostReservationInput
	}{
		In1: in1,
	}
	lockec2ClientMockPurchaseHostReservationRequest.Lock()
	mock.calls.PurchaseHostReservationRequest = append(mock.calls.PurchaseHostReservationRequest, callInfo)
	lockec2ClientMockPurchaseHostReservationRequest.Unlock()
	return mock.PurchaseHostReservationRequestFunc(in1)
}

// PurchaseHostReservationRequestCalls gets all the calls that were made to PurchaseHostReservationRequest.
// Check the length with:
//     len(mockedec2Client.PurchaseHostReservationRequestCalls())
func (mock *ec2ClientMock) PurchaseHostReservationRequestCalls() []struct {
	In1 *ec2.PurchaseHostReservationInput
} {
	var calls []struct {
		In1 *ec2.PurchaseHostReservationInput
	}
	lockec2ClientMockPurchaseHostReservationRequest.RLock()
	calls = mock.calls.PurchaseHostReservationRequest
	lockec2ClientMockPurchaseHostReservationRequest.RUnlock()
	return calls
}

// PurchaseHostReservationWithContext calls PurchaseHostReservationWithContextFunc.
func (mock *ec2ClientMock) PurchaseHostReservationWithContext(in1 context.Context, in2 *ec2.PurchaseHostReservationInput, in3 ...request.Option) (*ec2.PurchaseHostReservationOutput, error) {
	if mock.PurchaseHostReservationWithContextFunc == nil {
		panic("ec2ClientMock.PurchaseHostReservationWithContextFunc: method is nil but ec2Client.PurchaseHostReservationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.PurchaseHostReservationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockPurchaseHostReservationWithContext.Lock()
	mock.calls.PurchaseHostReservationWithContext = append(mock.calls.PurchaseHostReservationWithContext, callInfo)
	lockec2ClientMockPurchaseHostReservationWithContext.Unlock()
	return mock.PurchaseHostReservationWithContextFunc(in1, in2, in3...)
}

// PurchaseHostReservationWithContextCalls gets all the calls that were made to PurchaseHostReservationWithContext.
// Check the length with:
//     len(mockedec2Client.PurchaseHostReservationWithContextCalls())
func (mock *ec2ClientMock) PurchaseHostReservationWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.PurchaseHostReservationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.PurchaseHostReservationInput
		In3 []request.Option
	}
	lockec2ClientMockPurchaseHostReservationWithContext.RLock()
	calls = mock.calls.PurchaseHostReservationWithContext
	lockec2ClientMockPurchaseHostReservationWithContext.RUnlock()
	return calls
}

// PurchaseReservedInstancesOffering calls PurchaseReservedInstancesOfferingFunc.
func (mock *ec2ClientMock) PurchaseReservedInstancesOffering(in1 *ec2.PurchaseReservedInstancesOfferingInput) (*ec2.PurchaseReservedInstancesOfferingOutput, error) {
	if mock.PurchaseReservedInstancesOfferingFunc == nil {
		panic("ec2ClientMock.PurchaseReservedInstancesOfferingFunc: method is nil but ec2Client.PurchaseReservedInstancesOffering was just called")
	}
	callInfo := struct {
		In1 *ec2.PurchaseReservedInstancesOfferingInput
	}{
		In1: in1,
	}
	lockec2ClientMockPurchaseReservedInstancesOffering.Lock()
	mock.calls.PurchaseReservedInstancesOffering = append(mock.calls.PurchaseReservedInstancesOffering, callInfo)
	lockec2ClientMockPurchaseReservedInstancesOffering.Unlock()
	return mock.PurchaseReservedInstancesOfferingFunc(in1)
}

// PurchaseReservedInstancesOfferingCalls gets all the calls that were made to PurchaseReservedInstancesOffering.
// Check the length with:
//     len(mockedec2Client.PurchaseReservedInstancesOfferingCalls())
func (mock *ec2ClientMock) PurchaseReservedInstancesOfferingCalls() []struct {
	In1 *ec2.PurchaseReservedInstancesOfferingInput
} {
	var calls []struct {
		In1 *ec2.PurchaseReservedInstancesOfferingInput
	}
	lockec2ClientMockPurchaseReservedInstancesOffering.RLock()
	calls = mock.calls.PurchaseReservedInstancesOffering
	lockec2ClientMockPurchaseReservedInstancesOffering.RUnlock()
	return calls
}

// PurchaseReservedInstancesOfferingRequest calls PurchaseReservedInstancesOfferingRequestFunc.
func (mock *ec2ClientMock) PurchaseReservedInstancesOfferingRequest(in1 *ec2.PurchaseReservedInstancesOfferingInput) (*request.Request, *ec2.PurchaseReservedInstancesOfferingOutput) {
	if mock.PurchaseReservedInstancesOfferingRequestFunc == nil {
		panic("ec2ClientMock.PurchaseReservedInstancesOfferingRequestFunc: method is nil but ec2Client.PurchaseReservedInstancesOfferingRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.PurchaseReservedInstancesOfferingInput
	}{
		In1: in1,
	}
	lockec2ClientMockPurchaseReservedInstancesOfferingRequest.Lock()
	mock.calls.PurchaseReservedInstancesOfferingRequest = append(mock.calls.PurchaseReservedInstancesOfferingRequest, callInfo)
	lockec2ClientMockPurchaseReservedInstancesOfferingRequest.Unlock()
	return mock.PurchaseReservedInstancesOfferingRequestFunc(in1)
}

// PurchaseReservedInstancesOfferingRequestCalls gets all the calls that were made to PurchaseReservedInstancesOfferingRequest.
// Check the length with:
//     len(mockedec2Client.PurchaseReservedInstancesOfferingRequestCalls())
func (mock *ec2ClientMock) PurchaseReservedInstancesOfferingRequestCalls() []struct {
	In1 *ec2.PurchaseReservedInstancesOfferingInput
} {
	var calls []struct {
		In1 *ec2.PurchaseReservedInstancesOfferingInput
	}
	lockec2ClientMockPurchaseReservedInstancesOfferingRequest.RLock()
	calls = mock.calls.PurchaseReservedInstancesOfferingRequest
	lockec2ClientMockPurchaseReservedInstancesOfferingRequest.RUnlock()
	return calls
}

// PurchaseReservedInstancesOfferingWithContext calls PurchaseReservedInstancesOfferingWithContextFunc.
func (mock *ec2ClientMock) PurchaseReservedInstancesOfferingWithContext(in1 context.Context, in2 *ec2.PurchaseReservedInstancesOfferingInput, in3 ...request.Option) (*ec2.PurchaseReservedInstancesOfferingOutput, error) {
	if mock.PurchaseReservedInstancesOfferingWithContextFunc == nil {
		panic("ec2ClientMock.PurchaseReservedInstancesOfferingWithContextFunc: method is nil but ec2Client.PurchaseReservedInstancesOfferingWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.PurchaseReservedInstancesOfferingInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockPurchaseReservedInstancesOfferingWithContext.Lock()
	mock.calls.PurchaseReservedInstancesOfferingWithContext = append(mock.calls.PurchaseReservedInstancesOfferingWithContext, callInfo)
	lockec2ClientMockPurchaseReservedInstancesOfferingWithContext.Unlock()
	return mock.PurchaseReservedInstancesOfferingWithContextFunc(in1, in2, in3...)
}

// PurchaseReservedInstancesOfferingWithContextCalls gets all the calls that were made to PurchaseReservedInstancesOfferingWithContext.
// Check the length with:
//     len(mockedec2Client.PurchaseReservedInstancesOfferingWithContextCalls())
func (mock *ec2ClientMock) PurchaseReservedInstancesOfferingWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.PurchaseReservedInstancesOfferingInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.PurchaseReservedInstancesOfferingInput
		In3 []request.Option
	}
	lockec2ClientMockPurchaseReservedInstancesOfferingWithContext.RLock()
	calls = mock.calls.PurchaseReservedInstancesOfferingWithContext
	lockec2ClientMockPurchaseReservedInstancesOfferingWithContext.RUnlock()
	return calls
}

// PurchaseScheduledInstances calls PurchaseScheduledInstancesFunc.
func (mock *ec2ClientMock) PurchaseScheduledInstances(in1 *ec2.PurchaseScheduledInstancesInput) (*ec2.PurchaseScheduledInstancesOutput, error) {
	if mock.PurchaseScheduledInstancesFunc == nil {
		panic("ec2ClientMock.PurchaseScheduledInstancesFunc: method is nil but ec2Client.PurchaseScheduledInstances was just called")
	}
	callInfo := struct {
		In1 *ec2.PurchaseScheduledInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockPurchaseScheduledInstances.Lock()
	mock.calls.PurchaseScheduledInstances = append(mock.calls.PurchaseScheduledInstances, callInfo)
	lockec2ClientMockPurchaseScheduledInstances.Unlock()
	return mock.PurchaseScheduledInstancesFunc(in1)
}

// PurchaseScheduledInstancesCalls gets all the calls that were made to PurchaseScheduledInstances.
// Check the length with:
//     len(mockedec2Client.PurchaseScheduledInstancesCalls())
func (mock *ec2ClientMock) PurchaseScheduledInstancesCalls() []struct {
	In1 *ec2.PurchaseScheduledInstancesInput
} {
	var calls []struct {
		In1 *ec2.PurchaseScheduledInstancesInput
	}
	lockec2ClientMockPurchaseScheduledInstances.RLock()
	calls = mock.calls.PurchaseScheduledInstances
	lockec2ClientMockPurchaseScheduledInstances.RUnlock()
	return calls
}

// PurchaseScheduledInstancesRequest calls PurchaseScheduledInstancesRequestFunc.
func (mock *ec2ClientMock) PurchaseScheduledInstancesRequest(in1 *ec2.PurchaseScheduledInstancesInput) (*request.Request, *ec2.PurchaseScheduledInstancesOutput) {
	if mock.PurchaseScheduledInstancesRequestFunc == nil {
		panic("ec2ClientMock.PurchaseScheduledInstancesRequestFunc: method is nil but ec2Client.PurchaseScheduledInstancesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.PurchaseScheduledInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockPurchaseScheduledInstancesRequest.Lock()
	mock.calls.PurchaseScheduledInstancesRequest = append(mock.calls.PurchaseScheduledInstancesRequest, callInfo)
	lockec2ClientMockPurchaseScheduledInstancesRequest.Unlock()
	return mock.PurchaseScheduledInstancesRequestFunc(in1)
}

// PurchaseScheduledInstancesRequestCalls gets all the calls that were made to PurchaseScheduledInstancesRequest.
// Check the length with:
//     len(mockedec2Client.PurchaseScheduledInstancesRequestCalls())
func (mock *ec2ClientMock) PurchaseScheduledInstancesRequestCalls() []struct {
	In1 *ec2.PurchaseScheduledInstancesInput
} {
	var calls []struct {
		In1 *ec2.PurchaseScheduledInstancesInput
	}
	lockec2ClientMockPurchaseScheduledInstancesRequest.RLock()
	calls = mock.calls.PurchaseScheduledInstancesRequest
	lockec2ClientMockPurchaseScheduledInstancesRequest.RUnlock()
	return calls
}

// PurchaseScheduledInstancesWithContext calls PurchaseScheduledInstancesWithContextFunc.
func (mock *ec2ClientMock) PurchaseScheduledInstancesWithContext(in1 context.Context, in2 *ec2.PurchaseScheduledInstancesInput, in3 ...request.Option) (*ec2.PurchaseScheduledInstancesOutput, error) {
	if mock.PurchaseScheduledInstancesWithContextFunc == nil {
		panic("ec2ClientMock.PurchaseScheduledInstancesWithContextFunc: method is nil but ec2Client.PurchaseScheduledInstancesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.PurchaseScheduledInstancesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockPurchaseScheduledInstancesWithContext.Lock()
	mock.calls.PurchaseScheduledInstancesWithContext = append(mock.calls.PurchaseScheduledInstancesWithContext, callInfo)
	lockec2ClientMockPurchaseScheduledInstancesWithContext.Unlock()
	return mock.PurchaseScheduledInstancesWithContextFunc(in1, in2, in3...)
}

// PurchaseScheduledInstancesWithContextCalls gets all the calls that were made to PurchaseScheduledInstancesWithContext.
// Check the length with:
//     len(mockedec2Client.PurchaseScheduledInstancesWithContextCalls())
func (mock *ec2ClientMock) PurchaseScheduledInstancesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.PurchaseScheduledInstancesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.PurchaseScheduledInstancesInput
		In3 []request.Option
	}
	lockec2ClientMockPurchaseScheduledInstancesWithContext.RLock()
	calls = mock.calls.PurchaseScheduledInstancesWithContext
	lockec2ClientMockPurchaseScheduledInstancesWithContext.RUnlock()
	return calls
}

// RebootInstances calls RebootInstancesFunc.
func (mock *ec2ClientMock) RebootInstances(in1 *ec2.RebootInstancesInput) (*ec2.RebootInstancesOutput, error) {
	if mock.RebootInstancesFunc == nil {
		panic("ec2ClientMock.RebootInstancesFunc: method is nil but ec2Client.RebootInstances was just called")
	}
	callInfo := struct {
		In1 *ec2.RebootInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockRebootInstances.Lock()
	mock.calls.RebootInstances = append(mock.calls.RebootInstances, callInfo)
	lockec2ClientMockRebootInstances.Unlock()
	return mock.RebootInstancesFunc(in1)
}

// RebootInstancesCalls gets all the calls that were made to RebootInstances.
// Check the length with:
//     len(mockedec2Client.RebootInstancesCalls())
func (mock *ec2ClientMock) RebootInstancesCalls() []struct {
	In1 *ec2.RebootInstancesInput
} {
	var calls []struct {
		In1 *ec2.RebootInstancesInput
	}
	lockec2ClientMockRebootInstances.RLock()
	calls = mock.calls.RebootInstances
	lockec2ClientMockRebootInstances.RUnlock()
	return calls
}

// RebootInstancesRequest calls RebootInstancesRequestFunc.
func (mock *ec2ClientMock) RebootInstancesRequest(in1 *ec2.RebootInstancesInput) (*request.Request, *ec2.RebootInstancesOutput) {
	if mock.RebootInstancesRequestFunc == nil {
		panic("ec2ClientMock.RebootInstancesRequestFunc: method is nil but ec2Client.RebootInstancesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.RebootInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockRebootInstancesRequest.Lock()
	mock.calls.RebootInstancesRequest = append(mock.calls.RebootInstancesRequest, callInfo)
	lockec2ClientMockRebootInstancesRequest.Unlock()
	return mock.RebootInstancesRequestFunc(in1)
}

// RebootInstancesRequestCalls gets all the calls that were made to RebootInstancesRequest.
// Check the length with:
//     len(mockedec2Client.RebootInstancesRequestCalls())
func (mock *ec2ClientMock) RebootInstancesRequestCalls() []struct {
	In1 *ec2.RebootInstancesInput
} {
	var calls []struct {
		In1 *ec2.RebootInstancesInput
	}
	lockec2ClientMockRebootInstancesRequest.RLock()
	calls = mock.calls.RebootInstancesRequest
	lockec2ClientMockRebootInstancesRequest.RUnlock()
	return calls
}

// RebootInstancesWithContext calls RebootInstancesWithContextFunc.
func (mock *ec2ClientMock) RebootInstancesWithContext(in1 context.Context, in2 *ec2.RebootInstancesInput, in3 ...request.Option) (*ec2.RebootInstancesOutput, error) {
	if mock.RebootInstancesWithContextFunc == nil {
		panic("ec2ClientMock.RebootInstancesWithContextFunc: method is nil but ec2Client.RebootInstancesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.RebootInstancesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockRebootInstancesWithContext.Lock()
	mock.calls.RebootInstancesWithContext = append(mock.calls.RebootInstancesWithContext, callInfo)
	lockec2ClientMockRebootInstancesWithContext.Unlock()
	return mock.RebootInstancesWithContextFunc(in1, in2, in3...)
}

// RebootInstancesWithContextCalls gets all the calls that were made to RebootInstancesWithContext.
// Check the length with:
//     len(mockedec2Client.RebootInstancesWithContextCalls())
func (mock *ec2ClientMock) RebootInstancesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.RebootInstancesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.RebootInstancesInput
		In3 []request.Option
	}
	lockec2ClientMockRebootInstancesWithContext.RLock()
	calls = mock.calls.RebootInstancesWithContext
	lockec2ClientMockRebootInstancesWithContext.RUnlock()
	return calls
}

// RegisterImage calls RegisterImageFunc.
func (mock *ec2ClientMock) RegisterImage(in1 *ec2.RegisterImageInput) (*ec2.RegisterImageOutput, error) {
	if mock.RegisterImageFunc == nil {
		panic("ec2ClientMock.RegisterImageFunc: method is nil but ec2Client.RegisterImage was just called")
	}
	callInfo := struct {
		In1 *ec2.RegisterImageInput
	}{
		In1: in1,
	}
	lockec2ClientMockRegisterImage.Lock()
	mock.calls.RegisterImage = append(mock.calls.RegisterImage, callInfo)
	lockec2ClientMockRegisterImage.Unlock()
	return mock.RegisterImageFunc(in1)
}

// RegisterImageCalls gets all the calls that were made to RegisterImage.
// Check the length with:
//     len(mockedec2Client.RegisterImageCalls())
func (mock *ec2ClientMock) RegisterImageCalls() []struct {
	In1 *ec2.RegisterImageInput
} {
	var calls []struct {
		In1 *ec2.RegisterImageInput
	}
	lockec2ClientMockRegisterImage.RLock()
	calls = mock.calls.RegisterImage
	lockec2ClientMockRegisterImage.RUnlock()
	return calls
}

// RegisterImageRequest calls RegisterImageRequestFunc.
func (mock *ec2ClientMock) RegisterImageRequest(in1 *ec2.RegisterImageInput) (*request.Request, *ec2.RegisterImageOutput) {
	if mock.RegisterImageRequestFunc == nil {
		panic("ec2ClientMock.RegisterImageRequestFunc: method is nil but ec2Client.RegisterImageRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.RegisterImageInput
	}{
		In1: in1,
	}
	lockec2ClientMockRegisterImageRequest.Lock()
	mock.calls.RegisterImageRequest = append(mock.calls.RegisterImageRequest, callInfo)
	lockec2ClientMockRegisterImageRequest.Unlock()
	return mock.RegisterImageRequestFunc(in1)
}

// RegisterImageRequestCalls gets all the calls that were made to RegisterImageRequest.
// Check the length with:
//     len(mockedec2Client.RegisterImageRequestCalls())
func (mock *ec2ClientMock) RegisterImageRequestCalls() []struct {
	In1 *ec2.RegisterImageInput
} {
	var calls []struct {
		In1 *ec2.RegisterImageInput
	}
	lockec2ClientMockRegisterImageRequest.RLock()
	calls = mock.calls.RegisterImageRequest
	lockec2ClientMockRegisterImageRequest.RUnlock()
	return calls
}

// RegisterImageWithContext calls RegisterImageWithContextFunc.
func (mock *ec2ClientMock) RegisterImageWithContext(in1 context.Context, in2 *ec2.RegisterImageInput, in3 ...request.Option) (*ec2.RegisterImageOutput, error) {
	if mock.RegisterImageWithContextFunc == nil {
		panic("ec2ClientMock.RegisterImageWithContextFunc: method is nil but ec2Client.RegisterImageWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.RegisterImageInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockRegisterImageWithContext.Lock()
	mock.calls.RegisterImageWithContext = append(mock.calls.RegisterImageWithContext, callInfo)
	lockec2ClientMockRegisterImageWithContext.Unlock()
	return mock.RegisterImageWithContextFunc(in1, in2, in3...)
}

// RegisterImageWithContextCalls gets all the calls that were made to RegisterImageWithContext.
// Check the length with:
//     len(mockedec2Client.RegisterImageWithContextCalls())
func (mock *ec2ClientMock) RegisterImageWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.RegisterImageInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.RegisterImageInput
		In3 []request.Option
	}
	lockec2ClientMockRegisterImageWithContext.RLock()
	calls = mock.calls.RegisterImageWithContext
	lockec2ClientMockRegisterImageWithContext.RUnlock()
	return calls
}

// RegisterTransitGatewayMulticastGroupMembers calls RegisterTransitGatewayMulticastGroupMembersFunc.
func (mock *ec2ClientMock) RegisterTransitGatewayMulticastGroupMembers(in1 *ec2.RegisterTransitGatewayMulticastGroupMembersInput) (*ec2.RegisterTransitGatewayMulticastGroupMembersOutput, error) {
	if mock.RegisterTransitGatewayMulticastGroupMembersFunc == nil {
		panic("ec2ClientMock.RegisterTransitGatewayMulticastGroupMembersFunc: method is nil but ec2Client.RegisterTransitGatewayMulticastGroupMembers was just called")
	}
	callInfo := struct {
		In1 *ec2.RegisterTransitGatewayMulticastGroupMembersInput
	}{
		In1: in1,
	}
	lockec2ClientMockRegisterTransitGatewayMulticastGroupMembers.Lock()
	mock.calls.RegisterTransitGatewayMulticastGroupMembers = append(mock.calls.RegisterTransitGatewayMulticastGroupMembers, callInfo)
	lockec2ClientMockRegisterTransitGatewayMulticastGroupMembers.Unlock()
	return mock.RegisterTransitGatewayMulticastGroupMembersFunc(in1)
}

// RegisterTransitGatewayMulticastGroupMembersCalls gets all the calls that were made to RegisterTransitGatewayMulticastGroupMembers.
// Check the length with:
//     len(mockedec2Client.RegisterTransitGatewayMulticastGroupMembersCalls())
func (mock *ec2ClientMock) RegisterTransitGatewayMulticastGroupMembersCalls() []struct {
	In1 *ec2.RegisterTransitGatewayMulticastGroupMembersInput
} {
	var calls []struct {
		In1 *ec2.RegisterTransitGatewayMulticastGroupMembersInput
	}
	lockec2ClientMockRegisterTransitGatewayMulticastGroupMembers.RLock()
	calls = mock.calls.RegisterTransitGatewayMulticastGroupMembers
	lockec2ClientMockRegisterTransitGatewayMulticastGroupMembers.RUnlock()
	return calls
}

// RegisterTransitGatewayMulticastGroupMembersRequest calls RegisterTransitGatewayMulticastGroupMembersRequestFunc.
func (mock *ec2ClientMock) RegisterTransitGatewayMulticastGroupMembersRequest(in1 *ec2.RegisterTransitGatewayMulticastGroupMembersInput) (*request.Request, *ec2.RegisterTransitGatewayMulticastGroupMembersOutput) {
	if mock.RegisterTransitGatewayMulticastGroupMembersRequestFunc == nil {
		panic("ec2ClientMock.RegisterTransitGatewayMulticastGroupMembersRequestFunc: method is nil but ec2Client.RegisterTransitGatewayMulticastGroupMembersRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.RegisterTransitGatewayMulticastGroupMembersInput
	}{
		In1: in1,
	}
	lockec2ClientMockRegisterTransitGatewayMulticastGroupMembersRequest.Lock()
	mock.calls.RegisterTransitGatewayMulticastGroupMembersRequest = append(mock.calls.RegisterTransitGatewayMulticastGroupMembersRequest, callInfo)
	lockec2ClientMockRegisterTransitGatewayMulticastGroupMembersRequest.Unlock()
	return mock.RegisterTransitGatewayMulticastGroupMembersRequestFunc(in1)
}

// RegisterTransitGatewayMulticastGroupMembersRequestCalls gets all the calls that were made to RegisterTransitGatewayMulticastGroupMembersRequest.
// Check the length with:
//     len(mockedec2Client.RegisterTransitGatewayMulticastGroupMembersRequestCalls())
func (mock *ec2ClientMock) RegisterTransitGatewayMulticastGroupMembersRequestCalls() []struct {
	In1 *ec2.RegisterTransitGatewayMulticastGroupMembersInput
} {
	var calls []struct {
		In1 *ec2.RegisterTransitGatewayMulticastGroupMembersInput
	}
	lockec2ClientMockRegisterTransitGatewayMulticastGroupMembersRequest.RLock()
	calls = mock.calls.RegisterTransitGatewayMulticastGroupMembersRequest
	lockec2ClientMockRegisterTransitGatewayMulticastGroupMembersRequest.RUnlock()
	return calls
}

// RegisterTransitGatewayMulticastGroupMembersWithContext calls RegisterTransitGatewayMulticastGroupMembersWithContextFunc.
func (mock *ec2ClientMock) RegisterTransitGatewayMulticastGroupMembersWithContext(in1 context.Context, in2 *ec2.RegisterTransitGatewayMulticastGroupMembersInput, in3 ...request.Option) (*ec2.RegisterTransitGatewayMulticastGroupMembersOutput, error) {
	if mock.RegisterTransitGatewayMulticastGroupMembersWithContextFunc == nil {
		panic("ec2ClientMock.RegisterTransitGatewayMulticastGroupMembersWithContextFunc: method is nil but ec2Client.RegisterTransitGatewayMulticastGroupMembersWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.RegisterTransitGatewayMulticastGroupMembersInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockRegisterTransitGatewayMulticastGroupMembersWithContext.Lock()
	mock.calls.RegisterTransitGatewayMulticastGroupMembersWithContext = append(mock.calls.RegisterTransitGatewayMulticastGroupMembersWithContext, callInfo)
	lockec2ClientMockRegisterTransitGatewayMulticastGroupMembersWithContext.Unlock()
	return mock.RegisterTransitGatewayMulticastGroupMembersWithContextFunc(in1, in2, in3...)
}

// RegisterTransitGatewayMulticastGroupMembersWithContextCalls gets all the calls that were made to RegisterTransitGatewayMulticastGroupMembersWithContext.
// Check the length with:
//     len(mockedec2Client.RegisterTransitGatewayMulticastGroupMembersWithContextCalls())
func (mock *ec2ClientMock) RegisterTransitGatewayMulticastGroupMembersWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.RegisterTransitGatewayMulticastGroupMembersInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.RegisterTransitGatewayMulticastGroupMembersInput
		In3 []request.Option
	}
	lockec2ClientMockRegisterTransitGatewayMulticastGroupMembersWithContext.RLock()
	calls = mock.calls.RegisterTransitGatewayMulticastGroupMembersWithContext
	lockec2ClientMockRegisterTransitGatewayMulticastGroupMembersWithContext.RUnlock()
	return calls
}

// RegisterTransitGatewayMulticastGroupSources calls RegisterTransitGatewayMulticastGroupSourcesFunc.
func (mock *ec2ClientMock) RegisterTransitGatewayMulticastGroupSources(in1 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput) (*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput, error) {
	if mock.RegisterTransitGatewayMulticastGroupSourcesFunc == nil {
		panic("ec2ClientMock.RegisterTransitGatewayMulticastGroupSourcesFunc: method is nil but ec2Client.RegisterTransitGatewayMulticastGroupSources was just called")
	}
	callInfo := struct {
		In1 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput
	}{
		In1: in1,
	}
	lockec2ClientMockRegisterTransitGatewayMulticastGroupSources.Lock()
	mock.calls.RegisterTransitGatewayMulticastGroupSources = append(mock.calls.RegisterTransitGatewayMulticastGroupSources, callInfo)
	lockec2ClientMockRegisterTransitGatewayMulticastGroupSources.Unlock()
	return mock.RegisterTransitGatewayMulticastGroupSourcesFunc(in1)
}

// RegisterTransitGatewayMulticastGroupSourcesCalls gets all the calls that were made to RegisterTransitGatewayMulticastGroupSources.
// Check the length with:
//     len(mockedec2Client.RegisterTransitGatewayMulticastGroupSourcesCalls())
func (mock *ec2ClientMock) RegisterTransitGatewayMulticastGroupSourcesCalls() []struct {
	In1 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput
} {
	var calls []struct {
		In1 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput
	}
	lockec2ClientMockRegisterTransitGatewayMulticastGroupSources.RLock()
	calls = mock.calls.RegisterTransitGatewayMulticastGroupSources
	lockec2ClientMockRegisterTransitGatewayMulticastGroupSources.RUnlock()
	return calls
}

// RegisterTransitGatewayMulticastGroupSourcesRequest calls RegisterTransitGatewayMulticastGroupSourcesRequestFunc.
func (mock *ec2ClientMock) RegisterTransitGatewayMulticastGroupSourcesRequest(in1 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput) (*request.Request, *ec2.RegisterTransitGatewayMulticastGroupSourcesOutput) {
	if mock.RegisterTransitGatewayMulticastGroupSourcesRequestFunc == nil {
		panic("ec2ClientMock.RegisterTransitGatewayMulticastGroupSourcesRequestFunc: method is nil but ec2Client.RegisterTransitGatewayMulticastGroupSourcesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput
	}{
		In1: in1,
	}
	lockec2ClientMockRegisterTransitGatewayMulticastGroupSourcesRequest.Lock()
	mock.calls.RegisterTransitGatewayMulticastGroupSourcesRequest = append(mock.calls.RegisterTransitGatewayMulticastGroupSourcesRequest, callInfo)
	lockec2ClientMockRegisterTransitGatewayMulticastGroupSourcesRequest.Unlock()
	return mock.RegisterTransitGatewayMulticastGroupSourcesRequestFunc(in1)
}

// RegisterTransitGatewayMulticastGroupSourcesRequestCalls gets all the calls that were made to RegisterTransitGatewayMulticastGroupSourcesRequest.
// Check the length with:
//     len(mockedec2Client.RegisterTransitGatewayMulticastGroupSourcesRequestCalls())
func (mock *ec2ClientMock) RegisterTransitGatewayMulticastGroupSourcesRequestCalls() []struct {
	In1 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput
} {
	var calls []struct {
		In1 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput
	}
	lockec2ClientMockRegisterTransitGatewayMulticastGroupSourcesRequest.RLock()
	calls = mock.calls.RegisterTransitGatewayMulticastGroupSourcesRequest
	lockec2ClientMockRegisterTransitGatewayMulticastGroupSourcesRequest.RUnlock()
	return calls
}

// RegisterTransitGatewayMulticastGroupSourcesWithContext calls RegisterTransitGatewayMulticastGroupSourcesWithContextFunc.
func (mock *ec2ClientMock) RegisterTransitGatewayMulticastGroupSourcesWithContext(in1 context.Context, in2 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput, in3 ...request.Option) (*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput, error) {
	if mock.RegisterTransitGatewayMulticastGroupSourcesWithContextFunc == nil {
		panic("ec2ClientMock.RegisterTransitGatewayMulticastGroupSourcesWithContextFunc: method is nil but ec2Client.RegisterTransitGatewayMulticastGroupSourcesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockRegisterTransitGatewayMulticastGroupSourcesWithContext.Lock()
	mock.calls.RegisterTransitGatewayMulticastGroupSourcesWithContext = append(mock.calls.RegisterTransitGatewayMulticastGroupSourcesWithContext, callInfo)
	lockec2ClientMockRegisterTransitGatewayMulticastGroupSourcesWithContext.Unlock()
	return mock.RegisterTransitGatewayMulticastGroupSourcesWithContextFunc(in1, in2, in3...)
}

// RegisterTransitGatewayMulticastGroupSourcesWithContextCalls gets all the calls that were made to RegisterTransitGatewayMulticastGroupSourcesWithContext.
// Check the length with:
//     len(mockedec2Client.RegisterTransitGatewayMulticastGroupSourcesWithContextCalls())
func (mock *ec2ClientMock) RegisterTransitGatewayMulticastGroupSourcesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput
		In3 []request.Option
	}
	lockec2ClientMockRegisterTransitGatewayMulticastGroupSourcesWithContext.RLock()
	calls = mock.calls.RegisterTransitGatewayMulticastGroupSourcesWithContext
	lockec2ClientMockRegisterTransitGatewayMulticastGroupSourcesWithContext.RUnlock()
	return calls
}

// RejectTransitGatewayPeeringAttachment calls RejectTransitGatewayPeeringAttachmentFunc.
func (mock *ec2ClientMock) RejectTransitGatewayPeeringAttachment(in1 *ec2.RejectTransitGatewayPeeringAttachmentInput) (*ec2.RejectTransitGatewayPeeringAttachmentOutput, error) {
	if mock.RejectTransitGatewayPeeringAttachmentFunc == nil {
		panic("ec2ClientMock.RejectTransitGatewayPeeringAttachmentFunc: method is nil but ec2Client.RejectTransitGatewayPeeringAttachment was just called")
	}
	callInfo := struct {
		In1 *ec2.RejectTransitGatewayPeeringAttachmentInput
	}{
		In1: in1,
	}
	lockec2ClientMockRejectTransitGatewayPeeringAttachment.Lock()
	mock.calls.RejectTransitGatewayPeeringAttachment = append(mock.calls.RejectTransitGatewayPeeringAttachment, callInfo)
	lockec2ClientMockRejectTransitGatewayPeeringAttachment.Unlock()
	return mock.RejectTransitGatewayPeeringAttachmentFunc(in1)
}

// RejectTransitGatewayPeeringAttachmentCalls gets all the calls that were made to RejectTransitGatewayPeeringAttachment.
// Check the length with:
//     len(mockedec2Client.RejectTransitGatewayPeeringAttachmentCalls())
func (mock *ec2ClientMock) RejectTransitGatewayPeeringAttachmentCalls() []struct {
	In1 *ec2.RejectTransitGatewayPeeringAttachmentInput
} {
	var calls []struct {
		In1 *ec2.RejectTransitGatewayPeeringAttachmentInput
	}
	lockec2ClientMockRejectTransitGatewayPeeringAttachment.RLock()
	calls = mock.calls.RejectTransitGatewayPeeringAttachment
	lockec2ClientMockRejectTransitGatewayPeeringAttachment.RUnlock()
	return calls
}

// RejectTransitGatewayPeeringAttachmentRequest calls RejectTransitGatewayPeeringAttachmentRequestFunc.
func (mock *ec2ClientMock) RejectTransitGatewayPeeringAttachmentRequest(in1 *ec2.RejectTransitGatewayPeeringAttachmentInput) (*request.Request, *ec2.RejectTransitGatewayPeeringAttachmentOutput) {
	if mock.RejectTransitGatewayPeeringAttachmentRequestFunc == nil {
		panic("ec2ClientMock.RejectTransitGatewayPeeringAttachmentRequestFunc: method is nil but ec2Client.RejectTransitGatewayPeeringAttachmentRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.RejectTransitGatewayPeeringAttachmentInput
	}{
		In1: in1,
	}
	lockec2ClientMockRejectTransitGatewayPeeringAttachmentRequest.Lock()
	mock.calls.RejectTransitGatewayPeeringAttachmentRequest = append(mock.calls.RejectTransitGatewayPeeringAttachmentRequest, callInfo)
	lockec2ClientMockRejectTransitGatewayPeeringAttachmentRequest.Unlock()
	return mock.RejectTransitGatewayPeeringAttachmentRequestFunc(in1)
}

// RejectTransitGatewayPeeringAttachmentRequestCalls gets all the calls that were made to RejectTransitGatewayPeeringAttachmentRequest.
// Check the length with:
//     len(mockedec2Client.RejectTransitGatewayPeeringAttachmentRequestCalls())
func (mock *ec2ClientMock) RejectTransitGatewayPeeringAttachmentRequestCalls() []struct {
	In1 *ec2.RejectTransitGatewayPeeringAttachmentInput
} {
	var calls []struct {
		In1 *ec2.RejectTransitGatewayPeeringAttachmentInput
	}
	lockec2ClientMockRejectTransitGatewayPeeringAttachmentRequest.RLock()
	calls = mock.calls.RejectTransitGatewayPeeringAttachmentRequest
	lockec2ClientMockRejectTransitGatewayPeeringAttachmentRequest.RUnlock()
	return calls
}

// RejectTransitGatewayPeeringAttachmentWithContext calls RejectTransitGatewayPeeringAttachmentWithContextFunc.
func (mock *ec2ClientMock) RejectTransitGatewayPeeringAttachmentWithContext(in1 context.Context, in2 *ec2.RejectTransitGatewayPeeringAttachmentInput, in3 ...request.Option) (*ec2.RejectTransitGatewayPeeringAttachmentOutput, error) {
	if mock.RejectTransitGatewayPeeringAttachmentWithContextFunc == nil {
		panic("ec2ClientMock.RejectTransitGatewayPeeringAttachmentWithContextFunc: method is nil but ec2Client.RejectTransitGatewayPeeringAttachmentWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.RejectTransitGatewayPeeringAttachmentInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockRejectTransitGatewayPeeringAttachmentWithContext.Lock()
	mock.calls.RejectTransitGatewayPeeringAttachmentWithContext = append(mock.calls.RejectTransitGatewayPeeringAttachmentWithContext, callInfo)
	lockec2ClientMockRejectTransitGatewayPeeringAttachmentWithContext.Unlock()
	return mock.RejectTransitGatewayPeeringAttachmentWithContextFunc(in1, in2, in3...)
}

// RejectTransitGatewayPeeringAttachmentWithContextCalls gets all the calls that were made to RejectTransitGatewayPeeringAttachmentWithContext.
// Check the length with:
//     len(mockedec2Client.RejectTransitGatewayPeeringAttachmentWithContextCalls())
func (mock *ec2ClientMock) RejectTransitGatewayPeeringAttachmentWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.RejectTransitGatewayPeeringAttachmentInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.RejectTransitGatewayPeeringAttachmentInput
		In3 []request.Option
	}
	lockec2ClientMockRejectTransitGatewayPeeringAttachmentWithContext.RLock()
	calls = mock.calls.RejectTransitGatewayPeeringAttachmentWithContext
	lockec2ClientMockRejectTransitGatewayPeeringAttachmentWithContext.RUnlock()
	return calls
}

// RejectTransitGatewayVpcAttachment calls RejectTransitGatewayVpcAttachmentFunc.
func (mock *ec2ClientMock) RejectTransitGatewayVpcAttachment(in1 *ec2.RejectTransitGatewayVpcAttachmentInput) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error) {
	if mock.RejectTransitGatewayVpcAttachmentFunc == nil {
		panic("ec2ClientMock.RejectTransitGatewayVpcAttachmentFunc: method is nil but ec2Client.RejectTransitGatewayVpcAttachment was just called")
	}
	callInfo := struct {
		In1 *ec2.RejectTransitGatewayVpcAttachmentInput
	}{
		In1: in1,
	}
	lockec2ClientMockRejectTransitGatewayVpcAttachment.Lock()
	mock.calls.RejectTransitGatewayVpcAttachment = append(mock.calls.RejectTransitGatewayVpcAttachment, callInfo)
	lockec2ClientMockRejectTransitGatewayVpcAttachment.Unlock()
	return mock.RejectTransitGatewayVpcAttachmentFunc(in1)
}

// RejectTransitGatewayVpcAttachmentCalls gets all the calls that were made to RejectTransitGatewayVpcAttachment.
// Check the length with:
//     len(mockedec2Client.RejectTransitGatewayVpcAttachmentCalls())
func (mock *ec2ClientMock) RejectTransitGatewayVpcAttachmentCalls() []struct {
	In1 *ec2.RejectTransitGatewayVpcAttachmentInput
} {
	var calls []struct {
		In1 *ec2.RejectTransitGatewayVpcAttachmentInput
	}
	lockec2ClientMockRejectTransitGatewayVpcAttachment.RLock()
	calls = mock.calls.RejectTransitGatewayVpcAttachment
	lockec2ClientMockRejectTransitGatewayVpcAttachment.RUnlock()
	return calls
}

// RejectTransitGatewayVpcAttachmentRequest calls RejectTransitGatewayVpcAttachmentRequestFunc.
func (mock *ec2ClientMock) RejectTransitGatewayVpcAttachmentRequest(in1 *ec2.RejectTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.RejectTransitGatewayVpcAttachmentOutput) {
	if mock.RejectTransitGatewayVpcAttachmentRequestFunc == nil {
		panic("ec2ClientMock.RejectTransitGatewayVpcAttachmentRequestFunc: method is nil but ec2Client.RejectTransitGatewayVpcAttachmentRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.RejectTransitGatewayVpcAttachmentInput
	}{
		In1: in1,
	}
	lockec2ClientMockRejectTransitGatewayVpcAttachmentRequest.Lock()
	mock.calls.RejectTransitGatewayVpcAttachmentRequest = append(mock.calls.RejectTransitGatewayVpcAttachmentRequest, callInfo)
	lockec2ClientMockRejectTransitGatewayVpcAttachmentRequest.Unlock()
	return mock.RejectTransitGatewayVpcAttachmentRequestFunc(in1)
}

// RejectTransitGatewayVpcAttachmentRequestCalls gets all the calls that were made to RejectTransitGatewayVpcAttachmentRequest.
// Check the length with:
//     len(mockedec2Client.RejectTransitGatewayVpcAttachmentRequestCalls())
func (mock *ec2ClientMock) RejectTransitGatewayVpcAttachmentRequestCalls() []struct {
	In1 *ec2.RejectTransitGatewayVpcAttachmentInput
} {
	var calls []struct {
		In1 *ec2.RejectTransitGatewayVpcAttachmentInput
	}
	lockec2ClientMockRejectTransitGatewayVpcAttachmentRequest.RLock()
	calls = mock.calls.RejectTransitGatewayVpcAttachmentRequest
	lockec2ClientMockRejectTransitGatewayVpcAttachmentRequest.RUnlock()
	return calls
}

// RejectTransitGatewayVpcAttachmentWithContext calls RejectTransitGatewayVpcAttachmentWithContextFunc.
func (mock *ec2ClientMock) RejectTransitGatewayVpcAttachmentWithContext(in1 context.Context, in2 *ec2.RejectTransitGatewayVpcAttachmentInput, in3 ...request.Option) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error) {
	if mock.RejectTransitGatewayVpcAttachmentWithContextFunc == nil {
		panic("ec2ClientMock.RejectTransitGatewayVpcAttachmentWithContextFunc: method is nil but ec2Client.RejectTransitGatewayVpcAttachmentWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.RejectTransitGatewayVpcAttachmentInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockRejectTransitGatewayVpcAttachmentWithContext.Lock()
	mock.calls.RejectTransitGatewayVpcAttachmentWithContext = append(mock.calls.RejectTransitGatewayVpcAttachmentWithContext, callInfo)
	lockec2ClientMockRejectTransitGatewayVpcAttachmentWithContext.Unlock()
	return mock.RejectTransitGatewayVpcAttachmentWithContextFunc(in1, in2, in3...)
}

// RejectTransitGatewayVpcAttachmentWithContextCalls gets all the calls that were made to RejectTransitGatewayVpcAttachmentWithContext.
// Check the length with:
//     len(mockedec2Client.RejectTransitGatewayVpcAttachmentWithContextCalls())
func (mock *ec2ClientMock) RejectTransitGatewayVpcAttachmentWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.RejectTransitGatewayVpcAttachmentInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.RejectTransitGatewayVpcAttachmentInput
		In3 []request.Option
	}
	lockec2ClientMockRejectTransitGatewayVpcAttachmentWithContext.RLock()
	calls = mock.calls.RejectTransitGatewayVpcAttachmentWithContext
	lockec2ClientMockRejectTransitGatewayVpcAttachmentWithContext.RUnlock()
	return calls
}

// RejectVpcEndpointConnections calls RejectVpcEndpointConnectionsFunc.
func (mock *ec2ClientMock) RejectVpcEndpointConnections(in1 *ec2.RejectVpcEndpointConnectionsInput) (*ec2.RejectVpcEndpointConnectionsOutput, error) {
	if mock.RejectVpcEndpointConnectionsFunc == nil {
		panic("ec2ClientMock.RejectVpcEndpointConnectionsFunc: method is nil but ec2Client.RejectVpcEndpointConnections was just called")
	}
	callInfo := struct {
		In1 *ec2.RejectVpcEndpointConnectionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockRejectVpcEndpointConnections.Lock()
	mock.calls.RejectVpcEndpointConnections = append(mock.calls.RejectVpcEndpointConnections, callInfo)
	lockec2ClientMockRejectVpcEndpointConnections.Unlock()
	return mock.RejectVpcEndpointConnectionsFunc(in1)
}

// RejectVpcEndpointConnectionsCalls gets all the calls that were made to RejectVpcEndpointConnections.
// Check the length with:
//     len(mockedec2Client.RejectVpcEndpointConnectionsCalls())
func (mock *ec2ClientMock) RejectVpcEndpointConnectionsCalls() []struct {
	In1 *ec2.RejectVpcEndpointConnectionsInput
} {
	var calls []struct {
		In1 *ec2.RejectVpcEndpointConnectionsInput
	}
	lockec2ClientMockRejectVpcEndpointConnections.RLock()
	calls = mock.calls.RejectVpcEndpointConnections
	lockec2ClientMockRejectVpcEndpointConnections.RUnlock()
	return calls
}

// RejectVpcEndpointConnectionsRequest calls RejectVpcEndpointConnectionsRequestFunc.
func (mock *ec2ClientMock) RejectVpcEndpointConnectionsRequest(in1 *ec2.RejectVpcEndpointConnectionsInput) (*request.Request, *ec2.RejectVpcEndpointConnectionsOutput) {
	if mock.RejectVpcEndpointConnectionsRequestFunc == nil {
		panic("ec2ClientMock.RejectVpcEndpointConnectionsRequestFunc: method is nil but ec2Client.RejectVpcEndpointConnectionsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.RejectVpcEndpointConnectionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockRejectVpcEndpointConnectionsRequest.Lock()
	mock.calls.RejectVpcEndpointConnectionsRequest = append(mock.calls.RejectVpcEndpointConnectionsRequest, callInfo)
	lockec2ClientMockRejectVpcEndpointConnectionsRequest.Unlock()
	return mock.RejectVpcEndpointConnectionsRequestFunc(in1)
}

// RejectVpcEndpointConnectionsRequestCalls gets all the calls that were made to RejectVpcEndpointConnectionsRequest.
// Check the length with:
//     len(mockedec2Client.RejectVpcEndpointConnectionsRequestCalls())
func (mock *ec2ClientMock) RejectVpcEndpointConnectionsRequestCalls() []struct {
	In1 *ec2.RejectVpcEndpointConnectionsInput
} {
	var calls []struct {
		In1 *ec2.RejectVpcEndpointConnectionsInput
	}
	lockec2ClientMockRejectVpcEndpointConnectionsRequest.RLock()
	calls = mock.calls.RejectVpcEndpointConnectionsRequest
	lockec2ClientMockRejectVpcEndpointConnectionsRequest.RUnlock()
	return calls
}

// RejectVpcEndpointConnectionsWithContext calls RejectVpcEndpointConnectionsWithContextFunc.
func (mock *ec2ClientMock) RejectVpcEndpointConnectionsWithContext(in1 context.Context, in2 *ec2.RejectVpcEndpointConnectionsInput, in3 ...request.Option) (*ec2.RejectVpcEndpointConnectionsOutput, error) {
	if mock.RejectVpcEndpointConnectionsWithContextFunc == nil {
		panic("ec2ClientMock.RejectVpcEndpointConnectionsWithContextFunc: method is nil but ec2Client.RejectVpcEndpointConnectionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.RejectVpcEndpointConnectionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockRejectVpcEndpointConnectionsWithContext.Lock()
	mock.calls.RejectVpcEndpointConnectionsWithContext = append(mock.calls.RejectVpcEndpointConnectionsWithContext, callInfo)
	lockec2ClientMockRejectVpcEndpointConnectionsWithContext.Unlock()
	return mock.RejectVpcEndpointConnectionsWithContextFunc(in1, in2, in3...)
}

// RejectVpcEndpointConnectionsWithContextCalls gets all the calls that were made to RejectVpcEndpointConnectionsWithContext.
// Check the length with:
//     len(mockedec2Client.RejectVpcEndpointConnectionsWithContextCalls())
func (mock *ec2ClientMock) RejectVpcEndpointConnectionsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.RejectVpcEndpointConnectionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.RejectVpcEndpointConnectionsInput
		In3 []request.Option
	}
	lockec2ClientMockRejectVpcEndpointConnectionsWithContext.RLock()
	calls = mock.calls.RejectVpcEndpointConnectionsWithContext
	lockec2ClientMockRejectVpcEndpointConnectionsWithContext.RUnlock()
	return calls
}

// RejectVpcPeeringConnection calls RejectVpcPeeringConnectionFunc.
func (mock *ec2ClientMock) RejectVpcPeeringConnection(in1 *ec2.RejectVpcPeeringConnectionInput) (*ec2.RejectVpcPeeringConnectionOutput, error) {
	if mock.RejectVpcPeeringConnectionFunc == nil {
		panic("ec2ClientMock.RejectVpcPeeringConnectionFunc: method is nil but ec2Client.RejectVpcPeeringConnection was just called")
	}
	callInfo := struct {
		In1 *ec2.RejectVpcPeeringConnectionInput
	}{
		In1: in1,
	}
	lockec2ClientMockRejectVpcPeeringConnection.Lock()
	mock.calls.RejectVpcPeeringConnection = append(mock.calls.RejectVpcPeeringConnection, callInfo)
	lockec2ClientMockRejectVpcPeeringConnection.Unlock()
	return mock.RejectVpcPeeringConnectionFunc(in1)
}

// RejectVpcPeeringConnectionCalls gets all the calls that were made to RejectVpcPeeringConnection.
// Check the length with:
//     len(mockedec2Client.RejectVpcPeeringConnectionCalls())
func (mock *ec2ClientMock) RejectVpcPeeringConnectionCalls() []struct {
	In1 *ec2.RejectVpcPeeringConnectionInput
} {
	var calls []struct {
		In1 *ec2.RejectVpcPeeringConnectionInput
	}
	lockec2ClientMockRejectVpcPeeringConnection.RLock()
	calls = mock.calls.RejectVpcPeeringConnection
	lockec2ClientMockRejectVpcPeeringConnection.RUnlock()
	return calls
}

// RejectVpcPeeringConnectionRequest calls RejectVpcPeeringConnectionRequestFunc.
func (mock *ec2ClientMock) RejectVpcPeeringConnectionRequest(in1 *ec2.RejectVpcPeeringConnectionInput) (*request.Request, *ec2.RejectVpcPeeringConnectionOutput) {
	if mock.RejectVpcPeeringConnectionRequestFunc == nil {
		panic("ec2ClientMock.RejectVpcPeeringConnectionRequestFunc: method is nil but ec2Client.RejectVpcPeeringConnectionRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.RejectVpcPeeringConnectionInput
	}{
		In1: in1,
	}
	lockec2ClientMockRejectVpcPeeringConnectionRequest.Lock()
	mock.calls.RejectVpcPeeringConnectionRequest = append(mock.calls.RejectVpcPeeringConnectionRequest, callInfo)
	lockec2ClientMockRejectVpcPeeringConnectionRequest.Unlock()
	return mock.RejectVpcPeeringConnectionRequestFunc(in1)
}

// RejectVpcPeeringConnectionRequestCalls gets all the calls that were made to RejectVpcPeeringConnectionRequest.
// Check the length with:
//     len(mockedec2Client.RejectVpcPeeringConnectionRequestCalls())
func (mock *ec2ClientMock) RejectVpcPeeringConnectionRequestCalls() []struct {
	In1 *ec2.RejectVpcPeeringConnectionInput
} {
	var calls []struct {
		In1 *ec2.RejectVpcPeeringConnectionInput
	}
	lockec2ClientMockRejectVpcPeeringConnectionRequest.RLock()
	calls = mock.calls.RejectVpcPeeringConnectionRequest
	lockec2ClientMockRejectVpcPeeringConnectionRequest.RUnlock()
	return calls
}

// RejectVpcPeeringConnectionWithContext calls RejectVpcPeeringConnectionWithContextFunc.
func (mock *ec2ClientMock) RejectVpcPeeringConnectionWithContext(in1 context.Context, in2 *ec2.RejectVpcPeeringConnectionInput, in3 ...request.Option) (*ec2.RejectVpcPeeringConnectionOutput, error) {
	if mock.RejectVpcPeeringConnectionWithContextFunc == nil {
		panic("ec2ClientMock.RejectVpcPeeringConnectionWithContextFunc: method is nil but ec2Client.RejectVpcPeeringConnectionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.RejectVpcPeeringConnectionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockRejectVpcPeeringConnectionWithContext.Lock()
	mock.calls.RejectVpcPeeringConnectionWithContext = append(mock.calls.RejectVpcPeeringConnectionWithContext, callInfo)
	lockec2ClientMockRejectVpcPeeringConnectionWithContext.Unlock()
	return mock.RejectVpcPeeringConnectionWithContextFunc(in1, in2, in3...)
}

// RejectVpcPeeringConnectionWithContextCalls gets all the calls that were made to RejectVpcPeeringConnectionWithContext.
// Check the length with:
//     len(mockedec2Client.RejectVpcPeeringConnectionWithContextCalls())
func (mock *ec2ClientMock) RejectVpcPeeringConnectionWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.RejectVpcPeeringConnectionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.RejectVpcPeeringConnectionInput
		In3 []request.Option
	}
	lockec2ClientMockRejectVpcPeeringConnectionWithContext.RLock()
	calls = mock.calls.RejectVpcPeeringConnectionWithContext
	lockec2ClientMockRejectVpcPeeringConnectionWithContext.RUnlock()
	return calls
}

// ReleaseAddress calls ReleaseAddressFunc.
func (mock *ec2ClientMock) ReleaseAddress(in1 *ec2.ReleaseAddressInput) (*ec2.ReleaseAddressOutput, error) {
	if mock.ReleaseAddressFunc == nil {
		panic("ec2ClientMock.ReleaseAddressFunc: method is nil but ec2Client.ReleaseAddress was just called")
	}
	callInfo := struct {
		In1 *ec2.ReleaseAddressInput
	}{
		In1: in1,
	}
	lockec2ClientMockReleaseAddress.Lock()
	mock.calls.ReleaseAddress = append(mock.calls.ReleaseAddress, callInfo)
	lockec2ClientMockReleaseAddress.Unlock()
	return mock.ReleaseAddressFunc(in1)
}

// ReleaseAddressCalls gets all the calls that were made to ReleaseAddress.
// Check the length with:
//     len(mockedec2Client.ReleaseAddressCalls())
func (mock *ec2ClientMock) ReleaseAddressCalls() []struct {
	In1 *ec2.ReleaseAddressInput
} {
	var calls []struct {
		In1 *ec2.ReleaseAddressInput
	}
	lockec2ClientMockReleaseAddress.RLock()
	calls = mock.calls.ReleaseAddress
	lockec2ClientMockReleaseAddress.RUnlock()
	return calls
}

// ReleaseAddressRequest calls ReleaseAddressRequestFunc.
func (mock *ec2ClientMock) ReleaseAddressRequest(in1 *ec2.ReleaseAddressInput) (*request.Request, *ec2.ReleaseAddressOutput) {
	if mock.ReleaseAddressRequestFunc == nil {
		panic("ec2ClientMock.ReleaseAddressRequestFunc: method is nil but ec2Client.ReleaseAddressRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ReleaseAddressInput
	}{
		In1: in1,
	}
	lockec2ClientMockReleaseAddressRequest.Lock()
	mock.calls.ReleaseAddressRequest = append(mock.calls.ReleaseAddressRequest, callInfo)
	lockec2ClientMockReleaseAddressRequest.Unlock()
	return mock.ReleaseAddressRequestFunc(in1)
}

// ReleaseAddressRequestCalls gets all the calls that were made to ReleaseAddressRequest.
// Check the length with:
//     len(mockedec2Client.ReleaseAddressRequestCalls())
func (mock *ec2ClientMock) ReleaseAddressRequestCalls() []struct {
	In1 *ec2.ReleaseAddressInput
} {
	var calls []struct {
		In1 *ec2.ReleaseAddressInput
	}
	lockec2ClientMockReleaseAddressRequest.RLock()
	calls = mock.calls.ReleaseAddressRequest
	lockec2ClientMockReleaseAddressRequest.RUnlock()
	return calls
}

// ReleaseAddressWithContext calls ReleaseAddressWithContextFunc.
func (mock *ec2ClientMock) ReleaseAddressWithContext(in1 context.Context, in2 *ec2.ReleaseAddressInput, in3 ...request.Option) (*ec2.ReleaseAddressOutput, error) {
	if mock.ReleaseAddressWithContextFunc == nil {
		panic("ec2ClientMock.ReleaseAddressWithContextFunc: method is nil but ec2Client.ReleaseAddressWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ReleaseAddressInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockReleaseAddressWithContext.Lock()
	mock.calls.ReleaseAddressWithContext = append(mock.calls.ReleaseAddressWithContext, callInfo)
	lockec2ClientMockReleaseAddressWithContext.Unlock()
	return mock.ReleaseAddressWithContextFunc(in1, in2, in3...)
}

// ReleaseAddressWithContextCalls gets all the calls that were made to ReleaseAddressWithContext.
// Check the length with:
//     len(mockedec2Client.ReleaseAddressWithContextCalls())
func (mock *ec2ClientMock) ReleaseAddressWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ReleaseAddressInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ReleaseAddressInput
		In3 []request.Option
	}
	lockec2ClientMockReleaseAddressWithContext.RLock()
	calls = mock.calls.ReleaseAddressWithContext
	lockec2ClientMockReleaseAddressWithContext.RUnlock()
	return calls
}

// ReleaseHosts calls ReleaseHostsFunc.
func (mock *ec2ClientMock) ReleaseHosts(in1 *ec2.ReleaseHostsInput) (*ec2.ReleaseHostsOutput, error) {
	if mock.ReleaseHostsFunc == nil {
		panic("ec2ClientMock.ReleaseHostsFunc: method is nil but ec2Client.ReleaseHosts was just called")
	}
	callInfo := struct {
		In1 *ec2.ReleaseHostsInput
	}{
		In1: in1,
	}
	lockec2ClientMockReleaseHosts.Lock()
	mock.calls.ReleaseHosts = append(mock.calls.ReleaseHosts, callInfo)
	lockec2ClientMockReleaseHosts.Unlock()
	return mock.ReleaseHostsFunc(in1)
}

// ReleaseHostsCalls gets all the calls that were made to ReleaseHosts.
// Check the length with:
//     len(mockedec2Client.ReleaseHostsCalls())
func (mock *ec2ClientMock) ReleaseHostsCalls() []struct {
	In1 *ec2.ReleaseHostsInput
} {
	var calls []struct {
		In1 *ec2.ReleaseHostsInput
	}
	lockec2ClientMockReleaseHosts.RLock()
	calls = mock.calls.ReleaseHosts
	lockec2ClientMockReleaseHosts.RUnlock()
	return calls
}

// ReleaseHostsRequest calls ReleaseHostsRequestFunc.
func (mock *ec2ClientMock) ReleaseHostsRequest(in1 *ec2.ReleaseHostsInput) (*request.Request, *ec2.ReleaseHostsOutput) {
	if mock.ReleaseHostsRequestFunc == nil {
		panic("ec2ClientMock.ReleaseHostsRequestFunc: method is nil but ec2Client.ReleaseHostsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ReleaseHostsInput
	}{
		In1: in1,
	}
	lockec2ClientMockReleaseHostsRequest.Lock()
	mock.calls.ReleaseHostsRequest = append(mock.calls.ReleaseHostsRequest, callInfo)
	lockec2ClientMockReleaseHostsRequest.Unlock()
	return mock.ReleaseHostsRequestFunc(in1)
}

// ReleaseHostsRequestCalls gets all the calls that were made to ReleaseHostsRequest.
// Check the length with:
//     len(mockedec2Client.ReleaseHostsRequestCalls())
func (mock *ec2ClientMock) ReleaseHostsRequestCalls() []struct {
	In1 *ec2.ReleaseHostsInput
} {
	var calls []struct {
		In1 *ec2.ReleaseHostsInput
	}
	lockec2ClientMockReleaseHostsRequest.RLock()
	calls = mock.calls.ReleaseHostsRequest
	lockec2ClientMockReleaseHostsRequest.RUnlock()
	return calls
}

// ReleaseHostsWithContext calls ReleaseHostsWithContextFunc.
func (mock *ec2ClientMock) ReleaseHostsWithContext(in1 context.Context, in2 *ec2.ReleaseHostsInput, in3 ...request.Option) (*ec2.ReleaseHostsOutput, error) {
	if mock.ReleaseHostsWithContextFunc == nil {
		panic("ec2ClientMock.ReleaseHostsWithContextFunc: method is nil but ec2Client.ReleaseHostsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ReleaseHostsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockReleaseHostsWithContext.Lock()
	mock.calls.ReleaseHostsWithContext = append(mock.calls.ReleaseHostsWithContext, callInfo)
	lockec2ClientMockReleaseHostsWithContext.Unlock()
	return mock.ReleaseHostsWithContextFunc(in1, in2, in3...)
}

// ReleaseHostsWithContextCalls gets all the calls that were made to ReleaseHostsWithContext.
// Check the length with:
//     len(mockedec2Client.ReleaseHostsWithContextCalls())
func (mock *ec2ClientMock) ReleaseHostsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ReleaseHostsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ReleaseHostsInput
		In3 []request.Option
	}
	lockec2ClientMockReleaseHostsWithContext.RLock()
	calls = mock.calls.ReleaseHostsWithContext
	lockec2ClientMockReleaseHostsWithContext.RUnlock()
	return calls
}

// ReplaceIamInstanceProfileAssociation calls ReplaceIamInstanceProfileAssociationFunc.
func (mock *ec2ClientMock) ReplaceIamInstanceProfileAssociation(in1 *ec2.ReplaceIamInstanceProfileAssociationInput) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error) {
	if mock.ReplaceIamInstanceProfileAssociationFunc == nil {
		panic("ec2ClientMock.ReplaceIamInstanceProfileAssociationFunc: method is nil but ec2Client.ReplaceIamInstanceProfileAssociation was just called")
	}
	callInfo := struct {
		In1 *ec2.ReplaceIamInstanceProfileAssociationInput
	}{
		In1: in1,
	}
	lockec2ClientMockReplaceIamInstanceProfileAssociation.Lock()
	mock.calls.ReplaceIamInstanceProfileAssociation = append(mock.calls.ReplaceIamInstanceProfileAssociation, callInfo)
	lockec2ClientMockReplaceIamInstanceProfileAssociation.Unlock()
	return mock.ReplaceIamInstanceProfileAssociationFunc(in1)
}

// ReplaceIamInstanceProfileAssociationCalls gets all the calls that were made to ReplaceIamInstanceProfileAssociation.
// Check the length with:
//     len(mockedec2Client.ReplaceIamInstanceProfileAssociationCalls())
func (mock *ec2ClientMock) ReplaceIamInstanceProfileAssociationCalls() []struct {
	In1 *ec2.ReplaceIamInstanceProfileAssociationInput
} {
	var calls []struct {
		In1 *ec2.ReplaceIamInstanceProfileAssociationInput
	}
	lockec2ClientMockReplaceIamInstanceProfileAssociation.RLock()
	calls = mock.calls.ReplaceIamInstanceProfileAssociation
	lockec2ClientMockReplaceIamInstanceProfileAssociation.RUnlock()
	return calls
}

// ReplaceIamInstanceProfileAssociationRequest calls ReplaceIamInstanceProfileAssociationRequestFunc.
func (mock *ec2ClientMock) ReplaceIamInstanceProfileAssociationRequest(in1 *ec2.ReplaceIamInstanceProfileAssociationInput) (*request.Request, *ec2.ReplaceIamInstanceProfileAssociationOutput) {
	if mock.ReplaceIamInstanceProfileAssociationRequestFunc == nil {
		panic("ec2ClientMock.ReplaceIamInstanceProfileAssociationRequestFunc: method is nil but ec2Client.ReplaceIamInstanceProfileAssociationRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ReplaceIamInstanceProfileAssociationInput
	}{
		In1: in1,
	}
	lockec2ClientMockReplaceIamInstanceProfileAssociationRequest.Lock()
	mock.calls.ReplaceIamInstanceProfileAssociationRequest = append(mock.calls.ReplaceIamInstanceProfileAssociationRequest, callInfo)
	lockec2ClientMockReplaceIamInstanceProfileAssociationRequest.Unlock()
	return mock.ReplaceIamInstanceProfileAssociationRequestFunc(in1)
}

// ReplaceIamInstanceProfileAssociationRequestCalls gets all the calls that were made to ReplaceIamInstanceProfileAssociationRequest.
// Check the length with:
//     len(mockedec2Client.ReplaceIamInstanceProfileAssociationRequestCalls())
func (mock *ec2ClientMock) ReplaceIamInstanceProfileAssociationRequestCalls() []struct {
	In1 *ec2.ReplaceIamInstanceProfileAssociationInput
} {
	var calls []struct {
		In1 *ec2.ReplaceIamInstanceProfileAssociationInput
	}
	lockec2ClientMockReplaceIamInstanceProfileAssociationRequest.RLock()
	calls = mock.calls.ReplaceIamInstanceProfileAssociationRequest
	lockec2ClientMockReplaceIamInstanceProfileAssociationRequest.RUnlock()
	return calls
}

// ReplaceIamInstanceProfileAssociationWithContext calls ReplaceIamInstanceProfileAssociationWithContextFunc.
func (mock *ec2ClientMock) ReplaceIamInstanceProfileAssociationWithContext(in1 context.Context, in2 *ec2.ReplaceIamInstanceProfileAssociationInput, in3 ...request.Option) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error) {
	if mock.ReplaceIamInstanceProfileAssociationWithContextFunc == nil {
		panic("ec2ClientMock.ReplaceIamInstanceProfileAssociationWithContextFunc: method is nil but ec2Client.ReplaceIamInstanceProfileAssociationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ReplaceIamInstanceProfileAssociationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockReplaceIamInstanceProfileAssociationWithContext.Lock()
	mock.calls.ReplaceIamInstanceProfileAssociationWithContext = append(mock.calls.ReplaceIamInstanceProfileAssociationWithContext, callInfo)
	lockec2ClientMockReplaceIamInstanceProfileAssociationWithContext.Unlock()
	return mock.ReplaceIamInstanceProfileAssociationWithContextFunc(in1, in2, in3...)
}

// ReplaceIamInstanceProfileAssociationWithContextCalls gets all the calls that were made to ReplaceIamInstanceProfileAssociationWithContext.
// Check the length with:
//     len(mockedec2Client.ReplaceIamInstanceProfileAssociationWithContextCalls())
func (mock *ec2ClientMock) ReplaceIamInstanceProfileAssociationWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ReplaceIamInstanceProfileAssociationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ReplaceIamInstanceProfileAssociationInput
		In3 []request.Option
	}
	lockec2ClientMockReplaceIamInstanceProfileAssociationWithContext.RLock()
	calls = mock.calls.ReplaceIamInstanceProfileAssociationWithContext
	lockec2ClientMockReplaceIamInstanceProfileAssociationWithContext.RUnlock()
	return calls
}

// ReplaceNetworkAclAssociation calls ReplaceNetworkAclAssociationFunc.
func (mock *ec2ClientMock) ReplaceNetworkAclAssociation(in1 *ec2.ReplaceNetworkAclAssociationInput) (*ec2.ReplaceNetworkAclAssociationOutput, error) {
	if mock.ReplaceNetworkAclAssociationFunc == nil {
		panic("ec2ClientMock.ReplaceNetworkAclAssociationFunc: method is nil but ec2Client.ReplaceNetworkAclAssociation was just called")
	}
	callInfo := struct {
		In1 *ec2.ReplaceNetworkAclAssociationInput
	}{
		In1: in1,
	}
	lockec2ClientMockReplaceNetworkAclAssociation.Lock()
	mock.calls.ReplaceNetworkAclAssociation = append(mock.calls.ReplaceNetworkAclAssociation, callInfo)
	lockec2ClientMockReplaceNetworkAclAssociation.Unlock()
	return mock.ReplaceNetworkAclAssociationFunc(in1)
}

// ReplaceNetworkAclAssociationCalls gets all the calls that were made to ReplaceNetworkAclAssociation.
// Check the length with:
//     len(mockedec2Client.ReplaceNetworkAclAssociationCalls())
func (mock *ec2ClientMock) ReplaceNetworkAclAssociationCalls() []struct {
	In1 *ec2.ReplaceNetworkAclAssociationInput
} {
	var calls []struct {
		In1 *ec2.ReplaceNetworkAclAssociationInput
	}
	lockec2ClientMockReplaceNetworkAclAssociation.RLock()
	calls = mock.calls.ReplaceNetworkAclAssociation
	lockec2ClientMockReplaceNetworkAclAssociation.RUnlock()
	return calls
}

// ReplaceNetworkAclAssociationRequest calls ReplaceNetworkAclAssociationRequestFunc.
func (mock *ec2ClientMock) ReplaceNetworkAclAssociationRequest(in1 *ec2.ReplaceNetworkAclAssociationInput) (*request.Request, *ec2.ReplaceNetworkAclAssociationOutput) {
	if mock.ReplaceNetworkAclAssociationRequestFunc == nil {
		panic("ec2ClientMock.ReplaceNetworkAclAssociationRequestFunc: method is nil but ec2Client.ReplaceNetworkAclAssociationRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ReplaceNetworkAclAssociationInput
	}{
		In1: in1,
	}
	lockec2ClientMockReplaceNetworkAclAssociationRequest.Lock()
	mock.calls.ReplaceNetworkAclAssociationRequest = append(mock.calls.ReplaceNetworkAclAssociationRequest, callInfo)
	lockec2ClientMockReplaceNetworkAclAssociationRequest.Unlock()
	return mock.ReplaceNetworkAclAssociationRequestFunc(in1)
}

// ReplaceNetworkAclAssociationRequestCalls gets all the calls that were made to ReplaceNetworkAclAssociationRequest.
// Check the length with:
//     len(mockedec2Client.ReplaceNetworkAclAssociationRequestCalls())
func (mock *ec2ClientMock) ReplaceNetworkAclAssociationRequestCalls() []struct {
	In1 *ec2.ReplaceNetworkAclAssociationInput
} {
	var calls []struct {
		In1 *ec2.ReplaceNetworkAclAssociationInput
	}
	lockec2ClientMockReplaceNetworkAclAssociationRequest.RLock()
	calls = mock.calls.ReplaceNetworkAclAssociationRequest
	lockec2ClientMockReplaceNetworkAclAssociationRequest.RUnlock()
	return calls
}

// ReplaceNetworkAclAssociationWithContext calls ReplaceNetworkAclAssociationWithContextFunc.
func (mock *ec2ClientMock) ReplaceNetworkAclAssociationWithContext(in1 context.Context, in2 *ec2.ReplaceNetworkAclAssociationInput, in3 ...request.Option) (*ec2.ReplaceNetworkAclAssociationOutput, error) {
	if mock.ReplaceNetworkAclAssociationWithContextFunc == nil {
		panic("ec2ClientMock.ReplaceNetworkAclAssociationWithContextFunc: method is nil but ec2Client.ReplaceNetworkAclAssociationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ReplaceNetworkAclAssociationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockReplaceNetworkAclAssociationWithContext.Lock()
	mock.calls.ReplaceNetworkAclAssociationWithContext = append(mock.calls.ReplaceNetworkAclAssociationWithContext, callInfo)
	lockec2ClientMockReplaceNetworkAclAssociationWithContext.Unlock()
	return mock.ReplaceNetworkAclAssociationWithContextFunc(in1, in2, in3...)
}

// ReplaceNetworkAclAssociationWithContextCalls gets all the calls that were made to ReplaceNetworkAclAssociationWithContext.
// Check the length with:
//     len(mockedec2Client.ReplaceNetworkAclAssociationWithContextCalls())
func (mock *ec2ClientMock) ReplaceNetworkAclAssociationWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ReplaceNetworkAclAssociationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ReplaceNetworkAclAssociationInput
		In3 []request.Option
	}
	lockec2ClientMockReplaceNetworkAclAssociationWithContext.RLock()
	calls = mock.calls.ReplaceNetworkAclAssociationWithContext
	lockec2ClientMockReplaceNetworkAclAssociationWithContext.RUnlock()
	return calls
}

// ReplaceNetworkAclEntry calls ReplaceNetworkAclEntryFunc.
func (mock *ec2ClientMock) ReplaceNetworkAclEntry(in1 *ec2.ReplaceNetworkAclEntryInput) (*ec2.ReplaceNetworkAclEntryOutput, error) {
	if mock.ReplaceNetworkAclEntryFunc == nil {
		panic("ec2ClientMock.ReplaceNetworkAclEntryFunc: method is nil but ec2Client.ReplaceNetworkAclEntry was just called")
	}
	callInfo := struct {
		In1 *ec2.ReplaceNetworkAclEntryInput
	}{
		In1: in1,
	}
	lockec2ClientMockReplaceNetworkAclEntry.Lock()
	mock.calls.ReplaceNetworkAclEntry = append(mock.calls.ReplaceNetworkAclEntry, callInfo)
	lockec2ClientMockReplaceNetworkAclEntry.Unlock()
	return mock.ReplaceNetworkAclEntryFunc(in1)
}

// ReplaceNetworkAclEntryCalls gets all the calls that were made to ReplaceNetworkAclEntry.
// Check the length with:
//     len(mockedec2Client.ReplaceNetworkAclEntryCalls())
func (mock *ec2ClientMock) ReplaceNetworkAclEntryCalls() []struct {
	In1 *ec2.ReplaceNetworkAclEntryInput
} {
	var calls []struct {
		In1 *ec2.ReplaceNetworkAclEntryInput
	}
	lockec2ClientMockReplaceNetworkAclEntry.RLock()
	calls = mock.calls.ReplaceNetworkAclEntry
	lockec2ClientMockReplaceNetworkAclEntry.RUnlock()
	return calls
}

// ReplaceNetworkAclEntryRequest calls ReplaceNetworkAclEntryRequestFunc.
func (mock *ec2ClientMock) ReplaceNetworkAclEntryRequest(in1 *ec2.ReplaceNetworkAclEntryInput) (*request.Request, *ec2.ReplaceNetworkAclEntryOutput) {
	if mock.ReplaceNetworkAclEntryRequestFunc == nil {
		panic("ec2ClientMock.ReplaceNetworkAclEntryRequestFunc: method is nil but ec2Client.ReplaceNetworkAclEntryRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ReplaceNetworkAclEntryInput
	}{
		In1: in1,
	}
	lockec2ClientMockReplaceNetworkAclEntryRequest.Lock()
	mock.calls.ReplaceNetworkAclEntryRequest = append(mock.calls.ReplaceNetworkAclEntryRequest, callInfo)
	lockec2ClientMockReplaceNetworkAclEntryRequest.Unlock()
	return mock.ReplaceNetworkAclEntryRequestFunc(in1)
}

// ReplaceNetworkAclEntryRequestCalls gets all the calls that were made to ReplaceNetworkAclEntryRequest.
// Check the length with:
//     len(mockedec2Client.ReplaceNetworkAclEntryRequestCalls())
func (mock *ec2ClientMock) ReplaceNetworkAclEntryRequestCalls() []struct {
	In1 *ec2.ReplaceNetworkAclEntryInput
} {
	var calls []struct {
		In1 *ec2.ReplaceNetworkAclEntryInput
	}
	lockec2ClientMockReplaceNetworkAclEntryRequest.RLock()
	calls = mock.calls.ReplaceNetworkAclEntryRequest
	lockec2ClientMockReplaceNetworkAclEntryRequest.RUnlock()
	return calls
}

// ReplaceNetworkAclEntryWithContext calls ReplaceNetworkAclEntryWithContextFunc.
func (mock *ec2ClientMock) ReplaceNetworkAclEntryWithContext(in1 context.Context, in2 *ec2.ReplaceNetworkAclEntryInput, in3 ...request.Option) (*ec2.ReplaceNetworkAclEntryOutput, error) {
	if mock.ReplaceNetworkAclEntryWithContextFunc == nil {
		panic("ec2ClientMock.ReplaceNetworkAclEntryWithContextFunc: method is nil but ec2Client.ReplaceNetworkAclEntryWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ReplaceNetworkAclEntryInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockReplaceNetworkAclEntryWithContext.Lock()
	mock.calls.ReplaceNetworkAclEntryWithContext = append(mock.calls.ReplaceNetworkAclEntryWithContext, callInfo)
	lockec2ClientMockReplaceNetworkAclEntryWithContext.Unlock()
	return mock.ReplaceNetworkAclEntryWithContextFunc(in1, in2, in3...)
}

// ReplaceNetworkAclEntryWithContextCalls gets all the calls that were made to ReplaceNetworkAclEntryWithContext.
// Check the length with:
//     len(mockedec2Client.ReplaceNetworkAclEntryWithContextCalls())
func (mock *ec2ClientMock) ReplaceNetworkAclEntryWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ReplaceNetworkAclEntryInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ReplaceNetworkAclEntryInput
		In3 []request.Option
	}
	lockec2ClientMockReplaceNetworkAclEntryWithContext.RLock()
	calls = mock.calls.ReplaceNetworkAclEntryWithContext
	lockec2ClientMockReplaceNetworkAclEntryWithContext.RUnlock()
	return calls
}

// ReplaceRoute calls ReplaceRouteFunc.
func (mock *ec2ClientMock) ReplaceRoute(in1 *ec2.ReplaceRouteInput) (*ec2.ReplaceRouteOutput, error) {
	if mock.ReplaceRouteFunc == nil {
		panic("ec2ClientMock.ReplaceRouteFunc: method is nil but ec2Client.ReplaceRoute was just called")
	}
	callInfo := struct {
		In1 *ec2.ReplaceRouteInput
	}{
		In1: in1,
	}
	lockec2ClientMockReplaceRoute.Lock()
	mock.calls.ReplaceRoute = append(mock.calls.ReplaceRoute, callInfo)
	lockec2ClientMockReplaceRoute.Unlock()
	return mock.ReplaceRouteFunc(in1)
}

// ReplaceRouteCalls gets all the calls that were made to ReplaceRoute.
// Check the length with:
//     len(mockedec2Client.ReplaceRouteCalls())
func (mock *ec2ClientMock) ReplaceRouteCalls() []struct {
	In1 *ec2.ReplaceRouteInput
} {
	var calls []struct {
		In1 *ec2.ReplaceRouteInput
	}
	lockec2ClientMockReplaceRoute.RLock()
	calls = mock.calls.ReplaceRoute
	lockec2ClientMockReplaceRoute.RUnlock()
	return calls
}

// ReplaceRouteRequest calls ReplaceRouteRequestFunc.
func (mock *ec2ClientMock) ReplaceRouteRequest(in1 *ec2.ReplaceRouteInput) (*request.Request, *ec2.ReplaceRouteOutput) {
	if mock.ReplaceRouteRequestFunc == nil {
		panic("ec2ClientMock.ReplaceRouteRequestFunc: method is nil but ec2Client.ReplaceRouteRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ReplaceRouteInput
	}{
		In1: in1,
	}
	lockec2ClientMockReplaceRouteRequest.Lock()
	mock.calls.ReplaceRouteRequest = append(mock.calls.ReplaceRouteRequest, callInfo)
	lockec2ClientMockReplaceRouteRequest.Unlock()
	return mock.ReplaceRouteRequestFunc(in1)
}

// ReplaceRouteRequestCalls gets all the calls that were made to ReplaceRouteRequest.
// Check the length with:
//     len(mockedec2Client.ReplaceRouteRequestCalls())
func (mock *ec2ClientMock) ReplaceRouteRequestCalls() []struct {
	In1 *ec2.ReplaceRouteInput
} {
	var calls []struct {
		In1 *ec2.ReplaceRouteInput
	}
	lockec2ClientMockReplaceRouteRequest.RLock()
	calls = mock.calls.ReplaceRouteRequest
	lockec2ClientMockReplaceRouteRequest.RUnlock()
	return calls
}

// ReplaceRouteTableAssociation calls ReplaceRouteTableAssociationFunc.
func (mock *ec2ClientMock) ReplaceRouteTableAssociation(in1 *ec2.ReplaceRouteTableAssociationInput) (*ec2.ReplaceRouteTableAssociationOutput, error) {
	if mock.ReplaceRouteTableAssociationFunc == nil {
		panic("ec2ClientMock.ReplaceRouteTableAssociationFunc: method is nil but ec2Client.ReplaceRouteTableAssociation was just called")
	}
	callInfo := struct {
		In1 *ec2.ReplaceRouteTableAssociationInput
	}{
		In1: in1,
	}
	lockec2ClientMockReplaceRouteTableAssociation.Lock()
	mock.calls.ReplaceRouteTableAssociation = append(mock.calls.ReplaceRouteTableAssociation, callInfo)
	lockec2ClientMockReplaceRouteTableAssociation.Unlock()
	return mock.ReplaceRouteTableAssociationFunc(in1)
}

// ReplaceRouteTableAssociationCalls gets all the calls that were made to ReplaceRouteTableAssociation.
// Check the length with:
//     len(mockedec2Client.ReplaceRouteTableAssociationCalls())
func (mock *ec2ClientMock) ReplaceRouteTableAssociationCalls() []struct {
	In1 *ec2.ReplaceRouteTableAssociationInput
} {
	var calls []struct {
		In1 *ec2.ReplaceRouteTableAssociationInput
	}
	lockec2ClientMockReplaceRouteTableAssociation.RLock()
	calls = mock.calls.ReplaceRouteTableAssociation
	lockec2ClientMockReplaceRouteTableAssociation.RUnlock()
	return calls
}

// ReplaceRouteTableAssociationRequest calls ReplaceRouteTableAssociationRequestFunc.
func (mock *ec2ClientMock) ReplaceRouteTableAssociationRequest(in1 *ec2.ReplaceRouteTableAssociationInput) (*request.Request, *ec2.ReplaceRouteTableAssociationOutput) {
	if mock.ReplaceRouteTableAssociationRequestFunc == nil {
		panic("ec2ClientMock.ReplaceRouteTableAssociationRequestFunc: method is nil but ec2Client.ReplaceRouteTableAssociationRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ReplaceRouteTableAssociationInput
	}{
		In1: in1,
	}
	lockec2ClientMockReplaceRouteTableAssociationRequest.Lock()
	mock.calls.ReplaceRouteTableAssociationRequest = append(mock.calls.ReplaceRouteTableAssociationRequest, callInfo)
	lockec2ClientMockReplaceRouteTableAssociationRequest.Unlock()
	return mock.ReplaceRouteTableAssociationRequestFunc(in1)
}

// ReplaceRouteTableAssociationRequestCalls gets all the calls that were made to ReplaceRouteTableAssociationRequest.
// Check the length with:
//     len(mockedec2Client.ReplaceRouteTableAssociationRequestCalls())
func (mock *ec2ClientMock) ReplaceRouteTableAssociationRequestCalls() []struct {
	In1 *ec2.ReplaceRouteTableAssociationInput
} {
	var calls []struct {
		In1 *ec2.ReplaceRouteTableAssociationInput
	}
	lockec2ClientMockReplaceRouteTableAssociationRequest.RLock()
	calls = mock.calls.ReplaceRouteTableAssociationRequest
	lockec2ClientMockReplaceRouteTableAssociationRequest.RUnlock()
	return calls
}

// ReplaceRouteTableAssociationWithContext calls ReplaceRouteTableAssociationWithContextFunc.
func (mock *ec2ClientMock) ReplaceRouteTableAssociationWithContext(in1 context.Context, in2 *ec2.ReplaceRouteTableAssociationInput, in3 ...request.Option) (*ec2.ReplaceRouteTableAssociationOutput, error) {
	if mock.ReplaceRouteTableAssociationWithContextFunc == nil {
		panic("ec2ClientMock.ReplaceRouteTableAssociationWithContextFunc: method is nil but ec2Client.ReplaceRouteTableAssociationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ReplaceRouteTableAssociationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockReplaceRouteTableAssociationWithContext.Lock()
	mock.calls.ReplaceRouteTableAssociationWithContext = append(mock.calls.ReplaceRouteTableAssociationWithContext, callInfo)
	lockec2ClientMockReplaceRouteTableAssociationWithContext.Unlock()
	return mock.ReplaceRouteTableAssociationWithContextFunc(in1, in2, in3...)
}

// ReplaceRouteTableAssociationWithContextCalls gets all the calls that were made to ReplaceRouteTableAssociationWithContext.
// Check the length with:
//     len(mockedec2Client.ReplaceRouteTableAssociationWithContextCalls())
func (mock *ec2ClientMock) ReplaceRouteTableAssociationWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ReplaceRouteTableAssociationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ReplaceRouteTableAssociationInput
		In3 []request.Option
	}
	lockec2ClientMockReplaceRouteTableAssociationWithContext.RLock()
	calls = mock.calls.ReplaceRouteTableAssociationWithContext
	lockec2ClientMockReplaceRouteTableAssociationWithContext.RUnlock()
	return calls
}

// ReplaceRouteWithContext calls ReplaceRouteWithContextFunc.
func (mock *ec2ClientMock) ReplaceRouteWithContext(in1 context.Context, in2 *ec2.ReplaceRouteInput, in3 ...request.Option) (*ec2.ReplaceRouteOutput, error) {
	if mock.ReplaceRouteWithContextFunc == nil {
		panic("ec2ClientMock.ReplaceRouteWithContextFunc: method is nil but ec2Client.ReplaceRouteWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ReplaceRouteInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockReplaceRouteWithContext.Lock()
	mock.calls.ReplaceRouteWithContext = append(mock.calls.ReplaceRouteWithContext, callInfo)
	lockec2ClientMockReplaceRouteWithContext.Unlock()
	return mock.ReplaceRouteWithContextFunc(in1, in2, in3...)
}

// ReplaceRouteWithContextCalls gets all the calls that were made to ReplaceRouteWithContext.
// Check the length with:
//     len(mockedec2Client.ReplaceRouteWithContextCalls())
func (mock *ec2ClientMock) ReplaceRouteWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ReplaceRouteInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ReplaceRouteInput
		In3 []request.Option
	}
	lockec2ClientMockReplaceRouteWithContext.RLock()
	calls = mock.calls.ReplaceRouteWithContext
	lockec2ClientMockReplaceRouteWithContext.RUnlock()
	return calls
}

// ReplaceTransitGatewayRoute calls ReplaceTransitGatewayRouteFunc.
func (mock *ec2ClientMock) ReplaceTransitGatewayRoute(in1 *ec2.ReplaceTransitGatewayRouteInput) (*ec2.ReplaceTransitGatewayRouteOutput, error) {
	if mock.ReplaceTransitGatewayRouteFunc == nil {
		panic("ec2ClientMock.ReplaceTransitGatewayRouteFunc: method is nil but ec2Client.ReplaceTransitGatewayRoute was just called")
	}
	callInfo := struct {
		In1 *ec2.ReplaceTransitGatewayRouteInput
	}{
		In1: in1,
	}
	lockec2ClientMockReplaceTransitGatewayRoute.Lock()
	mock.calls.ReplaceTransitGatewayRoute = append(mock.calls.ReplaceTransitGatewayRoute, callInfo)
	lockec2ClientMockReplaceTransitGatewayRoute.Unlock()
	return mock.ReplaceTransitGatewayRouteFunc(in1)
}

// ReplaceTransitGatewayRouteCalls gets all the calls that were made to ReplaceTransitGatewayRoute.
// Check the length with:
//     len(mockedec2Client.ReplaceTransitGatewayRouteCalls())
func (mock *ec2ClientMock) ReplaceTransitGatewayRouteCalls() []struct {
	In1 *ec2.ReplaceTransitGatewayRouteInput
} {
	var calls []struct {
		In1 *ec2.ReplaceTransitGatewayRouteInput
	}
	lockec2ClientMockReplaceTransitGatewayRoute.RLock()
	calls = mock.calls.ReplaceTransitGatewayRoute
	lockec2ClientMockReplaceTransitGatewayRoute.RUnlock()
	return calls
}

// ReplaceTransitGatewayRouteRequest calls ReplaceTransitGatewayRouteRequestFunc.
func (mock *ec2ClientMock) ReplaceTransitGatewayRouteRequest(in1 *ec2.ReplaceTransitGatewayRouteInput) (*request.Request, *ec2.ReplaceTransitGatewayRouteOutput) {
	if mock.ReplaceTransitGatewayRouteRequestFunc == nil {
		panic("ec2ClientMock.ReplaceTransitGatewayRouteRequestFunc: method is nil but ec2Client.ReplaceTransitGatewayRouteRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ReplaceTransitGatewayRouteInput
	}{
		In1: in1,
	}
	lockec2ClientMockReplaceTransitGatewayRouteRequest.Lock()
	mock.calls.ReplaceTransitGatewayRouteRequest = append(mock.calls.ReplaceTransitGatewayRouteRequest, callInfo)
	lockec2ClientMockReplaceTransitGatewayRouteRequest.Unlock()
	return mock.ReplaceTransitGatewayRouteRequestFunc(in1)
}

// ReplaceTransitGatewayRouteRequestCalls gets all the calls that were made to ReplaceTransitGatewayRouteRequest.
// Check the length with:
//     len(mockedec2Client.ReplaceTransitGatewayRouteRequestCalls())
func (mock *ec2ClientMock) ReplaceTransitGatewayRouteRequestCalls() []struct {
	In1 *ec2.ReplaceTransitGatewayRouteInput
} {
	var calls []struct {
		In1 *ec2.ReplaceTransitGatewayRouteInput
	}
	lockec2ClientMockReplaceTransitGatewayRouteRequest.RLock()
	calls = mock.calls.ReplaceTransitGatewayRouteRequest
	lockec2ClientMockReplaceTransitGatewayRouteRequest.RUnlock()
	return calls
}

// ReplaceTransitGatewayRouteWithContext calls ReplaceTransitGatewayRouteWithContextFunc.
func (mock *ec2ClientMock) ReplaceTransitGatewayRouteWithContext(in1 context.Context, in2 *ec2.ReplaceTransitGatewayRouteInput, in3 ...request.Option) (*ec2.ReplaceTransitGatewayRouteOutput, error) {
	if mock.ReplaceTransitGatewayRouteWithContextFunc == nil {
		panic("ec2ClientMock.ReplaceTransitGatewayRouteWithContextFunc: method is nil but ec2Client.ReplaceTransitGatewayRouteWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ReplaceTransitGatewayRouteInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockReplaceTransitGatewayRouteWithContext.Lock()
	mock.calls.ReplaceTransitGatewayRouteWithContext = append(mock.calls.ReplaceTransitGatewayRouteWithContext, callInfo)
	lockec2ClientMockReplaceTransitGatewayRouteWithContext.Unlock()
	return mock.ReplaceTransitGatewayRouteWithContextFunc(in1, in2, in3...)
}

// ReplaceTransitGatewayRouteWithContextCalls gets all the calls that were made to ReplaceTransitGatewayRouteWithContext.
// Check the length with:
//     len(mockedec2Client.ReplaceTransitGatewayRouteWithContextCalls())
func (mock *ec2ClientMock) ReplaceTransitGatewayRouteWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ReplaceTransitGatewayRouteInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ReplaceTransitGatewayRouteInput
		In3 []request.Option
	}
	lockec2ClientMockReplaceTransitGatewayRouteWithContext.RLock()
	calls = mock.calls.ReplaceTransitGatewayRouteWithContext
	lockec2ClientMockReplaceTransitGatewayRouteWithContext.RUnlock()
	return calls
}

// ReportInstanceStatus calls ReportInstanceStatusFunc.
func (mock *ec2ClientMock) ReportInstanceStatus(in1 *ec2.ReportInstanceStatusInput) (*ec2.ReportInstanceStatusOutput, error) {
	if mock.ReportInstanceStatusFunc == nil {
		panic("ec2ClientMock.ReportInstanceStatusFunc: method is nil but ec2Client.ReportInstanceStatus was just called")
	}
	callInfo := struct {
		In1 *ec2.ReportInstanceStatusInput
	}{
		In1: in1,
	}
	lockec2ClientMockReportInstanceStatus.Lock()
	mock.calls.ReportInstanceStatus = append(mock.calls.ReportInstanceStatus, callInfo)
	lockec2ClientMockReportInstanceStatus.Unlock()
	return mock.ReportInstanceStatusFunc(in1)
}

// ReportInstanceStatusCalls gets all the calls that were made to ReportInstanceStatus.
// Check the length with:
//     len(mockedec2Client.ReportInstanceStatusCalls())
func (mock *ec2ClientMock) ReportInstanceStatusCalls() []struct {
	In1 *ec2.ReportInstanceStatusInput
} {
	var calls []struct {
		In1 *ec2.ReportInstanceStatusInput
	}
	lockec2ClientMockReportInstanceStatus.RLock()
	calls = mock.calls.ReportInstanceStatus
	lockec2ClientMockReportInstanceStatus.RUnlock()
	return calls
}

// ReportInstanceStatusRequest calls ReportInstanceStatusRequestFunc.
func (mock *ec2ClientMock) ReportInstanceStatusRequest(in1 *ec2.ReportInstanceStatusInput) (*request.Request, *ec2.ReportInstanceStatusOutput) {
	if mock.ReportInstanceStatusRequestFunc == nil {
		panic("ec2ClientMock.ReportInstanceStatusRequestFunc: method is nil but ec2Client.ReportInstanceStatusRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ReportInstanceStatusInput
	}{
		In1: in1,
	}
	lockec2ClientMockReportInstanceStatusRequest.Lock()
	mock.calls.ReportInstanceStatusRequest = append(mock.calls.ReportInstanceStatusRequest, callInfo)
	lockec2ClientMockReportInstanceStatusRequest.Unlock()
	return mock.ReportInstanceStatusRequestFunc(in1)
}

// ReportInstanceStatusRequestCalls gets all the calls that were made to ReportInstanceStatusRequest.
// Check the length with:
//     len(mockedec2Client.ReportInstanceStatusRequestCalls())
func (mock *ec2ClientMock) ReportInstanceStatusRequestCalls() []struct {
	In1 *ec2.ReportInstanceStatusInput
} {
	var calls []struct {
		In1 *ec2.ReportInstanceStatusInput
	}
	lockec2ClientMockReportInstanceStatusRequest.RLock()
	calls = mock.calls.ReportInstanceStatusRequest
	lockec2ClientMockReportInstanceStatusRequest.RUnlock()
	return calls
}

// ReportInstanceStatusWithContext calls ReportInstanceStatusWithContextFunc.
func (mock *ec2ClientMock) ReportInstanceStatusWithContext(in1 context.Context, in2 *ec2.ReportInstanceStatusInput, in3 ...request.Option) (*ec2.ReportInstanceStatusOutput, error) {
	if mock.ReportInstanceStatusWithContextFunc == nil {
		panic("ec2ClientMock.ReportInstanceStatusWithContextFunc: method is nil but ec2Client.ReportInstanceStatusWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ReportInstanceStatusInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockReportInstanceStatusWithContext.Lock()
	mock.calls.ReportInstanceStatusWithContext = append(mock.calls.ReportInstanceStatusWithContext, callInfo)
	lockec2ClientMockReportInstanceStatusWithContext.Unlock()
	return mock.ReportInstanceStatusWithContextFunc(in1, in2, in3...)
}

// ReportInstanceStatusWithContextCalls gets all the calls that were made to ReportInstanceStatusWithContext.
// Check the length with:
//     len(mockedec2Client.ReportInstanceStatusWithContextCalls())
func (mock *ec2ClientMock) ReportInstanceStatusWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ReportInstanceStatusInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ReportInstanceStatusInput
		In3 []request.Option
	}
	lockec2ClientMockReportInstanceStatusWithContext.RLock()
	calls = mock.calls.ReportInstanceStatusWithContext
	lockec2ClientMockReportInstanceStatusWithContext.RUnlock()
	return calls
}

// RequestSpotFleet calls RequestSpotFleetFunc.
func (mock *ec2ClientMock) RequestSpotFleet(in1 *ec2.RequestSpotFleetInput) (*ec2.RequestSpotFleetOutput, error) {
	if mock.RequestSpotFleetFunc == nil {
		panic("ec2ClientMock.RequestSpotFleetFunc: method is nil but ec2Client.RequestSpotFleet was just called")
	}
	callInfo := struct {
		In1 *ec2.RequestSpotFleetInput
	}{
		In1: in1,
	}
	lockec2ClientMockRequestSpotFleet.Lock()
	mock.calls.RequestSpotFleet = append(mock.calls.RequestSpotFleet, callInfo)
	lockec2ClientMockRequestSpotFleet.Unlock()
	return mock.RequestSpotFleetFunc(in1)
}

// RequestSpotFleetCalls gets all the calls that were made to RequestSpotFleet.
// Check the length with:
//     len(mockedec2Client.RequestSpotFleetCalls())
func (mock *ec2ClientMock) RequestSpotFleetCalls() []struct {
	In1 *ec2.RequestSpotFleetInput
} {
	var calls []struct {
		In1 *ec2.RequestSpotFleetInput
	}
	lockec2ClientMockRequestSpotFleet.RLock()
	calls = mock.calls.RequestSpotFleet
	lockec2ClientMockRequestSpotFleet.RUnlock()
	return calls
}

// RequestSpotFleetRequest calls RequestSpotFleetRequestFunc.
func (mock *ec2ClientMock) RequestSpotFleetRequest(in1 *ec2.RequestSpotFleetInput) (*request.Request, *ec2.RequestSpotFleetOutput) {
	if mock.RequestSpotFleetRequestFunc == nil {
		panic("ec2ClientMock.RequestSpotFleetRequestFunc: method is nil but ec2Client.RequestSpotFleetRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.RequestSpotFleetInput
	}{
		In1: in1,
	}
	lockec2ClientMockRequestSpotFleetRequest.Lock()
	mock.calls.RequestSpotFleetRequest = append(mock.calls.RequestSpotFleetRequest, callInfo)
	lockec2ClientMockRequestSpotFleetRequest.Unlock()
	return mock.RequestSpotFleetRequestFunc(in1)
}

// RequestSpotFleetRequestCalls gets all the calls that were made to RequestSpotFleetRequest.
// Check the length with:
//     len(mockedec2Client.RequestSpotFleetRequestCalls())
func (mock *ec2ClientMock) RequestSpotFleetRequestCalls() []struct {
	In1 *ec2.RequestSpotFleetInput
} {
	var calls []struct {
		In1 *ec2.RequestSpotFleetInput
	}
	lockec2ClientMockRequestSpotFleetRequest.RLock()
	calls = mock.calls.RequestSpotFleetRequest
	lockec2ClientMockRequestSpotFleetRequest.RUnlock()
	return calls
}

// RequestSpotFleetWithContext calls RequestSpotFleetWithContextFunc.
func (mock *ec2ClientMock) RequestSpotFleetWithContext(in1 context.Context, in2 *ec2.RequestSpotFleetInput, in3 ...request.Option) (*ec2.RequestSpotFleetOutput, error) {
	if mock.RequestSpotFleetWithContextFunc == nil {
		panic("ec2ClientMock.RequestSpotFleetWithContextFunc: method is nil but ec2Client.RequestSpotFleetWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.RequestSpotFleetInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockRequestSpotFleetWithContext.Lock()
	mock.calls.RequestSpotFleetWithContext = append(mock.calls.RequestSpotFleetWithContext, callInfo)
	lockec2ClientMockRequestSpotFleetWithContext.Unlock()
	return mock.RequestSpotFleetWithContextFunc(in1, in2, in3...)
}

// RequestSpotFleetWithContextCalls gets all the calls that were made to RequestSpotFleetWithContext.
// Check the length with:
//     len(mockedec2Client.RequestSpotFleetWithContextCalls())
func (mock *ec2ClientMock) RequestSpotFleetWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.RequestSpotFleetInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.RequestSpotFleetInput
		In3 []request.Option
	}
	lockec2ClientMockRequestSpotFleetWithContext.RLock()
	calls = mock.calls.RequestSpotFleetWithContext
	lockec2ClientMockRequestSpotFleetWithContext.RUnlock()
	return calls
}

// RequestSpotInstances calls RequestSpotInstancesFunc.
func (mock *ec2ClientMock) RequestSpotInstances(in1 *ec2.RequestSpotInstancesInput) (*ec2.RequestSpotInstancesOutput, error) {
	if mock.RequestSpotInstancesFunc == nil {
		panic("ec2ClientMock.RequestSpotInstancesFunc: method is nil but ec2Client.RequestSpotInstances was just called")
	}
	callInfo := struct {
		In1 *ec2.RequestSpotInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockRequestSpotInstances.Lock()
	mock.calls.RequestSpotInstances = append(mock.calls.RequestSpotInstances, callInfo)
	lockec2ClientMockRequestSpotInstances.Unlock()
	return mock.RequestSpotInstancesFunc(in1)
}

// RequestSpotInstancesCalls gets all the calls that were made to RequestSpotInstances.
// Check the length with:
//     len(mockedec2Client.RequestSpotInstancesCalls())
func (mock *ec2ClientMock) RequestSpotInstancesCalls() []struct {
	In1 *ec2.RequestSpotInstancesInput
} {
	var calls []struct {
		In1 *ec2.RequestSpotInstancesInput
	}
	lockec2ClientMockRequestSpotInstances.RLock()
	calls = mock.calls.RequestSpotInstances
	lockec2ClientMockRequestSpotInstances.RUnlock()
	return calls
}

// RequestSpotInstancesRequest calls RequestSpotInstancesRequestFunc.
func (mock *ec2ClientMock) RequestSpotInstancesRequest(in1 *ec2.RequestSpotInstancesInput) (*request.Request, *ec2.RequestSpotInstancesOutput) {
	if mock.RequestSpotInstancesRequestFunc == nil {
		panic("ec2ClientMock.RequestSpotInstancesRequestFunc: method is nil but ec2Client.RequestSpotInstancesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.RequestSpotInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockRequestSpotInstancesRequest.Lock()
	mock.calls.RequestSpotInstancesRequest = append(mock.calls.RequestSpotInstancesRequest, callInfo)
	lockec2ClientMockRequestSpotInstancesRequest.Unlock()
	return mock.RequestSpotInstancesRequestFunc(in1)
}

// RequestSpotInstancesRequestCalls gets all the calls that were made to RequestSpotInstancesRequest.
// Check the length with:
//     len(mockedec2Client.RequestSpotInstancesRequestCalls())
func (mock *ec2ClientMock) RequestSpotInstancesRequestCalls() []struct {
	In1 *ec2.RequestSpotInstancesInput
} {
	var calls []struct {
		In1 *ec2.RequestSpotInstancesInput
	}
	lockec2ClientMockRequestSpotInstancesRequest.RLock()
	calls = mock.calls.RequestSpotInstancesRequest
	lockec2ClientMockRequestSpotInstancesRequest.RUnlock()
	return calls
}

// RequestSpotInstancesWithContext calls RequestSpotInstancesWithContextFunc.
func (mock *ec2ClientMock) RequestSpotInstancesWithContext(in1 context.Context, in2 *ec2.RequestSpotInstancesInput, in3 ...request.Option) (*ec2.RequestSpotInstancesOutput, error) {
	if mock.RequestSpotInstancesWithContextFunc == nil {
		panic("ec2ClientMock.RequestSpotInstancesWithContextFunc: method is nil but ec2Client.RequestSpotInstancesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.RequestSpotInstancesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockRequestSpotInstancesWithContext.Lock()
	mock.calls.RequestSpotInstancesWithContext = append(mock.calls.RequestSpotInstancesWithContext, callInfo)
	lockec2ClientMockRequestSpotInstancesWithContext.Unlock()
	return mock.RequestSpotInstancesWithContextFunc(in1, in2, in3...)
}

// RequestSpotInstancesWithContextCalls gets all the calls that were made to RequestSpotInstancesWithContext.
// Check the length with:
//     len(mockedec2Client.RequestSpotInstancesWithContextCalls())
func (mock *ec2ClientMock) RequestSpotInstancesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.RequestSpotInstancesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.RequestSpotInstancesInput
		In3 []request.Option
	}
	lockec2ClientMockRequestSpotInstancesWithContext.RLock()
	calls = mock.calls.RequestSpotInstancesWithContext
	lockec2ClientMockRequestSpotInstancesWithContext.RUnlock()
	return calls
}

// ResetEbsDefaultKmsKeyId calls ResetEbsDefaultKmsKeyIdFunc.
func (mock *ec2ClientMock) ResetEbsDefaultKmsKeyId(in1 *ec2.ResetEbsDefaultKmsKeyIdInput) (*ec2.ResetEbsDefaultKmsKeyIdOutput, error) {
	if mock.ResetEbsDefaultKmsKeyIdFunc == nil {
		panic("ec2ClientMock.ResetEbsDefaultKmsKeyIdFunc: method is nil but ec2Client.ResetEbsDefaultKmsKeyId was just called")
	}
	callInfo := struct {
		In1 *ec2.ResetEbsDefaultKmsKeyIdInput
	}{
		In1: in1,
	}
	lockec2ClientMockResetEbsDefaultKmsKeyId.Lock()
	mock.calls.ResetEbsDefaultKmsKeyId = append(mock.calls.ResetEbsDefaultKmsKeyId, callInfo)
	lockec2ClientMockResetEbsDefaultKmsKeyId.Unlock()
	return mock.ResetEbsDefaultKmsKeyIdFunc(in1)
}

// ResetEbsDefaultKmsKeyIdCalls gets all the calls that were made to ResetEbsDefaultKmsKeyId.
// Check the length with:
//     len(mockedec2Client.ResetEbsDefaultKmsKeyIdCalls())
func (mock *ec2ClientMock) ResetEbsDefaultKmsKeyIdCalls() []struct {
	In1 *ec2.ResetEbsDefaultKmsKeyIdInput
} {
	var calls []struct {
		In1 *ec2.ResetEbsDefaultKmsKeyIdInput
	}
	lockec2ClientMockResetEbsDefaultKmsKeyId.RLock()
	calls = mock.calls.ResetEbsDefaultKmsKeyId
	lockec2ClientMockResetEbsDefaultKmsKeyId.RUnlock()
	return calls
}

// ResetEbsDefaultKmsKeyIdRequest calls ResetEbsDefaultKmsKeyIdRequestFunc.
func (mock *ec2ClientMock) ResetEbsDefaultKmsKeyIdRequest(in1 *ec2.ResetEbsDefaultKmsKeyIdInput) (*request.Request, *ec2.ResetEbsDefaultKmsKeyIdOutput) {
	if mock.ResetEbsDefaultKmsKeyIdRequestFunc == nil {
		panic("ec2ClientMock.ResetEbsDefaultKmsKeyIdRequestFunc: method is nil but ec2Client.ResetEbsDefaultKmsKeyIdRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ResetEbsDefaultKmsKeyIdInput
	}{
		In1: in1,
	}
	lockec2ClientMockResetEbsDefaultKmsKeyIdRequest.Lock()
	mock.calls.ResetEbsDefaultKmsKeyIdRequest = append(mock.calls.ResetEbsDefaultKmsKeyIdRequest, callInfo)
	lockec2ClientMockResetEbsDefaultKmsKeyIdRequest.Unlock()
	return mock.ResetEbsDefaultKmsKeyIdRequestFunc(in1)
}

// ResetEbsDefaultKmsKeyIdRequestCalls gets all the calls that were made to ResetEbsDefaultKmsKeyIdRequest.
// Check the length with:
//     len(mockedec2Client.ResetEbsDefaultKmsKeyIdRequestCalls())
func (mock *ec2ClientMock) ResetEbsDefaultKmsKeyIdRequestCalls() []struct {
	In1 *ec2.ResetEbsDefaultKmsKeyIdInput
} {
	var calls []struct {
		In1 *ec2.ResetEbsDefaultKmsKeyIdInput
	}
	lockec2ClientMockResetEbsDefaultKmsKeyIdRequest.RLock()
	calls = mock.calls.ResetEbsDefaultKmsKeyIdRequest
	lockec2ClientMockResetEbsDefaultKmsKeyIdRequest.RUnlock()
	return calls
}

// ResetEbsDefaultKmsKeyIdWithContext calls ResetEbsDefaultKmsKeyIdWithContextFunc.
func (mock *ec2ClientMock) ResetEbsDefaultKmsKeyIdWithContext(in1 context.Context, in2 *ec2.ResetEbsDefaultKmsKeyIdInput, in3 ...request.Option) (*ec2.ResetEbsDefaultKmsKeyIdOutput, error) {
	if mock.ResetEbsDefaultKmsKeyIdWithContextFunc == nil {
		panic("ec2ClientMock.ResetEbsDefaultKmsKeyIdWithContextFunc: method is nil but ec2Client.ResetEbsDefaultKmsKeyIdWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ResetEbsDefaultKmsKeyIdInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockResetEbsDefaultKmsKeyIdWithContext.Lock()
	mock.calls.ResetEbsDefaultKmsKeyIdWithContext = append(mock.calls.ResetEbsDefaultKmsKeyIdWithContext, callInfo)
	lockec2ClientMockResetEbsDefaultKmsKeyIdWithContext.Unlock()
	return mock.ResetEbsDefaultKmsKeyIdWithContextFunc(in1, in2, in3...)
}

// ResetEbsDefaultKmsKeyIdWithContextCalls gets all the calls that were made to ResetEbsDefaultKmsKeyIdWithContext.
// Check the length with:
//     len(mockedec2Client.ResetEbsDefaultKmsKeyIdWithContextCalls())
func (mock *ec2ClientMock) ResetEbsDefaultKmsKeyIdWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ResetEbsDefaultKmsKeyIdInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ResetEbsDefaultKmsKeyIdInput
		In3 []request.Option
	}
	lockec2ClientMockResetEbsDefaultKmsKeyIdWithContext.RLock()
	calls = mock.calls.ResetEbsDefaultKmsKeyIdWithContext
	lockec2ClientMockResetEbsDefaultKmsKeyIdWithContext.RUnlock()
	return calls
}

// ResetFpgaImageAttribute calls ResetFpgaImageAttributeFunc.
func (mock *ec2ClientMock) ResetFpgaImageAttribute(in1 *ec2.ResetFpgaImageAttributeInput) (*ec2.ResetFpgaImageAttributeOutput, error) {
	if mock.ResetFpgaImageAttributeFunc == nil {
		panic("ec2ClientMock.ResetFpgaImageAttributeFunc: method is nil but ec2Client.ResetFpgaImageAttribute was just called")
	}
	callInfo := struct {
		In1 *ec2.ResetFpgaImageAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockResetFpgaImageAttribute.Lock()
	mock.calls.ResetFpgaImageAttribute = append(mock.calls.ResetFpgaImageAttribute, callInfo)
	lockec2ClientMockResetFpgaImageAttribute.Unlock()
	return mock.ResetFpgaImageAttributeFunc(in1)
}

// ResetFpgaImageAttributeCalls gets all the calls that were made to ResetFpgaImageAttribute.
// Check the length with:
//     len(mockedec2Client.ResetFpgaImageAttributeCalls())
func (mock *ec2ClientMock) ResetFpgaImageAttributeCalls() []struct {
	In1 *ec2.ResetFpgaImageAttributeInput
} {
	var calls []struct {
		In1 *ec2.ResetFpgaImageAttributeInput
	}
	lockec2ClientMockResetFpgaImageAttribute.RLock()
	calls = mock.calls.ResetFpgaImageAttribute
	lockec2ClientMockResetFpgaImageAttribute.RUnlock()
	return calls
}

// ResetFpgaImageAttributeRequest calls ResetFpgaImageAttributeRequestFunc.
func (mock *ec2ClientMock) ResetFpgaImageAttributeRequest(in1 *ec2.ResetFpgaImageAttributeInput) (*request.Request, *ec2.ResetFpgaImageAttributeOutput) {
	if mock.ResetFpgaImageAttributeRequestFunc == nil {
		panic("ec2ClientMock.ResetFpgaImageAttributeRequestFunc: method is nil but ec2Client.ResetFpgaImageAttributeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ResetFpgaImageAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockResetFpgaImageAttributeRequest.Lock()
	mock.calls.ResetFpgaImageAttributeRequest = append(mock.calls.ResetFpgaImageAttributeRequest, callInfo)
	lockec2ClientMockResetFpgaImageAttributeRequest.Unlock()
	return mock.ResetFpgaImageAttributeRequestFunc(in1)
}

// ResetFpgaImageAttributeRequestCalls gets all the calls that were made to ResetFpgaImageAttributeRequest.
// Check the length with:
//     len(mockedec2Client.ResetFpgaImageAttributeRequestCalls())
func (mock *ec2ClientMock) ResetFpgaImageAttributeRequestCalls() []struct {
	In1 *ec2.ResetFpgaImageAttributeInput
} {
	var calls []struct {
		In1 *ec2.ResetFpgaImageAttributeInput
	}
	lockec2ClientMockResetFpgaImageAttributeRequest.RLock()
	calls = mock.calls.ResetFpgaImageAttributeRequest
	lockec2ClientMockResetFpgaImageAttributeRequest.RUnlock()
	return calls
}

// ResetFpgaImageAttributeWithContext calls ResetFpgaImageAttributeWithContextFunc.
func (mock *ec2ClientMock) ResetFpgaImageAttributeWithContext(in1 context.Context, in2 *ec2.ResetFpgaImageAttributeInput, in3 ...request.Option) (*ec2.ResetFpgaImageAttributeOutput, error) {
	if mock.ResetFpgaImageAttributeWithContextFunc == nil {
		panic("ec2ClientMock.ResetFpgaImageAttributeWithContextFunc: method is nil but ec2Client.ResetFpgaImageAttributeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ResetFpgaImageAttributeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockResetFpgaImageAttributeWithContext.Lock()
	mock.calls.ResetFpgaImageAttributeWithContext = append(mock.calls.ResetFpgaImageAttributeWithContext, callInfo)
	lockec2ClientMockResetFpgaImageAttributeWithContext.Unlock()
	return mock.ResetFpgaImageAttributeWithContextFunc(in1, in2, in3...)
}

// ResetFpgaImageAttributeWithContextCalls gets all the calls that were made to ResetFpgaImageAttributeWithContext.
// Check the length with:
//     len(mockedec2Client.ResetFpgaImageAttributeWithContextCalls())
func (mock *ec2ClientMock) ResetFpgaImageAttributeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ResetFpgaImageAttributeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ResetFpgaImageAttributeInput
		In3 []request.Option
	}
	lockec2ClientMockResetFpgaImageAttributeWithContext.RLock()
	calls = mock.calls.ResetFpgaImageAttributeWithContext
	lockec2ClientMockResetFpgaImageAttributeWithContext.RUnlock()
	return calls
}

// ResetImageAttribute calls ResetImageAttributeFunc.
func (mock *ec2ClientMock) ResetImageAttribute(in1 *ec2.ResetImageAttributeInput) (*ec2.ResetImageAttributeOutput, error) {
	if mock.ResetImageAttributeFunc == nil {
		panic("ec2ClientMock.ResetImageAttributeFunc: method is nil but ec2Client.ResetImageAttribute was just called")
	}
	callInfo := struct {
		In1 *ec2.ResetImageAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockResetImageAttribute.Lock()
	mock.calls.ResetImageAttribute = append(mock.calls.ResetImageAttribute, callInfo)
	lockec2ClientMockResetImageAttribute.Unlock()
	return mock.ResetImageAttributeFunc(in1)
}

// ResetImageAttributeCalls gets all the calls that were made to ResetImageAttribute.
// Check the length with:
//     len(mockedec2Client.ResetImageAttributeCalls())
func (mock *ec2ClientMock) ResetImageAttributeCalls() []struct {
	In1 *ec2.ResetImageAttributeInput
} {
	var calls []struct {
		In1 *ec2.ResetImageAttributeInput
	}
	lockec2ClientMockResetImageAttribute.RLock()
	calls = mock.calls.ResetImageAttribute
	lockec2ClientMockResetImageAttribute.RUnlock()
	return calls
}

// ResetImageAttributeRequest calls ResetImageAttributeRequestFunc.
func (mock *ec2ClientMock) ResetImageAttributeRequest(in1 *ec2.ResetImageAttributeInput) (*request.Request, *ec2.ResetImageAttributeOutput) {
	if mock.ResetImageAttributeRequestFunc == nil {
		panic("ec2ClientMock.ResetImageAttributeRequestFunc: method is nil but ec2Client.ResetImageAttributeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ResetImageAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockResetImageAttributeRequest.Lock()
	mock.calls.ResetImageAttributeRequest = append(mock.calls.ResetImageAttributeRequest, callInfo)
	lockec2ClientMockResetImageAttributeRequest.Unlock()
	return mock.ResetImageAttributeRequestFunc(in1)
}

// ResetImageAttributeRequestCalls gets all the calls that were made to ResetImageAttributeRequest.
// Check the length with:
//     len(mockedec2Client.ResetImageAttributeRequestCalls())
func (mock *ec2ClientMock) ResetImageAttributeRequestCalls() []struct {
	In1 *ec2.ResetImageAttributeInput
} {
	var calls []struct {
		In1 *ec2.ResetImageAttributeInput
	}
	lockec2ClientMockResetImageAttributeRequest.RLock()
	calls = mock.calls.ResetImageAttributeRequest
	lockec2ClientMockResetImageAttributeRequest.RUnlock()
	return calls
}

// ResetImageAttributeWithContext calls ResetImageAttributeWithContextFunc.
func (mock *ec2ClientMock) ResetImageAttributeWithContext(in1 context.Context, in2 *ec2.ResetImageAttributeInput, in3 ...request.Option) (*ec2.ResetImageAttributeOutput, error) {
	if mock.ResetImageAttributeWithContextFunc == nil {
		panic("ec2ClientMock.ResetImageAttributeWithContextFunc: method is nil but ec2Client.ResetImageAttributeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ResetImageAttributeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockResetImageAttributeWithContext.Lock()
	mock.calls.ResetImageAttributeWithContext = append(mock.calls.ResetImageAttributeWithContext, callInfo)
	lockec2ClientMockResetImageAttributeWithContext.Unlock()
	return mock.ResetImageAttributeWithContextFunc(in1, in2, in3...)
}

// ResetImageAttributeWithContextCalls gets all the calls that were made to ResetImageAttributeWithContext.
// Check the length with:
//     len(mockedec2Client.ResetImageAttributeWithContextCalls())
func (mock *ec2ClientMock) ResetImageAttributeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ResetImageAttributeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ResetImageAttributeInput
		In3 []request.Option
	}
	lockec2ClientMockResetImageAttributeWithContext.RLock()
	calls = mock.calls.ResetImageAttributeWithContext
	lockec2ClientMockResetImageAttributeWithContext.RUnlock()
	return calls
}

// ResetInstanceAttribute calls ResetInstanceAttributeFunc.
func (mock *ec2ClientMock) ResetInstanceAttribute(in1 *ec2.ResetInstanceAttributeInput) (*ec2.ResetInstanceAttributeOutput, error) {
	if mock.ResetInstanceAttributeFunc == nil {
		panic("ec2ClientMock.ResetInstanceAttributeFunc: method is nil but ec2Client.ResetInstanceAttribute was just called")
	}
	callInfo := struct {
		In1 *ec2.ResetInstanceAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockResetInstanceAttribute.Lock()
	mock.calls.ResetInstanceAttribute = append(mock.calls.ResetInstanceAttribute, callInfo)
	lockec2ClientMockResetInstanceAttribute.Unlock()
	return mock.ResetInstanceAttributeFunc(in1)
}

// ResetInstanceAttributeCalls gets all the calls that were made to ResetInstanceAttribute.
// Check the length with:
//     len(mockedec2Client.ResetInstanceAttributeCalls())
func (mock *ec2ClientMock) ResetInstanceAttributeCalls() []struct {
	In1 *ec2.ResetInstanceAttributeInput
} {
	var calls []struct {
		In1 *ec2.ResetInstanceAttributeInput
	}
	lockec2ClientMockResetInstanceAttribute.RLock()
	calls = mock.calls.ResetInstanceAttribute
	lockec2ClientMockResetInstanceAttribute.RUnlock()
	return calls
}

// ResetInstanceAttributeRequest calls ResetInstanceAttributeRequestFunc.
func (mock *ec2ClientMock) ResetInstanceAttributeRequest(in1 *ec2.ResetInstanceAttributeInput) (*request.Request, *ec2.ResetInstanceAttributeOutput) {
	if mock.ResetInstanceAttributeRequestFunc == nil {
		panic("ec2ClientMock.ResetInstanceAttributeRequestFunc: method is nil but ec2Client.ResetInstanceAttributeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ResetInstanceAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockResetInstanceAttributeRequest.Lock()
	mock.calls.ResetInstanceAttributeRequest = append(mock.calls.ResetInstanceAttributeRequest, callInfo)
	lockec2ClientMockResetInstanceAttributeRequest.Unlock()
	return mock.ResetInstanceAttributeRequestFunc(in1)
}

// ResetInstanceAttributeRequestCalls gets all the calls that were made to ResetInstanceAttributeRequest.
// Check the length with:
//     len(mockedec2Client.ResetInstanceAttributeRequestCalls())
func (mock *ec2ClientMock) ResetInstanceAttributeRequestCalls() []struct {
	In1 *ec2.ResetInstanceAttributeInput
} {
	var calls []struct {
		In1 *ec2.ResetInstanceAttributeInput
	}
	lockec2ClientMockResetInstanceAttributeRequest.RLock()
	calls = mock.calls.ResetInstanceAttributeRequest
	lockec2ClientMockResetInstanceAttributeRequest.RUnlock()
	return calls
}

// ResetInstanceAttributeWithContext calls ResetInstanceAttributeWithContextFunc.
func (mock *ec2ClientMock) ResetInstanceAttributeWithContext(in1 context.Context, in2 *ec2.ResetInstanceAttributeInput, in3 ...request.Option) (*ec2.ResetInstanceAttributeOutput, error) {
	if mock.ResetInstanceAttributeWithContextFunc == nil {
		panic("ec2ClientMock.ResetInstanceAttributeWithContextFunc: method is nil but ec2Client.ResetInstanceAttributeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ResetInstanceAttributeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockResetInstanceAttributeWithContext.Lock()
	mock.calls.ResetInstanceAttributeWithContext = append(mock.calls.ResetInstanceAttributeWithContext, callInfo)
	lockec2ClientMockResetInstanceAttributeWithContext.Unlock()
	return mock.ResetInstanceAttributeWithContextFunc(in1, in2, in3...)
}

// ResetInstanceAttributeWithContextCalls gets all the calls that were made to ResetInstanceAttributeWithContext.
// Check the length with:
//     len(mockedec2Client.ResetInstanceAttributeWithContextCalls())
func (mock *ec2ClientMock) ResetInstanceAttributeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ResetInstanceAttributeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ResetInstanceAttributeInput
		In3 []request.Option
	}
	lockec2ClientMockResetInstanceAttributeWithContext.RLock()
	calls = mock.calls.ResetInstanceAttributeWithContext
	lockec2ClientMockResetInstanceAttributeWithContext.RUnlock()
	return calls
}

// ResetNetworkInterfaceAttribute calls ResetNetworkInterfaceAttributeFunc.
func (mock *ec2ClientMock) ResetNetworkInterfaceAttribute(in1 *ec2.ResetNetworkInterfaceAttributeInput) (*ec2.ResetNetworkInterfaceAttributeOutput, error) {
	if mock.ResetNetworkInterfaceAttributeFunc == nil {
		panic("ec2ClientMock.ResetNetworkInterfaceAttributeFunc: method is nil but ec2Client.ResetNetworkInterfaceAttribute was just called")
	}
	callInfo := struct {
		In1 *ec2.ResetNetworkInterfaceAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockResetNetworkInterfaceAttribute.Lock()
	mock.calls.ResetNetworkInterfaceAttribute = append(mock.calls.ResetNetworkInterfaceAttribute, callInfo)
	lockec2ClientMockResetNetworkInterfaceAttribute.Unlock()
	return mock.ResetNetworkInterfaceAttributeFunc(in1)
}

// ResetNetworkInterfaceAttributeCalls gets all the calls that were made to ResetNetworkInterfaceAttribute.
// Check the length with:
//     len(mockedec2Client.ResetNetworkInterfaceAttributeCalls())
func (mock *ec2ClientMock) ResetNetworkInterfaceAttributeCalls() []struct {
	In1 *ec2.ResetNetworkInterfaceAttributeInput
} {
	var calls []struct {
		In1 *ec2.ResetNetworkInterfaceAttributeInput
	}
	lockec2ClientMockResetNetworkInterfaceAttribute.RLock()
	calls = mock.calls.ResetNetworkInterfaceAttribute
	lockec2ClientMockResetNetworkInterfaceAttribute.RUnlock()
	return calls
}

// ResetNetworkInterfaceAttributeRequest calls ResetNetworkInterfaceAttributeRequestFunc.
func (mock *ec2ClientMock) ResetNetworkInterfaceAttributeRequest(in1 *ec2.ResetNetworkInterfaceAttributeInput) (*request.Request, *ec2.ResetNetworkInterfaceAttributeOutput) {
	if mock.ResetNetworkInterfaceAttributeRequestFunc == nil {
		panic("ec2ClientMock.ResetNetworkInterfaceAttributeRequestFunc: method is nil but ec2Client.ResetNetworkInterfaceAttributeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ResetNetworkInterfaceAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockResetNetworkInterfaceAttributeRequest.Lock()
	mock.calls.ResetNetworkInterfaceAttributeRequest = append(mock.calls.ResetNetworkInterfaceAttributeRequest, callInfo)
	lockec2ClientMockResetNetworkInterfaceAttributeRequest.Unlock()
	return mock.ResetNetworkInterfaceAttributeRequestFunc(in1)
}

// ResetNetworkInterfaceAttributeRequestCalls gets all the calls that were made to ResetNetworkInterfaceAttributeRequest.
// Check the length with:
//     len(mockedec2Client.ResetNetworkInterfaceAttributeRequestCalls())
func (mock *ec2ClientMock) ResetNetworkInterfaceAttributeRequestCalls() []struct {
	In1 *ec2.ResetNetworkInterfaceAttributeInput
} {
	var calls []struct {
		In1 *ec2.ResetNetworkInterfaceAttributeInput
	}
	lockec2ClientMockResetNetworkInterfaceAttributeRequest.RLock()
	calls = mock.calls.ResetNetworkInterfaceAttributeRequest
	lockec2ClientMockResetNetworkInterfaceAttributeRequest.RUnlock()
	return calls
}

// ResetNetworkInterfaceAttributeWithContext calls ResetNetworkInterfaceAttributeWithContextFunc.
func (mock *ec2ClientMock) ResetNetworkInterfaceAttributeWithContext(in1 context.Context, in2 *ec2.ResetNetworkInterfaceAttributeInput, in3 ...request.Option) (*ec2.ResetNetworkInterfaceAttributeOutput, error) {
	if mock.ResetNetworkInterfaceAttributeWithContextFunc == nil {
		panic("ec2ClientMock.ResetNetworkInterfaceAttributeWithContextFunc: method is nil but ec2Client.ResetNetworkInterfaceAttributeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ResetNetworkInterfaceAttributeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockResetNetworkInterfaceAttributeWithContext.Lock()
	mock.calls.ResetNetworkInterfaceAttributeWithContext = append(mock.calls.ResetNetworkInterfaceAttributeWithContext, callInfo)
	lockec2ClientMockResetNetworkInterfaceAttributeWithContext.Unlock()
	return mock.ResetNetworkInterfaceAttributeWithContextFunc(in1, in2, in3...)
}

// ResetNetworkInterfaceAttributeWithContextCalls gets all the calls that were made to ResetNetworkInterfaceAttributeWithContext.
// Check the length with:
//     len(mockedec2Client.ResetNetworkInterfaceAttributeWithContextCalls())
func (mock *ec2ClientMock) ResetNetworkInterfaceAttributeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ResetNetworkInterfaceAttributeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ResetNetworkInterfaceAttributeInput
		In3 []request.Option
	}
	lockec2ClientMockResetNetworkInterfaceAttributeWithContext.RLock()
	calls = mock.calls.ResetNetworkInterfaceAttributeWithContext
	lockec2ClientMockResetNetworkInterfaceAttributeWithContext.RUnlock()
	return calls
}

// ResetSnapshotAttribute calls ResetSnapshotAttributeFunc.
func (mock *ec2ClientMock) ResetSnapshotAttribute(in1 *ec2.ResetSnapshotAttributeInput) (*ec2.ResetSnapshotAttributeOutput, error) {
	if mock.ResetSnapshotAttributeFunc == nil {
		panic("ec2ClientMock.ResetSnapshotAttributeFunc: method is nil but ec2Client.ResetSnapshotAttribute was just called")
	}
	callInfo := struct {
		In1 *ec2.ResetSnapshotAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockResetSnapshotAttribute.Lock()
	mock.calls.ResetSnapshotAttribute = append(mock.calls.ResetSnapshotAttribute, callInfo)
	lockec2ClientMockResetSnapshotAttribute.Unlock()
	return mock.ResetSnapshotAttributeFunc(in1)
}

// ResetSnapshotAttributeCalls gets all the calls that were made to ResetSnapshotAttribute.
// Check the length with:
//     len(mockedec2Client.ResetSnapshotAttributeCalls())
func (mock *ec2ClientMock) ResetSnapshotAttributeCalls() []struct {
	In1 *ec2.ResetSnapshotAttributeInput
} {
	var calls []struct {
		In1 *ec2.ResetSnapshotAttributeInput
	}
	lockec2ClientMockResetSnapshotAttribute.RLock()
	calls = mock.calls.ResetSnapshotAttribute
	lockec2ClientMockResetSnapshotAttribute.RUnlock()
	return calls
}

// ResetSnapshotAttributeRequest calls ResetSnapshotAttributeRequestFunc.
func (mock *ec2ClientMock) ResetSnapshotAttributeRequest(in1 *ec2.ResetSnapshotAttributeInput) (*request.Request, *ec2.ResetSnapshotAttributeOutput) {
	if mock.ResetSnapshotAttributeRequestFunc == nil {
		panic("ec2ClientMock.ResetSnapshotAttributeRequestFunc: method is nil but ec2Client.ResetSnapshotAttributeRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.ResetSnapshotAttributeInput
	}{
		In1: in1,
	}
	lockec2ClientMockResetSnapshotAttributeRequest.Lock()
	mock.calls.ResetSnapshotAttributeRequest = append(mock.calls.ResetSnapshotAttributeRequest, callInfo)
	lockec2ClientMockResetSnapshotAttributeRequest.Unlock()
	return mock.ResetSnapshotAttributeRequestFunc(in1)
}

// ResetSnapshotAttributeRequestCalls gets all the calls that were made to ResetSnapshotAttributeRequest.
// Check the length with:
//     len(mockedec2Client.ResetSnapshotAttributeRequestCalls())
func (mock *ec2ClientMock) ResetSnapshotAttributeRequestCalls() []struct {
	In1 *ec2.ResetSnapshotAttributeInput
} {
	var calls []struct {
		In1 *ec2.ResetSnapshotAttributeInput
	}
	lockec2ClientMockResetSnapshotAttributeRequest.RLock()
	calls = mock.calls.ResetSnapshotAttributeRequest
	lockec2ClientMockResetSnapshotAttributeRequest.RUnlock()
	return calls
}

// ResetSnapshotAttributeWithContext calls ResetSnapshotAttributeWithContextFunc.
func (mock *ec2ClientMock) ResetSnapshotAttributeWithContext(in1 context.Context, in2 *ec2.ResetSnapshotAttributeInput, in3 ...request.Option) (*ec2.ResetSnapshotAttributeOutput, error) {
	if mock.ResetSnapshotAttributeWithContextFunc == nil {
		panic("ec2ClientMock.ResetSnapshotAttributeWithContextFunc: method is nil but ec2Client.ResetSnapshotAttributeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.ResetSnapshotAttributeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockResetSnapshotAttributeWithContext.Lock()
	mock.calls.ResetSnapshotAttributeWithContext = append(mock.calls.ResetSnapshotAttributeWithContext, callInfo)
	lockec2ClientMockResetSnapshotAttributeWithContext.Unlock()
	return mock.ResetSnapshotAttributeWithContextFunc(in1, in2, in3...)
}

// ResetSnapshotAttributeWithContextCalls gets all the calls that were made to ResetSnapshotAttributeWithContext.
// Check the length with:
//     len(mockedec2Client.ResetSnapshotAttributeWithContextCalls())
func (mock *ec2ClientMock) ResetSnapshotAttributeWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.ResetSnapshotAttributeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.ResetSnapshotAttributeInput
		In3 []request.Option
	}
	lockec2ClientMockResetSnapshotAttributeWithContext.RLock()
	calls = mock.calls.ResetSnapshotAttributeWithContext
	lockec2ClientMockResetSnapshotAttributeWithContext.RUnlock()
	return calls
}

// RestoreAddressToClassic calls RestoreAddressToClassicFunc.
func (mock *ec2ClientMock) RestoreAddressToClassic(in1 *ec2.RestoreAddressToClassicInput) (*ec2.RestoreAddressToClassicOutput, error) {
	if mock.RestoreAddressToClassicFunc == nil {
		panic("ec2ClientMock.RestoreAddressToClassicFunc: method is nil but ec2Client.RestoreAddressToClassic was just called")
	}
	callInfo := struct {
		In1 *ec2.RestoreAddressToClassicInput
	}{
		In1: in1,
	}
	lockec2ClientMockRestoreAddressToClassic.Lock()
	mock.calls.RestoreAddressToClassic = append(mock.calls.RestoreAddressToClassic, callInfo)
	lockec2ClientMockRestoreAddressToClassic.Unlock()
	return mock.RestoreAddressToClassicFunc(in1)
}

// RestoreAddressToClassicCalls gets all the calls that were made to RestoreAddressToClassic.
// Check the length with:
//     len(mockedec2Client.RestoreAddressToClassicCalls())
func (mock *ec2ClientMock) RestoreAddressToClassicCalls() []struct {
	In1 *ec2.RestoreAddressToClassicInput
} {
	var calls []struct {
		In1 *ec2.RestoreAddressToClassicInput
	}
	lockec2ClientMockRestoreAddressToClassic.RLock()
	calls = mock.calls.RestoreAddressToClassic
	lockec2ClientMockRestoreAddressToClassic.RUnlock()
	return calls
}

// RestoreAddressToClassicRequest calls RestoreAddressToClassicRequestFunc.
func (mock *ec2ClientMock) RestoreAddressToClassicRequest(in1 *ec2.RestoreAddressToClassicInput) (*request.Request, *ec2.RestoreAddressToClassicOutput) {
	if mock.RestoreAddressToClassicRequestFunc == nil {
		panic("ec2ClientMock.RestoreAddressToClassicRequestFunc: method is nil but ec2Client.RestoreAddressToClassicRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.RestoreAddressToClassicInput
	}{
		In1: in1,
	}
	lockec2ClientMockRestoreAddressToClassicRequest.Lock()
	mock.calls.RestoreAddressToClassicRequest = append(mock.calls.RestoreAddressToClassicRequest, callInfo)
	lockec2ClientMockRestoreAddressToClassicRequest.Unlock()
	return mock.RestoreAddressToClassicRequestFunc(in1)
}

// RestoreAddressToClassicRequestCalls gets all the calls that were made to RestoreAddressToClassicRequest.
// Check the length with:
//     len(mockedec2Client.RestoreAddressToClassicRequestCalls())
func (mock *ec2ClientMock) RestoreAddressToClassicRequestCalls() []struct {
	In1 *ec2.RestoreAddressToClassicInput
} {
	var calls []struct {
		In1 *ec2.RestoreAddressToClassicInput
	}
	lockec2ClientMockRestoreAddressToClassicRequest.RLock()
	calls = mock.calls.RestoreAddressToClassicRequest
	lockec2ClientMockRestoreAddressToClassicRequest.RUnlock()
	return calls
}

// RestoreAddressToClassicWithContext calls RestoreAddressToClassicWithContextFunc.
func (mock *ec2ClientMock) RestoreAddressToClassicWithContext(in1 context.Context, in2 *ec2.RestoreAddressToClassicInput, in3 ...request.Option) (*ec2.RestoreAddressToClassicOutput, error) {
	if mock.RestoreAddressToClassicWithContextFunc == nil {
		panic("ec2ClientMock.RestoreAddressToClassicWithContextFunc: method is nil but ec2Client.RestoreAddressToClassicWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.RestoreAddressToClassicInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockRestoreAddressToClassicWithContext.Lock()
	mock.calls.RestoreAddressToClassicWithContext = append(mock.calls.RestoreAddressToClassicWithContext, callInfo)
	lockec2ClientMockRestoreAddressToClassicWithContext.Unlock()
	return mock.RestoreAddressToClassicWithContextFunc(in1, in2, in3...)
}

// RestoreAddressToClassicWithContextCalls gets all the calls that were made to RestoreAddressToClassicWithContext.
// Check the length with:
//     len(mockedec2Client.RestoreAddressToClassicWithContextCalls())
func (mock *ec2ClientMock) RestoreAddressToClassicWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.RestoreAddressToClassicInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.RestoreAddressToClassicInput
		In3 []request.Option
	}
	lockec2ClientMockRestoreAddressToClassicWithContext.RLock()
	calls = mock.calls.RestoreAddressToClassicWithContext
	lockec2ClientMockRestoreAddressToClassicWithContext.RUnlock()
	return calls
}

// RevokeClientVpnIngress calls RevokeClientVpnIngressFunc.
func (mock *ec2ClientMock) RevokeClientVpnIngress(in1 *ec2.RevokeClientVpnIngressInput) (*ec2.RevokeClientVpnIngressOutput, error) {
	if mock.RevokeClientVpnIngressFunc == nil {
		panic("ec2ClientMock.RevokeClientVpnIngressFunc: method is nil but ec2Client.RevokeClientVpnIngress was just called")
	}
	callInfo := struct {
		In1 *ec2.RevokeClientVpnIngressInput
	}{
		In1: in1,
	}
	lockec2ClientMockRevokeClientVpnIngress.Lock()
	mock.calls.RevokeClientVpnIngress = append(mock.calls.RevokeClientVpnIngress, callInfo)
	lockec2ClientMockRevokeClientVpnIngress.Unlock()
	return mock.RevokeClientVpnIngressFunc(in1)
}

// RevokeClientVpnIngressCalls gets all the calls that were made to RevokeClientVpnIngress.
// Check the length with:
//     len(mockedec2Client.RevokeClientVpnIngressCalls())
func (mock *ec2ClientMock) RevokeClientVpnIngressCalls() []struct {
	In1 *ec2.RevokeClientVpnIngressInput
} {
	var calls []struct {
		In1 *ec2.RevokeClientVpnIngressInput
	}
	lockec2ClientMockRevokeClientVpnIngress.RLock()
	calls = mock.calls.RevokeClientVpnIngress
	lockec2ClientMockRevokeClientVpnIngress.RUnlock()
	return calls
}

// RevokeClientVpnIngressRequest calls RevokeClientVpnIngressRequestFunc.
func (mock *ec2ClientMock) RevokeClientVpnIngressRequest(in1 *ec2.RevokeClientVpnIngressInput) (*request.Request, *ec2.RevokeClientVpnIngressOutput) {
	if mock.RevokeClientVpnIngressRequestFunc == nil {
		panic("ec2ClientMock.RevokeClientVpnIngressRequestFunc: method is nil but ec2Client.RevokeClientVpnIngressRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.RevokeClientVpnIngressInput
	}{
		In1: in1,
	}
	lockec2ClientMockRevokeClientVpnIngressRequest.Lock()
	mock.calls.RevokeClientVpnIngressRequest = append(mock.calls.RevokeClientVpnIngressRequest, callInfo)
	lockec2ClientMockRevokeClientVpnIngressRequest.Unlock()
	return mock.RevokeClientVpnIngressRequestFunc(in1)
}

// RevokeClientVpnIngressRequestCalls gets all the calls that were made to RevokeClientVpnIngressRequest.
// Check the length with:
//     len(mockedec2Client.RevokeClientVpnIngressRequestCalls())
func (mock *ec2ClientMock) RevokeClientVpnIngressRequestCalls() []struct {
	In1 *ec2.RevokeClientVpnIngressInput
} {
	var calls []struct {
		In1 *ec2.RevokeClientVpnIngressInput
	}
	lockec2ClientMockRevokeClientVpnIngressRequest.RLock()
	calls = mock.calls.RevokeClientVpnIngressRequest
	lockec2ClientMockRevokeClientVpnIngressRequest.RUnlock()
	return calls
}

// RevokeClientVpnIngressWithContext calls RevokeClientVpnIngressWithContextFunc.
func (mock *ec2ClientMock) RevokeClientVpnIngressWithContext(in1 context.Context, in2 *ec2.RevokeClientVpnIngressInput, in3 ...request.Option) (*ec2.RevokeClientVpnIngressOutput, error) {
	if mock.RevokeClientVpnIngressWithContextFunc == nil {
		panic("ec2ClientMock.RevokeClientVpnIngressWithContextFunc: method is nil but ec2Client.RevokeClientVpnIngressWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.RevokeClientVpnIngressInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockRevokeClientVpnIngressWithContext.Lock()
	mock.calls.RevokeClientVpnIngressWithContext = append(mock.calls.RevokeClientVpnIngressWithContext, callInfo)
	lockec2ClientMockRevokeClientVpnIngressWithContext.Unlock()
	return mock.RevokeClientVpnIngressWithContextFunc(in1, in2, in3...)
}

// RevokeClientVpnIngressWithContextCalls gets all the calls that were made to RevokeClientVpnIngressWithContext.
// Check the length with:
//     len(mockedec2Client.RevokeClientVpnIngressWithContextCalls())
func (mock *ec2ClientMock) RevokeClientVpnIngressWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.RevokeClientVpnIngressInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.RevokeClientVpnIngressInput
		In3 []request.Option
	}
	lockec2ClientMockRevokeClientVpnIngressWithContext.RLock()
	calls = mock.calls.RevokeClientVpnIngressWithContext
	lockec2ClientMockRevokeClientVpnIngressWithContext.RUnlock()
	return calls
}

// RevokeSecurityGroupEgress calls RevokeSecurityGroupEgressFunc.
func (mock *ec2ClientMock) RevokeSecurityGroupEgress(in1 *ec2.RevokeSecurityGroupEgressInput) (*ec2.RevokeSecurityGroupEgressOutput, error) {
	if mock.RevokeSecurityGroupEgressFunc == nil {
		panic("ec2ClientMock.RevokeSecurityGroupEgressFunc: method is nil but ec2Client.RevokeSecurityGroupEgress was just called")
	}
	callInfo := struct {
		In1 *ec2.RevokeSecurityGroupEgressInput
	}{
		In1: in1,
	}
	lockec2ClientMockRevokeSecurityGroupEgress.Lock()
	mock.calls.RevokeSecurityGroupEgress = append(mock.calls.RevokeSecurityGroupEgress, callInfo)
	lockec2ClientMockRevokeSecurityGroupEgress.Unlock()
	return mock.RevokeSecurityGroupEgressFunc(in1)
}

// RevokeSecurityGroupEgressCalls gets all the calls that were made to RevokeSecurityGroupEgress.
// Check the length with:
//     len(mockedec2Client.RevokeSecurityGroupEgressCalls())
func (mock *ec2ClientMock) RevokeSecurityGroupEgressCalls() []struct {
	In1 *ec2.RevokeSecurityGroupEgressInput
} {
	var calls []struct {
		In1 *ec2.RevokeSecurityGroupEgressInput
	}
	lockec2ClientMockRevokeSecurityGroupEgress.RLock()
	calls = mock.calls.RevokeSecurityGroupEgress
	lockec2ClientMockRevokeSecurityGroupEgress.RUnlock()
	return calls
}

// RevokeSecurityGroupEgressRequest calls RevokeSecurityGroupEgressRequestFunc.
func (mock *ec2ClientMock) RevokeSecurityGroupEgressRequest(in1 *ec2.RevokeSecurityGroupEgressInput) (*request.Request, *ec2.RevokeSecurityGroupEgressOutput) {
	if mock.RevokeSecurityGroupEgressRequestFunc == nil {
		panic("ec2ClientMock.RevokeSecurityGroupEgressRequestFunc: method is nil but ec2Client.RevokeSecurityGroupEgressRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.RevokeSecurityGroupEgressInput
	}{
		In1: in1,
	}
	lockec2ClientMockRevokeSecurityGroupEgressRequest.Lock()
	mock.calls.RevokeSecurityGroupEgressRequest = append(mock.calls.RevokeSecurityGroupEgressRequest, callInfo)
	lockec2ClientMockRevokeSecurityGroupEgressRequest.Unlock()
	return mock.RevokeSecurityGroupEgressRequestFunc(in1)
}

// RevokeSecurityGroupEgressRequestCalls gets all the calls that were made to RevokeSecurityGroupEgressRequest.
// Check the length with:
//     len(mockedec2Client.RevokeSecurityGroupEgressRequestCalls())
func (mock *ec2ClientMock) RevokeSecurityGroupEgressRequestCalls() []struct {
	In1 *ec2.RevokeSecurityGroupEgressInput
} {
	var calls []struct {
		In1 *ec2.RevokeSecurityGroupEgressInput
	}
	lockec2ClientMockRevokeSecurityGroupEgressRequest.RLock()
	calls = mock.calls.RevokeSecurityGroupEgressRequest
	lockec2ClientMockRevokeSecurityGroupEgressRequest.RUnlock()
	return calls
}

// RevokeSecurityGroupEgressWithContext calls RevokeSecurityGroupEgressWithContextFunc.
func (mock *ec2ClientMock) RevokeSecurityGroupEgressWithContext(in1 context.Context, in2 *ec2.RevokeSecurityGroupEgressInput, in3 ...request.Option) (*ec2.RevokeSecurityGroupEgressOutput, error) {
	if mock.RevokeSecurityGroupEgressWithContextFunc == nil {
		panic("ec2ClientMock.RevokeSecurityGroupEgressWithContextFunc: method is nil but ec2Client.RevokeSecurityGroupEgressWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.RevokeSecurityGroupEgressInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockRevokeSecurityGroupEgressWithContext.Lock()
	mock.calls.RevokeSecurityGroupEgressWithContext = append(mock.calls.RevokeSecurityGroupEgressWithContext, callInfo)
	lockec2ClientMockRevokeSecurityGroupEgressWithContext.Unlock()
	return mock.RevokeSecurityGroupEgressWithContextFunc(in1, in2, in3...)
}

// RevokeSecurityGroupEgressWithContextCalls gets all the calls that were made to RevokeSecurityGroupEgressWithContext.
// Check the length with:
//     len(mockedec2Client.RevokeSecurityGroupEgressWithContextCalls())
func (mock *ec2ClientMock) RevokeSecurityGroupEgressWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.RevokeSecurityGroupEgressInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.RevokeSecurityGroupEgressInput
		In3 []request.Option
	}
	lockec2ClientMockRevokeSecurityGroupEgressWithContext.RLock()
	calls = mock.calls.RevokeSecurityGroupEgressWithContext
	lockec2ClientMockRevokeSecurityGroupEgressWithContext.RUnlock()
	return calls
}

// RevokeSecurityGroupIngress calls RevokeSecurityGroupIngressFunc.
func (mock *ec2ClientMock) RevokeSecurityGroupIngress(in1 *ec2.RevokeSecurityGroupIngressInput) (*ec2.RevokeSecurityGroupIngressOutput, error) {
	if mock.RevokeSecurityGroupIngressFunc == nil {
		panic("ec2ClientMock.RevokeSecurityGroupIngressFunc: method is nil but ec2Client.RevokeSecurityGroupIngress was just called")
	}
	callInfo := struct {
		In1 *ec2.RevokeSecurityGroupIngressInput
	}{
		In1: in1,
	}
	lockec2ClientMockRevokeSecurityGroupIngress.Lock()
	mock.calls.RevokeSecurityGroupIngress = append(mock.calls.RevokeSecurityGroupIngress, callInfo)
	lockec2ClientMockRevokeSecurityGroupIngress.Unlock()
	return mock.RevokeSecurityGroupIngressFunc(in1)
}

// RevokeSecurityGroupIngressCalls gets all the calls that were made to RevokeSecurityGroupIngress.
// Check the length with:
//     len(mockedec2Client.RevokeSecurityGroupIngressCalls())
func (mock *ec2ClientMock) RevokeSecurityGroupIngressCalls() []struct {
	In1 *ec2.RevokeSecurityGroupIngressInput
} {
	var calls []struct {
		In1 *ec2.RevokeSecurityGroupIngressInput
	}
	lockec2ClientMockRevokeSecurityGroupIngress.RLock()
	calls = mock.calls.RevokeSecurityGroupIngress
	lockec2ClientMockRevokeSecurityGroupIngress.RUnlock()
	return calls
}

// RevokeSecurityGroupIngressRequest calls RevokeSecurityGroupIngressRequestFunc.
func (mock *ec2ClientMock) RevokeSecurityGroupIngressRequest(in1 *ec2.RevokeSecurityGroupIngressInput) (*request.Request, *ec2.RevokeSecurityGroupIngressOutput) {
	if mock.RevokeSecurityGroupIngressRequestFunc == nil {
		panic("ec2ClientMock.RevokeSecurityGroupIngressRequestFunc: method is nil but ec2Client.RevokeSecurityGroupIngressRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.RevokeSecurityGroupIngressInput
	}{
		In1: in1,
	}
	lockec2ClientMockRevokeSecurityGroupIngressRequest.Lock()
	mock.calls.RevokeSecurityGroupIngressRequest = append(mock.calls.RevokeSecurityGroupIngressRequest, callInfo)
	lockec2ClientMockRevokeSecurityGroupIngressRequest.Unlock()
	return mock.RevokeSecurityGroupIngressRequestFunc(in1)
}

// RevokeSecurityGroupIngressRequestCalls gets all the calls that were made to RevokeSecurityGroupIngressRequest.
// Check the length with:
//     len(mockedec2Client.RevokeSecurityGroupIngressRequestCalls())
func (mock *ec2ClientMock) RevokeSecurityGroupIngressRequestCalls() []struct {
	In1 *ec2.RevokeSecurityGroupIngressInput
} {
	var calls []struct {
		In1 *ec2.RevokeSecurityGroupIngressInput
	}
	lockec2ClientMockRevokeSecurityGroupIngressRequest.RLock()
	calls = mock.calls.RevokeSecurityGroupIngressRequest
	lockec2ClientMockRevokeSecurityGroupIngressRequest.RUnlock()
	return calls
}

// RevokeSecurityGroupIngressWithContext calls RevokeSecurityGroupIngressWithContextFunc.
func (mock *ec2ClientMock) RevokeSecurityGroupIngressWithContext(in1 context.Context, in2 *ec2.RevokeSecurityGroupIngressInput, in3 ...request.Option) (*ec2.RevokeSecurityGroupIngressOutput, error) {
	if mock.RevokeSecurityGroupIngressWithContextFunc == nil {
		panic("ec2ClientMock.RevokeSecurityGroupIngressWithContextFunc: method is nil but ec2Client.RevokeSecurityGroupIngressWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.RevokeSecurityGroupIngressInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockRevokeSecurityGroupIngressWithContext.Lock()
	mock.calls.RevokeSecurityGroupIngressWithContext = append(mock.calls.RevokeSecurityGroupIngressWithContext, callInfo)
	lockec2ClientMockRevokeSecurityGroupIngressWithContext.Unlock()
	return mock.RevokeSecurityGroupIngressWithContextFunc(in1, in2, in3...)
}

// RevokeSecurityGroupIngressWithContextCalls gets all the calls that were made to RevokeSecurityGroupIngressWithContext.
// Check the length with:
//     len(mockedec2Client.RevokeSecurityGroupIngressWithContextCalls())
func (mock *ec2ClientMock) RevokeSecurityGroupIngressWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.RevokeSecurityGroupIngressInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.RevokeSecurityGroupIngressInput
		In3 []request.Option
	}
	lockec2ClientMockRevokeSecurityGroupIngressWithContext.RLock()
	calls = mock.calls.RevokeSecurityGroupIngressWithContext
	lockec2ClientMockRevokeSecurityGroupIngressWithContext.RUnlock()
	return calls
}

// RunInstances calls RunInstancesFunc.
func (mock *ec2ClientMock) RunInstances(in1 *ec2.RunInstancesInput) (*ec2.Reservation, error) {
	if mock.RunInstancesFunc == nil {
		panic("ec2ClientMock.RunInstancesFunc: method is nil but ec2Client.RunInstances was just called")
	}
	callInfo := struct {
		In1 *ec2.RunInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockRunInstances.Lock()
	mock.calls.RunInstances = append(mock.calls.RunInstances, callInfo)
	lockec2ClientMockRunInstances.Unlock()
	return mock.RunInstancesFunc(in1)
}

// RunInstancesCalls gets all the calls that were made to RunInstances.
// Check the length with:
//     len(mockedec2Client.RunInstancesCalls())
func (mock *ec2ClientMock) RunInstancesCalls() []struct {
	In1 *ec2.RunInstancesInput
} {
	var calls []struct {
		In1 *ec2.RunInstancesInput
	}
	lockec2ClientMockRunInstances.RLock()
	calls = mock.calls.RunInstances
	lockec2ClientMockRunInstances.RUnlock()
	return calls
}

// RunInstancesRequest calls RunInstancesRequestFunc.
func (mock *ec2ClientMock) RunInstancesRequest(in1 *ec2.RunInstancesInput) (*request.Request, *ec2.Reservation) {
	if mock.RunInstancesRequestFunc == nil {
		panic("ec2ClientMock.RunInstancesRequestFunc: method is nil but ec2Client.RunInstancesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.RunInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockRunInstancesRequest.Lock()
	mock.calls.RunInstancesRequest = append(mock.calls.RunInstancesRequest, callInfo)
	lockec2ClientMockRunInstancesRequest.Unlock()
	return mock.RunInstancesRequestFunc(in1)
}

// RunInstancesRequestCalls gets all the calls that were made to RunInstancesRequest.
// Check the length with:
//     len(mockedec2Client.RunInstancesRequestCalls())
func (mock *ec2ClientMock) RunInstancesRequestCalls() []struct {
	In1 *ec2.RunInstancesInput
} {
	var calls []struct {
		In1 *ec2.RunInstancesInput
	}
	lockec2ClientMockRunInstancesRequest.RLock()
	calls = mock.calls.RunInstancesRequest
	lockec2ClientMockRunInstancesRequest.RUnlock()
	return calls
}

// RunInstancesWithContext calls RunInstancesWithContextFunc.
func (mock *ec2ClientMock) RunInstancesWithContext(in1 context.Context, in2 *ec2.RunInstancesInput, in3 ...request.Option) (*ec2.Reservation, error) {
	if mock.RunInstancesWithContextFunc == nil {
		panic("ec2ClientMock.RunInstancesWithContextFunc: method is nil but ec2Client.RunInstancesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.RunInstancesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockRunInstancesWithContext.Lock()
	mock.calls.RunInstancesWithContext = append(mock.calls.RunInstancesWithContext, callInfo)
	lockec2ClientMockRunInstancesWithContext.Unlock()
	return mock.RunInstancesWithContextFunc(in1, in2, in3...)
}

// RunInstancesWithContextCalls gets all the calls that were made to RunInstancesWithContext.
// Check the length with:
//     len(mockedec2Client.RunInstancesWithContextCalls())
func (mock *ec2ClientMock) RunInstancesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.RunInstancesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.RunInstancesInput
		In3 []request.Option
	}
	lockec2ClientMockRunInstancesWithContext.RLock()
	calls = mock.calls.RunInstancesWithContext
	lockec2ClientMockRunInstancesWithContext.RUnlock()
	return calls
}

// RunScheduledInstances calls RunScheduledInstancesFunc.
func (mock *ec2ClientMock) RunScheduledInstances(in1 *ec2.RunScheduledInstancesInput) (*ec2.RunScheduledInstancesOutput, error) {
	if mock.RunScheduledInstancesFunc == nil {
		panic("ec2ClientMock.RunScheduledInstancesFunc: method is nil but ec2Client.RunScheduledInstances was just called")
	}
	callInfo := struct {
		In1 *ec2.RunScheduledInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockRunScheduledInstances.Lock()
	mock.calls.RunScheduledInstances = append(mock.calls.RunScheduledInstances, callInfo)
	lockec2ClientMockRunScheduledInstances.Unlock()
	return mock.RunScheduledInstancesFunc(in1)
}

// RunScheduledInstancesCalls gets all the calls that were made to RunScheduledInstances.
// Check the length with:
//     len(mockedec2Client.RunScheduledInstancesCalls())
func (mock *ec2ClientMock) RunScheduledInstancesCalls() []struct {
	In1 *ec2.RunScheduledInstancesInput
} {
	var calls []struct {
		In1 *ec2.RunScheduledInstancesInput
	}
	lockec2ClientMockRunScheduledInstances.RLock()
	calls = mock.calls.RunScheduledInstances
	lockec2ClientMockRunScheduledInstances.RUnlock()
	return calls
}

// RunScheduledInstancesRequest calls RunScheduledInstancesRequestFunc.
func (mock *ec2ClientMock) RunScheduledInstancesRequest(in1 *ec2.RunScheduledInstancesInput) (*request.Request, *ec2.RunScheduledInstancesOutput) {
	if mock.RunScheduledInstancesRequestFunc == nil {
		panic("ec2ClientMock.RunScheduledInstancesRequestFunc: method is nil but ec2Client.RunScheduledInstancesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.RunScheduledInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockRunScheduledInstancesRequest.Lock()
	mock.calls.RunScheduledInstancesRequest = append(mock.calls.RunScheduledInstancesRequest, callInfo)
	lockec2ClientMockRunScheduledInstancesRequest.Unlock()
	return mock.RunScheduledInstancesRequestFunc(in1)
}

// RunScheduledInstancesRequestCalls gets all the calls that were made to RunScheduledInstancesRequest.
// Check the length with:
//     len(mockedec2Client.RunScheduledInstancesRequestCalls())
func (mock *ec2ClientMock) RunScheduledInstancesRequestCalls() []struct {
	In1 *ec2.RunScheduledInstancesInput
} {
	var calls []struct {
		In1 *ec2.RunScheduledInstancesInput
	}
	lockec2ClientMockRunScheduledInstancesRequest.RLock()
	calls = mock.calls.RunScheduledInstancesRequest
	lockec2ClientMockRunScheduledInstancesRequest.RUnlock()
	return calls
}

// RunScheduledInstancesWithContext calls RunScheduledInstancesWithContextFunc.
func (mock *ec2ClientMock) RunScheduledInstancesWithContext(in1 context.Context, in2 *ec2.RunScheduledInstancesInput, in3 ...request.Option) (*ec2.RunScheduledInstancesOutput, error) {
	if mock.RunScheduledInstancesWithContextFunc == nil {
		panic("ec2ClientMock.RunScheduledInstancesWithContextFunc: method is nil but ec2Client.RunScheduledInstancesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.RunScheduledInstancesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockRunScheduledInstancesWithContext.Lock()
	mock.calls.RunScheduledInstancesWithContext = append(mock.calls.RunScheduledInstancesWithContext, callInfo)
	lockec2ClientMockRunScheduledInstancesWithContext.Unlock()
	return mock.RunScheduledInstancesWithContextFunc(in1, in2, in3...)
}

// RunScheduledInstancesWithContextCalls gets all the calls that were made to RunScheduledInstancesWithContext.
// Check the length with:
//     len(mockedec2Client.RunScheduledInstancesWithContextCalls())
func (mock *ec2ClientMock) RunScheduledInstancesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.RunScheduledInstancesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.RunScheduledInstancesInput
		In3 []request.Option
	}
	lockec2ClientMockRunScheduledInstancesWithContext.RLock()
	calls = mock.calls.RunScheduledInstancesWithContext
	lockec2ClientMockRunScheduledInstancesWithContext.RUnlock()
	return calls
}

// SearchLocalGatewayRoutes calls SearchLocalGatewayRoutesFunc.
func (mock *ec2ClientMock) SearchLocalGatewayRoutes(in1 *ec2.SearchLocalGatewayRoutesInput) (*ec2.SearchLocalGatewayRoutesOutput, error) {
	if mock.SearchLocalGatewayRoutesFunc == nil {
		panic("ec2ClientMock.SearchLocalGatewayRoutesFunc: method is nil but ec2Client.SearchLocalGatewayRoutes was just called")
	}
	callInfo := struct {
		In1 *ec2.SearchLocalGatewayRoutesInput
	}{
		In1: in1,
	}
	lockec2ClientMockSearchLocalGatewayRoutes.Lock()
	mock.calls.SearchLocalGatewayRoutes = append(mock.calls.SearchLocalGatewayRoutes, callInfo)
	lockec2ClientMockSearchLocalGatewayRoutes.Unlock()
	return mock.SearchLocalGatewayRoutesFunc(in1)
}

// SearchLocalGatewayRoutesCalls gets all the calls that were made to SearchLocalGatewayRoutes.
// Check the length with:
//     len(mockedec2Client.SearchLocalGatewayRoutesCalls())
func (mock *ec2ClientMock) SearchLocalGatewayRoutesCalls() []struct {
	In1 *ec2.SearchLocalGatewayRoutesInput
} {
	var calls []struct {
		In1 *ec2.SearchLocalGatewayRoutesInput
	}
	lockec2ClientMockSearchLocalGatewayRoutes.RLock()
	calls = mock.calls.SearchLocalGatewayRoutes
	lockec2ClientMockSearchLocalGatewayRoutes.RUnlock()
	return calls
}

// SearchLocalGatewayRoutesRequest calls SearchLocalGatewayRoutesRequestFunc.
func (mock *ec2ClientMock) SearchLocalGatewayRoutesRequest(in1 *ec2.SearchLocalGatewayRoutesInput) (*request.Request, *ec2.SearchLocalGatewayRoutesOutput) {
	if mock.SearchLocalGatewayRoutesRequestFunc == nil {
		panic("ec2ClientMock.SearchLocalGatewayRoutesRequestFunc: method is nil but ec2Client.SearchLocalGatewayRoutesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.SearchLocalGatewayRoutesInput
	}{
		In1: in1,
	}
	lockec2ClientMockSearchLocalGatewayRoutesRequest.Lock()
	mock.calls.SearchLocalGatewayRoutesRequest = append(mock.calls.SearchLocalGatewayRoutesRequest, callInfo)
	lockec2ClientMockSearchLocalGatewayRoutesRequest.Unlock()
	return mock.SearchLocalGatewayRoutesRequestFunc(in1)
}

// SearchLocalGatewayRoutesRequestCalls gets all the calls that were made to SearchLocalGatewayRoutesRequest.
// Check the length with:
//     len(mockedec2Client.SearchLocalGatewayRoutesRequestCalls())
func (mock *ec2ClientMock) SearchLocalGatewayRoutesRequestCalls() []struct {
	In1 *ec2.SearchLocalGatewayRoutesInput
} {
	var calls []struct {
		In1 *ec2.SearchLocalGatewayRoutesInput
	}
	lockec2ClientMockSearchLocalGatewayRoutesRequest.RLock()
	calls = mock.calls.SearchLocalGatewayRoutesRequest
	lockec2ClientMockSearchLocalGatewayRoutesRequest.RUnlock()
	return calls
}

// SearchLocalGatewayRoutesWithContext calls SearchLocalGatewayRoutesWithContextFunc.
func (mock *ec2ClientMock) SearchLocalGatewayRoutesWithContext(in1 context.Context, in2 *ec2.SearchLocalGatewayRoutesInput, in3 ...request.Option) (*ec2.SearchLocalGatewayRoutesOutput, error) {
	if mock.SearchLocalGatewayRoutesWithContextFunc == nil {
		panic("ec2ClientMock.SearchLocalGatewayRoutesWithContextFunc: method is nil but ec2Client.SearchLocalGatewayRoutesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.SearchLocalGatewayRoutesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockSearchLocalGatewayRoutesWithContext.Lock()
	mock.calls.SearchLocalGatewayRoutesWithContext = append(mock.calls.SearchLocalGatewayRoutesWithContext, callInfo)
	lockec2ClientMockSearchLocalGatewayRoutesWithContext.Unlock()
	return mock.SearchLocalGatewayRoutesWithContextFunc(in1, in2, in3...)
}

// SearchLocalGatewayRoutesWithContextCalls gets all the calls that were made to SearchLocalGatewayRoutesWithContext.
// Check the length with:
//     len(mockedec2Client.SearchLocalGatewayRoutesWithContextCalls())
func (mock *ec2ClientMock) SearchLocalGatewayRoutesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.SearchLocalGatewayRoutesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.SearchLocalGatewayRoutesInput
		In3 []request.Option
	}
	lockec2ClientMockSearchLocalGatewayRoutesWithContext.RLock()
	calls = mock.calls.SearchLocalGatewayRoutesWithContext
	lockec2ClientMockSearchLocalGatewayRoutesWithContext.RUnlock()
	return calls
}

// SearchTransitGatewayMulticastGroups calls SearchTransitGatewayMulticastGroupsFunc.
func (mock *ec2ClientMock) SearchTransitGatewayMulticastGroups(in1 *ec2.SearchTransitGatewayMulticastGroupsInput) (*ec2.SearchTransitGatewayMulticastGroupsOutput, error) {
	if mock.SearchTransitGatewayMulticastGroupsFunc == nil {
		panic("ec2ClientMock.SearchTransitGatewayMulticastGroupsFunc: method is nil but ec2Client.SearchTransitGatewayMulticastGroups was just called")
	}
	callInfo := struct {
		In1 *ec2.SearchTransitGatewayMulticastGroupsInput
	}{
		In1: in1,
	}
	lockec2ClientMockSearchTransitGatewayMulticastGroups.Lock()
	mock.calls.SearchTransitGatewayMulticastGroups = append(mock.calls.SearchTransitGatewayMulticastGroups, callInfo)
	lockec2ClientMockSearchTransitGatewayMulticastGroups.Unlock()
	return mock.SearchTransitGatewayMulticastGroupsFunc(in1)
}

// SearchTransitGatewayMulticastGroupsCalls gets all the calls that were made to SearchTransitGatewayMulticastGroups.
// Check the length with:
//     len(mockedec2Client.SearchTransitGatewayMulticastGroupsCalls())
func (mock *ec2ClientMock) SearchTransitGatewayMulticastGroupsCalls() []struct {
	In1 *ec2.SearchTransitGatewayMulticastGroupsInput
} {
	var calls []struct {
		In1 *ec2.SearchTransitGatewayMulticastGroupsInput
	}
	lockec2ClientMockSearchTransitGatewayMulticastGroups.RLock()
	calls = mock.calls.SearchTransitGatewayMulticastGroups
	lockec2ClientMockSearchTransitGatewayMulticastGroups.RUnlock()
	return calls
}

// SearchTransitGatewayMulticastGroupsRequest calls SearchTransitGatewayMulticastGroupsRequestFunc.
func (mock *ec2ClientMock) SearchTransitGatewayMulticastGroupsRequest(in1 *ec2.SearchTransitGatewayMulticastGroupsInput) (*request.Request, *ec2.SearchTransitGatewayMulticastGroupsOutput) {
	if mock.SearchTransitGatewayMulticastGroupsRequestFunc == nil {
		panic("ec2ClientMock.SearchTransitGatewayMulticastGroupsRequestFunc: method is nil but ec2Client.SearchTransitGatewayMulticastGroupsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.SearchTransitGatewayMulticastGroupsInput
	}{
		In1: in1,
	}
	lockec2ClientMockSearchTransitGatewayMulticastGroupsRequest.Lock()
	mock.calls.SearchTransitGatewayMulticastGroupsRequest = append(mock.calls.SearchTransitGatewayMulticastGroupsRequest, callInfo)
	lockec2ClientMockSearchTransitGatewayMulticastGroupsRequest.Unlock()
	return mock.SearchTransitGatewayMulticastGroupsRequestFunc(in1)
}

// SearchTransitGatewayMulticastGroupsRequestCalls gets all the calls that were made to SearchTransitGatewayMulticastGroupsRequest.
// Check the length with:
//     len(mockedec2Client.SearchTransitGatewayMulticastGroupsRequestCalls())
func (mock *ec2ClientMock) SearchTransitGatewayMulticastGroupsRequestCalls() []struct {
	In1 *ec2.SearchTransitGatewayMulticastGroupsInput
} {
	var calls []struct {
		In1 *ec2.SearchTransitGatewayMulticastGroupsInput
	}
	lockec2ClientMockSearchTransitGatewayMulticastGroupsRequest.RLock()
	calls = mock.calls.SearchTransitGatewayMulticastGroupsRequest
	lockec2ClientMockSearchTransitGatewayMulticastGroupsRequest.RUnlock()
	return calls
}

// SearchTransitGatewayMulticastGroupsWithContext calls SearchTransitGatewayMulticastGroupsWithContextFunc.
func (mock *ec2ClientMock) SearchTransitGatewayMulticastGroupsWithContext(in1 context.Context, in2 *ec2.SearchTransitGatewayMulticastGroupsInput, in3 ...request.Option) (*ec2.SearchTransitGatewayMulticastGroupsOutput, error) {
	if mock.SearchTransitGatewayMulticastGroupsWithContextFunc == nil {
		panic("ec2ClientMock.SearchTransitGatewayMulticastGroupsWithContextFunc: method is nil but ec2Client.SearchTransitGatewayMulticastGroupsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.SearchTransitGatewayMulticastGroupsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockSearchTransitGatewayMulticastGroupsWithContext.Lock()
	mock.calls.SearchTransitGatewayMulticastGroupsWithContext = append(mock.calls.SearchTransitGatewayMulticastGroupsWithContext, callInfo)
	lockec2ClientMockSearchTransitGatewayMulticastGroupsWithContext.Unlock()
	return mock.SearchTransitGatewayMulticastGroupsWithContextFunc(in1, in2, in3...)
}

// SearchTransitGatewayMulticastGroupsWithContextCalls gets all the calls that were made to SearchTransitGatewayMulticastGroupsWithContext.
// Check the length with:
//     len(mockedec2Client.SearchTransitGatewayMulticastGroupsWithContextCalls())
func (mock *ec2ClientMock) SearchTransitGatewayMulticastGroupsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.SearchTransitGatewayMulticastGroupsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.SearchTransitGatewayMulticastGroupsInput
		In3 []request.Option
	}
	lockec2ClientMockSearchTransitGatewayMulticastGroupsWithContext.RLock()
	calls = mock.calls.SearchTransitGatewayMulticastGroupsWithContext
	lockec2ClientMockSearchTransitGatewayMulticastGroupsWithContext.RUnlock()
	return calls
}

// SearchTransitGatewayRoutes calls SearchTransitGatewayRoutesFunc.
func (mock *ec2ClientMock) SearchTransitGatewayRoutes(in1 *ec2.SearchTransitGatewayRoutesInput) (*ec2.SearchTransitGatewayRoutesOutput, error) {
	if mock.SearchTransitGatewayRoutesFunc == nil {
		panic("ec2ClientMock.SearchTransitGatewayRoutesFunc: method is nil but ec2Client.SearchTransitGatewayRoutes was just called")
	}
	callInfo := struct {
		In1 *ec2.SearchTransitGatewayRoutesInput
	}{
		In1: in1,
	}
	lockec2ClientMockSearchTransitGatewayRoutes.Lock()
	mock.calls.SearchTransitGatewayRoutes = append(mock.calls.SearchTransitGatewayRoutes, callInfo)
	lockec2ClientMockSearchTransitGatewayRoutes.Unlock()
	return mock.SearchTransitGatewayRoutesFunc(in1)
}

// SearchTransitGatewayRoutesCalls gets all the calls that were made to SearchTransitGatewayRoutes.
// Check the length with:
//     len(mockedec2Client.SearchTransitGatewayRoutesCalls())
func (mock *ec2ClientMock) SearchTransitGatewayRoutesCalls() []struct {
	In1 *ec2.SearchTransitGatewayRoutesInput
} {
	var calls []struct {
		In1 *ec2.SearchTransitGatewayRoutesInput
	}
	lockec2ClientMockSearchTransitGatewayRoutes.RLock()
	calls = mock.calls.SearchTransitGatewayRoutes
	lockec2ClientMockSearchTransitGatewayRoutes.RUnlock()
	return calls
}

// SearchTransitGatewayRoutesRequest calls SearchTransitGatewayRoutesRequestFunc.
func (mock *ec2ClientMock) SearchTransitGatewayRoutesRequest(in1 *ec2.SearchTransitGatewayRoutesInput) (*request.Request, *ec2.SearchTransitGatewayRoutesOutput) {
	if mock.SearchTransitGatewayRoutesRequestFunc == nil {
		panic("ec2ClientMock.SearchTransitGatewayRoutesRequestFunc: method is nil but ec2Client.SearchTransitGatewayRoutesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.SearchTransitGatewayRoutesInput
	}{
		In1: in1,
	}
	lockec2ClientMockSearchTransitGatewayRoutesRequest.Lock()
	mock.calls.SearchTransitGatewayRoutesRequest = append(mock.calls.SearchTransitGatewayRoutesRequest, callInfo)
	lockec2ClientMockSearchTransitGatewayRoutesRequest.Unlock()
	return mock.SearchTransitGatewayRoutesRequestFunc(in1)
}

// SearchTransitGatewayRoutesRequestCalls gets all the calls that were made to SearchTransitGatewayRoutesRequest.
// Check the length with:
//     len(mockedec2Client.SearchTransitGatewayRoutesRequestCalls())
func (mock *ec2ClientMock) SearchTransitGatewayRoutesRequestCalls() []struct {
	In1 *ec2.SearchTransitGatewayRoutesInput
} {
	var calls []struct {
		In1 *ec2.SearchTransitGatewayRoutesInput
	}
	lockec2ClientMockSearchTransitGatewayRoutesRequest.RLock()
	calls = mock.calls.SearchTransitGatewayRoutesRequest
	lockec2ClientMockSearchTransitGatewayRoutesRequest.RUnlock()
	return calls
}

// SearchTransitGatewayRoutesWithContext calls SearchTransitGatewayRoutesWithContextFunc.
func (mock *ec2ClientMock) SearchTransitGatewayRoutesWithContext(in1 context.Context, in2 *ec2.SearchTransitGatewayRoutesInput, in3 ...request.Option) (*ec2.SearchTransitGatewayRoutesOutput, error) {
	if mock.SearchTransitGatewayRoutesWithContextFunc == nil {
		panic("ec2ClientMock.SearchTransitGatewayRoutesWithContextFunc: method is nil but ec2Client.SearchTransitGatewayRoutesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.SearchTransitGatewayRoutesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockSearchTransitGatewayRoutesWithContext.Lock()
	mock.calls.SearchTransitGatewayRoutesWithContext = append(mock.calls.SearchTransitGatewayRoutesWithContext, callInfo)
	lockec2ClientMockSearchTransitGatewayRoutesWithContext.Unlock()
	return mock.SearchTransitGatewayRoutesWithContextFunc(in1, in2, in3...)
}

// SearchTransitGatewayRoutesWithContextCalls gets all the calls that were made to SearchTransitGatewayRoutesWithContext.
// Check the length with:
//     len(mockedec2Client.SearchTransitGatewayRoutesWithContextCalls())
func (mock *ec2ClientMock) SearchTransitGatewayRoutesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.SearchTransitGatewayRoutesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.SearchTransitGatewayRoutesInput
		In3 []request.Option
	}
	lockec2ClientMockSearchTransitGatewayRoutesWithContext.RLock()
	calls = mock.calls.SearchTransitGatewayRoutesWithContext
	lockec2ClientMockSearchTransitGatewayRoutesWithContext.RUnlock()
	return calls
}

// SendDiagnosticInterrupt calls SendDiagnosticInterruptFunc.
func (mock *ec2ClientMock) SendDiagnosticInterrupt(in1 *ec2.SendDiagnosticInterruptInput) (*ec2.SendDiagnosticInterruptOutput, error) {
	if mock.SendDiagnosticInterruptFunc == nil {
		panic("ec2ClientMock.SendDiagnosticInterruptFunc: method is nil but ec2Client.SendDiagnosticInterrupt was just called")
	}
	callInfo := struct {
		In1 *ec2.SendDiagnosticInterruptInput
	}{
		In1: in1,
	}
	lockec2ClientMockSendDiagnosticInterrupt.Lock()
	mock.calls.SendDiagnosticInterrupt = append(mock.calls.SendDiagnosticInterrupt, callInfo)
	lockec2ClientMockSendDiagnosticInterrupt.Unlock()
	return mock.SendDiagnosticInterruptFunc(in1)
}

// SendDiagnosticInterruptCalls gets all the calls that were made to SendDiagnosticInterrupt.
// Check the length with:
//     len(mockedec2Client.SendDiagnosticInterruptCalls())
func (mock *ec2ClientMock) SendDiagnosticInterruptCalls() []struct {
	In1 *ec2.SendDiagnosticInterruptInput
} {
	var calls []struct {
		In1 *ec2.SendDiagnosticInterruptInput
	}
	lockec2ClientMockSendDiagnosticInterrupt.RLock()
	calls = mock.calls.SendDiagnosticInterrupt
	lockec2ClientMockSendDiagnosticInterrupt.RUnlock()
	return calls
}

// SendDiagnosticInterruptRequest calls SendDiagnosticInterruptRequestFunc.
func (mock *ec2ClientMock) SendDiagnosticInterruptRequest(in1 *ec2.SendDiagnosticInterruptInput) (*request.Request, *ec2.SendDiagnosticInterruptOutput) {
	if mock.SendDiagnosticInterruptRequestFunc == nil {
		panic("ec2ClientMock.SendDiagnosticInterruptRequestFunc: method is nil but ec2Client.SendDiagnosticInterruptRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.SendDiagnosticInterruptInput
	}{
		In1: in1,
	}
	lockec2ClientMockSendDiagnosticInterruptRequest.Lock()
	mock.calls.SendDiagnosticInterruptRequest = append(mock.calls.SendDiagnosticInterruptRequest, callInfo)
	lockec2ClientMockSendDiagnosticInterruptRequest.Unlock()
	return mock.SendDiagnosticInterruptRequestFunc(in1)
}

// SendDiagnosticInterruptRequestCalls gets all the calls that were made to SendDiagnosticInterruptRequest.
// Check the length with:
//     len(mockedec2Client.SendDiagnosticInterruptRequestCalls())
func (mock *ec2ClientMock) SendDiagnosticInterruptRequestCalls() []struct {
	In1 *ec2.SendDiagnosticInterruptInput
} {
	var calls []struct {
		In1 *ec2.SendDiagnosticInterruptInput
	}
	lockec2ClientMockSendDiagnosticInterruptRequest.RLock()
	calls = mock.calls.SendDiagnosticInterruptRequest
	lockec2ClientMockSendDiagnosticInterruptRequest.RUnlock()
	return calls
}

// SendDiagnosticInterruptWithContext calls SendDiagnosticInterruptWithContextFunc.
func (mock *ec2ClientMock) SendDiagnosticInterruptWithContext(in1 context.Context, in2 *ec2.SendDiagnosticInterruptInput, in3 ...request.Option) (*ec2.SendDiagnosticInterruptOutput, error) {
	if mock.SendDiagnosticInterruptWithContextFunc == nil {
		panic("ec2ClientMock.SendDiagnosticInterruptWithContextFunc: method is nil but ec2Client.SendDiagnosticInterruptWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.SendDiagnosticInterruptInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockSendDiagnosticInterruptWithContext.Lock()
	mock.calls.SendDiagnosticInterruptWithContext = append(mock.calls.SendDiagnosticInterruptWithContext, callInfo)
	lockec2ClientMockSendDiagnosticInterruptWithContext.Unlock()
	return mock.SendDiagnosticInterruptWithContextFunc(in1, in2, in3...)
}

// SendDiagnosticInterruptWithContextCalls gets all the calls that were made to SendDiagnosticInterruptWithContext.
// Check the length with:
//     len(mockedec2Client.SendDiagnosticInterruptWithContextCalls())
func (mock *ec2ClientMock) SendDiagnosticInterruptWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.SendDiagnosticInterruptInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.SendDiagnosticInterruptInput
		In3 []request.Option
	}
	lockec2ClientMockSendDiagnosticInterruptWithContext.RLock()
	calls = mock.calls.SendDiagnosticInterruptWithContext
	lockec2ClientMockSendDiagnosticInterruptWithContext.RUnlock()
	return calls
}

// StartInstances calls StartInstancesFunc.
func (mock *ec2ClientMock) StartInstances(in1 *ec2.StartInstancesInput) (*ec2.StartInstancesOutput, error) {
	if mock.StartInstancesFunc == nil {
		panic("ec2ClientMock.StartInstancesFunc: method is nil but ec2Client.StartInstances was just called")
	}
	callInfo := struct {
		In1 *ec2.StartInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockStartInstances.Lock()
	mock.calls.StartInstances = append(mock.calls.StartInstances, callInfo)
	lockec2ClientMockStartInstances.Unlock()
	return mock.StartInstancesFunc(in1)
}

// StartInstancesCalls gets all the calls that were made to StartInstances.
// Check the length with:
//     len(mockedec2Client.StartInstancesCalls())
func (mock *ec2ClientMock) StartInstancesCalls() []struct {
	In1 *ec2.StartInstancesInput
} {
	var calls []struct {
		In1 *ec2.StartInstancesInput
	}
	lockec2ClientMockStartInstances.RLock()
	calls = mock.calls.StartInstances
	lockec2ClientMockStartInstances.RUnlock()
	return calls
}

// StartInstancesRequest calls StartInstancesRequestFunc.
func (mock *ec2ClientMock) StartInstancesRequest(in1 *ec2.StartInstancesInput) (*request.Request, *ec2.StartInstancesOutput) {
	if mock.StartInstancesRequestFunc == nil {
		panic("ec2ClientMock.StartInstancesRequestFunc: method is nil but ec2Client.StartInstancesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.StartInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockStartInstancesRequest.Lock()
	mock.calls.StartInstancesRequest = append(mock.calls.StartInstancesRequest, callInfo)
	lockec2ClientMockStartInstancesRequest.Unlock()
	return mock.StartInstancesRequestFunc(in1)
}

// StartInstancesRequestCalls gets all the calls that were made to StartInstancesRequest.
// Check the length with:
//     len(mockedec2Client.StartInstancesRequestCalls())
func (mock *ec2ClientMock) StartInstancesRequestCalls() []struct {
	In1 *ec2.StartInstancesInput
} {
	var calls []struct {
		In1 *ec2.StartInstancesInput
	}
	lockec2ClientMockStartInstancesRequest.RLock()
	calls = mock.calls.StartInstancesRequest
	lockec2ClientMockStartInstancesRequest.RUnlock()
	return calls
}

// StartInstancesWithContext calls StartInstancesWithContextFunc.
func (mock *ec2ClientMock) StartInstancesWithContext(in1 context.Context, in2 *ec2.StartInstancesInput, in3 ...request.Option) (*ec2.StartInstancesOutput, error) {
	if mock.StartInstancesWithContextFunc == nil {
		panic("ec2ClientMock.StartInstancesWithContextFunc: method is nil but ec2Client.StartInstancesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.StartInstancesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockStartInstancesWithContext.Lock()
	mock.calls.StartInstancesWithContext = append(mock.calls.StartInstancesWithContext, callInfo)
	lockec2ClientMockStartInstancesWithContext.Unlock()
	return mock.StartInstancesWithContextFunc(in1, in2, in3...)
}

// StartInstancesWithContextCalls gets all the calls that were made to StartInstancesWithContext.
// Check the length with:
//     len(mockedec2Client.StartInstancesWithContextCalls())
func (mock *ec2ClientMock) StartInstancesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.StartInstancesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.StartInstancesInput
		In3 []request.Option
	}
	lockec2ClientMockStartInstancesWithContext.RLock()
	calls = mock.calls.StartInstancesWithContext
	lockec2ClientMockStartInstancesWithContext.RUnlock()
	return calls
}

// StartVpcEndpointServicePrivateDnsVerification calls StartVpcEndpointServicePrivateDnsVerificationFunc.
func (mock *ec2ClientMock) StartVpcEndpointServicePrivateDnsVerification(in1 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput) (*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput, error) {
	if mock.StartVpcEndpointServicePrivateDnsVerificationFunc == nil {
		panic("ec2ClientMock.StartVpcEndpointServicePrivateDnsVerificationFunc: method is nil but ec2Client.StartVpcEndpointServicePrivateDnsVerification was just called")
	}
	callInfo := struct {
		In1 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput
	}{
		In1: in1,
	}
	lockec2ClientMockStartVpcEndpointServicePrivateDnsVerification.Lock()
	mock.calls.StartVpcEndpointServicePrivateDnsVerification = append(mock.calls.StartVpcEndpointServicePrivateDnsVerification, callInfo)
	lockec2ClientMockStartVpcEndpointServicePrivateDnsVerification.Unlock()
	return mock.StartVpcEndpointServicePrivateDnsVerificationFunc(in1)
}

// StartVpcEndpointServicePrivateDnsVerificationCalls gets all the calls that were made to StartVpcEndpointServicePrivateDnsVerification.
// Check the length with:
//     len(mockedec2Client.StartVpcEndpointServicePrivateDnsVerificationCalls())
func (mock *ec2ClientMock) StartVpcEndpointServicePrivateDnsVerificationCalls() []struct {
	In1 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput
} {
	var calls []struct {
		In1 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput
	}
	lockec2ClientMockStartVpcEndpointServicePrivateDnsVerification.RLock()
	calls = mock.calls.StartVpcEndpointServicePrivateDnsVerification
	lockec2ClientMockStartVpcEndpointServicePrivateDnsVerification.RUnlock()
	return calls
}

// StartVpcEndpointServicePrivateDnsVerificationRequest calls StartVpcEndpointServicePrivateDnsVerificationRequestFunc.
func (mock *ec2ClientMock) StartVpcEndpointServicePrivateDnsVerificationRequest(in1 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput) (*request.Request, *ec2.StartVpcEndpointServicePrivateDnsVerificationOutput) {
	if mock.StartVpcEndpointServicePrivateDnsVerificationRequestFunc == nil {
		panic("ec2ClientMock.StartVpcEndpointServicePrivateDnsVerificationRequestFunc: method is nil but ec2Client.StartVpcEndpointServicePrivateDnsVerificationRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput
	}{
		In1: in1,
	}
	lockec2ClientMockStartVpcEndpointServicePrivateDnsVerificationRequest.Lock()
	mock.calls.StartVpcEndpointServicePrivateDnsVerificationRequest = append(mock.calls.StartVpcEndpointServicePrivateDnsVerificationRequest, callInfo)
	lockec2ClientMockStartVpcEndpointServicePrivateDnsVerificationRequest.Unlock()
	return mock.StartVpcEndpointServicePrivateDnsVerificationRequestFunc(in1)
}

// StartVpcEndpointServicePrivateDnsVerificationRequestCalls gets all the calls that were made to StartVpcEndpointServicePrivateDnsVerificationRequest.
// Check the length with:
//     len(mockedec2Client.StartVpcEndpointServicePrivateDnsVerificationRequestCalls())
func (mock *ec2ClientMock) StartVpcEndpointServicePrivateDnsVerificationRequestCalls() []struct {
	In1 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput
} {
	var calls []struct {
		In1 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput
	}
	lockec2ClientMockStartVpcEndpointServicePrivateDnsVerificationRequest.RLock()
	calls = mock.calls.StartVpcEndpointServicePrivateDnsVerificationRequest
	lockec2ClientMockStartVpcEndpointServicePrivateDnsVerificationRequest.RUnlock()
	return calls
}

// StartVpcEndpointServicePrivateDnsVerificationWithContext calls StartVpcEndpointServicePrivateDnsVerificationWithContextFunc.
func (mock *ec2ClientMock) StartVpcEndpointServicePrivateDnsVerificationWithContext(in1 context.Context, in2 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput, in3 ...request.Option) (*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput, error) {
	if mock.StartVpcEndpointServicePrivateDnsVerificationWithContextFunc == nil {
		panic("ec2ClientMock.StartVpcEndpointServicePrivateDnsVerificationWithContextFunc: method is nil but ec2Client.StartVpcEndpointServicePrivateDnsVerificationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockStartVpcEndpointServicePrivateDnsVerificationWithContext.Lock()
	mock.calls.StartVpcEndpointServicePrivateDnsVerificationWithContext = append(mock.calls.StartVpcEndpointServicePrivateDnsVerificationWithContext, callInfo)
	lockec2ClientMockStartVpcEndpointServicePrivateDnsVerificationWithContext.Unlock()
	return mock.StartVpcEndpointServicePrivateDnsVerificationWithContextFunc(in1, in2, in3...)
}

// StartVpcEndpointServicePrivateDnsVerificationWithContextCalls gets all the calls that were made to StartVpcEndpointServicePrivateDnsVerificationWithContext.
// Check the length with:
//     len(mockedec2Client.StartVpcEndpointServicePrivateDnsVerificationWithContextCalls())
func (mock *ec2ClientMock) StartVpcEndpointServicePrivateDnsVerificationWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput
		In3 []request.Option
	}
	lockec2ClientMockStartVpcEndpointServicePrivateDnsVerificationWithContext.RLock()
	calls = mock.calls.StartVpcEndpointServicePrivateDnsVerificationWithContext
	lockec2ClientMockStartVpcEndpointServicePrivateDnsVerificationWithContext.RUnlock()
	return calls
}

// StopInstances calls StopInstancesFunc.
func (mock *ec2ClientMock) StopInstances(in1 *ec2.StopInstancesInput) (*ec2.StopInstancesOutput, error) {
	if mock.StopInstancesFunc == nil {
		panic("ec2ClientMock.StopInstancesFunc: method is nil but ec2Client.StopInstances was just called")
	}
	callInfo := struct {
		In1 *ec2.StopInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockStopInstances.Lock()
	mock.calls.StopInstances = append(mock.calls.StopInstances, callInfo)
	lockec2ClientMockStopInstances.Unlock()
	return mock.StopInstancesFunc(in1)
}

// StopInstancesCalls gets all the calls that were made to StopInstances.
// Check the length with:
//     len(mockedec2Client.StopInstancesCalls())
func (mock *ec2ClientMock) StopInstancesCalls() []struct {
	In1 *ec2.StopInstancesInput
} {
	var calls []struct {
		In1 *ec2.StopInstancesInput
	}
	lockec2ClientMockStopInstances.RLock()
	calls = mock.calls.StopInstances
	lockec2ClientMockStopInstances.RUnlock()
	return calls
}

// StopInstancesRequest calls StopInstancesRequestFunc.
func (mock *ec2ClientMock) StopInstancesRequest(in1 *ec2.StopInstancesInput) (*request.Request, *ec2.StopInstancesOutput) {
	if mock.StopInstancesRequestFunc == nil {
		panic("ec2ClientMock.StopInstancesRequestFunc: method is nil but ec2Client.StopInstancesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.StopInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockStopInstancesRequest.Lock()
	mock.calls.StopInstancesRequest = append(mock.calls.StopInstancesRequest, callInfo)
	lockec2ClientMockStopInstancesRequest.Unlock()
	return mock.StopInstancesRequestFunc(in1)
}

// StopInstancesRequestCalls gets all the calls that were made to StopInstancesRequest.
// Check the length with:
//     len(mockedec2Client.StopInstancesRequestCalls())
func (mock *ec2ClientMock) StopInstancesRequestCalls() []struct {
	In1 *ec2.StopInstancesInput
} {
	var calls []struct {
		In1 *ec2.StopInstancesInput
	}
	lockec2ClientMockStopInstancesRequest.RLock()
	calls = mock.calls.StopInstancesRequest
	lockec2ClientMockStopInstancesRequest.RUnlock()
	return calls
}

// StopInstancesWithContext calls StopInstancesWithContextFunc.
func (mock *ec2ClientMock) StopInstancesWithContext(in1 context.Context, in2 *ec2.StopInstancesInput, in3 ...request.Option) (*ec2.StopInstancesOutput, error) {
	if mock.StopInstancesWithContextFunc == nil {
		panic("ec2ClientMock.StopInstancesWithContextFunc: method is nil but ec2Client.StopInstancesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.StopInstancesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockStopInstancesWithContext.Lock()
	mock.calls.StopInstancesWithContext = append(mock.calls.StopInstancesWithContext, callInfo)
	lockec2ClientMockStopInstancesWithContext.Unlock()
	return mock.StopInstancesWithContextFunc(in1, in2, in3...)
}

// StopInstancesWithContextCalls gets all the calls that were made to StopInstancesWithContext.
// Check the length with:
//     len(mockedec2Client.StopInstancesWithContextCalls())
func (mock *ec2ClientMock) StopInstancesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.StopInstancesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.StopInstancesInput
		In3 []request.Option
	}
	lockec2ClientMockStopInstancesWithContext.RLock()
	calls = mock.calls.StopInstancesWithContext
	lockec2ClientMockStopInstancesWithContext.RUnlock()
	return calls
}

// TerminateClientVpnConnections calls TerminateClientVpnConnectionsFunc.
func (mock *ec2ClientMock) TerminateClientVpnConnections(in1 *ec2.TerminateClientVpnConnectionsInput) (*ec2.TerminateClientVpnConnectionsOutput, error) {
	if mock.TerminateClientVpnConnectionsFunc == nil {
		panic("ec2ClientMock.TerminateClientVpnConnectionsFunc: method is nil but ec2Client.TerminateClientVpnConnections was just called")
	}
	callInfo := struct {
		In1 *ec2.TerminateClientVpnConnectionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockTerminateClientVpnConnections.Lock()
	mock.calls.TerminateClientVpnConnections = append(mock.calls.TerminateClientVpnConnections, callInfo)
	lockec2ClientMockTerminateClientVpnConnections.Unlock()
	return mock.TerminateClientVpnConnectionsFunc(in1)
}

// TerminateClientVpnConnectionsCalls gets all the calls that were made to TerminateClientVpnConnections.
// Check the length with:
//     len(mockedec2Client.TerminateClientVpnConnectionsCalls())
func (mock *ec2ClientMock) TerminateClientVpnConnectionsCalls() []struct {
	In1 *ec2.TerminateClientVpnConnectionsInput
} {
	var calls []struct {
		In1 *ec2.TerminateClientVpnConnectionsInput
	}
	lockec2ClientMockTerminateClientVpnConnections.RLock()
	calls = mock.calls.TerminateClientVpnConnections
	lockec2ClientMockTerminateClientVpnConnections.RUnlock()
	return calls
}

// TerminateClientVpnConnectionsRequest calls TerminateClientVpnConnectionsRequestFunc.
func (mock *ec2ClientMock) TerminateClientVpnConnectionsRequest(in1 *ec2.TerminateClientVpnConnectionsInput) (*request.Request, *ec2.TerminateClientVpnConnectionsOutput) {
	if mock.TerminateClientVpnConnectionsRequestFunc == nil {
		panic("ec2ClientMock.TerminateClientVpnConnectionsRequestFunc: method is nil but ec2Client.TerminateClientVpnConnectionsRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.TerminateClientVpnConnectionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockTerminateClientVpnConnectionsRequest.Lock()
	mock.calls.TerminateClientVpnConnectionsRequest = append(mock.calls.TerminateClientVpnConnectionsRequest, callInfo)
	lockec2ClientMockTerminateClientVpnConnectionsRequest.Unlock()
	return mock.TerminateClientVpnConnectionsRequestFunc(in1)
}

// TerminateClientVpnConnectionsRequestCalls gets all the calls that were made to TerminateClientVpnConnectionsRequest.
// Check the length with:
//     len(mockedec2Client.TerminateClientVpnConnectionsRequestCalls())
func (mock *ec2ClientMock) TerminateClientVpnConnectionsRequestCalls() []struct {
	In1 *ec2.TerminateClientVpnConnectionsInput
} {
	var calls []struct {
		In1 *ec2.TerminateClientVpnConnectionsInput
	}
	lockec2ClientMockTerminateClientVpnConnectionsRequest.RLock()
	calls = mock.calls.TerminateClientVpnConnectionsRequest
	lockec2ClientMockTerminateClientVpnConnectionsRequest.RUnlock()
	return calls
}

// TerminateClientVpnConnectionsWithContext calls TerminateClientVpnConnectionsWithContextFunc.
func (mock *ec2ClientMock) TerminateClientVpnConnectionsWithContext(in1 context.Context, in2 *ec2.TerminateClientVpnConnectionsInput, in3 ...request.Option) (*ec2.TerminateClientVpnConnectionsOutput, error) {
	if mock.TerminateClientVpnConnectionsWithContextFunc == nil {
		panic("ec2ClientMock.TerminateClientVpnConnectionsWithContextFunc: method is nil but ec2Client.TerminateClientVpnConnectionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.TerminateClientVpnConnectionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockTerminateClientVpnConnectionsWithContext.Lock()
	mock.calls.TerminateClientVpnConnectionsWithContext = append(mock.calls.TerminateClientVpnConnectionsWithContext, callInfo)
	lockec2ClientMockTerminateClientVpnConnectionsWithContext.Unlock()
	return mock.TerminateClientVpnConnectionsWithContextFunc(in1, in2, in3...)
}

// TerminateClientVpnConnectionsWithContextCalls gets all the calls that were made to TerminateClientVpnConnectionsWithContext.
// Check the length with:
//     len(mockedec2Client.TerminateClientVpnConnectionsWithContextCalls())
func (mock *ec2ClientMock) TerminateClientVpnConnectionsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.TerminateClientVpnConnectionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.TerminateClientVpnConnectionsInput
		In3 []request.Option
	}
	lockec2ClientMockTerminateClientVpnConnectionsWithContext.RLock()
	calls = mock.calls.TerminateClientVpnConnectionsWithContext
	lockec2ClientMockTerminateClientVpnConnectionsWithContext.RUnlock()
	return calls
}

// TerminateInstances calls TerminateInstancesFunc.
func (mock *ec2ClientMock) TerminateInstances(in1 *ec2.TerminateInstancesInput) (*ec2.TerminateInstancesOutput, error) {
	if mock.TerminateInstancesFunc == nil {
		panic("ec2ClientMock.TerminateInstancesFunc: method is nil but ec2Client.TerminateInstances was just called")
	}
	callInfo := struct {
		In1 *ec2.TerminateInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockTerminateInstances.Lock()
	mock.calls.TerminateInstances = append(mock.calls.TerminateInstances, callInfo)
	lockec2ClientMockTerminateInstances.Unlock()
	return mock.TerminateInstancesFunc(in1)
}

// TerminateInstancesCalls gets all the calls that were made to TerminateInstances.
// Check the length with:
//     len(mockedec2Client.TerminateInstancesCalls())
func (mock *ec2ClientMock) TerminateInstancesCalls() []struct {
	In1 *ec2.TerminateInstancesInput
} {
	var calls []struct {
		In1 *ec2.TerminateInstancesInput
	}
	lockec2ClientMockTerminateInstances.RLock()
	calls = mock.calls.TerminateInstances
	lockec2ClientMockTerminateInstances.RUnlock()
	return calls
}

// TerminateInstancesRequest calls TerminateInstancesRequestFunc.
func (mock *ec2ClientMock) TerminateInstancesRequest(in1 *ec2.TerminateInstancesInput) (*request.Request, *ec2.TerminateInstancesOutput) {
	if mock.TerminateInstancesRequestFunc == nil {
		panic("ec2ClientMock.TerminateInstancesRequestFunc: method is nil but ec2Client.TerminateInstancesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.TerminateInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockTerminateInstancesRequest.Lock()
	mock.calls.TerminateInstancesRequest = append(mock.calls.TerminateInstancesRequest, callInfo)
	lockec2ClientMockTerminateInstancesRequest.Unlock()
	return mock.TerminateInstancesRequestFunc(in1)
}

// TerminateInstancesRequestCalls gets all the calls that were made to TerminateInstancesRequest.
// Check the length with:
//     len(mockedec2Client.TerminateInstancesRequestCalls())
func (mock *ec2ClientMock) TerminateInstancesRequestCalls() []struct {
	In1 *ec2.TerminateInstancesInput
} {
	var calls []struct {
		In1 *ec2.TerminateInstancesInput
	}
	lockec2ClientMockTerminateInstancesRequest.RLock()
	calls = mock.calls.TerminateInstancesRequest
	lockec2ClientMockTerminateInstancesRequest.RUnlock()
	return calls
}

// TerminateInstancesWithContext calls TerminateInstancesWithContextFunc.
func (mock *ec2ClientMock) TerminateInstancesWithContext(in1 context.Context, in2 *ec2.TerminateInstancesInput, in3 ...request.Option) (*ec2.TerminateInstancesOutput, error) {
	if mock.TerminateInstancesWithContextFunc == nil {
		panic("ec2ClientMock.TerminateInstancesWithContextFunc: method is nil but ec2Client.TerminateInstancesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.TerminateInstancesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockTerminateInstancesWithContext.Lock()
	mock.calls.TerminateInstancesWithContext = append(mock.calls.TerminateInstancesWithContext, callInfo)
	lockec2ClientMockTerminateInstancesWithContext.Unlock()
	return mock.TerminateInstancesWithContextFunc(in1, in2, in3...)
}

// TerminateInstancesWithContextCalls gets all the calls that were made to TerminateInstancesWithContext.
// Check the length with:
//     len(mockedec2Client.TerminateInstancesWithContextCalls())
func (mock *ec2ClientMock) TerminateInstancesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.TerminateInstancesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.TerminateInstancesInput
		In3 []request.Option
	}
	lockec2ClientMockTerminateInstancesWithContext.RLock()
	calls = mock.calls.TerminateInstancesWithContext
	lockec2ClientMockTerminateInstancesWithContext.RUnlock()
	return calls
}

// UnassignIpv6Addresses calls UnassignIpv6AddressesFunc.
func (mock *ec2ClientMock) UnassignIpv6Addresses(in1 *ec2.UnassignIpv6AddressesInput) (*ec2.UnassignIpv6AddressesOutput, error) {
	if mock.UnassignIpv6AddressesFunc == nil {
		panic("ec2ClientMock.UnassignIpv6AddressesFunc: method is nil but ec2Client.UnassignIpv6Addresses was just called")
	}
	callInfo := struct {
		In1 *ec2.UnassignIpv6AddressesInput
	}{
		In1: in1,
	}
	lockec2ClientMockUnassignIpv6Addresses.Lock()
	mock.calls.UnassignIpv6Addresses = append(mock.calls.UnassignIpv6Addresses, callInfo)
	lockec2ClientMockUnassignIpv6Addresses.Unlock()
	return mock.UnassignIpv6AddressesFunc(in1)
}

// UnassignIpv6AddressesCalls gets all the calls that were made to UnassignIpv6Addresses.
// Check the length with:
//     len(mockedec2Client.UnassignIpv6AddressesCalls())
func (mock *ec2ClientMock) UnassignIpv6AddressesCalls() []struct {
	In1 *ec2.UnassignIpv6AddressesInput
} {
	var calls []struct {
		In1 *ec2.UnassignIpv6AddressesInput
	}
	lockec2ClientMockUnassignIpv6Addresses.RLock()
	calls = mock.calls.UnassignIpv6Addresses
	lockec2ClientMockUnassignIpv6Addresses.RUnlock()
	return calls
}

// UnassignIpv6AddressesRequest calls UnassignIpv6AddressesRequestFunc.
func (mock *ec2ClientMock) UnassignIpv6AddressesRequest(in1 *ec2.UnassignIpv6AddressesInput) (*request.Request, *ec2.UnassignIpv6AddressesOutput) {
	if mock.UnassignIpv6AddressesRequestFunc == nil {
		panic("ec2ClientMock.UnassignIpv6AddressesRequestFunc: method is nil but ec2Client.UnassignIpv6AddressesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.UnassignIpv6AddressesInput
	}{
		In1: in1,
	}
	lockec2ClientMockUnassignIpv6AddressesRequest.Lock()
	mock.calls.UnassignIpv6AddressesRequest = append(mock.calls.UnassignIpv6AddressesRequest, callInfo)
	lockec2ClientMockUnassignIpv6AddressesRequest.Unlock()
	return mock.UnassignIpv6AddressesRequestFunc(in1)
}

// UnassignIpv6AddressesRequestCalls gets all the calls that were made to UnassignIpv6AddressesRequest.
// Check the length with:
//     len(mockedec2Client.UnassignIpv6AddressesRequestCalls())
func (mock *ec2ClientMock) UnassignIpv6AddressesRequestCalls() []struct {
	In1 *ec2.UnassignIpv6AddressesInput
} {
	var calls []struct {
		In1 *ec2.UnassignIpv6AddressesInput
	}
	lockec2ClientMockUnassignIpv6AddressesRequest.RLock()
	calls = mock.calls.UnassignIpv6AddressesRequest
	lockec2ClientMockUnassignIpv6AddressesRequest.RUnlock()
	return calls
}

// UnassignIpv6AddressesWithContext calls UnassignIpv6AddressesWithContextFunc.
func (mock *ec2ClientMock) UnassignIpv6AddressesWithContext(in1 context.Context, in2 *ec2.UnassignIpv6AddressesInput, in3 ...request.Option) (*ec2.UnassignIpv6AddressesOutput, error) {
	if mock.UnassignIpv6AddressesWithContextFunc == nil {
		panic("ec2ClientMock.UnassignIpv6AddressesWithContextFunc: method is nil but ec2Client.UnassignIpv6AddressesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.UnassignIpv6AddressesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockUnassignIpv6AddressesWithContext.Lock()
	mock.calls.UnassignIpv6AddressesWithContext = append(mock.calls.UnassignIpv6AddressesWithContext, callInfo)
	lockec2ClientMockUnassignIpv6AddressesWithContext.Unlock()
	return mock.UnassignIpv6AddressesWithContextFunc(in1, in2, in3...)
}

// UnassignIpv6AddressesWithContextCalls gets all the calls that were made to UnassignIpv6AddressesWithContext.
// Check the length with:
//     len(mockedec2Client.UnassignIpv6AddressesWithContextCalls())
func (mock *ec2ClientMock) UnassignIpv6AddressesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.UnassignIpv6AddressesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.UnassignIpv6AddressesInput
		In3 []request.Option
	}
	lockec2ClientMockUnassignIpv6AddressesWithContext.RLock()
	calls = mock.calls.UnassignIpv6AddressesWithContext
	lockec2ClientMockUnassignIpv6AddressesWithContext.RUnlock()
	return calls
}

// UnassignPrivateIpAddresses calls UnassignPrivateIpAddressesFunc.
func (mock *ec2ClientMock) UnassignPrivateIpAddresses(in1 *ec2.UnassignPrivateIpAddressesInput) (*ec2.UnassignPrivateIpAddressesOutput, error) {
	if mock.UnassignPrivateIpAddressesFunc == nil {
		panic("ec2ClientMock.UnassignPrivateIpAddressesFunc: method is nil but ec2Client.UnassignPrivateIpAddresses was just called")
	}
	callInfo := struct {
		In1 *ec2.UnassignPrivateIpAddressesInput
	}{
		In1: in1,
	}
	lockec2ClientMockUnassignPrivateIpAddresses.Lock()
	mock.calls.UnassignPrivateIpAddresses = append(mock.calls.UnassignPrivateIpAddresses, callInfo)
	lockec2ClientMockUnassignPrivateIpAddresses.Unlock()
	return mock.UnassignPrivateIpAddressesFunc(in1)
}

// UnassignPrivateIpAddressesCalls gets all the calls that were made to UnassignPrivateIpAddresses.
// Check the length with:
//     len(mockedec2Client.UnassignPrivateIpAddressesCalls())
func (mock *ec2ClientMock) UnassignPrivateIpAddressesCalls() []struct {
	In1 *ec2.UnassignPrivateIpAddressesInput
} {
	var calls []struct {
		In1 *ec2.UnassignPrivateIpAddressesInput
	}
	lockec2ClientMockUnassignPrivateIpAddresses.RLock()
	calls = mock.calls.UnassignPrivateIpAddresses
	lockec2ClientMockUnassignPrivateIpAddresses.RUnlock()
	return calls
}

// UnassignPrivateIpAddressesRequest calls UnassignPrivateIpAddressesRequestFunc.
func (mock *ec2ClientMock) UnassignPrivateIpAddressesRequest(in1 *ec2.UnassignPrivateIpAddressesInput) (*request.Request, *ec2.UnassignPrivateIpAddressesOutput) {
	if mock.UnassignPrivateIpAddressesRequestFunc == nil {
		panic("ec2ClientMock.UnassignPrivateIpAddressesRequestFunc: method is nil but ec2Client.UnassignPrivateIpAddressesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.UnassignPrivateIpAddressesInput
	}{
		In1: in1,
	}
	lockec2ClientMockUnassignPrivateIpAddressesRequest.Lock()
	mock.calls.UnassignPrivateIpAddressesRequest = append(mock.calls.UnassignPrivateIpAddressesRequest, callInfo)
	lockec2ClientMockUnassignPrivateIpAddressesRequest.Unlock()
	return mock.UnassignPrivateIpAddressesRequestFunc(in1)
}

// UnassignPrivateIpAddressesRequestCalls gets all the calls that were made to UnassignPrivateIpAddressesRequest.
// Check the length with:
//     len(mockedec2Client.UnassignPrivateIpAddressesRequestCalls())
func (mock *ec2ClientMock) UnassignPrivateIpAddressesRequestCalls() []struct {
	In1 *ec2.UnassignPrivateIpAddressesInput
} {
	var calls []struct {
		In1 *ec2.UnassignPrivateIpAddressesInput
	}
	lockec2ClientMockUnassignPrivateIpAddressesRequest.RLock()
	calls = mock.calls.UnassignPrivateIpAddressesRequest
	lockec2ClientMockUnassignPrivateIpAddressesRequest.RUnlock()
	return calls
}

// UnassignPrivateIpAddressesWithContext calls UnassignPrivateIpAddressesWithContextFunc.
func (mock *ec2ClientMock) UnassignPrivateIpAddressesWithContext(in1 context.Context, in2 *ec2.UnassignPrivateIpAddressesInput, in3 ...request.Option) (*ec2.UnassignPrivateIpAddressesOutput, error) {
	if mock.UnassignPrivateIpAddressesWithContextFunc == nil {
		panic("ec2ClientMock.UnassignPrivateIpAddressesWithContextFunc: method is nil but ec2Client.UnassignPrivateIpAddressesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.UnassignPrivateIpAddressesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockUnassignPrivateIpAddressesWithContext.Lock()
	mock.calls.UnassignPrivateIpAddressesWithContext = append(mock.calls.UnassignPrivateIpAddressesWithContext, callInfo)
	lockec2ClientMockUnassignPrivateIpAddressesWithContext.Unlock()
	return mock.UnassignPrivateIpAddressesWithContextFunc(in1, in2, in3...)
}

// UnassignPrivateIpAddressesWithContextCalls gets all the calls that were made to UnassignPrivateIpAddressesWithContext.
// Check the length with:
//     len(mockedec2Client.UnassignPrivateIpAddressesWithContextCalls())
func (mock *ec2ClientMock) UnassignPrivateIpAddressesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.UnassignPrivateIpAddressesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.UnassignPrivateIpAddressesInput
		In3 []request.Option
	}
	lockec2ClientMockUnassignPrivateIpAddressesWithContext.RLock()
	calls = mock.calls.UnassignPrivateIpAddressesWithContext
	lockec2ClientMockUnassignPrivateIpAddressesWithContext.RUnlock()
	return calls
}

// UnmonitorInstances calls UnmonitorInstancesFunc.
func (mock *ec2ClientMock) UnmonitorInstances(in1 *ec2.UnmonitorInstancesInput) (*ec2.UnmonitorInstancesOutput, error) {
	if mock.UnmonitorInstancesFunc == nil {
		panic("ec2ClientMock.UnmonitorInstancesFunc: method is nil but ec2Client.UnmonitorInstances was just called")
	}
	callInfo := struct {
		In1 *ec2.UnmonitorInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockUnmonitorInstances.Lock()
	mock.calls.UnmonitorInstances = append(mock.calls.UnmonitorInstances, callInfo)
	lockec2ClientMockUnmonitorInstances.Unlock()
	return mock.UnmonitorInstancesFunc(in1)
}

// UnmonitorInstancesCalls gets all the calls that were made to UnmonitorInstances.
// Check the length with:
//     len(mockedec2Client.UnmonitorInstancesCalls())
func (mock *ec2ClientMock) UnmonitorInstancesCalls() []struct {
	In1 *ec2.UnmonitorInstancesInput
} {
	var calls []struct {
		In1 *ec2.UnmonitorInstancesInput
	}
	lockec2ClientMockUnmonitorInstances.RLock()
	calls = mock.calls.UnmonitorInstances
	lockec2ClientMockUnmonitorInstances.RUnlock()
	return calls
}

// UnmonitorInstancesRequest calls UnmonitorInstancesRequestFunc.
func (mock *ec2ClientMock) UnmonitorInstancesRequest(in1 *ec2.UnmonitorInstancesInput) (*request.Request, *ec2.UnmonitorInstancesOutput) {
	if mock.UnmonitorInstancesRequestFunc == nil {
		panic("ec2ClientMock.UnmonitorInstancesRequestFunc: method is nil but ec2Client.UnmonitorInstancesRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.UnmonitorInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockUnmonitorInstancesRequest.Lock()
	mock.calls.UnmonitorInstancesRequest = append(mock.calls.UnmonitorInstancesRequest, callInfo)
	lockec2ClientMockUnmonitorInstancesRequest.Unlock()
	return mock.UnmonitorInstancesRequestFunc(in1)
}

// UnmonitorInstancesRequestCalls gets all the calls that were made to UnmonitorInstancesRequest.
// Check the length with:
//     len(mockedec2Client.UnmonitorInstancesRequestCalls())
func (mock *ec2ClientMock) UnmonitorInstancesRequestCalls() []struct {
	In1 *ec2.UnmonitorInstancesInput
} {
	var calls []struct {
		In1 *ec2.UnmonitorInstancesInput
	}
	lockec2ClientMockUnmonitorInstancesRequest.RLock()
	calls = mock.calls.UnmonitorInstancesRequest
	lockec2ClientMockUnmonitorInstancesRequest.RUnlock()
	return calls
}

// UnmonitorInstancesWithContext calls UnmonitorInstancesWithContextFunc.
func (mock *ec2ClientMock) UnmonitorInstancesWithContext(in1 context.Context, in2 *ec2.UnmonitorInstancesInput, in3 ...request.Option) (*ec2.UnmonitorInstancesOutput, error) {
	if mock.UnmonitorInstancesWithContextFunc == nil {
		panic("ec2ClientMock.UnmonitorInstancesWithContextFunc: method is nil but ec2Client.UnmonitorInstancesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.UnmonitorInstancesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockUnmonitorInstancesWithContext.Lock()
	mock.calls.UnmonitorInstancesWithContext = append(mock.calls.UnmonitorInstancesWithContext, callInfo)
	lockec2ClientMockUnmonitorInstancesWithContext.Unlock()
	return mock.UnmonitorInstancesWithContextFunc(in1, in2, in3...)
}

// UnmonitorInstancesWithContextCalls gets all the calls that were made to UnmonitorInstancesWithContext.
// Check the length with:
//     len(mockedec2Client.UnmonitorInstancesWithContextCalls())
func (mock *ec2ClientMock) UnmonitorInstancesWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.UnmonitorInstancesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.UnmonitorInstancesInput
		In3 []request.Option
	}
	lockec2ClientMockUnmonitorInstancesWithContext.RLock()
	calls = mock.calls.UnmonitorInstancesWithContext
	lockec2ClientMockUnmonitorInstancesWithContext.RUnlock()
	return calls
}

// UpdateSecurityGroupRuleDescriptionsEgress calls UpdateSecurityGroupRuleDescriptionsEgressFunc.
func (mock *ec2ClientMock) UpdateSecurityGroupRuleDescriptionsEgress(in1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error) {
	if mock.UpdateSecurityGroupRuleDescriptionsEgressFunc == nil {
		panic("ec2ClientMock.UpdateSecurityGroupRuleDescriptionsEgressFunc: method is nil but ec2Client.UpdateSecurityGroupRuleDescriptionsEgress was just called")
	}
	callInfo := struct {
		In1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput
	}{
		In1: in1,
	}
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsEgress.Lock()
	mock.calls.UpdateSecurityGroupRuleDescriptionsEgress = append(mock.calls.UpdateSecurityGroupRuleDescriptionsEgress, callInfo)
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsEgress.Unlock()
	return mock.UpdateSecurityGroupRuleDescriptionsEgressFunc(in1)
}

// UpdateSecurityGroupRuleDescriptionsEgressCalls gets all the calls that were made to UpdateSecurityGroupRuleDescriptionsEgress.
// Check the length with:
//     len(mockedec2Client.UpdateSecurityGroupRuleDescriptionsEgressCalls())
func (mock *ec2ClientMock) UpdateSecurityGroupRuleDescriptionsEgressCalls() []struct {
	In1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput
} {
	var calls []struct {
		In1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput
	}
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsEgress.RLock()
	calls = mock.calls.UpdateSecurityGroupRuleDescriptionsEgress
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsEgress.RUnlock()
	return calls
}

// UpdateSecurityGroupRuleDescriptionsEgressRequest calls UpdateSecurityGroupRuleDescriptionsEgressRequestFunc.
func (mock *ec2ClientMock) UpdateSecurityGroupRuleDescriptionsEgressRequest(in1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) (*request.Request, *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput) {
	if mock.UpdateSecurityGroupRuleDescriptionsEgressRequestFunc == nil {
		panic("ec2ClientMock.UpdateSecurityGroupRuleDescriptionsEgressRequestFunc: method is nil but ec2Client.UpdateSecurityGroupRuleDescriptionsEgressRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput
	}{
		In1: in1,
	}
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsEgressRequest.Lock()
	mock.calls.UpdateSecurityGroupRuleDescriptionsEgressRequest = append(mock.calls.UpdateSecurityGroupRuleDescriptionsEgressRequest, callInfo)
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsEgressRequest.Unlock()
	return mock.UpdateSecurityGroupRuleDescriptionsEgressRequestFunc(in1)
}

// UpdateSecurityGroupRuleDescriptionsEgressRequestCalls gets all the calls that were made to UpdateSecurityGroupRuleDescriptionsEgressRequest.
// Check the length with:
//     len(mockedec2Client.UpdateSecurityGroupRuleDescriptionsEgressRequestCalls())
func (mock *ec2ClientMock) UpdateSecurityGroupRuleDescriptionsEgressRequestCalls() []struct {
	In1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput
} {
	var calls []struct {
		In1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput
	}
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsEgressRequest.RLock()
	calls = mock.calls.UpdateSecurityGroupRuleDescriptionsEgressRequest
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsEgressRequest.RUnlock()
	return calls
}

// UpdateSecurityGroupRuleDescriptionsEgressWithContext calls UpdateSecurityGroupRuleDescriptionsEgressWithContextFunc.
func (mock *ec2ClientMock) UpdateSecurityGroupRuleDescriptionsEgressWithContext(in1 context.Context, in2 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput, in3 ...request.Option) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error) {
	if mock.UpdateSecurityGroupRuleDescriptionsEgressWithContextFunc == nil {
		panic("ec2ClientMock.UpdateSecurityGroupRuleDescriptionsEgressWithContextFunc: method is nil but ec2Client.UpdateSecurityGroupRuleDescriptionsEgressWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsEgressWithContext.Lock()
	mock.calls.UpdateSecurityGroupRuleDescriptionsEgressWithContext = append(mock.calls.UpdateSecurityGroupRuleDescriptionsEgressWithContext, callInfo)
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsEgressWithContext.Unlock()
	return mock.UpdateSecurityGroupRuleDescriptionsEgressWithContextFunc(in1, in2, in3...)
}

// UpdateSecurityGroupRuleDescriptionsEgressWithContextCalls gets all the calls that were made to UpdateSecurityGroupRuleDescriptionsEgressWithContext.
// Check the length with:
//     len(mockedec2Client.UpdateSecurityGroupRuleDescriptionsEgressWithContextCalls())
func (mock *ec2ClientMock) UpdateSecurityGroupRuleDescriptionsEgressWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput
		In3 []request.Option
	}
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsEgressWithContext.RLock()
	calls = mock.calls.UpdateSecurityGroupRuleDescriptionsEgressWithContext
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsEgressWithContext.RUnlock()
	return calls
}

// UpdateSecurityGroupRuleDescriptionsIngress calls UpdateSecurityGroupRuleDescriptionsIngressFunc.
func (mock *ec2ClientMock) UpdateSecurityGroupRuleDescriptionsIngress(in1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error) {
	if mock.UpdateSecurityGroupRuleDescriptionsIngressFunc == nil {
		panic("ec2ClientMock.UpdateSecurityGroupRuleDescriptionsIngressFunc: method is nil but ec2Client.UpdateSecurityGroupRuleDescriptionsIngress was just called")
	}
	callInfo := struct {
		In1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput
	}{
		In1: in1,
	}
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsIngress.Lock()
	mock.calls.UpdateSecurityGroupRuleDescriptionsIngress = append(mock.calls.UpdateSecurityGroupRuleDescriptionsIngress, callInfo)
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsIngress.Unlock()
	return mock.UpdateSecurityGroupRuleDescriptionsIngressFunc(in1)
}

// UpdateSecurityGroupRuleDescriptionsIngressCalls gets all the calls that were made to UpdateSecurityGroupRuleDescriptionsIngress.
// Check the length with:
//     len(mockedec2Client.UpdateSecurityGroupRuleDescriptionsIngressCalls())
func (mock *ec2ClientMock) UpdateSecurityGroupRuleDescriptionsIngressCalls() []struct {
	In1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput
} {
	var calls []struct {
		In1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput
	}
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsIngress.RLock()
	calls = mock.calls.UpdateSecurityGroupRuleDescriptionsIngress
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsIngress.RUnlock()
	return calls
}

// UpdateSecurityGroupRuleDescriptionsIngressRequest calls UpdateSecurityGroupRuleDescriptionsIngressRequestFunc.
func (mock *ec2ClientMock) UpdateSecurityGroupRuleDescriptionsIngressRequest(in1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) (*request.Request, *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput) {
	if mock.UpdateSecurityGroupRuleDescriptionsIngressRequestFunc == nil {
		panic("ec2ClientMock.UpdateSecurityGroupRuleDescriptionsIngressRequestFunc: method is nil but ec2Client.UpdateSecurityGroupRuleDescriptionsIngressRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput
	}{
		In1: in1,
	}
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsIngressRequest.Lock()
	mock.calls.UpdateSecurityGroupRuleDescriptionsIngressRequest = append(mock.calls.UpdateSecurityGroupRuleDescriptionsIngressRequest, callInfo)
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsIngressRequest.Unlock()
	return mock.UpdateSecurityGroupRuleDescriptionsIngressRequestFunc(in1)
}

// UpdateSecurityGroupRuleDescriptionsIngressRequestCalls gets all the calls that were made to UpdateSecurityGroupRuleDescriptionsIngressRequest.
// Check the length with:
//     len(mockedec2Client.UpdateSecurityGroupRuleDescriptionsIngressRequestCalls())
func (mock *ec2ClientMock) UpdateSecurityGroupRuleDescriptionsIngressRequestCalls() []struct {
	In1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput
} {
	var calls []struct {
		In1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput
	}
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsIngressRequest.RLock()
	calls = mock.calls.UpdateSecurityGroupRuleDescriptionsIngressRequest
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsIngressRequest.RUnlock()
	return calls
}

// UpdateSecurityGroupRuleDescriptionsIngressWithContext calls UpdateSecurityGroupRuleDescriptionsIngressWithContextFunc.
func (mock *ec2ClientMock) UpdateSecurityGroupRuleDescriptionsIngressWithContext(in1 context.Context, in2 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput, in3 ...request.Option) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error) {
	if mock.UpdateSecurityGroupRuleDescriptionsIngressWithContextFunc == nil {
		panic("ec2ClientMock.UpdateSecurityGroupRuleDescriptionsIngressWithContextFunc: method is nil but ec2Client.UpdateSecurityGroupRuleDescriptionsIngressWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsIngressWithContext.Lock()
	mock.calls.UpdateSecurityGroupRuleDescriptionsIngressWithContext = append(mock.calls.UpdateSecurityGroupRuleDescriptionsIngressWithContext, callInfo)
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsIngressWithContext.Unlock()
	return mock.UpdateSecurityGroupRuleDescriptionsIngressWithContextFunc(in1, in2, in3...)
}

// UpdateSecurityGroupRuleDescriptionsIngressWithContextCalls gets all the calls that were made to UpdateSecurityGroupRuleDescriptionsIngressWithContext.
// Check the length with:
//     len(mockedec2Client.UpdateSecurityGroupRuleDescriptionsIngressWithContextCalls())
func (mock *ec2ClientMock) UpdateSecurityGroupRuleDescriptionsIngressWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput
		In3 []request.Option
	}
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsIngressWithContext.RLock()
	calls = mock.calls.UpdateSecurityGroupRuleDescriptionsIngressWithContext
	lockec2ClientMockUpdateSecurityGroupRuleDescriptionsIngressWithContext.RUnlock()
	return calls
}

// WaitUntilBundleTaskComplete calls WaitUntilBundleTaskCompleteFunc.
func (mock *ec2ClientMock) WaitUntilBundleTaskComplete(in1 *ec2.DescribeBundleTasksInput) error {
	if mock.WaitUntilBundleTaskCompleteFunc == nil {
		panic("ec2ClientMock.WaitUntilBundleTaskCompleteFunc: method is nil but ec2Client.WaitUntilBundleTaskComplete was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeBundleTasksInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilBundleTaskComplete.Lock()
	mock.calls.WaitUntilBundleTaskComplete = append(mock.calls.WaitUntilBundleTaskComplete, callInfo)
	lockec2ClientMockWaitUntilBundleTaskComplete.Unlock()
	return mock.WaitUntilBundleTaskCompleteFunc(in1)
}

// WaitUntilBundleTaskCompleteCalls gets all the calls that were made to WaitUntilBundleTaskComplete.
// Check the length with:
//     len(mockedec2Client.WaitUntilBundleTaskCompleteCalls())
func (mock *ec2ClientMock) WaitUntilBundleTaskCompleteCalls() []struct {
	In1 *ec2.DescribeBundleTasksInput
} {
	var calls []struct {
		In1 *ec2.DescribeBundleTasksInput
	}
	lockec2ClientMockWaitUntilBundleTaskComplete.RLock()
	calls = mock.calls.WaitUntilBundleTaskComplete
	lockec2ClientMockWaitUntilBundleTaskComplete.RUnlock()
	return calls
}

// WaitUntilBundleTaskCompleteWithContext calls WaitUntilBundleTaskCompleteWithContextFunc.
func (mock *ec2ClientMock) WaitUntilBundleTaskCompleteWithContext(in1 context.Context, in2 *ec2.DescribeBundleTasksInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilBundleTaskCompleteWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilBundleTaskCompleteWithContextFunc: method is nil but ec2Client.WaitUntilBundleTaskCompleteWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeBundleTasksInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilBundleTaskCompleteWithContext.Lock()
	mock.calls.WaitUntilBundleTaskCompleteWithContext = append(mock.calls.WaitUntilBundleTaskCompleteWithContext, callInfo)
	lockec2ClientMockWaitUntilBundleTaskCompleteWithContext.Unlock()
	return mock.WaitUntilBundleTaskCompleteWithContextFunc(in1, in2, in3...)
}

// WaitUntilBundleTaskCompleteWithContextCalls gets all the calls that were made to WaitUntilBundleTaskCompleteWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilBundleTaskCompleteWithContextCalls())
func (mock *ec2ClientMock) WaitUntilBundleTaskCompleteWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeBundleTasksInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeBundleTasksInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilBundleTaskCompleteWithContext.RLock()
	calls = mock.calls.WaitUntilBundleTaskCompleteWithContext
	lockec2ClientMockWaitUntilBundleTaskCompleteWithContext.RUnlock()
	return calls
}

// WaitUntilConversionTaskCancelled calls WaitUntilConversionTaskCancelledFunc.
func (mock *ec2ClientMock) WaitUntilConversionTaskCancelled(in1 *ec2.DescribeConversionTasksInput) error {
	if mock.WaitUntilConversionTaskCancelledFunc == nil {
		panic("ec2ClientMock.WaitUntilConversionTaskCancelledFunc: method is nil but ec2Client.WaitUntilConversionTaskCancelled was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeConversionTasksInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilConversionTaskCancelled.Lock()
	mock.calls.WaitUntilConversionTaskCancelled = append(mock.calls.WaitUntilConversionTaskCancelled, callInfo)
	lockec2ClientMockWaitUntilConversionTaskCancelled.Unlock()
	return mock.WaitUntilConversionTaskCancelledFunc(in1)
}

// WaitUntilConversionTaskCancelledCalls gets all the calls that were made to WaitUntilConversionTaskCancelled.
// Check the length with:
//     len(mockedec2Client.WaitUntilConversionTaskCancelledCalls())
func (mock *ec2ClientMock) WaitUntilConversionTaskCancelledCalls() []struct {
	In1 *ec2.DescribeConversionTasksInput
} {
	var calls []struct {
		In1 *ec2.DescribeConversionTasksInput
	}
	lockec2ClientMockWaitUntilConversionTaskCancelled.RLock()
	calls = mock.calls.WaitUntilConversionTaskCancelled
	lockec2ClientMockWaitUntilConversionTaskCancelled.RUnlock()
	return calls
}

// WaitUntilConversionTaskCancelledWithContext calls WaitUntilConversionTaskCancelledWithContextFunc.
func (mock *ec2ClientMock) WaitUntilConversionTaskCancelledWithContext(in1 context.Context, in2 *ec2.DescribeConversionTasksInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilConversionTaskCancelledWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilConversionTaskCancelledWithContextFunc: method is nil but ec2Client.WaitUntilConversionTaskCancelledWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeConversionTasksInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilConversionTaskCancelledWithContext.Lock()
	mock.calls.WaitUntilConversionTaskCancelledWithContext = append(mock.calls.WaitUntilConversionTaskCancelledWithContext, callInfo)
	lockec2ClientMockWaitUntilConversionTaskCancelledWithContext.Unlock()
	return mock.WaitUntilConversionTaskCancelledWithContextFunc(in1, in2, in3...)
}

// WaitUntilConversionTaskCancelledWithContextCalls gets all the calls that were made to WaitUntilConversionTaskCancelledWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilConversionTaskCancelledWithContextCalls())
func (mock *ec2ClientMock) WaitUntilConversionTaskCancelledWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeConversionTasksInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeConversionTasksInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilConversionTaskCancelledWithContext.RLock()
	calls = mock.calls.WaitUntilConversionTaskCancelledWithContext
	lockec2ClientMockWaitUntilConversionTaskCancelledWithContext.RUnlock()
	return calls
}

// WaitUntilConversionTaskCompleted calls WaitUntilConversionTaskCompletedFunc.
func (mock *ec2ClientMock) WaitUntilConversionTaskCompleted(in1 *ec2.DescribeConversionTasksInput) error {
	if mock.WaitUntilConversionTaskCompletedFunc == nil {
		panic("ec2ClientMock.WaitUntilConversionTaskCompletedFunc: method is nil but ec2Client.WaitUntilConversionTaskCompleted was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeConversionTasksInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilConversionTaskCompleted.Lock()
	mock.calls.WaitUntilConversionTaskCompleted = append(mock.calls.WaitUntilConversionTaskCompleted, callInfo)
	lockec2ClientMockWaitUntilConversionTaskCompleted.Unlock()
	return mock.WaitUntilConversionTaskCompletedFunc(in1)
}

// WaitUntilConversionTaskCompletedCalls gets all the calls that were made to WaitUntilConversionTaskCompleted.
// Check the length with:
//     len(mockedec2Client.WaitUntilConversionTaskCompletedCalls())
func (mock *ec2ClientMock) WaitUntilConversionTaskCompletedCalls() []struct {
	In1 *ec2.DescribeConversionTasksInput
} {
	var calls []struct {
		In1 *ec2.DescribeConversionTasksInput
	}
	lockec2ClientMockWaitUntilConversionTaskCompleted.RLock()
	calls = mock.calls.WaitUntilConversionTaskCompleted
	lockec2ClientMockWaitUntilConversionTaskCompleted.RUnlock()
	return calls
}

// WaitUntilConversionTaskCompletedWithContext calls WaitUntilConversionTaskCompletedWithContextFunc.
func (mock *ec2ClientMock) WaitUntilConversionTaskCompletedWithContext(in1 context.Context, in2 *ec2.DescribeConversionTasksInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilConversionTaskCompletedWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilConversionTaskCompletedWithContextFunc: method is nil but ec2Client.WaitUntilConversionTaskCompletedWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeConversionTasksInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilConversionTaskCompletedWithContext.Lock()
	mock.calls.WaitUntilConversionTaskCompletedWithContext = append(mock.calls.WaitUntilConversionTaskCompletedWithContext, callInfo)
	lockec2ClientMockWaitUntilConversionTaskCompletedWithContext.Unlock()
	return mock.WaitUntilConversionTaskCompletedWithContextFunc(in1, in2, in3...)
}

// WaitUntilConversionTaskCompletedWithContextCalls gets all the calls that were made to WaitUntilConversionTaskCompletedWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilConversionTaskCompletedWithContextCalls())
func (mock *ec2ClientMock) WaitUntilConversionTaskCompletedWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeConversionTasksInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeConversionTasksInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilConversionTaskCompletedWithContext.RLock()
	calls = mock.calls.WaitUntilConversionTaskCompletedWithContext
	lockec2ClientMockWaitUntilConversionTaskCompletedWithContext.RUnlock()
	return calls
}

// WaitUntilConversionTaskDeleted calls WaitUntilConversionTaskDeletedFunc.
func (mock *ec2ClientMock) WaitUntilConversionTaskDeleted(in1 *ec2.DescribeConversionTasksInput) error {
	if mock.WaitUntilConversionTaskDeletedFunc == nil {
		panic("ec2ClientMock.WaitUntilConversionTaskDeletedFunc: method is nil but ec2Client.WaitUntilConversionTaskDeleted was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeConversionTasksInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilConversionTaskDeleted.Lock()
	mock.calls.WaitUntilConversionTaskDeleted = append(mock.calls.WaitUntilConversionTaskDeleted, callInfo)
	lockec2ClientMockWaitUntilConversionTaskDeleted.Unlock()
	return mock.WaitUntilConversionTaskDeletedFunc(in1)
}

// WaitUntilConversionTaskDeletedCalls gets all the calls that were made to WaitUntilConversionTaskDeleted.
// Check the length with:
//     len(mockedec2Client.WaitUntilConversionTaskDeletedCalls())
func (mock *ec2ClientMock) WaitUntilConversionTaskDeletedCalls() []struct {
	In1 *ec2.DescribeConversionTasksInput
} {
	var calls []struct {
		In1 *ec2.DescribeConversionTasksInput
	}
	lockec2ClientMockWaitUntilConversionTaskDeleted.RLock()
	calls = mock.calls.WaitUntilConversionTaskDeleted
	lockec2ClientMockWaitUntilConversionTaskDeleted.RUnlock()
	return calls
}

// WaitUntilConversionTaskDeletedWithContext calls WaitUntilConversionTaskDeletedWithContextFunc.
func (mock *ec2ClientMock) WaitUntilConversionTaskDeletedWithContext(in1 context.Context, in2 *ec2.DescribeConversionTasksInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilConversionTaskDeletedWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilConversionTaskDeletedWithContextFunc: method is nil but ec2Client.WaitUntilConversionTaskDeletedWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeConversionTasksInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilConversionTaskDeletedWithContext.Lock()
	mock.calls.WaitUntilConversionTaskDeletedWithContext = append(mock.calls.WaitUntilConversionTaskDeletedWithContext, callInfo)
	lockec2ClientMockWaitUntilConversionTaskDeletedWithContext.Unlock()
	return mock.WaitUntilConversionTaskDeletedWithContextFunc(in1, in2, in3...)
}

// WaitUntilConversionTaskDeletedWithContextCalls gets all the calls that were made to WaitUntilConversionTaskDeletedWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilConversionTaskDeletedWithContextCalls())
func (mock *ec2ClientMock) WaitUntilConversionTaskDeletedWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeConversionTasksInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeConversionTasksInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilConversionTaskDeletedWithContext.RLock()
	calls = mock.calls.WaitUntilConversionTaskDeletedWithContext
	lockec2ClientMockWaitUntilConversionTaskDeletedWithContext.RUnlock()
	return calls
}

// WaitUntilCustomerGatewayAvailable calls WaitUntilCustomerGatewayAvailableFunc.
func (mock *ec2ClientMock) WaitUntilCustomerGatewayAvailable(in1 *ec2.DescribeCustomerGatewaysInput) error {
	if mock.WaitUntilCustomerGatewayAvailableFunc == nil {
		panic("ec2ClientMock.WaitUntilCustomerGatewayAvailableFunc: method is nil but ec2Client.WaitUntilCustomerGatewayAvailable was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeCustomerGatewaysInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilCustomerGatewayAvailable.Lock()
	mock.calls.WaitUntilCustomerGatewayAvailable = append(mock.calls.WaitUntilCustomerGatewayAvailable, callInfo)
	lockec2ClientMockWaitUntilCustomerGatewayAvailable.Unlock()
	return mock.WaitUntilCustomerGatewayAvailableFunc(in1)
}

// WaitUntilCustomerGatewayAvailableCalls gets all the calls that were made to WaitUntilCustomerGatewayAvailable.
// Check the length with:
//     len(mockedec2Client.WaitUntilCustomerGatewayAvailableCalls())
func (mock *ec2ClientMock) WaitUntilCustomerGatewayAvailableCalls() []struct {
	In1 *ec2.DescribeCustomerGatewaysInput
} {
	var calls []struct {
		In1 *ec2.DescribeCustomerGatewaysInput
	}
	lockec2ClientMockWaitUntilCustomerGatewayAvailable.RLock()
	calls = mock.calls.WaitUntilCustomerGatewayAvailable
	lockec2ClientMockWaitUntilCustomerGatewayAvailable.RUnlock()
	return calls
}

// WaitUntilCustomerGatewayAvailableWithContext calls WaitUntilCustomerGatewayAvailableWithContextFunc.
func (mock *ec2ClientMock) WaitUntilCustomerGatewayAvailableWithContext(in1 context.Context, in2 *ec2.DescribeCustomerGatewaysInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilCustomerGatewayAvailableWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilCustomerGatewayAvailableWithContextFunc: method is nil but ec2Client.WaitUntilCustomerGatewayAvailableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeCustomerGatewaysInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilCustomerGatewayAvailableWithContext.Lock()
	mock.calls.WaitUntilCustomerGatewayAvailableWithContext = append(mock.calls.WaitUntilCustomerGatewayAvailableWithContext, callInfo)
	lockec2ClientMockWaitUntilCustomerGatewayAvailableWithContext.Unlock()
	return mock.WaitUntilCustomerGatewayAvailableWithContextFunc(in1, in2, in3...)
}

// WaitUntilCustomerGatewayAvailableWithContextCalls gets all the calls that were made to WaitUntilCustomerGatewayAvailableWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilCustomerGatewayAvailableWithContextCalls())
func (mock *ec2ClientMock) WaitUntilCustomerGatewayAvailableWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeCustomerGatewaysInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeCustomerGatewaysInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilCustomerGatewayAvailableWithContext.RLock()
	calls = mock.calls.WaitUntilCustomerGatewayAvailableWithContext
	lockec2ClientMockWaitUntilCustomerGatewayAvailableWithContext.RUnlock()
	return calls
}

// WaitUntilExportTaskCancelled calls WaitUntilExportTaskCancelledFunc.
func (mock *ec2ClientMock) WaitUntilExportTaskCancelled(in1 *ec2.DescribeExportTasksInput) error {
	if mock.WaitUntilExportTaskCancelledFunc == nil {
		panic("ec2ClientMock.WaitUntilExportTaskCancelledFunc: method is nil but ec2Client.WaitUntilExportTaskCancelled was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeExportTasksInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilExportTaskCancelled.Lock()
	mock.calls.WaitUntilExportTaskCancelled = append(mock.calls.WaitUntilExportTaskCancelled, callInfo)
	lockec2ClientMockWaitUntilExportTaskCancelled.Unlock()
	return mock.WaitUntilExportTaskCancelledFunc(in1)
}

// WaitUntilExportTaskCancelledCalls gets all the calls that were made to WaitUntilExportTaskCancelled.
// Check the length with:
//     len(mockedec2Client.WaitUntilExportTaskCancelledCalls())
func (mock *ec2ClientMock) WaitUntilExportTaskCancelledCalls() []struct {
	In1 *ec2.DescribeExportTasksInput
} {
	var calls []struct {
		In1 *ec2.DescribeExportTasksInput
	}
	lockec2ClientMockWaitUntilExportTaskCancelled.RLock()
	calls = mock.calls.WaitUntilExportTaskCancelled
	lockec2ClientMockWaitUntilExportTaskCancelled.RUnlock()
	return calls
}

// WaitUntilExportTaskCancelledWithContext calls WaitUntilExportTaskCancelledWithContextFunc.
func (mock *ec2ClientMock) WaitUntilExportTaskCancelledWithContext(in1 context.Context, in2 *ec2.DescribeExportTasksInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilExportTaskCancelledWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilExportTaskCancelledWithContextFunc: method is nil but ec2Client.WaitUntilExportTaskCancelledWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeExportTasksInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilExportTaskCancelledWithContext.Lock()
	mock.calls.WaitUntilExportTaskCancelledWithContext = append(mock.calls.WaitUntilExportTaskCancelledWithContext, callInfo)
	lockec2ClientMockWaitUntilExportTaskCancelledWithContext.Unlock()
	return mock.WaitUntilExportTaskCancelledWithContextFunc(in1, in2, in3...)
}

// WaitUntilExportTaskCancelledWithContextCalls gets all the calls that were made to WaitUntilExportTaskCancelledWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilExportTaskCancelledWithContextCalls())
func (mock *ec2ClientMock) WaitUntilExportTaskCancelledWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeExportTasksInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeExportTasksInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilExportTaskCancelledWithContext.RLock()
	calls = mock.calls.WaitUntilExportTaskCancelledWithContext
	lockec2ClientMockWaitUntilExportTaskCancelledWithContext.RUnlock()
	return calls
}

// WaitUntilExportTaskCompleted calls WaitUntilExportTaskCompletedFunc.
func (mock *ec2ClientMock) WaitUntilExportTaskCompleted(in1 *ec2.DescribeExportTasksInput) error {
	if mock.WaitUntilExportTaskCompletedFunc == nil {
		panic("ec2ClientMock.WaitUntilExportTaskCompletedFunc: method is nil but ec2Client.WaitUntilExportTaskCompleted was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeExportTasksInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilExportTaskCompleted.Lock()
	mock.calls.WaitUntilExportTaskCompleted = append(mock.calls.WaitUntilExportTaskCompleted, callInfo)
	lockec2ClientMockWaitUntilExportTaskCompleted.Unlock()
	return mock.WaitUntilExportTaskCompletedFunc(in1)
}

// WaitUntilExportTaskCompletedCalls gets all the calls that were made to WaitUntilExportTaskCompleted.
// Check the length with:
//     len(mockedec2Client.WaitUntilExportTaskCompletedCalls())
func (mock *ec2ClientMock) WaitUntilExportTaskCompletedCalls() []struct {
	In1 *ec2.DescribeExportTasksInput
} {
	var calls []struct {
		In1 *ec2.DescribeExportTasksInput
	}
	lockec2ClientMockWaitUntilExportTaskCompleted.RLock()
	calls = mock.calls.WaitUntilExportTaskCompleted
	lockec2ClientMockWaitUntilExportTaskCompleted.RUnlock()
	return calls
}

// WaitUntilExportTaskCompletedWithContext calls WaitUntilExportTaskCompletedWithContextFunc.
func (mock *ec2ClientMock) WaitUntilExportTaskCompletedWithContext(in1 context.Context, in2 *ec2.DescribeExportTasksInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilExportTaskCompletedWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilExportTaskCompletedWithContextFunc: method is nil but ec2Client.WaitUntilExportTaskCompletedWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeExportTasksInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilExportTaskCompletedWithContext.Lock()
	mock.calls.WaitUntilExportTaskCompletedWithContext = append(mock.calls.WaitUntilExportTaskCompletedWithContext, callInfo)
	lockec2ClientMockWaitUntilExportTaskCompletedWithContext.Unlock()
	return mock.WaitUntilExportTaskCompletedWithContextFunc(in1, in2, in3...)
}

// WaitUntilExportTaskCompletedWithContextCalls gets all the calls that were made to WaitUntilExportTaskCompletedWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilExportTaskCompletedWithContextCalls())
func (mock *ec2ClientMock) WaitUntilExportTaskCompletedWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeExportTasksInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeExportTasksInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilExportTaskCompletedWithContext.RLock()
	calls = mock.calls.WaitUntilExportTaskCompletedWithContext
	lockec2ClientMockWaitUntilExportTaskCompletedWithContext.RUnlock()
	return calls
}

// WaitUntilImageAvailable calls WaitUntilImageAvailableFunc.
func (mock *ec2ClientMock) WaitUntilImageAvailable(in1 *ec2.DescribeImagesInput) error {
	if mock.WaitUntilImageAvailableFunc == nil {
		panic("ec2ClientMock.WaitUntilImageAvailableFunc: method is nil but ec2Client.WaitUntilImageAvailable was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeImagesInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilImageAvailable.Lock()
	mock.calls.WaitUntilImageAvailable = append(mock.calls.WaitUntilImageAvailable, callInfo)
	lockec2ClientMockWaitUntilImageAvailable.Unlock()
	return mock.WaitUntilImageAvailableFunc(in1)
}

// WaitUntilImageAvailableCalls gets all the calls that were made to WaitUntilImageAvailable.
// Check the length with:
//     len(mockedec2Client.WaitUntilImageAvailableCalls())
func (mock *ec2ClientMock) WaitUntilImageAvailableCalls() []struct {
	In1 *ec2.DescribeImagesInput
} {
	var calls []struct {
		In1 *ec2.DescribeImagesInput
	}
	lockec2ClientMockWaitUntilImageAvailable.RLock()
	calls = mock.calls.WaitUntilImageAvailable
	lockec2ClientMockWaitUntilImageAvailable.RUnlock()
	return calls
}

// WaitUntilImageAvailableWithContext calls WaitUntilImageAvailableWithContextFunc.
func (mock *ec2ClientMock) WaitUntilImageAvailableWithContext(in1 context.Context, in2 *ec2.DescribeImagesInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilImageAvailableWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilImageAvailableWithContextFunc: method is nil but ec2Client.WaitUntilImageAvailableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeImagesInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilImageAvailableWithContext.Lock()
	mock.calls.WaitUntilImageAvailableWithContext = append(mock.calls.WaitUntilImageAvailableWithContext, callInfo)
	lockec2ClientMockWaitUntilImageAvailableWithContext.Unlock()
	return mock.WaitUntilImageAvailableWithContextFunc(in1, in2, in3...)
}

// WaitUntilImageAvailableWithContextCalls gets all the calls that were made to WaitUntilImageAvailableWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilImageAvailableWithContextCalls())
func (mock *ec2ClientMock) WaitUntilImageAvailableWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeImagesInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeImagesInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilImageAvailableWithContext.RLock()
	calls = mock.calls.WaitUntilImageAvailableWithContext
	lockec2ClientMockWaitUntilImageAvailableWithContext.RUnlock()
	return calls
}

// WaitUntilImageExists calls WaitUntilImageExistsFunc.
func (mock *ec2ClientMock) WaitUntilImageExists(in1 *ec2.DescribeImagesInput) error {
	if mock.WaitUntilImageExistsFunc == nil {
		panic("ec2ClientMock.WaitUntilImageExistsFunc: method is nil but ec2Client.WaitUntilImageExists was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeImagesInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilImageExists.Lock()
	mock.calls.WaitUntilImageExists = append(mock.calls.WaitUntilImageExists, callInfo)
	lockec2ClientMockWaitUntilImageExists.Unlock()
	return mock.WaitUntilImageExistsFunc(in1)
}

// WaitUntilImageExistsCalls gets all the calls that were made to WaitUntilImageExists.
// Check the length with:
//     len(mockedec2Client.WaitUntilImageExistsCalls())
func (mock *ec2ClientMock) WaitUntilImageExistsCalls() []struct {
	In1 *ec2.DescribeImagesInput
} {
	var calls []struct {
		In1 *ec2.DescribeImagesInput
	}
	lockec2ClientMockWaitUntilImageExists.RLock()
	calls = mock.calls.WaitUntilImageExists
	lockec2ClientMockWaitUntilImageExists.RUnlock()
	return calls
}

// WaitUntilImageExistsWithContext calls WaitUntilImageExistsWithContextFunc.
func (mock *ec2ClientMock) WaitUntilImageExistsWithContext(in1 context.Context, in2 *ec2.DescribeImagesInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilImageExistsWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilImageExistsWithContextFunc: method is nil but ec2Client.WaitUntilImageExistsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeImagesInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilImageExistsWithContext.Lock()
	mock.calls.WaitUntilImageExistsWithContext = append(mock.calls.WaitUntilImageExistsWithContext, callInfo)
	lockec2ClientMockWaitUntilImageExistsWithContext.Unlock()
	return mock.WaitUntilImageExistsWithContextFunc(in1, in2, in3...)
}

// WaitUntilImageExistsWithContextCalls gets all the calls that were made to WaitUntilImageExistsWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilImageExistsWithContextCalls())
func (mock *ec2ClientMock) WaitUntilImageExistsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeImagesInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeImagesInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilImageExistsWithContext.RLock()
	calls = mock.calls.WaitUntilImageExistsWithContext
	lockec2ClientMockWaitUntilImageExistsWithContext.RUnlock()
	return calls
}

// WaitUntilInstanceExists calls WaitUntilInstanceExistsFunc.
func (mock *ec2ClientMock) WaitUntilInstanceExists(in1 *ec2.DescribeInstancesInput) error {
	if mock.WaitUntilInstanceExistsFunc == nil {
		panic("ec2ClientMock.WaitUntilInstanceExistsFunc: method is nil but ec2Client.WaitUntilInstanceExists was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilInstanceExists.Lock()
	mock.calls.WaitUntilInstanceExists = append(mock.calls.WaitUntilInstanceExists, callInfo)
	lockec2ClientMockWaitUntilInstanceExists.Unlock()
	return mock.WaitUntilInstanceExistsFunc(in1)
}

// WaitUntilInstanceExistsCalls gets all the calls that were made to WaitUntilInstanceExists.
// Check the length with:
//     len(mockedec2Client.WaitUntilInstanceExistsCalls())
func (mock *ec2ClientMock) WaitUntilInstanceExistsCalls() []struct {
	In1 *ec2.DescribeInstancesInput
} {
	var calls []struct {
		In1 *ec2.DescribeInstancesInput
	}
	lockec2ClientMockWaitUntilInstanceExists.RLock()
	calls = mock.calls.WaitUntilInstanceExists
	lockec2ClientMockWaitUntilInstanceExists.RUnlock()
	return calls
}

// WaitUntilInstanceExistsWithContext calls WaitUntilInstanceExistsWithContextFunc.
func (mock *ec2ClientMock) WaitUntilInstanceExistsWithContext(in1 context.Context, in2 *ec2.DescribeInstancesInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilInstanceExistsWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilInstanceExistsWithContextFunc: method is nil but ec2Client.WaitUntilInstanceExistsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeInstancesInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilInstanceExistsWithContext.Lock()
	mock.calls.WaitUntilInstanceExistsWithContext = append(mock.calls.WaitUntilInstanceExistsWithContext, callInfo)
	lockec2ClientMockWaitUntilInstanceExistsWithContext.Unlock()
	return mock.WaitUntilInstanceExistsWithContextFunc(in1, in2, in3...)
}

// WaitUntilInstanceExistsWithContextCalls gets all the calls that were made to WaitUntilInstanceExistsWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilInstanceExistsWithContextCalls())
func (mock *ec2ClientMock) WaitUntilInstanceExistsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeInstancesInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeInstancesInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilInstanceExistsWithContext.RLock()
	calls = mock.calls.WaitUntilInstanceExistsWithContext
	lockec2ClientMockWaitUntilInstanceExistsWithContext.RUnlock()
	return calls
}

// WaitUntilInstanceRunning calls WaitUntilInstanceRunningFunc.
func (mock *ec2ClientMock) WaitUntilInstanceRunning(in1 *ec2.DescribeInstancesInput) error {
	if mock.WaitUntilInstanceRunningFunc == nil {
		panic("ec2ClientMock.WaitUntilInstanceRunningFunc: method is nil but ec2Client.WaitUntilInstanceRunning was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilInstanceRunning.Lock()
	mock.calls.WaitUntilInstanceRunning = append(mock.calls.WaitUntilInstanceRunning, callInfo)
	lockec2ClientMockWaitUntilInstanceRunning.Unlock()
	return mock.WaitUntilInstanceRunningFunc(in1)
}

// WaitUntilInstanceRunningCalls gets all the calls that were made to WaitUntilInstanceRunning.
// Check the length with:
//     len(mockedec2Client.WaitUntilInstanceRunningCalls())
func (mock *ec2ClientMock) WaitUntilInstanceRunningCalls() []struct {
	In1 *ec2.DescribeInstancesInput
} {
	var calls []struct {
		In1 *ec2.DescribeInstancesInput
	}
	lockec2ClientMockWaitUntilInstanceRunning.RLock()
	calls = mock.calls.WaitUntilInstanceRunning
	lockec2ClientMockWaitUntilInstanceRunning.RUnlock()
	return calls
}

// WaitUntilInstanceRunningWithContext calls WaitUntilInstanceRunningWithContextFunc.
func (mock *ec2ClientMock) WaitUntilInstanceRunningWithContext(in1 context.Context, in2 *ec2.DescribeInstancesInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilInstanceRunningWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilInstanceRunningWithContextFunc: method is nil but ec2Client.WaitUntilInstanceRunningWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeInstancesInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilInstanceRunningWithContext.Lock()
	mock.calls.WaitUntilInstanceRunningWithContext = append(mock.calls.WaitUntilInstanceRunningWithContext, callInfo)
	lockec2ClientMockWaitUntilInstanceRunningWithContext.Unlock()
	return mock.WaitUntilInstanceRunningWithContextFunc(in1, in2, in3...)
}

// WaitUntilInstanceRunningWithContextCalls gets all the calls that were made to WaitUntilInstanceRunningWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilInstanceRunningWithContextCalls())
func (mock *ec2ClientMock) WaitUntilInstanceRunningWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeInstancesInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeInstancesInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilInstanceRunningWithContext.RLock()
	calls = mock.calls.WaitUntilInstanceRunningWithContext
	lockec2ClientMockWaitUntilInstanceRunningWithContext.RUnlock()
	return calls
}

// WaitUntilInstanceStatusOk calls WaitUntilInstanceStatusOkFunc.
func (mock *ec2ClientMock) WaitUntilInstanceStatusOk(in1 *ec2.DescribeInstanceStatusInput) error {
	if mock.WaitUntilInstanceStatusOkFunc == nil {
		panic("ec2ClientMock.WaitUntilInstanceStatusOkFunc: method is nil but ec2Client.WaitUntilInstanceStatusOk was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeInstanceStatusInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilInstanceStatusOk.Lock()
	mock.calls.WaitUntilInstanceStatusOk = append(mock.calls.WaitUntilInstanceStatusOk, callInfo)
	lockec2ClientMockWaitUntilInstanceStatusOk.Unlock()
	return mock.WaitUntilInstanceStatusOkFunc(in1)
}

// WaitUntilInstanceStatusOkCalls gets all the calls that were made to WaitUntilInstanceStatusOk.
// Check the length with:
//     len(mockedec2Client.WaitUntilInstanceStatusOkCalls())
func (mock *ec2ClientMock) WaitUntilInstanceStatusOkCalls() []struct {
	In1 *ec2.DescribeInstanceStatusInput
} {
	var calls []struct {
		In1 *ec2.DescribeInstanceStatusInput
	}
	lockec2ClientMockWaitUntilInstanceStatusOk.RLock()
	calls = mock.calls.WaitUntilInstanceStatusOk
	lockec2ClientMockWaitUntilInstanceStatusOk.RUnlock()
	return calls
}

// WaitUntilInstanceStatusOkWithContext calls WaitUntilInstanceStatusOkWithContextFunc.
func (mock *ec2ClientMock) WaitUntilInstanceStatusOkWithContext(in1 context.Context, in2 *ec2.DescribeInstanceStatusInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilInstanceStatusOkWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilInstanceStatusOkWithContextFunc: method is nil but ec2Client.WaitUntilInstanceStatusOkWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeInstanceStatusInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilInstanceStatusOkWithContext.Lock()
	mock.calls.WaitUntilInstanceStatusOkWithContext = append(mock.calls.WaitUntilInstanceStatusOkWithContext, callInfo)
	lockec2ClientMockWaitUntilInstanceStatusOkWithContext.Unlock()
	return mock.WaitUntilInstanceStatusOkWithContextFunc(in1, in2, in3...)
}

// WaitUntilInstanceStatusOkWithContextCalls gets all the calls that were made to WaitUntilInstanceStatusOkWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilInstanceStatusOkWithContextCalls())
func (mock *ec2ClientMock) WaitUntilInstanceStatusOkWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeInstanceStatusInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeInstanceStatusInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilInstanceStatusOkWithContext.RLock()
	calls = mock.calls.WaitUntilInstanceStatusOkWithContext
	lockec2ClientMockWaitUntilInstanceStatusOkWithContext.RUnlock()
	return calls
}

// WaitUntilInstanceStopped calls WaitUntilInstanceStoppedFunc.
func (mock *ec2ClientMock) WaitUntilInstanceStopped(in1 *ec2.DescribeInstancesInput) error {
	if mock.WaitUntilInstanceStoppedFunc == nil {
		panic("ec2ClientMock.WaitUntilInstanceStoppedFunc: method is nil but ec2Client.WaitUntilInstanceStopped was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilInstanceStopped.Lock()
	mock.calls.WaitUntilInstanceStopped = append(mock.calls.WaitUntilInstanceStopped, callInfo)
	lockec2ClientMockWaitUntilInstanceStopped.Unlock()
	return mock.WaitUntilInstanceStoppedFunc(in1)
}

// WaitUntilInstanceStoppedCalls gets all the calls that were made to WaitUntilInstanceStopped.
// Check the length with:
//     len(mockedec2Client.WaitUntilInstanceStoppedCalls())
func (mock *ec2ClientMock) WaitUntilInstanceStoppedCalls() []struct {
	In1 *ec2.DescribeInstancesInput
} {
	var calls []struct {
		In1 *ec2.DescribeInstancesInput
	}
	lockec2ClientMockWaitUntilInstanceStopped.RLock()
	calls = mock.calls.WaitUntilInstanceStopped
	lockec2ClientMockWaitUntilInstanceStopped.RUnlock()
	return calls
}

// WaitUntilInstanceStoppedWithContext calls WaitUntilInstanceStoppedWithContextFunc.
func (mock *ec2ClientMock) WaitUntilInstanceStoppedWithContext(in1 context.Context, in2 *ec2.DescribeInstancesInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilInstanceStoppedWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilInstanceStoppedWithContextFunc: method is nil but ec2Client.WaitUntilInstanceStoppedWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeInstancesInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilInstanceStoppedWithContext.Lock()
	mock.calls.WaitUntilInstanceStoppedWithContext = append(mock.calls.WaitUntilInstanceStoppedWithContext, callInfo)
	lockec2ClientMockWaitUntilInstanceStoppedWithContext.Unlock()
	return mock.WaitUntilInstanceStoppedWithContextFunc(in1, in2, in3...)
}

// WaitUntilInstanceStoppedWithContextCalls gets all the calls that were made to WaitUntilInstanceStoppedWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilInstanceStoppedWithContextCalls())
func (mock *ec2ClientMock) WaitUntilInstanceStoppedWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeInstancesInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeInstancesInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilInstanceStoppedWithContext.RLock()
	calls = mock.calls.WaitUntilInstanceStoppedWithContext
	lockec2ClientMockWaitUntilInstanceStoppedWithContext.RUnlock()
	return calls
}

// WaitUntilInstanceTerminated calls WaitUntilInstanceTerminatedFunc.
func (mock *ec2ClientMock) WaitUntilInstanceTerminated(in1 *ec2.DescribeInstancesInput) error {
	if mock.WaitUntilInstanceTerminatedFunc == nil {
		panic("ec2ClientMock.WaitUntilInstanceTerminatedFunc: method is nil but ec2Client.WaitUntilInstanceTerminated was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeInstancesInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilInstanceTerminated.Lock()
	mock.calls.WaitUntilInstanceTerminated = append(mock.calls.WaitUntilInstanceTerminated, callInfo)
	lockec2ClientMockWaitUntilInstanceTerminated.Unlock()
	return mock.WaitUntilInstanceTerminatedFunc(in1)
}

// WaitUntilInstanceTerminatedCalls gets all the calls that were made to WaitUntilInstanceTerminated.
// Check the length with:
//     len(mockedec2Client.WaitUntilInstanceTerminatedCalls())
func (mock *ec2ClientMock) WaitUntilInstanceTerminatedCalls() []struct {
	In1 *ec2.DescribeInstancesInput
} {
	var calls []struct {
		In1 *ec2.DescribeInstancesInput
	}
	lockec2ClientMockWaitUntilInstanceTerminated.RLock()
	calls = mock.calls.WaitUntilInstanceTerminated
	lockec2ClientMockWaitUntilInstanceTerminated.RUnlock()
	return calls
}

// WaitUntilInstanceTerminatedWithContext calls WaitUntilInstanceTerminatedWithContextFunc.
func (mock *ec2ClientMock) WaitUntilInstanceTerminatedWithContext(in1 context.Context, in2 *ec2.DescribeInstancesInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilInstanceTerminatedWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilInstanceTerminatedWithContextFunc: method is nil but ec2Client.WaitUntilInstanceTerminatedWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeInstancesInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilInstanceTerminatedWithContext.Lock()
	mock.calls.WaitUntilInstanceTerminatedWithContext = append(mock.calls.WaitUntilInstanceTerminatedWithContext, callInfo)
	lockec2ClientMockWaitUntilInstanceTerminatedWithContext.Unlock()
	return mock.WaitUntilInstanceTerminatedWithContextFunc(in1, in2, in3...)
}

// WaitUntilInstanceTerminatedWithContextCalls gets all the calls that were made to WaitUntilInstanceTerminatedWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilInstanceTerminatedWithContextCalls())
func (mock *ec2ClientMock) WaitUntilInstanceTerminatedWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeInstancesInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeInstancesInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilInstanceTerminatedWithContext.RLock()
	calls = mock.calls.WaitUntilInstanceTerminatedWithContext
	lockec2ClientMockWaitUntilInstanceTerminatedWithContext.RUnlock()
	return calls
}

// WaitUntilKeyPairExists calls WaitUntilKeyPairExistsFunc.
func (mock *ec2ClientMock) WaitUntilKeyPairExists(in1 *ec2.DescribeKeyPairsInput) error {
	if mock.WaitUntilKeyPairExistsFunc == nil {
		panic("ec2ClientMock.WaitUntilKeyPairExistsFunc: method is nil but ec2Client.WaitUntilKeyPairExists was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeKeyPairsInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilKeyPairExists.Lock()
	mock.calls.WaitUntilKeyPairExists = append(mock.calls.WaitUntilKeyPairExists, callInfo)
	lockec2ClientMockWaitUntilKeyPairExists.Unlock()
	return mock.WaitUntilKeyPairExistsFunc(in1)
}

// WaitUntilKeyPairExistsCalls gets all the calls that were made to WaitUntilKeyPairExists.
// Check the length with:
//     len(mockedec2Client.WaitUntilKeyPairExistsCalls())
func (mock *ec2ClientMock) WaitUntilKeyPairExistsCalls() []struct {
	In1 *ec2.DescribeKeyPairsInput
} {
	var calls []struct {
		In1 *ec2.DescribeKeyPairsInput
	}
	lockec2ClientMockWaitUntilKeyPairExists.RLock()
	calls = mock.calls.WaitUntilKeyPairExists
	lockec2ClientMockWaitUntilKeyPairExists.RUnlock()
	return calls
}

// WaitUntilKeyPairExistsWithContext calls WaitUntilKeyPairExistsWithContextFunc.
func (mock *ec2ClientMock) WaitUntilKeyPairExistsWithContext(in1 context.Context, in2 *ec2.DescribeKeyPairsInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilKeyPairExistsWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilKeyPairExistsWithContextFunc: method is nil but ec2Client.WaitUntilKeyPairExistsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeKeyPairsInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilKeyPairExistsWithContext.Lock()
	mock.calls.WaitUntilKeyPairExistsWithContext = append(mock.calls.WaitUntilKeyPairExistsWithContext, callInfo)
	lockec2ClientMockWaitUntilKeyPairExistsWithContext.Unlock()
	return mock.WaitUntilKeyPairExistsWithContextFunc(in1, in2, in3...)
}

// WaitUntilKeyPairExistsWithContextCalls gets all the calls that were made to WaitUntilKeyPairExistsWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilKeyPairExistsWithContextCalls())
func (mock *ec2ClientMock) WaitUntilKeyPairExistsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeKeyPairsInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeKeyPairsInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilKeyPairExistsWithContext.RLock()
	calls = mock.calls.WaitUntilKeyPairExistsWithContext
	lockec2ClientMockWaitUntilKeyPairExistsWithContext.RUnlock()
	return calls
}

// WaitUntilNatGatewayAvailable calls WaitUntilNatGatewayAvailableFunc.
func (mock *ec2ClientMock) WaitUntilNatGatewayAvailable(in1 *ec2.DescribeNatGatewaysInput) error {
	if mock.WaitUntilNatGatewayAvailableFunc == nil {
		panic("ec2ClientMock.WaitUntilNatGatewayAvailableFunc: method is nil but ec2Client.WaitUntilNatGatewayAvailable was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeNatGatewaysInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilNatGatewayAvailable.Lock()
	mock.calls.WaitUntilNatGatewayAvailable = append(mock.calls.WaitUntilNatGatewayAvailable, callInfo)
	lockec2ClientMockWaitUntilNatGatewayAvailable.Unlock()
	return mock.WaitUntilNatGatewayAvailableFunc(in1)
}

// WaitUntilNatGatewayAvailableCalls gets all the calls that were made to WaitUntilNatGatewayAvailable.
// Check the length with:
//     len(mockedec2Client.WaitUntilNatGatewayAvailableCalls())
func (mock *ec2ClientMock) WaitUntilNatGatewayAvailableCalls() []struct {
	In1 *ec2.DescribeNatGatewaysInput
} {
	var calls []struct {
		In1 *ec2.DescribeNatGatewaysInput
	}
	lockec2ClientMockWaitUntilNatGatewayAvailable.RLock()
	calls = mock.calls.WaitUntilNatGatewayAvailable
	lockec2ClientMockWaitUntilNatGatewayAvailable.RUnlock()
	return calls
}

// WaitUntilNatGatewayAvailableWithContext calls WaitUntilNatGatewayAvailableWithContextFunc.
func (mock *ec2ClientMock) WaitUntilNatGatewayAvailableWithContext(in1 context.Context, in2 *ec2.DescribeNatGatewaysInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilNatGatewayAvailableWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilNatGatewayAvailableWithContextFunc: method is nil but ec2Client.WaitUntilNatGatewayAvailableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeNatGatewaysInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilNatGatewayAvailableWithContext.Lock()
	mock.calls.WaitUntilNatGatewayAvailableWithContext = append(mock.calls.WaitUntilNatGatewayAvailableWithContext, callInfo)
	lockec2ClientMockWaitUntilNatGatewayAvailableWithContext.Unlock()
	return mock.WaitUntilNatGatewayAvailableWithContextFunc(in1, in2, in3...)
}

// WaitUntilNatGatewayAvailableWithContextCalls gets all the calls that were made to WaitUntilNatGatewayAvailableWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilNatGatewayAvailableWithContextCalls())
func (mock *ec2ClientMock) WaitUntilNatGatewayAvailableWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeNatGatewaysInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeNatGatewaysInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilNatGatewayAvailableWithContext.RLock()
	calls = mock.calls.WaitUntilNatGatewayAvailableWithContext
	lockec2ClientMockWaitUntilNatGatewayAvailableWithContext.RUnlock()
	return calls
}

// WaitUntilNetworkInterfaceAvailable calls WaitUntilNetworkInterfaceAvailableFunc.
func (mock *ec2ClientMock) WaitUntilNetworkInterfaceAvailable(in1 *ec2.DescribeNetworkInterfacesInput) error {
	if mock.WaitUntilNetworkInterfaceAvailableFunc == nil {
		panic("ec2ClientMock.WaitUntilNetworkInterfaceAvailableFunc: method is nil but ec2Client.WaitUntilNetworkInterfaceAvailable was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeNetworkInterfacesInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilNetworkInterfaceAvailable.Lock()
	mock.calls.WaitUntilNetworkInterfaceAvailable = append(mock.calls.WaitUntilNetworkInterfaceAvailable, callInfo)
	lockec2ClientMockWaitUntilNetworkInterfaceAvailable.Unlock()
	return mock.WaitUntilNetworkInterfaceAvailableFunc(in1)
}

// WaitUntilNetworkInterfaceAvailableCalls gets all the calls that were made to WaitUntilNetworkInterfaceAvailable.
// Check the length with:
//     len(mockedec2Client.WaitUntilNetworkInterfaceAvailableCalls())
func (mock *ec2ClientMock) WaitUntilNetworkInterfaceAvailableCalls() []struct {
	In1 *ec2.DescribeNetworkInterfacesInput
} {
	var calls []struct {
		In1 *ec2.DescribeNetworkInterfacesInput
	}
	lockec2ClientMockWaitUntilNetworkInterfaceAvailable.RLock()
	calls = mock.calls.WaitUntilNetworkInterfaceAvailable
	lockec2ClientMockWaitUntilNetworkInterfaceAvailable.RUnlock()
	return calls
}

// WaitUntilNetworkInterfaceAvailableWithContext calls WaitUntilNetworkInterfaceAvailableWithContextFunc.
func (mock *ec2ClientMock) WaitUntilNetworkInterfaceAvailableWithContext(in1 context.Context, in2 *ec2.DescribeNetworkInterfacesInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilNetworkInterfaceAvailableWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilNetworkInterfaceAvailableWithContextFunc: method is nil but ec2Client.WaitUntilNetworkInterfaceAvailableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeNetworkInterfacesInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilNetworkInterfaceAvailableWithContext.Lock()
	mock.calls.WaitUntilNetworkInterfaceAvailableWithContext = append(mock.calls.WaitUntilNetworkInterfaceAvailableWithContext, callInfo)
	lockec2ClientMockWaitUntilNetworkInterfaceAvailableWithContext.Unlock()
	return mock.WaitUntilNetworkInterfaceAvailableWithContextFunc(in1, in2, in3...)
}

// WaitUntilNetworkInterfaceAvailableWithContextCalls gets all the calls that were made to WaitUntilNetworkInterfaceAvailableWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilNetworkInterfaceAvailableWithContextCalls())
func (mock *ec2ClientMock) WaitUntilNetworkInterfaceAvailableWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeNetworkInterfacesInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeNetworkInterfacesInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilNetworkInterfaceAvailableWithContext.RLock()
	calls = mock.calls.WaitUntilNetworkInterfaceAvailableWithContext
	lockec2ClientMockWaitUntilNetworkInterfaceAvailableWithContext.RUnlock()
	return calls
}

// WaitUntilPasswordDataAvailable calls WaitUntilPasswordDataAvailableFunc.
func (mock *ec2ClientMock) WaitUntilPasswordDataAvailable(in1 *ec2.GetPasswordDataInput) error {
	if mock.WaitUntilPasswordDataAvailableFunc == nil {
		panic("ec2ClientMock.WaitUntilPasswordDataAvailableFunc: method is nil but ec2Client.WaitUntilPasswordDataAvailable was just called")
	}
	callInfo := struct {
		In1 *ec2.GetPasswordDataInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilPasswordDataAvailable.Lock()
	mock.calls.WaitUntilPasswordDataAvailable = append(mock.calls.WaitUntilPasswordDataAvailable, callInfo)
	lockec2ClientMockWaitUntilPasswordDataAvailable.Unlock()
	return mock.WaitUntilPasswordDataAvailableFunc(in1)
}

// WaitUntilPasswordDataAvailableCalls gets all the calls that were made to WaitUntilPasswordDataAvailable.
// Check the length with:
//     len(mockedec2Client.WaitUntilPasswordDataAvailableCalls())
func (mock *ec2ClientMock) WaitUntilPasswordDataAvailableCalls() []struct {
	In1 *ec2.GetPasswordDataInput
} {
	var calls []struct {
		In1 *ec2.GetPasswordDataInput
	}
	lockec2ClientMockWaitUntilPasswordDataAvailable.RLock()
	calls = mock.calls.WaitUntilPasswordDataAvailable
	lockec2ClientMockWaitUntilPasswordDataAvailable.RUnlock()
	return calls
}

// WaitUntilPasswordDataAvailableWithContext calls WaitUntilPasswordDataAvailableWithContextFunc.
func (mock *ec2ClientMock) WaitUntilPasswordDataAvailableWithContext(in1 context.Context, in2 *ec2.GetPasswordDataInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilPasswordDataAvailableWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilPasswordDataAvailableWithContextFunc: method is nil but ec2Client.WaitUntilPasswordDataAvailableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.GetPasswordDataInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilPasswordDataAvailableWithContext.Lock()
	mock.calls.WaitUntilPasswordDataAvailableWithContext = append(mock.calls.WaitUntilPasswordDataAvailableWithContext, callInfo)
	lockec2ClientMockWaitUntilPasswordDataAvailableWithContext.Unlock()
	return mock.WaitUntilPasswordDataAvailableWithContextFunc(in1, in2, in3...)
}

// WaitUntilPasswordDataAvailableWithContextCalls gets all the calls that were made to WaitUntilPasswordDataAvailableWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilPasswordDataAvailableWithContextCalls())
func (mock *ec2ClientMock) WaitUntilPasswordDataAvailableWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.GetPasswordDataInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.GetPasswordDataInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilPasswordDataAvailableWithContext.RLock()
	calls = mock.calls.WaitUntilPasswordDataAvailableWithContext
	lockec2ClientMockWaitUntilPasswordDataAvailableWithContext.RUnlock()
	return calls
}

// WaitUntilSecurityGroupExists calls WaitUntilSecurityGroupExistsFunc.
func (mock *ec2ClientMock) WaitUntilSecurityGroupExists(in1 *ec2.DescribeSecurityGroupsInput) error {
	if mock.WaitUntilSecurityGroupExistsFunc == nil {
		panic("ec2ClientMock.WaitUntilSecurityGroupExistsFunc: method is nil but ec2Client.WaitUntilSecurityGroupExists was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSecurityGroupsInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilSecurityGroupExists.Lock()
	mock.calls.WaitUntilSecurityGroupExists = append(mock.calls.WaitUntilSecurityGroupExists, callInfo)
	lockec2ClientMockWaitUntilSecurityGroupExists.Unlock()
	return mock.WaitUntilSecurityGroupExistsFunc(in1)
}

// WaitUntilSecurityGroupExistsCalls gets all the calls that were made to WaitUntilSecurityGroupExists.
// Check the length with:
//     len(mockedec2Client.WaitUntilSecurityGroupExistsCalls())
func (mock *ec2ClientMock) WaitUntilSecurityGroupExistsCalls() []struct {
	In1 *ec2.DescribeSecurityGroupsInput
} {
	var calls []struct {
		In1 *ec2.DescribeSecurityGroupsInput
	}
	lockec2ClientMockWaitUntilSecurityGroupExists.RLock()
	calls = mock.calls.WaitUntilSecurityGroupExists
	lockec2ClientMockWaitUntilSecurityGroupExists.RUnlock()
	return calls
}

// WaitUntilSecurityGroupExistsWithContext calls WaitUntilSecurityGroupExistsWithContextFunc.
func (mock *ec2ClientMock) WaitUntilSecurityGroupExistsWithContext(in1 context.Context, in2 *ec2.DescribeSecurityGroupsInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilSecurityGroupExistsWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilSecurityGroupExistsWithContextFunc: method is nil but ec2Client.WaitUntilSecurityGroupExistsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeSecurityGroupsInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilSecurityGroupExistsWithContext.Lock()
	mock.calls.WaitUntilSecurityGroupExistsWithContext = append(mock.calls.WaitUntilSecurityGroupExistsWithContext, callInfo)
	lockec2ClientMockWaitUntilSecurityGroupExistsWithContext.Unlock()
	return mock.WaitUntilSecurityGroupExistsWithContextFunc(in1, in2, in3...)
}

// WaitUntilSecurityGroupExistsWithContextCalls gets all the calls that were made to WaitUntilSecurityGroupExistsWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilSecurityGroupExistsWithContextCalls())
func (mock *ec2ClientMock) WaitUntilSecurityGroupExistsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeSecurityGroupsInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeSecurityGroupsInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilSecurityGroupExistsWithContext.RLock()
	calls = mock.calls.WaitUntilSecurityGroupExistsWithContext
	lockec2ClientMockWaitUntilSecurityGroupExistsWithContext.RUnlock()
	return calls
}

// WaitUntilSnapshotCompleted calls WaitUntilSnapshotCompletedFunc.
func (mock *ec2ClientMock) WaitUntilSnapshotCompleted(in1 *ec2.DescribeSnapshotsInput) error {
	if mock.WaitUntilSnapshotCompletedFunc == nil {
		panic("ec2ClientMock.WaitUntilSnapshotCompletedFunc: method is nil but ec2Client.WaitUntilSnapshotCompleted was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSnapshotsInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilSnapshotCompleted.Lock()
	mock.calls.WaitUntilSnapshotCompleted = append(mock.calls.WaitUntilSnapshotCompleted, callInfo)
	lockec2ClientMockWaitUntilSnapshotCompleted.Unlock()
	return mock.WaitUntilSnapshotCompletedFunc(in1)
}

// WaitUntilSnapshotCompletedCalls gets all the calls that were made to WaitUntilSnapshotCompleted.
// Check the length with:
//     len(mockedec2Client.WaitUntilSnapshotCompletedCalls())
func (mock *ec2ClientMock) WaitUntilSnapshotCompletedCalls() []struct {
	In1 *ec2.DescribeSnapshotsInput
} {
	var calls []struct {
		In1 *ec2.DescribeSnapshotsInput
	}
	lockec2ClientMockWaitUntilSnapshotCompleted.RLock()
	calls = mock.calls.WaitUntilSnapshotCompleted
	lockec2ClientMockWaitUntilSnapshotCompleted.RUnlock()
	return calls
}

// WaitUntilSnapshotCompletedWithContext calls WaitUntilSnapshotCompletedWithContextFunc.
func (mock *ec2ClientMock) WaitUntilSnapshotCompletedWithContext(in1 context.Context, in2 *ec2.DescribeSnapshotsInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilSnapshotCompletedWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilSnapshotCompletedWithContextFunc: method is nil but ec2Client.WaitUntilSnapshotCompletedWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeSnapshotsInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilSnapshotCompletedWithContext.Lock()
	mock.calls.WaitUntilSnapshotCompletedWithContext = append(mock.calls.WaitUntilSnapshotCompletedWithContext, callInfo)
	lockec2ClientMockWaitUntilSnapshotCompletedWithContext.Unlock()
	return mock.WaitUntilSnapshotCompletedWithContextFunc(in1, in2, in3...)
}

// WaitUntilSnapshotCompletedWithContextCalls gets all the calls that were made to WaitUntilSnapshotCompletedWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilSnapshotCompletedWithContextCalls())
func (mock *ec2ClientMock) WaitUntilSnapshotCompletedWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeSnapshotsInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeSnapshotsInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilSnapshotCompletedWithContext.RLock()
	calls = mock.calls.WaitUntilSnapshotCompletedWithContext
	lockec2ClientMockWaitUntilSnapshotCompletedWithContext.RUnlock()
	return calls
}

// WaitUntilSpotInstanceRequestFulfilled calls WaitUntilSpotInstanceRequestFulfilledFunc.
func (mock *ec2ClientMock) WaitUntilSpotInstanceRequestFulfilled(in1 *ec2.DescribeSpotInstanceRequestsInput) error {
	if mock.WaitUntilSpotInstanceRequestFulfilledFunc == nil {
		panic("ec2ClientMock.WaitUntilSpotInstanceRequestFulfilledFunc: method is nil but ec2Client.WaitUntilSpotInstanceRequestFulfilled was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSpotInstanceRequestsInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilSpotInstanceRequestFulfilled.Lock()
	mock.calls.WaitUntilSpotInstanceRequestFulfilled = append(mock.calls.WaitUntilSpotInstanceRequestFulfilled, callInfo)
	lockec2ClientMockWaitUntilSpotInstanceRequestFulfilled.Unlock()
	return mock.WaitUntilSpotInstanceRequestFulfilledFunc(in1)
}

// WaitUntilSpotInstanceRequestFulfilledCalls gets all the calls that were made to WaitUntilSpotInstanceRequestFulfilled.
// Check the length with:
//     len(mockedec2Client.WaitUntilSpotInstanceRequestFulfilledCalls())
func (mock *ec2ClientMock) WaitUntilSpotInstanceRequestFulfilledCalls() []struct {
	In1 *ec2.DescribeSpotInstanceRequestsInput
} {
	var calls []struct {
		In1 *ec2.DescribeSpotInstanceRequestsInput
	}
	lockec2ClientMockWaitUntilSpotInstanceRequestFulfilled.RLock()
	calls = mock.calls.WaitUntilSpotInstanceRequestFulfilled
	lockec2ClientMockWaitUntilSpotInstanceRequestFulfilled.RUnlock()
	return calls
}

// WaitUntilSpotInstanceRequestFulfilledWithContext calls WaitUntilSpotInstanceRequestFulfilledWithContextFunc.
func (mock *ec2ClientMock) WaitUntilSpotInstanceRequestFulfilledWithContext(in1 context.Context, in2 *ec2.DescribeSpotInstanceRequestsInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilSpotInstanceRequestFulfilledWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilSpotInstanceRequestFulfilledWithContextFunc: method is nil but ec2Client.WaitUntilSpotInstanceRequestFulfilledWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeSpotInstanceRequestsInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilSpotInstanceRequestFulfilledWithContext.Lock()
	mock.calls.WaitUntilSpotInstanceRequestFulfilledWithContext = append(mock.calls.WaitUntilSpotInstanceRequestFulfilledWithContext, callInfo)
	lockec2ClientMockWaitUntilSpotInstanceRequestFulfilledWithContext.Unlock()
	return mock.WaitUntilSpotInstanceRequestFulfilledWithContextFunc(in1, in2, in3...)
}

// WaitUntilSpotInstanceRequestFulfilledWithContextCalls gets all the calls that were made to WaitUntilSpotInstanceRequestFulfilledWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilSpotInstanceRequestFulfilledWithContextCalls())
func (mock *ec2ClientMock) WaitUntilSpotInstanceRequestFulfilledWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeSpotInstanceRequestsInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeSpotInstanceRequestsInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilSpotInstanceRequestFulfilledWithContext.RLock()
	calls = mock.calls.WaitUntilSpotInstanceRequestFulfilledWithContext
	lockec2ClientMockWaitUntilSpotInstanceRequestFulfilledWithContext.RUnlock()
	return calls
}

// WaitUntilSubnetAvailable calls WaitUntilSubnetAvailableFunc.
func (mock *ec2ClientMock) WaitUntilSubnetAvailable(in1 *ec2.DescribeSubnetsInput) error {
	if mock.WaitUntilSubnetAvailableFunc == nil {
		panic("ec2ClientMock.WaitUntilSubnetAvailableFunc: method is nil but ec2Client.WaitUntilSubnetAvailable was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeSubnetsInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilSubnetAvailable.Lock()
	mock.calls.WaitUntilSubnetAvailable = append(mock.calls.WaitUntilSubnetAvailable, callInfo)
	lockec2ClientMockWaitUntilSubnetAvailable.Unlock()
	return mock.WaitUntilSubnetAvailableFunc(in1)
}

// WaitUntilSubnetAvailableCalls gets all the calls that were made to WaitUntilSubnetAvailable.
// Check the length with:
//     len(mockedec2Client.WaitUntilSubnetAvailableCalls())
func (mock *ec2ClientMock) WaitUntilSubnetAvailableCalls() []struct {
	In1 *ec2.DescribeSubnetsInput
} {
	var calls []struct {
		In1 *ec2.DescribeSubnetsInput
	}
	lockec2ClientMockWaitUntilSubnetAvailable.RLock()
	calls = mock.calls.WaitUntilSubnetAvailable
	lockec2ClientMockWaitUntilSubnetAvailable.RUnlock()
	return calls
}

// WaitUntilSubnetAvailableWithContext calls WaitUntilSubnetAvailableWithContextFunc.
func (mock *ec2ClientMock) WaitUntilSubnetAvailableWithContext(in1 context.Context, in2 *ec2.DescribeSubnetsInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilSubnetAvailableWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilSubnetAvailableWithContextFunc: method is nil but ec2Client.WaitUntilSubnetAvailableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeSubnetsInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilSubnetAvailableWithContext.Lock()
	mock.calls.WaitUntilSubnetAvailableWithContext = append(mock.calls.WaitUntilSubnetAvailableWithContext, callInfo)
	lockec2ClientMockWaitUntilSubnetAvailableWithContext.Unlock()
	return mock.WaitUntilSubnetAvailableWithContextFunc(in1, in2, in3...)
}

// WaitUntilSubnetAvailableWithContextCalls gets all the calls that were made to WaitUntilSubnetAvailableWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilSubnetAvailableWithContextCalls())
func (mock *ec2ClientMock) WaitUntilSubnetAvailableWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeSubnetsInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeSubnetsInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilSubnetAvailableWithContext.RLock()
	calls = mock.calls.WaitUntilSubnetAvailableWithContext
	lockec2ClientMockWaitUntilSubnetAvailableWithContext.RUnlock()
	return calls
}

// WaitUntilSystemStatusOk calls WaitUntilSystemStatusOkFunc.
func (mock *ec2ClientMock) WaitUntilSystemStatusOk(in1 *ec2.DescribeInstanceStatusInput) error {
	if mock.WaitUntilSystemStatusOkFunc == nil {
		panic("ec2ClientMock.WaitUntilSystemStatusOkFunc: method is nil but ec2Client.WaitUntilSystemStatusOk was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeInstanceStatusInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilSystemStatusOk.Lock()
	mock.calls.WaitUntilSystemStatusOk = append(mock.calls.WaitUntilSystemStatusOk, callInfo)
	lockec2ClientMockWaitUntilSystemStatusOk.Unlock()
	return mock.WaitUntilSystemStatusOkFunc(in1)
}

// WaitUntilSystemStatusOkCalls gets all the calls that were made to WaitUntilSystemStatusOk.
// Check the length with:
//     len(mockedec2Client.WaitUntilSystemStatusOkCalls())
func (mock *ec2ClientMock) WaitUntilSystemStatusOkCalls() []struct {
	In1 *ec2.DescribeInstanceStatusInput
} {
	var calls []struct {
		In1 *ec2.DescribeInstanceStatusInput
	}
	lockec2ClientMockWaitUntilSystemStatusOk.RLock()
	calls = mock.calls.WaitUntilSystemStatusOk
	lockec2ClientMockWaitUntilSystemStatusOk.RUnlock()
	return calls
}

// WaitUntilSystemStatusOkWithContext calls WaitUntilSystemStatusOkWithContextFunc.
func (mock *ec2ClientMock) WaitUntilSystemStatusOkWithContext(in1 context.Context, in2 *ec2.DescribeInstanceStatusInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilSystemStatusOkWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilSystemStatusOkWithContextFunc: method is nil but ec2Client.WaitUntilSystemStatusOkWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeInstanceStatusInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilSystemStatusOkWithContext.Lock()
	mock.calls.WaitUntilSystemStatusOkWithContext = append(mock.calls.WaitUntilSystemStatusOkWithContext, callInfo)
	lockec2ClientMockWaitUntilSystemStatusOkWithContext.Unlock()
	return mock.WaitUntilSystemStatusOkWithContextFunc(in1, in2, in3...)
}

// WaitUntilSystemStatusOkWithContextCalls gets all the calls that were made to WaitUntilSystemStatusOkWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilSystemStatusOkWithContextCalls())
func (mock *ec2ClientMock) WaitUntilSystemStatusOkWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeInstanceStatusInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeInstanceStatusInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilSystemStatusOkWithContext.RLock()
	calls = mock.calls.WaitUntilSystemStatusOkWithContext
	lockec2ClientMockWaitUntilSystemStatusOkWithContext.RUnlock()
	return calls
}

// WaitUntilVolumeAvailable calls WaitUntilVolumeAvailableFunc.
func (mock *ec2ClientMock) WaitUntilVolumeAvailable(in1 *ec2.DescribeVolumesInput) error {
	if mock.WaitUntilVolumeAvailableFunc == nil {
		panic("ec2ClientMock.WaitUntilVolumeAvailableFunc: method is nil but ec2Client.WaitUntilVolumeAvailable was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVolumesInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilVolumeAvailable.Lock()
	mock.calls.WaitUntilVolumeAvailable = append(mock.calls.WaitUntilVolumeAvailable, callInfo)
	lockec2ClientMockWaitUntilVolumeAvailable.Unlock()
	return mock.WaitUntilVolumeAvailableFunc(in1)
}

// WaitUntilVolumeAvailableCalls gets all the calls that were made to WaitUntilVolumeAvailable.
// Check the length with:
//     len(mockedec2Client.WaitUntilVolumeAvailableCalls())
func (mock *ec2ClientMock) WaitUntilVolumeAvailableCalls() []struct {
	In1 *ec2.DescribeVolumesInput
} {
	var calls []struct {
		In1 *ec2.DescribeVolumesInput
	}
	lockec2ClientMockWaitUntilVolumeAvailable.RLock()
	calls = mock.calls.WaitUntilVolumeAvailable
	lockec2ClientMockWaitUntilVolumeAvailable.RUnlock()
	return calls
}

// WaitUntilVolumeAvailableWithContext calls WaitUntilVolumeAvailableWithContextFunc.
func (mock *ec2ClientMock) WaitUntilVolumeAvailableWithContext(in1 context.Context, in2 *ec2.DescribeVolumesInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilVolumeAvailableWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilVolumeAvailableWithContextFunc: method is nil but ec2Client.WaitUntilVolumeAvailableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVolumesInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilVolumeAvailableWithContext.Lock()
	mock.calls.WaitUntilVolumeAvailableWithContext = append(mock.calls.WaitUntilVolumeAvailableWithContext, callInfo)
	lockec2ClientMockWaitUntilVolumeAvailableWithContext.Unlock()
	return mock.WaitUntilVolumeAvailableWithContextFunc(in1, in2, in3...)
}

// WaitUntilVolumeAvailableWithContextCalls gets all the calls that were made to WaitUntilVolumeAvailableWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilVolumeAvailableWithContextCalls())
func (mock *ec2ClientMock) WaitUntilVolumeAvailableWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVolumesInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVolumesInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilVolumeAvailableWithContext.RLock()
	calls = mock.calls.WaitUntilVolumeAvailableWithContext
	lockec2ClientMockWaitUntilVolumeAvailableWithContext.RUnlock()
	return calls
}

// WaitUntilVolumeDeleted calls WaitUntilVolumeDeletedFunc.
func (mock *ec2ClientMock) WaitUntilVolumeDeleted(in1 *ec2.DescribeVolumesInput) error {
	if mock.WaitUntilVolumeDeletedFunc == nil {
		panic("ec2ClientMock.WaitUntilVolumeDeletedFunc: method is nil but ec2Client.WaitUntilVolumeDeleted was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVolumesInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilVolumeDeleted.Lock()
	mock.calls.WaitUntilVolumeDeleted = append(mock.calls.WaitUntilVolumeDeleted, callInfo)
	lockec2ClientMockWaitUntilVolumeDeleted.Unlock()
	return mock.WaitUntilVolumeDeletedFunc(in1)
}

// WaitUntilVolumeDeletedCalls gets all the calls that were made to WaitUntilVolumeDeleted.
// Check the length with:
//     len(mockedec2Client.WaitUntilVolumeDeletedCalls())
func (mock *ec2ClientMock) WaitUntilVolumeDeletedCalls() []struct {
	In1 *ec2.DescribeVolumesInput
} {
	var calls []struct {
		In1 *ec2.DescribeVolumesInput
	}
	lockec2ClientMockWaitUntilVolumeDeleted.RLock()
	calls = mock.calls.WaitUntilVolumeDeleted
	lockec2ClientMockWaitUntilVolumeDeleted.RUnlock()
	return calls
}

// WaitUntilVolumeDeletedWithContext calls WaitUntilVolumeDeletedWithContextFunc.
func (mock *ec2ClientMock) WaitUntilVolumeDeletedWithContext(in1 context.Context, in2 *ec2.DescribeVolumesInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilVolumeDeletedWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilVolumeDeletedWithContextFunc: method is nil but ec2Client.WaitUntilVolumeDeletedWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVolumesInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilVolumeDeletedWithContext.Lock()
	mock.calls.WaitUntilVolumeDeletedWithContext = append(mock.calls.WaitUntilVolumeDeletedWithContext, callInfo)
	lockec2ClientMockWaitUntilVolumeDeletedWithContext.Unlock()
	return mock.WaitUntilVolumeDeletedWithContextFunc(in1, in2, in3...)
}

// WaitUntilVolumeDeletedWithContextCalls gets all the calls that were made to WaitUntilVolumeDeletedWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilVolumeDeletedWithContextCalls())
func (mock *ec2ClientMock) WaitUntilVolumeDeletedWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVolumesInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVolumesInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilVolumeDeletedWithContext.RLock()
	calls = mock.calls.WaitUntilVolumeDeletedWithContext
	lockec2ClientMockWaitUntilVolumeDeletedWithContext.RUnlock()
	return calls
}

// WaitUntilVolumeInUse calls WaitUntilVolumeInUseFunc.
func (mock *ec2ClientMock) WaitUntilVolumeInUse(in1 *ec2.DescribeVolumesInput) error {
	if mock.WaitUntilVolumeInUseFunc == nil {
		panic("ec2ClientMock.WaitUntilVolumeInUseFunc: method is nil but ec2Client.WaitUntilVolumeInUse was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVolumesInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilVolumeInUse.Lock()
	mock.calls.WaitUntilVolumeInUse = append(mock.calls.WaitUntilVolumeInUse, callInfo)
	lockec2ClientMockWaitUntilVolumeInUse.Unlock()
	return mock.WaitUntilVolumeInUseFunc(in1)
}

// WaitUntilVolumeInUseCalls gets all the calls that were made to WaitUntilVolumeInUse.
// Check the length with:
//     len(mockedec2Client.WaitUntilVolumeInUseCalls())
func (mock *ec2ClientMock) WaitUntilVolumeInUseCalls() []struct {
	In1 *ec2.DescribeVolumesInput
} {
	var calls []struct {
		In1 *ec2.DescribeVolumesInput
	}
	lockec2ClientMockWaitUntilVolumeInUse.RLock()
	calls = mock.calls.WaitUntilVolumeInUse
	lockec2ClientMockWaitUntilVolumeInUse.RUnlock()
	return calls
}

// WaitUntilVolumeInUseWithContext calls WaitUntilVolumeInUseWithContextFunc.
func (mock *ec2ClientMock) WaitUntilVolumeInUseWithContext(in1 context.Context, in2 *ec2.DescribeVolumesInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilVolumeInUseWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilVolumeInUseWithContextFunc: method is nil but ec2Client.WaitUntilVolumeInUseWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVolumesInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilVolumeInUseWithContext.Lock()
	mock.calls.WaitUntilVolumeInUseWithContext = append(mock.calls.WaitUntilVolumeInUseWithContext, callInfo)
	lockec2ClientMockWaitUntilVolumeInUseWithContext.Unlock()
	return mock.WaitUntilVolumeInUseWithContextFunc(in1, in2, in3...)
}

// WaitUntilVolumeInUseWithContextCalls gets all the calls that were made to WaitUntilVolumeInUseWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilVolumeInUseWithContextCalls())
func (mock *ec2ClientMock) WaitUntilVolumeInUseWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVolumesInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVolumesInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilVolumeInUseWithContext.RLock()
	calls = mock.calls.WaitUntilVolumeInUseWithContext
	lockec2ClientMockWaitUntilVolumeInUseWithContext.RUnlock()
	return calls
}

// WaitUntilVpcAvailable calls WaitUntilVpcAvailableFunc.
func (mock *ec2ClientMock) WaitUntilVpcAvailable(in1 *ec2.DescribeVpcsInput) error {
	if mock.WaitUntilVpcAvailableFunc == nil {
		panic("ec2ClientMock.WaitUntilVpcAvailableFunc: method is nil but ec2Client.WaitUntilVpcAvailable was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcsInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilVpcAvailable.Lock()
	mock.calls.WaitUntilVpcAvailable = append(mock.calls.WaitUntilVpcAvailable, callInfo)
	lockec2ClientMockWaitUntilVpcAvailable.Unlock()
	return mock.WaitUntilVpcAvailableFunc(in1)
}

// WaitUntilVpcAvailableCalls gets all the calls that were made to WaitUntilVpcAvailable.
// Check the length with:
//     len(mockedec2Client.WaitUntilVpcAvailableCalls())
func (mock *ec2ClientMock) WaitUntilVpcAvailableCalls() []struct {
	In1 *ec2.DescribeVpcsInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpcsInput
	}
	lockec2ClientMockWaitUntilVpcAvailable.RLock()
	calls = mock.calls.WaitUntilVpcAvailable
	lockec2ClientMockWaitUntilVpcAvailable.RUnlock()
	return calls
}

// WaitUntilVpcAvailableWithContext calls WaitUntilVpcAvailableWithContextFunc.
func (mock *ec2ClientMock) WaitUntilVpcAvailableWithContext(in1 context.Context, in2 *ec2.DescribeVpcsInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilVpcAvailableWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilVpcAvailableWithContextFunc: method is nil but ec2Client.WaitUntilVpcAvailableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpcsInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilVpcAvailableWithContext.Lock()
	mock.calls.WaitUntilVpcAvailableWithContext = append(mock.calls.WaitUntilVpcAvailableWithContext, callInfo)
	lockec2ClientMockWaitUntilVpcAvailableWithContext.Unlock()
	return mock.WaitUntilVpcAvailableWithContextFunc(in1, in2, in3...)
}

// WaitUntilVpcAvailableWithContextCalls gets all the calls that were made to WaitUntilVpcAvailableWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilVpcAvailableWithContextCalls())
func (mock *ec2ClientMock) WaitUntilVpcAvailableWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpcsInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpcsInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilVpcAvailableWithContext.RLock()
	calls = mock.calls.WaitUntilVpcAvailableWithContext
	lockec2ClientMockWaitUntilVpcAvailableWithContext.RUnlock()
	return calls
}

// WaitUntilVpcExists calls WaitUntilVpcExistsFunc.
func (mock *ec2ClientMock) WaitUntilVpcExists(in1 *ec2.DescribeVpcsInput) error {
	if mock.WaitUntilVpcExistsFunc == nil {
		panic("ec2ClientMock.WaitUntilVpcExistsFunc: method is nil but ec2Client.WaitUntilVpcExists was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcsInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilVpcExists.Lock()
	mock.calls.WaitUntilVpcExists = append(mock.calls.WaitUntilVpcExists, callInfo)
	lockec2ClientMockWaitUntilVpcExists.Unlock()
	return mock.WaitUntilVpcExistsFunc(in1)
}

// WaitUntilVpcExistsCalls gets all the calls that were made to WaitUntilVpcExists.
// Check the length with:
//     len(mockedec2Client.WaitUntilVpcExistsCalls())
func (mock *ec2ClientMock) WaitUntilVpcExistsCalls() []struct {
	In1 *ec2.DescribeVpcsInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpcsInput
	}
	lockec2ClientMockWaitUntilVpcExists.RLock()
	calls = mock.calls.WaitUntilVpcExists
	lockec2ClientMockWaitUntilVpcExists.RUnlock()
	return calls
}

// WaitUntilVpcExistsWithContext calls WaitUntilVpcExistsWithContextFunc.
func (mock *ec2ClientMock) WaitUntilVpcExistsWithContext(in1 context.Context, in2 *ec2.DescribeVpcsInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilVpcExistsWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilVpcExistsWithContextFunc: method is nil but ec2Client.WaitUntilVpcExistsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpcsInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilVpcExistsWithContext.Lock()
	mock.calls.WaitUntilVpcExistsWithContext = append(mock.calls.WaitUntilVpcExistsWithContext, callInfo)
	lockec2ClientMockWaitUntilVpcExistsWithContext.Unlock()
	return mock.WaitUntilVpcExistsWithContextFunc(in1, in2, in3...)
}

// WaitUntilVpcExistsWithContextCalls gets all the calls that were made to WaitUntilVpcExistsWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilVpcExistsWithContextCalls())
func (mock *ec2ClientMock) WaitUntilVpcExistsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpcsInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpcsInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilVpcExistsWithContext.RLock()
	calls = mock.calls.WaitUntilVpcExistsWithContext
	lockec2ClientMockWaitUntilVpcExistsWithContext.RUnlock()
	return calls
}

// WaitUntilVpcPeeringConnectionDeleted calls WaitUntilVpcPeeringConnectionDeletedFunc.
func (mock *ec2ClientMock) WaitUntilVpcPeeringConnectionDeleted(in1 *ec2.DescribeVpcPeeringConnectionsInput) error {
	if mock.WaitUntilVpcPeeringConnectionDeletedFunc == nil {
		panic("ec2ClientMock.WaitUntilVpcPeeringConnectionDeletedFunc: method is nil but ec2Client.WaitUntilVpcPeeringConnectionDeleted was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcPeeringConnectionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilVpcPeeringConnectionDeleted.Lock()
	mock.calls.WaitUntilVpcPeeringConnectionDeleted = append(mock.calls.WaitUntilVpcPeeringConnectionDeleted, callInfo)
	lockec2ClientMockWaitUntilVpcPeeringConnectionDeleted.Unlock()
	return mock.WaitUntilVpcPeeringConnectionDeletedFunc(in1)
}

// WaitUntilVpcPeeringConnectionDeletedCalls gets all the calls that were made to WaitUntilVpcPeeringConnectionDeleted.
// Check the length with:
//     len(mockedec2Client.WaitUntilVpcPeeringConnectionDeletedCalls())
func (mock *ec2ClientMock) WaitUntilVpcPeeringConnectionDeletedCalls() []struct {
	In1 *ec2.DescribeVpcPeeringConnectionsInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpcPeeringConnectionsInput
	}
	lockec2ClientMockWaitUntilVpcPeeringConnectionDeleted.RLock()
	calls = mock.calls.WaitUntilVpcPeeringConnectionDeleted
	lockec2ClientMockWaitUntilVpcPeeringConnectionDeleted.RUnlock()
	return calls
}

// WaitUntilVpcPeeringConnectionDeletedWithContext calls WaitUntilVpcPeeringConnectionDeletedWithContextFunc.
func (mock *ec2ClientMock) WaitUntilVpcPeeringConnectionDeletedWithContext(in1 context.Context, in2 *ec2.DescribeVpcPeeringConnectionsInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilVpcPeeringConnectionDeletedWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilVpcPeeringConnectionDeletedWithContextFunc: method is nil but ec2Client.WaitUntilVpcPeeringConnectionDeletedWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpcPeeringConnectionsInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilVpcPeeringConnectionDeletedWithContext.Lock()
	mock.calls.WaitUntilVpcPeeringConnectionDeletedWithContext = append(mock.calls.WaitUntilVpcPeeringConnectionDeletedWithContext, callInfo)
	lockec2ClientMockWaitUntilVpcPeeringConnectionDeletedWithContext.Unlock()
	return mock.WaitUntilVpcPeeringConnectionDeletedWithContextFunc(in1, in2, in3...)
}

// WaitUntilVpcPeeringConnectionDeletedWithContextCalls gets all the calls that were made to WaitUntilVpcPeeringConnectionDeletedWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilVpcPeeringConnectionDeletedWithContextCalls())
func (mock *ec2ClientMock) WaitUntilVpcPeeringConnectionDeletedWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpcPeeringConnectionsInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpcPeeringConnectionsInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilVpcPeeringConnectionDeletedWithContext.RLock()
	calls = mock.calls.WaitUntilVpcPeeringConnectionDeletedWithContext
	lockec2ClientMockWaitUntilVpcPeeringConnectionDeletedWithContext.RUnlock()
	return calls
}

// WaitUntilVpcPeeringConnectionExists calls WaitUntilVpcPeeringConnectionExistsFunc.
func (mock *ec2ClientMock) WaitUntilVpcPeeringConnectionExists(in1 *ec2.DescribeVpcPeeringConnectionsInput) error {
	if mock.WaitUntilVpcPeeringConnectionExistsFunc == nil {
		panic("ec2ClientMock.WaitUntilVpcPeeringConnectionExistsFunc: method is nil but ec2Client.WaitUntilVpcPeeringConnectionExists was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpcPeeringConnectionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilVpcPeeringConnectionExists.Lock()
	mock.calls.WaitUntilVpcPeeringConnectionExists = append(mock.calls.WaitUntilVpcPeeringConnectionExists, callInfo)
	lockec2ClientMockWaitUntilVpcPeeringConnectionExists.Unlock()
	return mock.WaitUntilVpcPeeringConnectionExistsFunc(in1)
}

// WaitUntilVpcPeeringConnectionExistsCalls gets all the calls that were made to WaitUntilVpcPeeringConnectionExists.
// Check the length with:
//     len(mockedec2Client.WaitUntilVpcPeeringConnectionExistsCalls())
func (mock *ec2ClientMock) WaitUntilVpcPeeringConnectionExistsCalls() []struct {
	In1 *ec2.DescribeVpcPeeringConnectionsInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpcPeeringConnectionsInput
	}
	lockec2ClientMockWaitUntilVpcPeeringConnectionExists.RLock()
	calls = mock.calls.WaitUntilVpcPeeringConnectionExists
	lockec2ClientMockWaitUntilVpcPeeringConnectionExists.RUnlock()
	return calls
}

// WaitUntilVpcPeeringConnectionExistsWithContext calls WaitUntilVpcPeeringConnectionExistsWithContextFunc.
func (mock *ec2ClientMock) WaitUntilVpcPeeringConnectionExistsWithContext(in1 context.Context, in2 *ec2.DescribeVpcPeeringConnectionsInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilVpcPeeringConnectionExistsWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilVpcPeeringConnectionExistsWithContextFunc: method is nil but ec2Client.WaitUntilVpcPeeringConnectionExistsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpcPeeringConnectionsInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilVpcPeeringConnectionExistsWithContext.Lock()
	mock.calls.WaitUntilVpcPeeringConnectionExistsWithContext = append(mock.calls.WaitUntilVpcPeeringConnectionExistsWithContext, callInfo)
	lockec2ClientMockWaitUntilVpcPeeringConnectionExistsWithContext.Unlock()
	return mock.WaitUntilVpcPeeringConnectionExistsWithContextFunc(in1, in2, in3...)
}

// WaitUntilVpcPeeringConnectionExistsWithContextCalls gets all the calls that were made to WaitUntilVpcPeeringConnectionExistsWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilVpcPeeringConnectionExistsWithContextCalls())
func (mock *ec2ClientMock) WaitUntilVpcPeeringConnectionExistsWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpcPeeringConnectionsInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpcPeeringConnectionsInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilVpcPeeringConnectionExistsWithContext.RLock()
	calls = mock.calls.WaitUntilVpcPeeringConnectionExistsWithContext
	lockec2ClientMockWaitUntilVpcPeeringConnectionExistsWithContext.RUnlock()
	return calls
}

// WaitUntilVpnConnectionAvailable calls WaitUntilVpnConnectionAvailableFunc.
func (mock *ec2ClientMock) WaitUntilVpnConnectionAvailable(in1 *ec2.DescribeVpnConnectionsInput) error {
	if mock.WaitUntilVpnConnectionAvailableFunc == nil {
		panic("ec2ClientMock.WaitUntilVpnConnectionAvailableFunc: method is nil but ec2Client.WaitUntilVpnConnectionAvailable was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpnConnectionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilVpnConnectionAvailable.Lock()
	mock.calls.WaitUntilVpnConnectionAvailable = append(mock.calls.WaitUntilVpnConnectionAvailable, callInfo)
	lockec2ClientMockWaitUntilVpnConnectionAvailable.Unlock()
	return mock.WaitUntilVpnConnectionAvailableFunc(in1)
}

// WaitUntilVpnConnectionAvailableCalls gets all the calls that were made to WaitUntilVpnConnectionAvailable.
// Check the length with:
//     len(mockedec2Client.WaitUntilVpnConnectionAvailableCalls())
func (mock *ec2ClientMock) WaitUntilVpnConnectionAvailableCalls() []struct {
	In1 *ec2.DescribeVpnConnectionsInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpnConnectionsInput
	}
	lockec2ClientMockWaitUntilVpnConnectionAvailable.RLock()
	calls = mock.calls.WaitUntilVpnConnectionAvailable
	lockec2ClientMockWaitUntilVpnConnectionAvailable.RUnlock()
	return calls
}

// WaitUntilVpnConnectionAvailableWithContext calls WaitUntilVpnConnectionAvailableWithContextFunc.
func (mock *ec2ClientMock) WaitUntilVpnConnectionAvailableWithContext(in1 context.Context, in2 *ec2.DescribeVpnConnectionsInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilVpnConnectionAvailableWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilVpnConnectionAvailableWithContextFunc: method is nil but ec2Client.WaitUntilVpnConnectionAvailableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpnConnectionsInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilVpnConnectionAvailableWithContext.Lock()
	mock.calls.WaitUntilVpnConnectionAvailableWithContext = append(mock.calls.WaitUntilVpnConnectionAvailableWithContext, callInfo)
	lockec2ClientMockWaitUntilVpnConnectionAvailableWithContext.Unlock()
	return mock.WaitUntilVpnConnectionAvailableWithContextFunc(in1, in2, in3...)
}

// WaitUntilVpnConnectionAvailableWithContextCalls gets all the calls that were made to WaitUntilVpnConnectionAvailableWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilVpnConnectionAvailableWithContextCalls())
func (mock *ec2ClientMock) WaitUntilVpnConnectionAvailableWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpnConnectionsInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpnConnectionsInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilVpnConnectionAvailableWithContext.RLock()
	calls = mock.calls.WaitUntilVpnConnectionAvailableWithContext
	lockec2ClientMockWaitUntilVpnConnectionAvailableWithContext.RUnlock()
	return calls
}

// WaitUntilVpnConnectionDeleted calls WaitUntilVpnConnectionDeletedFunc.
func (mock *ec2ClientMock) WaitUntilVpnConnectionDeleted(in1 *ec2.DescribeVpnConnectionsInput) error {
	if mock.WaitUntilVpnConnectionDeletedFunc == nil {
		panic("ec2ClientMock.WaitUntilVpnConnectionDeletedFunc: method is nil but ec2Client.WaitUntilVpnConnectionDeleted was just called")
	}
	callInfo := struct {
		In1 *ec2.DescribeVpnConnectionsInput
	}{
		In1: in1,
	}
	lockec2ClientMockWaitUntilVpnConnectionDeleted.Lock()
	mock.calls.WaitUntilVpnConnectionDeleted = append(mock.calls.WaitUntilVpnConnectionDeleted, callInfo)
	lockec2ClientMockWaitUntilVpnConnectionDeleted.Unlock()
	return mock.WaitUntilVpnConnectionDeletedFunc(in1)
}

// WaitUntilVpnConnectionDeletedCalls gets all the calls that were made to WaitUntilVpnConnectionDeleted.
// Check the length with:
//     len(mockedec2Client.WaitUntilVpnConnectionDeletedCalls())
func (mock *ec2ClientMock) WaitUntilVpnConnectionDeletedCalls() []struct {
	In1 *ec2.DescribeVpnConnectionsInput
} {
	var calls []struct {
		In1 *ec2.DescribeVpnConnectionsInput
	}
	lockec2ClientMockWaitUntilVpnConnectionDeleted.RLock()
	calls = mock.calls.WaitUntilVpnConnectionDeleted
	lockec2ClientMockWaitUntilVpnConnectionDeleted.RUnlock()
	return calls
}

// WaitUntilVpnConnectionDeletedWithContext calls WaitUntilVpnConnectionDeletedWithContextFunc.
func (mock *ec2ClientMock) WaitUntilVpnConnectionDeletedWithContext(in1 context.Context, in2 *ec2.DescribeVpnConnectionsInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilVpnConnectionDeletedWithContextFunc == nil {
		panic("ec2ClientMock.WaitUntilVpnConnectionDeletedWithContextFunc: method is nil but ec2Client.WaitUntilVpnConnectionDeletedWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.DescribeVpnConnectionsInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWaitUntilVpnConnectionDeletedWithContext.Lock()
	mock.calls.WaitUntilVpnConnectionDeletedWithContext = append(mock.calls.WaitUntilVpnConnectionDeletedWithContext, callInfo)
	lockec2ClientMockWaitUntilVpnConnectionDeletedWithContext.Unlock()
	return mock.WaitUntilVpnConnectionDeletedWithContextFunc(in1, in2, in3...)
}

// WaitUntilVpnConnectionDeletedWithContextCalls gets all the calls that were made to WaitUntilVpnConnectionDeletedWithContext.
// Check the length with:
//     len(mockedec2Client.WaitUntilVpnConnectionDeletedWithContextCalls())
func (mock *ec2ClientMock) WaitUntilVpnConnectionDeletedWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.DescribeVpnConnectionsInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.DescribeVpnConnectionsInput
		In3 []request.WaiterOption
	}
	lockec2ClientMockWaitUntilVpnConnectionDeletedWithContext.RLock()
	calls = mock.calls.WaitUntilVpnConnectionDeletedWithContext
	lockec2ClientMockWaitUntilVpnConnectionDeletedWithContext.RUnlock()
	return calls
}

// WithdrawByoipCidr calls WithdrawByoipCidrFunc.
func (mock *ec2ClientMock) WithdrawByoipCidr(in1 *ec2.WithdrawByoipCidrInput) (*ec2.WithdrawByoipCidrOutput, error) {
	if mock.WithdrawByoipCidrFunc == nil {
		panic("ec2ClientMock.WithdrawByoipCidrFunc: method is nil but ec2Client.WithdrawByoipCidr was just called")
	}
	callInfo := struct {
		In1 *ec2.WithdrawByoipCidrInput
	}{
		In1: in1,
	}
	lockec2ClientMockWithdrawByoipCidr.Lock()
	mock.calls.WithdrawByoipCidr = append(mock.calls.WithdrawByoipCidr, callInfo)
	lockec2ClientMockWithdrawByoipCidr.Unlock()
	return mock.WithdrawByoipCidrFunc(in1)
}

// WithdrawByoipCidrCalls gets all the calls that were made to WithdrawByoipCidr.
// Check the length with:
//     len(mockedec2Client.WithdrawByoipCidrCalls())
func (mock *ec2ClientMock) WithdrawByoipCidrCalls() []struct {
	In1 *ec2.WithdrawByoipCidrInput
} {
	var calls []struct {
		In1 *ec2.WithdrawByoipCidrInput
	}
	lockec2ClientMockWithdrawByoipCidr.RLock()
	calls = mock.calls.WithdrawByoipCidr
	lockec2ClientMockWithdrawByoipCidr.RUnlock()
	return calls
}

// WithdrawByoipCidrRequest calls WithdrawByoipCidrRequestFunc.
func (mock *ec2ClientMock) WithdrawByoipCidrRequest(in1 *ec2.WithdrawByoipCidrInput) (*request.Request, *ec2.WithdrawByoipCidrOutput) {
	if mock.WithdrawByoipCidrRequestFunc == nil {
		panic("ec2ClientMock.WithdrawByoipCidrRequestFunc: method is nil but ec2Client.WithdrawByoipCidrRequest was just called")
	}
	callInfo := struct {
		In1 *ec2.WithdrawByoipCidrInput
	}{
		In1: in1,
	}
	lockec2ClientMockWithdrawByoipCidrRequest.Lock()
	mock.calls.WithdrawByoipCidrRequest = append(mock.calls.WithdrawByoipCidrRequest, callInfo)
	lockec2ClientMockWithdrawByoipCidrRequest.Unlock()
	return mock.WithdrawByoipCidrRequestFunc(in1)
}

// WithdrawByoipCidrRequestCalls gets all the calls that were made to WithdrawByoipCidrRequest.
// Check the length with:
//     len(mockedec2Client.WithdrawByoipCidrRequestCalls())
func (mock *ec2ClientMock) WithdrawByoipCidrRequestCalls() []struct {
	In1 *ec2.WithdrawByoipCidrInput
} {
	var calls []struct {
		In1 *ec2.WithdrawByoipCidrInput
	}
	lockec2ClientMockWithdrawByoipCidrRequest.RLock()
	calls = mock.calls.WithdrawByoipCidrRequest
	lockec2ClientMockWithdrawByoipCidrRequest.RUnlock()
	return calls
}

// WithdrawByoipCidrWithContext calls WithdrawByoipCidrWithContextFunc.
func (mock *ec2ClientMock) WithdrawByoipCidrWithContext(in1 context.Context, in2 *ec2.WithdrawByoipCidrInput, in3 ...request.Option) (*ec2.WithdrawByoipCidrOutput, error) {
	if mock.WithdrawByoipCidrWithContextFunc == nil {
		panic("ec2ClientMock.WithdrawByoipCidrWithContextFunc: method is nil but ec2Client.WithdrawByoipCidrWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ec2.WithdrawByoipCidrInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockec2ClientMockWithdrawByoipCidrWithContext.Lock()
	mock.calls.WithdrawByoipCidrWithContext = append(mock.calls.WithdrawByoipCidrWithContext, callInfo)
	lockec2ClientMockWithdrawByoipCidrWithContext.Unlock()
	return mock.WithdrawByoipCidrWithContextFunc(in1, in2, in3...)
}

// WithdrawByoipCidrWithContextCalls gets all the calls that were made to WithdrawByoipCidrWithContext.
// Check the length with:
//     len(mockedec2Client.WithdrawByoipCidrWithContextCalls())
func (mock *ec2ClientMock) WithdrawByoipCidrWithContextCalls() []struct {
	In1 context.Context
	In2 *ec2.WithdrawByoipCidrInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *ec2.WithdrawByoipCidrInput
		In3 []request.Option
	}
	lockec2ClientMockWithdrawByoipCidrWithContext.RLock()
	calls = mock.calls.WithdrawByoipCidrWithContext
	lockec2ClientMockWithdrawByoipCidrWithContext.RUnlock()
	return calls
}
