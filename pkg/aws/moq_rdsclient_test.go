// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package aws

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/rds"
	"sync"
)

var (
	lockrdsClientMockAddRoleToDBCluster                                   sync.RWMutex
	lockrdsClientMockAddRoleToDBClusterRequest                            sync.RWMutex
	lockrdsClientMockAddRoleToDBClusterWithContext                        sync.RWMutex
	lockrdsClientMockAddRoleToDBInstance                                  sync.RWMutex
	lockrdsClientMockAddRoleToDBInstanceRequest                           sync.RWMutex
	lockrdsClientMockAddRoleToDBInstanceWithContext                       sync.RWMutex
	lockrdsClientMockAddSourceIdentifierToSubscription                    sync.RWMutex
	lockrdsClientMockAddSourceIdentifierToSubscriptionRequest             sync.RWMutex
	lockrdsClientMockAddSourceIdentifierToSubscriptionWithContext         sync.RWMutex
	lockrdsClientMockAddTagsToResource                                    sync.RWMutex
	lockrdsClientMockAddTagsToResourceRequest                             sync.RWMutex
	lockrdsClientMockAddTagsToResourceWithContext                         sync.RWMutex
	lockrdsClientMockApplyPendingMaintenanceAction                        sync.RWMutex
	lockrdsClientMockApplyPendingMaintenanceActionRequest                 sync.RWMutex
	lockrdsClientMockApplyPendingMaintenanceActionWithContext             sync.RWMutex
	lockrdsClientMockAuthorizeDBSecurityGroupIngress                      sync.RWMutex
	lockrdsClientMockAuthorizeDBSecurityGroupIngressRequest               sync.RWMutex
	lockrdsClientMockAuthorizeDBSecurityGroupIngressWithContext           sync.RWMutex
	lockrdsClientMockBacktrackDBCluster                                   sync.RWMutex
	lockrdsClientMockBacktrackDBClusterRequest                            sync.RWMutex
	lockrdsClientMockBacktrackDBClusterWithContext                        sync.RWMutex
	lockrdsClientMockCancelExportTask                                     sync.RWMutex
	lockrdsClientMockCancelExportTaskRequest                              sync.RWMutex
	lockrdsClientMockCancelExportTaskWithContext                          sync.RWMutex
	lockrdsClientMockCopyDBClusterParameterGroup                          sync.RWMutex
	lockrdsClientMockCopyDBClusterParameterGroupRequest                   sync.RWMutex
	lockrdsClientMockCopyDBClusterParameterGroupWithContext               sync.RWMutex
	lockrdsClientMockCopyDBClusterSnapshot                                sync.RWMutex
	lockrdsClientMockCopyDBClusterSnapshotRequest                         sync.RWMutex
	lockrdsClientMockCopyDBClusterSnapshotWithContext                     sync.RWMutex
	lockrdsClientMockCopyDBParameterGroup                                 sync.RWMutex
	lockrdsClientMockCopyDBParameterGroupRequest                          sync.RWMutex
	lockrdsClientMockCopyDBParameterGroupWithContext                      sync.RWMutex
	lockrdsClientMockCopyDBSnapshot                                       sync.RWMutex
	lockrdsClientMockCopyDBSnapshotRequest                                sync.RWMutex
	lockrdsClientMockCopyDBSnapshotWithContext                            sync.RWMutex
	lockrdsClientMockCopyOptionGroup                                      sync.RWMutex
	lockrdsClientMockCopyOptionGroupRequest                               sync.RWMutex
	lockrdsClientMockCopyOptionGroupWithContext                           sync.RWMutex
	lockrdsClientMockCreateCustomAvailabilityZone                         sync.RWMutex
	lockrdsClientMockCreateCustomAvailabilityZoneRequest                  sync.RWMutex
	lockrdsClientMockCreateCustomAvailabilityZoneWithContext              sync.RWMutex
	lockrdsClientMockCreateDBCluster                                      sync.RWMutex
	lockrdsClientMockCreateDBClusterEndpoint                              sync.RWMutex
	lockrdsClientMockCreateDBClusterEndpointRequest                       sync.RWMutex
	lockrdsClientMockCreateDBClusterEndpointWithContext                   sync.RWMutex
	lockrdsClientMockCreateDBClusterParameterGroup                        sync.RWMutex
	lockrdsClientMockCreateDBClusterParameterGroupRequest                 sync.RWMutex
	lockrdsClientMockCreateDBClusterParameterGroupWithContext             sync.RWMutex
	lockrdsClientMockCreateDBClusterRequest                               sync.RWMutex
	lockrdsClientMockCreateDBClusterSnapshot                              sync.RWMutex
	lockrdsClientMockCreateDBClusterSnapshotRequest                       sync.RWMutex
	lockrdsClientMockCreateDBClusterSnapshotWithContext                   sync.RWMutex
	lockrdsClientMockCreateDBClusterWithContext                           sync.RWMutex
	lockrdsClientMockCreateDBInstance                                     sync.RWMutex
	lockrdsClientMockCreateDBInstanceReadReplica                          sync.RWMutex
	lockrdsClientMockCreateDBInstanceReadReplicaRequest                   sync.RWMutex
	lockrdsClientMockCreateDBInstanceReadReplicaWithContext               sync.RWMutex
	lockrdsClientMockCreateDBInstanceRequest                              sync.RWMutex
	lockrdsClientMockCreateDBInstanceWithContext                          sync.RWMutex
	lockrdsClientMockCreateDBParameterGroup                               sync.RWMutex
	lockrdsClientMockCreateDBParameterGroupRequest                        sync.RWMutex
	lockrdsClientMockCreateDBParameterGroupWithContext                    sync.RWMutex
	lockrdsClientMockCreateDBProxy                                        sync.RWMutex
	lockrdsClientMockCreateDBProxyRequest                                 sync.RWMutex
	lockrdsClientMockCreateDBProxyWithContext                             sync.RWMutex
	lockrdsClientMockCreateDBSecurityGroup                                sync.RWMutex
	lockrdsClientMockCreateDBSecurityGroupRequest                         sync.RWMutex
	lockrdsClientMockCreateDBSecurityGroupWithContext                     sync.RWMutex
	lockrdsClientMockCreateDBSnapshot                                     sync.RWMutex
	lockrdsClientMockCreateDBSnapshotRequest                              sync.RWMutex
	lockrdsClientMockCreateDBSnapshotWithContext                          sync.RWMutex
	lockrdsClientMockCreateDBSubnetGroup                                  sync.RWMutex
	lockrdsClientMockCreateDBSubnetGroupRequest                           sync.RWMutex
	lockrdsClientMockCreateDBSubnetGroupWithContext                       sync.RWMutex
	lockrdsClientMockCreateEventSubscription                              sync.RWMutex
	lockrdsClientMockCreateEventSubscriptionRequest                       sync.RWMutex
	lockrdsClientMockCreateEventSubscriptionWithContext                   sync.RWMutex
	lockrdsClientMockCreateGlobalCluster                                  sync.RWMutex
	lockrdsClientMockCreateGlobalClusterRequest                           sync.RWMutex
	lockrdsClientMockCreateGlobalClusterWithContext                       sync.RWMutex
	lockrdsClientMockCreateOptionGroup                                    sync.RWMutex
	lockrdsClientMockCreateOptionGroupRequest                             sync.RWMutex
	lockrdsClientMockCreateOptionGroupWithContext                         sync.RWMutex
	lockrdsClientMockDeleteCustomAvailabilityZone                         sync.RWMutex
	lockrdsClientMockDeleteCustomAvailabilityZoneRequest                  sync.RWMutex
	lockrdsClientMockDeleteCustomAvailabilityZoneWithContext              sync.RWMutex
	lockrdsClientMockDeleteDBCluster                                      sync.RWMutex
	lockrdsClientMockDeleteDBClusterEndpoint                              sync.RWMutex
	lockrdsClientMockDeleteDBClusterEndpointRequest                       sync.RWMutex
	lockrdsClientMockDeleteDBClusterEndpointWithContext                   sync.RWMutex
	lockrdsClientMockDeleteDBClusterParameterGroup                        sync.RWMutex
	lockrdsClientMockDeleteDBClusterParameterGroupRequest                 sync.RWMutex
	lockrdsClientMockDeleteDBClusterParameterGroupWithContext             sync.RWMutex
	lockrdsClientMockDeleteDBClusterRequest                               sync.RWMutex
	lockrdsClientMockDeleteDBClusterSnapshot                              sync.RWMutex
	lockrdsClientMockDeleteDBClusterSnapshotRequest                       sync.RWMutex
	lockrdsClientMockDeleteDBClusterSnapshotWithContext                   sync.RWMutex
	lockrdsClientMockDeleteDBClusterWithContext                           sync.RWMutex
	lockrdsClientMockDeleteDBInstance                                     sync.RWMutex
	lockrdsClientMockDeleteDBInstanceAutomatedBackup                      sync.RWMutex
	lockrdsClientMockDeleteDBInstanceAutomatedBackupRequest               sync.RWMutex
	lockrdsClientMockDeleteDBInstanceAutomatedBackupWithContext           sync.RWMutex
	lockrdsClientMockDeleteDBInstanceRequest                              sync.RWMutex
	lockrdsClientMockDeleteDBInstanceWithContext                          sync.RWMutex
	lockrdsClientMockDeleteDBParameterGroup                               sync.RWMutex
	lockrdsClientMockDeleteDBParameterGroupRequest                        sync.RWMutex
	lockrdsClientMockDeleteDBParameterGroupWithContext                    sync.RWMutex
	lockrdsClientMockDeleteDBProxy                                        sync.RWMutex
	lockrdsClientMockDeleteDBProxyRequest                                 sync.RWMutex
	lockrdsClientMockDeleteDBProxyWithContext                             sync.RWMutex
	lockrdsClientMockDeleteDBSecurityGroup                                sync.RWMutex
	lockrdsClientMockDeleteDBSecurityGroupRequest                         sync.RWMutex
	lockrdsClientMockDeleteDBSecurityGroupWithContext                     sync.RWMutex
	lockrdsClientMockDeleteDBSnapshot                                     sync.RWMutex
	lockrdsClientMockDeleteDBSnapshotRequest                              sync.RWMutex
	lockrdsClientMockDeleteDBSnapshotWithContext                          sync.RWMutex
	lockrdsClientMockDeleteDBSubnetGroup                                  sync.RWMutex
	lockrdsClientMockDeleteDBSubnetGroupRequest                           sync.RWMutex
	lockrdsClientMockDeleteDBSubnetGroupWithContext                       sync.RWMutex
	lockrdsClientMockDeleteEventSubscription                              sync.RWMutex
	lockrdsClientMockDeleteEventSubscriptionRequest                       sync.RWMutex
	lockrdsClientMockDeleteEventSubscriptionWithContext                   sync.RWMutex
	lockrdsClientMockDeleteGlobalCluster                                  sync.RWMutex
	lockrdsClientMockDeleteGlobalClusterRequest                           sync.RWMutex
	lockrdsClientMockDeleteGlobalClusterWithContext                       sync.RWMutex
	lockrdsClientMockDeleteInstallationMedia                              sync.RWMutex
	lockrdsClientMockDeleteInstallationMediaRequest                       sync.RWMutex
	lockrdsClientMockDeleteInstallationMediaWithContext                   sync.RWMutex
	lockrdsClientMockDeleteOptionGroup                                    sync.RWMutex
	lockrdsClientMockDeleteOptionGroupRequest                             sync.RWMutex
	lockrdsClientMockDeleteOptionGroupWithContext                         sync.RWMutex
	lockrdsClientMockDeregisterDBProxyTargets                             sync.RWMutex
	lockrdsClientMockDeregisterDBProxyTargetsRequest                      sync.RWMutex
	lockrdsClientMockDeregisterDBProxyTargetsWithContext                  sync.RWMutex
	lockrdsClientMockDescribeAccountAttributes                            sync.RWMutex
	lockrdsClientMockDescribeAccountAttributesRequest                     sync.RWMutex
	lockrdsClientMockDescribeAccountAttributesWithContext                 sync.RWMutex
	lockrdsClientMockDescribeCertificates                                 sync.RWMutex
	lockrdsClientMockDescribeCertificatesRequest                          sync.RWMutex
	lockrdsClientMockDescribeCertificatesWithContext                      sync.RWMutex
	lockrdsClientMockDescribeCustomAvailabilityZones                      sync.RWMutex
	lockrdsClientMockDescribeCustomAvailabilityZonesPages                 sync.RWMutex
	lockrdsClientMockDescribeCustomAvailabilityZonesPagesWithContext      sync.RWMutex
	lockrdsClientMockDescribeCustomAvailabilityZonesRequest               sync.RWMutex
	lockrdsClientMockDescribeCustomAvailabilityZonesWithContext           sync.RWMutex
	lockrdsClientMockDescribeDBClusterBacktracks                          sync.RWMutex
	lockrdsClientMockDescribeDBClusterBacktracksRequest                   sync.RWMutex
	lockrdsClientMockDescribeDBClusterBacktracksWithContext               sync.RWMutex
	lockrdsClientMockDescribeDBClusterEndpoints                           sync.RWMutex
	lockrdsClientMockDescribeDBClusterEndpointsRequest                    sync.RWMutex
	lockrdsClientMockDescribeDBClusterEndpointsWithContext                sync.RWMutex
	lockrdsClientMockDescribeDBClusterParameterGroups                     sync.RWMutex
	lockrdsClientMockDescribeDBClusterParameterGroupsRequest              sync.RWMutex
	lockrdsClientMockDescribeDBClusterParameterGroupsWithContext          sync.RWMutex
	lockrdsClientMockDescribeDBClusterParameters                          sync.RWMutex
	lockrdsClientMockDescribeDBClusterParametersRequest                   sync.RWMutex
	lockrdsClientMockDescribeDBClusterParametersWithContext               sync.RWMutex
	lockrdsClientMockDescribeDBClusterSnapshotAttributes                  sync.RWMutex
	lockrdsClientMockDescribeDBClusterSnapshotAttributesRequest           sync.RWMutex
	lockrdsClientMockDescribeDBClusterSnapshotAttributesWithContext       sync.RWMutex
	lockrdsClientMockDescribeDBClusterSnapshots                           sync.RWMutex
	lockrdsClientMockDescribeDBClusterSnapshotsRequest                    sync.RWMutex
	lockrdsClientMockDescribeDBClusterSnapshotsWithContext                sync.RWMutex
	lockrdsClientMockDescribeDBClusters                                   sync.RWMutex
	lockrdsClientMockDescribeDBClustersPages                              sync.RWMutex
	lockrdsClientMockDescribeDBClustersPagesWithContext                   sync.RWMutex
	lockrdsClientMockDescribeDBClustersRequest                            sync.RWMutex
	lockrdsClientMockDescribeDBClustersWithContext                        sync.RWMutex
	lockrdsClientMockDescribeDBEngineVersions                             sync.RWMutex
	lockrdsClientMockDescribeDBEngineVersionsPages                        sync.RWMutex
	lockrdsClientMockDescribeDBEngineVersionsPagesWithContext             sync.RWMutex
	lockrdsClientMockDescribeDBEngineVersionsRequest                      sync.RWMutex
	lockrdsClientMockDescribeDBEngineVersionsWithContext                  sync.RWMutex
	lockrdsClientMockDescribeDBInstanceAutomatedBackups                   sync.RWMutex
	lockrdsClientMockDescribeDBInstanceAutomatedBackupsPages              sync.RWMutex
	lockrdsClientMockDescribeDBInstanceAutomatedBackupsPagesWithContext   sync.RWMutex
	lockrdsClientMockDescribeDBInstanceAutomatedBackupsRequest            sync.RWMutex
	lockrdsClientMockDescribeDBInstanceAutomatedBackupsWithContext        sync.RWMutex
	lockrdsClientMockDescribeDBInstances                                  sync.RWMutex
	lockrdsClientMockDescribeDBInstancesPages                             sync.RWMutex
	lockrdsClientMockDescribeDBInstancesPagesWithContext                  sync.RWMutex
	lockrdsClientMockDescribeDBInstancesRequest                           sync.RWMutex
	lockrdsClientMockDescribeDBInstancesWithContext                       sync.RWMutex
	lockrdsClientMockDescribeDBLogFiles                                   sync.RWMutex
	lockrdsClientMockDescribeDBLogFilesPages                              sync.RWMutex
	lockrdsClientMockDescribeDBLogFilesPagesWithContext                   sync.RWMutex
	lockrdsClientMockDescribeDBLogFilesRequest                            sync.RWMutex
	lockrdsClientMockDescribeDBLogFilesWithContext                        sync.RWMutex
	lockrdsClientMockDescribeDBParameterGroups                            sync.RWMutex
	lockrdsClientMockDescribeDBParameterGroupsPages                       sync.RWMutex
	lockrdsClientMockDescribeDBParameterGroupsPagesWithContext            sync.RWMutex
	lockrdsClientMockDescribeDBParameterGroupsRequest                     sync.RWMutex
	lockrdsClientMockDescribeDBParameterGroupsWithContext                 sync.RWMutex
	lockrdsClientMockDescribeDBParameters                                 sync.RWMutex
	lockrdsClientMockDescribeDBParametersPages                            sync.RWMutex
	lockrdsClientMockDescribeDBParametersPagesWithContext                 sync.RWMutex
	lockrdsClientMockDescribeDBParametersRequest                          sync.RWMutex
	lockrdsClientMockDescribeDBParametersWithContext                      sync.RWMutex
	lockrdsClientMockDescribeDBProxies                                    sync.RWMutex
	lockrdsClientMockDescribeDBProxiesPages                               sync.RWMutex
	lockrdsClientMockDescribeDBProxiesPagesWithContext                    sync.RWMutex
	lockrdsClientMockDescribeDBProxiesRequest                             sync.RWMutex
	lockrdsClientMockDescribeDBProxiesWithContext                         sync.RWMutex
	lockrdsClientMockDescribeDBProxyTargetGroups                          sync.RWMutex
	lockrdsClientMockDescribeDBProxyTargetGroupsPages                     sync.RWMutex
	lockrdsClientMockDescribeDBProxyTargetGroupsPagesWithContext          sync.RWMutex
	lockrdsClientMockDescribeDBProxyTargetGroupsRequest                   sync.RWMutex
	lockrdsClientMockDescribeDBProxyTargetGroupsWithContext               sync.RWMutex
	lockrdsClientMockDescribeDBProxyTargets                               sync.RWMutex
	lockrdsClientMockDescribeDBProxyTargetsPages                          sync.RWMutex
	lockrdsClientMockDescribeDBProxyTargetsPagesWithContext               sync.RWMutex
	lockrdsClientMockDescribeDBProxyTargetsRequest                        sync.RWMutex
	lockrdsClientMockDescribeDBProxyTargetsWithContext                    sync.RWMutex
	lockrdsClientMockDescribeDBSecurityGroups                             sync.RWMutex
	lockrdsClientMockDescribeDBSecurityGroupsPages                        sync.RWMutex
	lockrdsClientMockDescribeDBSecurityGroupsPagesWithContext             sync.RWMutex
	lockrdsClientMockDescribeDBSecurityGroupsRequest                      sync.RWMutex
	lockrdsClientMockDescribeDBSecurityGroupsWithContext                  sync.RWMutex
	lockrdsClientMockDescribeDBSnapshotAttributes                         sync.RWMutex
	lockrdsClientMockDescribeDBSnapshotAttributesRequest                  sync.RWMutex
	lockrdsClientMockDescribeDBSnapshotAttributesWithContext              sync.RWMutex
	lockrdsClientMockDescribeDBSnapshots                                  sync.RWMutex
	lockrdsClientMockDescribeDBSnapshotsPages                             sync.RWMutex
	lockrdsClientMockDescribeDBSnapshotsPagesWithContext                  sync.RWMutex
	lockrdsClientMockDescribeDBSnapshotsRequest                           sync.RWMutex
	lockrdsClientMockDescribeDBSnapshotsWithContext                       sync.RWMutex
	lockrdsClientMockDescribeDBSubnetGroups                               sync.RWMutex
	lockrdsClientMockDescribeDBSubnetGroupsPages                          sync.RWMutex
	lockrdsClientMockDescribeDBSubnetGroupsPagesWithContext               sync.RWMutex
	lockrdsClientMockDescribeDBSubnetGroupsRequest                        sync.RWMutex
	lockrdsClientMockDescribeDBSubnetGroupsWithContext                    sync.RWMutex
	lockrdsClientMockDescribeEngineDefaultClusterParameters               sync.RWMutex
	lockrdsClientMockDescribeEngineDefaultClusterParametersRequest        sync.RWMutex
	lockrdsClientMockDescribeEngineDefaultClusterParametersWithContext    sync.RWMutex
	lockrdsClientMockDescribeEngineDefaultParameters                      sync.RWMutex
	lockrdsClientMockDescribeEngineDefaultParametersPages                 sync.RWMutex
	lockrdsClientMockDescribeEngineDefaultParametersPagesWithContext      sync.RWMutex
	lockrdsClientMockDescribeEngineDefaultParametersRequest               sync.RWMutex
	lockrdsClientMockDescribeEngineDefaultParametersWithContext           sync.RWMutex
	lockrdsClientMockDescribeEventCategories                              sync.RWMutex
	lockrdsClientMockDescribeEventCategoriesRequest                       sync.RWMutex
	lockrdsClientMockDescribeEventCategoriesWithContext                   sync.RWMutex
	lockrdsClientMockDescribeEventSubscriptions                           sync.RWMutex
	lockrdsClientMockDescribeEventSubscriptionsPages                      sync.RWMutex
	lockrdsClientMockDescribeEventSubscriptionsPagesWithContext           sync.RWMutex
	lockrdsClientMockDescribeEventSubscriptionsRequest                    sync.RWMutex
	lockrdsClientMockDescribeEventSubscriptionsWithContext                sync.RWMutex
	lockrdsClientMockDescribeEvents                                       sync.RWMutex
	lockrdsClientMockDescribeEventsPages                                  sync.RWMutex
	lockrdsClientMockDescribeEventsPagesWithContext                       sync.RWMutex
	lockrdsClientMockDescribeEventsRequest                                sync.RWMutex
	lockrdsClientMockDescribeEventsWithContext                            sync.RWMutex
	lockrdsClientMockDescribeExportTasks                                  sync.RWMutex
	lockrdsClientMockDescribeExportTasksPages                             sync.RWMutex
	lockrdsClientMockDescribeExportTasksPagesWithContext                  sync.RWMutex
	lockrdsClientMockDescribeExportTasksRequest                           sync.RWMutex
	lockrdsClientMockDescribeExportTasksWithContext                       sync.RWMutex
	lockrdsClientMockDescribeGlobalClusters                               sync.RWMutex
	lockrdsClientMockDescribeGlobalClustersPages                          sync.RWMutex
	lockrdsClientMockDescribeGlobalClustersPagesWithContext               sync.RWMutex
	lockrdsClientMockDescribeGlobalClustersRequest                        sync.RWMutex
	lockrdsClientMockDescribeGlobalClustersWithContext                    sync.RWMutex
	lockrdsClientMockDescribeInstallationMedia                            sync.RWMutex
	lockrdsClientMockDescribeInstallationMediaPages                       sync.RWMutex
	lockrdsClientMockDescribeInstallationMediaPagesWithContext            sync.RWMutex
	lockrdsClientMockDescribeInstallationMediaRequest                     sync.RWMutex
	lockrdsClientMockDescribeInstallationMediaWithContext                 sync.RWMutex
	lockrdsClientMockDescribeOptionGroupOptions                           sync.RWMutex
	lockrdsClientMockDescribeOptionGroupOptionsPages                      sync.RWMutex
	lockrdsClientMockDescribeOptionGroupOptionsPagesWithContext           sync.RWMutex
	lockrdsClientMockDescribeOptionGroupOptionsRequest                    sync.RWMutex
	lockrdsClientMockDescribeOptionGroupOptionsWithContext                sync.RWMutex
	lockrdsClientMockDescribeOptionGroups                                 sync.RWMutex
	lockrdsClientMockDescribeOptionGroupsPages                            sync.RWMutex
	lockrdsClientMockDescribeOptionGroupsPagesWithContext                 sync.RWMutex
	lockrdsClientMockDescribeOptionGroupsRequest                          sync.RWMutex
	lockrdsClientMockDescribeOptionGroupsWithContext                      sync.RWMutex
	lockrdsClientMockDescribeOrderableDBInstanceOptions                   sync.RWMutex
	lockrdsClientMockDescribeOrderableDBInstanceOptionsPages              sync.RWMutex
	lockrdsClientMockDescribeOrderableDBInstanceOptionsPagesWithContext   sync.RWMutex
	lockrdsClientMockDescribeOrderableDBInstanceOptionsRequest            sync.RWMutex
	lockrdsClientMockDescribeOrderableDBInstanceOptionsWithContext        sync.RWMutex
	lockrdsClientMockDescribePendingMaintenanceActions                    sync.RWMutex
	lockrdsClientMockDescribePendingMaintenanceActionsRequest             sync.RWMutex
	lockrdsClientMockDescribePendingMaintenanceActionsWithContext         sync.RWMutex
	lockrdsClientMockDescribeReservedDBInstances                          sync.RWMutex
	lockrdsClientMockDescribeReservedDBInstancesOfferings                 sync.RWMutex
	lockrdsClientMockDescribeReservedDBInstancesOfferingsPages            sync.RWMutex
	lockrdsClientMockDescribeReservedDBInstancesOfferingsPagesWithContext sync.RWMutex
	lockrdsClientMockDescribeReservedDBInstancesOfferingsRequest          sync.RWMutex
	lockrdsClientMockDescribeReservedDBInstancesOfferingsWithContext      sync.RWMutex
	lockrdsClientMockDescribeReservedDBInstancesPages                     sync.RWMutex
	lockrdsClientMockDescribeReservedDBInstancesPagesWithContext          sync.RWMutex
	lockrdsClientMockDescribeReservedDBInstancesRequest                   sync.RWMutex
	lockrdsClientMockDescribeReservedDBInstancesWithContext               sync.RWMutex
	lockrdsClientMockDescribeSourceRegions                                sync.RWMutex
	lockrdsClientMockDescribeSourceRegionsRequest                         sync.RWMutex
	lockrdsClientMockDescribeSourceRegionsWithContext                     sync.RWMutex
	lockrdsClientMockDescribeValidDBInstanceModifications                 sync.RWMutex
	lockrdsClientMockDescribeValidDBInstanceModificationsRequest          sync.RWMutex
	lockrdsClientMockDescribeValidDBInstanceModificationsWithContext      sync.RWMutex
	lockrdsClientMockDownloadDBLogFilePortion                             sync.RWMutex
	lockrdsClientMockDownloadDBLogFilePortionPages                        sync.RWMutex
	lockrdsClientMockDownloadDBLogFilePortionPagesWithContext             sync.RWMutex
	lockrdsClientMockDownloadDBLogFilePortionRequest                      sync.RWMutex
	lockrdsClientMockDownloadDBLogFilePortionWithContext                  sync.RWMutex
	lockrdsClientMockFailoverDBCluster                                    sync.RWMutex
	lockrdsClientMockFailoverDBClusterRequest                             sync.RWMutex
	lockrdsClientMockFailoverDBClusterWithContext                         sync.RWMutex
	lockrdsClientMockImportInstallationMedia                              sync.RWMutex
	lockrdsClientMockImportInstallationMediaRequest                       sync.RWMutex
	lockrdsClientMockImportInstallationMediaWithContext                   sync.RWMutex
	lockrdsClientMockListTagsForResource                                  sync.RWMutex
	lockrdsClientMockListTagsForResourceRequest                           sync.RWMutex
	lockrdsClientMockListTagsForResourceWithContext                       sync.RWMutex
	lockrdsClientMockModifyCertificates                                   sync.RWMutex
	lockrdsClientMockModifyCertificatesRequest                            sync.RWMutex
	lockrdsClientMockModifyCertificatesWithContext                        sync.RWMutex
	lockrdsClientMockModifyCurrentDBClusterCapacity                       sync.RWMutex
	lockrdsClientMockModifyCurrentDBClusterCapacityRequest                sync.RWMutex
	lockrdsClientMockModifyCurrentDBClusterCapacityWithContext            sync.RWMutex
	lockrdsClientMockModifyDBCluster                                      sync.RWMutex
	lockrdsClientMockModifyDBClusterEndpoint                              sync.RWMutex
	lockrdsClientMockModifyDBClusterEndpointRequest                       sync.RWMutex
	lockrdsClientMockModifyDBClusterEndpointWithContext                   sync.RWMutex
	lockrdsClientMockModifyDBClusterParameterGroup                        sync.RWMutex
	lockrdsClientMockModifyDBClusterParameterGroupRequest                 sync.RWMutex
	lockrdsClientMockModifyDBClusterParameterGroupWithContext             sync.RWMutex
	lockrdsClientMockModifyDBClusterRequest                               sync.RWMutex
	lockrdsClientMockModifyDBClusterSnapshotAttribute                     sync.RWMutex
	lockrdsClientMockModifyDBClusterSnapshotAttributeRequest              sync.RWMutex
	lockrdsClientMockModifyDBClusterSnapshotAttributeWithContext          sync.RWMutex
	lockrdsClientMockModifyDBClusterWithContext                           sync.RWMutex
	lockrdsClientMockModifyDBInstance                                     sync.RWMutex
	lockrdsClientMockModifyDBInstanceRequest                              sync.RWMutex
	lockrdsClientMockModifyDBInstanceWithContext                          sync.RWMutex
	lockrdsClientMockModifyDBParameterGroup                               sync.RWMutex
	lockrdsClientMockModifyDBParameterGroupRequest                        sync.RWMutex
	lockrdsClientMockModifyDBParameterGroupWithContext                    sync.RWMutex
	lockrdsClientMockModifyDBProxy                                        sync.RWMutex
	lockrdsClientMockModifyDBProxyRequest                                 sync.RWMutex
	lockrdsClientMockModifyDBProxyTargetGroup                             sync.RWMutex
	lockrdsClientMockModifyDBProxyTargetGroupRequest                      sync.RWMutex
	lockrdsClientMockModifyDBProxyTargetGroupWithContext                  sync.RWMutex
	lockrdsClientMockModifyDBProxyWithContext                             sync.RWMutex
	lockrdsClientMockModifyDBSnapshot                                     sync.RWMutex
	lockrdsClientMockModifyDBSnapshotAttribute                            sync.RWMutex
	lockrdsClientMockModifyDBSnapshotAttributeRequest                     sync.RWMutex
	lockrdsClientMockModifyDBSnapshotAttributeWithContext                 sync.RWMutex
	lockrdsClientMockModifyDBSnapshotRequest                              sync.RWMutex
	lockrdsClientMockModifyDBSnapshotWithContext                          sync.RWMutex
	lockrdsClientMockModifyDBSubnetGroup                                  sync.RWMutex
	lockrdsClientMockModifyDBSubnetGroupRequest                           sync.RWMutex
	lockrdsClientMockModifyDBSubnetGroupWithContext                       sync.RWMutex
	lockrdsClientMockModifyEventSubscription                              sync.RWMutex
	lockrdsClientMockModifyEventSubscriptionRequest                       sync.RWMutex
	lockrdsClientMockModifyEventSubscriptionWithContext                   sync.RWMutex
	lockrdsClientMockModifyGlobalCluster                                  sync.RWMutex
	lockrdsClientMockModifyGlobalClusterRequest                           sync.RWMutex
	lockrdsClientMockModifyGlobalClusterWithContext                       sync.RWMutex
	lockrdsClientMockModifyOptionGroup                                    sync.RWMutex
	lockrdsClientMockModifyOptionGroupRequest                             sync.RWMutex
	lockrdsClientMockModifyOptionGroupWithContext                         sync.RWMutex
	lockrdsClientMockPromoteReadReplica                                   sync.RWMutex
	lockrdsClientMockPromoteReadReplicaDBCluster                          sync.RWMutex
	lockrdsClientMockPromoteReadReplicaDBClusterRequest                   sync.RWMutex
	lockrdsClientMockPromoteReadReplicaDBClusterWithContext               sync.RWMutex
	lockrdsClientMockPromoteReadReplicaRequest                            sync.RWMutex
	lockrdsClientMockPromoteReadReplicaWithContext                        sync.RWMutex
	lockrdsClientMockPurchaseReservedDBInstancesOffering                  sync.RWMutex
	lockrdsClientMockPurchaseReservedDBInstancesOfferingRequest           sync.RWMutex
	lockrdsClientMockPurchaseReservedDBInstancesOfferingWithContext       sync.RWMutex
	lockrdsClientMockRebootDBInstance                                     sync.RWMutex
	lockrdsClientMockRebootDBInstanceRequest                              sync.RWMutex
	lockrdsClientMockRebootDBInstanceWithContext                          sync.RWMutex
	lockrdsClientMockRegisterDBProxyTargets                               sync.RWMutex
	lockrdsClientMockRegisterDBProxyTargetsRequest                        sync.RWMutex
	lockrdsClientMockRegisterDBProxyTargetsWithContext                    sync.RWMutex
	lockrdsClientMockRemoveFromGlobalCluster                              sync.RWMutex
	lockrdsClientMockRemoveFromGlobalClusterRequest                       sync.RWMutex
	lockrdsClientMockRemoveFromGlobalClusterWithContext                   sync.RWMutex
	lockrdsClientMockRemoveRoleFromDBCluster                              sync.RWMutex
	lockrdsClientMockRemoveRoleFromDBClusterRequest                       sync.RWMutex
	lockrdsClientMockRemoveRoleFromDBClusterWithContext                   sync.RWMutex
	lockrdsClientMockRemoveRoleFromDBInstance                             sync.RWMutex
	lockrdsClientMockRemoveRoleFromDBInstanceRequest                      sync.RWMutex
	lockrdsClientMockRemoveRoleFromDBInstanceWithContext                  sync.RWMutex
	lockrdsClientMockRemoveSourceIdentifierFromSubscription               sync.RWMutex
	lockrdsClientMockRemoveSourceIdentifierFromSubscriptionRequest        sync.RWMutex
	lockrdsClientMockRemoveSourceIdentifierFromSubscriptionWithContext    sync.RWMutex
	lockrdsClientMockRemoveTagsFromResource                               sync.RWMutex
	lockrdsClientMockRemoveTagsFromResourceRequest                        sync.RWMutex
	lockrdsClientMockRemoveTagsFromResourceWithContext                    sync.RWMutex
	lockrdsClientMockResetDBClusterParameterGroup                         sync.RWMutex
	lockrdsClientMockResetDBClusterParameterGroupRequest                  sync.RWMutex
	lockrdsClientMockResetDBClusterParameterGroupWithContext              sync.RWMutex
	lockrdsClientMockResetDBParameterGroup                                sync.RWMutex
	lockrdsClientMockResetDBParameterGroupRequest                         sync.RWMutex
	lockrdsClientMockResetDBParameterGroupWithContext                     sync.RWMutex
	lockrdsClientMockRestoreDBClusterFromS3                               sync.RWMutex
	lockrdsClientMockRestoreDBClusterFromS3Request                        sync.RWMutex
	lockrdsClientMockRestoreDBClusterFromS3WithContext                    sync.RWMutex
	lockrdsClientMockRestoreDBClusterFromSnapshot                         sync.RWMutex
	lockrdsClientMockRestoreDBClusterFromSnapshotRequest                  sync.RWMutex
	lockrdsClientMockRestoreDBClusterFromSnapshotWithContext              sync.RWMutex
	lockrdsClientMockRestoreDBClusterToPointInTime                        sync.RWMutex
	lockrdsClientMockRestoreDBClusterToPointInTimeRequest                 sync.RWMutex
	lockrdsClientMockRestoreDBClusterToPointInTimeWithContext             sync.RWMutex
	lockrdsClientMockRestoreDBInstanceFromDBSnapshot                      sync.RWMutex
	lockrdsClientMockRestoreDBInstanceFromDBSnapshotRequest               sync.RWMutex
	lockrdsClientMockRestoreDBInstanceFromDBSnapshotWithContext           sync.RWMutex
	lockrdsClientMockRestoreDBInstanceFromS3                              sync.RWMutex
	lockrdsClientMockRestoreDBInstanceFromS3Request                       sync.RWMutex
	lockrdsClientMockRestoreDBInstanceFromS3WithContext                   sync.RWMutex
	lockrdsClientMockRestoreDBInstanceToPointInTime                       sync.RWMutex
	lockrdsClientMockRestoreDBInstanceToPointInTimeRequest                sync.RWMutex
	lockrdsClientMockRestoreDBInstanceToPointInTimeWithContext            sync.RWMutex
	lockrdsClientMockRevokeDBSecurityGroupIngress                         sync.RWMutex
	lockrdsClientMockRevokeDBSecurityGroupIngressRequest                  sync.RWMutex
	lockrdsClientMockRevokeDBSecurityGroupIngressWithContext              sync.RWMutex
	lockrdsClientMockStartActivityStream                                  sync.RWMutex
	lockrdsClientMockStartActivityStreamRequest                           sync.RWMutex
	lockrdsClientMockStartActivityStreamWithContext                       sync.RWMutex
	lockrdsClientMockStartDBCluster                                       sync.RWMutex
	lockrdsClientMockStartDBClusterRequest                                sync.RWMutex
	lockrdsClientMockStartDBClusterWithContext                            sync.RWMutex
	lockrdsClientMockStartDBInstance                                      sync.RWMutex
	lockrdsClientMockStartDBInstanceRequest                               sync.RWMutex
	lockrdsClientMockStartDBInstanceWithContext                           sync.RWMutex
	lockrdsClientMockStartExportTask                                      sync.RWMutex
	lockrdsClientMockStartExportTaskRequest                               sync.RWMutex
	lockrdsClientMockStartExportTaskWithContext                           sync.RWMutex
	lockrdsClientMockStopActivityStream                                   sync.RWMutex
	lockrdsClientMockStopActivityStreamRequest                            sync.RWMutex
	lockrdsClientMockStopActivityStreamWithContext                        sync.RWMutex
	lockrdsClientMockStopDBCluster                                        sync.RWMutex
	lockrdsClientMockStopDBClusterRequest                                 sync.RWMutex
	lockrdsClientMockStopDBClusterWithContext                             sync.RWMutex
	lockrdsClientMockStopDBInstance                                       sync.RWMutex
	lockrdsClientMockStopDBInstanceRequest                                sync.RWMutex
	lockrdsClientMockStopDBInstanceWithContext                            sync.RWMutex
	lockrdsClientMockWaitUntilDBClusterSnapshotAvailable                  sync.RWMutex
	lockrdsClientMockWaitUntilDBClusterSnapshotAvailableWithContext       sync.RWMutex
	lockrdsClientMockWaitUntilDBClusterSnapshotDeleted                    sync.RWMutex
	lockrdsClientMockWaitUntilDBClusterSnapshotDeletedWithContext         sync.RWMutex
	lockrdsClientMockWaitUntilDBInstanceAvailable                         sync.RWMutex
	lockrdsClientMockWaitUntilDBInstanceAvailableWithContext              sync.RWMutex
	lockrdsClientMockWaitUntilDBInstanceDeleted                           sync.RWMutex
	lockrdsClientMockWaitUntilDBInstanceDeletedWithContext                sync.RWMutex
	lockrdsClientMockWaitUntilDBSnapshotAvailable                         sync.RWMutex
	lockrdsClientMockWaitUntilDBSnapshotAvailableWithContext              sync.RWMutex
	lockrdsClientMockWaitUntilDBSnapshotDeleted                           sync.RWMutex
	lockrdsClientMockWaitUntilDBSnapshotDeletedWithContext                sync.RWMutex
)

// Ensure, that rdsClientMock does implement rdsClient.
// If this is not the case, regenerate this file with moq.
var _ rdsClient = &rdsClientMock{}

// rdsClientMock is a mock implementation of rdsClient.
//
//     func TestSomethingThatUsesrdsClient(t *testing.T) {
//
//         // make and configure a mocked rdsClient
//         mockedrdsClient := &rdsClientMock{
//             AddRoleToDBClusterFunc: func(in1 *rds.AddRoleToDBClusterInput) (*rds.AddRoleToDBClusterOutput, error) {
// 	               panic("mock out the AddRoleToDBCluster method")
//             },
//             AddRoleToDBClusterRequestFunc: func(in1 *rds.AddRoleToDBClusterInput) (*request.Request, *rds.AddRoleToDBClusterOutput) {
// 	               panic("mock out the AddRoleToDBClusterRequest method")
//             },
//             AddRoleToDBClusterWithContextFunc: func(in1 context.Context, in2 *rds.AddRoleToDBClusterInput, in3 ...request.Option) (*rds.AddRoleToDBClusterOutput, error) {
// 	               panic("mock out the AddRoleToDBClusterWithContext method")
//             },
//             AddRoleToDBInstanceFunc: func(in1 *rds.AddRoleToDBInstanceInput) (*rds.AddRoleToDBInstanceOutput, error) {
// 	               panic("mock out the AddRoleToDBInstance method")
//             },
//             AddRoleToDBInstanceRequestFunc: func(in1 *rds.AddRoleToDBInstanceInput) (*request.Request, *rds.AddRoleToDBInstanceOutput) {
// 	               panic("mock out the AddRoleToDBInstanceRequest method")
//             },
//             AddRoleToDBInstanceWithContextFunc: func(in1 context.Context, in2 *rds.AddRoleToDBInstanceInput, in3 ...request.Option) (*rds.AddRoleToDBInstanceOutput, error) {
// 	               panic("mock out the AddRoleToDBInstanceWithContext method")
//             },
//             AddSourceIdentifierToSubscriptionFunc: func(in1 *rds.AddSourceIdentifierToSubscriptionInput) (*rds.AddSourceIdentifierToSubscriptionOutput, error) {
// 	               panic("mock out the AddSourceIdentifierToSubscription method")
//             },
//             AddSourceIdentifierToSubscriptionRequestFunc: func(in1 *rds.AddSourceIdentifierToSubscriptionInput) (*request.Request, *rds.AddSourceIdentifierToSubscriptionOutput) {
// 	               panic("mock out the AddSourceIdentifierToSubscriptionRequest method")
//             },
//             AddSourceIdentifierToSubscriptionWithContextFunc: func(in1 context.Context, in2 *rds.AddSourceIdentifierToSubscriptionInput, in3 ...request.Option) (*rds.AddSourceIdentifierToSubscriptionOutput, error) {
// 	               panic("mock out the AddSourceIdentifierToSubscriptionWithContext method")
//             },
//             AddTagsToResourceFunc: func(in1 *rds.AddTagsToResourceInput) (*rds.AddTagsToResourceOutput, error) {
// 	               panic("mock out the AddTagsToResource method")
//             },
//             AddTagsToResourceRequestFunc: func(in1 *rds.AddTagsToResourceInput) (*request.Request, *rds.AddTagsToResourceOutput) {
// 	               panic("mock out the AddTagsToResourceRequest method")
//             },
//             AddTagsToResourceWithContextFunc: func(in1 context.Context, in2 *rds.AddTagsToResourceInput, in3 ...request.Option) (*rds.AddTagsToResourceOutput, error) {
// 	               panic("mock out the AddTagsToResourceWithContext method")
//             },
//             ApplyPendingMaintenanceActionFunc: func(in1 *rds.ApplyPendingMaintenanceActionInput) (*rds.ApplyPendingMaintenanceActionOutput, error) {
// 	               panic("mock out the ApplyPendingMaintenanceAction method")
//             },
//             ApplyPendingMaintenanceActionRequestFunc: func(in1 *rds.ApplyPendingMaintenanceActionInput) (*request.Request, *rds.ApplyPendingMaintenanceActionOutput) {
// 	               panic("mock out the ApplyPendingMaintenanceActionRequest method")
//             },
//             ApplyPendingMaintenanceActionWithContextFunc: func(in1 context.Context, in2 *rds.ApplyPendingMaintenanceActionInput, in3 ...request.Option) (*rds.ApplyPendingMaintenanceActionOutput, error) {
// 	               panic("mock out the ApplyPendingMaintenanceActionWithContext method")
//             },
//             AuthorizeDBSecurityGroupIngressFunc: func(in1 *rds.AuthorizeDBSecurityGroupIngressInput) (*rds.AuthorizeDBSecurityGroupIngressOutput, error) {
// 	               panic("mock out the AuthorizeDBSecurityGroupIngress method")
//             },
//             AuthorizeDBSecurityGroupIngressRequestFunc: func(in1 *rds.AuthorizeDBSecurityGroupIngressInput) (*request.Request, *rds.AuthorizeDBSecurityGroupIngressOutput) {
// 	               panic("mock out the AuthorizeDBSecurityGroupIngressRequest method")
//             },
//             AuthorizeDBSecurityGroupIngressWithContextFunc: func(in1 context.Context, in2 *rds.AuthorizeDBSecurityGroupIngressInput, in3 ...request.Option) (*rds.AuthorizeDBSecurityGroupIngressOutput, error) {
// 	               panic("mock out the AuthorizeDBSecurityGroupIngressWithContext method")
//             },
//             BacktrackDBClusterFunc: func(in1 *rds.BacktrackDBClusterInput) (*rds.BacktrackDBClusterOutput, error) {
// 	               panic("mock out the BacktrackDBCluster method")
//             },
//             BacktrackDBClusterRequestFunc: func(in1 *rds.BacktrackDBClusterInput) (*request.Request, *rds.BacktrackDBClusterOutput) {
// 	               panic("mock out the BacktrackDBClusterRequest method")
//             },
//             BacktrackDBClusterWithContextFunc: func(in1 context.Context, in2 *rds.BacktrackDBClusterInput, in3 ...request.Option) (*rds.BacktrackDBClusterOutput, error) {
// 	               panic("mock out the BacktrackDBClusterWithContext method")
//             },
//             CancelExportTaskFunc: func(in1 *rds.CancelExportTaskInput) (*rds.CancelExportTaskOutput, error) {
// 	               panic("mock out the CancelExportTask method")
//             },
//             CancelExportTaskRequestFunc: func(in1 *rds.CancelExportTaskInput) (*request.Request, *rds.CancelExportTaskOutput) {
// 	               panic("mock out the CancelExportTaskRequest method")
//             },
//             CancelExportTaskWithContextFunc: func(in1 context.Context, in2 *rds.CancelExportTaskInput, in3 ...request.Option) (*rds.CancelExportTaskOutput, error) {
// 	               panic("mock out the CancelExportTaskWithContext method")
//             },
//             CopyDBClusterParameterGroupFunc: func(in1 *rds.CopyDBClusterParameterGroupInput) (*rds.CopyDBClusterParameterGroupOutput, error) {
// 	               panic("mock out the CopyDBClusterParameterGroup method")
//             },
//             CopyDBClusterParameterGroupRequestFunc: func(in1 *rds.CopyDBClusterParameterGroupInput) (*request.Request, *rds.CopyDBClusterParameterGroupOutput) {
// 	               panic("mock out the CopyDBClusterParameterGroupRequest method")
//             },
//             CopyDBClusterParameterGroupWithContextFunc: func(in1 context.Context, in2 *rds.CopyDBClusterParameterGroupInput, in3 ...request.Option) (*rds.CopyDBClusterParameterGroupOutput, error) {
// 	               panic("mock out the CopyDBClusterParameterGroupWithContext method")
//             },
//             CopyDBClusterSnapshotFunc: func(in1 *rds.CopyDBClusterSnapshotInput) (*rds.CopyDBClusterSnapshotOutput, error) {
// 	               panic("mock out the CopyDBClusterSnapshot method")
//             },
//             CopyDBClusterSnapshotRequestFunc: func(in1 *rds.CopyDBClusterSnapshotInput) (*request.Request, *rds.CopyDBClusterSnapshotOutput) {
// 	               panic("mock out the CopyDBClusterSnapshotRequest method")
//             },
//             CopyDBClusterSnapshotWithContextFunc: func(in1 context.Context, in2 *rds.CopyDBClusterSnapshotInput, in3 ...request.Option) (*rds.CopyDBClusterSnapshotOutput, error) {
// 	               panic("mock out the CopyDBClusterSnapshotWithContext method")
//             },
//             CopyDBParameterGroupFunc: func(in1 *rds.CopyDBParameterGroupInput) (*rds.CopyDBParameterGroupOutput, error) {
// 	               panic("mock out the CopyDBParameterGroup method")
//             },
//             CopyDBParameterGroupRequestFunc: func(in1 *rds.CopyDBParameterGroupInput) (*request.Request, *rds.CopyDBParameterGroupOutput) {
// 	               panic("mock out the CopyDBParameterGroupRequest method")
//             },
//             CopyDBParameterGroupWithContextFunc: func(in1 context.Context, in2 *rds.CopyDBParameterGroupInput, in3 ...request.Option) (*rds.CopyDBParameterGroupOutput, error) {
// 	               panic("mock out the CopyDBParameterGroupWithContext method")
//             },
//             CopyDBSnapshotFunc: func(in1 *rds.CopyDBSnapshotInput) (*rds.CopyDBSnapshotOutput, error) {
// 	               panic("mock out the CopyDBSnapshot method")
//             },
//             CopyDBSnapshotRequestFunc: func(in1 *rds.CopyDBSnapshotInput) (*request.Request, *rds.CopyDBSnapshotOutput) {
// 	               panic("mock out the CopyDBSnapshotRequest method")
//             },
//             CopyDBSnapshotWithContextFunc: func(in1 context.Context, in2 *rds.CopyDBSnapshotInput, in3 ...request.Option) (*rds.CopyDBSnapshotOutput, error) {
// 	               panic("mock out the CopyDBSnapshotWithContext method")
//             },
//             CopyOptionGroupFunc: func(in1 *rds.CopyOptionGroupInput) (*rds.CopyOptionGroupOutput, error) {
// 	               panic("mock out the CopyOptionGroup method")
//             },
//             CopyOptionGroupRequestFunc: func(in1 *rds.CopyOptionGroupInput) (*request.Request, *rds.CopyOptionGroupOutput) {
// 	               panic("mock out the CopyOptionGroupRequest method")
//             },
//             CopyOptionGroupWithContextFunc: func(in1 context.Context, in2 *rds.CopyOptionGroupInput, in3 ...request.Option) (*rds.CopyOptionGroupOutput, error) {
// 	               panic("mock out the CopyOptionGroupWithContext method")
//             },
//             CreateCustomAvailabilityZoneFunc: func(in1 *rds.CreateCustomAvailabilityZoneInput) (*rds.CreateCustomAvailabilityZoneOutput, error) {
// 	               panic("mock out the CreateCustomAvailabilityZone method")
//             },
//             CreateCustomAvailabilityZoneRequestFunc: func(in1 *rds.CreateCustomAvailabilityZoneInput) (*request.Request, *rds.CreateCustomAvailabilityZoneOutput) {
// 	               panic("mock out the CreateCustomAvailabilityZoneRequest method")
//             },
//             CreateCustomAvailabilityZoneWithContextFunc: func(in1 context.Context, in2 *rds.CreateCustomAvailabilityZoneInput, in3 ...request.Option) (*rds.CreateCustomAvailabilityZoneOutput, error) {
// 	               panic("mock out the CreateCustomAvailabilityZoneWithContext method")
//             },
//             CreateDBClusterFunc: func(in1 *rds.CreateDBClusterInput) (*rds.CreateDBClusterOutput, error) {
// 	               panic("mock out the CreateDBCluster method")
//             },
//             CreateDBClusterEndpointFunc: func(in1 *rds.CreateDBClusterEndpointInput) (*rds.CreateDBClusterEndpointOutput, error) {
// 	               panic("mock out the CreateDBClusterEndpoint method")
//             },
//             CreateDBClusterEndpointRequestFunc: func(in1 *rds.CreateDBClusterEndpointInput) (*request.Request, *rds.CreateDBClusterEndpointOutput) {
// 	               panic("mock out the CreateDBClusterEndpointRequest method")
//             },
//             CreateDBClusterEndpointWithContextFunc: func(in1 context.Context, in2 *rds.CreateDBClusterEndpointInput, in3 ...request.Option) (*rds.CreateDBClusterEndpointOutput, error) {
// 	               panic("mock out the CreateDBClusterEndpointWithContext method")
//             },
//             CreateDBClusterParameterGroupFunc: func(in1 *rds.CreateDBClusterParameterGroupInput) (*rds.CreateDBClusterParameterGroupOutput, error) {
// 	               panic("mock out the CreateDBClusterParameterGroup method")
//             },
//             CreateDBClusterParameterGroupRequestFunc: func(in1 *rds.CreateDBClusterParameterGroupInput) (*request.Request, *rds.CreateDBClusterParameterGroupOutput) {
// 	               panic("mock out the CreateDBClusterParameterGroupRequest method")
//             },
//             CreateDBClusterParameterGroupWithContextFunc: func(in1 context.Context, in2 *rds.CreateDBClusterParameterGroupInput, in3 ...request.Option) (*rds.CreateDBClusterParameterGroupOutput, error) {
// 	               panic("mock out the CreateDBClusterParameterGroupWithContext method")
//             },
//             CreateDBClusterRequestFunc: func(in1 *rds.CreateDBClusterInput) (*request.Request, *rds.CreateDBClusterOutput) {
// 	               panic("mock out the CreateDBClusterRequest method")
//             },
//             CreateDBClusterSnapshotFunc: func(in1 *rds.CreateDBClusterSnapshotInput) (*rds.CreateDBClusterSnapshotOutput, error) {
// 	               panic("mock out the CreateDBClusterSnapshot method")
//             },
//             CreateDBClusterSnapshotRequestFunc: func(in1 *rds.CreateDBClusterSnapshotInput) (*request.Request, *rds.CreateDBClusterSnapshotOutput) {
// 	               panic("mock out the CreateDBClusterSnapshotRequest method")
//             },
//             CreateDBClusterSnapshotWithContextFunc: func(in1 context.Context, in2 *rds.CreateDBClusterSnapshotInput, in3 ...request.Option) (*rds.CreateDBClusterSnapshotOutput, error) {
// 	               panic("mock out the CreateDBClusterSnapshotWithContext method")
//             },
//             CreateDBClusterWithContextFunc: func(in1 context.Context, in2 *rds.CreateDBClusterInput, in3 ...request.Option) (*rds.CreateDBClusterOutput, error) {
// 	               panic("mock out the CreateDBClusterWithContext method")
//             },
//             CreateDBInstanceFunc: func(in1 *rds.CreateDBInstanceInput) (*rds.CreateDBInstanceOutput, error) {
// 	               panic("mock out the CreateDBInstance method")
//             },
//             CreateDBInstanceReadReplicaFunc: func(in1 *rds.CreateDBInstanceReadReplicaInput) (*rds.CreateDBInstanceReadReplicaOutput, error) {
// 	               panic("mock out the CreateDBInstanceReadReplica method")
//             },
//             CreateDBInstanceReadReplicaRequestFunc: func(in1 *rds.CreateDBInstanceReadReplicaInput) (*request.Request, *rds.CreateDBInstanceReadReplicaOutput) {
// 	               panic("mock out the CreateDBInstanceReadReplicaRequest method")
//             },
//             CreateDBInstanceReadReplicaWithContextFunc: func(in1 context.Context, in2 *rds.CreateDBInstanceReadReplicaInput, in3 ...request.Option) (*rds.CreateDBInstanceReadReplicaOutput, error) {
// 	               panic("mock out the CreateDBInstanceReadReplicaWithContext method")
//             },
//             CreateDBInstanceRequestFunc: func(in1 *rds.CreateDBInstanceInput) (*request.Request, *rds.CreateDBInstanceOutput) {
// 	               panic("mock out the CreateDBInstanceRequest method")
//             },
//             CreateDBInstanceWithContextFunc: func(in1 context.Context, in2 *rds.CreateDBInstanceInput, in3 ...request.Option) (*rds.CreateDBInstanceOutput, error) {
// 	               panic("mock out the CreateDBInstanceWithContext method")
//             },
//             CreateDBParameterGroupFunc: func(in1 *rds.CreateDBParameterGroupInput) (*rds.CreateDBParameterGroupOutput, error) {
// 	               panic("mock out the CreateDBParameterGroup method")
//             },
//             CreateDBParameterGroupRequestFunc: func(in1 *rds.CreateDBParameterGroupInput) (*request.Request, *rds.CreateDBParameterGroupOutput) {
// 	               panic("mock out the CreateDBParameterGroupRequest method")
//             },
//             CreateDBParameterGroupWithContextFunc: func(in1 context.Context, in2 *rds.CreateDBParameterGroupInput, in3 ...request.Option) (*rds.CreateDBParameterGroupOutput, error) {
// 	               panic("mock out the CreateDBParameterGroupWithContext method")
//             },
//             CreateDBProxyFunc: func(in1 *rds.CreateDBProxyInput) (*rds.CreateDBProxyOutput, error) {
// 	               panic("mock out the CreateDBProxy method")
//             },
//             CreateDBProxyRequestFunc: func(in1 *rds.CreateDBProxyInput) (*request.Request, *rds.CreateDBProxyOutput) {
// 	               panic("mock out the CreateDBProxyRequest method")
//             },
//             CreateDBProxyWithContextFunc: func(in1 context.Context, in2 *rds.CreateDBProxyInput, in3 ...request.Option) (*rds.CreateDBProxyOutput, error) {
// 	               panic("mock out the CreateDBProxyWithContext method")
//             },
//             CreateDBSecurityGroupFunc: func(in1 *rds.CreateDBSecurityGroupInput) (*rds.CreateDBSecurityGroupOutput, error) {
// 	               panic("mock out the CreateDBSecurityGroup method")
//             },
//             CreateDBSecurityGroupRequestFunc: func(in1 *rds.CreateDBSecurityGroupInput) (*request.Request, *rds.CreateDBSecurityGroupOutput) {
// 	               panic("mock out the CreateDBSecurityGroupRequest method")
//             },
//             CreateDBSecurityGroupWithContextFunc: func(in1 context.Context, in2 *rds.CreateDBSecurityGroupInput, in3 ...request.Option) (*rds.CreateDBSecurityGroupOutput, error) {
// 	               panic("mock out the CreateDBSecurityGroupWithContext method")
//             },
//             CreateDBSnapshotFunc: func(in1 *rds.CreateDBSnapshotInput) (*rds.CreateDBSnapshotOutput, error) {
// 	               panic("mock out the CreateDBSnapshot method")
//             },
//             CreateDBSnapshotRequestFunc: func(in1 *rds.CreateDBSnapshotInput) (*request.Request, *rds.CreateDBSnapshotOutput) {
// 	               panic("mock out the CreateDBSnapshotRequest method")
//             },
//             CreateDBSnapshotWithContextFunc: func(in1 context.Context, in2 *rds.CreateDBSnapshotInput, in3 ...request.Option) (*rds.CreateDBSnapshotOutput, error) {
// 	               panic("mock out the CreateDBSnapshotWithContext method")
//             },
//             CreateDBSubnetGroupFunc: func(in1 *rds.CreateDBSubnetGroupInput) (*rds.CreateDBSubnetGroupOutput, error) {
// 	               panic("mock out the CreateDBSubnetGroup method")
//             },
//             CreateDBSubnetGroupRequestFunc: func(in1 *rds.CreateDBSubnetGroupInput) (*request.Request, *rds.CreateDBSubnetGroupOutput) {
// 	               panic("mock out the CreateDBSubnetGroupRequest method")
//             },
//             CreateDBSubnetGroupWithContextFunc: func(in1 context.Context, in2 *rds.CreateDBSubnetGroupInput, in3 ...request.Option) (*rds.CreateDBSubnetGroupOutput, error) {
// 	               panic("mock out the CreateDBSubnetGroupWithContext method")
//             },
//             CreateEventSubscriptionFunc: func(in1 *rds.CreateEventSubscriptionInput) (*rds.CreateEventSubscriptionOutput, error) {
// 	               panic("mock out the CreateEventSubscription method")
//             },
//             CreateEventSubscriptionRequestFunc: func(in1 *rds.CreateEventSubscriptionInput) (*request.Request, *rds.CreateEventSubscriptionOutput) {
// 	               panic("mock out the CreateEventSubscriptionRequest method")
//             },
//             CreateEventSubscriptionWithContextFunc: func(in1 context.Context, in2 *rds.CreateEventSubscriptionInput, in3 ...request.Option) (*rds.CreateEventSubscriptionOutput, error) {
// 	               panic("mock out the CreateEventSubscriptionWithContext method")
//             },
//             CreateGlobalClusterFunc: func(in1 *rds.CreateGlobalClusterInput) (*rds.CreateGlobalClusterOutput, error) {
// 	               panic("mock out the CreateGlobalCluster method")
//             },
//             CreateGlobalClusterRequestFunc: func(in1 *rds.CreateGlobalClusterInput) (*request.Request, *rds.CreateGlobalClusterOutput) {
// 	               panic("mock out the CreateGlobalClusterRequest method")
//             },
//             CreateGlobalClusterWithContextFunc: func(in1 context.Context, in2 *rds.CreateGlobalClusterInput, in3 ...request.Option) (*rds.CreateGlobalClusterOutput, error) {
// 	               panic("mock out the CreateGlobalClusterWithContext method")
//             },
//             CreateOptionGroupFunc: func(in1 *rds.CreateOptionGroupInput) (*rds.CreateOptionGroupOutput, error) {
// 	               panic("mock out the CreateOptionGroup method")
//             },
//             CreateOptionGroupRequestFunc: func(in1 *rds.CreateOptionGroupInput) (*request.Request, *rds.CreateOptionGroupOutput) {
// 	               panic("mock out the CreateOptionGroupRequest method")
//             },
//             CreateOptionGroupWithContextFunc: func(in1 context.Context, in2 *rds.CreateOptionGroupInput, in3 ...request.Option) (*rds.CreateOptionGroupOutput, error) {
// 	               panic("mock out the CreateOptionGroupWithContext method")
//             },
//             DeleteCustomAvailabilityZoneFunc: func(in1 *rds.DeleteCustomAvailabilityZoneInput) (*rds.DeleteCustomAvailabilityZoneOutput, error) {
// 	               panic("mock out the DeleteCustomAvailabilityZone method")
//             },
//             DeleteCustomAvailabilityZoneRequestFunc: func(in1 *rds.DeleteCustomAvailabilityZoneInput) (*request.Request, *rds.DeleteCustomAvailabilityZoneOutput) {
// 	               panic("mock out the DeleteCustomAvailabilityZoneRequest method")
//             },
//             DeleteCustomAvailabilityZoneWithContextFunc: func(in1 context.Context, in2 *rds.DeleteCustomAvailabilityZoneInput, in3 ...request.Option) (*rds.DeleteCustomAvailabilityZoneOutput, error) {
// 	               panic("mock out the DeleteCustomAvailabilityZoneWithContext method")
//             },
//             DeleteDBClusterFunc: func(in1 *rds.DeleteDBClusterInput) (*rds.DeleteDBClusterOutput, error) {
// 	               panic("mock out the DeleteDBCluster method")
//             },
//             DeleteDBClusterEndpointFunc: func(in1 *rds.DeleteDBClusterEndpointInput) (*rds.DeleteDBClusterEndpointOutput, error) {
// 	               panic("mock out the DeleteDBClusterEndpoint method")
//             },
//             DeleteDBClusterEndpointRequestFunc: func(in1 *rds.DeleteDBClusterEndpointInput) (*request.Request, *rds.DeleteDBClusterEndpointOutput) {
// 	               panic("mock out the DeleteDBClusterEndpointRequest method")
//             },
//             DeleteDBClusterEndpointWithContextFunc: func(in1 context.Context, in2 *rds.DeleteDBClusterEndpointInput, in3 ...request.Option) (*rds.DeleteDBClusterEndpointOutput, error) {
// 	               panic("mock out the DeleteDBClusterEndpointWithContext method")
//             },
//             DeleteDBClusterParameterGroupFunc: func(in1 *rds.DeleteDBClusterParameterGroupInput) (*rds.DeleteDBClusterParameterGroupOutput, error) {
// 	               panic("mock out the DeleteDBClusterParameterGroup method")
//             },
//             DeleteDBClusterParameterGroupRequestFunc: func(in1 *rds.DeleteDBClusterParameterGroupInput) (*request.Request, *rds.DeleteDBClusterParameterGroupOutput) {
// 	               panic("mock out the DeleteDBClusterParameterGroupRequest method")
//             },
//             DeleteDBClusterParameterGroupWithContextFunc: func(in1 context.Context, in2 *rds.DeleteDBClusterParameterGroupInput, in3 ...request.Option) (*rds.DeleteDBClusterParameterGroupOutput, error) {
// 	               panic("mock out the DeleteDBClusterParameterGroupWithContext method")
//             },
//             DeleteDBClusterRequestFunc: func(in1 *rds.DeleteDBClusterInput) (*request.Request, *rds.DeleteDBClusterOutput) {
// 	               panic("mock out the DeleteDBClusterRequest method")
//             },
//             DeleteDBClusterSnapshotFunc: func(in1 *rds.DeleteDBClusterSnapshotInput) (*rds.DeleteDBClusterSnapshotOutput, error) {
// 	               panic("mock out the DeleteDBClusterSnapshot method")
//             },
//             DeleteDBClusterSnapshotRequestFunc: func(in1 *rds.DeleteDBClusterSnapshotInput) (*request.Request, *rds.DeleteDBClusterSnapshotOutput) {
// 	               panic("mock out the DeleteDBClusterSnapshotRequest method")
//             },
//             DeleteDBClusterSnapshotWithContextFunc: func(in1 context.Context, in2 *rds.DeleteDBClusterSnapshotInput, in3 ...request.Option) (*rds.DeleteDBClusterSnapshotOutput, error) {
// 	               panic("mock out the DeleteDBClusterSnapshotWithContext method")
//             },
//             DeleteDBClusterWithContextFunc: func(in1 context.Context, in2 *rds.DeleteDBClusterInput, in3 ...request.Option) (*rds.DeleteDBClusterOutput, error) {
// 	               panic("mock out the DeleteDBClusterWithContext method")
//             },
//             DeleteDBInstanceFunc: func(in1 *rds.DeleteDBInstanceInput) (*rds.DeleteDBInstanceOutput, error) {
// 	               panic("mock out the DeleteDBInstance method")
//             },
//             DeleteDBInstanceAutomatedBackupFunc: func(in1 *rds.DeleteDBInstanceAutomatedBackupInput) (*rds.DeleteDBInstanceAutomatedBackupOutput, error) {
// 	               panic("mock out the DeleteDBInstanceAutomatedBackup method")
//             },
//             DeleteDBInstanceAutomatedBackupRequestFunc: func(in1 *rds.DeleteDBInstanceAutomatedBackupInput) (*request.Request, *rds.DeleteDBInstanceAutomatedBackupOutput) {
// 	               panic("mock out the DeleteDBInstanceAutomatedBackupRequest method")
//             },
//             DeleteDBInstanceAutomatedBackupWithContextFunc: func(in1 context.Context, in2 *rds.DeleteDBInstanceAutomatedBackupInput, in3 ...request.Option) (*rds.DeleteDBInstanceAutomatedBackupOutput, error) {
// 	               panic("mock out the DeleteDBInstanceAutomatedBackupWithContext method")
//             },
//             DeleteDBInstanceRequestFunc: func(in1 *rds.DeleteDBInstanceInput) (*request.Request, *rds.DeleteDBInstanceOutput) {
// 	               panic("mock out the DeleteDBInstanceRequest method")
//             },
//             DeleteDBInstanceWithContextFunc: func(in1 context.Context, in2 *rds.DeleteDBInstanceInput, in3 ...request.Option) (*rds.DeleteDBInstanceOutput, error) {
// 	               panic("mock out the DeleteDBInstanceWithContext method")
//             },
//             DeleteDBParameterGroupFunc: func(in1 *rds.DeleteDBParameterGroupInput) (*rds.DeleteDBParameterGroupOutput, error) {
// 	               panic("mock out the DeleteDBParameterGroup method")
//             },
//             DeleteDBParameterGroupRequestFunc: func(in1 *rds.DeleteDBParameterGroupInput) (*request.Request, *rds.DeleteDBParameterGroupOutput) {
// 	               panic("mock out the DeleteDBParameterGroupRequest method")
//             },
//             DeleteDBParameterGroupWithContextFunc: func(in1 context.Context, in2 *rds.DeleteDBParameterGroupInput, in3 ...request.Option) (*rds.DeleteDBParameterGroupOutput, error) {
// 	               panic("mock out the DeleteDBParameterGroupWithContext method")
//             },
//             DeleteDBProxyFunc: func(in1 *rds.DeleteDBProxyInput) (*rds.DeleteDBProxyOutput, error) {
// 	               panic("mock out the DeleteDBProxy method")
//             },
//             DeleteDBProxyRequestFunc: func(in1 *rds.DeleteDBProxyInput) (*request.Request, *rds.DeleteDBProxyOutput) {
// 	               panic("mock out the DeleteDBProxyRequest method")
//             },
//             DeleteDBProxyWithContextFunc: func(in1 context.Context, in2 *rds.DeleteDBProxyInput, in3 ...request.Option) (*rds.DeleteDBProxyOutput, error) {
// 	               panic("mock out the DeleteDBProxyWithContext method")
//             },
//             DeleteDBSecurityGroupFunc: func(in1 *rds.DeleteDBSecurityGroupInput) (*rds.DeleteDBSecurityGroupOutput, error) {
// 	               panic("mock out the DeleteDBSecurityGroup method")
//             },
//             DeleteDBSecurityGroupRequestFunc: func(in1 *rds.DeleteDBSecurityGroupInput) (*request.Request, *rds.DeleteDBSecurityGroupOutput) {
// 	               panic("mock out the DeleteDBSecurityGroupRequest method")
//             },
//             DeleteDBSecurityGroupWithContextFunc: func(in1 context.Context, in2 *rds.DeleteDBSecurityGroupInput, in3 ...request.Option) (*rds.DeleteDBSecurityGroupOutput, error) {
// 	               panic("mock out the DeleteDBSecurityGroupWithContext method")
//             },
//             DeleteDBSnapshotFunc: func(in1 *rds.DeleteDBSnapshotInput) (*rds.DeleteDBSnapshotOutput, error) {
// 	               panic("mock out the DeleteDBSnapshot method")
//             },
//             DeleteDBSnapshotRequestFunc: func(in1 *rds.DeleteDBSnapshotInput) (*request.Request, *rds.DeleteDBSnapshotOutput) {
// 	               panic("mock out the DeleteDBSnapshotRequest method")
//             },
//             DeleteDBSnapshotWithContextFunc: func(in1 context.Context, in2 *rds.DeleteDBSnapshotInput, in3 ...request.Option) (*rds.DeleteDBSnapshotOutput, error) {
// 	               panic("mock out the DeleteDBSnapshotWithContext method")
//             },
//             DeleteDBSubnetGroupFunc: func(in1 *rds.DeleteDBSubnetGroupInput) (*rds.DeleteDBSubnetGroupOutput, error) {
// 	               panic("mock out the DeleteDBSubnetGroup method")
//             },
//             DeleteDBSubnetGroupRequestFunc: func(in1 *rds.DeleteDBSubnetGroupInput) (*request.Request, *rds.DeleteDBSubnetGroupOutput) {
// 	               panic("mock out the DeleteDBSubnetGroupRequest method")
//             },
//             DeleteDBSubnetGroupWithContextFunc: func(in1 context.Context, in2 *rds.DeleteDBSubnetGroupInput, in3 ...request.Option) (*rds.DeleteDBSubnetGroupOutput, error) {
// 	               panic("mock out the DeleteDBSubnetGroupWithContext method")
//             },
//             DeleteEventSubscriptionFunc: func(in1 *rds.DeleteEventSubscriptionInput) (*rds.DeleteEventSubscriptionOutput, error) {
// 	               panic("mock out the DeleteEventSubscription method")
//             },
//             DeleteEventSubscriptionRequestFunc: func(in1 *rds.DeleteEventSubscriptionInput) (*request.Request, *rds.DeleteEventSubscriptionOutput) {
// 	               panic("mock out the DeleteEventSubscriptionRequest method")
//             },
//             DeleteEventSubscriptionWithContextFunc: func(in1 context.Context, in2 *rds.DeleteEventSubscriptionInput, in3 ...request.Option) (*rds.DeleteEventSubscriptionOutput, error) {
// 	               panic("mock out the DeleteEventSubscriptionWithContext method")
//             },
//             DeleteGlobalClusterFunc: func(in1 *rds.DeleteGlobalClusterInput) (*rds.DeleteGlobalClusterOutput, error) {
// 	               panic("mock out the DeleteGlobalCluster method")
//             },
//             DeleteGlobalClusterRequestFunc: func(in1 *rds.DeleteGlobalClusterInput) (*request.Request, *rds.DeleteGlobalClusterOutput) {
// 	               panic("mock out the DeleteGlobalClusterRequest method")
//             },
//             DeleteGlobalClusterWithContextFunc: func(in1 context.Context, in2 *rds.DeleteGlobalClusterInput, in3 ...request.Option) (*rds.DeleteGlobalClusterOutput, error) {
// 	               panic("mock out the DeleteGlobalClusterWithContext method")
//             },
//             DeleteInstallationMediaFunc: func(in1 *rds.DeleteInstallationMediaInput) (*rds.DeleteInstallationMediaOutput, error) {
// 	               panic("mock out the DeleteInstallationMedia method")
//             },
//             DeleteInstallationMediaRequestFunc: func(in1 *rds.DeleteInstallationMediaInput) (*request.Request, *rds.DeleteInstallationMediaOutput) {
// 	               panic("mock out the DeleteInstallationMediaRequest method")
//             },
//             DeleteInstallationMediaWithContextFunc: func(in1 context.Context, in2 *rds.DeleteInstallationMediaInput, in3 ...request.Option) (*rds.DeleteInstallationMediaOutput, error) {
// 	               panic("mock out the DeleteInstallationMediaWithContext method")
//             },
//             DeleteOptionGroupFunc: func(in1 *rds.DeleteOptionGroupInput) (*rds.DeleteOptionGroupOutput, error) {
// 	               panic("mock out the DeleteOptionGroup method")
//             },
//             DeleteOptionGroupRequestFunc: func(in1 *rds.DeleteOptionGroupInput) (*request.Request, *rds.DeleteOptionGroupOutput) {
// 	               panic("mock out the DeleteOptionGroupRequest method")
//             },
//             DeleteOptionGroupWithContextFunc: func(in1 context.Context, in2 *rds.DeleteOptionGroupInput, in3 ...request.Option) (*rds.DeleteOptionGroupOutput, error) {
// 	               panic("mock out the DeleteOptionGroupWithContext method")
//             },
//             DeregisterDBProxyTargetsFunc: func(in1 *rds.DeregisterDBProxyTargetsInput) (*rds.DeregisterDBProxyTargetsOutput, error) {
// 	               panic("mock out the DeregisterDBProxyTargets method")
//             },
//             DeregisterDBProxyTargetsRequestFunc: func(in1 *rds.DeregisterDBProxyTargetsInput) (*request.Request, *rds.DeregisterDBProxyTargetsOutput) {
// 	               panic("mock out the DeregisterDBProxyTargetsRequest method")
//             },
//             DeregisterDBProxyTargetsWithContextFunc: func(in1 context.Context, in2 *rds.DeregisterDBProxyTargetsInput, in3 ...request.Option) (*rds.DeregisterDBProxyTargetsOutput, error) {
// 	               panic("mock out the DeregisterDBProxyTargetsWithContext method")
//             },
//             DescribeAccountAttributesFunc: func(in1 *rds.DescribeAccountAttributesInput) (*rds.DescribeAccountAttributesOutput, error) {
// 	               panic("mock out the DescribeAccountAttributes method")
//             },
//             DescribeAccountAttributesRequestFunc: func(in1 *rds.DescribeAccountAttributesInput) (*request.Request, *rds.DescribeAccountAttributesOutput) {
// 	               panic("mock out the DescribeAccountAttributesRequest method")
//             },
//             DescribeAccountAttributesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeAccountAttributesInput, in3 ...request.Option) (*rds.DescribeAccountAttributesOutput, error) {
// 	               panic("mock out the DescribeAccountAttributesWithContext method")
//             },
//             DescribeCertificatesFunc: func(in1 *rds.DescribeCertificatesInput) (*rds.DescribeCertificatesOutput, error) {
// 	               panic("mock out the DescribeCertificates method")
//             },
//             DescribeCertificatesRequestFunc: func(in1 *rds.DescribeCertificatesInput) (*request.Request, *rds.DescribeCertificatesOutput) {
// 	               panic("mock out the DescribeCertificatesRequest method")
//             },
//             DescribeCertificatesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeCertificatesInput, in3 ...request.Option) (*rds.DescribeCertificatesOutput, error) {
// 	               panic("mock out the DescribeCertificatesWithContext method")
//             },
//             DescribeCustomAvailabilityZonesFunc: func(in1 *rds.DescribeCustomAvailabilityZonesInput) (*rds.DescribeCustomAvailabilityZonesOutput, error) {
// 	               panic("mock out the DescribeCustomAvailabilityZones method")
//             },
//             DescribeCustomAvailabilityZonesPagesFunc: func(in1 *rds.DescribeCustomAvailabilityZonesInput, in2 func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool) error {
// 	               panic("mock out the DescribeCustomAvailabilityZonesPages method")
//             },
//             DescribeCustomAvailabilityZonesPagesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeCustomAvailabilityZonesInput, in3 func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeCustomAvailabilityZonesPagesWithContext method")
//             },
//             DescribeCustomAvailabilityZonesRequestFunc: func(in1 *rds.DescribeCustomAvailabilityZonesInput) (*request.Request, *rds.DescribeCustomAvailabilityZonesOutput) {
// 	               panic("mock out the DescribeCustomAvailabilityZonesRequest method")
//             },
//             DescribeCustomAvailabilityZonesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeCustomAvailabilityZonesInput, in3 ...request.Option) (*rds.DescribeCustomAvailabilityZonesOutput, error) {
// 	               panic("mock out the DescribeCustomAvailabilityZonesWithContext method")
//             },
//             DescribeDBClusterBacktracksFunc: func(in1 *rds.DescribeDBClusterBacktracksInput) (*rds.DescribeDBClusterBacktracksOutput, error) {
// 	               panic("mock out the DescribeDBClusterBacktracks method")
//             },
//             DescribeDBClusterBacktracksRequestFunc: func(in1 *rds.DescribeDBClusterBacktracksInput) (*request.Request, *rds.DescribeDBClusterBacktracksOutput) {
// 	               panic("mock out the DescribeDBClusterBacktracksRequest method")
//             },
//             DescribeDBClusterBacktracksWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBClusterBacktracksInput, in3 ...request.Option) (*rds.DescribeDBClusterBacktracksOutput, error) {
// 	               panic("mock out the DescribeDBClusterBacktracksWithContext method")
//             },
//             DescribeDBClusterEndpointsFunc: func(in1 *rds.DescribeDBClusterEndpointsInput) (*rds.DescribeDBClusterEndpointsOutput, error) {
// 	               panic("mock out the DescribeDBClusterEndpoints method")
//             },
//             DescribeDBClusterEndpointsRequestFunc: func(in1 *rds.DescribeDBClusterEndpointsInput) (*request.Request, *rds.DescribeDBClusterEndpointsOutput) {
// 	               panic("mock out the DescribeDBClusterEndpointsRequest method")
//             },
//             DescribeDBClusterEndpointsWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBClusterEndpointsInput, in3 ...request.Option) (*rds.DescribeDBClusterEndpointsOutput, error) {
// 	               panic("mock out the DescribeDBClusterEndpointsWithContext method")
//             },
//             DescribeDBClusterParameterGroupsFunc: func(in1 *rds.DescribeDBClusterParameterGroupsInput) (*rds.DescribeDBClusterParameterGroupsOutput, error) {
// 	               panic("mock out the DescribeDBClusterParameterGroups method")
//             },
//             DescribeDBClusterParameterGroupsRequestFunc: func(in1 *rds.DescribeDBClusterParameterGroupsInput) (*request.Request, *rds.DescribeDBClusterParameterGroupsOutput) {
// 	               panic("mock out the DescribeDBClusterParameterGroupsRequest method")
//             },
//             DescribeDBClusterParameterGroupsWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBClusterParameterGroupsInput, in3 ...request.Option) (*rds.DescribeDBClusterParameterGroupsOutput, error) {
// 	               panic("mock out the DescribeDBClusterParameterGroupsWithContext method")
//             },
//             DescribeDBClusterParametersFunc: func(in1 *rds.DescribeDBClusterParametersInput) (*rds.DescribeDBClusterParametersOutput, error) {
// 	               panic("mock out the DescribeDBClusterParameters method")
//             },
//             DescribeDBClusterParametersRequestFunc: func(in1 *rds.DescribeDBClusterParametersInput) (*request.Request, *rds.DescribeDBClusterParametersOutput) {
// 	               panic("mock out the DescribeDBClusterParametersRequest method")
//             },
//             DescribeDBClusterParametersWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBClusterParametersInput, in3 ...request.Option) (*rds.DescribeDBClusterParametersOutput, error) {
// 	               panic("mock out the DescribeDBClusterParametersWithContext method")
//             },
//             DescribeDBClusterSnapshotAttributesFunc: func(in1 *rds.DescribeDBClusterSnapshotAttributesInput) (*rds.DescribeDBClusterSnapshotAttributesOutput, error) {
// 	               panic("mock out the DescribeDBClusterSnapshotAttributes method")
//             },
//             DescribeDBClusterSnapshotAttributesRequestFunc: func(in1 *rds.DescribeDBClusterSnapshotAttributesInput) (*request.Request, *rds.DescribeDBClusterSnapshotAttributesOutput) {
// 	               panic("mock out the DescribeDBClusterSnapshotAttributesRequest method")
//             },
//             DescribeDBClusterSnapshotAttributesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBClusterSnapshotAttributesInput, in3 ...request.Option) (*rds.DescribeDBClusterSnapshotAttributesOutput, error) {
// 	               panic("mock out the DescribeDBClusterSnapshotAttributesWithContext method")
//             },
//             DescribeDBClusterSnapshotsFunc: func(in1 *rds.DescribeDBClusterSnapshotsInput) (*rds.DescribeDBClusterSnapshotsOutput, error) {
// 	               panic("mock out the DescribeDBClusterSnapshots method")
//             },
//             DescribeDBClusterSnapshotsRequestFunc: func(in1 *rds.DescribeDBClusterSnapshotsInput) (*request.Request, *rds.DescribeDBClusterSnapshotsOutput) {
// 	               panic("mock out the DescribeDBClusterSnapshotsRequest method")
//             },
//             DescribeDBClusterSnapshotsWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBClusterSnapshotsInput, in3 ...request.Option) (*rds.DescribeDBClusterSnapshotsOutput, error) {
// 	               panic("mock out the DescribeDBClusterSnapshotsWithContext method")
//             },
//             DescribeDBClustersFunc: func(in1 *rds.DescribeDBClustersInput) (*rds.DescribeDBClustersOutput, error) {
// 	               panic("mock out the DescribeDBClusters method")
//             },
//             DescribeDBClustersPagesFunc: func(in1 *rds.DescribeDBClustersInput, in2 func(*rds.DescribeDBClustersOutput, bool) bool) error {
// 	               panic("mock out the DescribeDBClustersPages method")
//             },
//             DescribeDBClustersPagesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBClustersInput, in3 func(*rds.DescribeDBClustersOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeDBClustersPagesWithContext method")
//             },
//             DescribeDBClustersRequestFunc: func(in1 *rds.DescribeDBClustersInput) (*request.Request, *rds.DescribeDBClustersOutput) {
// 	               panic("mock out the DescribeDBClustersRequest method")
//             },
//             DescribeDBClustersWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBClustersInput, in3 ...request.Option) (*rds.DescribeDBClustersOutput, error) {
// 	               panic("mock out the DescribeDBClustersWithContext method")
//             },
//             DescribeDBEngineVersionsFunc: func(in1 *rds.DescribeDBEngineVersionsInput) (*rds.DescribeDBEngineVersionsOutput, error) {
// 	               panic("mock out the DescribeDBEngineVersions method")
//             },
//             DescribeDBEngineVersionsPagesFunc: func(in1 *rds.DescribeDBEngineVersionsInput, in2 func(*rds.DescribeDBEngineVersionsOutput, bool) bool) error {
// 	               panic("mock out the DescribeDBEngineVersionsPages method")
//             },
//             DescribeDBEngineVersionsPagesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBEngineVersionsInput, in3 func(*rds.DescribeDBEngineVersionsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeDBEngineVersionsPagesWithContext method")
//             },
//             DescribeDBEngineVersionsRequestFunc: func(in1 *rds.DescribeDBEngineVersionsInput) (*request.Request, *rds.DescribeDBEngineVersionsOutput) {
// 	               panic("mock out the DescribeDBEngineVersionsRequest method")
//             },
//             DescribeDBEngineVersionsWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBEngineVersionsInput, in3 ...request.Option) (*rds.DescribeDBEngineVersionsOutput, error) {
// 	               panic("mock out the DescribeDBEngineVersionsWithContext method")
//             },
//             DescribeDBInstanceAutomatedBackupsFunc: func(in1 *rds.DescribeDBInstanceAutomatedBackupsInput) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error) {
// 	               panic("mock out the DescribeDBInstanceAutomatedBackups method")
//             },
//             DescribeDBInstanceAutomatedBackupsPagesFunc: func(in1 *rds.DescribeDBInstanceAutomatedBackupsInput, in2 func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool) error {
// 	               panic("mock out the DescribeDBInstanceAutomatedBackupsPages method")
//             },
//             DescribeDBInstanceAutomatedBackupsPagesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBInstanceAutomatedBackupsInput, in3 func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeDBInstanceAutomatedBackupsPagesWithContext method")
//             },
//             DescribeDBInstanceAutomatedBackupsRequestFunc: func(in1 *rds.DescribeDBInstanceAutomatedBackupsInput) (*request.Request, *rds.DescribeDBInstanceAutomatedBackupsOutput) {
// 	               panic("mock out the DescribeDBInstanceAutomatedBackupsRequest method")
//             },
//             DescribeDBInstanceAutomatedBackupsWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBInstanceAutomatedBackupsInput, in3 ...request.Option) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error) {
// 	               panic("mock out the DescribeDBInstanceAutomatedBackupsWithContext method")
//             },
//             DescribeDBInstancesFunc: func(in1 *rds.DescribeDBInstancesInput) (*rds.DescribeDBInstancesOutput, error) {
// 	               panic("mock out the DescribeDBInstances method")
//             },
//             DescribeDBInstancesPagesFunc: func(in1 *rds.DescribeDBInstancesInput, in2 func(*rds.DescribeDBInstancesOutput, bool) bool) error {
// 	               panic("mock out the DescribeDBInstancesPages method")
//             },
//             DescribeDBInstancesPagesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBInstancesInput, in3 func(*rds.DescribeDBInstancesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeDBInstancesPagesWithContext method")
//             },
//             DescribeDBInstancesRequestFunc: func(in1 *rds.DescribeDBInstancesInput) (*request.Request, *rds.DescribeDBInstancesOutput) {
// 	               panic("mock out the DescribeDBInstancesRequest method")
//             },
//             DescribeDBInstancesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBInstancesInput, in3 ...request.Option) (*rds.DescribeDBInstancesOutput, error) {
// 	               panic("mock out the DescribeDBInstancesWithContext method")
//             },
//             DescribeDBLogFilesFunc: func(in1 *rds.DescribeDBLogFilesInput) (*rds.DescribeDBLogFilesOutput, error) {
// 	               panic("mock out the DescribeDBLogFiles method")
//             },
//             DescribeDBLogFilesPagesFunc: func(in1 *rds.DescribeDBLogFilesInput, in2 func(*rds.DescribeDBLogFilesOutput, bool) bool) error {
// 	               panic("mock out the DescribeDBLogFilesPages method")
//             },
//             DescribeDBLogFilesPagesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBLogFilesInput, in3 func(*rds.DescribeDBLogFilesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeDBLogFilesPagesWithContext method")
//             },
//             DescribeDBLogFilesRequestFunc: func(in1 *rds.DescribeDBLogFilesInput) (*request.Request, *rds.DescribeDBLogFilesOutput) {
// 	               panic("mock out the DescribeDBLogFilesRequest method")
//             },
//             DescribeDBLogFilesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBLogFilesInput, in3 ...request.Option) (*rds.DescribeDBLogFilesOutput, error) {
// 	               panic("mock out the DescribeDBLogFilesWithContext method")
//             },
//             DescribeDBParameterGroupsFunc: func(in1 *rds.DescribeDBParameterGroupsInput) (*rds.DescribeDBParameterGroupsOutput, error) {
// 	               panic("mock out the DescribeDBParameterGroups method")
//             },
//             DescribeDBParameterGroupsPagesFunc: func(in1 *rds.DescribeDBParameterGroupsInput, in2 func(*rds.DescribeDBParameterGroupsOutput, bool) bool) error {
// 	               panic("mock out the DescribeDBParameterGroupsPages method")
//             },
//             DescribeDBParameterGroupsPagesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBParameterGroupsInput, in3 func(*rds.DescribeDBParameterGroupsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeDBParameterGroupsPagesWithContext method")
//             },
//             DescribeDBParameterGroupsRequestFunc: func(in1 *rds.DescribeDBParameterGroupsInput) (*request.Request, *rds.DescribeDBParameterGroupsOutput) {
// 	               panic("mock out the DescribeDBParameterGroupsRequest method")
//             },
//             DescribeDBParameterGroupsWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBParameterGroupsInput, in3 ...request.Option) (*rds.DescribeDBParameterGroupsOutput, error) {
// 	               panic("mock out the DescribeDBParameterGroupsWithContext method")
//             },
//             DescribeDBParametersFunc: func(in1 *rds.DescribeDBParametersInput) (*rds.DescribeDBParametersOutput, error) {
// 	               panic("mock out the DescribeDBParameters method")
//             },
//             DescribeDBParametersPagesFunc: func(in1 *rds.DescribeDBParametersInput, in2 func(*rds.DescribeDBParametersOutput, bool) bool) error {
// 	               panic("mock out the DescribeDBParametersPages method")
//             },
//             DescribeDBParametersPagesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBParametersInput, in3 func(*rds.DescribeDBParametersOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeDBParametersPagesWithContext method")
//             },
//             DescribeDBParametersRequestFunc: func(in1 *rds.DescribeDBParametersInput) (*request.Request, *rds.DescribeDBParametersOutput) {
// 	               panic("mock out the DescribeDBParametersRequest method")
//             },
//             DescribeDBParametersWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBParametersInput, in3 ...request.Option) (*rds.DescribeDBParametersOutput, error) {
// 	               panic("mock out the DescribeDBParametersWithContext method")
//             },
//             DescribeDBProxiesFunc: func(in1 *rds.DescribeDBProxiesInput) (*rds.DescribeDBProxiesOutput, error) {
// 	               panic("mock out the DescribeDBProxies method")
//             },
//             DescribeDBProxiesPagesFunc: func(in1 *rds.DescribeDBProxiesInput, in2 func(*rds.DescribeDBProxiesOutput, bool) bool) error {
// 	               panic("mock out the DescribeDBProxiesPages method")
//             },
//             DescribeDBProxiesPagesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBProxiesInput, in3 func(*rds.DescribeDBProxiesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeDBProxiesPagesWithContext method")
//             },
//             DescribeDBProxiesRequestFunc: func(in1 *rds.DescribeDBProxiesInput) (*request.Request, *rds.DescribeDBProxiesOutput) {
// 	               panic("mock out the DescribeDBProxiesRequest method")
//             },
//             DescribeDBProxiesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBProxiesInput, in3 ...request.Option) (*rds.DescribeDBProxiesOutput, error) {
// 	               panic("mock out the DescribeDBProxiesWithContext method")
//             },
//             DescribeDBProxyTargetGroupsFunc: func(in1 *rds.DescribeDBProxyTargetGroupsInput) (*rds.DescribeDBProxyTargetGroupsOutput, error) {
// 	               panic("mock out the DescribeDBProxyTargetGroups method")
//             },
//             DescribeDBProxyTargetGroupsPagesFunc: func(in1 *rds.DescribeDBProxyTargetGroupsInput, in2 func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool) error {
// 	               panic("mock out the DescribeDBProxyTargetGroupsPages method")
//             },
//             DescribeDBProxyTargetGroupsPagesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBProxyTargetGroupsInput, in3 func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeDBProxyTargetGroupsPagesWithContext method")
//             },
//             DescribeDBProxyTargetGroupsRequestFunc: func(in1 *rds.DescribeDBProxyTargetGroupsInput) (*request.Request, *rds.DescribeDBProxyTargetGroupsOutput) {
// 	               panic("mock out the DescribeDBProxyTargetGroupsRequest method")
//             },
//             DescribeDBProxyTargetGroupsWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBProxyTargetGroupsInput, in3 ...request.Option) (*rds.DescribeDBProxyTargetGroupsOutput, error) {
// 	               panic("mock out the DescribeDBProxyTargetGroupsWithContext method")
//             },
//             DescribeDBProxyTargetsFunc: func(in1 *rds.DescribeDBProxyTargetsInput) (*rds.DescribeDBProxyTargetsOutput, error) {
// 	               panic("mock out the DescribeDBProxyTargets method")
//             },
//             DescribeDBProxyTargetsPagesFunc: func(in1 *rds.DescribeDBProxyTargetsInput, in2 func(*rds.DescribeDBProxyTargetsOutput, bool) bool) error {
// 	               panic("mock out the DescribeDBProxyTargetsPages method")
//             },
//             DescribeDBProxyTargetsPagesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBProxyTargetsInput, in3 func(*rds.DescribeDBProxyTargetsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeDBProxyTargetsPagesWithContext method")
//             },
//             DescribeDBProxyTargetsRequestFunc: func(in1 *rds.DescribeDBProxyTargetsInput) (*request.Request, *rds.DescribeDBProxyTargetsOutput) {
// 	               panic("mock out the DescribeDBProxyTargetsRequest method")
//             },
//             DescribeDBProxyTargetsWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBProxyTargetsInput, in3 ...request.Option) (*rds.DescribeDBProxyTargetsOutput, error) {
// 	               panic("mock out the DescribeDBProxyTargetsWithContext method")
//             },
//             DescribeDBSecurityGroupsFunc: func(in1 *rds.DescribeDBSecurityGroupsInput) (*rds.DescribeDBSecurityGroupsOutput, error) {
// 	               panic("mock out the DescribeDBSecurityGroups method")
//             },
//             DescribeDBSecurityGroupsPagesFunc: func(in1 *rds.DescribeDBSecurityGroupsInput, in2 func(*rds.DescribeDBSecurityGroupsOutput, bool) bool) error {
// 	               panic("mock out the DescribeDBSecurityGroupsPages method")
//             },
//             DescribeDBSecurityGroupsPagesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBSecurityGroupsInput, in3 func(*rds.DescribeDBSecurityGroupsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeDBSecurityGroupsPagesWithContext method")
//             },
//             DescribeDBSecurityGroupsRequestFunc: func(in1 *rds.DescribeDBSecurityGroupsInput) (*request.Request, *rds.DescribeDBSecurityGroupsOutput) {
// 	               panic("mock out the DescribeDBSecurityGroupsRequest method")
//             },
//             DescribeDBSecurityGroupsWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBSecurityGroupsInput, in3 ...request.Option) (*rds.DescribeDBSecurityGroupsOutput, error) {
// 	               panic("mock out the DescribeDBSecurityGroupsWithContext method")
//             },
//             DescribeDBSnapshotAttributesFunc: func(in1 *rds.DescribeDBSnapshotAttributesInput) (*rds.DescribeDBSnapshotAttributesOutput, error) {
// 	               panic("mock out the DescribeDBSnapshotAttributes method")
//             },
//             DescribeDBSnapshotAttributesRequestFunc: func(in1 *rds.DescribeDBSnapshotAttributesInput) (*request.Request, *rds.DescribeDBSnapshotAttributesOutput) {
// 	               panic("mock out the DescribeDBSnapshotAttributesRequest method")
//             },
//             DescribeDBSnapshotAttributesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBSnapshotAttributesInput, in3 ...request.Option) (*rds.DescribeDBSnapshotAttributesOutput, error) {
// 	               panic("mock out the DescribeDBSnapshotAttributesWithContext method")
//             },
//             DescribeDBSnapshotsFunc: func(in1 *rds.DescribeDBSnapshotsInput) (*rds.DescribeDBSnapshotsOutput, error) {
// 	               panic("mock out the DescribeDBSnapshots method")
//             },
//             DescribeDBSnapshotsPagesFunc: func(in1 *rds.DescribeDBSnapshotsInput, in2 func(*rds.DescribeDBSnapshotsOutput, bool) bool) error {
// 	               panic("mock out the DescribeDBSnapshotsPages method")
//             },
//             DescribeDBSnapshotsPagesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBSnapshotsInput, in3 func(*rds.DescribeDBSnapshotsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeDBSnapshotsPagesWithContext method")
//             },
//             DescribeDBSnapshotsRequestFunc: func(in1 *rds.DescribeDBSnapshotsInput) (*request.Request, *rds.DescribeDBSnapshotsOutput) {
// 	               panic("mock out the DescribeDBSnapshotsRequest method")
//             },
//             DescribeDBSnapshotsWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBSnapshotsInput, in3 ...request.Option) (*rds.DescribeDBSnapshotsOutput, error) {
// 	               panic("mock out the DescribeDBSnapshotsWithContext method")
//             },
//             DescribeDBSubnetGroupsFunc: func(in1 *rds.DescribeDBSubnetGroupsInput) (*rds.DescribeDBSubnetGroupsOutput, error) {
// 	               panic("mock out the DescribeDBSubnetGroups method")
//             },
//             DescribeDBSubnetGroupsPagesFunc: func(in1 *rds.DescribeDBSubnetGroupsInput, in2 func(*rds.DescribeDBSubnetGroupsOutput, bool) bool) error {
// 	               panic("mock out the DescribeDBSubnetGroupsPages method")
//             },
//             DescribeDBSubnetGroupsPagesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBSubnetGroupsInput, in3 func(*rds.DescribeDBSubnetGroupsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeDBSubnetGroupsPagesWithContext method")
//             },
//             DescribeDBSubnetGroupsRequestFunc: func(in1 *rds.DescribeDBSubnetGroupsInput) (*request.Request, *rds.DescribeDBSubnetGroupsOutput) {
// 	               panic("mock out the DescribeDBSubnetGroupsRequest method")
//             },
//             DescribeDBSubnetGroupsWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBSubnetGroupsInput, in3 ...request.Option) (*rds.DescribeDBSubnetGroupsOutput, error) {
// 	               panic("mock out the DescribeDBSubnetGroupsWithContext method")
//             },
//             DescribeEngineDefaultClusterParametersFunc: func(in1 *rds.DescribeEngineDefaultClusterParametersInput) (*rds.DescribeEngineDefaultClusterParametersOutput, error) {
// 	               panic("mock out the DescribeEngineDefaultClusterParameters method")
//             },
//             DescribeEngineDefaultClusterParametersRequestFunc: func(in1 *rds.DescribeEngineDefaultClusterParametersInput) (*request.Request, *rds.DescribeEngineDefaultClusterParametersOutput) {
// 	               panic("mock out the DescribeEngineDefaultClusterParametersRequest method")
//             },
//             DescribeEngineDefaultClusterParametersWithContextFunc: func(in1 context.Context, in2 *rds.DescribeEngineDefaultClusterParametersInput, in3 ...request.Option) (*rds.DescribeEngineDefaultClusterParametersOutput, error) {
// 	               panic("mock out the DescribeEngineDefaultClusterParametersWithContext method")
//             },
//             DescribeEngineDefaultParametersFunc: func(in1 *rds.DescribeEngineDefaultParametersInput) (*rds.DescribeEngineDefaultParametersOutput, error) {
// 	               panic("mock out the DescribeEngineDefaultParameters method")
//             },
//             DescribeEngineDefaultParametersPagesFunc: func(in1 *rds.DescribeEngineDefaultParametersInput, in2 func(*rds.DescribeEngineDefaultParametersOutput, bool) bool) error {
// 	               panic("mock out the DescribeEngineDefaultParametersPages method")
//             },
//             DescribeEngineDefaultParametersPagesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeEngineDefaultParametersInput, in3 func(*rds.DescribeEngineDefaultParametersOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeEngineDefaultParametersPagesWithContext method")
//             },
//             DescribeEngineDefaultParametersRequestFunc: func(in1 *rds.DescribeEngineDefaultParametersInput) (*request.Request, *rds.DescribeEngineDefaultParametersOutput) {
// 	               panic("mock out the DescribeEngineDefaultParametersRequest method")
//             },
//             DescribeEngineDefaultParametersWithContextFunc: func(in1 context.Context, in2 *rds.DescribeEngineDefaultParametersInput, in3 ...request.Option) (*rds.DescribeEngineDefaultParametersOutput, error) {
// 	               panic("mock out the DescribeEngineDefaultParametersWithContext method")
//             },
//             DescribeEventCategoriesFunc: func(in1 *rds.DescribeEventCategoriesInput) (*rds.DescribeEventCategoriesOutput, error) {
// 	               panic("mock out the DescribeEventCategories method")
//             },
//             DescribeEventCategoriesRequestFunc: func(in1 *rds.DescribeEventCategoriesInput) (*request.Request, *rds.DescribeEventCategoriesOutput) {
// 	               panic("mock out the DescribeEventCategoriesRequest method")
//             },
//             DescribeEventCategoriesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeEventCategoriesInput, in3 ...request.Option) (*rds.DescribeEventCategoriesOutput, error) {
// 	               panic("mock out the DescribeEventCategoriesWithContext method")
//             },
//             DescribeEventSubscriptionsFunc: func(in1 *rds.DescribeEventSubscriptionsInput) (*rds.DescribeEventSubscriptionsOutput, error) {
// 	               panic("mock out the DescribeEventSubscriptions method")
//             },
//             DescribeEventSubscriptionsPagesFunc: func(in1 *rds.DescribeEventSubscriptionsInput, in2 func(*rds.DescribeEventSubscriptionsOutput, bool) bool) error {
// 	               panic("mock out the DescribeEventSubscriptionsPages method")
//             },
//             DescribeEventSubscriptionsPagesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeEventSubscriptionsInput, in3 func(*rds.DescribeEventSubscriptionsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeEventSubscriptionsPagesWithContext method")
//             },
//             DescribeEventSubscriptionsRequestFunc: func(in1 *rds.DescribeEventSubscriptionsInput) (*request.Request, *rds.DescribeEventSubscriptionsOutput) {
// 	               panic("mock out the DescribeEventSubscriptionsRequest method")
//             },
//             DescribeEventSubscriptionsWithContextFunc: func(in1 context.Context, in2 *rds.DescribeEventSubscriptionsInput, in3 ...request.Option) (*rds.DescribeEventSubscriptionsOutput, error) {
// 	               panic("mock out the DescribeEventSubscriptionsWithContext method")
//             },
//             DescribeEventsFunc: func(in1 *rds.DescribeEventsInput) (*rds.DescribeEventsOutput, error) {
// 	               panic("mock out the DescribeEvents method")
//             },
//             DescribeEventsPagesFunc: func(in1 *rds.DescribeEventsInput, in2 func(*rds.DescribeEventsOutput, bool) bool) error {
// 	               panic("mock out the DescribeEventsPages method")
//             },
//             DescribeEventsPagesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeEventsInput, in3 func(*rds.DescribeEventsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeEventsPagesWithContext method")
//             },
//             DescribeEventsRequestFunc: func(in1 *rds.DescribeEventsInput) (*request.Request, *rds.DescribeEventsOutput) {
// 	               panic("mock out the DescribeEventsRequest method")
//             },
//             DescribeEventsWithContextFunc: func(in1 context.Context, in2 *rds.DescribeEventsInput, in3 ...request.Option) (*rds.DescribeEventsOutput, error) {
// 	               panic("mock out the DescribeEventsWithContext method")
//             },
//             DescribeExportTasksFunc: func(in1 *rds.DescribeExportTasksInput) (*rds.DescribeExportTasksOutput, error) {
// 	               panic("mock out the DescribeExportTasks method")
//             },
//             DescribeExportTasksPagesFunc: func(in1 *rds.DescribeExportTasksInput, in2 func(*rds.DescribeExportTasksOutput, bool) bool) error {
// 	               panic("mock out the DescribeExportTasksPages method")
//             },
//             DescribeExportTasksPagesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeExportTasksInput, in3 func(*rds.DescribeExportTasksOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeExportTasksPagesWithContext method")
//             },
//             DescribeExportTasksRequestFunc: func(in1 *rds.DescribeExportTasksInput) (*request.Request, *rds.DescribeExportTasksOutput) {
// 	               panic("mock out the DescribeExportTasksRequest method")
//             },
//             DescribeExportTasksWithContextFunc: func(in1 context.Context, in2 *rds.DescribeExportTasksInput, in3 ...request.Option) (*rds.DescribeExportTasksOutput, error) {
// 	               panic("mock out the DescribeExportTasksWithContext method")
//             },
//             DescribeGlobalClustersFunc: func(in1 *rds.DescribeGlobalClustersInput) (*rds.DescribeGlobalClustersOutput, error) {
// 	               panic("mock out the DescribeGlobalClusters method")
//             },
//             DescribeGlobalClustersPagesFunc: func(in1 *rds.DescribeGlobalClustersInput, in2 func(*rds.DescribeGlobalClustersOutput, bool) bool) error {
// 	               panic("mock out the DescribeGlobalClustersPages method")
//             },
//             DescribeGlobalClustersPagesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeGlobalClustersInput, in3 func(*rds.DescribeGlobalClustersOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeGlobalClustersPagesWithContext method")
//             },
//             DescribeGlobalClustersRequestFunc: func(in1 *rds.DescribeGlobalClustersInput) (*request.Request, *rds.DescribeGlobalClustersOutput) {
// 	               panic("mock out the DescribeGlobalClustersRequest method")
//             },
//             DescribeGlobalClustersWithContextFunc: func(in1 context.Context, in2 *rds.DescribeGlobalClustersInput, in3 ...request.Option) (*rds.DescribeGlobalClustersOutput, error) {
// 	               panic("mock out the DescribeGlobalClustersWithContext method")
//             },
//             DescribeInstallationMediaFunc: func(in1 *rds.DescribeInstallationMediaInput) (*rds.DescribeInstallationMediaOutput, error) {
// 	               panic("mock out the DescribeInstallationMedia method")
//             },
//             DescribeInstallationMediaPagesFunc: func(in1 *rds.DescribeInstallationMediaInput, in2 func(*rds.DescribeInstallationMediaOutput, bool) bool) error {
// 	               panic("mock out the DescribeInstallationMediaPages method")
//             },
//             DescribeInstallationMediaPagesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeInstallationMediaInput, in3 func(*rds.DescribeInstallationMediaOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeInstallationMediaPagesWithContext method")
//             },
//             DescribeInstallationMediaRequestFunc: func(in1 *rds.DescribeInstallationMediaInput) (*request.Request, *rds.DescribeInstallationMediaOutput) {
// 	               panic("mock out the DescribeInstallationMediaRequest method")
//             },
//             DescribeInstallationMediaWithContextFunc: func(in1 context.Context, in2 *rds.DescribeInstallationMediaInput, in3 ...request.Option) (*rds.DescribeInstallationMediaOutput, error) {
// 	               panic("mock out the DescribeInstallationMediaWithContext method")
//             },
//             DescribeOptionGroupOptionsFunc: func(in1 *rds.DescribeOptionGroupOptionsInput) (*rds.DescribeOptionGroupOptionsOutput, error) {
// 	               panic("mock out the DescribeOptionGroupOptions method")
//             },
//             DescribeOptionGroupOptionsPagesFunc: func(in1 *rds.DescribeOptionGroupOptionsInput, in2 func(*rds.DescribeOptionGroupOptionsOutput, bool) bool) error {
// 	               panic("mock out the DescribeOptionGroupOptionsPages method")
//             },
//             DescribeOptionGroupOptionsPagesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeOptionGroupOptionsInput, in3 func(*rds.DescribeOptionGroupOptionsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeOptionGroupOptionsPagesWithContext method")
//             },
//             DescribeOptionGroupOptionsRequestFunc: func(in1 *rds.DescribeOptionGroupOptionsInput) (*request.Request, *rds.DescribeOptionGroupOptionsOutput) {
// 	               panic("mock out the DescribeOptionGroupOptionsRequest method")
//             },
//             DescribeOptionGroupOptionsWithContextFunc: func(in1 context.Context, in2 *rds.DescribeOptionGroupOptionsInput, in3 ...request.Option) (*rds.DescribeOptionGroupOptionsOutput, error) {
// 	               panic("mock out the DescribeOptionGroupOptionsWithContext method")
//             },
//             DescribeOptionGroupsFunc: func(in1 *rds.DescribeOptionGroupsInput) (*rds.DescribeOptionGroupsOutput, error) {
// 	               panic("mock out the DescribeOptionGroups method")
//             },
//             DescribeOptionGroupsPagesFunc: func(in1 *rds.DescribeOptionGroupsInput, in2 func(*rds.DescribeOptionGroupsOutput, bool) bool) error {
// 	               panic("mock out the DescribeOptionGroupsPages method")
//             },
//             DescribeOptionGroupsPagesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeOptionGroupsInput, in3 func(*rds.DescribeOptionGroupsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeOptionGroupsPagesWithContext method")
//             },
//             DescribeOptionGroupsRequestFunc: func(in1 *rds.DescribeOptionGroupsInput) (*request.Request, *rds.DescribeOptionGroupsOutput) {
// 	               panic("mock out the DescribeOptionGroupsRequest method")
//             },
//             DescribeOptionGroupsWithContextFunc: func(in1 context.Context, in2 *rds.DescribeOptionGroupsInput, in3 ...request.Option) (*rds.DescribeOptionGroupsOutput, error) {
// 	               panic("mock out the DescribeOptionGroupsWithContext method")
//             },
//             DescribeOrderableDBInstanceOptionsFunc: func(in1 *rds.DescribeOrderableDBInstanceOptionsInput) (*rds.DescribeOrderableDBInstanceOptionsOutput, error) {
// 	               panic("mock out the DescribeOrderableDBInstanceOptions method")
//             },
//             DescribeOrderableDBInstanceOptionsPagesFunc: func(in1 *rds.DescribeOrderableDBInstanceOptionsInput, in2 func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool) error {
// 	               panic("mock out the DescribeOrderableDBInstanceOptionsPages method")
//             },
//             DescribeOrderableDBInstanceOptionsPagesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeOrderableDBInstanceOptionsInput, in3 func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeOrderableDBInstanceOptionsPagesWithContext method")
//             },
//             DescribeOrderableDBInstanceOptionsRequestFunc: func(in1 *rds.DescribeOrderableDBInstanceOptionsInput) (*request.Request, *rds.DescribeOrderableDBInstanceOptionsOutput) {
// 	               panic("mock out the DescribeOrderableDBInstanceOptionsRequest method")
//             },
//             DescribeOrderableDBInstanceOptionsWithContextFunc: func(in1 context.Context, in2 *rds.DescribeOrderableDBInstanceOptionsInput, in3 ...request.Option) (*rds.DescribeOrderableDBInstanceOptionsOutput, error) {
// 	               panic("mock out the DescribeOrderableDBInstanceOptionsWithContext method")
//             },
//             DescribePendingMaintenanceActionsFunc: func(in1 *rds.DescribePendingMaintenanceActionsInput) (*rds.DescribePendingMaintenanceActionsOutput, error) {
// 	               panic("mock out the DescribePendingMaintenanceActions method")
//             },
//             DescribePendingMaintenanceActionsRequestFunc: func(in1 *rds.DescribePendingMaintenanceActionsInput) (*request.Request, *rds.DescribePendingMaintenanceActionsOutput) {
// 	               panic("mock out the DescribePendingMaintenanceActionsRequest method")
//             },
//             DescribePendingMaintenanceActionsWithContextFunc: func(in1 context.Context, in2 *rds.DescribePendingMaintenanceActionsInput, in3 ...request.Option) (*rds.DescribePendingMaintenanceActionsOutput, error) {
// 	               panic("mock out the DescribePendingMaintenanceActionsWithContext method")
//             },
//             DescribeReservedDBInstancesFunc: func(in1 *rds.DescribeReservedDBInstancesInput) (*rds.DescribeReservedDBInstancesOutput, error) {
// 	               panic("mock out the DescribeReservedDBInstances method")
//             },
//             DescribeReservedDBInstancesOfferingsFunc: func(in1 *rds.DescribeReservedDBInstancesOfferingsInput) (*rds.DescribeReservedDBInstancesOfferingsOutput, error) {
// 	               panic("mock out the DescribeReservedDBInstancesOfferings method")
//             },
//             DescribeReservedDBInstancesOfferingsPagesFunc: func(in1 *rds.DescribeReservedDBInstancesOfferingsInput, in2 func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool) error {
// 	               panic("mock out the DescribeReservedDBInstancesOfferingsPages method")
//             },
//             DescribeReservedDBInstancesOfferingsPagesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeReservedDBInstancesOfferingsInput, in3 func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeReservedDBInstancesOfferingsPagesWithContext method")
//             },
//             DescribeReservedDBInstancesOfferingsRequestFunc: func(in1 *rds.DescribeReservedDBInstancesOfferingsInput) (*request.Request, *rds.DescribeReservedDBInstancesOfferingsOutput) {
// 	               panic("mock out the DescribeReservedDBInstancesOfferingsRequest method")
//             },
//             DescribeReservedDBInstancesOfferingsWithContextFunc: func(in1 context.Context, in2 *rds.DescribeReservedDBInstancesOfferingsInput, in3 ...request.Option) (*rds.DescribeReservedDBInstancesOfferingsOutput, error) {
// 	               panic("mock out the DescribeReservedDBInstancesOfferingsWithContext method")
//             },
//             DescribeReservedDBInstancesPagesFunc: func(in1 *rds.DescribeReservedDBInstancesInput, in2 func(*rds.DescribeReservedDBInstancesOutput, bool) bool) error {
// 	               panic("mock out the DescribeReservedDBInstancesPages method")
//             },
//             DescribeReservedDBInstancesPagesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeReservedDBInstancesInput, in3 func(*rds.DescribeReservedDBInstancesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DescribeReservedDBInstancesPagesWithContext method")
//             },
//             DescribeReservedDBInstancesRequestFunc: func(in1 *rds.DescribeReservedDBInstancesInput) (*request.Request, *rds.DescribeReservedDBInstancesOutput) {
// 	               panic("mock out the DescribeReservedDBInstancesRequest method")
//             },
//             DescribeReservedDBInstancesWithContextFunc: func(in1 context.Context, in2 *rds.DescribeReservedDBInstancesInput, in3 ...request.Option) (*rds.DescribeReservedDBInstancesOutput, error) {
// 	               panic("mock out the DescribeReservedDBInstancesWithContext method")
//             },
//             DescribeSourceRegionsFunc: func(in1 *rds.DescribeSourceRegionsInput) (*rds.DescribeSourceRegionsOutput, error) {
// 	               panic("mock out the DescribeSourceRegions method")
//             },
//             DescribeSourceRegionsRequestFunc: func(in1 *rds.DescribeSourceRegionsInput) (*request.Request, *rds.DescribeSourceRegionsOutput) {
// 	               panic("mock out the DescribeSourceRegionsRequest method")
//             },
//             DescribeSourceRegionsWithContextFunc: func(in1 context.Context, in2 *rds.DescribeSourceRegionsInput, in3 ...request.Option) (*rds.DescribeSourceRegionsOutput, error) {
// 	               panic("mock out the DescribeSourceRegionsWithContext method")
//             },
//             DescribeValidDBInstanceModificationsFunc: func(in1 *rds.DescribeValidDBInstanceModificationsInput) (*rds.DescribeValidDBInstanceModificationsOutput, error) {
// 	               panic("mock out the DescribeValidDBInstanceModifications method")
//             },
//             DescribeValidDBInstanceModificationsRequestFunc: func(in1 *rds.DescribeValidDBInstanceModificationsInput) (*request.Request, *rds.DescribeValidDBInstanceModificationsOutput) {
// 	               panic("mock out the DescribeValidDBInstanceModificationsRequest method")
//             },
//             DescribeValidDBInstanceModificationsWithContextFunc: func(in1 context.Context, in2 *rds.DescribeValidDBInstanceModificationsInput, in3 ...request.Option) (*rds.DescribeValidDBInstanceModificationsOutput, error) {
// 	               panic("mock out the DescribeValidDBInstanceModificationsWithContext method")
//             },
//             DownloadDBLogFilePortionFunc: func(in1 *rds.DownloadDBLogFilePortionInput) (*rds.DownloadDBLogFilePortionOutput, error) {
// 	               panic("mock out the DownloadDBLogFilePortion method")
//             },
//             DownloadDBLogFilePortionPagesFunc: func(in1 *rds.DownloadDBLogFilePortionInput, in2 func(*rds.DownloadDBLogFilePortionOutput, bool) bool) error {
// 	               panic("mock out the DownloadDBLogFilePortionPages method")
//             },
//             DownloadDBLogFilePortionPagesWithContextFunc: func(in1 context.Context, in2 *rds.DownloadDBLogFilePortionInput, in3 func(*rds.DownloadDBLogFilePortionOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the DownloadDBLogFilePortionPagesWithContext method")
//             },
//             DownloadDBLogFilePortionRequestFunc: func(in1 *rds.DownloadDBLogFilePortionInput) (*request.Request, *rds.DownloadDBLogFilePortionOutput) {
// 	               panic("mock out the DownloadDBLogFilePortionRequest method")
//             },
//             DownloadDBLogFilePortionWithContextFunc: func(in1 context.Context, in2 *rds.DownloadDBLogFilePortionInput, in3 ...request.Option) (*rds.DownloadDBLogFilePortionOutput, error) {
// 	               panic("mock out the DownloadDBLogFilePortionWithContext method")
//             },
//             FailoverDBClusterFunc: func(in1 *rds.FailoverDBClusterInput) (*rds.FailoverDBClusterOutput, error) {
// 	               panic("mock out the FailoverDBCluster method")
//             },
//             FailoverDBClusterRequestFunc: func(in1 *rds.FailoverDBClusterInput) (*request.Request, *rds.FailoverDBClusterOutput) {
// 	               panic("mock out the FailoverDBClusterRequest method")
//             },
//             FailoverDBClusterWithContextFunc: func(in1 context.Context, in2 *rds.FailoverDBClusterInput, in3 ...request.Option) (*rds.FailoverDBClusterOutput, error) {
// 	               panic("mock out the FailoverDBClusterWithContext method")
//             },
//             ImportInstallationMediaFunc: func(in1 *rds.ImportInstallationMediaInput) (*rds.ImportInstallationMediaOutput, error) {
// 	               panic("mock out the ImportInstallationMedia method")
//             },
//             ImportInstallationMediaRequestFunc: func(in1 *rds.ImportInstallationMediaInput) (*request.Request, *rds.ImportInstallationMediaOutput) {
// 	               panic("mock out the ImportInstallationMediaRequest method")
//             },
//             ImportInstallationMediaWithContextFunc: func(in1 context.Context, in2 *rds.ImportInstallationMediaInput, in3 ...request.Option) (*rds.ImportInstallationMediaOutput, error) {
// 	               panic("mock out the ImportInstallationMediaWithContext method")
//             },
//             ListTagsForResourceFunc: func(in1 *rds.ListTagsForResourceInput) (*rds.ListTagsForResourceOutput, error) {
// 	               panic("mock out the ListTagsForResource method")
//             },
//             ListTagsForResourceRequestFunc: func(in1 *rds.ListTagsForResourceInput) (*request.Request, *rds.ListTagsForResourceOutput) {
// 	               panic("mock out the ListTagsForResourceRequest method")
//             },
//             ListTagsForResourceWithContextFunc: func(in1 context.Context, in2 *rds.ListTagsForResourceInput, in3 ...request.Option) (*rds.ListTagsForResourceOutput, error) {
// 	               panic("mock out the ListTagsForResourceWithContext method")
//             },
//             ModifyCertificatesFunc: func(in1 *rds.ModifyCertificatesInput) (*rds.ModifyCertificatesOutput, error) {
// 	               panic("mock out the ModifyCertificates method")
//             },
//             ModifyCertificatesRequestFunc: func(in1 *rds.ModifyCertificatesInput) (*request.Request, *rds.ModifyCertificatesOutput) {
// 	               panic("mock out the ModifyCertificatesRequest method")
//             },
//             ModifyCertificatesWithContextFunc: func(in1 context.Context, in2 *rds.ModifyCertificatesInput, in3 ...request.Option) (*rds.ModifyCertificatesOutput, error) {
// 	               panic("mock out the ModifyCertificatesWithContext method")
//             },
//             ModifyCurrentDBClusterCapacityFunc: func(in1 *rds.ModifyCurrentDBClusterCapacityInput) (*rds.ModifyCurrentDBClusterCapacityOutput, error) {
// 	               panic("mock out the ModifyCurrentDBClusterCapacity method")
//             },
//             ModifyCurrentDBClusterCapacityRequestFunc: func(in1 *rds.ModifyCurrentDBClusterCapacityInput) (*request.Request, *rds.ModifyCurrentDBClusterCapacityOutput) {
// 	               panic("mock out the ModifyCurrentDBClusterCapacityRequest method")
//             },
//             ModifyCurrentDBClusterCapacityWithContextFunc: func(in1 context.Context, in2 *rds.ModifyCurrentDBClusterCapacityInput, in3 ...request.Option) (*rds.ModifyCurrentDBClusterCapacityOutput, error) {
// 	               panic("mock out the ModifyCurrentDBClusterCapacityWithContext method")
//             },
//             ModifyDBClusterFunc: func(in1 *rds.ModifyDBClusterInput) (*rds.ModifyDBClusterOutput, error) {
// 	               panic("mock out the ModifyDBCluster method")
//             },
//             ModifyDBClusterEndpointFunc: func(in1 *rds.ModifyDBClusterEndpointInput) (*rds.ModifyDBClusterEndpointOutput, error) {
// 	               panic("mock out the ModifyDBClusterEndpoint method")
//             },
//             ModifyDBClusterEndpointRequestFunc: func(in1 *rds.ModifyDBClusterEndpointInput) (*request.Request, *rds.ModifyDBClusterEndpointOutput) {
// 	               panic("mock out the ModifyDBClusterEndpointRequest method")
//             },
//             ModifyDBClusterEndpointWithContextFunc: func(in1 context.Context, in2 *rds.ModifyDBClusterEndpointInput, in3 ...request.Option) (*rds.ModifyDBClusterEndpointOutput, error) {
// 	               panic("mock out the ModifyDBClusterEndpointWithContext method")
//             },
//             ModifyDBClusterParameterGroupFunc: func(in1 *rds.ModifyDBClusterParameterGroupInput) (*rds.DBClusterParameterGroupNameMessage, error) {
// 	               panic("mock out the ModifyDBClusterParameterGroup method")
//             },
//             ModifyDBClusterParameterGroupRequestFunc: func(in1 *rds.ModifyDBClusterParameterGroupInput) (*request.Request, *rds.DBClusterParameterGroupNameMessage) {
// 	               panic("mock out the ModifyDBClusterParameterGroupRequest method")
//             },
//             ModifyDBClusterParameterGroupWithContextFunc: func(in1 context.Context, in2 *rds.ModifyDBClusterParameterGroupInput, in3 ...request.Option) (*rds.DBClusterParameterGroupNameMessage, error) {
// 	               panic("mock out the ModifyDBClusterParameterGroupWithContext method")
//             },
//             ModifyDBClusterRequestFunc: func(in1 *rds.ModifyDBClusterInput) (*request.Request, *rds.ModifyDBClusterOutput) {
// 	               panic("mock out the ModifyDBClusterRequest method")
//             },
//             ModifyDBClusterSnapshotAttributeFunc: func(in1 *rds.ModifyDBClusterSnapshotAttributeInput) (*rds.ModifyDBClusterSnapshotAttributeOutput, error) {
// 	               panic("mock out the ModifyDBClusterSnapshotAttribute method")
//             },
//             ModifyDBClusterSnapshotAttributeRequestFunc: func(in1 *rds.ModifyDBClusterSnapshotAttributeInput) (*request.Request, *rds.ModifyDBClusterSnapshotAttributeOutput) {
// 	               panic("mock out the ModifyDBClusterSnapshotAttributeRequest method")
//             },
//             ModifyDBClusterSnapshotAttributeWithContextFunc: func(in1 context.Context, in2 *rds.ModifyDBClusterSnapshotAttributeInput, in3 ...request.Option) (*rds.ModifyDBClusterSnapshotAttributeOutput, error) {
// 	               panic("mock out the ModifyDBClusterSnapshotAttributeWithContext method")
//             },
//             ModifyDBClusterWithContextFunc: func(in1 context.Context, in2 *rds.ModifyDBClusterInput, in3 ...request.Option) (*rds.ModifyDBClusterOutput, error) {
// 	               panic("mock out the ModifyDBClusterWithContext method")
//             },
//             ModifyDBInstanceFunc: func(in1 *rds.ModifyDBInstanceInput) (*rds.ModifyDBInstanceOutput, error) {
// 	               panic("mock out the ModifyDBInstance method")
//             },
//             ModifyDBInstanceRequestFunc: func(in1 *rds.ModifyDBInstanceInput) (*request.Request, *rds.ModifyDBInstanceOutput) {
// 	               panic("mock out the ModifyDBInstanceRequest method")
//             },
//             ModifyDBInstanceWithContextFunc: func(in1 context.Context, in2 *rds.ModifyDBInstanceInput, in3 ...request.Option) (*rds.ModifyDBInstanceOutput, error) {
// 	               panic("mock out the ModifyDBInstanceWithContext method")
//             },
//             ModifyDBParameterGroupFunc: func(in1 *rds.ModifyDBParameterGroupInput) (*rds.DBParameterGroupNameMessage, error) {
// 	               panic("mock out the ModifyDBParameterGroup method")
//             },
//             ModifyDBParameterGroupRequestFunc: func(in1 *rds.ModifyDBParameterGroupInput) (*request.Request, *rds.DBParameterGroupNameMessage) {
// 	               panic("mock out the ModifyDBParameterGroupRequest method")
//             },
//             ModifyDBParameterGroupWithContextFunc: func(in1 context.Context, in2 *rds.ModifyDBParameterGroupInput, in3 ...request.Option) (*rds.DBParameterGroupNameMessage, error) {
// 	               panic("mock out the ModifyDBParameterGroupWithContext method")
//             },
//             ModifyDBProxyFunc: func(in1 *rds.ModifyDBProxyInput) (*rds.ModifyDBProxyOutput, error) {
// 	               panic("mock out the ModifyDBProxy method")
//             },
//             ModifyDBProxyRequestFunc: func(in1 *rds.ModifyDBProxyInput) (*request.Request, *rds.ModifyDBProxyOutput) {
// 	               panic("mock out the ModifyDBProxyRequest method")
//             },
//             ModifyDBProxyTargetGroupFunc: func(in1 *rds.ModifyDBProxyTargetGroupInput) (*rds.ModifyDBProxyTargetGroupOutput, error) {
// 	               panic("mock out the ModifyDBProxyTargetGroup method")
//             },
//             ModifyDBProxyTargetGroupRequestFunc: func(in1 *rds.ModifyDBProxyTargetGroupInput) (*request.Request, *rds.ModifyDBProxyTargetGroupOutput) {
// 	               panic("mock out the ModifyDBProxyTargetGroupRequest method")
//             },
//             ModifyDBProxyTargetGroupWithContextFunc: func(in1 context.Context, in2 *rds.ModifyDBProxyTargetGroupInput, in3 ...request.Option) (*rds.ModifyDBProxyTargetGroupOutput, error) {
// 	               panic("mock out the ModifyDBProxyTargetGroupWithContext method")
//             },
//             ModifyDBProxyWithContextFunc: func(in1 context.Context, in2 *rds.ModifyDBProxyInput, in3 ...request.Option) (*rds.ModifyDBProxyOutput, error) {
// 	               panic("mock out the ModifyDBProxyWithContext method")
//             },
//             ModifyDBSnapshotFunc: func(in1 *rds.ModifyDBSnapshotInput) (*rds.ModifyDBSnapshotOutput, error) {
// 	               panic("mock out the ModifyDBSnapshot method")
//             },
//             ModifyDBSnapshotAttributeFunc: func(in1 *rds.ModifyDBSnapshotAttributeInput) (*rds.ModifyDBSnapshotAttributeOutput, error) {
// 	               panic("mock out the ModifyDBSnapshotAttribute method")
//             },
//             ModifyDBSnapshotAttributeRequestFunc: func(in1 *rds.ModifyDBSnapshotAttributeInput) (*request.Request, *rds.ModifyDBSnapshotAttributeOutput) {
// 	               panic("mock out the ModifyDBSnapshotAttributeRequest method")
//             },
//             ModifyDBSnapshotAttributeWithContextFunc: func(in1 context.Context, in2 *rds.ModifyDBSnapshotAttributeInput, in3 ...request.Option) (*rds.ModifyDBSnapshotAttributeOutput, error) {
// 	               panic("mock out the ModifyDBSnapshotAttributeWithContext method")
//             },
//             ModifyDBSnapshotRequestFunc: func(in1 *rds.ModifyDBSnapshotInput) (*request.Request, *rds.ModifyDBSnapshotOutput) {
// 	               panic("mock out the ModifyDBSnapshotRequest method")
//             },
//             ModifyDBSnapshotWithContextFunc: func(in1 context.Context, in2 *rds.ModifyDBSnapshotInput, in3 ...request.Option) (*rds.ModifyDBSnapshotOutput, error) {
// 	               panic("mock out the ModifyDBSnapshotWithContext method")
//             },
//             ModifyDBSubnetGroupFunc: func(in1 *rds.ModifyDBSubnetGroupInput) (*rds.ModifyDBSubnetGroupOutput, error) {
// 	               panic("mock out the ModifyDBSubnetGroup method")
//             },
//             ModifyDBSubnetGroupRequestFunc: func(in1 *rds.ModifyDBSubnetGroupInput) (*request.Request, *rds.ModifyDBSubnetGroupOutput) {
// 	               panic("mock out the ModifyDBSubnetGroupRequest method")
//             },
//             ModifyDBSubnetGroupWithContextFunc: func(in1 context.Context, in2 *rds.ModifyDBSubnetGroupInput, in3 ...request.Option) (*rds.ModifyDBSubnetGroupOutput, error) {
// 	               panic("mock out the ModifyDBSubnetGroupWithContext method")
//             },
//             ModifyEventSubscriptionFunc: func(in1 *rds.ModifyEventSubscriptionInput) (*rds.ModifyEventSubscriptionOutput, error) {
// 	               panic("mock out the ModifyEventSubscription method")
//             },
//             ModifyEventSubscriptionRequestFunc: func(in1 *rds.ModifyEventSubscriptionInput) (*request.Request, *rds.ModifyEventSubscriptionOutput) {
// 	               panic("mock out the ModifyEventSubscriptionRequest method")
//             },
//             ModifyEventSubscriptionWithContextFunc: func(in1 context.Context, in2 *rds.ModifyEventSubscriptionInput, in3 ...request.Option) (*rds.ModifyEventSubscriptionOutput, error) {
// 	               panic("mock out the ModifyEventSubscriptionWithContext method")
//             },
//             ModifyGlobalClusterFunc: func(in1 *rds.ModifyGlobalClusterInput) (*rds.ModifyGlobalClusterOutput, error) {
// 	               panic("mock out the ModifyGlobalCluster method")
//             },
//             ModifyGlobalClusterRequestFunc: func(in1 *rds.ModifyGlobalClusterInput) (*request.Request, *rds.ModifyGlobalClusterOutput) {
// 	               panic("mock out the ModifyGlobalClusterRequest method")
//             },
//             ModifyGlobalClusterWithContextFunc: func(in1 context.Context, in2 *rds.ModifyGlobalClusterInput, in3 ...request.Option) (*rds.ModifyGlobalClusterOutput, error) {
// 	               panic("mock out the ModifyGlobalClusterWithContext method")
//             },
//             ModifyOptionGroupFunc: func(in1 *rds.ModifyOptionGroupInput) (*rds.ModifyOptionGroupOutput, error) {
// 	               panic("mock out the ModifyOptionGroup method")
//             },
//             ModifyOptionGroupRequestFunc: func(in1 *rds.ModifyOptionGroupInput) (*request.Request, *rds.ModifyOptionGroupOutput) {
// 	               panic("mock out the ModifyOptionGroupRequest method")
//             },
//             ModifyOptionGroupWithContextFunc: func(in1 context.Context, in2 *rds.ModifyOptionGroupInput, in3 ...request.Option) (*rds.ModifyOptionGroupOutput, error) {
// 	               panic("mock out the ModifyOptionGroupWithContext method")
//             },
//             PromoteReadReplicaFunc: func(in1 *rds.PromoteReadReplicaInput) (*rds.PromoteReadReplicaOutput, error) {
// 	               panic("mock out the PromoteReadReplica method")
//             },
//             PromoteReadReplicaDBClusterFunc: func(in1 *rds.PromoteReadReplicaDBClusterInput) (*rds.PromoteReadReplicaDBClusterOutput, error) {
// 	               panic("mock out the PromoteReadReplicaDBCluster method")
//             },
//             PromoteReadReplicaDBClusterRequestFunc: func(in1 *rds.PromoteReadReplicaDBClusterInput) (*request.Request, *rds.PromoteReadReplicaDBClusterOutput) {
// 	               panic("mock out the PromoteReadReplicaDBClusterRequest method")
//             },
//             PromoteReadReplicaDBClusterWithContextFunc: func(in1 context.Context, in2 *rds.PromoteReadReplicaDBClusterInput, in3 ...request.Option) (*rds.PromoteReadReplicaDBClusterOutput, error) {
// 	               panic("mock out the PromoteReadReplicaDBClusterWithContext method")
//             },
//             PromoteReadReplicaRequestFunc: func(in1 *rds.PromoteReadReplicaInput) (*request.Request, *rds.PromoteReadReplicaOutput) {
// 	               panic("mock out the PromoteReadReplicaRequest method")
//             },
//             PromoteReadReplicaWithContextFunc: func(in1 context.Context, in2 *rds.PromoteReadReplicaInput, in3 ...request.Option) (*rds.PromoteReadReplicaOutput, error) {
// 	               panic("mock out the PromoteReadReplicaWithContext method")
//             },
//             PurchaseReservedDBInstancesOfferingFunc: func(in1 *rds.PurchaseReservedDBInstancesOfferingInput) (*rds.PurchaseReservedDBInstancesOfferingOutput, error) {
// 	               panic("mock out the PurchaseReservedDBInstancesOffering method")
//             },
//             PurchaseReservedDBInstancesOfferingRequestFunc: func(in1 *rds.PurchaseReservedDBInstancesOfferingInput) (*request.Request, *rds.PurchaseReservedDBInstancesOfferingOutput) {
// 	               panic("mock out the PurchaseReservedDBInstancesOfferingRequest method")
//             },
//             PurchaseReservedDBInstancesOfferingWithContextFunc: func(in1 context.Context, in2 *rds.PurchaseReservedDBInstancesOfferingInput, in3 ...request.Option) (*rds.PurchaseReservedDBInstancesOfferingOutput, error) {
// 	               panic("mock out the PurchaseReservedDBInstancesOfferingWithContext method")
//             },
//             RebootDBInstanceFunc: func(in1 *rds.RebootDBInstanceInput) (*rds.RebootDBInstanceOutput, error) {
// 	               panic("mock out the RebootDBInstance method")
//             },
//             RebootDBInstanceRequestFunc: func(in1 *rds.RebootDBInstanceInput) (*request.Request, *rds.RebootDBInstanceOutput) {
// 	               panic("mock out the RebootDBInstanceRequest method")
//             },
//             RebootDBInstanceWithContextFunc: func(in1 context.Context, in2 *rds.RebootDBInstanceInput, in3 ...request.Option) (*rds.RebootDBInstanceOutput, error) {
// 	               panic("mock out the RebootDBInstanceWithContext method")
//             },
//             RegisterDBProxyTargetsFunc: func(in1 *rds.RegisterDBProxyTargetsInput) (*rds.RegisterDBProxyTargetsOutput, error) {
// 	               panic("mock out the RegisterDBProxyTargets method")
//             },
//             RegisterDBProxyTargetsRequestFunc: func(in1 *rds.RegisterDBProxyTargetsInput) (*request.Request, *rds.RegisterDBProxyTargetsOutput) {
// 	               panic("mock out the RegisterDBProxyTargetsRequest method")
//             },
//             RegisterDBProxyTargetsWithContextFunc: func(in1 context.Context, in2 *rds.RegisterDBProxyTargetsInput, in3 ...request.Option) (*rds.RegisterDBProxyTargetsOutput, error) {
// 	               panic("mock out the RegisterDBProxyTargetsWithContext method")
//             },
//             RemoveFromGlobalClusterFunc: func(in1 *rds.RemoveFromGlobalClusterInput) (*rds.RemoveFromGlobalClusterOutput, error) {
// 	               panic("mock out the RemoveFromGlobalCluster method")
//             },
//             RemoveFromGlobalClusterRequestFunc: func(in1 *rds.RemoveFromGlobalClusterInput) (*request.Request, *rds.RemoveFromGlobalClusterOutput) {
// 	               panic("mock out the RemoveFromGlobalClusterRequest method")
//             },
//             RemoveFromGlobalClusterWithContextFunc: func(in1 context.Context, in2 *rds.RemoveFromGlobalClusterInput, in3 ...request.Option) (*rds.RemoveFromGlobalClusterOutput, error) {
// 	               panic("mock out the RemoveFromGlobalClusterWithContext method")
//             },
//             RemoveRoleFromDBClusterFunc: func(in1 *rds.RemoveRoleFromDBClusterInput) (*rds.RemoveRoleFromDBClusterOutput, error) {
// 	               panic("mock out the RemoveRoleFromDBCluster method")
//             },
//             RemoveRoleFromDBClusterRequestFunc: func(in1 *rds.RemoveRoleFromDBClusterInput) (*request.Request, *rds.RemoveRoleFromDBClusterOutput) {
// 	               panic("mock out the RemoveRoleFromDBClusterRequest method")
//             },
//             RemoveRoleFromDBClusterWithContextFunc: func(in1 context.Context, in2 *rds.RemoveRoleFromDBClusterInput, in3 ...request.Option) (*rds.RemoveRoleFromDBClusterOutput, error) {
// 	               panic("mock out the RemoveRoleFromDBClusterWithContext method")
//             },
//             RemoveRoleFromDBInstanceFunc: func(in1 *rds.RemoveRoleFromDBInstanceInput) (*rds.RemoveRoleFromDBInstanceOutput, error) {
// 	               panic("mock out the RemoveRoleFromDBInstance method")
//             },
//             RemoveRoleFromDBInstanceRequestFunc: func(in1 *rds.RemoveRoleFromDBInstanceInput) (*request.Request, *rds.RemoveRoleFromDBInstanceOutput) {
// 	               panic("mock out the RemoveRoleFromDBInstanceRequest method")
//             },
//             RemoveRoleFromDBInstanceWithContextFunc: func(in1 context.Context, in2 *rds.RemoveRoleFromDBInstanceInput, in3 ...request.Option) (*rds.RemoveRoleFromDBInstanceOutput, error) {
// 	               panic("mock out the RemoveRoleFromDBInstanceWithContext method")
//             },
//             RemoveSourceIdentifierFromSubscriptionFunc: func(in1 *rds.RemoveSourceIdentifierFromSubscriptionInput) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error) {
// 	               panic("mock out the RemoveSourceIdentifierFromSubscription method")
//             },
//             RemoveSourceIdentifierFromSubscriptionRequestFunc: func(in1 *rds.RemoveSourceIdentifierFromSubscriptionInput) (*request.Request, *rds.RemoveSourceIdentifierFromSubscriptionOutput) {
// 	               panic("mock out the RemoveSourceIdentifierFromSubscriptionRequest method")
//             },
//             RemoveSourceIdentifierFromSubscriptionWithContextFunc: func(in1 context.Context, in2 *rds.RemoveSourceIdentifierFromSubscriptionInput, in3 ...request.Option) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error) {
// 	               panic("mock out the RemoveSourceIdentifierFromSubscriptionWithContext method")
//             },
//             RemoveTagsFromResourceFunc: func(in1 *rds.RemoveTagsFromResourceInput) (*rds.RemoveTagsFromResourceOutput, error) {
// 	               panic("mock out the RemoveTagsFromResource method")
//             },
//             RemoveTagsFromResourceRequestFunc: func(in1 *rds.RemoveTagsFromResourceInput) (*request.Request, *rds.RemoveTagsFromResourceOutput) {
// 	               panic("mock out the RemoveTagsFromResourceRequest method")
//             },
//             RemoveTagsFromResourceWithContextFunc: func(in1 context.Context, in2 *rds.RemoveTagsFromResourceInput, in3 ...request.Option) (*rds.RemoveTagsFromResourceOutput, error) {
// 	               panic("mock out the RemoveTagsFromResourceWithContext method")
//             },
//             ResetDBClusterParameterGroupFunc: func(in1 *rds.ResetDBClusterParameterGroupInput) (*rds.DBClusterParameterGroupNameMessage, error) {
// 	               panic("mock out the ResetDBClusterParameterGroup method")
//             },
//             ResetDBClusterParameterGroupRequestFunc: func(in1 *rds.ResetDBClusterParameterGroupInput) (*request.Request, *rds.DBClusterParameterGroupNameMessage) {
// 	               panic("mock out the ResetDBClusterParameterGroupRequest method")
//             },
//             ResetDBClusterParameterGroupWithContextFunc: func(in1 context.Context, in2 *rds.ResetDBClusterParameterGroupInput, in3 ...request.Option) (*rds.DBClusterParameterGroupNameMessage, error) {
// 	               panic("mock out the ResetDBClusterParameterGroupWithContext method")
//             },
//             ResetDBParameterGroupFunc: func(in1 *rds.ResetDBParameterGroupInput) (*rds.DBParameterGroupNameMessage, error) {
// 	               panic("mock out the ResetDBParameterGroup method")
//             },
//             ResetDBParameterGroupRequestFunc: func(in1 *rds.ResetDBParameterGroupInput) (*request.Request, *rds.DBParameterGroupNameMessage) {
// 	               panic("mock out the ResetDBParameterGroupRequest method")
//             },
//             ResetDBParameterGroupWithContextFunc: func(in1 context.Context, in2 *rds.ResetDBParameterGroupInput, in3 ...request.Option) (*rds.DBParameterGroupNameMessage, error) {
// 	               panic("mock out the ResetDBParameterGroupWithContext method")
//             },
//             RestoreDBClusterFromS3Func: func(in1 *rds.RestoreDBClusterFromS3Input) (*rds.RestoreDBClusterFromS3Output, error) {
// 	               panic("mock out the RestoreDBClusterFromS3 method")
//             },
//             RestoreDBClusterFromS3RequestFunc: func(in1 *rds.RestoreDBClusterFromS3Input) (*request.Request, *rds.RestoreDBClusterFromS3Output) {
// 	               panic("mock out the RestoreDBClusterFromS3Request method")
//             },
//             RestoreDBClusterFromS3WithContextFunc: func(in1 context.Context, in2 *rds.RestoreDBClusterFromS3Input, in3 ...request.Option) (*rds.RestoreDBClusterFromS3Output, error) {
// 	               panic("mock out the RestoreDBClusterFromS3WithContext method")
//             },
//             RestoreDBClusterFromSnapshotFunc: func(in1 *rds.RestoreDBClusterFromSnapshotInput) (*rds.RestoreDBClusterFromSnapshotOutput, error) {
// 	               panic("mock out the RestoreDBClusterFromSnapshot method")
//             },
//             RestoreDBClusterFromSnapshotRequestFunc: func(in1 *rds.RestoreDBClusterFromSnapshotInput) (*request.Request, *rds.RestoreDBClusterFromSnapshotOutput) {
// 	               panic("mock out the RestoreDBClusterFromSnapshotRequest method")
//             },
//             RestoreDBClusterFromSnapshotWithContextFunc: func(in1 context.Context, in2 *rds.RestoreDBClusterFromSnapshotInput, in3 ...request.Option) (*rds.RestoreDBClusterFromSnapshotOutput, error) {
// 	               panic("mock out the RestoreDBClusterFromSnapshotWithContext method")
//             },
//             RestoreDBClusterToPointInTimeFunc: func(in1 *rds.RestoreDBClusterToPointInTimeInput) (*rds.RestoreDBClusterToPointInTimeOutput, error) {
// 	               panic("mock out the RestoreDBClusterToPointInTime method")
//             },
//             RestoreDBClusterToPointInTimeRequestFunc: func(in1 *rds.RestoreDBClusterToPointInTimeInput) (*request.Request, *rds.RestoreDBClusterToPointInTimeOutput) {
// 	               panic("mock out the RestoreDBClusterToPointInTimeRequest method")
//             },
//             RestoreDBClusterToPointInTimeWithContextFunc: func(in1 context.Context, in2 *rds.RestoreDBClusterToPointInTimeInput, in3 ...request.Option) (*rds.RestoreDBClusterToPointInTimeOutput, error) {
// 	               panic("mock out the RestoreDBClusterToPointInTimeWithContext method")
//             },
//             RestoreDBInstanceFromDBSnapshotFunc: func(in1 *rds.RestoreDBInstanceFromDBSnapshotInput) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error) {
// 	               panic("mock out the RestoreDBInstanceFromDBSnapshot method")
//             },
//             RestoreDBInstanceFromDBSnapshotRequestFunc: func(in1 *rds.RestoreDBInstanceFromDBSnapshotInput) (*request.Request, *rds.RestoreDBInstanceFromDBSnapshotOutput) {
// 	               panic("mock out the RestoreDBInstanceFromDBSnapshotRequest method")
//             },
//             RestoreDBInstanceFromDBSnapshotWithContextFunc: func(in1 context.Context, in2 *rds.RestoreDBInstanceFromDBSnapshotInput, in3 ...request.Option) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error) {
// 	               panic("mock out the RestoreDBInstanceFromDBSnapshotWithContext method")
//             },
//             RestoreDBInstanceFromS3Func: func(in1 *rds.RestoreDBInstanceFromS3Input) (*rds.RestoreDBInstanceFromS3Output, error) {
// 	               panic("mock out the RestoreDBInstanceFromS3 method")
//             },
//             RestoreDBInstanceFromS3RequestFunc: func(in1 *rds.RestoreDBInstanceFromS3Input) (*request.Request, *rds.RestoreDBInstanceFromS3Output) {
// 	               panic("mock out the RestoreDBInstanceFromS3Request method")
//             },
//             RestoreDBInstanceFromS3WithContextFunc: func(in1 context.Context, in2 *rds.RestoreDBInstanceFromS3Input, in3 ...request.Option) (*rds.RestoreDBInstanceFromS3Output, error) {
// 	               panic("mock out the RestoreDBInstanceFromS3WithContext method")
//             },
//             RestoreDBInstanceToPointInTimeFunc: func(in1 *rds.RestoreDBInstanceToPointInTimeInput) (*rds.RestoreDBInstanceToPointInTimeOutput, error) {
// 	               panic("mock out the RestoreDBInstanceToPointInTime method")
//             },
//             RestoreDBInstanceToPointInTimeRequestFunc: func(in1 *rds.RestoreDBInstanceToPointInTimeInput) (*request.Request, *rds.RestoreDBInstanceToPointInTimeOutput) {
// 	               panic("mock out the RestoreDBInstanceToPointInTimeRequest method")
//             },
//             RestoreDBInstanceToPointInTimeWithContextFunc: func(in1 context.Context, in2 *rds.RestoreDBInstanceToPointInTimeInput, in3 ...request.Option) (*rds.RestoreDBInstanceToPointInTimeOutput, error) {
// 	               panic("mock out the RestoreDBInstanceToPointInTimeWithContext method")
//             },
//             RevokeDBSecurityGroupIngressFunc: func(in1 *rds.RevokeDBSecurityGroupIngressInput) (*rds.RevokeDBSecurityGroupIngressOutput, error) {
// 	               panic("mock out the RevokeDBSecurityGroupIngress method")
//             },
//             RevokeDBSecurityGroupIngressRequestFunc: func(in1 *rds.RevokeDBSecurityGroupIngressInput) (*request.Request, *rds.RevokeDBSecurityGroupIngressOutput) {
// 	               panic("mock out the RevokeDBSecurityGroupIngressRequest method")
//             },
//             RevokeDBSecurityGroupIngressWithContextFunc: func(in1 context.Context, in2 *rds.RevokeDBSecurityGroupIngressInput, in3 ...request.Option) (*rds.RevokeDBSecurityGroupIngressOutput, error) {
// 	               panic("mock out the RevokeDBSecurityGroupIngressWithContext method")
//             },
//             StartActivityStreamFunc: func(in1 *rds.StartActivityStreamInput) (*rds.StartActivityStreamOutput, error) {
// 	               panic("mock out the StartActivityStream method")
//             },
//             StartActivityStreamRequestFunc: func(in1 *rds.StartActivityStreamInput) (*request.Request, *rds.StartActivityStreamOutput) {
// 	               panic("mock out the StartActivityStreamRequest method")
//             },
//             StartActivityStreamWithContextFunc: func(in1 context.Context, in2 *rds.StartActivityStreamInput, in3 ...request.Option) (*rds.StartActivityStreamOutput, error) {
// 	               panic("mock out the StartActivityStreamWithContext method")
//             },
//             StartDBClusterFunc: func(in1 *rds.StartDBClusterInput) (*rds.StartDBClusterOutput, error) {
// 	               panic("mock out the StartDBCluster method")
//             },
//             StartDBClusterRequestFunc: func(in1 *rds.StartDBClusterInput) (*request.Request, *rds.StartDBClusterOutput) {
// 	               panic("mock out the StartDBClusterRequest method")
//             },
//             StartDBClusterWithContextFunc: func(in1 context.Context, in2 *rds.StartDBClusterInput, in3 ...request.Option) (*rds.StartDBClusterOutput, error) {
// 	               panic("mock out the StartDBClusterWithContext method")
//             },
//             StartDBInstanceFunc: func(in1 *rds.StartDBInstanceInput) (*rds.StartDBInstanceOutput, error) {
// 	               panic("mock out the StartDBInstance method")
//             },
//             StartDBInstanceRequestFunc: func(in1 *rds.StartDBInstanceInput) (*request.Request, *rds.StartDBInstanceOutput) {
// 	               panic("mock out the StartDBInstanceRequest method")
//             },
//             StartDBInstanceWithContextFunc: func(in1 context.Context, in2 *rds.StartDBInstanceInput, in3 ...request.Option) (*rds.StartDBInstanceOutput, error) {
// 	               panic("mock out the StartDBInstanceWithContext method")
//             },
//             StartExportTaskFunc: func(in1 *rds.StartExportTaskInput) (*rds.StartExportTaskOutput, error) {
// 	               panic("mock out the StartExportTask method")
//             },
//             StartExportTaskRequestFunc: func(in1 *rds.StartExportTaskInput) (*request.Request, *rds.StartExportTaskOutput) {
// 	               panic("mock out the StartExportTaskRequest method")
//             },
//             StartExportTaskWithContextFunc: func(in1 context.Context, in2 *rds.StartExportTaskInput, in3 ...request.Option) (*rds.StartExportTaskOutput, error) {
// 	               panic("mock out the StartExportTaskWithContext method")
//             },
//             StopActivityStreamFunc: func(in1 *rds.StopActivityStreamInput) (*rds.StopActivityStreamOutput, error) {
// 	               panic("mock out the StopActivityStream method")
//             },
//             StopActivityStreamRequestFunc: func(in1 *rds.StopActivityStreamInput) (*request.Request, *rds.StopActivityStreamOutput) {
// 	               panic("mock out the StopActivityStreamRequest method")
//             },
//             StopActivityStreamWithContextFunc: func(in1 context.Context, in2 *rds.StopActivityStreamInput, in3 ...request.Option) (*rds.StopActivityStreamOutput, error) {
// 	               panic("mock out the StopActivityStreamWithContext method")
//             },
//             StopDBClusterFunc: func(in1 *rds.StopDBClusterInput) (*rds.StopDBClusterOutput, error) {
// 	               panic("mock out the StopDBCluster method")
//             },
//             StopDBClusterRequestFunc: func(in1 *rds.StopDBClusterInput) (*request.Request, *rds.StopDBClusterOutput) {
// 	               panic("mock out the StopDBClusterRequest method")
//             },
//             StopDBClusterWithContextFunc: func(in1 context.Context, in2 *rds.StopDBClusterInput, in3 ...request.Option) (*rds.StopDBClusterOutput, error) {
// 	               panic("mock out the StopDBClusterWithContext method")
//             },
//             StopDBInstanceFunc: func(in1 *rds.StopDBInstanceInput) (*rds.StopDBInstanceOutput, error) {
// 	               panic("mock out the StopDBInstance method")
//             },
//             StopDBInstanceRequestFunc: func(in1 *rds.StopDBInstanceInput) (*request.Request, *rds.StopDBInstanceOutput) {
// 	               panic("mock out the StopDBInstanceRequest method")
//             },
//             StopDBInstanceWithContextFunc: func(in1 context.Context, in2 *rds.StopDBInstanceInput, in3 ...request.Option) (*rds.StopDBInstanceOutput, error) {
// 	               panic("mock out the StopDBInstanceWithContext method")
//             },
//             WaitUntilDBClusterSnapshotAvailableFunc: func(in1 *rds.DescribeDBClusterSnapshotsInput) error {
// 	               panic("mock out the WaitUntilDBClusterSnapshotAvailable method")
//             },
//             WaitUntilDBClusterSnapshotAvailableWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBClusterSnapshotsInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilDBClusterSnapshotAvailableWithContext method")
//             },
//             WaitUntilDBClusterSnapshotDeletedFunc: func(in1 *rds.DescribeDBClusterSnapshotsInput) error {
// 	               panic("mock out the WaitUntilDBClusterSnapshotDeleted method")
//             },
//             WaitUntilDBClusterSnapshotDeletedWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBClusterSnapshotsInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilDBClusterSnapshotDeletedWithContext method")
//             },
//             WaitUntilDBInstanceAvailableFunc: func(in1 *rds.DescribeDBInstancesInput) error {
// 	               panic("mock out the WaitUntilDBInstanceAvailable method")
//             },
//             WaitUntilDBInstanceAvailableWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBInstancesInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilDBInstanceAvailableWithContext method")
//             },
//             WaitUntilDBInstanceDeletedFunc: func(in1 *rds.DescribeDBInstancesInput) error {
// 	               panic("mock out the WaitUntilDBInstanceDeleted method")
//             },
//             WaitUntilDBInstanceDeletedWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBInstancesInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilDBInstanceDeletedWithContext method")
//             },
//             WaitUntilDBSnapshotAvailableFunc: func(in1 *rds.DescribeDBSnapshotsInput) error {
// 	               panic("mock out the WaitUntilDBSnapshotAvailable method")
//             },
//             WaitUntilDBSnapshotAvailableWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBSnapshotsInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilDBSnapshotAvailableWithContext method")
//             },
//             WaitUntilDBSnapshotDeletedFunc: func(in1 *rds.DescribeDBSnapshotsInput) error {
// 	               panic("mock out the WaitUntilDBSnapshotDeleted method")
//             },
//             WaitUntilDBSnapshotDeletedWithContextFunc: func(in1 context.Context, in2 *rds.DescribeDBSnapshotsInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilDBSnapshotDeletedWithContext method")
//             },
//         }
//
//         // use mockedrdsClient in code that requires rdsClient
//         // and then make assertions.
//
//     }
type rdsClientMock struct {
	// AddRoleToDBClusterFunc mocks the AddRoleToDBCluster method.
	AddRoleToDBClusterFunc func(in1 *rds.AddRoleToDBClusterInput) (*rds.AddRoleToDBClusterOutput, error)

	// AddRoleToDBClusterRequestFunc mocks the AddRoleToDBClusterRequest method.
	AddRoleToDBClusterRequestFunc func(in1 *rds.AddRoleToDBClusterInput) (*request.Request, *rds.AddRoleToDBClusterOutput)

	// AddRoleToDBClusterWithContextFunc mocks the AddRoleToDBClusterWithContext method.
	AddRoleToDBClusterWithContextFunc func(in1 context.Context, in2 *rds.AddRoleToDBClusterInput, in3 ...request.Option) (*rds.AddRoleToDBClusterOutput, error)

	// AddRoleToDBInstanceFunc mocks the AddRoleToDBInstance method.
	AddRoleToDBInstanceFunc func(in1 *rds.AddRoleToDBInstanceInput) (*rds.AddRoleToDBInstanceOutput, error)

	// AddRoleToDBInstanceRequestFunc mocks the AddRoleToDBInstanceRequest method.
	AddRoleToDBInstanceRequestFunc func(in1 *rds.AddRoleToDBInstanceInput) (*request.Request, *rds.AddRoleToDBInstanceOutput)

	// AddRoleToDBInstanceWithContextFunc mocks the AddRoleToDBInstanceWithContext method.
	AddRoleToDBInstanceWithContextFunc func(in1 context.Context, in2 *rds.AddRoleToDBInstanceInput, in3 ...request.Option) (*rds.AddRoleToDBInstanceOutput, error)

	// AddSourceIdentifierToSubscriptionFunc mocks the AddSourceIdentifierToSubscription method.
	AddSourceIdentifierToSubscriptionFunc func(in1 *rds.AddSourceIdentifierToSubscriptionInput) (*rds.AddSourceIdentifierToSubscriptionOutput, error)

	// AddSourceIdentifierToSubscriptionRequestFunc mocks the AddSourceIdentifierToSubscriptionRequest method.
	AddSourceIdentifierToSubscriptionRequestFunc func(in1 *rds.AddSourceIdentifierToSubscriptionInput) (*request.Request, *rds.AddSourceIdentifierToSubscriptionOutput)

	// AddSourceIdentifierToSubscriptionWithContextFunc mocks the AddSourceIdentifierToSubscriptionWithContext method.
	AddSourceIdentifierToSubscriptionWithContextFunc func(in1 context.Context, in2 *rds.AddSourceIdentifierToSubscriptionInput, in3 ...request.Option) (*rds.AddSourceIdentifierToSubscriptionOutput, error)

	// AddTagsToResourceFunc mocks the AddTagsToResource method.
	AddTagsToResourceFunc func(in1 *rds.AddTagsToResourceInput) (*rds.AddTagsToResourceOutput, error)

	// AddTagsToResourceRequestFunc mocks the AddTagsToResourceRequest method.
	AddTagsToResourceRequestFunc func(in1 *rds.AddTagsToResourceInput) (*request.Request, *rds.AddTagsToResourceOutput)

	// AddTagsToResourceWithContextFunc mocks the AddTagsToResourceWithContext method.
	AddTagsToResourceWithContextFunc func(in1 context.Context, in2 *rds.AddTagsToResourceInput, in3 ...request.Option) (*rds.AddTagsToResourceOutput, error)

	// ApplyPendingMaintenanceActionFunc mocks the ApplyPendingMaintenanceAction method.
	ApplyPendingMaintenanceActionFunc func(in1 *rds.ApplyPendingMaintenanceActionInput) (*rds.ApplyPendingMaintenanceActionOutput, error)

	// ApplyPendingMaintenanceActionRequestFunc mocks the ApplyPendingMaintenanceActionRequest method.
	ApplyPendingMaintenanceActionRequestFunc func(in1 *rds.ApplyPendingMaintenanceActionInput) (*request.Request, *rds.ApplyPendingMaintenanceActionOutput)

	// ApplyPendingMaintenanceActionWithContextFunc mocks the ApplyPendingMaintenanceActionWithContext method.
	ApplyPendingMaintenanceActionWithContextFunc func(in1 context.Context, in2 *rds.ApplyPendingMaintenanceActionInput, in3 ...request.Option) (*rds.ApplyPendingMaintenanceActionOutput, error)

	// AuthorizeDBSecurityGroupIngressFunc mocks the AuthorizeDBSecurityGroupIngress method.
	AuthorizeDBSecurityGroupIngressFunc func(in1 *rds.AuthorizeDBSecurityGroupIngressInput) (*rds.AuthorizeDBSecurityGroupIngressOutput, error)

	// AuthorizeDBSecurityGroupIngressRequestFunc mocks the AuthorizeDBSecurityGroupIngressRequest method.
	AuthorizeDBSecurityGroupIngressRequestFunc func(in1 *rds.AuthorizeDBSecurityGroupIngressInput) (*request.Request, *rds.AuthorizeDBSecurityGroupIngressOutput)

	// AuthorizeDBSecurityGroupIngressWithContextFunc mocks the AuthorizeDBSecurityGroupIngressWithContext method.
	AuthorizeDBSecurityGroupIngressWithContextFunc func(in1 context.Context, in2 *rds.AuthorizeDBSecurityGroupIngressInput, in3 ...request.Option) (*rds.AuthorizeDBSecurityGroupIngressOutput, error)

	// BacktrackDBClusterFunc mocks the BacktrackDBCluster method.
	BacktrackDBClusterFunc func(in1 *rds.BacktrackDBClusterInput) (*rds.BacktrackDBClusterOutput, error)

	// BacktrackDBClusterRequestFunc mocks the BacktrackDBClusterRequest method.
	BacktrackDBClusterRequestFunc func(in1 *rds.BacktrackDBClusterInput) (*request.Request, *rds.BacktrackDBClusterOutput)

	// BacktrackDBClusterWithContextFunc mocks the BacktrackDBClusterWithContext method.
	BacktrackDBClusterWithContextFunc func(in1 context.Context, in2 *rds.BacktrackDBClusterInput, in3 ...request.Option) (*rds.BacktrackDBClusterOutput, error)

	// CancelExportTaskFunc mocks the CancelExportTask method.
	CancelExportTaskFunc func(in1 *rds.CancelExportTaskInput) (*rds.CancelExportTaskOutput, error)

	// CancelExportTaskRequestFunc mocks the CancelExportTaskRequest method.
	CancelExportTaskRequestFunc func(in1 *rds.CancelExportTaskInput) (*request.Request, *rds.CancelExportTaskOutput)

	// CancelExportTaskWithContextFunc mocks the CancelExportTaskWithContext method.
	CancelExportTaskWithContextFunc func(in1 context.Context, in2 *rds.CancelExportTaskInput, in3 ...request.Option) (*rds.CancelExportTaskOutput, error)

	// CopyDBClusterParameterGroupFunc mocks the CopyDBClusterParameterGroup method.
	CopyDBClusterParameterGroupFunc func(in1 *rds.CopyDBClusterParameterGroupInput) (*rds.CopyDBClusterParameterGroupOutput, error)

	// CopyDBClusterParameterGroupRequestFunc mocks the CopyDBClusterParameterGroupRequest method.
	CopyDBClusterParameterGroupRequestFunc func(in1 *rds.CopyDBClusterParameterGroupInput) (*request.Request, *rds.CopyDBClusterParameterGroupOutput)

	// CopyDBClusterParameterGroupWithContextFunc mocks the CopyDBClusterParameterGroupWithContext method.
	CopyDBClusterParameterGroupWithContextFunc func(in1 context.Context, in2 *rds.CopyDBClusterParameterGroupInput, in3 ...request.Option) (*rds.CopyDBClusterParameterGroupOutput, error)

	// CopyDBClusterSnapshotFunc mocks the CopyDBClusterSnapshot method.
	CopyDBClusterSnapshotFunc func(in1 *rds.CopyDBClusterSnapshotInput) (*rds.CopyDBClusterSnapshotOutput, error)

	// CopyDBClusterSnapshotRequestFunc mocks the CopyDBClusterSnapshotRequest method.
	CopyDBClusterSnapshotRequestFunc func(in1 *rds.CopyDBClusterSnapshotInput) (*request.Request, *rds.CopyDBClusterSnapshotOutput)

	// CopyDBClusterSnapshotWithContextFunc mocks the CopyDBClusterSnapshotWithContext method.
	CopyDBClusterSnapshotWithContextFunc func(in1 context.Context, in2 *rds.CopyDBClusterSnapshotInput, in3 ...request.Option) (*rds.CopyDBClusterSnapshotOutput, error)

	// CopyDBParameterGroupFunc mocks the CopyDBParameterGroup method.
	CopyDBParameterGroupFunc func(in1 *rds.CopyDBParameterGroupInput) (*rds.CopyDBParameterGroupOutput, error)

	// CopyDBParameterGroupRequestFunc mocks the CopyDBParameterGroupRequest method.
	CopyDBParameterGroupRequestFunc func(in1 *rds.CopyDBParameterGroupInput) (*request.Request, *rds.CopyDBParameterGroupOutput)

	// CopyDBParameterGroupWithContextFunc mocks the CopyDBParameterGroupWithContext method.
	CopyDBParameterGroupWithContextFunc func(in1 context.Context, in2 *rds.CopyDBParameterGroupInput, in3 ...request.Option) (*rds.CopyDBParameterGroupOutput, error)

	// CopyDBSnapshotFunc mocks the CopyDBSnapshot method.
	CopyDBSnapshotFunc func(in1 *rds.CopyDBSnapshotInput) (*rds.CopyDBSnapshotOutput, error)

	// CopyDBSnapshotRequestFunc mocks the CopyDBSnapshotRequest method.
	CopyDBSnapshotRequestFunc func(in1 *rds.CopyDBSnapshotInput) (*request.Request, *rds.CopyDBSnapshotOutput)

	// CopyDBSnapshotWithContextFunc mocks the CopyDBSnapshotWithContext method.
	CopyDBSnapshotWithContextFunc func(in1 context.Context, in2 *rds.CopyDBSnapshotInput, in3 ...request.Option) (*rds.CopyDBSnapshotOutput, error)

	// CopyOptionGroupFunc mocks the CopyOptionGroup method.
	CopyOptionGroupFunc func(in1 *rds.CopyOptionGroupInput) (*rds.CopyOptionGroupOutput, error)

	// CopyOptionGroupRequestFunc mocks the CopyOptionGroupRequest method.
	CopyOptionGroupRequestFunc func(in1 *rds.CopyOptionGroupInput) (*request.Request, *rds.CopyOptionGroupOutput)

	// CopyOptionGroupWithContextFunc mocks the CopyOptionGroupWithContext method.
	CopyOptionGroupWithContextFunc func(in1 context.Context, in2 *rds.CopyOptionGroupInput, in3 ...request.Option) (*rds.CopyOptionGroupOutput, error)

	// CreateCustomAvailabilityZoneFunc mocks the CreateCustomAvailabilityZone method.
	CreateCustomAvailabilityZoneFunc func(in1 *rds.CreateCustomAvailabilityZoneInput) (*rds.CreateCustomAvailabilityZoneOutput, error)

	// CreateCustomAvailabilityZoneRequestFunc mocks the CreateCustomAvailabilityZoneRequest method.
	CreateCustomAvailabilityZoneRequestFunc func(in1 *rds.CreateCustomAvailabilityZoneInput) (*request.Request, *rds.CreateCustomAvailabilityZoneOutput)

	// CreateCustomAvailabilityZoneWithContextFunc mocks the CreateCustomAvailabilityZoneWithContext method.
	CreateCustomAvailabilityZoneWithContextFunc func(in1 context.Context, in2 *rds.CreateCustomAvailabilityZoneInput, in3 ...request.Option) (*rds.CreateCustomAvailabilityZoneOutput, error)

	// CreateDBClusterFunc mocks the CreateDBCluster method.
	CreateDBClusterFunc func(in1 *rds.CreateDBClusterInput) (*rds.CreateDBClusterOutput, error)

	// CreateDBClusterEndpointFunc mocks the CreateDBClusterEndpoint method.
	CreateDBClusterEndpointFunc func(in1 *rds.CreateDBClusterEndpointInput) (*rds.CreateDBClusterEndpointOutput, error)

	// CreateDBClusterEndpointRequestFunc mocks the CreateDBClusterEndpointRequest method.
	CreateDBClusterEndpointRequestFunc func(in1 *rds.CreateDBClusterEndpointInput) (*request.Request, *rds.CreateDBClusterEndpointOutput)

	// CreateDBClusterEndpointWithContextFunc mocks the CreateDBClusterEndpointWithContext method.
	CreateDBClusterEndpointWithContextFunc func(in1 context.Context, in2 *rds.CreateDBClusterEndpointInput, in3 ...request.Option) (*rds.CreateDBClusterEndpointOutput, error)

	// CreateDBClusterParameterGroupFunc mocks the CreateDBClusterParameterGroup method.
	CreateDBClusterParameterGroupFunc func(in1 *rds.CreateDBClusterParameterGroupInput) (*rds.CreateDBClusterParameterGroupOutput, error)

	// CreateDBClusterParameterGroupRequestFunc mocks the CreateDBClusterParameterGroupRequest method.
	CreateDBClusterParameterGroupRequestFunc func(in1 *rds.CreateDBClusterParameterGroupInput) (*request.Request, *rds.CreateDBClusterParameterGroupOutput)

	// CreateDBClusterParameterGroupWithContextFunc mocks the CreateDBClusterParameterGroupWithContext method.
	CreateDBClusterParameterGroupWithContextFunc func(in1 context.Context, in2 *rds.CreateDBClusterParameterGroupInput, in3 ...request.Option) (*rds.CreateDBClusterParameterGroupOutput, error)

	// CreateDBClusterRequestFunc mocks the CreateDBClusterRequest method.
	CreateDBClusterRequestFunc func(in1 *rds.CreateDBClusterInput) (*request.Request, *rds.CreateDBClusterOutput)

	// CreateDBClusterSnapshotFunc mocks the CreateDBClusterSnapshot method.
	CreateDBClusterSnapshotFunc func(in1 *rds.CreateDBClusterSnapshotInput) (*rds.CreateDBClusterSnapshotOutput, error)

	// CreateDBClusterSnapshotRequestFunc mocks the CreateDBClusterSnapshotRequest method.
	CreateDBClusterSnapshotRequestFunc func(in1 *rds.CreateDBClusterSnapshotInput) (*request.Request, *rds.CreateDBClusterSnapshotOutput)

	// CreateDBClusterSnapshotWithContextFunc mocks the CreateDBClusterSnapshotWithContext method.
	CreateDBClusterSnapshotWithContextFunc func(in1 context.Context, in2 *rds.CreateDBClusterSnapshotInput, in3 ...request.Option) (*rds.CreateDBClusterSnapshotOutput, error)

	// CreateDBClusterWithContextFunc mocks the CreateDBClusterWithContext method.
	CreateDBClusterWithContextFunc func(in1 context.Context, in2 *rds.CreateDBClusterInput, in3 ...request.Option) (*rds.CreateDBClusterOutput, error)

	// CreateDBInstanceFunc mocks the CreateDBInstance method.
	CreateDBInstanceFunc func(in1 *rds.CreateDBInstanceInput) (*rds.CreateDBInstanceOutput, error)

	// CreateDBInstanceReadReplicaFunc mocks the CreateDBInstanceReadReplica method.
	CreateDBInstanceReadReplicaFunc func(in1 *rds.CreateDBInstanceReadReplicaInput) (*rds.CreateDBInstanceReadReplicaOutput, error)

	// CreateDBInstanceReadReplicaRequestFunc mocks the CreateDBInstanceReadReplicaRequest method.
	CreateDBInstanceReadReplicaRequestFunc func(in1 *rds.CreateDBInstanceReadReplicaInput) (*request.Request, *rds.CreateDBInstanceReadReplicaOutput)

	// CreateDBInstanceReadReplicaWithContextFunc mocks the CreateDBInstanceReadReplicaWithContext method.
	CreateDBInstanceReadReplicaWithContextFunc func(in1 context.Context, in2 *rds.CreateDBInstanceReadReplicaInput, in3 ...request.Option) (*rds.CreateDBInstanceReadReplicaOutput, error)

	// CreateDBInstanceRequestFunc mocks the CreateDBInstanceRequest method.
	CreateDBInstanceRequestFunc func(in1 *rds.CreateDBInstanceInput) (*request.Request, *rds.CreateDBInstanceOutput)

	// CreateDBInstanceWithContextFunc mocks the CreateDBInstanceWithContext method.
	CreateDBInstanceWithContextFunc func(in1 context.Context, in2 *rds.CreateDBInstanceInput, in3 ...request.Option) (*rds.CreateDBInstanceOutput, error)

	// CreateDBParameterGroupFunc mocks the CreateDBParameterGroup method.
	CreateDBParameterGroupFunc func(in1 *rds.CreateDBParameterGroupInput) (*rds.CreateDBParameterGroupOutput, error)

	// CreateDBParameterGroupRequestFunc mocks the CreateDBParameterGroupRequest method.
	CreateDBParameterGroupRequestFunc func(in1 *rds.CreateDBParameterGroupInput) (*request.Request, *rds.CreateDBParameterGroupOutput)

	// CreateDBParameterGroupWithContextFunc mocks the CreateDBParameterGroupWithContext method.
	CreateDBParameterGroupWithContextFunc func(in1 context.Context, in2 *rds.CreateDBParameterGroupInput, in3 ...request.Option) (*rds.CreateDBParameterGroupOutput, error)

	// CreateDBProxyFunc mocks the CreateDBProxy method.
	CreateDBProxyFunc func(in1 *rds.CreateDBProxyInput) (*rds.CreateDBProxyOutput, error)

	// CreateDBProxyRequestFunc mocks the CreateDBProxyRequest method.
	CreateDBProxyRequestFunc func(in1 *rds.CreateDBProxyInput) (*request.Request, *rds.CreateDBProxyOutput)

	// CreateDBProxyWithContextFunc mocks the CreateDBProxyWithContext method.
	CreateDBProxyWithContextFunc func(in1 context.Context, in2 *rds.CreateDBProxyInput, in3 ...request.Option) (*rds.CreateDBProxyOutput, error)

	// CreateDBSecurityGroupFunc mocks the CreateDBSecurityGroup method.
	CreateDBSecurityGroupFunc func(in1 *rds.CreateDBSecurityGroupInput) (*rds.CreateDBSecurityGroupOutput, error)

	// CreateDBSecurityGroupRequestFunc mocks the CreateDBSecurityGroupRequest method.
	CreateDBSecurityGroupRequestFunc func(in1 *rds.CreateDBSecurityGroupInput) (*request.Request, *rds.CreateDBSecurityGroupOutput)

	// CreateDBSecurityGroupWithContextFunc mocks the CreateDBSecurityGroupWithContext method.
	CreateDBSecurityGroupWithContextFunc func(in1 context.Context, in2 *rds.CreateDBSecurityGroupInput, in3 ...request.Option) (*rds.CreateDBSecurityGroupOutput, error)

	// CreateDBSnapshotFunc mocks the CreateDBSnapshot method.
	CreateDBSnapshotFunc func(in1 *rds.CreateDBSnapshotInput) (*rds.CreateDBSnapshotOutput, error)

	// CreateDBSnapshotRequestFunc mocks the CreateDBSnapshotRequest method.
	CreateDBSnapshotRequestFunc func(in1 *rds.CreateDBSnapshotInput) (*request.Request, *rds.CreateDBSnapshotOutput)

	// CreateDBSnapshotWithContextFunc mocks the CreateDBSnapshotWithContext method.
	CreateDBSnapshotWithContextFunc func(in1 context.Context, in2 *rds.CreateDBSnapshotInput, in3 ...request.Option) (*rds.CreateDBSnapshotOutput, error)

	// CreateDBSubnetGroupFunc mocks the CreateDBSubnetGroup method.
	CreateDBSubnetGroupFunc func(in1 *rds.CreateDBSubnetGroupInput) (*rds.CreateDBSubnetGroupOutput, error)

	// CreateDBSubnetGroupRequestFunc mocks the CreateDBSubnetGroupRequest method.
	CreateDBSubnetGroupRequestFunc func(in1 *rds.CreateDBSubnetGroupInput) (*request.Request, *rds.CreateDBSubnetGroupOutput)

	// CreateDBSubnetGroupWithContextFunc mocks the CreateDBSubnetGroupWithContext method.
	CreateDBSubnetGroupWithContextFunc func(in1 context.Context, in2 *rds.CreateDBSubnetGroupInput, in3 ...request.Option) (*rds.CreateDBSubnetGroupOutput, error)

	// CreateEventSubscriptionFunc mocks the CreateEventSubscription method.
	CreateEventSubscriptionFunc func(in1 *rds.CreateEventSubscriptionInput) (*rds.CreateEventSubscriptionOutput, error)

	// CreateEventSubscriptionRequestFunc mocks the CreateEventSubscriptionRequest method.
	CreateEventSubscriptionRequestFunc func(in1 *rds.CreateEventSubscriptionInput) (*request.Request, *rds.CreateEventSubscriptionOutput)

	// CreateEventSubscriptionWithContextFunc mocks the CreateEventSubscriptionWithContext method.
	CreateEventSubscriptionWithContextFunc func(in1 context.Context, in2 *rds.CreateEventSubscriptionInput, in3 ...request.Option) (*rds.CreateEventSubscriptionOutput, error)

	// CreateGlobalClusterFunc mocks the CreateGlobalCluster method.
	CreateGlobalClusterFunc func(in1 *rds.CreateGlobalClusterInput) (*rds.CreateGlobalClusterOutput, error)

	// CreateGlobalClusterRequestFunc mocks the CreateGlobalClusterRequest method.
	CreateGlobalClusterRequestFunc func(in1 *rds.CreateGlobalClusterInput) (*request.Request, *rds.CreateGlobalClusterOutput)

	// CreateGlobalClusterWithContextFunc mocks the CreateGlobalClusterWithContext method.
	CreateGlobalClusterWithContextFunc func(in1 context.Context, in2 *rds.CreateGlobalClusterInput, in3 ...request.Option) (*rds.CreateGlobalClusterOutput, error)

	// CreateOptionGroupFunc mocks the CreateOptionGroup method.
	CreateOptionGroupFunc func(in1 *rds.CreateOptionGroupInput) (*rds.CreateOptionGroupOutput, error)

	// CreateOptionGroupRequestFunc mocks the CreateOptionGroupRequest method.
	CreateOptionGroupRequestFunc func(in1 *rds.CreateOptionGroupInput) (*request.Request, *rds.CreateOptionGroupOutput)

	// CreateOptionGroupWithContextFunc mocks the CreateOptionGroupWithContext method.
	CreateOptionGroupWithContextFunc func(in1 context.Context, in2 *rds.CreateOptionGroupInput, in3 ...request.Option) (*rds.CreateOptionGroupOutput, error)

	// DeleteCustomAvailabilityZoneFunc mocks the DeleteCustomAvailabilityZone method.
	DeleteCustomAvailabilityZoneFunc func(in1 *rds.DeleteCustomAvailabilityZoneInput) (*rds.DeleteCustomAvailabilityZoneOutput, error)

	// DeleteCustomAvailabilityZoneRequestFunc mocks the DeleteCustomAvailabilityZoneRequest method.
	DeleteCustomAvailabilityZoneRequestFunc func(in1 *rds.DeleteCustomAvailabilityZoneInput) (*request.Request, *rds.DeleteCustomAvailabilityZoneOutput)

	// DeleteCustomAvailabilityZoneWithContextFunc mocks the DeleteCustomAvailabilityZoneWithContext method.
	DeleteCustomAvailabilityZoneWithContextFunc func(in1 context.Context, in2 *rds.DeleteCustomAvailabilityZoneInput, in3 ...request.Option) (*rds.DeleteCustomAvailabilityZoneOutput, error)

	// DeleteDBClusterFunc mocks the DeleteDBCluster method.
	DeleteDBClusterFunc func(in1 *rds.DeleteDBClusterInput) (*rds.DeleteDBClusterOutput, error)

	// DeleteDBClusterEndpointFunc mocks the DeleteDBClusterEndpoint method.
	DeleteDBClusterEndpointFunc func(in1 *rds.DeleteDBClusterEndpointInput) (*rds.DeleteDBClusterEndpointOutput, error)

	// DeleteDBClusterEndpointRequestFunc mocks the DeleteDBClusterEndpointRequest method.
	DeleteDBClusterEndpointRequestFunc func(in1 *rds.DeleteDBClusterEndpointInput) (*request.Request, *rds.DeleteDBClusterEndpointOutput)

	// DeleteDBClusterEndpointWithContextFunc mocks the DeleteDBClusterEndpointWithContext method.
	DeleteDBClusterEndpointWithContextFunc func(in1 context.Context, in2 *rds.DeleteDBClusterEndpointInput, in3 ...request.Option) (*rds.DeleteDBClusterEndpointOutput, error)

	// DeleteDBClusterParameterGroupFunc mocks the DeleteDBClusterParameterGroup method.
	DeleteDBClusterParameterGroupFunc func(in1 *rds.DeleteDBClusterParameterGroupInput) (*rds.DeleteDBClusterParameterGroupOutput, error)

	// DeleteDBClusterParameterGroupRequestFunc mocks the DeleteDBClusterParameterGroupRequest method.
	DeleteDBClusterParameterGroupRequestFunc func(in1 *rds.DeleteDBClusterParameterGroupInput) (*request.Request, *rds.DeleteDBClusterParameterGroupOutput)

	// DeleteDBClusterParameterGroupWithContextFunc mocks the DeleteDBClusterParameterGroupWithContext method.
	DeleteDBClusterParameterGroupWithContextFunc func(in1 context.Context, in2 *rds.DeleteDBClusterParameterGroupInput, in3 ...request.Option) (*rds.DeleteDBClusterParameterGroupOutput, error)

	// DeleteDBClusterRequestFunc mocks the DeleteDBClusterRequest method.
	DeleteDBClusterRequestFunc func(in1 *rds.DeleteDBClusterInput) (*request.Request, *rds.DeleteDBClusterOutput)

	// DeleteDBClusterSnapshotFunc mocks the DeleteDBClusterSnapshot method.
	DeleteDBClusterSnapshotFunc func(in1 *rds.DeleteDBClusterSnapshotInput) (*rds.DeleteDBClusterSnapshotOutput, error)

	// DeleteDBClusterSnapshotRequestFunc mocks the DeleteDBClusterSnapshotRequest method.
	DeleteDBClusterSnapshotRequestFunc func(in1 *rds.DeleteDBClusterSnapshotInput) (*request.Request, *rds.DeleteDBClusterSnapshotOutput)

	// DeleteDBClusterSnapshotWithContextFunc mocks the DeleteDBClusterSnapshotWithContext method.
	DeleteDBClusterSnapshotWithContextFunc func(in1 context.Context, in2 *rds.DeleteDBClusterSnapshotInput, in3 ...request.Option) (*rds.DeleteDBClusterSnapshotOutput, error)

	// DeleteDBClusterWithContextFunc mocks the DeleteDBClusterWithContext method.
	DeleteDBClusterWithContextFunc func(in1 context.Context, in2 *rds.DeleteDBClusterInput, in3 ...request.Option) (*rds.DeleteDBClusterOutput, error)

	// DeleteDBInstanceFunc mocks the DeleteDBInstance method.
	DeleteDBInstanceFunc func(in1 *rds.DeleteDBInstanceInput) (*rds.DeleteDBInstanceOutput, error)

	// DeleteDBInstanceAutomatedBackupFunc mocks the DeleteDBInstanceAutomatedBackup method.
	DeleteDBInstanceAutomatedBackupFunc func(in1 *rds.DeleteDBInstanceAutomatedBackupInput) (*rds.DeleteDBInstanceAutomatedBackupOutput, error)

	// DeleteDBInstanceAutomatedBackupRequestFunc mocks the DeleteDBInstanceAutomatedBackupRequest method.
	DeleteDBInstanceAutomatedBackupRequestFunc func(in1 *rds.DeleteDBInstanceAutomatedBackupInput) (*request.Request, *rds.DeleteDBInstanceAutomatedBackupOutput)

	// DeleteDBInstanceAutomatedBackupWithContextFunc mocks the DeleteDBInstanceAutomatedBackupWithContext method.
	DeleteDBInstanceAutomatedBackupWithContextFunc func(in1 context.Context, in2 *rds.DeleteDBInstanceAutomatedBackupInput, in3 ...request.Option) (*rds.DeleteDBInstanceAutomatedBackupOutput, error)

	// DeleteDBInstanceRequestFunc mocks the DeleteDBInstanceRequest method.
	DeleteDBInstanceRequestFunc func(in1 *rds.DeleteDBInstanceInput) (*request.Request, *rds.DeleteDBInstanceOutput)

	// DeleteDBInstanceWithContextFunc mocks the DeleteDBInstanceWithContext method.
	DeleteDBInstanceWithContextFunc func(in1 context.Context, in2 *rds.DeleteDBInstanceInput, in3 ...request.Option) (*rds.DeleteDBInstanceOutput, error)

	// DeleteDBParameterGroupFunc mocks the DeleteDBParameterGroup method.
	DeleteDBParameterGroupFunc func(in1 *rds.DeleteDBParameterGroupInput) (*rds.DeleteDBParameterGroupOutput, error)

	// DeleteDBParameterGroupRequestFunc mocks the DeleteDBParameterGroupRequest method.
	DeleteDBParameterGroupRequestFunc func(in1 *rds.DeleteDBParameterGroupInput) (*request.Request, *rds.DeleteDBParameterGroupOutput)

	// DeleteDBParameterGroupWithContextFunc mocks the DeleteDBParameterGroupWithContext method.
	DeleteDBParameterGroupWithContextFunc func(in1 context.Context, in2 *rds.DeleteDBParameterGroupInput, in3 ...request.Option) (*rds.DeleteDBParameterGroupOutput, error)

	// DeleteDBProxyFunc mocks the DeleteDBProxy method.
	DeleteDBProxyFunc func(in1 *rds.DeleteDBProxyInput) (*rds.DeleteDBProxyOutput, error)

	// DeleteDBProxyRequestFunc mocks the DeleteDBProxyRequest method.
	DeleteDBProxyRequestFunc func(in1 *rds.DeleteDBProxyInput) (*request.Request, *rds.DeleteDBProxyOutput)

	// DeleteDBProxyWithContextFunc mocks the DeleteDBProxyWithContext method.
	DeleteDBProxyWithContextFunc func(in1 context.Context, in2 *rds.DeleteDBProxyInput, in3 ...request.Option) (*rds.DeleteDBProxyOutput, error)

	// DeleteDBSecurityGroupFunc mocks the DeleteDBSecurityGroup method.
	DeleteDBSecurityGroupFunc func(in1 *rds.DeleteDBSecurityGroupInput) (*rds.DeleteDBSecurityGroupOutput, error)

	// DeleteDBSecurityGroupRequestFunc mocks the DeleteDBSecurityGroupRequest method.
	DeleteDBSecurityGroupRequestFunc func(in1 *rds.DeleteDBSecurityGroupInput) (*request.Request, *rds.DeleteDBSecurityGroupOutput)

	// DeleteDBSecurityGroupWithContextFunc mocks the DeleteDBSecurityGroupWithContext method.
	DeleteDBSecurityGroupWithContextFunc func(in1 context.Context, in2 *rds.DeleteDBSecurityGroupInput, in3 ...request.Option) (*rds.DeleteDBSecurityGroupOutput, error)

	// DeleteDBSnapshotFunc mocks the DeleteDBSnapshot method.
	DeleteDBSnapshotFunc func(in1 *rds.DeleteDBSnapshotInput) (*rds.DeleteDBSnapshotOutput, error)

	// DeleteDBSnapshotRequestFunc mocks the DeleteDBSnapshotRequest method.
	DeleteDBSnapshotRequestFunc func(in1 *rds.DeleteDBSnapshotInput) (*request.Request, *rds.DeleteDBSnapshotOutput)

	// DeleteDBSnapshotWithContextFunc mocks the DeleteDBSnapshotWithContext method.
	DeleteDBSnapshotWithContextFunc func(in1 context.Context, in2 *rds.DeleteDBSnapshotInput, in3 ...request.Option) (*rds.DeleteDBSnapshotOutput, error)

	// DeleteDBSubnetGroupFunc mocks the DeleteDBSubnetGroup method.
	DeleteDBSubnetGroupFunc func(in1 *rds.DeleteDBSubnetGroupInput) (*rds.DeleteDBSubnetGroupOutput, error)

	// DeleteDBSubnetGroupRequestFunc mocks the DeleteDBSubnetGroupRequest method.
	DeleteDBSubnetGroupRequestFunc func(in1 *rds.DeleteDBSubnetGroupInput) (*request.Request, *rds.DeleteDBSubnetGroupOutput)

	// DeleteDBSubnetGroupWithContextFunc mocks the DeleteDBSubnetGroupWithContext method.
	DeleteDBSubnetGroupWithContextFunc func(in1 context.Context, in2 *rds.DeleteDBSubnetGroupInput, in3 ...request.Option) (*rds.DeleteDBSubnetGroupOutput, error)

	// DeleteEventSubscriptionFunc mocks the DeleteEventSubscription method.
	DeleteEventSubscriptionFunc func(in1 *rds.DeleteEventSubscriptionInput) (*rds.DeleteEventSubscriptionOutput, error)

	// DeleteEventSubscriptionRequestFunc mocks the DeleteEventSubscriptionRequest method.
	DeleteEventSubscriptionRequestFunc func(in1 *rds.DeleteEventSubscriptionInput) (*request.Request, *rds.DeleteEventSubscriptionOutput)

	// DeleteEventSubscriptionWithContextFunc mocks the DeleteEventSubscriptionWithContext method.
	DeleteEventSubscriptionWithContextFunc func(in1 context.Context, in2 *rds.DeleteEventSubscriptionInput, in3 ...request.Option) (*rds.DeleteEventSubscriptionOutput, error)

	// DeleteGlobalClusterFunc mocks the DeleteGlobalCluster method.
	DeleteGlobalClusterFunc func(in1 *rds.DeleteGlobalClusterInput) (*rds.DeleteGlobalClusterOutput, error)

	// DeleteGlobalClusterRequestFunc mocks the DeleteGlobalClusterRequest method.
	DeleteGlobalClusterRequestFunc func(in1 *rds.DeleteGlobalClusterInput) (*request.Request, *rds.DeleteGlobalClusterOutput)

	// DeleteGlobalClusterWithContextFunc mocks the DeleteGlobalClusterWithContext method.
	DeleteGlobalClusterWithContextFunc func(in1 context.Context, in2 *rds.DeleteGlobalClusterInput, in3 ...request.Option) (*rds.DeleteGlobalClusterOutput, error)

	// DeleteInstallationMediaFunc mocks the DeleteInstallationMedia method.
	DeleteInstallationMediaFunc func(in1 *rds.DeleteInstallationMediaInput) (*rds.DeleteInstallationMediaOutput, error)

	// DeleteInstallationMediaRequestFunc mocks the DeleteInstallationMediaRequest method.
	DeleteInstallationMediaRequestFunc func(in1 *rds.DeleteInstallationMediaInput) (*request.Request, *rds.DeleteInstallationMediaOutput)

	// DeleteInstallationMediaWithContextFunc mocks the DeleteInstallationMediaWithContext method.
	DeleteInstallationMediaWithContextFunc func(in1 context.Context, in2 *rds.DeleteInstallationMediaInput, in3 ...request.Option) (*rds.DeleteInstallationMediaOutput, error)

	// DeleteOptionGroupFunc mocks the DeleteOptionGroup method.
	DeleteOptionGroupFunc func(in1 *rds.DeleteOptionGroupInput) (*rds.DeleteOptionGroupOutput, error)

	// DeleteOptionGroupRequestFunc mocks the DeleteOptionGroupRequest method.
	DeleteOptionGroupRequestFunc func(in1 *rds.DeleteOptionGroupInput) (*request.Request, *rds.DeleteOptionGroupOutput)

	// DeleteOptionGroupWithContextFunc mocks the DeleteOptionGroupWithContext method.
	DeleteOptionGroupWithContextFunc func(in1 context.Context, in2 *rds.DeleteOptionGroupInput, in3 ...request.Option) (*rds.DeleteOptionGroupOutput, error)

	// DeregisterDBProxyTargetsFunc mocks the DeregisterDBProxyTargets method.
	DeregisterDBProxyTargetsFunc func(in1 *rds.DeregisterDBProxyTargetsInput) (*rds.DeregisterDBProxyTargetsOutput, error)

	// DeregisterDBProxyTargetsRequestFunc mocks the DeregisterDBProxyTargetsRequest method.
	DeregisterDBProxyTargetsRequestFunc func(in1 *rds.DeregisterDBProxyTargetsInput) (*request.Request, *rds.DeregisterDBProxyTargetsOutput)

	// DeregisterDBProxyTargetsWithContextFunc mocks the DeregisterDBProxyTargetsWithContext method.
	DeregisterDBProxyTargetsWithContextFunc func(in1 context.Context, in2 *rds.DeregisterDBProxyTargetsInput, in3 ...request.Option) (*rds.DeregisterDBProxyTargetsOutput, error)

	// DescribeAccountAttributesFunc mocks the DescribeAccountAttributes method.
	DescribeAccountAttributesFunc func(in1 *rds.DescribeAccountAttributesInput) (*rds.DescribeAccountAttributesOutput, error)

	// DescribeAccountAttributesRequestFunc mocks the DescribeAccountAttributesRequest method.
	DescribeAccountAttributesRequestFunc func(in1 *rds.DescribeAccountAttributesInput) (*request.Request, *rds.DescribeAccountAttributesOutput)

	// DescribeAccountAttributesWithContextFunc mocks the DescribeAccountAttributesWithContext method.
	DescribeAccountAttributesWithContextFunc func(in1 context.Context, in2 *rds.DescribeAccountAttributesInput, in3 ...request.Option) (*rds.DescribeAccountAttributesOutput, error)

	// DescribeCertificatesFunc mocks the DescribeCertificates method.
	DescribeCertificatesFunc func(in1 *rds.DescribeCertificatesInput) (*rds.DescribeCertificatesOutput, error)

	// DescribeCertificatesRequestFunc mocks the DescribeCertificatesRequest method.
	DescribeCertificatesRequestFunc func(in1 *rds.DescribeCertificatesInput) (*request.Request, *rds.DescribeCertificatesOutput)

	// DescribeCertificatesWithContextFunc mocks the DescribeCertificatesWithContext method.
	DescribeCertificatesWithContextFunc func(in1 context.Context, in2 *rds.DescribeCertificatesInput, in3 ...request.Option) (*rds.DescribeCertificatesOutput, error)

	// DescribeCustomAvailabilityZonesFunc mocks the DescribeCustomAvailabilityZones method.
	DescribeCustomAvailabilityZonesFunc func(in1 *rds.DescribeCustomAvailabilityZonesInput) (*rds.DescribeCustomAvailabilityZonesOutput, error)

	// DescribeCustomAvailabilityZonesPagesFunc mocks the DescribeCustomAvailabilityZonesPages method.
	DescribeCustomAvailabilityZonesPagesFunc func(in1 *rds.DescribeCustomAvailabilityZonesInput, in2 func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool) error

	// DescribeCustomAvailabilityZonesPagesWithContextFunc mocks the DescribeCustomAvailabilityZonesPagesWithContext method.
	DescribeCustomAvailabilityZonesPagesWithContextFunc func(in1 context.Context, in2 *rds.DescribeCustomAvailabilityZonesInput, in3 func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool, in4 ...request.Option) error

	// DescribeCustomAvailabilityZonesRequestFunc mocks the DescribeCustomAvailabilityZonesRequest method.
	DescribeCustomAvailabilityZonesRequestFunc func(in1 *rds.DescribeCustomAvailabilityZonesInput) (*request.Request, *rds.DescribeCustomAvailabilityZonesOutput)

	// DescribeCustomAvailabilityZonesWithContextFunc mocks the DescribeCustomAvailabilityZonesWithContext method.
	DescribeCustomAvailabilityZonesWithContextFunc func(in1 context.Context, in2 *rds.DescribeCustomAvailabilityZonesInput, in3 ...request.Option) (*rds.DescribeCustomAvailabilityZonesOutput, error)

	// DescribeDBClusterBacktracksFunc mocks the DescribeDBClusterBacktracks method.
	DescribeDBClusterBacktracksFunc func(in1 *rds.DescribeDBClusterBacktracksInput) (*rds.DescribeDBClusterBacktracksOutput, error)

	// DescribeDBClusterBacktracksRequestFunc mocks the DescribeDBClusterBacktracksRequest method.
	DescribeDBClusterBacktracksRequestFunc func(in1 *rds.DescribeDBClusterBacktracksInput) (*request.Request, *rds.DescribeDBClusterBacktracksOutput)

	// DescribeDBClusterBacktracksWithContextFunc mocks the DescribeDBClusterBacktracksWithContext method.
	DescribeDBClusterBacktracksWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBClusterBacktracksInput, in3 ...request.Option) (*rds.DescribeDBClusterBacktracksOutput, error)

	// DescribeDBClusterEndpointsFunc mocks the DescribeDBClusterEndpoints method.
	DescribeDBClusterEndpointsFunc func(in1 *rds.DescribeDBClusterEndpointsInput) (*rds.DescribeDBClusterEndpointsOutput, error)

	// DescribeDBClusterEndpointsRequestFunc mocks the DescribeDBClusterEndpointsRequest method.
	DescribeDBClusterEndpointsRequestFunc func(in1 *rds.DescribeDBClusterEndpointsInput) (*request.Request, *rds.DescribeDBClusterEndpointsOutput)

	// DescribeDBClusterEndpointsWithContextFunc mocks the DescribeDBClusterEndpointsWithContext method.
	DescribeDBClusterEndpointsWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBClusterEndpointsInput, in3 ...request.Option) (*rds.DescribeDBClusterEndpointsOutput, error)

	// DescribeDBClusterParameterGroupsFunc mocks the DescribeDBClusterParameterGroups method.
	DescribeDBClusterParameterGroupsFunc func(in1 *rds.DescribeDBClusterParameterGroupsInput) (*rds.DescribeDBClusterParameterGroupsOutput, error)

	// DescribeDBClusterParameterGroupsRequestFunc mocks the DescribeDBClusterParameterGroupsRequest method.
	DescribeDBClusterParameterGroupsRequestFunc func(in1 *rds.DescribeDBClusterParameterGroupsInput) (*request.Request, *rds.DescribeDBClusterParameterGroupsOutput)

	// DescribeDBClusterParameterGroupsWithContextFunc mocks the DescribeDBClusterParameterGroupsWithContext method.
	DescribeDBClusterParameterGroupsWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBClusterParameterGroupsInput, in3 ...request.Option) (*rds.DescribeDBClusterParameterGroupsOutput, error)

	// DescribeDBClusterParametersFunc mocks the DescribeDBClusterParameters method.
	DescribeDBClusterParametersFunc func(in1 *rds.DescribeDBClusterParametersInput) (*rds.DescribeDBClusterParametersOutput, error)

	// DescribeDBClusterParametersRequestFunc mocks the DescribeDBClusterParametersRequest method.
	DescribeDBClusterParametersRequestFunc func(in1 *rds.DescribeDBClusterParametersInput) (*request.Request, *rds.DescribeDBClusterParametersOutput)

	// DescribeDBClusterParametersWithContextFunc mocks the DescribeDBClusterParametersWithContext method.
	DescribeDBClusterParametersWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBClusterParametersInput, in3 ...request.Option) (*rds.DescribeDBClusterParametersOutput, error)

	// DescribeDBClusterSnapshotAttributesFunc mocks the DescribeDBClusterSnapshotAttributes method.
	DescribeDBClusterSnapshotAttributesFunc func(in1 *rds.DescribeDBClusterSnapshotAttributesInput) (*rds.DescribeDBClusterSnapshotAttributesOutput, error)

	// DescribeDBClusterSnapshotAttributesRequestFunc mocks the DescribeDBClusterSnapshotAttributesRequest method.
	DescribeDBClusterSnapshotAttributesRequestFunc func(in1 *rds.DescribeDBClusterSnapshotAttributesInput) (*request.Request, *rds.DescribeDBClusterSnapshotAttributesOutput)

	// DescribeDBClusterSnapshotAttributesWithContextFunc mocks the DescribeDBClusterSnapshotAttributesWithContext method.
	DescribeDBClusterSnapshotAttributesWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBClusterSnapshotAttributesInput, in3 ...request.Option) (*rds.DescribeDBClusterSnapshotAttributesOutput, error)

	// DescribeDBClusterSnapshotsFunc mocks the DescribeDBClusterSnapshots method.
	DescribeDBClusterSnapshotsFunc func(in1 *rds.DescribeDBClusterSnapshotsInput) (*rds.DescribeDBClusterSnapshotsOutput, error)

	// DescribeDBClusterSnapshotsRequestFunc mocks the DescribeDBClusterSnapshotsRequest method.
	DescribeDBClusterSnapshotsRequestFunc func(in1 *rds.DescribeDBClusterSnapshotsInput) (*request.Request, *rds.DescribeDBClusterSnapshotsOutput)

	// DescribeDBClusterSnapshotsWithContextFunc mocks the DescribeDBClusterSnapshotsWithContext method.
	DescribeDBClusterSnapshotsWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBClusterSnapshotsInput, in3 ...request.Option) (*rds.DescribeDBClusterSnapshotsOutput, error)

	// DescribeDBClustersFunc mocks the DescribeDBClusters method.
	DescribeDBClustersFunc func(in1 *rds.DescribeDBClustersInput) (*rds.DescribeDBClustersOutput, error)

	// DescribeDBClustersPagesFunc mocks the DescribeDBClustersPages method.
	DescribeDBClustersPagesFunc func(in1 *rds.DescribeDBClustersInput, in2 func(*rds.DescribeDBClustersOutput, bool) bool) error

	// DescribeDBClustersPagesWithContextFunc mocks the DescribeDBClustersPagesWithContext method.
	DescribeDBClustersPagesWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBClustersInput, in3 func(*rds.DescribeDBClustersOutput, bool) bool, in4 ...request.Option) error

	// DescribeDBClustersRequestFunc mocks the DescribeDBClustersRequest method.
	DescribeDBClustersRequestFunc func(in1 *rds.DescribeDBClustersInput) (*request.Request, *rds.DescribeDBClustersOutput)

	// DescribeDBClustersWithContextFunc mocks the DescribeDBClustersWithContext method.
	DescribeDBClustersWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBClustersInput, in3 ...request.Option) (*rds.DescribeDBClustersOutput, error)

	// DescribeDBEngineVersionsFunc mocks the DescribeDBEngineVersions method.
	DescribeDBEngineVersionsFunc func(in1 *rds.DescribeDBEngineVersionsInput) (*rds.DescribeDBEngineVersionsOutput, error)

	// DescribeDBEngineVersionsPagesFunc mocks the DescribeDBEngineVersionsPages method.
	DescribeDBEngineVersionsPagesFunc func(in1 *rds.DescribeDBEngineVersionsInput, in2 func(*rds.DescribeDBEngineVersionsOutput, bool) bool) error

	// DescribeDBEngineVersionsPagesWithContextFunc mocks the DescribeDBEngineVersionsPagesWithContext method.
	DescribeDBEngineVersionsPagesWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBEngineVersionsInput, in3 func(*rds.DescribeDBEngineVersionsOutput, bool) bool, in4 ...request.Option) error

	// DescribeDBEngineVersionsRequestFunc mocks the DescribeDBEngineVersionsRequest method.
	DescribeDBEngineVersionsRequestFunc func(in1 *rds.DescribeDBEngineVersionsInput) (*request.Request, *rds.DescribeDBEngineVersionsOutput)

	// DescribeDBEngineVersionsWithContextFunc mocks the DescribeDBEngineVersionsWithContext method.
	DescribeDBEngineVersionsWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBEngineVersionsInput, in3 ...request.Option) (*rds.DescribeDBEngineVersionsOutput, error)

	// DescribeDBInstanceAutomatedBackupsFunc mocks the DescribeDBInstanceAutomatedBackups method.
	DescribeDBInstanceAutomatedBackupsFunc func(in1 *rds.DescribeDBInstanceAutomatedBackupsInput) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error)

	// DescribeDBInstanceAutomatedBackupsPagesFunc mocks the DescribeDBInstanceAutomatedBackupsPages method.
	DescribeDBInstanceAutomatedBackupsPagesFunc func(in1 *rds.DescribeDBInstanceAutomatedBackupsInput, in2 func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool) error

	// DescribeDBInstanceAutomatedBackupsPagesWithContextFunc mocks the DescribeDBInstanceAutomatedBackupsPagesWithContext method.
	DescribeDBInstanceAutomatedBackupsPagesWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBInstanceAutomatedBackupsInput, in3 func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool, in4 ...request.Option) error

	// DescribeDBInstanceAutomatedBackupsRequestFunc mocks the DescribeDBInstanceAutomatedBackupsRequest method.
	DescribeDBInstanceAutomatedBackupsRequestFunc func(in1 *rds.DescribeDBInstanceAutomatedBackupsInput) (*request.Request, *rds.DescribeDBInstanceAutomatedBackupsOutput)

	// DescribeDBInstanceAutomatedBackupsWithContextFunc mocks the DescribeDBInstanceAutomatedBackupsWithContext method.
	DescribeDBInstanceAutomatedBackupsWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBInstanceAutomatedBackupsInput, in3 ...request.Option) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error)

	// DescribeDBInstancesFunc mocks the DescribeDBInstances method.
	DescribeDBInstancesFunc func(in1 *rds.DescribeDBInstancesInput) (*rds.DescribeDBInstancesOutput, error)

	// DescribeDBInstancesPagesFunc mocks the DescribeDBInstancesPages method.
	DescribeDBInstancesPagesFunc func(in1 *rds.DescribeDBInstancesInput, in2 func(*rds.DescribeDBInstancesOutput, bool) bool) error

	// DescribeDBInstancesPagesWithContextFunc mocks the DescribeDBInstancesPagesWithContext method.
	DescribeDBInstancesPagesWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBInstancesInput, in3 func(*rds.DescribeDBInstancesOutput, bool) bool, in4 ...request.Option) error

	// DescribeDBInstancesRequestFunc mocks the DescribeDBInstancesRequest method.
	DescribeDBInstancesRequestFunc func(in1 *rds.DescribeDBInstancesInput) (*request.Request, *rds.DescribeDBInstancesOutput)

	// DescribeDBInstancesWithContextFunc mocks the DescribeDBInstancesWithContext method.
	DescribeDBInstancesWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBInstancesInput, in3 ...request.Option) (*rds.DescribeDBInstancesOutput, error)

	// DescribeDBLogFilesFunc mocks the DescribeDBLogFiles method.
	DescribeDBLogFilesFunc func(in1 *rds.DescribeDBLogFilesInput) (*rds.DescribeDBLogFilesOutput, error)

	// DescribeDBLogFilesPagesFunc mocks the DescribeDBLogFilesPages method.
	DescribeDBLogFilesPagesFunc func(in1 *rds.DescribeDBLogFilesInput, in2 func(*rds.DescribeDBLogFilesOutput, bool) bool) error

	// DescribeDBLogFilesPagesWithContextFunc mocks the DescribeDBLogFilesPagesWithContext method.
	DescribeDBLogFilesPagesWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBLogFilesInput, in3 func(*rds.DescribeDBLogFilesOutput, bool) bool, in4 ...request.Option) error

	// DescribeDBLogFilesRequestFunc mocks the DescribeDBLogFilesRequest method.
	DescribeDBLogFilesRequestFunc func(in1 *rds.DescribeDBLogFilesInput) (*request.Request, *rds.DescribeDBLogFilesOutput)

	// DescribeDBLogFilesWithContextFunc mocks the DescribeDBLogFilesWithContext method.
	DescribeDBLogFilesWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBLogFilesInput, in3 ...request.Option) (*rds.DescribeDBLogFilesOutput, error)

	// DescribeDBParameterGroupsFunc mocks the DescribeDBParameterGroups method.
	DescribeDBParameterGroupsFunc func(in1 *rds.DescribeDBParameterGroupsInput) (*rds.DescribeDBParameterGroupsOutput, error)

	// DescribeDBParameterGroupsPagesFunc mocks the DescribeDBParameterGroupsPages method.
	DescribeDBParameterGroupsPagesFunc func(in1 *rds.DescribeDBParameterGroupsInput, in2 func(*rds.DescribeDBParameterGroupsOutput, bool) bool) error

	// DescribeDBParameterGroupsPagesWithContextFunc mocks the DescribeDBParameterGroupsPagesWithContext method.
	DescribeDBParameterGroupsPagesWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBParameterGroupsInput, in3 func(*rds.DescribeDBParameterGroupsOutput, bool) bool, in4 ...request.Option) error

	// DescribeDBParameterGroupsRequestFunc mocks the DescribeDBParameterGroupsRequest method.
	DescribeDBParameterGroupsRequestFunc func(in1 *rds.DescribeDBParameterGroupsInput) (*request.Request, *rds.DescribeDBParameterGroupsOutput)

	// DescribeDBParameterGroupsWithContextFunc mocks the DescribeDBParameterGroupsWithContext method.
	DescribeDBParameterGroupsWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBParameterGroupsInput, in3 ...request.Option) (*rds.DescribeDBParameterGroupsOutput, error)

	// DescribeDBParametersFunc mocks the DescribeDBParameters method.
	DescribeDBParametersFunc func(in1 *rds.DescribeDBParametersInput) (*rds.DescribeDBParametersOutput, error)

	// DescribeDBParametersPagesFunc mocks the DescribeDBParametersPages method.
	DescribeDBParametersPagesFunc func(in1 *rds.DescribeDBParametersInput, in2 func(*rds.DescribeDBParametersOutput, bool) bool) error

	// DescribeDBParametersPagesWithContextFunc mocks the DescribeDBParametersPagesWithContext method.
	DescribeDBParametersPagesWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBParametersInput, in3 func(*rds.DescribeDBParametersOutput, bool) bool, in4 ...request.Option) error

	// DescribeDBParametersRequestFunc mocks the DescribeDBParametersRequest method.
	DescribeDBParametersRequestFunc func(in1 *rds.DescribeDBParametersInput) (*request.Request, *rds.DescribeDBParametersOutput)

	// DescribeDBParametersWithContextFunc mocks the DescribeDBParametersWithContext method.
	DescribeDBParametersWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBParametersInput, in3 ...request.Option) (*rds.DescribeDBParametersOutput, error)

	// DescribeDBProxiesFunc mocks the DescribeDBProxies method.
	DescribeDBProxiesFunc func(in1 *rds.DescribeDBProxiesInput) (*rds.DescribeDBProxiesOutput, error)

	// DescribeDBProxiesPagesFunc mocks the DescribeDBProxiesPages method.
	DescribeDBProxiesPagesFunc func(in1 *rds.DescribeDBProxiesInput, in2 func(*rds.DescribeDBProxiesOutput, bool) bool) error

	// DescribeDBProxiesPagesWithContextFunc mocks the DescribeDBProxiesPagesWithContext method.
	DescribeDBProxiesPagesWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBProxiesInput, in3 func(*rds.DescribeDBProxiesOutput, bool) bool, in4 ...request.Option) error

	// DescribeDBProxiesRequestFunc mocks the DescribeDBProxiesRequest method.
	DescribeDBProxiesRequestFunc func(in1 *rds.DescribeDBProxiesInput) (*request.Request, *rds.DescribeDBProxiesOutput)

	// DescribeDBProxiesWithContextFunc mocks the DescribeDBProxiesWithContext method.
	DescribeDBProxiesWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBProxiesInput, in3 ...request.Option) (*rds.DescribeDBProxiesOutput, error)

	// DescribeDBProxyTargetGroupsFunc mocks the DescribeDBProxyTargetGroups method.
	DescribeDBProxyTargetGroupsFunc func(in1 *rds.DescribeDBProxyTargetGroupsInput) (*rds.DescribeDBProxyTargetGroupsOutput, error)

	// DescribeDBProxyTargetGroupsPagesFunc mocks the DescribeDBProxyTargetGroupsPages method.
	DescribeDBProxyTargetGroupsPagesFunc func(in1 *rds.DescribeDBProxyTargetGroupsInput, in2 func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool) error

	// DescribeDBProxyTargetGroupsPagesWithContextFunc mocks the DescribeDBProxyTargetGroupsPagesWithContext method.
	DescribeDBProxyTargetGroupsPagesWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBProxyTargetGroupsInput, in3 func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool, in4 ...request.Option) error

	// DescribeDBProxyTargetGroupsRequestFunc mocks the DescribeDBProxyTargetGroupsRequest method.
	DescribeDBProxyTargetGroupsRequestFunc func(in1 *rds.DescribeDBProxyTargetGroupsInput) (*request.Request, *rds.DescribeDBProxyTargetGroupsOutput)

	// DescribeDBProxyTargetGroupsWithContextFunc mocks the DescribeDBProxyTargetGroupsWithContext method.
	DescribeDBProxyTargetGroupsWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBProxyTargetGroupsInput, in3 ...request.Option) (*rds.DescribeDBProxyTargetGroupsOutput, error)

	// DescribeDBProxyTargetsFunc mocks the DescribeDBProxyTargets method.
	DescribeDBProxyTargetsFunc func(in1 *rds.DescribeDBProxyTargetsInput) (*rds.DescribeDBProxyTargetsOutput, error)

	// DescribeDBProxyTargetsPagesFunc mocks the DescribeDBProxyTargetsPages method.
	DescribeDBProxyTargetsPagesFunc func(in1 *rds.DescribeDBProxyTargetsInput, in2 func(*rds.DescribeDBProxyTargetsOutput, bool) bool) error

	// DescribeDBProxyTargetsPagesWithContextFunc mocks the DescribeDBProxyTargetsPagesWithContext method.
	DescribeDBProxyTargetsPagesWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBProxyTargetsInput, in3 func(*rds.DescribeDBProxyTargetsOutput, bool) bool, in4 ...request.Option) error

	// DescribeDBProxyTargetsRequestFunc mocks the DescribeDBProxyTargetsRequest method.
	DescribeDBProxyTargetsRequestFunc func(in1 *rds.DescribeDBProxyTargetsInput) (*request.Request, *rds.DescribeDBProxyTargetsOutput)

	// DescribeDBProxyTargetsWithContextFunc mocks the DescribeDBProxyTargetsWithContext method.
	DescribeDBProxyTargetsWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBProxyTargetsInput, in3 ...request.Option) (*rds.DescribeDBProxyTargetsOutput, error)

	// DescribeDBSecurityGroupsFunc mocks the DescribeDBSecurityGroups method.
	DescribeDBSecurityGroupsFunc func(in1 *rds.DescribeDBSecurityGroupsInput) (*rds.DescribeDBSecurityGroupsOutput, error)

	// DescribeDBSecurityGroupsPagesFunc mocks the DescribeDBSecurityGroupsPages method.
	DescribeDBSecurityGroupsPagesFunc func(in1 *rds.DescribeDBSecurityGroupsInput, in2 func(*rds.DescribeDBSecurityGroupsOutput, bool) bool) error

	// DescribeDBSecurityGroupsPagesWithContextFunc mocks the DescribeDBSecurityGroupsPagesWithContext method.
	DescribeDBSecurityGroupsPagesWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBSecurityGroupsInput, in3 func(*rds.DescribeDBSecurityGroupsOutput, bool) bool, in4 ...request.Option) error

	// DescribeDBSecurityGroupsRequestFunc mocks the DescribeDBSecurityGroupsRequest method.
	DescribeDBSecurityGroupsRequestFunc func(in1 *rds.DescribeDBSecurityGroupsInput) (*request.Request, *rds.DescribeDBSecurityGroupsOutput)

	// DescribeDBSecurityGroupsWithContextFunc mocks the DescribeDBSecurityGroupsWithContext method.
	DescribeDBSecurityGroupsWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBSecurityGroupsInput, in3 ...request.Option) (*rds.DescribeDBSecurityGroupsOutput, error)

	// DescribeDBSnapshotAttributesFunc mocks the DescribeDBSnapshotAttributes method.
	DescribeDBSnapshotAttributesFunc func(in1 *rds.DescribeDBSnapshotAttributesInput) (*rds.DescribeDBSnapshotAttributesOutput, error)

	// DescribeDBSnapshotAttributesRequestFunc mocks the DescribeDBSnapshotAttributesRequest method.
	DescribeDBSnapshotAttributesRequestFunc func(in1 *rds.DescribeDBSnapshotAttributesInput) (*request.Request, *rds.DescribeDBSnapshotAttributesOutput)

	// DescribeDBSnapshotAttributesWithContextFunc mocks the DescribeDBSnapshotAttributesWithContext method.
	DescribeDBSnapshotAttributesWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBSnapshotAttributesInput, in3 ...request.Option) (*rds.DescribeDBSnapshotAttributesOutput, error)

	// DescribeDBSnapshotsFunc mocks the DescribeDBSnapshots method.
	DescribeDBSnapshotsFunc func(in1 *rds.DescribeDBSnapshotsInput) (*rds.DescribeDBSnapshotsOutput, error)

	// DescribeDBSnapshotsPagesFunc mocks the DescribeDBSnapshotsPages method.
	DescribeDBSnapshotsPagesFunc func(in1 *rds.DescribeDBSnapshotsInput, in2 func(*rds.DescribeDBSnapshotsOutput, bool) bool) error

	// DescribeDBSnapshotsPagesWithContextFunc mocks the DescribeDBSnapshotsPagesWithContext method.
	DescribeDBSnapshotsPagesWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBSnapshotsInput, in3 func(*rds.DescribeDBSnapshotsOutput, bool) bool, in4 ...request.Option) error

	// DescribeDBSnapshotsRequestFunc mocks the DescribeDBSnapshotsRequest method.
	DescribeDBSnapshotsRequestFunc func(in1 *rds.DescribeDBSnapshotsInput) (*request.Request, *rds.DescribeDBSnapshotsOutput)

	// DescribeDBSnapshotsWithContextFunc mocks the DescribeDBSnapshotsWithContext method.
	DescribeDBSnapshotsWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBSnapshotsInput, in3 ...request.Option) (*rds.DescribeDBSnapshotsOutput, error)

	// DescribeDBSubnetGroupsFunc mocks the DescribeDBSubnetGroups method.
	DescribeDBSubnetGroupsFunc func(in1 *rds.DescribeDBSubnetGroupsInput) (*rds.DescribeDBSubnetGroupsOutput, error)

	// DescribeDBSubnetGroupsPagesFunc mocks the DescribeDBSubnetGroupsPages method.
	DescribeDBSubnetGroupsPagesFunc func(in1 *rds.DescribeDBSubnetGroupsInput, in2 func(*rds.DescribeDBSubnetGroupsOutput, bool) bool) error

	// DescribeDBSubnetGroupsPagesWithContextFunc mocks the DescribeDBSubnetGroupsPagesWithContext method.
	DescribeDBSubnetGroupsPagesWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBSubnetGroupsInput, in3 func(*rds.DescribeDBSubnetGroupsOutput, bool) bool, in4 ...request.Option) error

	// DescribeDBSubnetGroupsRequestFunc mocks the DescribeDBSubnetGroupsRequest method.
	DescribeDBSubnetGroupsRequestFunc func(in1 *rds.DescribeDBSubnetGroupsInput) (*request.Request, *rds.DescribeDBSubnetGroupsOutput)

	// DescribeDBSubnetGroupsWithContextFunc mocks the DescribeDBSubnetGroupsWithContext method.
	DescribeDBSubnetGroupsWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBSubnetGroupsInput, in3 ...request.Option) (*rds.DescribeDBSubnetGroupsOutput, error)

	// DescribeEngineDefaultClusterParametersFunc mocks the DescribeEngineDefaultClusterParameters method.
	DescribeEngineDefaultClusterParametersFunc func(in1 *rds.DescribeEngineDefaultClusterParametersInput) (*rds.DescribeEngineDefaultClusterParametersOutput, error)

	// DescribeEngineDefaultClusterParametersRequestFunc mocks the DescribeEngineDefaultClusterParametersRequest method.
	DescribeEngineDefaultClusterParametersRequestFunc func(in1 *rds.DescribeEngineDefaultClusterParametersInput) (*request.Request, *rds.DescribeEngineDefaultClusterParametersOutput)

	// DescribeEngineDefaultClusterParametersWithContextFunc mocks the DescribeEngineDefaultClusterParametersWithContext method.
	DescribeEngineDefaultClusterParametersWithContextFunc func(in1 context.Context, in2 *rds.DescribeEngineDefaultClusterParametersInput, in3 ...request.Option) (*rds.DescribeEngineDefaultClusterParametersOutput, error)

	// DescribeEngineDefaultParametersFunc mocks the DescribeEngineDefaultParameters method.
	DescribeEngineDefaultParametersFunc func(in1 *rds.DescribeEngineDefaultParametersInput) (*rds.DescribeEngineDefaultParametersOutput, error)

	// DescribeEngineDefaultParametersPagesFunc mocks the DescribeEngineDefaultParametersPages method.
	DescribeEngineDefaultParametersPagesFunc func(in1 *rds.DescribeEngineDefaultParametersInput, in2 func(*rds.DescribeEngineDefaultParametersOutput, bool) bool) error

	// DescribeEngineDefaultParametersPagesWithContextFunc mocks the DescribeEngineDefaultParametersPagesWithContext method.
	DescribeEngineDefaultParametersPagesWithContextFunc func(in1 context.Context, in2 *rds.DescribeEngineDefaultParametersInput, in3 func(*rds.DescribeEngineDefaultParametersOutput, bool) bool, in4 ...request.Option) error

	// DescribeEngineDefaultParametersRequestFunc mocks the DescribeEngineDefaultParametersRequest method.
	DescribeEngineDefaultParametersRequestFunc func(in1 *rds.DescribeEngineDefaultParametersInput) (*request.Request, *rds.DescribeEngineDefaultParametersOutput)

	// DescribeEngineDefaultParametersWithContextFunc mocks the DescribeEngineDefaultParametersWithContext method.
	DescribeEngineDefaultParametersWithContextFunc func(in1 context.Context, in2 *rds.DescribeEngineDefaultParametersInput, in3 ...request.Option) (*rds.DescribeEngineDefaultParametersOutput, error)

	// DescribeEventCategoriesFunc mocks the DescribeEventCategories method.
	DescribeEventCategoriesFunc func(in1 *rds.DescribeEventCategoriesInput) (*rds.DescribeEventCategoriesOutput, error)

	// DescribeEventCategoriesRequestFunc mocks the DescribeEventCategoriesRequest method.
	DescribeEventCategoriesRequestFunc func(in1 *rds.DescribeEventCategoriesInput) (*request.Request, *rds.DescribeEventCategoriesOutput)

	// DescribeEventCategoriesWithContextFunc mocks the DescribeEventCategoriesWithContext method.
	DescribeEventCategoriesWithContextFunc func(in1 context.Context, in2 *rds.DescribeEventCategoriesInput, in3 ...request.Option) (*rds.DescribeEventCategoriesOutput, error)

	// DescribeEventSubscriptionsFunc mocks the DescribeEventSubscriptions method.
	DescribeEventSubscriptionsFunc func(in1 *rds.DescribeEventSubscriptionsInput) (*rds.DescribeEventSubscriptionsOutput, error)

	// DescribeEventSubscriptionsPagesFunc mocks the DescribeEventSubscriptionsPages method.
	DescribeEventSubscriptionsPagesFunc func(in1 *rds.DescribeEventSubscriptionsInput, in2 func(*rds.DescribeEventSubscriptionsOutput, bool) bool) error

	// DescribeEventSubscriptionsPagesWithContextFunc mocks the DescribeEventSubscriptionsPagesWithContext method.
	DescribeEventSubscriptionsPagesWithContextFunc func(in1 context.Context, in2 *rds.DescribeEventSubscriptionsInput, in3 func(*rds.DescribeEventSubscriptionsOutput, bool) bool, in4 ...request.Option) error

	// DescribeEventSubscriptionsRequestFunc mocks the DescribeEventSubscriptionsRequest method.
	DescribeEventSubscriptionsRequestFunc func(in1 *rds.DescribeEventSubscriptionsInput) (*request.Request, *rds.DescribeEventSubscriptionsOutput)

	// DescribeEventSubscriptionsWithContextFunc mocks the DescribeEventSubscriptionsWithContext method.
	DescribeEventSubscriptionsWithContextFunc func(in1 context.Context, in2 *rds.DescribeEventSubscriptionsInput, in3 ...request.Option) (*rds.DescribeEventSubscriptionsOutput, error)

	// DescribeEventsFunc mocks the DescribeEvents method.
	DescribeEventsFunc func(in1 *rds.DescribeEventsInput) (*rds.DescribeEventsOutput, error)

	// DescribeEventsPagesFunc mocks the DescribeEventsPages method.
	DescribeEventsPagesFunc func(in1 *rds.DescribeEventsInput, in2 func(*rds.DescribeEventsOutput, bool) bool) error

	// DescribeEventsPagesWithContextFunc mocks the DescribeEventsPagesWithContext method.
	DescribeEventsPagesWithContextFunc func(in1 context.Context, in2 *rds.DescribeEventsInput, in3 func(*rds.DescribeEventsOutput, bool) bool, in4 ...request.Option) error

	// DescribeEventsRequestFunc mocks the DescribeEventsRequest method.
	DescribeEventsRequestFunc func(in1 *rds.DescribeEventsInput) (*request.Request, *rds.DescribeEventsOutput)

	// DescribeEventsWithContextFunc mocks the DescribeEventsWithContext method.
	DescribeEventsWithContextFunc func(in1 context.Context, in2 *rds.DescribeEventsInput, in3 ...request.Option) (*rds.DescribeEventsOutput, error)

	// DescribeExportTasksFunc mocks the DescribeExportTasks method.
	DescribeExportTasksFunc func(in1 *rds.DescribeExportTasksInput) (*rds.DescribeExportTasksOutput, error)

	// DescribeExportTasksPagesFunc mocks the DescribeExportTasksPages method.
	DescribeExportTasksPagesFunc func(in1 *rds.DescribeExportTasksInput, in2 func(*rds.DescribeExportTasksOutput, bool) bool) error

	// DescribeExportTasksPagesWithContextFunc mocks the DescribeExportTasksPagesWithContext method.
	DescribeExportTasksPagesWithContextFunc func(in1 context.Context, in2 *rds.DescribeExportTasksInput, in3 func(*rds.DescribeExportTasksOutput, bool) bool, in4 ...request.Option) error

	// DescribeExportTasksRequestFunc mocks the DescribeExportTasksRequest method.
	DescribeExportTasksRequestFunc func(in1 *rds.DescribeExportTasksInput) (*request.Request, *rds.DescribeExportTasksOutput)

	// DescribeExportTasksWithContextFunc mocks the DescribeExportTasksWithContext method.
	DescribeExportTasksWithContextFunc func(in1 context.Context, in2 *rds.DescribeExportTasksInput, in3 ...request.Option) (*rds.DescribeExportTasksOutput, error)

	// DescribeGlobalClustersFunc mocks the DescribeGlobalClusters method.
	DescribeGlobalClustersFunc func(in1 *rds.DescribeGlobalClustersInput) (*rds.DescribeGlobalClustersOutput, error)

	// DescribeGlobalClustersPagesFunc mocks the DescribeGlobalClustersPages method.
	DescribeGlobalClustersPagesFunc func(in1 *rds.DescribeGlobalClustersInput, in2 func(*rds.DescribeGlobalClustersOutput, bool) bool) error

	// DescribeGlobalClustersPagesWithContextFunc mocks the DescribeGlobalClustersPagesWithContext method.
	DescribeGlobalClustersPagesWithContextFunc func(in1 context.Context, in2 *rds.DescribeGlobalClustersInput, in3 func(*rds.DescribeGlobalClustersOutput, bool) bool, in4 ...request.Option) error

	// DescribeGlobalClustersRequestFunc mocks the DescribeGlobalClustersRequest method.
	DescribeGlobalClustersRequestFunc func(in1 *rds.DescribeGlobalClustersInput) (*request.Request, *rds.DescribeGlobalClustersOutput)

	// DescribeGlobalClustersWithContextFunc mocks the DescribeGlobalClustersWithContext method.
	DescribeGlobalClustersWithContextFunc func(in1 context.Context, in2 *rds.DescribeGlobalClustersInput, in3 ...request.Option) (*rds.DescribeGlobalClustersOutput, error)

	// DescribeInstallationMediaFunc mocks the DescribeInstallationMedia method.
	DescribeInstallationMediaFunc func(in1 *rds.DescribeInstallationMediaInput) (*rds.DescribeInstallationMediaOutput, error)

	// DescribeInstallationMediaPagesFunc mocks the DescribeInstallationMediaPages method.
	DescribeInstallationMediaPagesFunc func(in1 *rds.DescribeInstallationMediaInput, in2 func(*rds.DescribeInstallationMediaOutput, bool) bool) error

	// DescribeInstallationMediaPagesWithContextFunc mocks the DescribeInstallationMediaPagesWithContext method.
	DescribeInstallationMediaPagesWithContextFunc func(in1 context.Context, in2 *rds.DescribeInstallationMediaInput, in3 func(*rds.DescribeInstallationMediaOutput, bool) bool, in4 ...request.Option) error

	// DescribeInstallationMediaRequestFunc mocks the DescribeInstallationMediaRequest method.
	DescribeInstallationMediaRequestFunc func(in1 *rds.DescribeInstallationMediaInput) (*request.Request, *rds.DescribeInstallationMediaOutput)

	// DescribeInstallationMediaWithContextFunc mocks the DescribeInstallationMediaWithContext method.
	DescribeInstallationMediaWithContextFunc func(in1 context.Context, in2 *rds.DescribeInstallationMediaInput, in3 ...request.Option) (*rds.DescribeInstallationMediaOutput, error)

	// DescribeOptionGroupOptionsFunc mocks the DescribeOptionGroupOptions method.
	DescribeOptionGroupOptionsFunc func(in1 *rds.DescribeOptionGroupOptionsInput) (*rds.DescribeOptionGroupOptionsOutput, error)

	// DescribeOptionGroupOptionsPagesFunc mocks the DescribeOptionGroupOptionsPages method.
	DescribeOptionGroupOptionsPagesFunc func(in1 *rds.DescribeOptionGroupOptionsInput, in2 func(*rds.DescribeOptionGroupOptionsOutput, bool) bool) error

	// DescribeOptionGroupOptionsPagesWithContextFunc mocks the DescribeOptionGroupOptionsPagesWithContext method.
	DescribeOptionGroupOptionsPagesWithContextFunc func(in1 context.Context, in2 *rds.DescribeOptionGroupOptionsInput, in3 func(*rds.DescribeOptionGroupOptionsOutput, bool) bool, in4 ...request.Option) error

	// DescribeOptionGroupOptionsRequestFunc mocks the DescribeOptionGroupOptionsRequest method.
	DescribeOptionGroupOptionsRequestFunc func(in1 *rds.DescribeOptionGroupOptionsInput) (*request.Request, *rds.DescribeOptionGroupOptionsOutput)

	// DescribeOptionGroupOptionsWithContextFunc mocks the DescribeOptionGroupOptionsWithContext method.
	DescribeOptionGroupOptionsWithContextFunc func(in1 context.Context, in2 *rds.DescribeOptionGroupOptionsInput, in3 ...request.Option) (*rds.DescribeOptionGroupOptionsOutput, error)

	// DescribeOptionGroupsFunc mocks the DescribeOptionGroups method.
	DescribeOptionGroupsFunc func(in1 *rds.DescribeOptionGroupsInput) (*rds.DescribeOptionGroupsOutput, error)

	// DescribeOptionGroupsPagesFunc mocks the DescribeOptionGroupsPages method.
	DescribeOptionGroupsPagesFunc func(in1 *rds.DescribeOptionGroupsInput, in2 func(*rds.DescribeOptionGroupsOutput, bool) bool) error

	// DescribeOptionGroupsPagesWithContextFunc mocks the DescribeOptionGroupsPagesWithContext method.
	DescribeOptionGroupsPagesWithContextFunc func(in1 context.Context, in2 *rds.DescribeOptionGroupsInput, in3 func(*rds.DescribeOptionGroupsOutput, bool) bool, in4 ...request.Option) error

	// DescribeOptionGroupsRequestFunc mocks the DescribeOptionGroupsRequest method.
	DescribeOptionGroupsRequestFunc func(in1 *rds.DescribeOptionGroupsInput) (*request.Request, *rds.DescribeOptionGroupsOutput)

	// DescribeOptionGroupsWithContextFunc mocks the DescribeOptionGroupsWithContext method.
	DescribeOptionGroupsWithContextFunc func(in1 context.Context, in2 *rds.DescribeOptionGroupsInput, in3 ...request.Option) (*rds.DescribeOptionGroupsOutput, error)

	// DescribeOrderableDBInstanceOptionsFunc mocks the DescribeOrderableDBInstanceOptions method.
	DescribeOrderableDBInstanceOptionsFunc func(in1 *rds.DescribeOrderableDBInstanceOptionsInput) (*rds.DescribeOrderableDBInstanceOptionsOutput, error)

	// DescribeOrderableDBInstanceOptionsPagesFunc mocks the DescribeOrderableDBInstanceOptionsPages method.
	DescribeOrderableDBInstanceOptionsPagesFunc func(in1 *rds.DescribeOrderableDBInstanceOptionsInput, in2 func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool) error

	// DescribeOrderableDBInstanceOptionsPagesWithContextFunc mocks the DescribeOrderableDBInstanceOptionsPagesWithContext method.
	DescribeOrderableDBInstanceOptionsPagesWithContextFunc func(in1 context.Context, in2 *rds.DescribeOrderableDBInstanceOptionsInput, in3 func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool, in4 ...request.Option) error

	// DescribeOrderableDBInstanceOptionsRequestFunc mocks the DescribeOrderableDBInstanceOptionsRequest method.
	DescribeOrderableDBInstanceOptionsRequestFunc func(in1 *rds.DescribeOrderableDBInstanceOptionsInput) (*request.Request, *rds.DescribeOrderableDBInstanceOptionsOutput)

	// DescribeOrderableDBInstanceOptionsWithContextFunc mocks the DescribeOrderableDBInstanceOptionsWithContext method.
	DescribeOrderableDBInstanceOptionsWithContextFunc func(in1 context.Context, in2 *rds.DescribeOrderableDBInstanceOptionsInput, in3 ...request.Option) (*rds.DescribeOrderableDBInstanceOptionsOutput, error)

	// DescribePendingMaintenanceActionsFunc mocks the DescribePendingMaintenanceActions method.
	DescribePendingMaintenanceActionsFunc func(in1 *rds.DescribePendingMaintenanceActionsInput) (*rds.DescribePendingMaintenanceActionsOutput, error)

	// DescribePendingMaintenanceActionsRequestFunc mocks the DescribePendingMaintenanceActionsRequest method.
	DescribePendingMaintenanceActionsRequestFunc func(in1 *rds.DescribePendingMaintenanceActionsInput) (*request.Request, *rds.DescribePendingMaintenanceActionsOutput)

	// DescribePendingMaintenanceActionsWithContextFunc mocks the DescribePendingMaintenanceActionsWithContext method.
	DescribePendingMaintenanceActionsWithContextFunc func(in1 context.Context, in2 *rds.DescribePendingMaintenanceActionsInput, in3 ...request.Option) (*rds.DescribePendingMaintenanceActionsOutput, error)

	// DescribeReservedDBInstancesFunc mocks the DescribeReservedDBInstances method.
	DescribeReservedDBInstancesFunc func(in1 *rds.DescribeReservedDBInstancesInput) (*rds.DescribeReservedDBInstancesOutput, error)

	// DescribeReservedDBInstancesOfferingsFunc mocks the DescribeReservedDBInstancesOfferings method.
	DescribeReservedDBInstancesOfferingsFunc func(in1 *rds.DescribeReservedDBInstancesOfferingsInput) (*rds.DescribeReservedDBInstancesOfferingsOutput, error)

	// DescribeReservedDBInstancesOfferingsPagesFunc mocks the DescribeReservedDBInstancesOfferingsPages method.
	DescribeReservedDBInstancesOfferingsPagesFunc func(in1 *rds.DescribeReservedDBInstancesOfferingsInput, in2 func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool) error

	// DescribeReservedDBInstancesOfferingsPagesWithContextFunc mocks the DescribeReservedDBInstancesOfferingsPagesWithContext method.
	DescribeReservedDBInstancesOfferingsPagesWithContextFunc func(in1 context.Context, in2 *rds.DescribeReservedDBInstancesOfferingsInput, in3 func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool, in4 ...request.Option) error

	// DescribeReservedDBInstancesOfferingsRequestFunc mocks the DescribeReservedDBInstancesOfferingsRequest method.
	DescribeReservedDBInstancesOfferingsRequestFunc func(in1 *rds.DescribeReservedDBInstancesOfferingsInput) (*request.Request, *rds.DescribeReservedDBInstancesOfferingsOutput)

	// DescribeReservedDBInstancesOfferingsWithContextFunc mocks the DescribeReservedDBInstancesOfferingsWithContext method.
	DescribeReservedDBInstancesOfferingsWithContextFunc func(in1 context.Context, in2 *rds.DescribeReservedDBInstancesOfferingsInput, in3 ...request.Option) (*rds.DescribeReservedDBInstancesOfferingsOutput, error)

	// DescribeReservedDBInstancesPagesFunc mocks the DescribeReservedDBInstancesPages method.
	DescribeReservedDBInstancesPagesFunc func(in1 *rds.DescribeReservedDBInstancesInput, in2 func(*rds.DescribeReservedDBInstancesOutput, bool) bool) error

	// DescribeReservedDBInstancesPagesWithContextFunc mocks the DescribeReservedDBInstancesPagesWithContext method.
	DescribeReservedDBInstancesPagesWithContextFunc func(in1 context.Context, in2 *rds.DescribeReservedDBInstancesInput, in3 func(*rds.DescribeReservedDBInstancesOutput, bool) bool, in4 ...request.Option) error

	// DescribeReservedDBInstancesRequestFunc mocks the DescribeReservedDBInstancesRequest method.
	DescribeReservedDBInstancesRequestFunc func(in1 *rds.DescribeReservedDBInstancesInput) (*request.Request, *rds.DescribeReservedDBInstancesOutput)

	// DescribeReservedDBInstancesWithContextFunc mocks the DescribeReservedDBInstancesWithContext method.
	DescribeReservedDBInstancesWithContextFunc func(in1 context.Context, in2 *rds.DescribeReservedDBInstancesInput, in3 ...request.Option) (*rds.DescribeReservedDBInstancesOutput, error)

	// DescribeSourceRegionsFunc mocks the DescribeSourceRegions method.
	DescribeSourceRegionsFunc func(in1 *rds.DescribeSourceRegionsInput) (*rds.DescribeSourceRegionsOutput, error)

	// DescribeSourceRegionsRequestFunc mocks the DescribeSourceRegionsRequest method.
	DescribeSourceRegionsRequestFunc func(in1 *rds.DescribeSourceRegionsInput) (*request.Request, *rds.DescribeSourceRegionsOutput)

	// DescribeSourceRegionsWithContextFunc mocks the DescribeSourceRegionsWithContext method.
	DescribeSourceRegionsWithContextFunc func(in1 context.Context, in2 *rds.DescribeSourceRegionsInput, in3 ...request.Option) (*rds.DescribeSourceRegionsOutput, error)

	// DescribeValidDBInstanceModificationsFunc mocks the DescribeValidDBInstanceModifications method.
	DescribeValidDBInstanceModificationsFunc func(in1 *rds.DescribeValidDBInstanceModificationsInput) (*rds.DescribeValidDBInstanceModificationsOutput, error)

	// DescribeValidDBInstanceModificationsRequestFunc mocks the DescribeValidDBInstanceModificationsRequest method.
	DescribeValidDBInstanceModificationsRequestFunc func(in1 *rds.DescribeValidDBInstanceModificationsInput) (*request.Request, *rds.DescribeValidDBInstanceModificationsOutput)

	// DescribeValidDBInstanceModificationsWithContextFunc mocks the DescribeValidDBInstanceModificationsWithContext method.
	DescribeValidDBInstanceModificationsWithContextFunc func(in1 context.Context, in2 *rds.DescribeValidDBInstanceModificationsInput, in3 ...request.Option) (*rds.DescribeValidDBInstanceModificationsOutput, error)

	// DownloadDBLogFilePortionFunc mocks the DownloadDBLogFilePortion method.
	DownloadDBLogFilePortionFunc func(in1 *rds.DownloadDBLogFilePortionInput) (*rds.DownloadDBLogFilePortionOutput, error)

	// DownloadDBLogFilePortionPagesFunc mocks the DownloadDBLogFilePortionPages method.
	DownloadDBLogFilePortionPagesFunc func(in1 *rds.DownloadDBLogFilePortionInput, in2 func(*rds.DownloadDBLogFilePortionOutput, bool) bool) error

	// DownloadDBLogFilePortionPagesWithContextFunc mocks the DownloadDBLogFilePortionPagesWithContext method.
	DownloadDBLogFilePortionPagesWithContextFunc func(in1 context.Context, in2 *rds.DownloadDBLogFilePortionInput, in3 func(*rds.DownloadDBLogFilePortionOutput, bool) bool, in4 ...request.Option) error

	// DownloadDBLogFilePortionRequestFunc mocks the DownloadDBLogFilePortionRequest method.
	DownloadDBLogFilePortionRequestFunc func(in1 *rds.DownloadDBLogFilePortionInput) (*request.Request, *rds.DownloadDBLogFilePortionOutput)

	// DownloadDBLogFilePortionWithContextFunc mocks the DownloadDBLogFilePortionWithContext method.
	DownloadDBLogFilePortionWithContextFunc func(in1 context.Context, in2 *rds.DownloadDBLogFilePortionInput, in3 ...request.Option) (*rds.DownloadDBLogFilePortionOutput, error)

	// FailoverDBClusterFunc mocks the FailoverDBCluster method.
	FailoverDBClusterFunc func(in1 *rds.FailoverDBClusterInput) (*rds.FailoverDBClusterOutput, error)

	// FailoverDBClusterRequestFunc mocks the FailoverDBClusterRequest method.
	FailoverDBClusterRequestFunc func(in1 *rds.FailoverDBClusterInput) (*request.Request, *rds.FailoverDBClusterOutput)

	// FailoverDBClusterWithContextFunc mocks the FailoverDBClusterWithContext method.
	FailoverDBClusterWithContextFunc func(in1 context.Context, in2 *rds.FailoverDBClusterInput, in3 ...request.Option) (*rds.FailoverDBClusterOutput, error)

	// ImportInstallationMediaFunc mocks the ImportInstallationMedia method.
	ImportInstallationMediaFunc func(in1 *rds.ImportInstallationMediaInput) (*rds.ImportInstallationMediaOutput, error)

	// ImportInstallationMediaRequestFunc mocks the ImportInstallationMediaRequest method.
	ImportInstallationMediaRequestFunc func(in1 *rds.ImportInstallationMediaInput) (*request.Request, *rds.ImportInstallationMediaOutput)

	// ImportInstallationMediaWithContextFunc mocks the ImportInstallationMediaWithContext method.
	ImportInstallationMediaWithContextFunc func(in1 context.Context, in2 *rds.ImportInstallationMediaInput, in3 ...request.Option) (*rds.ImportInstallationMediaOutput, error)

	// ListTagsForResourceFunc mocks the ListTagsForResource method.
	ListTagsForResourceFunc func(in1 *rds.ListTagsForResourceInput) (*rds.ListTagsForResourceOutput, error)

	// ListTagsForResourceRequestFunc mocks the ListTagsForResourceRequest method.
	ListTagsForResourceRequestFunc func(in1 *rds.ListTagsForResourceInput) (*request.Request, *rds.ListTagsForResourceOutput)

	// ListTagsForResourceWithContextFunc mocks the ListTagsForResourceWithContext method.
	ListTagsForResourceWithContextFunc func(in1 context.Context, in2 *rds.ListTagsForResourceInput, in3 ...request.Option) (*rds.ListTagsForResourceOutput, error)

	// ModifyCertificatesFunc mocks the ModifyCertificates method.
	ModifyCertificatesFunc func(in1 *rds.ModifyCertificatesInput) (*rds.ModifyCertificatesOutput, error)

	// ModifyCertificatesRequestFunc mocks the ModifyCertificatesRequest method.
	ModifyCertificatesRequestFunc func(in1 *rds.ModifyCertificatesInput) (*request.Request, *rds.ModifyCertificatesOutput)

	// ModifyCertificatesWithContextFunc mocks the ModifyCertificatesWithContext method.
	ModifyCertificatesWithContextFunc func(in1 context.Context, in2 *rds.ModifyCertificatesInput, in3 ...request.Option) (*rds.ModifyCertificatesOutput, error)

	// ModifyCurrentDBClusterCapacityFunc mocks the ModifyCurrentDBClusterCapacity method.
	ModifyCurrentDBClusterCapacityFunc func(in1 *rds.ModifyCurrentDBClusterCapacityInput) (*rds.ModifyCurrentDBClusterCapacityOutput, error)

	// ModifyCurrentDBClusterCapacityRequestFunc mocks the ModifyCurrentDBClusterCapacityRequest method.
	ModifyCurrentDBClusterCapacityRequestFunc func(in1 *rds.ModifyCurrentDBClusterCapacityInput) (*request.Request, *rds.ModifyCurrentDBClusterCapacityOutput)

	// ModifyCurrentDBClusterCapacityWithContextFunc mocks the ModifyCurrentDBClusterCapacityWithContext method.
	ModifyCurrentDBClusterCapacityWithContextFunc func(in1 context.Context, in2 *rds.ModifyCurrentDBClusterCapacityInput, in3 ...request.Option) (*rds.ModifyCurrentDBClusterCapacityOutput, error)

	// ModifyDBClusterFunc mocks the ModifyDBCluster method.
	ModifyDBClusterFunc func(in1 *rds.ModifyDBClusterInput) (*rds.ModifyDBClusterOutput, error)

	// ModifyDBClusterEndpointFunc mocks the ModifyDBClusterEndpoint method.
	ModifyDBClusterEndpointFunc func(in1 *rds.ModifyDBClusterEndpointInput) (*rds.ModifyDBClusterEndpointOutput, error)

	// ModifyDBClusterEndpointRequestFunc mocks the ModifyDBClusterEndpointRequest method.
	ModifyDBClusterEndpointRequestFunc func(in1 *rds.ModifyDBClusterEndpointInput) (*request.Request, *rds.ModifyDBClusterEndpointOutput)

	// ModifyDBClusterEndpointWithContextFunc mocks the ModifyDBClusterEndpointWithContext method.
	ModifyDBClusterEndpointWithContextFunc func(in1 context.Context, in2 *rds.ModifyDBClusterEndpointInput, in3 ...request.Option) (*rds.ModifyDBClusterEndpointOutput, error)

	// ModifyDBClusterParameterGroupFunc mocks the ModifyDBClusterParameterGroup method.
	ModifyDBClusterParameterGroupFunc func(in1 *rds.ModifyDBClusterParameterGroupInput) (*rds.DBClusterParameterGroupNameMessage, error)

	// ModifyDBClusterParameterGroupRequestFunc mocks the ModifyDBClusterParameterGroupRequest method.
	ModifyDBClusterParameterGroupRequestFunc func(in1 *rds.ModifyDBClusterParameterGroupInput) (*request.Request, *rds.DBClusterParameterGroupNameMessage)

	// ModifyDBClusterParameterGroupWithContextFunc mocks the ModifyDBClusterParameterGroupWithContext method.
	ModifyDBClusterParameterGroupWithContextFunc func(in1 context.Context, in2 *rds.ModifyDBClusterParameterGroupInput, in3 ...request.Option) (*rds.DBClusterParameterGroupNameMessage, error)

	// ModifyDBClusterRequestFunc mocks the ModifyDBClusterRequest method.
	ModifyDBClusterRequestFunc func(in1 *rds.ModifyDBClusterInput) (*request.Request, *rds.ModifyDBClusterOutput)

	// ModifyDBClusterSnapshotAttributeFunc mocks the ModifyDBClusterSnapshotAttribute method.
	ModifyDBClusterSnapshotAttributeFunc func(in1 *rds.ModifyDBClusterSnapshotAttributeInput) (*rds.ModifyDBClusterSnapshotAttributeOutput, error)

	// ModifyDBClusterSnapshotAttributeRequestFunc mocks the ModifyDBClusterSnapshotAttributeRequest method.
	ModifyDBClusterSnapshotAttributeRequestFunc func(in1 *rds.ModifyDBClusterSnapshotAttributeInput) (*request.Request, *rds.ModifyDBClusterSnapshotAttributeOutput)

	// ModifyDBClusterSnapshotAttributeWithContextFunc mocks the ModifyDBClusterSnapshotAttributeWithContext method.
	ModifyDBClusterSnapshotAttributeWithContextFunc func(in1 context.Context, in2 *rds.ModifyDBClusterSnapshotAttributeInput, in3 ...request.Option) (*rds.ModifyDBClusterSnapshotAttributeOutput, error)

	// ModifyDBClusterWithContextFunc mocks the ModifyDBClusterWithContext method.
	ModifyDBClusterWithContextFunc func(in1 context.Context, in2 *rds.ModifyDBClusterInput, in3 ...request.Option) (*rds.ModifyDBClusterOutput, error)

	// ModifyDBInstanceFunc mocks the ModifyDBInstance method.
	ModifyDBInstanceFunc func(in1 *rds.ModifyDBInstanceInput) (*rds.ModifyDBInstanceOutput, error)

	// ModifyDBInstanceRequestFunc mocks the ModifyDBInstanceRequest method.
	ModifyDBInstanceRequestFunc func(in1 *rds.ModifyDBInstanceInput) (*request.Request, *rds.ModifyDBInstanceOutput)

	// ModifyDBInstanceWithContextFunc mocks the ModifyDBInstanceWithContext method.
	ModifyDBInstanceWithContextFunc func(in1 context.Context, in2 *rds.ModifyDBInstanceInput, in3 ...request.Option) (*rds.ModifyDBInstanceOutput, error)

	// ModifyDBParameterGroupFunc mocks the ModifyDBParameterGroup method.
	ModifyDBParameterGroupFunc func(in1 *rds.ModifyDBParameterGroupInput) (*rds.DBParameterGroupNameMessage, error)

	// ModifyDBParameterGroupRequestFunc mocks the ModifyDBParameterGroupRequest method.
	ModifyDBParameterGroupRequestFunc func(in1 *rds.ModifyDBParameterGroupInput) (*request.Request, *rds.DBParameterGroupNameMessage)

	// ModifyDBParameterGroupWithContextFunc mocks the ModifyDBParameterGroupWithContext method.
	ModifyDBParameterGroupWithContextFunc func(in1 context.Context, in2 *rds.ModifyDBParameterGroupInput, in3 ...request.Option) (*rds.DBParameterGroupNameMessage, error)

	// ModifyDBProxyFunc mocks the ModifyDBProxy method.
	ModifyDBProxyFunc func(in1 *rds.ModifyDBProxyInput) (*rds.ModifyDBProxyOutput, error)

	// ModifyDBProxyRequestFunc mocks the ModifyDBProxyRequest method.
	ModifyDBProxyRequestFunc func(in1 *rds.ModifyDBProxyInput) (*request.Request, *rds.ModifyDBProxyOutput)

	// ModifyDBProxyTargetGroupFunc mocks the ModifyDBProxyTargetGroup method.
	ModifyDBProxyTargetGroupFunc func(in1 *rds.ModifyDBProxyTargetGroupInput) (*rds.ModifyDBProxyTargetGroupOutput, error)

	// ModifyDBProxyTargetGroupRequestFunc mocks the ModifyDBProxyTargetGroupRequest method.
	ModifyDBProxyTargetGroupRequestFunc func(in1 *rds.ModifyDBProxyTargetGroupInput) (*request.Request, *rds.ModifyDBProxyTargetGroupOutput)

	// ModifyDBProxyTargetGroupWithContextFunc mocks the ModifyDBProxyTargetGroupWithContext method.
	ModifyDBProxyTargetGroupWithContextFunc func(in1 context.Context, in2 *rds.ModifyDBProxyTargetGroupInput, in3 ...request.Option) (*rds.ModifyDBProxyTargetGroupOutput, error)

	// ModifyDBProxyWithContextFunc mocks the ModifyDBProxyWithContext method.
	ModifyDBProxyWithContextFunc func(in1 context.Context, in2 *rds.ModifyDBProxyInput, in3 ...request.Option) (*rds.ModifyDBProxyOutput, error)

	// ModifyDBSnapshotFunc mocks the ModifyDBSnapshot method.
	ModifyDBSnapshotFunc func(in1 *rds.ModifyDBSnapshotInput) (*rds.ModifyDBSnapshotOutput, error)

	// ModifyDBSnapshotAttributeFunc mocks the ModifyDBSnapshotAttribute method.
	ModifyDBSnapshotAttributeFunc func(in1 *rds.ModifyDBSnapshotAttributeInput) (*rds.ModifyDBSnapshotAttributeOutput, error)

	// ModifyDBSnapshotAttributeRequestFunc mocks the ModifyDBSnapshotAttributeRequest method.
	ModifyDBSnapshotAttributeRequestFunc func(in1 *rds.ModifyDBSnapshotAttributeInput) (*request.Request, *rds.ModifyDBSnapshotAttributeOutput)

	// ModifyDBSnapshotAttributeWithContextFunc mocks the ModifyDBSnapshotAttributeWithContext method.
	ModifyDBSnapshotAttributeWithContextFunc func(in1 context.Context, in2 *rds.ModifyDBSnapshotAttributeInput, in3 ...request.Option) (*rds.ModifyDBSnapshotAttributeOutput, error)

	// ModifyDBSnapshotRequestFunc mocks the ModifyDBSnapshotRequest method.
	ModifyDBSnapshotRequestFunc func(in1 *rds.ModifyDBSnapshotInput) (*request.Request, *rds.ModifyDBSnapshotOutput)

	// ModifyDBSnapshotWithContextFunc mocks the ModifyDBSnapshotWithContext method.
	ModifyDBSnapshotWithContextFunc func(in1 context.Context, in2 *rds.ModifyDBSnapshotInput, in3 ...request.Option) (*rds.ModifyDBSnapshotOutput, error)

	// ModifyDBSubnetGroupFunc mocks the ModifyDBSubnetGroup method.
	ModifyDBSubnetGroupFunc func(in1 *rds.ModifyDBSubnetGroupInput) (*rds.ModifyDBSubnetGroupOutput, error)

	// ModifyDBSubnetGroupRequestFunc mocks the ModifyDBSubnetGroupRequest method.
	ModifyDBSubnetGroupRequestFunc func(in1 *rds.ModifyDBSubnetGroupInput) (*request.Request, *rds.ModifyDBSubnetGroupOutput)

	// ModifyDBSubnetGroupWithContextFunc mocks the ModifyDBSubnetGroupWithContext method.
	ModifyDBSubnetGroupWithContextFunc func(in1 context.Context, in2 *rds.ModifyDBSubnetGroupInput, in3 ...request.Option) (*rds.ModifyDBSubnetGroupOutput, error)

	// ModifyEventSubscriptionFunc mocks the ModifyEventSubscription method.
	ModifyEventSubscriptionFunc func(in1 *rds.ModifyEventSubscriptionInput) (*rds.ModifyEventSubscriptionOutput, error)

	// ModifyEventSubscriptionRequestFunc mocks the ModifyEventSubscriptionRequest method.
	ModifyEventSubscriptionRequestFunc func(in1 *rds.ModifyEventSubscriptionInput) (*request.Request, *rds.ModifyEventSubscriptionOutput)

	// ModifyEventSubscriptionWithContextFunc mocks the ModifyEventSubscriptionWithContext method.
	ModifyEventSubscriptionWithContextFunc func(in1 context.Context, in2 *rds.ModifyEventSubscriptionInput, in3 ...request.Option) (*rds.ModifyEventSubscriptionOutput, error)

	// ModifyGlobalClusterFunc mocks the ModifyGlobalCluster method.
	ModifyGlobalClusterFunc func(in1 *rds.ModifyGlobalClusterInput) (*rds.ModifyGlobalClusterOutput, error)

	// ModifyGlobalClusterRequestFunc mocks the ModifyGlobalClusterRequest method.
	ModifyGlobalClusterRequestFunc func(in1 *rds.ModifyGlobalClusterInput) (*request.Request, *rds.ModifyGlobalClusterOutput)

	// ModifyGlobalClusterWithContextFunc mocks the ModifyGlobalClusterWithContext method.
	ModifyGlobalClusterWithContextFunc func(in1 context.Context, in2 *rds.ModifyGlobalClusterInput, in3 ...request.Option) (*rds.ModifyGlobalClusterOutput, error)

	// ModifyOptionGroupFunc mocks the ModifyOptionGroup method.
	ModifyOptionGroupFunc func(in1 *rds.ModifyOptionGroupInput) (*rds.ModifyOptionGroupOutput, error)

	// ModifyOptionGroupRequestFunc mocks the ModifyOptionGroupRequest method.
	ModifyOptionGroupRequestFunc func(in1 *rds.ModifyOptionGroupInput) (*request.Request, *rds.ModifyOptionGroupOutput)

	// ModifyOptionGroupWithContextFunc mocks the ModifyOptionGroupWithContext method.
	ModifyOptionGroupWithContextFunc func(in1 context.Context, in2 *rds.ModifyOptionGroupInput, in3 ...request.Option) (*rds.ModifyOptionGroupOutput, error)

	// PromoteReadReplicaFunc mocks the PromoteReadReplica method.
	PromoteReadReplicaFunc func(in1 *rds.PromoteReadReplicaInput) (*rds.PromoteReadReplicaOutput, error)

	// PromoteReadReplicaDBClusterFunc mocks the PromoteReadReplicaDBCluster method.
	PromoteReadReplicaDBClusterFunc func(in1 *rds.PromoteReadReplicaDBClusterInput) (*rds.PromoteReadReplicaDBClusterOutput, error)

	// PromoteReadReplicaDBClusterRequestFunc mocks the PromoteReadReplicaDBClusterRequest method.
	PromoteReadReplicaDBClusterRequestFunc func(in1 *rds.PromoteReadReplicaDBClusterInput) (*request.Request, *rds.PromoteReadReplicaDBClusterOutput)

	// PromoteReadReplicaDBClusterWithContextFunc mocks the PromoteReadReplicaDBClusterWithContext method.
	PromoteReadReplicaDBClusterWithContextFunc func(in1 context.Context, in2 *rds.PromoteReadReplicaDBClusterInput, in3 ...request.Option) (*rds.PromoteReadReplicaDBClusterOutput, error)

	// PromoteReadReplicaRequestFunc mocks the PromoteReadReplicaRequest method.
	PromoteReadReplicaRequestFunc func(in1 *rds.PromoteReadReplicaInput) (*request.Request, *rds.PromoteReadReplicaOutput)

	// PromoteReadReplicaWithContextFunc mocks the PromoteReadReplicaWithContext method.
	PromoteReadReplicaWithContextFunc func(in1 context.Context, in2 *rds.PromoteReadReplicaInput, in3 ...request.Option) (*rds.PromoteReadReplicaOutput, error)

	// PurchaseReservedDBInstancesOfferingFunc mocks the PurchaseReservedDBInstancesOffering method.
	PurchaseReservedDBInstancesOfferingFunc func(in1 *rds.PurchaseReservedDBInstancesOfferingInput) (*rds.PurchaseReservedDBInstancesOfferingOutput, error)

	// PurchaseReservedDBInstancesOfferingRequestFunc mocks the PurchaseReservedDBInstancesOfferingRequest method.
	PurchaseReservedDBInstancesOfferingRequestFunc func(in1 *rds.PurchaseReservedDBInstancesOfferingInput) (*request.Request, *rds.PurchaseReservedDBInstancesOfferingOutput)

	// PurchaseReservedDBInstancesOfferingWithContextFunc mocks the PurchaseReservedDBInstancesOfferingWithContext method.
	PurchaseReservedDBInstancesOfferingWithContextFunc func(in1 context.Context, in2 *rds.PurchaseReservedDBInstancesOfferingInput, in3 ...request.Option) (*rds.PurchaseReservedDBInstancesOfferingOutput, error)

	// RebootDBInstanceFunc mocks the RebootDBInstance method.
	RebootDBInstanceFunc func(in1 *rds.RebootDBInstanceInput) (*rds.RebootDBInstanceOutput, error)

	// RebootDBInstanceRequestFunc mocks the RebootDBInstanceRequest method.
	RebootDBInstanceRequestFunc func(in1 *rds.RebootDBInstanceInput) (*request.Request, *rds.RebootDBInstanceOutput)

	// RebootDBInstanceWithContextFunc mocks the RebootDBInstanceWithContext method.
	RebootDBInstanceWithContextFunc func(in1 context.Context, in2 *rds.RebootDBInstanceInput, in3 ...request.Option) (*rds.RebootDBInstanceOutput, error)

	// RegisterDBProxyTargetsFunc mocks the RegisterDBProxyTargets method.
	RegisterDBProxyTargetsFunc func(in1 *rds.RegisterDBProxyTargetsInput) (*rds.RegisterDBProxyTargetsOutput, error)

	// RegisterDBProxyTargetsRequestFunc mocks the RegisterDBProxyTargetsRequest method.
	RegisterDBProxyTargetsRequestFunc func(in1 *rds.RegisterDBProxyTargetsInput) (*request.Request, *rds.RegisterDBProxyTargetsOutput)

	// RegisterDBProxyTargetsWithContextFunc mocks the RegisterDBProxyTargetsWithContext method.
	RegisterDBProxyTargetsWithContextFunc func(in1 context.Context, in2 *rds.RegisterDBProxyTargetsInput, in3 ...request.Option) (*rds.RegisterDBProxyTargetsOutput, error)

	// RemoveFromGlobalClusterFunc mocks the RemoveFromGlobalCluster method.
	RemoveFromGlobalClusterFunc func(in1 *rds.RemoveFromGlobalClusterInput) (*rds.RemoveFromGlobalClusterOutput, error)

	// RemoveFromGlobalClusterRequestFunc mocks the RemoveFromGlobalClusterRequest method.
	RemoveFromGlobalClusterRequestFunc func(in1 *rds.RemoveFromGlobalClusterInput) (*request.Request, *rds.RemoveFromGlobalClusterOutput)

	// RemoveFromGlobalClusterWithContextFunc mocks the RemoveFromGlobalClusterWithContext method.
	RemoveFromGlobalClusterWithContextFunc func(in1 context.Context, in2 *rds.RemoveFromGlobalClusterInput, in3 ...request.Option) (*rds.RemoveFromGlobalClusterOutput, error)

	// RemoveRoleFromDBClusterFunc mocks the RemoveRoleFromDBCluster method.
	RemoveRoleFromDBClusterFunc func(in1 *rds.RemoveRoleFromDBClusterInput) (*rds.RemoveRoleFromDBClusterOutput, error)

	// RemoveRoleFromDBClusterRequestFunc mocks the RemoveRoleFromDBClusterRequest method.
	RemoveRoleFromDBClusterRequestFunc func(in1 *rds.RemoveRoleFromDBClusterInput) (*request.Request, *rds.RemoveRoleFromDBClusterOutput)

	// RemoveRoleFromDBClusterWithContextFunc mocks the RemoveRoleFromDBClusterWithContext method.
	RemoveRoleFromDBClusterWithContextFunc func(in1 context.Context, in2 *rds.RemoveRoleFromDBClusterInput, in3 ...request.Option) (*rds.RemoveRoleFromDBClusterOutput, error)

	// RemoveRoleFromDBInstanceFunc mocks the RemoveRoleFromDBInstance method.
	RemoveRoleFromDBInstanceFunc func(in1 *rds.RemoveRoleFromDBInstanceInput) (*rds.RemoveRoleFromDBInstanceOutput, error)

	// RemoveRoleFromDBInstanceRequestFunc mocks the RemoveRoleFromDBInstanceRequest method.
	RemoveRoleFromDBInstanceRequestFunc func(in1 *rds.RemoveRoleFromDBInstanceInput) (*request.Request, *rds.RemoveRoleFromDBInstanceOutput)

	// RemoveRoleFromDBInstanceWithContextFunc mocks the RemoveRoleFromDBInstanceWithContext method.
	RemoveRoleFromDBInstanceWithContextFunc func(in1 context.Context, in2 *rds.RemoveRoleFromDBInstanceInput, in3 ...request.Option) (*rds.RemoveRoleFromDBInstanceOutput, error)

	// RemoveSourceIdentifierFromSubscriptionFunc mocks the RemoveSourceIdentifierFromSubscription method.
	RemoveSourceIdentifierFromSubscriptionFunc func(in1 *rds.RemoveSourceIdentifierFromSubscriptionInput) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error)

	// RemoveSourceIdentifierFromSubscriptionRequestFunc mocks the RemoveSourceIdentifierFromSubscriptionRequest method.
	RemoveSourceIdentifierFromSubscriptionRequestFunc func(in1 *rds.RemoveSourceIdentifierFromSubscriptionInput) (*request.Request, *rds.RemoveSourceIdentifierFromSubscriptionOutput)

	// RemoveSourceIdentifierFromSubscriptionWithContextFunc mocks the RemoveSourceIdentifierFromSubscriptionWithContext method.
	RemoveSourceIdentifierFromSubscriptionWithContextFunc func(in1 context.Context, in2 *rds.RemoveSourceIdentifierFromSubscriptionInput, in3 ...request.Option) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error)

	// RemoveTagsFromResourceFunc mocks the RemoveTagsFromResource method.
	RemoveTagsFromResourceFunc func(in1 *rds.RemoveTagsFromResourceInput) (*rds.RemoveTagsFromResourceOutput, error)

	// RemoveTagsFromResourceRequestFunc mocks the RemoveTagsFromResourceRequest method.
	RemoveTagsFromResourceRequestFunc func(in1 *rds.RemoveTagsFromResourceInput) (*request.Request, *rds.RemoveTagsFromResourceOutput)

	// RemoveTagsFromResourceWithContextFunc mocks the RemoveTagsFromResourceWithContext method.
	RemoveTagsFromResourceWithContextFunc func(in1 context.Context, in2 *rds.RemoveTagsFromResourceInput, in3 ...request.Option) (*rds.RemoveTagsFromResourceOutput, error)

	// ResetDBClusterParameterGroupFunc mocks the ResetDBClusterParameterGroup method.
	ResetDBClusterParameterGroupFunc func(in1 *rds.ResetDBClusterParameterGroupInput) (*rds.DBClusterParameterGroupNameMessage, error)

	// ResetDBClusterParameterGroupRequestFunc mocks the ResetDBClusterParameterGroupRequest method.
	ResetDBClusterParameterGroupRequestFunc func(in1 *rds.ResetDBClusterParameterGroupInput) (*request.Request, *rds.DBClusterParameterGroupNameMessage)

	// ResetDBClusterParameterGroupWithContextFunc mocks the ResetDBClusterParameterGroupWithContext method.
	ResetDBClusterParameterGroupWithContextFunc func(in1 context.Context, in2 *rds.ResetDBClusterParameterGroupInput, in3 ...request.Option) (*rds.DBClusterParameterGroupNameMessage, error)

	// ResetDBParameterGroupFunc mocks the ResetDBParameterGroup method.
	ResetDBParameterGroupFunc func(in1 *rds.ResetDBParameterGroupInput) (*rds.DBParameterGroupNameMessage, error)

	// ResetDBParameterGroupRequestFunc mocks the ResetDBParameterGroupRequest method.
	ResetDBParameterGroupRequestFunc func(in1 *rds.ResetDBParameterGroupInput) (*request.Request, *rds.DBParameterGroupNameMessage)

	// ResetDBParameterGroupWithContextFunc mocks the ResetDBParameterGroupWithContext method.
	ResetDBParameterGroupWithContextFunc func(in1 context.Context, in2 *rds.ResetDBParameterGroupInput, in3 ...request.Option) (*rds.DBParameterGroupNameMessage, error)

	// RestoreDBClusterFromS3Func mocks the RestoreDBClusterFromS3 method.
	RestoreDBClusterFromS3Func func(in1 *rds.RestoreDBClusterFromS3Input) (*rds.RestoreDBClusterFromS3Output, error)

	// RestoreDBClusterFromS3RequestFunc mocks the RestoreDBClusterFromS3Request method.
	RestoreDBClusterFromS3RequestFunc func(in1 *rds.RestoreDBClusterFromS3Input) (*request.Request, *rds.RestoreDBClusterFromS3Output)

	// RestoreDBClusterFromS3WithContextFunc mocks the RestoreDBClusterFromS3WithContext method.
	RestoreDBClusterFromS3WithContextFunc func(in1 context.Context, in2 *rds.RestoreDBClusterFromS3Input, in3 ...request.Option) (*rds.RestoreDBClusterFromS3Output, error)

	// RestoreDBClusterFromSnapshotFunc mocks the RestoreDBClusterFromSnapshot method.
	RestoreDBClusterFromSnapshotFunc func(in1 *rds.RestoreDBClusterFromSnapshotInput) (*rds.RestoreDBClusterFromSnapshotOutput, error)

	// RestoreDBClusterFromSnapshotRequestFunc mocks the RestoreDBClusterFromSnapshotRequest method.
	RestoreDBClusterFromSnapshotRequestFunc func(in1 *rds.RestoreDBClusterFromSnapshotInput) (*request.Request, *rds.RestoreDBClusterFromSnapshotOutput)

	// RestoreDBClusterFromSnapshotWithContextFunc mocks the RestoreDBClusterFromSnapshotWithContext method.
	RestoreDBClusterFromSnapshotWithContextFunc func(in1 context.Context, in2 *rds.RestoreDBClusterFromSnapshotInput, in3 ...request.Option) (*rds.RestoreDBClusterFromSnapshotOutput, error)

	// RestoreDBClusterToPointInTimeFunc mocks the RestoreDBClusterToPointInTime method.
	RestoreDBClusterToPointInTimeFunc func(in1 *rds.RestoreDBClusterToPointInTimeInput) (*rds.RestoreDBClusterToPointInTimeOutput, error)

	// RestoreDBClusterToPointInTimeRequestFunc mocks the RestoreDBClusterToPointInTimeRequest method.
	RestoreDBClusterToPointInTimeRequestFunc func(in1 *rds.RestoreDBClusterToPointInTimeInput) (*request.Request, *rds.RestoreDBClusterToPointInTimeOutput)

	// RestoreDBClusterToPointInTimeWithContextFunc mocks the RestoreDBClusterToPointInTimeWithContext method.
	RestoreDBClusterToPointInTimeWithContextFunc func(in1 context.Context, in2 *rds.RestoreDBClusterToPointInTimeInput, in3 ...request.Option) (*rds.RestoreDBClusterToPointInTimeOutput, error)

	// RestoreDBInstanceFromDBSnapshotFunc mocks the RestoreDBInstanceFromDBSnapshot method.
	RestoreDBInstanceFromDBSnapshotFunc func(in1 *rds.RestoreDBInstanceFromDBSnapshotInput) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error)

	// RestoreDBInstanceFromDBSnapshotRequestFunc mocks the RestoreDBInstanceFromDBSnapshotRequest method.
	RestoreDBInstanceFromDBSnapshotRequestFunc func(in1 *rds.RestoreDBInstanceFromDBSnapshotInput) (*request.Request, *rds.RestoreDBInstanceFromDBSnapshotOutput)

	// RestoreDBInstanceFromDBSnapshotWithContextFunc mocks the RestoreDBInstanceFromDBSnapshotWithContext method.
	RestoreDBInstanceFromDBSnapshotWithContextFunc func(in1 context.Context, in2 *rds.RestoreDBInstanceFromDBSnapshotInput, in3 ...request.Option) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error)

	// RestoreDBInstanceFromS3Func mocks the RestoreDBInstanceFromS3 method.
	RestoreDBInstanceFromS3Func func(in1 *rds.RestoreDBInstanceFromS3Input) (*rds.RestoreDBInstanceFromS3Output, error)

	// RestoreDBInstanceFromS3RequestFunc mocks the RestoreDBInstanceFromS3Request method.
	RestoreDBInstanceFromS3RequestFunc func(in1 *rds.RestoreDBInstanceFromS3Input) (*request.Request, *rds.RestoreDBInstanceFromS3Output)

	// RestoreDBInstanceFromS3WithContextFunc mocks the RestoreDBInstanceFromS3WithContext method.
	RestoreDBInstanceFromS3WithContextFunc func(in1 context.Context, in2 *rds.RestoreDBInstanceFromS3Input, in3 ...request.Option) (*rds.RestoreDBInstanceFromS3Output, error)

	// RestoreDBInstanceToPointInTimeFunc mocks the RestoreDBInstanceToPointInTime method.
	RestoreDBInstanceToPointInTimeFunc func(in1 *rds.RestoreDBInstanceToPointInTimeInput) (*rds.RestoreDBInstanceToPointInTimeOutput, error)

	// RestoreDBInstanceToPointInTimeRequestFunc mocks the RestoreDBInstanceToPointInTimeRequest method.
	RestoreDBInstanceToPointInTimeRequestFunc func(in1 *rds.RestoreDBInstanceToPointInTimeInput) (*request.Request, *rds.RestoreDBInstanceToPointInTimeOutput)

	// RestoreDBInstanceToPointInTimeWithContextFunc mocks the RestoreDBInstanceToPointInTimeWithContext method.
	RestoreDBInstanceToPointInTimeWithContextFunc func(in1 context.Context, in2 *rds.RestoreDBInstanceToPointInTimeInput, in3 ...request.Option) (*rds.RestoreDBInstanceToPointInTimeOutput, error)

	// RevokeDBSecurityGroupIngressFunc mocks the RevokeDBSecurityGroupIngress method.
	RevokeDBSecurityGroupIngressFunc func(in1 *rds.RevokeDBSecurityGroupIngressInput) (*rds.RevokeDBSecurityGroupIngressOutput, error)

	// RevokeDBSecurityGroupIngressRequestFunc mocks the RevokeDBSecurityGroupIngressRequest method.
	RevokeDBSecurityGroupIngressRequestFunc func(in1 *rds.RevokeDBSecurityGroupIngressInput) (*request.Request, *rds.RevokeDBSecurityGroupIngressOutput)

	// RevokeDBSecurityGroupIngressWithContextFunc mocks the RevokeDBSecurityGroupIngressWithContext method.
	RevokeDBSecurityGroupIngressWithContextFunc func(in1 context.Context, in2 *rds.RevokeDBSecurityGroupIngressInput, in3 ...request.Option) (*rds.RevokeDBSecurityGroupIngressOutput, error)

	// StartActivityStreamFunc mocks the StartActivityStream method.
	StartActivityStreamFunc func(in1 *rds.StartActivityStreamInput) (*rds.StartActivityStreamOutput, error)

	// StartActivityStreamRequestFunc mocks the StartActivityStreamRequest method.
	StartActivityStreamRequestFunc func(in1 *rds.StartActivityStreamInput) (*request.Request, *rds.StartActivityStreamOutput)

	// StartActivityStreamWithContextFunc mocks the StartActivityStreamWithContext method.
	StartActivityStreamWithContextFunc func(in1 context.Context, in2 *rds.StartActivityStreamInput, in3 ...request.Option) (*rds.StartActivityStreamOutput, error)

	// StartDBClusterFunc mocks the StartDBCluster method.
	StartDBClusterFunc func(in1 *rds.StartDBClusterInput) (*rds.StartDBClusterOutput, error)

	// StartDBClusterRequestFunc mocks the StartDBClusterRequest method.
	StartDBClusterRequestFunc func(in1 *rds.StartDBClusterInput) (*request.Request, *rds.StartDBClusterOutput)

	// StartDBClusterWithContextFunc mocks the StartDBClusterWithContext method.
	StartDBClusterWithContextFunc func(in1 context.Context, in2 *rds.StartDBClusterInput, in3 ...request.Option) (*rds.StartDBClusterOutput, error)

	// StartDBInstanceFunc mocks the StartDBInstance method.
	StartDBInstanceFunc func(in1 *rds.StartDBInstanceInput) (*rds.StartDBInstanceOutput, error)

	// StartDBInstanceRequestFunc mocks the StartDBInstanceRequest method.
	StartDBInstanceRequestFunc func(in1 *rds.StartDBInstanceInput) (*request.Request, *rds.StartDBInstanceOutput)

	// StartDBInstanceWithContextFunc mocks the StartDBInstanceWithContext method.
	StartDBInstanceWithContextFunc func(in1 context.Context, in2 *rds.StartDBInstanceInput, in3 ...request.Option) (*rds.StartDBInstanceOutput, error)

	// StartExportTaskFunc mocks the StartExportTask method.
	StartExportTaskFunc func(in1 *rds.StartExportTaskInput) (*rds.StartExportTaskOutput, error)

	// StartExportTaskRequestFunc mocks the StartExportTaskRequest method.
	StartExportTaskRequestFunc func(in1 *rds.StartExportTaskInput) (*request.Request, *rds.StartExportTaskOutput)

	// StartExportTaskWithContextFunc mocks the StartExportTaskWithContext method.
	StartExportTaskWithContextFunc func(in1 context.Context, in2 *rds.StartExportTaskInput, in3 ...request.Option) (*rds.StartExportTaskOutput, error)

	// StopActivityStreamFunc mocks the StopActivityStream method.
	StopActivityStreamFunc func(in1 *rds.StopActivityStreamInput) (*rds.StopActivityStreamOutput, error)

	// StopActivityStreamRequestFunc mocks the StopActivityStreamRequest method.
	StopActivityStreamRequestFunc func(in1 *rds.StopActivityStreamInput) (*request.Request, *rds.StopActivityStreamOutput)

	// StopActivityStreamWithContextFunc mocks the StopActivityStreamWithContext method.
	StopActivityStreamWithContextFunc func(in1 context.Context, in2 *rds.StopActivityStreamInput, in3 ...request.Option) (*rds.StopActivityStreamOutput, error)

	// StopDBClusterFunc mocks the StopDBCluster method.
	StopDBClusterFunc func(in1 *rds.StopDBClusterInput) (*rds.StopDBClusterOutput, error)

	// StopDBClusterRequestFunc mocks the StopDBClusterRequest method.
	StopDBClusterRequestFunc func(in1 *rds.StopDBClusterInput) (*request.Request, *rds.StopDBClusterOutput)

	// StopDBClusterWithContextFunc mocks the StopDBClusterWithContext method.
	StopDBClusterWithContextFunc func(in1 context.Context, in2 *rds.StopDBClusterInput, in3 ...request.Option) (*rds.StopDBClusterOutput, error)

	// StopDBInstanceFunc mocks the StopDBInstance method.
	StopDBInstanceFunc func(in1 *rds.StopDBInstanceInput) (*rds.StopDBInstanceOutput, error)

	// StopDBInstanceRequestFunc mocks the StopDBInstanceRequest method.
	StopDBInstanceRequestFunc func(in1 *rds.StopDBInstanceInput) (*request.Request, *rds.StopDBInstanceOutput)

	// StopDBInstanceWithContextFunc mocks the StopDBInstanceWithContext method.
	StopDBInstanceWithContextFunc func(in1 context.Context, in2 *rds.StopDBInstanceInput, in3 ...request.Option) (*rds.StopDBInstanceOutput, error)

	// WaitUntilDBClusterSnapshotAvailableFunc mocks the WaitUntilDBClusterSnapshotAvailable method.
	WaitUntilDBClusterSnapshotAvailableFunc func(in1 *rds.DescribeDBClusterSnapshotsInput) error

	// WaitUntilDBClusterSnapshotAvailableWithContextFunc mocks the WaitUntilDBClusterSnapshotAvailableWithContext method.
	WaitUntilDBClusterSnapshotAvailableWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBClusterSnapshotsInput, in3 ...request.WaiterOption) error

	// WaitUntilDBClusterSnapshotDeletedFunc mocks the WaitUntilDBClusterSnapshotDeleted method.
	WaitUntilDBClusterSnapshotDeletedFunc func(in1 *rds.DescribeDBClusterSnapshotsInput) error

	// WaitUntilDBClusterSnapshotDeletedWithContextFunc mocks the WaitUntilDBClusterSnapshotDeletedWithContext method.
	WaitUntilDBClusterSnapshotDeletedWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBClusterSnapshotsInput, in3 ...request.WaiterOption) error

	// WaitUntilDBInstanceAvailableFunc mocks the WaitUntilDBInstanceAvailable method.
	WaitUntilDBInstanceAvailableFunc func(in1 *rds.DescribeDBInstancesInput) error

	// WaitUntilDBInstanceAvailableWithContextFunc mocks the WaitUntilDBInstanceAvailableWithContext method.
	WaitUntilDBInstanceAvailableWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBInstancesInput, in3 ...request.WaiterOption) error

	// WaitUntilDBInstanceDeletedFunc mocks the WaitUntilDBInstanceDeleted method.
	WaitUntilDBInstanceDeletedFunc func(in1 *rds.DescribeDBInstancesInput) error

	// WaitUntilDBInstanceDeletedWithContextFunc mocks the WaitUntilDBInstanceDeletedWithContext method.
	WaitUntilDBInstanceDeletedWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBInstancesInput, in3 ...request.WaiterOption) error

	// WaitUntilDBSnapshotAvailableFunc mocks the WaitUntilDBSnapshotAvailable method.
	WaitUntilDBSnapshotAvailableFunc func(in1 *rds.DescribeDBSnapshotsInput) error

	// WaitUntilDBSnapshotAvailableWithContextFunc mocks the WaitUntilDBSnapshotAvailableWithContext method.
	WaitUntilDBSnapshotAvailableWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBSnapshotsInput, in3 ...request.WaiterOption) error

	// WaitUntilDBSnapshotDeletedFunc mocks the WaitUntilDBSnapshotDeleted method.
	WaitUntilDBSnapshotDeletedFunc func(in1 *rds.DescribeDBSnapshotsInput) error

	// WaitUntilDBSnapshotDeletedWithContextFunc mocks the WaitUntilDBSnapshotDeletedWithContext method.
	WaitUntilDBSnapshotDeletedWithContextFunc func(in1 context.Context, in2 *rds.DescribeDBSnapshotsInput, in3 ...request.WaiterOption) error

	// calls tracks calls to the methods.
	calls struct {
		// AddRoleToDBCluster holds details about calls to the AddRoleToDBCluster method.
		AddRoleToDBCluster []struct {
			// In1 is the in1 argument value.
			In1 *rds.AddRoleToDBClusterInput
		}
		// AddRoleToDBClusterRequest holds details about calls to the AddRoleToDBClusterRequest method.
		AddRoleToDBClusterRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.AddRoleToDBClusterInput
		}
		// AddRoleToDBClusterWithContext holds details about calls to the AddRoleToDBClusterWithContext method.
		AddRoleToDBClusterWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.AddRoleToDBClusterInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AddRoleToDBInstance holds details about calls to the AddRoleToDBInstance method.
		AddRoleToDBInstance []struct {
			// In1 is the in1 argument value.
			In1 *rds.AddRoleToDBInstanceInput
		}
		// AddRoleToDBInstanceRequest holds details about calls to the AddRoleToDBInstanceRequest method.
		AddRoleToDBInstanceRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.AddRoleToDBInstanceInput
		}
		// AddRoleToDBInstanceWithContext holds details about calls to the AddRoleToDBInstanceWithContext method.
		AddRoleToDBInstanceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.AddRoleToDBInstanceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AddSourceIdentifierToSubscription holds details about calls to the AddSourceIdentifierToSubscription method.
		AddSourceIdentifierToSubscription []struct {
			// In1 is the in1 argument value.
			In1 *rds.AddSourceIdentifierToSubscriptionInput
		}
		// AddSourceIdentifierToSubscriptionRequest holds details about calls to the AddSourceIdentifierToSubscriptionRequest method.
		AddSourceIdentifierToSubscriptionRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.AddSourceIdentifierToSubscriptionInput
		}
		// AddSourceIdentifierToSubscriptionWithContext holds details about calls to the AddSourceIdentifierToSubscriptionWithContext method.
		AddSourceIdentifierToSubscriptionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.AddSourceIdentifierToSubscriptionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AddTagsToResource holds details about calls to the AddTagsToResource method.
		AddTagsToResource []struct {
			// In1 is the in1 argument value.
			In1 *rds.AddTagsToResourceInput
		}
		// AddTagsToResourceRequest holds details about calls to the AddTagsToResourceRequest method.
		AddTagsToResourceRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.AddTagsToResourceInput
		}
		// AddTagsToResourceWithContext holds details about calls to the AddTagsToResourceWithContext method.
		AddTagsToResourceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.AddTagsToResourceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ApplyPendingMaintenanceAction holds details about calls to the ApplyPendingMaintenanceAction method.
		ApplyPendingMaintenanceAction []struct {
			// In1 is the in1 argument value.
			In1 *rds.ApplyPendingMaintenanceActionInput
		}
		// ApplyPendingMaintenanceActionRequest holds details about calls to the ApplyPendingMaintenanceActionRequest method.
		ApplyPendingMaintenanceActionRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.ApplyPendingMaintenanceActionInput
		}
		// ApplyPendingMaintenanceActionWithContext holds details about calls to the ApplyPendingMaintenanceActionWithContext method.
		ApplyPendingMaintenanceActionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.ApplyPendingMaintenanceActionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// AuthorizeDBSecurityGroupIngress holds details about calls to the AuthorizeDBSecurityGroupIngress method.
		AuthorizeDBSecurityGroupIngress []struct {
			// In1 is the in1 argument value.
			In1 *rds.AuthorizeDBSecurityGroupIngressInput
		}
		// AuthorizeDBSecurityGroupIngressRequest holds details about calls to the AuthorizeDBSecurityGroupIngressRequest method.
		AuthorizeDBSecurityGroupIngressRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.AuthorizeDBSecurityGroupIngressInput
		}
		// AuthorizeDBSecurityGroupIngressWithContext holds details about calls to the AuthorizeDBSecurityGroupIngressWithContext method.
		AuthorizeDBSecurityGroupIngressWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.AuthorizeDBSecurityGroupIngressInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// BacktrackDBCluster holds details about calls to the BacktrackDBCluster method.
		BacktrackDBCluster []struct {
			// In1 is the in1 argument value.
			In1 *rds.BacktrackDBClusterInput
		}
		// BacktrackDBClusterRequest holds details about calls to the BacktrackDBClusterRequest method.
		BacktrackDBClusterRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.BacktrackDBClusterInput
		}
		// BacktrackDBClusterWithContext holds details about calls to the BacktrackDBClusterWithContext method.
		BacktrackDBClusterWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.BacktrackDBClusterInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CancelExportTask holds details about calls to the CancelExportTask method.
		CancelExportTask []struct {
			// In1 is the in1 argument value.
			In1 *rds.CancelExportTaskInput
		}
		// CancelExportTaskRequest holds details about calls to the CancelExportTaskRequest method.
		CancelExportTaskRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.CancelExportTaskInput
		}
		// CancelExportTaskWithContext holds details about calls to the CancelExportTaskWithContext method.
		CancelExportTaskWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.CancelExportTaskInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CopyDBClusterParameterGroup holds details about calls to the CopyDBClusterParameterGroup method.
		CopyDBClusterParameterGroup []struct {
			// In1 is the in1 argument value.
			In1 *rds.CopyDBClusterParameterGroupInput
		}
		// CopyDBClusterParameterGroupRequest holds details about calls to the CopyDBClusterParameterGroupRequest method.
		CopyDBClusterParameterGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.CopyDBClusterParameterGroupInput
		}
		// CopyDBClusterParameterGroupWithContext holds details about calls to the CopyDBClusterParameterGroupWithContext method.
		CopyDBClusterParameterGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.CopyDBClusterParameterGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CopyDBClusterSnapshot holds details about calls to the CopyDBClusterSnapshot method.
		CopyDBClusterSnapshot []struct {
			// In1 is the in1 argument value.
			In1 *rds.CopyDBClusterSnapshotInput
		}
		// CopyDBClusterSnapshotRequest holds details about calls to the CopyDBClusterSnapshotRequest method.
		CopyDBClusterSnapshotRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.CopyDBClusterSnapshotInput
		}
		// CopyDBClusterSnapshotWithContext holds details about calls to the CopyDBClusterSnapshotWithContext method.
		CopyDBClusterSnapshotWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.CopyDBClusterSnapshotInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CopyDBParameterGroup holds details about calls to the CopyDBParameterGroup method.
		CopyDBParameterGroup []struct {
			// In1 is the in1 argument value.
			In1 *rds.CopyDBParameterGroupInput
		}
		// CopyDBParameterGroupRequest holds details about calls to the CopyDBParameterGroupRequest method.
		CopyDBParameterGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.CopyDBParameterGroupInput
		}
		// CopyDBParameterGroupWithContext holds details about calls to the CopyDBParameterGroupWithContext method.
		CopyDBParameterGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.CopyDBParameterGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CopyDBSnapshot holds details about calls to the CopyDBSnapshot method.
		CopyDBSnapshot []struct {
			// In1 is the in1 argument value.
			In1 *rds.CopyDBSnapshotInput
		}
		// CopyDBSnapshotRequest holds details about calls to the CopyDBSnapshotRequest method.
		CopyDBSnapshotRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.CopyDBSnapshotInput
		}
		// CopyDBSnapshotWithContext holds details about calls to the CopyDBSnapshotWithContext method.
		CopyDBSnapshotWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.CopyDBSnapshotInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CopyOptionGroup holds details about calls to the CopyOptionGroup method.
		CopyOptionGroup []struct {
			// In1 is the in1 argument value.
			In1 *rds.CopyOptionGroupInput
		}
		// CopyOptionGroupRequest holds details about calls to the CopyOptionGroupRequest method.
		CopyOptionGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.CopyOptionGroupInput
		}
		// CopyOptionGroupWithContext holds details about calls to the CopyOptionGroupWithContext method.
		CopyOptionGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.CopyOptionGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateCustomAvailabilityZone holds details about calls to the CreateCustomAvailabilityZone method.
		CreateCustomAvailabilityZone []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateCustomAvailabilityZoneInput
		}
		// CreateCustomAvailabilityZoneRequest holds details about calls to the CreateCustomAvailabilityZoneRequest method.
		CreateCustomAvailabilityZoneRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateCustomAvailabilityZoneInput
		}
		// CreateCustomAvailabilityZoneWithContext holds details about calls to the CreateCustomAvailabilityZoneWithContext method.
		CreateCustomAvailabilityZoneWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.CreateCustomAvailabilityZoneInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateDBCluster holds details about calls to the CreateDBCluster method.
		CreateDBCluster []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateDBClusterInput
		}
		// CreateDBClusterEndpoint holds details about calls to the CreateDBClusterEndpoint method.
		CreateDBClusterEndpoint []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateDBClusterEndpointInput
		}
		// CreateDBClusterEndpointRequest holds details about calls to the CreateDBClusterEndpointRequest method.
		CreateDBClusterEndpointRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateDBClusterEndpointInput
		}
		// CreateDBClusterEndpointWithContext holds details about calls to the CreateDBClusterEndpointWithContext method.
		CreateDBClusterEndpointWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.CreateDBClusterEndpointInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateDBClusterParameterGroup holds details about calls to the CreateDBClusterParameterGroup method.
		CreateDBClusterParameterGroup []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateDBClusterParameterGroupInput
		}
		// CreateDBClusterParameterGroupRequest holds details about calls to the CreateDBClusterParameterGroupRequest method.
		CreateDBClusterParameterGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateDBClusterParameterGroupInput
		}
		// CreateDBClusterParameterGroupWithContext holds details about calls to the CreateDBClusterParameterGroupWithContext method.
		CreateDBClusterParameterGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.CreateDBClusterParameterGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateDBClusterRequest holds details about calls to the CreateDBClusterRequest method.
		CreateDBClusterRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateDBClusterInput
		}
		// CreateDBClusterSnapshot holds details about calls to the CreateDBClusterSnapshot method.
		CreateDBClusterSnapshot []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateDBClusterSnapshotInput
		}
		// CreateDBClusterSnapshotRequest holds details about calls to the CreateDBClusterSnapshotRequest method.
		CreateDBClusterSnapshotRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateDBClusterSnapshotInput
		}
		// CreateDBClusterSnapshotWithContext holds details about calls to the CreateDBClusterSnapshotWithContext method.
		CreateDBClusterSnapshotWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.CreateDBClusterSnapshotInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateDBClusterWithContext holds details about calls to the CreateDBClusterWithContext method.
		CreateDBClusterWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.CreateDBClusterInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateDBInstance holds details about calls to the CreateDBInstance method.
		CreateDBInstance []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateDBInstanceInput
		}
		// CreateDBInstanceReadReplica holds details about calls to the CreateDBInstanceReadReplica method.
		CreateDBInstanceReadReplica []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateDBInstanceReadReplicaInput
		}
		// CreateDBInstanceReadReplicaRequest holds details about calls to the CreateDBInstanceReadReplicaRequest method.
		CreateDBInstanceReadReplicaRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateDBInstanceReadReplicaInput
		}
		// CreateDBInstanceReadReplicaWithContext holds details about calls to the CreateDBInstanceReadReplicaWithContext method.
		CreateDBInstanceReadReplicaWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.CreateDBInstanceReadReplicaInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateDBInstanceRequest holds details about calls to the CreateDBInstanceRequest method.
		CreateDBInstanceRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateDBInstanceInput
		}
		// CreateDBInstanceWithContext holds details about calls to the CreateDBInstanceWithContext method.
		CreateDBInstanceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.CreateDBInstanceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateDBParameterGroup holds details about calls to the CreateDBParameterGroup method.
		CreateDBParameterGroup []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateDBParameterGroupInput
		}
		// CreateDBParameterGroupRequest holds details about calls to the CreateDBParameterGroupRequest method.
		CreateDBParameterGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateDBParameterGroupInput
		}
		// CreateDBParameterGroupWithContext holds details about calls to the CreateDBParameterGroupWithContext method.
		CreateDBParameterGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.CreateDBParameterGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateDBProxy holds details about calls to the CreateDBProxy method.
		CreateDBProxy []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateDBProxyInput
		}
		// CreateDBProxyRequest holds details about calls to the CreateDBProxyRequest method.
		CreateDBProxyRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateDBProxyInput
		}
		// CreateDBProxyWithContext holds details about calls to the CreateDBProxyWithContext method.
		CreateDBProxyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.CreateDBProxyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateDBSecurityGroup holds details about calls to the CreateDBSecurityGroup method.
		CreateDBSecurityGroup []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateDBSecurityGroupInput
		}
		// CreateDBSecurityGroupRequest holds details about calls to the CreateDBSecurityGroupRequest method.
		CreateDBSecurityGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateDBSecurityGroupInput
		}
		// CreateDBSecurityGroupWithContext holds details about calls to the CreateDBSecurityGroupWithContext method.
		CreateDBSecurityGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.CreateDBSecurityGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateDBSnapshot holds details about calls to the CreateDBSnapshot method.
		CreateDBSnapshot []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateDBSnapshotInput
		}
		// CreateDBSnapshotRequest holds details about calls to the CreateDBSnapshotRequest method.
		CreateDBSnapshotRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateDBSnapshotInput
		}
		// CreateDBSnapshotWithContext holds details about calls to the CreateDBSnapshotWithContext method.
		CreateDBSnapshotWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.CreateDBSnapshotInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateDBSubnetGroup holds details about calls to the CreateDBSubnetGroup method.
		CreateDBSubnetGroup []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateDBSubnetGroupInput
		}
		// CreateDBSubnetGroupRequest holds details about calls to the CreateDBSubnetGroupRequest method.
		CreateDBSubnetGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateDBSubnetGroupInput
		}
		// CreateDBSubnetGroupWithContext holds details about calls to the CreateDBSubnetGroupWithContext method.
		CreateDBSubnetGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.CreateDBSubnetGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateEventSubscription holds details about calls to the CreateEventSubscription method.
		CreateEventSubscription []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateEventSubscriptionInput
		}
		// CreateEventSubscriptionRequest holds details about calls to the CreateEventSubscriptionRequest method.
		CreateEventSubscriptionRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateEventSubscriptionInput
		}
		// CreateEventSubscriptionWithContext holds details about calls to the CreateEventSubscriptionWithContext method.
		CreateEventSubscriptionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.CreateEventSubscriptionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateGlobalCluster holds details about calls to the CreateGlobalCluster method.
		CreateGlobalCluster []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateGlobalClusterInput
		}
		// CreateGlobalClusterRequest holds details about calls to the CreateGlobalClusterRequest method.
		CreateGlobalClusterRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateGlobalClusterInput
		}
		// CreateGlobalClusterWithContext holds details about calls to the CreateGlobalClusterWithContext method.
		CreateGlobalClusterWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.CreateGlobalClusterInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateOptionGroup holds details about calls to the CreateOptionGroup method.
		CreateOptionGroup []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateOptionGroupInput
		}
		// CreateOptionGroupRequest holds details about calls to the CreateOptionGroupRequest method.
		CreateOptionGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.CreateOptionGroupInput
		}
		// CreateOptionGroupWithContext holds details about calls to the CreateOptionGroupWithContext method.
		CreateOptionGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.CreateOptionGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteCustomAvailabilityZone holds details about calls to the DeleteCustomAvailabilityZone method.
		DeleteCustomAvailabilityZone []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteCustomAvailabilityZoneInput
		}
		// DeleteCustomAvailabilityZoneRequest holds details about calls to the DeleteCustomAvailabilityZoneRequest method.
		DeleteCustomAvailabilityZoneRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteCustomAvailabilityZoneInput
		}
		// DeleteCustomAvailabilityZoneWithContext holds details about calls to the DeleteCustomAvailabilityZoneWithContext method.
		DeleteCustomAvailabilityZoneWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DeleteCustomAvailabilityZoneInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteDBCluster holds details about calls to the DeleteDBCluster method.
		DeleteDBCluster []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteDBClusterInput
		}
		// DeleteDBClusterEndpoint holds details about calls to the DeleteDBClusterEndpoint method.
		DeleteDBClusterEndpoint []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteDBClusterEndpointInput
		}
		// DeleteDBClusterEndpointRequest holds details about calls to the DeleteDBClusterEndpointRequest method.
		DeleteDBClusterEndpointRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteDBClusterEndpointInput
		}
		// DeleteDBClusterEndpointWithContext holds details about calls to the DeleteDBClusterEndpointWithContext method.
		DeleteDBClusterEndpointWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DeleteDBClusterEndpointInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteDBClusterParameterGroup holds details about calls to the DeleteDBClusterParameterGroup method.
		DeleteDBClusterParameterGroup []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteDBClusterParameterGroupInput
		}
		// DeleteDBClusterParameterGroupRequest holds details about calls to the DeleteDBClusterParameterGroupRequest method.
		DeleteDBClusterParameterGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteDBClusterParameterGroupInput
		}
		// DeleteDBClusterParameterGroupWithContext holds details about calls to the DeleteDBClusterParameterGroupWithContext method.
		DeleteDBClusterParameterGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DeleteDBClusterParameterGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteDBClusterRequest holds details about calls to the DeleteDBClusterRequest method.
		DeleteDBClusterRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteDBClusterInput
		}
		// DeleteDBClusterSnapshot holds details about calls to the DeleteDBClusterSnapshot method.
		DeleteDBClusterSnapshot []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteDBClusterSnapshotInput
		}
		// DeleteDBClusterSnapshotRequest holds details about calls to the DeleteDBClusterSnapshotRequest method.
		DeleteDBClusterSnapshotRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteDBClusterSnapshotInput
		}
		// DeleteDBClusterSnapshotWithContext holds details about calls to the DeleteDBClusterSnapshotWithContext method.
		DeleteDBClusterSnapshotWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DeleteDBClusterSnapshotInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteDBClusterWithContext holds details about calls to the DeleteDBClusterWithContext method.
		DeleteDBClusterWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DeleteDBClusterInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteDBInstance holds details about calls to the DeleteDBInstance method.
		DeleteDBInstance []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteDBInstanceInput
		}
		// DeleteDBInstanceAutomatedBackup holds details about calls to the DeleteDBInstanceAutomatedBackup method.
		DeleteDBInstanceAutomatedBackup []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteDBInstanceAutomatedBackupInput
		}
		// DeleteDBInstanceAutomatedBackupRequest holds details about calls to the DeleteDBInstanceAutomatedBackupRequest method.
		DeleteDBInstanceAutomatedBackupRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteDBInstanceAutomatedBackupInput
		}
		// DeleteDBInstanceAutomatedBackupWithContext holds details about calls to the DeleteDBInstanceAutomatedBackupWithContext method.
		DeleteDBInstanceAutomatedBackupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DeleteDBInstanceAutomatedBackupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteDBInstanceRequest holds details about calls to the DeleteDBInstanceRequest method.
		DeleteDBInstanceRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteDBInstanceInput
		}
		// DeleteDBInstanceWithContext holds details about calls to the DeleteDBInstanceWithContext method.
		DeleteDBInstanceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DeleteDBInstanceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteDBParameterGroup holds details about calls to the DeleteDBParameterGroup method.
		DeleteDBParameterGroup []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteDBParameterGroupInput
		}
		// DeleteDBParameterGroupRequest holds details about calls to the DeleteDBParameterGroupRequest method.
		DeleteDBParameterGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteDBParameterGroupInput
		}
		// DeleteDBParameterGroupWithContext holds details about calls to the DeleteDBParameterGroupWithContext method.
		DeleteDBParameterGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DeleteDBParameterGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteDBProxy holds details about calls to the DeleteDBProxy method.
		DeleteDBProxy []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteDBProxyInput
		}
		// DeleteDBProxyRequest holds details about calls to the DeleteDBProxyRequest method.
		DeleteDBProxyRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteDBProxyInput
		}
		// DeleteDBProxyWithContext holds details about calls to the DeleteDBProxyWithContext method.
		DeleteDBProxyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DeleteDBProxyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteDBSecurityGroup holds details about calls to the DeleteDBSecurityGroup method.
		DeleteDBSecurityGroup []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteDBSecurityGroupInput
		}
		// DeleteDBSecurityGroupRequest holds details about calls to the DeleteDBSecurityGroupRequest method.
		DeleteDBSecurityGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteDBSecurityGroupInput
		}
		// DeleteDBSecurityGroupWithContext holds details about calls to the DeleteDBSecurityGroupWithContext method.
		DeleteDBSecurityGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DeleteDBSecurityGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteDBSnapshot holds details about calls to the DeleteDBSnapshot method.
		DeleteDBSnapshot []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteDBSnapshotInput
		}
		// DeleteDBSnapshotRequest holds details about calls to the DeleteDBSnapshotRequest method.
		DeleteDBSnapshotRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteDBSnapshotInput
		}
		// DeleteDBSnapshotWithContext holds details about calls to the DeleteDBSnapshotWithContext method.
		DeleteDBSnapshotWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DeleteDBSnapshotInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteDBSubnetGroup holds details about calls to the DeleteDBSubnetGroup method.
		DeleteDBSubnetGroup []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteDBSubnetGroupInput
		}
		// DeleteDBSubnetGroupRequest holds details about calls to the DeleteDBSubnetGroupRequest method.
		DeleteDBSubnetGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteDBSubnetGroupInput
		}
		// DeleteDBSubnetGroupWithContext holds details about calls to the DeleteDBSubnetGroupWithContext method.
		DeleteDBSubnetGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DeleteDBSubnetGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteEventSubscription holds details about calls to the DeleteEventSubscription method.
		DeleteEventSubscription []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteEventSubscriptionInput
		}
		// DeleteEventSubscriptionRequest holds details about calls to the DeleteEventSubscriptionRequest method.
		DeleteEventSubscriptionRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteEventSubscriptionInput
		}
		// DeleteEventSubscriptionWithContext holds details about calls to the DeleteEventSubscriptionWithContext method.
		DeleteEventSubscriptionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DeleteEventSubscriptionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteGlobalCluster holds details about calls to the DeleteGlobalCluster method.
		DeleteGlobalCluster []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteGlobalClusterInput
		}
		// DeleteGlobalClusterRequest holds details about calls to the DeleteGlobalClusterRequest method.
		DeleteGlobalClusterRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteGlobalClusterInput
		}
		// DeleteGlobalClusterWithContext holds details about calls to the DeleteGlobalClusterWithContext method.
		DeleteGlobalClusterWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DeleteGlobalClusterInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteInstallationMedia holds details about calls to the DeleteInstallationMedia method.
		DeleteInstallationMedia []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteInstallationMediaInput
		}
		// DeleteInstallationMediaRequest holds details about calls to the DeleteInstallationMediaRequest method.
		DeleteInstallationMediaRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteInstallationMediaInput
		}
		// DeleteInstallationMediaWithContext holds details about calls to the DeleteInstallationMediaWithContext method.
		DeleteInstallationMediaWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DeleteInstallationMediaInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteOptionGroup holds details about calls to the DeleteOptionGroup method.
		DeleteOptionGroup []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteOptionGroupInput
		}
		// DeleteOptionGroupRequest holds details about calls to the DeleteOptionGroupRequest method.
		DeleteOptionGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeleteOptionGroupInput
		}
		// DeleteOptionGroupWithContext holds details about calls to the DeleteOptionGroupWithContext method.
		DeleteOptionGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DeleteOptionGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeregisterDBProxyTargets holds details about calls to the DeregisterDBProxyTargets method.
		DeregisterDBProxyTargets []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeregisterDBProxyTargetsInput
		}
		// DeregisterDBProxyTargetsRequest holds details about calls to the DeregisterDBProxyTargetsRequest method.
		DeregisterDBProxyTargetsRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DeregisterDBProxyTargetsInput
		}
		// DeregisterDBProxyTargetsWithContext holds details about calls to the DeregisterDBProxyTargetsWithContext method.
		DeregisterDBProxyTargetsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DeregisterDBProxyTargetsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeAccountAttributes holds details about calls to the DescribeAccountAttributes method.
		DescribeAccountAttributes []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeAccountAttributesInput
		}
		// DescribeAccountAttributesRequest holds details about calls to the DescribeAccountAttributesRequest method.
		DescribeAccountAttributesRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeAccountAttributesInput
		}
		// DescribeAccountAttributesWithContext holds details about calls to the DescribeAccountAttributesWithContext method.
		DescribeAccountAttributesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeAccountAttributesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeCertificates holds details about calls to the DescribeCertificates method.
		DescribeCertificates []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeCertificatesInput
		}
		// DescribeCertificatesRequest holds details about calls to the DescribeCertificatesRequest method.
		DescribeCertificatesRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeCertificatesInput
		}
		// DescribeCertificatesWithContext holds details about calls to the DescribeCertificatesWithContext method.
		DescribeCertificatesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeCertificatesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeCustomAvailabilityZones holds details about calls to the DescribeCustomAvailabilityZones method.
		DescribeCustomAvailabilityZones []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeCustomAvailabilityZonesInput
		}
		// DescribeCustomAvailabilityZonesPages holds details about calls to the DescribeCustomAvailabilityZonesPages method.
		DescribeCustomAvailabilityZonesPages []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeCustomAvailabilityZonesInput
			// In2 is the in2 argument value.
			In2 func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool
		}
		// DescribeCustomAvailabilityZonesPagesWithContext holds details about calls to the DescribeCustomAvailabilityZonesPagesWithContext method.
		DescribeCustomAvailabilityZonesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeCustomAvailabilityZonesInput
			// In3 is the in3 argument value.
			In3 func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeCustomAvailabilityZonesRequest holds details about calls to the DescribeCustomAvailabilityZonesRequest method.
		DescribeCustomAvailabilityZonesRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeCustomAvailabilityZonesInput
		}
		// DescribeCustomAvailabilityZonesWithContext holds details about calls to the DescribeCustomAvailabilityZonesWithContext method.
		DescribeCustomAvailabilityZonesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeCustomAvailabilityZonesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeDBClusterBacktracks holds details about calls to the DescribeDBClusterBacktracks method.
		DescribeDBClusterBacktracks []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBClusterBacktracksInput
		}
		// DescribeDBClusterBacktracksRequest holds details about calls to the DescribeDBClusterBacktracksRequest method.
		DescribeDBClusterBacktracksRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBClusterBacktracksInput
		}
		// DescribeDBClusterBacktracksWithContext holds details about calls to the DescribeDBClusterBacktracksWithContext method.
		DescribeDBClusterBacktracksWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBClusterBacktracksInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeDBClusterEndpoints holds details about calls to the DescribeDBClusterEndpoints method.
		DescribeDBClusterEndpoints []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBClusterEndpointsInput
		}
		// DescribeDBClusterEndpointsRequest holds details about calls to the DescribeDBClusterEndpointsRequest method.
		DescribeDBClusterEndpointsRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBClusterEndpointsInput
		}
		// DescribeDBClusterEndpointsWithContext holds details about calls to the DescribeDBClusterEndpointsWithContext method.
		DescribeDBClusterEndpointsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBClusterEndpointsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeDBClusterParameterGroups holds details about calls to the DescribeDBClusterParameterGroups method.
		DescribeDBClusterParameterGroups []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBClusterParameterGroupsInput
		}
		// DescribeDBClusterParameterGroupsRequest holds details about calls to the DescribeDBClusterParameterGroupsRequest method.
		DescribeDBClusterParameterGroupsRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBClusterParameterGroupsInput
		}
		// DescribeDBClusterParameterGroupsWithContext holds details about calls to the DescribeDBClusterParameterGroupsWithContext method.
		DescribeDBClusterParameterGroupsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBClusterParameterGroupsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeDBClusterParameters holds details about calls to the DescribeDBClusterParameters method.
		DescribeDBClusterParameters []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBClusterParametersInput
		}
		// DescribeDBClusterParametersRequest holds details about calls to the DescribeDBClusterParametersRequest method.
		DescribeDBClusterParametersRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBClusterParametersInput
		}
		// DescribeDBClusterParametersWithContext holds details about calls to the DescribeDBClusterParametersWithContext method.
		DescribeDBClusterParametersWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBClusterParametersInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeDBClusterSnapshotAttributes holds details about calls to the DescribeDBClusterSnapshotAttributes method.
		DescribeDBClusterSnapshotAttributes []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBClusterSnapshotAttributesInput
		}
		// DescribeDBClusterSnapshotAttributesRequest holds details about calls to the DescribeDBClusterSnapshotAttributesRequest method.
		DescribeDBClusterSnapshotAttributesRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBClusterSnapshotAttributesInput
		}
		// DescribeDBClusterSnapshotAttributesWithContext holds details about calls to the DescribeDBClusterSnapshotAttributesWithContext method.
		DescribeDBClusterSnapshotAttributesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBClusterSnapshotAttributesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeDBClusterSnapshots holds details about calls to the DescribeDBClusterSnapshots method.
		DescribeDBClusterSnapshots []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBClusterSnapshotsInput
		}
		// DescribeDBClusterSnapshotsRequest holds details about calls to the DescribeDBClusterSnapshotsRequest method.
		DescribeDBClusterSnapshotsRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBClusterSnapshotsInput
		}
		// DescribeDBClusterSnapshotsWithContext holds details about calls to the DescribeDBClusterSnapshotsWithContext method.
		DescribeDBClusterSnapshotsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBClusterSnapshotsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeDBClusters holds details about calls to the DescribeDBClusters method.
		DescribeDBClusters []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBClustersInput
		}
		// DescribeDBClustersPages holds details about calls to the DescribeDBClustersPages method.
		DescribeDBClustersPages []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBClustersInput
			// In2 is the in2 argument value.
			In2 func(*rds.DescribeDBClustersOutput, bool) bool
		}
		// DescribeDBClustersPagesWithContext holds details about calls to the DescribeDBClustersPagesWithContext method.
		DescribeDBClustersPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBClustersInput
			// In3 is the in3 argument value.
			In3 func(*rds.DescribeDBClustersOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeDBClustersRequest holds details about calls to the DescribeDBClustersRequest method.
		DescribeDBClustersRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBClustersInput
		}
		// DescribeDBClustersWithContext holds details about calls to the DescribeDBClustersWithContext method.
		DescribeDBClustersWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBClustersInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeDBEngineVersions holds details about calls to the DescribeDBEngineVersions method.
		DescribeDBEngineVersions []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBEngineVersionsInput
		}
		// DescribeDBEngineVersionsPages holds details about calls to the DescribeDBEngineVersionsPages method.
		DescribeDBEngineVersionsPages []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBEngineVersionsInput
			// In2 is the in2 argument value.
			In2 func(*rds.DescribeDBEngineVersionsOutput, bool) bool
		}
		// DescribeDBEngineVersionsPagesWithContext holds details about calls to the DescribeDBEngineVersionsPagesWithContext method.
		DescribeDBEngineVersionsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBEngineVersionsInput
			// In3 is the in3 argument value.
			In3 func(*rds.DescribeDBEngineVersionsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeDBEngineVersionsRequest holds details about calls to the DescribeDBEngineVersionsRequest method.
		DescribeDBEngineVersionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBEngineVersionsInput
		}
		// DescribeDBEngineVersionsWithContext holds details about calls to the DescribeDBEngineVersionsWithContext method.
		DescribeDBEngineVersionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBEngineVersionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeDBInstanceAutomatedBackups holds details about calls to the DescribeDBInstanceAutomatedBackups method.
		DescribeDBInstanceAutomatedBackups []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBInstanceAutomatedBackupsInput
		}
		// DescribeDBInstanceAutomatedBackupsPages holds details about calls to the DescribeDBInstanceAutomatedBackupsPages method.
		DescribeDBInstanceAutomatedBackupsPages []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBInstanceAutomatedBackupsInput
			// In2 is the in2 argument value.
			In2 func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool
		}
		// DescribeDBInstanceAutomatedBackupsPagesWithContext holds details about calls to the DescribeDBInstanceAutomatedBackupsPagesWithContext method.
		DescribeDBInstanceAutomatedBackupsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBInstanceAutomatedBackupsInput
			// In3 is the in3 argument value.
			In3 func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeDBInstanceAutomatedBackupsRequest holds details about calls to the DescribeDBInstanceAutomatedBackupsRequest method.
		DescribeDBInstanceAutomatedBackupsRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBInstanceAutomatedBackupsInput
		}
		// DescribeDBInstanceAutomatedBackupsWithContext holds details about calls to the DescribeDBInstanceAutomatedBackupsWithContext method.
		DescribeDBInstanceAutomatedBackupsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBInstanceAutomatedBackupsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeDBInstances holds details about calls to the DescribeDBInstances method.
		DescribeDBInstances []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBInstancesInput
		}
		// DescribeDBInstancesPages holds details about calls to the DescribeDBInstancesPages method.
		DescribeDBInstancesPages []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBInstancesInput
			// In2 is the in2 argument value.
			In2 func(*rds.DescribeDBInstancesOutput, bool) bool
		}
		// DescribeDBInstancesPagesWithContext holds details about calls to the DescribeDBInstancesPagesWithContext method.
		DescribeDBInstancesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBInstancesInput
			// In3 is the in3 argument value.
			In3 func(*rds.DescribeDBInstancesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeDBInstancesRequest holds details about calls to the DescribeDBInstancesRequest method.
		DescribeDBInstancesRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBInstancesInput
		}
		// DescribeDBInstancesWithContext holds details about calls to the DescribeDBInstancesWithContext method.
		DescribeDBInstancesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBInstancesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeDBLogFiles holds details about calls to the DescribeDBLogFiles method.
		DescribeDBLogFiles []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBLogFilesInput
		}
		// DescribeDBLogFilesPages holds details about calls to the DescribeDBLogFilesPages method.
		DescribeDBLogFilesPages []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBLogFilesInput
			// In2 is the in2 argument value.
			In2 func(*rds.DescribeDBLogFilesOutput, bool) bool
		}
		// DescribeDBLogFilesPagesWithContext holds details about calls to the DescribeDBLogFilesPagesWithContext method.
		DescribeDBLogFilesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBLogFilesInput
			// In3 is the in3 argument value.
			In3 func(*rds.DescribeDBLogFilesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeDBLogFilesRequest holds details about calls to the DescribeDBLogFilesRequest method.
		DescribeDBLogFilesRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBLogFilesInput
		}
		// DescribeDBLogFilesWithContext holds details about calls to the DescribeDBLogFilesWithContext method.
		DescribeDBLogFilesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBLogFilesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeDBParameterGroups holds details about calls to the DescribeDBParameterGroups method.
		DescribeDBParameterGroups []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBParameterGroupsInput
		}
		// DescribeDBParameterGroupsPages holds details about calls to the DescribeDBParameterGroupsPages method.
		DescribeDBParameterGroupsPages []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBParameterGroupsInput
			// In2 is the in2 argument value.
			In2 func(*rds.DescribeDBParameterGroupsOutput, bool) bool
		}
		// DescribeDBParameterGroupsPagesWithContext holds details about calls to the DescribeDBParameterGroupsPagesWithContext method.
		DescribeDBParameterGroupsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBParameterGroupsInput
			// In3 is the in3 argument value.
			In3 func(*rds.DescribeDBParameterGroupsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeDBParameterGroupsRequest holds details about calls to the DescribeDBParameterGroupsRequest method.
		DescribeDBParameterGroupsRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBParameterGroupsInput
		}
		// DescribeDBParameterGroupsWithContext holds details about calls to the DescribeDBParameterGroupsWithContext method.
		DescribeDBParameterGroupsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBParameterGroupsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeDBParameters holds details about calls to the DescribeDBParameters method.
		DescribeDBParameters []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBParametersInput
		}
		// DescribeDBParametersPages holds details about calls to the DescribeDBParametersPages method.
		DescribeDBParametersPages []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBParametersInput
			// In2 is the in2 argument value.
			In2 func(*rds.DescribeDBParametersOutput, bool) bool
		}
		// DescribeDBParametersPagesWithContext holds details about calls to the DescribeDBParametersPagesWithContext method.
		DescribeDBParametersPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBParametersInput
			// In3 is the in3 argument value.
			In3 func(*rds.DescribeDBParametersOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeDBParametersRequest holds details about calls to the DescribeDBParametersRequest method.
		DescribeDBParametersRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBParametersInput
		}
		// DescribeDBParametersWithContext holds details about calls to the DescribeDBParametersWithContext method.
		DescribeDBParametersWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBParametersInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeDBProxies holds details about calls to the DescribeDBProxies method.
		DescribeDBProxies []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBProxiesInput
		}
		// DescribeDBProxiesPages holds details about calls to the DescribeDBProxiesPages method.
		DescribeDBProxiesPages []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBProxiesInput
			// In2 is the in2 argument value.
			In2 func(*rds.DescribeDBProxiesOutput, bool) bool
		}
		// DescribeDBProxiesPagesWithContext holds details about calls to the DescribeDBProxiesPagesWithContext method.
		DescribeDBProxiesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBProxiesInput
			// In3 is the in3 argument value.
			In3 func(*rds.DescribeDBProxiesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeDBProxiesRequest holds details about calls to the DescribeDBProxiesRequest method.
		DescribeDBProxiesRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBProxiesInput
		}
		// DescribeDBProxiesWithContext holds details about calls to the DescribeDBProxiesWithContext method.
		DescribeDBProxiesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBProxiesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeDBProxyTargetGroups holds details about calls to the DescribeDBProxyTargetGroups method.
		DescribeDBProxyTargetGroups []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBProxyTargetGroupsInput
		}
		// DescribeDBProxyTargetGroupsPages holds details about calls to the DescribeDBProxyTargetGroupsPages method.
		DescribeDBProxyTargetGroupsPages []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBProxyTargetGroupsInput
			// In2 is the in2 argument value.
			In2 func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool
		}
		// DescribeDBProxyTargetGroupsPagesWithContext holds details about calls to the DescribeDBProxyTargetGroupsPagesWithContext method.
		DescribeDBProxyTargetGroupsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBProxyTargetGroupsInput
			// In3 is the in3 argument value.
			In3 func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeDBProxyTargetGroupsRequest holds details about calls to the DescribeDBProxyTargetGroupsRequest method.
		DescribeDBProxyTargetGroupsRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBProxyTargetGroupsInput
		}
		// DescribeDBProxyTargetGroupsWithContext holds details about calls to the DescribeDBProxyTargetGroupsWithContext method.
		DescribeDBProxyTargetGroupsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBProxyTargetGroupsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeDBProxyTargets holds details about calls to the DescribeDBProxyTargets method.
		DescribeDBProxyTargets []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBProxyTargetsInput
		}
		// DescribeDBProxyTargetsPages holds details about calls to the DescribeDBProxyTargetsPages method.
		DescribeDBProxyTargetsPages []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBProxyTargetsInput
			// In2 is the in2 argument value.
			In2 func(*rds.DescribeDBProxyTargetsOutput, bool) bool
		}
		// DescribeDBProxyTargetsPagesWithContext holds details about calls to the DescribeDBProxyTargetsPagesWithContext method.
		DescribeDBProxyTargetsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBProxyTargetsInput
			// In3 is the in3 argument value.
			In3 func(*rds.DescribeDBProxyTargetsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeDBProxyTargetsRequest holds details about calls to the DescribeDBProxyTargetsRequest method.
		DescribeDBProxyTargetsRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBProxyTargetsInput
		}
		// DescribeDBProxyTargetsWithContext holds details about calls to the DescribeDBProxyTargetsWithContext method.
		DescribeDBProxyTargetsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBProxyTargetsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeDBSecurityGroups holds details about calls to the DescribeDBSecurityGroups method.
		DescribeDBSecurityGroups []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBSecurityGroupsInput
		}
		// DescribeDBSecurityGroupsPages holds details about calls to the DescribeDBSecurityGroupsPages method.
		DescribeDBSecurityGroupsPages []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBSecurityGroupsInput
			// In2 is the in2 argument value.
			In2 func(*rds.DescribeDBSecurityGroupsOutput, bool) bool
		}
		// DescribeDBSecurityGroupsPagesWithContext holds details about calls to the DescribeDBSecurityGroupsPagesWithContext method.
		DescribeDBSecurityGroupsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBSecurityGroupsInput
			// In3 is the in3 argument value.
			In3 func(*rds.DescribeDBSecurityGroupsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeDBSecurityGroupsRequest holds details about calls to the DescribeDBSecurityGroupsRequest method.
		DescribeDBSecurityGroupsRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBSecurityGroupsInput
		}
		// DescribeDBSecurityGroupsWithContext holds details about calls to the DescribeDBSecurityGroupsWithContext method.
		DescribeDBSecurityGroupsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBSecurityGroupsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeDBSnapshotAttributes holds details about calls to the DescribeDBSnapshotAttributes method.
		DescribeDBSnapshotAttributes []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBSnapshotAttributesInput
		}
		// DescribeDBSnapshotAttributesRequest holds details about calls to the DescribeDBSnapshotAttributesRequest method.
		DescribeDBSnapshotAttributesRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBSnapshotAttributesInput
		}
		// DescribeDBSnapshotAttributesWithContext holds details about calls to the DescribeDBSnapshotAttributesWithContext method.
		DescribeDBSnapshotAttributesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBSnapshotAttributesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeDBSnapshots holds details about calls to the DescribeDBSnapshots method.
		DescribeDBSnapshots []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBSnapshotsInput
		}
		// DescribeDBSnapshotsPages holds details about calls to the DescribeDBSnapshotsPages method.
		DescribeDBSnapshotsPages []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBSnapshotsInput
			// In2 is the in2 argument value.
			In2 func(*rds.DescribeDBSnapshotsOutput, bool) bool
		}
		// DescribeDBSnapshotsPagesWithContext holds details about calls to the DescribeDBSnapshotsPagesWithContext method.
		DescribeDBSnapshotsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBSnapshotsInput
			// In3 is the in3 argument value.
			In3 func(*rds.DescribeDBSnapshotsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeDBSnapshotsRequest holds details about calls to the DescribeDBSnapshotsRequest method.
		DescribeDBSnapshotsRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBSnapshotsInput
		}
		// DescribeDBSnapshotsWithContext holds details about calls to the DescribeDBSnapshotsWithContext method.
		DescribeDBSnapshotsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBSnapshotsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeDBSubnetGroups holds details about calls to the DescribeDBSubnetGroups method.
		DescribeDBSubnetGroups []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBSubnetGroupsInput
		}
		// DescribeDBSubnetGroupsPages holds details about calls to the DescribeDBSubnetGroupsPages method.
		DescribeDBSubnetGroupsPages []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBSubnetGroupsInput
			// In2 is the in2 argument value.
			In2 func(*rds.DescribeDBSubnetGroupsOutput, bool) bool
		}
		// DescribeDBSubnetGroupsPagesWithContext holds details about calls to the DescribeDBSubnetGroupsPagesWithContext method.
		DescribeDBSubnetGroupsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBSubnetGroupsInput
			// In3 is the in3 argument value.
			In3 func(*rds.DescribeDBSubnetGroupsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeDBSubnetGroupsRequest holds details about calls to the DescribeDBSubnetGroupsRequest method.
		DescribeDBSubnetGroupsRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBSubnetGroupsInput
		}
		// DescribeDBSubnetGroupsWithContext holds details about calls to the DescribeDBSubnetGroupsWithContext method.
		DescribeDBSubnetGroupsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBSubnetGroupsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeEngineDefaultClusterParameters holds details about calls to the DescribeEngineDefaultClusterParameters method.
		DescribeEngineDefaultClusterParameters []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeEngineDefaultClusterParametersInput
		}
		// DescribeEngineDefaultClusterParametersRequest holds details about calls to the DescribeEngineDefaultClusterParametersRequest method.
		DescribeEngineDefaultClusterParametersRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeEngineDefaultClusterParametersInput
		}
		// DescribeEngineDefaultClusterParametersWithContext holds details about calls to the DescribeEngineDefaultClusterParametersWithContext method.
		DescribeEngineDefaultClusterParametersWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeEngineDefaultClusterParametersInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeEngineDefaultParameters holds details about calls to the DescribeEngineDefaultParameters method.
		DescribeEngineDefaultParameters []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeEngineDefaultParametersInput
		}
		// DescribeEngineDefaultParametersPages holds details about calls to the DescribeEngineDefaultParametersPages method.
		DescribeEngineDefaultParametersPages []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeEngineDefaultParametersInput
			// In2 is the in2 argument value.
			In2 func(*rds.DescribeEngineDefaultParametersOutput, bool) bool
		}
		// DescribeEngineDefaultParametersPagesWithContext holds details about calls to the DescribeEngineDefaultParametersPagesWithContext method.
		DescribeEngineDefaultParametersPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeEngineDefaultParametersInput
			// In3 is the in3 argument value.
			In3 func(*rds.DescribeEngineDefaultParametersOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeEngineDefaultParametersRequest holds details about calls to the DescribeEngineDefaultParametersRequest method.
		DescribeEngineDefaultParametersRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeEngineDefaultParametersInput
		}
		// DescribeEngineDefaultParametersWithContext holds details about calls to the DescribeEngineDefaultParametersWithContext method.
		DescribeEngineDefaultParametersWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeEngineDefaultParametersInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeEventCategories holds details about calls to the DescribeEventCategories method.
		DescribeEventCategories []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeEventCategoriesInput
		}
		// DescribeEventCategoriesRequest holds details about calls to the DescribeEventCategoriesRequest method.
		DescribeEventCategoriesRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeEventCategoriesInput
		}
		// DescribeEventCategoriesWithContext holds details about calls to the DescribeEventCategoriesWithContext method.
		DescribeEventCategoriesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeEventCategoriesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeEventSubscriptions holds details about calls to the DescribeEventSubscriptions method.
		DescribeEventSubscriptions []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeEventSubscriptionsInput
		}
		// DescribeEventSubscriptionsPages holds details about calls to the DescribeEventSubscriptionsPages method.
		DescribeEventSubscriptionsPages []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeEventSubscriptionsInput
			// In2 is the in2 argument value.
			In2 func(*rds.DescribeEventSubscriptionsOutput, bool) bool
		}
		// DescribeEventSubscriptionsPagesWithContext holds details about calls to the DescribeEventSubscriptionsPagesWithContext method.
		DescribeEventSubscriptionsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeEventSubscriptionsInput
			// In3 is the in3 argument value.
			In3 func(*rds.DescribeEventSubscriptionsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeEventSubscriptionsRequest holds details about calls to the DescribeEventSubscriptionsRequest method.
		DescribeEventSubscriptionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeEventSubscriptionsInput
		}
		// DescribeEventSubscriptionsWithContext holds details about calls to the DescribeEventSubscriptionsWithContext method.
		DescribeEventSubscriptionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeEventSubscriptionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeEvents holds details about calls to the DescribeEvents method.
		DescribeEvents []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeEventsInput
		}
		// DescribeEventsPages holds details about calls to the DescribeEventsPages method.
		DescribeEventsPages []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeEventsInput
			// In2 is the in2 argument value.
			In2 func(*rds.DescribeEventsOutput, bool) bool
		}
		// DescribeEventsPagesWithContext holds details about calls to the DescribeEventsPagesWithContext method.
		DescribeEventsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeEventsInput
			// In3 is the in3 argument value.
			In3 func(*rds.DescribeEventsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeEventsRequest holds details about calls to the DescribeEventsRequest method.
		DescribeEventsRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeEventsInput
		}
		// DescribeEventsWithContext holds details about calls to the DescribeEventsWithContext method.
		DescribeEventsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeEventsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeExportTasks holds details about calls to the DescribeExportTasks method.
		DescribeExportTasks []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeExportTasksInput
		}
		// DescribeExportTasksPages holds details about calls to the DescribeExportTasksPages method.
		DescribeExportTasksPages []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeExportTasksInput
			// In2 is the in2 argument value.
			In2 func(*rds.DescribeExportTasksOutput, bool) bool
		}
		// DescribeExportTasksPagesWithContext holds details about calls to the DescribeExportTasksPagesWithContext method.
		DescribeExportTasksPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeExportTasksInput
			// In3 is the in3 argument value.
			In3 func(*rds.DescribeExportTasksOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeExportTasksRequest holds details about calls to the DescribeExportTasksRequest method.
		DescribeExportTasksRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeExportTasksInput
		}
		// DescribeExportTasksWithContext holds details about calls to the DescribeExportTasksWithContext method.
		DescribeExportTasksWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeExportTasksInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeGlobalClusters holds details about calls to the DescribeGlobalClusters method.
		DescribeGlobalClusters []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeGlobalClustersInput
		}
		// DescribeGlobalClustersPages holds details about calls to the DescribeGlobalClustersPages method.
		DescribeGlobalClustersPages []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeGlobalClustersInput
			// In2 is the in2 argument value.
			In2 func(*rds.DescribeGlobalClustersOutput, bool) bool
		}
		// DescribeGlobalClustersPagesWithContext holds details about calls to the DescribeGlobalClustersPagesWithContext method.
		DescribeGlobalClustersPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeGlobalClustersInput
			// In3 is the in3 argument value.
			In3 func(*rds.DescribeGlobalClustersOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeGlobalClustersRequest holds details about calls to the DescribeGlobalClustersRequest method.
		DescribeGlobalClustersRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeGlobalClustersInput
		}
		// DescribeGlobalClustersWithContext holds details about calls to the DescribeGlobalClustersWithContext method.
		DescribeGlobalClustersWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeGlobalClustersInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeInstallationMedia holds details about calls to the DescribeInstallationMedia method.
		DescribeInstallationMedia []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeInstallationMediaInput
		}
		// DescribeInstallationMediaPages holds details about calls to the DescribeInstallationMediaPages method.
		DescribeInstallationMediaPages []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeInstallationMediaInput
			// In2 is the in2 argument value.
			In2 func(*rds.DescribeInstallationMediaOutput, bool) bool
		}
		// DescribeInstallationMediaPagesWithContext holds details about calls to the DescribeInstallationMediaPagesWithContext method.
		DescribeInstallationMediaPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeInstallationMediaInput
			// In3 is the in3 argument value.
			In3 func(*rds.DescribeInstallationMediaOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeInstallationMediaRequest holds details about calls to the DescribeInstallationMediaRequest method.
		DescribeInstallationMediaRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeInstallationMediaInput
		}
		// DescribeInstallationMediaWithContext holds details about calls to the DescribeInstallationMediaWithContext method.
		DescribeInstallationMediaWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeInstallationMediaInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeOptionGroupOptions holds details about calls to the DescribeOptionGroupOptions method.
		DescribeOptionGroupOptions []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeOptionGroupOptionsInput
		}
		// DescribeOptionGroupOptionsPages holds details about calls to the DescribeOptionGroupOptionsPages method.
		DescribeOptionGroupOptionsPages []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeOptionGroupOptionsInput
			// In2 is the in2 argument value.
			In2 func(*rds.DescribeOptionGroupOptionsOutput, bool) bool
		}
		// DescribeOptionGroupOptionsPagesWithContext holds details about calls to the DescribeOptionGroupOptionsPagesWithContext method.
		DescribeOptionGroupOptionsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeOptionGroupOptionsInput
			// In3 is the in3 argument value.
			In3 func(*rds.DescribeOptionGroupOptionsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeOptionGroupOptionsRequest holds details about calls to the DescribeOptionGroupOptionsRequest method.
		DescribeOptionGroupOptionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeOptionGroupOptionsInput
		}
		// DescribeOptionGroupOptionsWithContext holds details about calls to the DescribeOptionGroupOptionsWithContext method.
		DescribeOptionGroupOptionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeOptionGroupOptionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeOptionGroups holds details about calls to the DescribeOptionGroups method.
		DescribeOptionGroups []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeOptionGroupsInput
		}
		// DescribeOptionGroupsPages holds details about calls to the DescribeOptionGroupsPages method.
		DescribeOptionGroupsPages []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeOptionGroupsInput
			// In2 is the in2 argument value.
			In2 func(*rds.DescribeOptionGroupsOutput, bool) bool
		}
		// DescribeOptionGroupsPagesWithContext holds details about calls to the DescribeOptionGroupsPagesWithContext method.
		DescribeOptionGroupsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeOptionGroupsInput
			// In3 is the in3 argument value.
			In3 func(*rds.DescribeOptionGroupsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeOptionGroupsRequest holds details about calls to the DescribeOptionGroupsRequest method.
		DescribeOptionGroupsRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeOptionGroupsInput
		}
		// DescribeOptionGroupsWithContext holds details about calls to the DescribeOptionGroupsWithContext method.
		DescribeOptionGroupsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeOptionGroupsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeOrderableDBInstanceOptions holds details about calls to the DescribeOrderableDBInstanceOptions method.
		DescribeOrderableDBInstanceOptions []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeOrderableDBInstanceOptionsInput
		}
		// DescribeOrderableDBInstanceOptionsPages holds details about calls to the DescribeOrderableDBInstanceOptionsPages method.
		DescribeOrderableDBInstanceOptionsPages []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeOrderableDBInstanceOptionsInput
			// In2 is the in2 argument value.
			In2 func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool
		}
		// DescribeOrderableDBInstanceOptionsPagesWithContext holds details about calls to the DescribeOrderableDBInstanceOptionsPagesWithContext method.
		DescribeOrderableDBInstanceOptionsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeOrderableDBInstanceOptionsInput
			// In3 is the in3 argument value.
			In3 func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeOrderableDBInstanceOptionsRequest holds details about calls to the DescribeOrderableDBInstanceOptionsRequest method.
		DescribeOrderableDBInstanceOptionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeOrderableDBInstanceOptionsInput
		}
		// DescribeOrderableDBInstanceOptionsWithContext holds details about calls to the DescribeOrderableDBInstanceOptionsWithContext method.
		DescribeOrderableDBInstanceOptionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeOrderableDBInstanceOptionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribePendingMaintenanceActions holds details about calls to the DescribePendingMaintenanceActions method.
		DescribePendingMaintenanceActions []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribePendingMaintenanceActionsInput
		}
		// DescribePendingMaintenanceActionsRequest holds details about calls to the DescribePendingMaintenanceActionsRequest method.
		DescribePendingMaintenanceActionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribePendingMaintenanceActionsInput
		}
		// DescribePendingMaintenanceActionsWithContext holds details about calls to the DescribePendingMaintenanceActionsWithContext method.
		DescribePendingMaintenanceActionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribePendingMaintenanceActionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeReservedDBInstances holds details about calls to the DescribeReservedDBInstances method.
		DescribeReservedDBInstances []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeReservedDBInstancesInput
		}
		// DescribeReservedDBInstancesOfferings holds details about calls to the DescribeReservedDBInstancesOfferings method.
		DescribeReservedDBInstancesOfferings []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeReservedDBInstancesOfferingsInput
		}
		// DescribeReservedDBInstancesOfferingsPages holds details about calls to the DescribeReservedDBInstancesOfferingsPages method.
		DescribeReservedDBInstancesOfferingsPages []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeReservedDBInstancesOfferingsInput
			// In2 is the in2 argument value.
			In2 func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool
		}
		// DescribeReservedDBInstancesOfferingsPagesWithContext holds details about calls to the DescribeReservedDBInstancesOfferingsPagesWithContext method.
		DescribeReservedDBInstancesOfferingsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeReservedDBInstancesOfferingsInput
			// In3 is the in3 argument value.
			In3 func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeReservedDBInstancesOfferingsRequest holds details about calls to the DescribeReservedDBInstancesOfferingsRequest method.
		DescribeReservedDBInstancesOfferingsRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeReservedDBInstancesOfferingsInput
		}
		// DescribeReservedDBInstancesOfferingsWithContext holds details about calls to the DescribeReservedDBInstancesOfferingsWithContext method.
		DescribeReservedDBInstancesOfferingsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeReservedDBInstancesOfferingsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeReservedDBInstancesPages holds details about calls to the DescribeReservedDBInstancesPages method.
		DescribeReservedDBInstancesPages []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeReservedDBInstancesInput
			// In2 is the in2 argument value.
			In2 func(*rds.DescribeReservedDBInstancesOutput, bool) bool
		}
		// DescribeReservedDBInstancesPagesWithContext holds details about calls to the DescribeReservedDBInstancesPagesWithContext method.
		DescribeReservedDBInstancesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeReservedDBInstancesInput
			// In3 is the in3 argument value.
			In3 func(*rds.DescribeReservedDBInstancesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DescribeReservedDBInstancesRequest holds details about calls to the DescribeReservedDBInstancesRequest method.
		DescribeReservedDBInstancesRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeReservedDBInstancesInput
		}
		// DescribeReservedDBInstancesWithContext holds details about calls to the DescribeReservedDBInstancesWithContext method.
		DescribeReservedDBInstancesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeReservedDBInstancesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeSourceRegions holds details about calls to the DescribeSourceRegions method.
		DescribeSourceRegions []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeSourceRegionsInput
		}
		// DescribeSourceRegionsRequest holds details about calls to the DescribeSourceRegionsRequest method.
		DescribeSourceRegionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeSourceRegionsInput
		}
		// DescribeSourceRegionsWithContext holds details about calls to the DescribeSourceRegionsWithContext method.
		DescribeSourceRegionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeSourceRegionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DescribeValidDBInstanceModifications holds details about calls to the DescribeValidDBInstanceModifications method.
		DescribeValidDBInstanceModifications []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeValidDBInstanceModificationsInput
		}
		// DescribeValidDBInstanceModificationsRequest holds details about calls to the DescribeValidDBInstanceModificationsRequest method.
		DescribeValidDBInstanceModificationsRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeValidDBInstanceModificationsInput
		}
		// DescribeValidDBInstanceModificationsWithContext holds details about calls to the DescribeValidDBInstanceModificationsWithContext method.
		DescribeValidDBInstanceModificationsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeValidDBInstanceModificationsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DownloadDBLogFilePortion holds details about calls to the DownloadDBLogFilePortion method.
		DownloadDBLogFilePortion []struct {
			// In1 is the in1 argument value.
			In1 *rds.DownloadDBLogFilePortionInput
		}
		// DownloadDBLogFilePortionPages holds details about calls to the DownloadDBLogFilePortionPages method.
		DownloadDBLogFilePortionPages []struct {
			// In1 is the in1 argument value.
			In1 *rds.DownloadDBLogFilePortionInput
			// In2 is the in2 argument value.
			In2 func(*rds.DownloadDBLogFilePortionOutput, bool) bool
		}
		// DownloadDBLogFilePortionPagesWithContext holds details about calls to the DownloadDBLogFilePortionPagesWithContext method.
		DownloadDBLogFilePortionPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DownloadDBLogFilePortionInput
			// In3 is the in3 argument value.
			In3 func(*rds.DownloadDBLogFilePortionOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// DownloadDBLogFilePortionRequest holds details about calls to the DownloadDBLogFilePortionRequest method.
		DownloadDBLogFilePortionRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.DownloadDBLogFilePortionInput
		}
		// DownloadDBLogFilePortionWithContext holds details about calls to the DownloadDBLogFilePortionWithContext method.
		DownloadDBLogFilePortionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DownloadDBLogFilePortionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// FailoverDBCluster holds details about calls to the FailoverDBCluster method.
		FailoverDBCluster []struct {
			// In1 is the in1 argument value.
			In1 *rds.FailoverDBClusterInput
		}
		// FailoverDBClusterRequest holds details about calls to the FailoverDBClusterRequest method.
		FailoverDBClusterRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.FailoverDBClusterInput
		}
		// FailoverDBClusterWithContext holds details about calls to the FailoverDBClusterWithContext method.
		FailoverDBClusterWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.FailoverDBClusterInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ImportInstallationMedia holds details about calls to the ImportInstallationMedia method.
		ImportInstallationMedia []struct {
			// In1 is the in1 argument value.
			In1 *rds.ImportInstallationMediaInput
		}
		// ImportInstallationMediaRequest holds details about calls to the ImportInstallationMediaRequest method.
		ImportInstallationMediaRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.ImportInstallationMediaInput
		}
		// ImportInstallationMediaWithContext holds details about calls to the ImportInstallationMediaWithContext method.
		ImportInstallationMediaWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.ImportInstallationMediaInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListTagsForResource holds details about calls to the ListTagsForResource method.
		ListTagsForResource []struct {
			// In1 is the in1 argument value.
			In1 *rds.ListTagsForResourceInput
		}
		// ListTagsForResourceRequest holds details about calls to the ListTagsForResourceRequest method.
		ListTagsForResourceRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.ListTagsForResourceInput
		}
		// ListTagsForResourceWithContext holds details about calls to the ListTagsForResourceWithContext method.
		ListTagsForResourceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.ListTagsForResourceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyCertificates holds details about calls to the ModifyCertificates method.
		ModifyCertificates []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyCertificatesInput
		}
		// ModifyCertificatesRequest holds details about calls to the ModifyCertificatesRequest method.
		ModifyCertificatesRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyCertificatesInput
		}
		// ModifyCertificatesWithContext holds details about calls to the ModifyCertificatesWithContext method.
		ModifyCertificatesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.ModifyCertificatesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyCurrentDBClusterCapacity holds details about calls to the ModifyCurrentDBClusterCapacity method.
		ModifyCurrentDBClusterCapacity []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyCurrentDBClusterCapacityInput
		}
		// ModifyCurrentDBClusterCapacityRequest holds details about calls to the ModifyCurrentDBClusterCapacityRequest method.
		ModifyCurrentDBClusterCapacityRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyCurrentDBClusterCapacityInput
		}
		// ModifyCurrentDBClusterCapacityWithContext holds details about calls to the ModifyCurrentDBClusterCapacityWithContext method.
		ModifyCurrentDBClusterCapacityWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.ModifyCurrentDBClusterCapacityInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyDBCluster holds details about calls to the ModifyDBCluster method.
		ModifyDBCluster []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyDBClusterInput
		}
		// ModifyDBClusterEndpoint holds details about calls to the ModifyDBClusterEndpoint method.
		ModifyDBClusterEndpoint []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyDBClusterEndpointInput
		}
		// ModifyDBClusterEndpointRequest holds details about calls to the ModifyDBClusterEndpointRequest method.
		ModifyDBClusterEndpointRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyDBClusterEndpointInput
		}
		// ModifyDBClusterEndpointWithContext holds details about calls to the ModifyDBClusterEndpointWithContext method.
		ModifyDBClusterEndpointWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.ModifyDBClusterEndpointInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyDBClusterParameterGroup holds details about calls to the ModifyDBClusterParameterGroup method.
		ModifyDBClusterParameterGroup []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyDBClusterParameterGroupInput
		}
		// ModifyDBClusterParameterGroupRequest holds details about calls to the ModifyDBClusterParameterGroupRequest method.
		ModifyDBClusterParameterGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyDBClusterParameterGroupInput
		}
		// ModifyDBClusterParameterGroupWithContext holds details about calls to the ModifyDBClusterParameterGroupWithContext method.
		ModifyDBClusterParameterGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.ModifyDBClusterParameterGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyDBClusterRequest holds details about calls to the ModifyDBClusterRequest method.
		ModifyDBClusterRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyDBClusterInput
		}
		// ModifyDBClusterSnapshotAttribute holds details about calls to the ModifyDBClusterSnapshotAttribute method.
		ModifyDBClusterSnapshotAttribute []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyDBClusterSnapshotAttributeInput
		}
		// ModifyDBClusterSnapshotAttributeRequest holds details about calls to the ModifyDBClusterSnapshotAttributeRequest method.
		ModifyDBClusterSnapshotAttributeRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyDBClusterSnapshotAttributeInput
		}
		// ModifyDBClusterSnapshotAttributeWithContext holds details about calls to the ModifyDBClusterSnapshotAttributeWithContext method.
		ModifyDBClusterSnapshotAttributeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.ModifyDBClusterSnapshotAttributeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyDBClusterWithContext holds details about calls to the ModifyDBClusterWithContext method.
		ModifyDBClusterWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.ModifyDBClusterInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyDBInstance holds details about calls to the ModifyDBInstance method.
		ModifyDBInstance []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyDBInstanceInput
		}
		// ModifyDBInstanceRequest holds details about calls to the ModifyDBInstanceRequest method.
		ModifyDBInstanceRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyDBInstanceInput
		}
		// ModifyDBInstanceWithContext holds details about calls to the ModifyDBInstanceWithContext method.
		ModifyDBInstanceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.ModifyDBInstanceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyDBParameterGroup holds details about calls to the ModifyDBParameterGroup method.
		ModifyDBParameterGroup []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyDBParameterGroupInput
		}
		// ModifyDBParameterGroupRequest holds details about calls to the ModifyDBParameterGroupRequest method.
		ModifyDBParameterGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyDBParameterGroupInput
		}
		// ModifyDBParameterGroupWithContext holds details about calls to the ModifyDBParameterGroupWithContext method.
		ModifyDBParameterGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.ModifyDBParameterGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyDBProxy holds details about calls to the ModifyDBProxy method.
		ModifyDBProxy []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyDBProxyInput
		}
		// ModifyDBProxyRequest holds details about calls to the ModifyDBProxyRequest method.
		ModifyDBProxyRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyDBProxyInput
		}
		// ModifyDBProxyTargetGroup holds details about calls to the ModifyDBProxyTargetGroup method.
		ModifyDBProxyTargetGroup []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyDBProxyTargetGroupInput
		}
		// ModifyDBProxyTargetGroupRequest holds details about calls to the ModifyDBProxyTargetGroupRequest method.
		ModifyDBProxyTargetGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyDBProxyTargetGroupInput
		}
		// ModifyDBProxyTargetGroupWithContext holds details about calls to the ModifyDBProxyTargetGroupWithContext method.
		ModifyDBProxyTargetGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.ModifyDBProxyTargetGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyDBProxyWithContext holds details about calls to the ModifyDBProxyWithContext method.
		ModifyDBProxyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.ModifyDBProxyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyDBSnapshot holds details about calls to the ModifyDBSnapshot method.
		ModifyDBSnapshot []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyDBSnapshotInput
		}
		// ModifyDBSnapshotAttribute holds details about calls to the ModifyDBSnapshotAttribute method.
		ModifyDBSnapshotAttribute []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyDBSnapshotAttributeInput
		}
		// ModifyDBSnapshotAttributeRequest holds details about calls to the ModifyDBSnapshotAttributeRequest method.
		ModifyDBSnapshotAttributeRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyDBSnapshotAttributeInput
		}
		// ModifyDBSnapshotAttributeWithContext holds details about calls to the ModifyDBSnapshotAttributeWithContext method.
		ModifyDBSnapshotAttributeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.ModifyDBSnapshotAttributeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyDBSnapshotRequest holds details about calls to the ModifyDBSnapshotRequest method.
		ModifyDBSnapshotRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyDBSnapshotInput
		}
		// ModifyDBSnapshotWithContext holds details about calls to the ModifyDBSnapshotWithContext method.
		ModifyDBSnapshotWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.ModifyDBSnapshotInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyDBSubnetGroup holds details about calls to the ModifyDBSubnetGroup method.
		ModifyDBSubnetGroup []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyDBSubnetGroupInput
		}
		// ModifyDBSubnetGroupRequest holds details about calls to the ModifyDBSubnetGroupRequest method.
		ModifyDBSubnetGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyDBSubnetGroupInput
		}
		// ModifyDBSubnetGroupWithContext holds details about calls to the ModifyDBSubnetGroupWithContext method.
		ModifyDBSubnetGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.ModifyDBSubnetGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyEventSubscription holds details about calls to the ModifyEventSubscription method.
		ModifyEventSubscription []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyEventSubscriptionInput
		}
		// ModifyEventSubscriptionRequest holds details about calls to the ModifyEventSubscriptionRequest method.
		ModifyEventSubscriptionRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyEventSubscriptionInput
		}
		// ModifyEventSubscriptionWithContext holds details about calls to the ModifyEventSubscriptionWithContext method.
		ModifyEventSubscriptionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.ModifyEventSubscriptionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyGlobalCluster holds details about calls to the ModifyGlobalCluster method.
		ModifyGlobalCluster []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyGlobalClusterInput
		}
		// ModifyGlobalClusterRequest holds details about calls to the ModifyGlobalClusterRequest method.
		ModifyGlobalClusterRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyGlobalClusterInput
		}
		// ModifyGlobalClusterWithContext holds details about calls to the ModifyGlobalClusterWithContext method.
		ModifyGlobalClusterWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.ModifyGlobalClusterInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ModifyOptionGroup holds details about calls to the ModifyOptionGroup method.
		ModifyOptionGroup []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyOptionGroupInput
		}
		// ModifyOptionGroupRequest holds details about calls to the ModifyOptionGroupRequest method.
		ModifyOptionGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.ModifyOptionGroupInput
		}
		// ModifyOptionGroupWithContext holds details about calls to the ModifyOptionGroupWithContext method.
		ModifyOptionGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.ModifyOptionGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PromoteReadReplica holds details about calls to the PromoteReadReplica method.
		PromoteReadReplica []struct {
			// In1 is the in1 argument value.
			In1 *rds.PromoteReadReplicaInput
		}
		// PromoteReadReplicaDBCluster holds details about calls to the PromoteReadReplicaDBCluster method.
		PromoteReadReplicaDBCluster []struct {
			// In1 is the in1 argument value.
			In1 *rds.PromoteReadReplicaDBClusterInput
		}
		// PromoteReadReplicaDBClusterRequest holds details about calls to the PromoteReadReplicaDBClusterRequest method.
		PromoteReadReplicaDBClusterRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.PromoteReadReplicaDBClusterInput
		}
		// PromoteReadReplicaDBClusterWithContext holds details about calls to the PromoteReadReplicaDBClusterWithContext method.
		PromoteReadReplicaDBClusterWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.PromoteReadReplicaDBClusterInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PromoteReadReplicaRequest holds details about calls to the PromoteReadReplicaRequest method.
		PromoteReadReplicaRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.PromoteReadReplicaInput
		}
		// PromoteReadReplicaWithContext holds details about calls to the PromoteReadReplicaWithContext method.
		PromoteReadReplicaWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.PromoteReadReplicaInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// PurchaseReservedDBInstancesOffering holds details about calls to the PurchaseReservedDBInstancesOffering method.
		PurchaseReservedDBInstancesOffering []struct {
			// In1 is the in1 argument value.
			In1 *rds.PurchaseReservedDBInstancesOfferingInput
		}
		// PurchaseReservedDBInstancesOfferingRequest holds details about calls to the PurchaseReservedDBInstancesOfferingRequest method.
		PurchaseReservedDBInstancesOfferingRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.PurchaseReservedDBInstancesOfferingInput
		}
		// PurchaseReservedDBInstancesOfferingWithContext holds details about calls to the PurchaseReservedDBInstancesOfferingWithContext method.
		PurchaseReservedDBInstancesOfferingWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.PurchaseReservedDBInstancesOfferingInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RebootDBInstance holds details about calls to the RebootDBInstance method.
		RebootDBInstance []struct {
			// In1 is the in1 argument value.
			In1 *rds.RebootDBInstanceInput
		}
		// RebootDBInstanceRequest holds details about calls to the RebootDBInstanceRequest method.
		RebootDBInstanceRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.RebootDBInstanceInput
		}
		// RebootDBInstanceWithContext holds details about calls to the RebootDBInstanceWithContext method.
		RebootDBInstanceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.RebootDBInstanceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RegisterDBProxyTargets holds details about calls to the RegisterDBProxyTargets method.
		RegisterDBProxyTargets []struct {
			// In1 is the in1 argument value.
			In1 *rds.RegisterDBProxyTargetsInput
		}
		// RegisterDBProxyTargetsRequest holds details about calls to the RegisterDBProxyTargetsRequest method.
		RegisterDBProxyTargetsRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.RegisterDBProxyTargetsInput
		}
		// RegisterDBProxyTargetsWithContext holds details about calls to the RegisterDBProxyTargetsWithContext method.
		RegisterDBProxyTargetsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.RegisterDBProxyTargetsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RemoveFromGlobalCluster holds details about calls to the RemoveFromGlobalCluster method.
		RemoveFromGlobalCluster []struct {
			// In1 is the in1 argument value.
			In1 *rds.RemoveFromGlobalClusterInput
		}
		// RemoveFromGlobalClusterRequest holds details about calls to the RemoveFromGlobalClusterRequest method.
		RemoveFromGlobalClusterRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.RemoveFromGlobalClusterInput
		}
		// RemoveFromGlobalClusterWithContext holds details about calls to the RemoveFromGlobalClusterWithContext method.
		RemoveFromGlobalClusterWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.RemoveFromGlobalClusterInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RemoveRoleFromDBCluster holds details about calls to the RemoveRoleFromDBCluster method.
		RemoveRoleFromDBCluster []struct {
			// In1 is the in1 argument value.
			In1 *rds.RemoveRoleFromDBClusterInput
		}
		// RemoveRoleFromDBClusterRequest holds details about calls to the RemoveRoleFromDBClusterRequest method.
		RemoveRoleFromDBClusterRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.RemoveRoleFromDBClusterInput
		}
		// RemoveRoleFromDBClusterWithContext holds details about calls to the RemoveRoleFromDBClusterWithContext method.
		RemoveRoleFromDBClusterWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.RemoveRoleFromDBClusterInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RemoveRoleFromDBInstance holds details about calls to the RemoveRoleFromDBInstance method.
		RemoveRoleFromDBInstance []struct {
			// In1 is the in1 argument value.
			In1 *rds.RemoveRoleFromDBInstanceInput
		}
		// RemoveRoleFromDBInstanceRequest holds details about calls to the RemoveRoleFromDBInstanceRequest method.
		RemoveRoleFromDBInstanceRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.RemoveRoleFromDBInstanceInput
		}
		// RemoveRoleFromDBInstanceWithContext holds details about calls to the RemoveRoleFromDBInstanceWithContext method.
		RemoveRoleFromDBInstanceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.RemoveRoleFromDBInstanceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RemoveSourceIdentifierFromSubscription holds details about calls to the RemoveSourceIdentifierFromSubscription method.
		RemoveSourceIdentifierFromSubscription []struct {
			// In1 is the in1 argument value.
			In1 *rds.RemoveSourceIdentifierFromSubscriptionInput
		}
		// RemoveSourceIdentifierFromSubscriptionRequest holds details about calls to the RemoveSourceIdentifierFromSubscriptionRequest method.
		RemoveSourceIdentifierFromSubscriptionRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.RemoveSourceIdentifierFromSubscriptionInput
		}
		// RemoveSourceIdentifierFromSubscriptionWithContext holds details about calls to the RemoveSourceIdentifierFromSubscriptionWithContext method.
		RemoveSourceIdentifierFromSubscriptionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.RemoveSourceIdentifierFromSubscriptionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RemoveTagsFromResource holds details about calls to the RemoveTagsFromResource method.
		RemoveTagsFromResource []struct {
			// In1 is the in1 argument value.
			In1 *rds.RemoveTagsFromResourceInput
		}
		// RemoveTagsFromResourceRequest holds details about calls to the RemoveTagsFromResourceRequest method.
		RemoveTagsFromResourceRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.RemoveTagsFromResourceInput
		}
		// RemoveTagsFromResourceWithContext holds details about calls to the RemoveTagsFromResourceWithContext method.
		RemoveTagsFromResourceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.RemoveTagsFromResourceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ResetDBClusterParameterGroup holds details about calls to the ResetDBClusterParameterGroup method.
		ResetDBClusterParameterGroup []struct {
			// In1 is the in1 argument value.
			In1 *rds.ResetDBClusterParameterGroupInput
		}
		// ResetDBClusterParameterGroupRequest holds details about calls to the ResetDBClusterParameterGroupRequest method.
		ResetDBClusterParameterGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.ResetDBClusterParameterGroupInput
		}
		// ResetDBClusterParameterGroupWithContext holds details about calls to the ResetDBClusterParameterGroupWithContext method.
		ResetDBClusterParameterGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.ResetDBClusterParameterGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ResetDBParameterGroup holds details about calls to the ResetDBParameterGroup method.
		ResetDBParameterGroup []struct {
			// In1 is the in1 argument value.
			In1 *rds.ResetDBParameterGroupInput
		}
		// ResetDBParameterGroupRequest holds details about calls to the ResetDBParameterGroupRequest method.
		ResetDBParameterGroupRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.ResetDBParameterGroupInput
		}
		// ResetDBParameterGroupWithContext holds details about calls to the ResetDBParameterGroupWithContext method.
		ResetDBParameterGroupWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.ResetDBParameterGroupInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RestoreDBClusterFromS3 holds details about calls to the RestoreDBClusterFromS3 method.
		RestoreDBClusterFromS3 []struct {
			// In1 is the in1 argument value.
			In1 *rds.RestoreDBClusterFromS3Input
		}
		// RestoreDBClusterFromS3Request holds details about calls to the RestoreDBClusterFromS3Request method.
		RestoreDBClusterFromS3Request []struct {
			// In1 is the in1 argument value.
			In1 *rds.RestoreDBClusterFromS3Input
		}
		// RestoreDBClusterFromS3WithContext holds details about calls to the RestoreDBClusterFromS3WithContext method.
		RestoreDBClusterFromS3WithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.RestoreDBClusterFromS3Input
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RestoreDBClusterFromSnapshot holds details about calls to the RestoreDBClusterFromSnapshot method.
		RestoreDBClusterFromSnapshot []struct {
			// In1 is the in1 argument value.
			In1 *rds.RestoreDBClusterFromSnapshotInput
		}
		// RestoreDBClusterFromSnapshotRequest holds details about calls to the RestoreDBClusterFromSnapshotRequest method.
		RestoreDBClusterFromSnapshotRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.RestoreDBClusterFromSnapshotInput
		}
		// RestoreDBClusterFromSnapshotWithContext holds details about calls to the RestoreDBClusterFromSnapshotWithContext method.
		RestoreDBClusterFromSnapshotWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.RestoreDBClusterFromSnapshotInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RestoreDBClusterToPointInTime holds details about calls to the RestoreDBClusterToPointInTime method.
		RestoreDBClusterToPointInTime []struct {
			// In1 is the in1 argument value.
			In1 *rds.RestoreDBClusterToPointInTimeInput
		}
		// RestoreDBClusterToPointInTimeRequest holds details about calls to the RestoreDBClusterToPointInTimeRequest method.
		RestoreDBClusterToPointInTimeRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.RestoreDBClusterToPointInTimeInput
		}
		// RestoreDBClusterToPointInTimeWithContext holds details about calls to the RestoreDBClusterToPointInTimeWithContext method.
		RestoreDBClusterToPointInTimeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.RestoreDBClusterToPointInTimeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RestoreDBInstanceFromDBSnapshot holds details about calls to the RestoreDBInstanceFromDBSnapshot method.
		RestoreDBInstanceFromDBSnapshot []struct {
			// In1 is the in1 argument value.
			In1 *rds.RestoreDBInstanceFromDBSnapshotInput
		}
		// RestoreDBInstanceFromDBSnapshotRequest holds details about calls to the RestoreDBInstanceFromDBSnapshotRequest method.
		RestoreDBInstanceFromDBSnapshotRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.RestoreDBInstanceFromDBSnapshotInput
		}
		// RestoreDBInstanceFromDBSnapshotWithContext holds details about calls to the RestoreDBInstanceFromDBSnapshotWithContext method.
		RestoreDBInstanceFromDBSnapshotWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.RestoreDBInstanceFromDBSnapshotInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RestoreDBInstanceFromS3 holds details about calls to the RestoreDBInstanceFromS3 method.
		RestoreDBInstanceFromS3 []struct {
			// In1 is the in1 argument value.
			In1 *rds.RestoreDBInstanceFromS3Input
		}
		// RestoreDBInstanceFromS3Request holds details about calls to the RestoreDBInstanceFromS3Request method.
		RestoreDBInstanceFromS3Request []struct {
			// In1 is the in1 argument value.
			In1 *rds.RestoreDBInstanceFromS3Input
		}
		// RestoreDBInstanceFromS3WithContext holds details about calls to the RestoreDBInstanceFromS3WithContext method.
		RestoreDBInstanceFromS3WithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.RestoreDBInstanceFromS3Input
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RestoreDBInstanceToPointInTime holds details about calls to the RestoreDBInstanceToPointInTime method.
		RestoreDBInstanceToPointInTime []struct {
			// In1 is the in1 argument value.
			In1 *rds.RestoreDBInstanceToPointInTimeInput
		}
		// RestoreDBInstanceToPointInTimeRequest holds details about calls to the RestoreDBInstanceToPointInTimeRequest method.
		RestoreDBInstanceToPointInTimeRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.RestoreDBInstanceToPointInTimeInput
		}
		// RestoreDBInstanceToPointInTimeWithContext holds details about calls to the RestoreDBInstanceToPointInTimeWithContext method.
		RestoreDBInstanceToPointInTimeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.RestoreDBInstanceToPointInTimeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// RevokeDBSecurityGroupIngress holds details about calls to the RevokeDBSecurityGroupIngress method.
		RevokeDBSecurityGroupIngress []struct {
			// In1 is the in1 argument value.
			In1 *rds.RevokeDBSecurityGroupIngressInput
		}
		// RevokeDBSecurityGroupIngressRequest holds details about calls to the RevokeDBSecurityGroupIngressRequest method.
		RevokeDBSecurityGroupIngressRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.RevokeDBSecurityGroupIngressInput
		}
		// RevokeDBSecurityGroupIngressWithContext holds details about calls to the RevokeDBSecurityGroupIngressWithContext method.
		RevokeDBSecurityGroupIngressWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.RevokeDBSecurityGroupIngressInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// StartActivityStream holds details about calls to the StartActivityStream method.
		StartActivityStream []struct {
			// In1 is the in1 argument value.
			In1 *rds.StartActivityStreamInput
		}
		// StartActivityStreamRequest holds details about calls to the StartActivityStreamRequest method.
		StartActivityStreamRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.StartActivityStreamInput
		}
		// StartActivityStreamWithContext holds details about calls to the StartActivityStreamWithContext method.
		StartActivityStreamWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.StartActivityStreamInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// StartDBCluster holds details about calls to the StartDBCluster method.
		StartDBCluster []struct {
			// In1 is the in1 argument value.
			In1 *rds.StartDBClusterInput
		}
		// StartDBClusterRequest holds details about calls to the StartDBClusterRequest method.
		StartDBClusterRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.StartDBClusterInput
		}
		// StartDBClusterWithContext holds details about calls to the StartDBClusterWithContext method.
		StartDBClusterWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.StartDBClusterInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// StartDBInstance holds details about calls to the StartDBInstance method.
		StartDBInstance []struct {
			// In1 is the in1 argument value.
			In1 *rds.StartDBInstanceInput
		}
		// StartDBInstanceRequest holds details about calls to the StartDBInstanceRequest method.
		StartDBInstanceRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.StartDBInstanceInput
		}
		// StartDBInstanceWithContext holds details about calls to the StartDBInstanceWithContext method.
		StartDBInstanceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.StartDBInstanceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// StartExportTask holds details about calls to the StartExportTask method.
		StartExportTask []struct {
			// In1 is the in1 argument value.
			In1 *rds.StartExportTaskInput
		}
		// StartExportTaskRequest holds details about calls to the StartExportTaskRequest method.
		StartExportTaskRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.StartExportTaskInput
		}
		// StartExportTaskWithContext holds details about calls to the StartExportTaskWithContext method.
		StartExportTaskWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.StartExportTaskInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// StopActivityStream holds details about calls to the StopActivityStream method.
		StopActivityStream []struct {
			// In1 is the in1 argument value.
			In1 *rds.StopActivityStreamInput
		}
		// StopActivityStreamRequest holds details about calls to the StopActivityStreamRequest method.
		StopActivityStreamRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.StopActivityStreamInput
		}
		// StopActivityStreamWithContext holds details about calls to the StopActivityStreamWithContext method.
		StopActivityStreamWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.StopActivityStreamInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// StopDBCluster holds details about calls to the StopDBCluster method.
		StopDBCluster []struct {
			// In1 is the in1 argument value.
			In1 *rds.StopDBClusterInput
		}
		// StopDBClusterRequest holds details about calls to the StopDBClusterRequest method.
		StopDBClusterRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.StopDBClusterInput
		}
		// StopDBClusterWithContext holds details about calls to the StopDBClusterWithContext method.
		StopDBClusterWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.StopDBClusterInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// StopDBInstance holds details about calls to the StopDBInstance method.
		StopDBInstance []struct {
			// In1 is the in1 argument value.
			In1 *rds.StopDBInstanceInput
		}
		// StopDBInstanceRequest holds details about calls to the StopDBInstanceRequest method.
		StopDBInstanceRequest []struct {
			// In1 is the in1 argument value.
			In1 *rds.StopDBInstanceInput
		}
		// StopDBInstanceWithContext holds details about calls to the StopDBInstanceWithContext method.
		StopDBInstanceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.StopDBInstanceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// WaitUntilDBClusterSnapshotAvailable holds details about calls to the WaitUntilDBClusterSnapshotAvailable method.
		WaitUntilDBClusterSnapshotAvailable []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBClusterSnapshotsInput
		}
		// WaitUntilDBClusterSnapshotAvailableWithContext holds details about calls to the WaitUntilDBClusterSnapshotAvailableWithContext method.
		WaitUntilDBClusterSnapshotAvailableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBClusterSnapshotsInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilDBClusterSnapshotDeleted holds details about calls to the WaitUntilDBClusterSnapshotDeleted method.
		WaitUntilDBClusterSnapshotDeleted []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBClusterSnapshotsInput
		}
		// WaitUntilDBClusterSnapshotDeletedWithContext holds details about calls to the WaitUntilDBClusterSnapshotDeletedWithContext method.
		WaitUntilDBClusterSnapshotDeletedWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBClusterSnapshotsInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilDBInstanceAvailable holds details about calls to the WaitUntilDBInstanceAvailable method.
		WaitUntilDBInstanceAvailable []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBInstancesInput
		}
		// WaitUntilDBInstanceAvailableWithContext holds details about calls to the WaitUntilDBInstanceAvailableWithContext method.
		WaitUntilDBInstanceAvailableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBInstancesInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilDBInstanceDeleted holds details about calls to the WaitUntilDBInstanceDeleted method.
		WaitUntilDBInstanceDeleted []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBInstancesInput
		}
		// WaitUntilDBInstanceDeletedWithContext holds details about calls to the WaitUntilDBInstanceDeletedWithContext method.
		WaitUntilDBInstanceDeletedWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBInstancesInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilDBSnapshotAvailable holds details about calls to the WaitUntilDBSnapshotAvailable method.
		WaitUntilDBSnapshotAvailable []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBSnapshotsInput
		}
		// WaitUntilDBSnapshotAvailableWithContext holds details about calls to the WaitUntilDBSnapshotAvailableWithContext method.
		WaitUntilDBSnapshotAvailableWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBSnapshotsInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
		// WaitUntilDBSnapshotDeleted holds details about calls to the WaitUntilDBSnapshotDeleted method.
		WaitUntilDBSnapshotDeleted []struct {
			// In1 is the in1 argument value.
			In1 *rds.DescribeDBSnapshotsInput
		}
		// WaitUntilDBSnapshotDeletedWithContext holds details about calls to the WaitUntilDBSnapshotDeletedWithContext method.
		WaitUntilDBSnapshotDeletedWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *rds.DescribeDBSnapshotsInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
	}
}

// AddRoleToDBCluster calls AddRoleToDBClusterFunc.
func (mock *rdsClientMock) AddRoleToDBCluster(in1 *rds.AddRoleToDBClusterInput) (*rds.AddRoleToDBClusterOutput, error) {
	if mock.AddRoleToDBClusterFunc == nil {
		panic("rdsClientMock.AddRoleToDBClusterFunc: method is nil but rdsClient.AddRoleToDBCluster was just called")
	}
	callInfo := struct {
		In1 *rds.AddRoleToDBClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockAddRoleToDBCluster.Lock()
	mock.calls.AddRoleToDBCluster = append(mock.calls.AddRoleToDBCluster, callInfo)
	lockrdsClientMockAddRoleToDBCluster.Unlock()
	return mock.AddRoleToDBClusterFunc(in1)
}

// AddRoleToDBClusterCalls gets all the calls that were made to AddRoleToDBCluster.
// Check the length with:
//     len(mockedrdsClient.AddRoleToDBClusterCalls())
func (mock *rdsClientMock) AddRoleToDBClusterCalls() []struct {
	In1 *rds.AddRoleToDBClusterInput
} {
	var calls []struct {
		In1 *rds.AddRoleToDBClusterInput
	}
	lockrdsClientMockAddRoleToDBCluster.RLock()
	calls = mock.calls.AddRoleToDBCluster
	lockrdsClientMockAddRoleToDBCluster.RUnlock()
	return calls
}

// AddRoleToDBClusterRequest calls AddRoleToDBClusterRequestFunc.
func (mock *rdsClientMock) AddRoleToDBClusterRequest(in1 *rds.AddRoleToDBClusterInput) (*request.Request, *rds.AddRoleToDBClusterOutput) {
	if mock.AddRoleToDBClusterRequestFunc == nil {
		panic("rdsClientMock.AddRoleToDBClusterRequestFunc: method is nil but rdsClient.AddRoleToDBClusterRequest was just called")
	}
	callInfo := struct {
		In1 *rds.AddRoleToDBClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockAddRoleToDBClusterRequest.Lock()
	mock.calls.AddRoleToDBClusterRequest = append(mock.calls.AddRoleToDBClusterRequest, callInfo)
	lockrdsClientMockAddRoleToDBClusterRequest.Unlock()
	return mock.AddRoleToDBClusterRequestFunc(in1)
}

// AddRoleToDBClusterRequestCalls gets all the calls that were made to AddRoleToDBClusterRequest.
// Check the length with:
//     len(mockedrdsClient.AddRoleToDBClusterRequestCalls())
func (mock *rdsClientMock) AddRoleToDBClusterRequestCalls() []struct {
	In1 *rds.AddRoleToDBClusterInput
} {
	var calls []struct {
		In1 *rds.AddRoleToDBClusterInput
	}
	lockrdsClientMockAddRoleToDBClusterRequest.RLock()
	calls = mock.calls.AddRoleToDBClusterRequest
	lockrdsClientMockAddRoleToDBClusterRequest.RUnlock()
	return calls
}

// AddRoleToDBClusterWithContext calls AddRoleToDBClusterWithContextFunc.
func (mock *rdsClientMock) AddRoleToDBClusterWithContext(in1 context.Context, in2 *rds.AddRoleToDBClusterInput, in3 ...request.Option) (*rds.AddRoleToDBClusterOutput, error) {
	if mock.AddRoleToDBClusterWithContextFunc == nil {
		panic("rdsClientMock.AddRoleToDBClusterWithContextFunc: method is nil but rdsClient.AddRoleToDBClusterWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.AddRoleToDBClusterInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockAddRoleToDBClusterWithContext.Lock()
	mock.calls.AddRoleToDBClusterWithContext = append(mock.calls.AddRoleToDBClusterWithContext, callInfo)
	lockrdsClientMockAddRoleToDBClusterWithContext.Unlock()
	return mock.AddRoleToDBClusterWithContextFunc(in1, in2, in3...)
}

// AddRoleToDBClusterWithContextCalls gets all the calls that were made to AddRoleToDBClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.AddRoleToDBClusterWithContextCalls())
func (mock *rdsClientMock) AddRoleToDBClusterWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.AddRoleToDBClusterInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.AddRoleToDBClusterInput
		In3 []request.Option
	}
	lockrdsClientMockAddRoleToDBClusterWithContext.RLock()
	calls = mock.calls.AddRoleToDBClusterWithContext
	lockrdsClientMockAddRoleToDBClusterWithContext.RUnlock()
	return calls
}

// AddRoleToDBInstance calls AddRoleToDBInstanceFunc.
func (mock *rdsClientMock) AddRoleToDBInstance(in1 *rds.AddRoleToDBInstanceInput) (*rds.AddRoleToDBInstanceOutput, error) {
	if mock.AddRoleToDBInstanceFunc == nil {
		panic("rdsClientMock.AddRoleToDBInstanceFunc: method is nil but rdsClient.AddRoleToDBInstance was just called")
	}
	callInfo := struct {
		In1 *rds.AddRoleToDBInstanceInput
	}{
		In1: in1,
	}
	lockrdsClientMockAddRoleToDBInstance.Lock()
	mock.calls.AddRoleToDBInstance = append(mock.calls.AddRoleToDBInstance, callInfo)
	lockrdsClientMockAddRoleToDBInstance.Unlock()
	return mock.AddRoleToDBInstanceFunc(in1)
}

// AddRoleToDBInstanceCalls gets all the calls that were made to AddRoleToDBInstance.
// Check the length with:
//     len(mockedrdsClient.AddRoleToDBInstanceCalls())
func (mock *rdsClientMock) AddRoleToDBInstanceCalls() []struct {
	In1 *rds.AddRoleToDBInstanceInput
} {
	var calls []struct {
		In1 *rds.AddRoleToDBInstanceInput
	}
	lockrdsClientMockAddRoleToDBInstance.RLock()
	calls = mock.calls.AddRoleToDBInstance
	lockrdsClientMockAddRoleToDBInstance.RUnlock()
	return calls
}

// AddRoleToDBInstanceRequest calls AddRoleToDBInstanceRequestFunc.
func (mock *rdsClientMock) AddRoleToDBInstanceRequest(in1 *rds.AddRoleToDBInstanceInput) (*request.Request, *rds.AddRoleToDBInstanceOutput) {
	if mock.AddRoleToDBInstanceRequestFunc == nil {
		panic("rdsClientMock.AddRoleToDBInstanceRequestFunc: method is nil but rdsClient.AddRoleToDBInstanceRequest was just called")
	}
	callInfo := struct {
		In1 *rds.AddRoleToDBInstanceInput
	}{
		In1: in1,
	}
	lockrdsClientMockAddRoleToDBInstanceRequest.Lock()
	mock.calls.AddRoleToDBInstanceRequest = append(mock.calls.AddRoleToDBInstanceRequest, callInfo)
	lockrdsClientMockAddRoleToDBInstanceRequest.Unlock()
	return mock.AddRoleToDBInstanceRequestFunc(in1)
}

// AddRoleToDBInstanceRequestCalls gets all the calls that were made to AddRoleToDBInstanceRequest.
// Check the length with:
//     len(mockedrdsClient.AddRoleToDBInstanceRequestCalls())
func (mock *rdsClientMock) AddRoleToDBInstanceRequestCalls() []struct {
	In1 *rds.AddRoleToDBInstanceInput
} {
	var calls []struct {
		In1 *rds.AddRoleToDBInstanceInput
	}
	lockrdsClientMockAddRoleToDBInstanceRequest.RLock()
	calls = mock.calls.AddRoleToDBInstanceRequest
	lockrdsClientMockAddRoleToDBInstanceRequest.RUnlock()
	return calls
}

// AddRoleToDBInstanceWithContext calls AddRoleToDBInstanceWithContextFunc.
func (mock *rdsClientMock) AddRoleToDBInstanceWithContext(in1 context.Context, in2 *rds.AddRoleToDBInstanceInput, in3 ...request.Option) (*rds.AddRoleToDBInstanceOutput, error) {
	if mock.AddRoleToDBInstanceWithContextFunc == nil {
		panic("rdsClientMock.AddRoleToDBInstanceWithContextFunc: method is nil but rdsClient.AddRoleToDBInstanceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.AddRoleToDBInstanceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockAddRoleToDBInstanceWithContext.Lock()
	mock.calls.AddRoleToDBInstanceWithContext = append(mock.calls.AddRoleToDBInstanceWithContext, callInfo)
	lockrdsClientMockAddRoleToDBInstanceWithContext.Unlock()
	return mock.AddRoleToDBInstanceWithContextFunc(in1, in2, in3...)
}

// AddRoleToDBInstanceWithContextCalls gets all the calls that were made to AddRoleToDBInstanceWithContext.
// Check the length with:
//     len(mockedrdsClient.AddRoleToDBInstanceWithContextCalls())
func (mock *rdsClientMock) AddRoleToDBInstanceWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.AddRoleToDBInstanceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.AddRoleToDBInstanceInput
		In3 []request.Option
	}
	lockrdsClientMockAddRoleToDBInstanceWithContext.RLock()
	calls = mock.calls.AddRoleToDBInstanceWithContext
	lockrdsClientMockAddRoleToDBInstanceWithContext.RUnlock()
	return calls
}

// AddSourceIdentifierToSubscription calls AddSourceIdentifierToSubscriptionFunc.
func (mock *rdsClientMock) AddSourceIdentifierToSubscription(in1 *rds.AddSourceIdentifierToSubscriptionInput) (*rds.AddSourceIdentifierToSubscriptionOutput, error) {
	if mock.AddSourceIdentifierToSubscriptionFunc == nil {
		panic("rdsClientMock.AddSourceIdentifierToSubscriptionFunc: method is nil but rdsClient.AddSourceIdentifierToSubscription was just called")
	}
	callInfo := struct {
		In1 *rds.AddSourceIdentifierToSubscriptionInput
	}{
		In1: in1,
	}
	lockrdsClientMockAddSourceIdentifierToSubscription.Lock()
	mock.calls.AddSourceIdentifierToSubscription = append(mock.calls.AddSourceIdentifierToSubscription, callInfo)
	lockrdsClientMockAddSourceIdentifierToSubscription.Unlock()
	return mock.AddSourceIdentifierToSubscriptionFunc(in1)
}

// AddSourceIdentifierToSubscriptionCalls gets all the calls that were made to AddSourceIdentifierToSubscription.
// Check the length with:
//     len(mockedrdsClient.AddSourceIdentifierToSubscriptionCalls())
func (mock *rdsClientMock) AddSourceIdentifierToSubscriptionCalls() []struct {
	In1 *rds.AddSourceIdentifierToSubscriptionInput
} {
	var calls []struct {
		In1 *rds.AddSourceIdentifierToSubscriptionInput
	}
	lockrdsClientMockAddSourceIdentifierToSubscription.RLock()
	calls = mock.calls.AddSourceIdentifierToSubscription
	lockrdsClientMockAddSourceIdentifierToSubscription.RUnlock()
	return calls
}

// AddSourceIdentifierToSubscriptionRequest calls AddSourceIdentifierToSubscriptionRequestFunc.
func (mock *rdsClientMock) AddSourceIdentifierToSubscriptionRequest(in1 *rds.AddSourceIdentifierToSubscriptionInput) (*request.Request, *rds.AddSourceIdentifierToSubscriptionOutput) {
	if mock.AddSourceIdentifierToSubscriptionRequestFunc == nil {
		panic("rdsClientMock.AddSourceIdentifierToSubscriptionRequestFunc: method is nil but rdsClient.AddSourceIdentifierToSubscriptionRequest was just called")
	}
	callInfo := struct {
		In1 *rds.AddSourceIdentifierToSubscriptionInput
	}{
		In1: in1,
	}
	lockrdsClientMockAddSourceIdentifierToSubscriptionRequest.Lock()
	mock.calls.AddSourceIdentifierToSubscriptionRequest = append(mock.calls.AddSourceIdentifierToSubscriptionRequest, callInfo)
	lockrdsClientMockAddSourceIdentifierToSubscriptionRequest.Unlock()
	return mock.AddSourceIdentifierToSubscriptionRequestFunc(in1)
}

// AddSourceIdentifierToSubscriptionRequestCalls gets all the calls that were made to AddSourceIdentifierToSubscriptionRequest.
// Check the length with:
//     len(mockedrdsClient.AddSourceIdentifierToSubscriptionRequestCalls())
func (mock *rdsClientMock) AddSourceIdentifierToSubscriptionRequestCalls() []struct {
	In1 *rds.AddSourceIdentifierToSubscriptionInput
} {
	var calls []struct {
		In1 *rds.AddSourceIdentifierToSubscriptionInput
	}
	lockrdsClientMockAddSourceIdentifierToSubscriptionRequest.RLock()
	calls = mock.calls.AddSourceIdentifierToSubscriptionRequest
	lockrdsClientMockAddSourceIdentifierToSubscriptionRequest.RUnlock()
	return calls
}

// AddSourceIdentifierToSubscriptionWithContext calls AddSourceIdentifierToSubscriptionWithContextFunc.
func (mock *rdsClientMock) AddSourceIdentifierToSubscriptionWithContext(in1 context.Context, in2 *rds.AddSourceIdentifierToSubscriptionInput, in3 ...request.Option) (*rds.AddSourceIdentifierToSubscriptionOutput, error) {
	if mock.AddSourceIdentifierToSubscriptionWithContextFunc == nil {
		panic("rdsClientMock.AddSourceIdentifierToSubscriptionWithContextFunc: method is nil but rdsClient.AddSourceIdentifierToSubscriptionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.AddSourceIdentifierToSubscriptionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockAddSourceIdentifierToSubscriptionWithContext.Lock()
	mock.calls.AddSourceIdentifierToSubscriptionWithContext = append(mock.calls.AddSourceIdentifierToSubscriptionWithContext, callInfo)
	lockrdsClientMockAddSourceIdentifierToSubscriptionWithContext.Unlock()
	return mock.AddSourceIdentifierToSubscriptionWithContextFunc(in1, in2, in3...)
}

// AddSourceIdentifierToSubscriptionWithContextCalls gets all the calls that were made to AddSourceIdentifierToSubscriptionWithContext.
// Check the length with:
//     len(mockedrdsClient.AddSourceIdentifierToSubscriptionWithContextCalls())
func (mock *rdsClientMock) AddSourceIdentifierToSubscriptionWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.AddSourceIdentifierToSubscriptionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.AddSourceIdentifierToSubscriptionInput
		In3 []request.Option
	}
	lockrdsClientMockAddSourceIdentifierToSubscriptionWithContext.RLock()
	calls = mock.calls.AddSourceIdentifierToSubscriptionWithContext
	lockrdsClientMockAddSourceIdentifierToSubscriptionWithContext.RUnlock()
	return calls
}

// AddTagsToResource calls AddTagsToResourceFunc.
func (mock *rdsClientMock) AddTagsToResource(in1 *rds.AddTagsToResourceInput) (*rds.AddTagsToResourceOutput, error) {
	if mock.AddTagsToResourceFunc == nil {
		panic("rdsClientMock.AddTagsToResourceFunc: method is nil but rdsClient.AddTagsToResource was just called")
	}
	callInfo := struct {
		In1 *rds.AddTagsToResourceInput
	}{
		In1: in1,
	}
	lockrdsClientMockAddTagsToResource.Lock()
	mock.calls.AddTagsToResource = append(mock.calls.AddTagsToResource, callInfo)
	lockrdsClientMockAddTagsToResource.Unlock()
	return mock.AddTagsToResourceFunc(in1)
}

// AddTagsToResourceCalls gets all the calls that were made to AddTagsToResource.
// Check the length with:
//     len(mockedrdsClient.AddTagsToResourceCalls())
func (mock *rdsClientMock) AddTagsToResourceCalls() []struct {
	In1 *rds.AddTagsToResourceInput
} {
	var calls []struct {
		In1 *rds.AddTagsToResourceInput
	}
	lockrdsClientMockAddTagsToResource.RLock()
	calls = mock.calls.AddTagsToResource
	lockrdsClientMockAddTagsToResource.RUnlock()
	return calls
}

// AddTagsToResourceRequest calls AddTagsToResourceRequestFunc.
func (mock *rdsClientMock) AddTagsToResourceRequest(in1 *rds.AddTagsToResourceInput) (*request.Request, *rds.AddTagsToResourceOutput) {
	if mock.AddTagsToResourceRequestFunc == nil {
		panic("rdsClientMock.AddTagsToResourceRequestFunc: method is nil but rdsClient.AddTagsToResourceRequest was just called")
	}
	callInfo := struct {
		In1 *rds.AddTagsToResourceInput
	}{
		In1: in1,
	}
	lockrdsClientMockAddTagsToResourceRequest.Lock()
	mock.calls.AddTagsToResourceRequest = append(mock.calls.AddTagsToResourceRequest, callInfo)
	lockrdsClientMockAddTagsToResourceRequest.Unlock()
	return mock.AddTagsToResourceRequestFunc(in1)
}

// AddTagsToResourceRequestCalls gets all the calls that were made to AddTagsToResourceRequest.
// Check the length with:
//     len(mockedrdsClient.AddTagsToResourceRequestCalls())
func (mock *rdsClientMock) AddTagsToResourceRequestCalls() []struct {
	In1 *rds.AddTagsToResourceInput
} {
	var calls []struct {
		In1 *rds.AddTagsToResourceInput
	}
	lockrdsClientMockAddTagsToResourceRequest.RLock()
	calls = mock.calls.AddTagsToResourceRequest
	lockrdsClientMockAddTagsToResourceRequest.RUnlock()
	return calls
}

// AddTagsToResourceWithContext calls AddTagsToResourceWithContextFunc.
func (mock *rdsClientMock) AddTagsToResourceWithContext(in1 context.Context, in2 *rds.AddTagsToResourceInput, in3 ...request.Option) (*rds.AddTagsToResourceOutput, error) {
	if mock.AddTagsToResourceWithContextFunc == nil {
		panic("rdsClientMock.AddTagsToResourceWithContextFunc: method is nil but rdsClient.AddTagsToResourceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.AddTagsToResourceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockAddTagsToResourceWithContext.Lock()
	mock.calls.AddTagsToResourceWithContext = append(mock.calls.AddTagsToResourceWithContext, callInfo)
	lockrdsClientMockAddTagsToResourceWithContext.Unlock()
	return mock.AddTagsToResourceWithContextFunc(in1, in2, in3...)
}

// AddTagsToResourceWithContextCalls gets all the calls that were made to AddTagsToResourceWithContext.
// Check the length with:
//     len(mockedrdsClient.AddTagsToResourceWithContextCalls())
func (mock *rdsClientMock) AddTagsToResourceWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.AddTagsToResourceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.AddTagsToResourceInput
		In3 []request.Option
	}
	lockrdsClientMockAddTagsToResourceWithContext.RLock()
	calls = mock.calls.AddTagsToResourceWithContext
	lockrdsClientMockAddTagsToResourceWithContext.RUnlock()
	return calls
}

// ApplyPendingMaintenanceAction calls ApplyPendingMaintenanceActionFunc.
func (mock *rdsClientMock) ApplyPendingMaintenanceAction(in1 *rds.ApplyPendingMaintenanceActionInput) (*rds.ApplyPendingMaintenanceActionOutput, error) {
	if mock.ApplyPendingMaintenanceActionFunc == nil {
		panic("rdsClientMock.ApplyPendingMaintenanceActionFunc: method is nil but rdsClient.ApplyPendingMaintenanceAction was just called")
	}
	callInfo := struct {
		In1 *rds.ApplyPendingMaintenanceActionInput
	}{
		In1: in1,
	}
	lockrdsClientMockApplyPendingMaintenanceAction.Lock()
	mock.calls.ApplyPendingMaintenanceAction = append(mock.calls.ApplyPendingMaintenanceAction, callInfo)
	lockrdsClientMockApplyPendingMaintenanceAction.Unlock()
	return mock.ApplyPendingMaintenanceActionFunc(in1)
}

// ApplyPendingMaintenanceActionCalls gets all the calls that were made to ApplyPendingMaintenanceAction.
// Check the length with:
//     len(mockedrdsClient.ApplyPendingMaintenanceActionCalls())
func (mock *rdsClientMock) ApplyPendingMaintenanceActionCalls() []struct {
	In1 *rds.ApplyPendingMaintenanceActionInput
} {
	var calls []struct {
		In1 *rds.ApplyPendingMaintenanceActionInput
	}
	lockrdsClientMockApplyPendingMaintenanceAction.RLock()
	calls = mock.calls.ApplyPendingMaintenanceAction
	lockrdsClientMockApplyPendingMaintenanceAction.RUnlock()
	return calls
}

// ApplyPendingMaintenanceActionRequest calls ApplyPendingMaintenanceActionRequestFunc.
func (mock *rdsClientMock) ApplyPendingMaintenanceActionRequest(in1 *rds.ApplyPendingMaintenanceActionInput) (*request.Request, *rds.ApplyPendingMaintenanceActionOutput) {
	if mock.ApplyPendingMaintenanceActionRequestFunc == nil {
		panic("rdsClientMock.ApplyPendingMaintenanceActionRequestFunc: method is nil but rdsClient.ApplyPendingMaintenanceActionRequest was just called")
	}
	callInfo := struct {
		In1 *rds.ApplyPendingMaintenanceActionInput
	}{
		In1: in1,
	}
	lockrdsClientMockApplyPendingMaintenanceActionRequest.Lock()
	mock.calls.ApplyPendingMaintenanceActionRequest = append(mock.calls.ApplyPendingMaintenanceActionRequest, callInfo)
	lockrdsClientMockApplyPendingMaintenanceActionRequest.Unlock()
	return mock.ApplyPendingMaintenanceActionRequestFunc(in1)
}

// ApplyPendingMaintenanceActionRequestCalls gets all the calls that were made to ApplyPendingMaintenanceActionRequest.
// Check the length with:
//     len(mockedrdsClient.ApplyPendingMaintenanceActionRequestCalls())
func (mock *rdsClientMock) ApplyPendingMaintenanceActionRequestCalls() []struct {
	In1 *rds.ApplyPendingMaintenanceActionInput
} {
	var calls []struct {
		In1 *rds.ApplyPendingMaintenanceActionInput
	}
	lockrdsClientMockApplyPendingMaintenanceActionRequest.RLock()
	calls = mock.calls.ApplyPendingMaintenanceActionRequest
	lockrdsClientMockApplyPendingMaintenanceActionRequest.RUnlock()
	return calls
}

// ApplyPendingMaintenanceActionWithContext calls ApplyPendingMaintenanceActionWithContextFunc.
func (mock *rdsClientMock) ApplyPendingMaintenanceActionWithContext(in1 context.Context, in2 *rds.ApplyPendingMaintenanceActionInput, in3 ...request.Option) (*rds.ApplyPendingMaintenanceActionOutput, error) {
	if mock.ApplyPendingMaintenanceActionWithContextFunc == nil {
		panic("rdsClientMock.ApplyPendingMaintenanceActionWithContextFunc: method is nil but rdsClient.ApplyPendingMaintenanceActionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.ApplyPendingMaintenanceActionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockApplyPendingMaintenanceActionWithContext.Lock()
	mock.calls.ApplyPendingMaintenanceActionWithContext = append(mock.calls.ApplyPendingMaintenanceActionWithContext, callInfo)
	lockrdsClientMockApplyPendingMaintenanceActionWithContext.Unlock()
	return mock.ApplyPendingMaintenanceActionWithContextFunc(in1, in2, in3...)
}

// ApplyPendingMaintenanceActionWithContextCalls gets all the calls that were made to ApplyPendingMaintenanceActionWithContext.
// Check the length with:
//     len(mockedrdsClient.ApplyPendingMaintenanceActionWithContextCalls())
func (mock *rdsClientMock) ApplyPendingMaintenanceActionWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.ApplyPendingMaintenanceActionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.ApplyPendingMaintenanceActionInput
		In3 []request.Option
	}
	lockrdsClientMockApplyPendingMaintenanceActionWithContext.RLock()
	calls = mock.calls.ApplyPendingMaintenanceActionWithContext
	lockrdsClientMockApplyPendingMaintenanceActionWithContext.RUnlock()
	return calls
}

// AuthorizeDBSecurityGroupIngress calls AuthorizeDBSecurityGroupIngressFunc.
func (mock *rdsClientMock) AuthorizeDBSecurityGroupIngress(in1 *rds.AuthorizeDBSecurityGroupIngressInput) (*rds.AuthorizeDBSecurityGroupIngressOutput, error) {
	if mock.AuthorizeDBSecurityGroupIngressFunc == nil {
		panic("rdsClientMock.AuthorizeDBSecurityGroupIngressFunc: method is nil but rdsClient.AuthorizeDBSecurityGroupIngress was just called")
	}
	callInfo := struct {
		In1 *rds.AuthorizeDBSecurityGroupIngressInput
	}{
		In1: in1,
	}
	lockrdsClientMockAuthorizeDBSecurityGroupIngress.Lock()
	mock.calls.AuthorizeDBSecurityGroupIngress = append(mock.calls.AuthorizeDBSecurityGroupIngress, callInfo)
	lockrdsClientMockAuthorizeDBSecurityGroupIngress.Unlock()
	return mock.AuthorizeDBSecurityGroupIngressFunc(in1)
}

// AuthorizeDBSecurityGroupIngressCalls gets all the calls that were made to AuthorizeDBSecurityGroupIngress.
// Check the length with:
//     len(mockedrdsClient.AuthorizeDBSecurityGroupIngressCalls())
func (mock *rdsClientMock) AuthorizeDBSecurityGroupIngressCalls() []struct {
	In1 *rds.AuthorizeDBSecurityGroupIngressInput
} {
	var calls []struct {
		In1 *rds.AuthorizeDBSecurityGroupIngressInput
	}
	lockrdsClientMockAuthorizeDBSecurityGroupIngress.RLock()
	calls = mock.calls.AuthorizeDBSecurityGroupIngress
	lockrdsClientMockAuthorizeDBSecurityGroupIngress.RUnlock()
	return calls
}

// AuthorizeDBSecurityGroupIngressRequest calls AuthorizeDBSecurityGroupIngressRequestFunc.
func (mock *rdsClientMock) AuthorizeDBSecurityGroupIngressRequest(in1 *rds.AuthorizeDBSecurityGroupIngressInput) (*request.Request, *rds.AuthorizeDBSecurityGroupIngressOutput) {
	if mock.AuthorizeDBSecurityGroupIngressRequestFunc == nil {
		panic("rdsClientMock.AuthorizeDBSecurityGroupIngressRequestFunc: method is nil but rdsClient.AuthorizeDBSecurityGroupIngressRequest was just called")
	}
	callInfo := struct {
		In1 *rds.AuthorizeDBSecurityGroupIngressInput
	}{
		In1: in1,
	}
	lockrdsClientMockAuthorizeDBSecurityGroupIngressRequest.Lock()
	mock.calls.AuthorizeDBSecurityGroupIngressRequest = append(mock.calls.AuthorizeDBSecurityGroupIngressRequest, callInfo)
	lockrdsClientMockAuthorizeDBSecurityGroupIngressRequest.Unlock()
	return mock.AuthorizeDBSecurityGroupIngressRequestFunc(in1)
}

// AuthorizeDBSecurityGroupIngressRequestCalls gets all the calls that were made to AuthorizeDBSecurityGroupIngressRequest.
// Check the length with:
//     len(mockedrdsClient.AuthorizeDBSecurityGroupIngressRequestCalls())
func (mock *rdsClientMock) AuthorizeDBSecurityGroupIngressRequestCalls() []struct {
	In1 *rds.AuthorizeDBSecurityGroupIngressInput
} {
	var calls []struct {
		In1 *rds.AuthorizeDBSecurityGroupIngressInput
	}
	lockrdsClientMockAuthorizeDBSecurityGroupIngressRequest.RLock()
	calls = mock.calls.AuthorizeDBSecurityGroupIngressRequest
	lockrdsClientMockAuthorizeDBSecurityGroupIngressRequest.RUnlock()
	return calls
}

// AuthorizeDBSecurityGroupIngressWithContext calls AuthorizeDBSecurityGroupIngressWithContextFunc.
func (mock *rdsClientMock) AuthorizeDBSecurityGroupIngressWithContext(in1 context.Context, in2 *rds.AuthorizeDBSecurityGroupIngressInput, in3 ...request.Option) (*rds.AuthorizeDBSecurityGroupIngressOutput, error) {
	if mock.AuthorizeDBSecurityGroupIngressWithContextFunc == nil {
		panic("rdsClientMock.AuthorizeDBSecurityGroupIngressWithContextFunc: method is nil but rdsClient.AuthorizeDBSecurityGroupIngressWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.AuthorizeDBSecurityGroupIngressInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockAuthorizeDBSecurityGroupIngressWithContext.Lock()
	mock.calls.AuthorizeDBSecurityGroupIngressWithContext = append(mock.calls.AuthorizeDBSecurityGroupIngressWithContext, callInfo)
	lockrdsClientMockAuthorizeDBSecurityGroupIngressWithContext.Unlock()
	return mock.AuthorizeDBSecurityGroupIngressWithContextFunc(in1, in2, in3...)
}

// AuthorizeDBSecurityGroupIngressWithContextCalls gets all the calls that were made to AuthorizeDBSecurityGroupIngressWithContext.
// Check the length with:
//     len(mockedrdsClient.AuthorizeDBSecurityGroupIngressWithContextCalls())
func (mock *rdsClientMock) AuthorizeDBSecurityGroupIngressWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.AuthorizeDBSecurityGroupIngressInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.AuthorizeDBSecurityGroupIngressInput
		In3 []request.Option
	}
	lockrdsClientMockAuthorizeDBSecurityGroupIngressWithContext.RLock()
	calls = mock.calls.AuthorizeDBSecurityGroupIngressWithContext
	lockrdsClientMockAuthorizeDBSecurityGroupIngressWithContext.RUnlock()
	return calls
}

// BacktrackDBCluster calls BacktrackDBClusterFunc.
func (mock *rdsClientMock) BacktrackDBCluster(in1 *rds.BacktrackDBClusterInput) (*rds.BacktrackDBClusterOutput, error) {
	if mock.BacktrackDBClusterFunc == nil {
		panic("rdsClientMock.BacktrackDBClusterFunc: method is nil but rdsClient.BacktrackDBCluster was just called")
	}
	callInfo := struct {
		In1 *rds.BacktrackDBClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockBacktrackDBCluster.Lock()
	mock.calls.BacktrackDBCluster = append(mock.calls.BacktrackDBCluster, callInfo)
	lockrdsClientMockBacktrackDBCluster.Unlock()
	return mock.BacktrackDBClusterFunc(in1)
}

// BacktrackDBClusterCalls gets all the calls that were made to BacktrackDBCluster.
// Check the length with:
//     len(mockedrdsClient.BacktrackDBClusterCalls())
func (mock *rdsClientMock) BacktrackDBClusterCalls() []struct {
	In1 *rds.BacktrackDBClusterInput
} {
	var calls []struct {
		In1 *rds.BacktrackDBClusterInput
	}
	lockrdsClientMockBacktrackDBCluster.RLock()
	calls = mock.calls.BacktrackDBCluster
	lockrdsClientMockBacktrackDBCluster.RUnlock()
	return calls
}

// BacktrackDBClusterRequest calls BacktrackDBClusterRequestFunc.
func (mock *rdsClientMock) BacktrackDBClusterRequest(in1 *rds.BacktrackDBClusterInput) (*request.Request, *rds.BacktrackDBClusterOutput) {
	if mock.BacktrackDBClusterRequestFunc == nil {
		panic("rdsClientMock.BacktrackDBClusterRequestFunc: method is nil but rdsClient.BacktrackDBClusterRequest was just called")
	}
	callInfo := struct {
		In1 *rds.BacktrackDBClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockBacktrackDBClusterRequest.Lock()
	mock.calls.BacktrackDBClusterRequest = append(mock.calls.BacktrackDBClusterRequest, callInfo)
	lockrdsClientMockBacktrackDBClusterRequest.Unlock()
	return mock.BacktrackDBClusterRequestFunc(in1)
}

// BacktrackDBClusterRequestCalls gets all the calls that were made to BacktrackDBClusterRequest.
// Check the length with:
//     len(mockedrdsClient.BacktrackDBClusterRequestCalls())
func (mock *rdsClientMock) BacktrackDBClusterRequestCalls() []struct {
	In1 *rds.BacktrackDBClusterInput
} {
	var calls []struct {
		In1 *rds.BacktrackDBClusterInput
	}
	lockrdsClientMockBacktrackDBClusterRequest.RLock()
	calls = mock.calls.BacktrackDBClusterRequest
	lockrdsClientMockBacktrackDBClusterRequest.RUnlock()
	return calls
}

// BacktrackDBClusterWithContext calls BacktrackDBClusterWithContextFunc.
func (mock *rdsClientMock) BacktrackDBClusterWithContext(in1 context.Context, in2 *rds.BacktrackDBClusterInput, in3 ...request.Option) (*rds.BacktrackDBClusterOutput, error) {
	if mock.BacktrackDBClusterWithContextFunc == nil {
		panic("rdsClientMock.BacktrackDBClusterWithContextFunc: method is nil but rdsClient.BacktrackDBClusterWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.BacktrackDBClusterInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockBacktrackDBClusterWithContext.Lock()
	mock.calls.BacktrackDBClusterWithContext = append(mock.calls.BacktrackDBClusterWithContext, callInfo)
	lockrdsClientMockBacktrackDBClusterWithContext.Unlock()
	return mock.BacktrackDBClusterWithContextFunc(in1, in2, in3...)
}

// BacktrackDBClusterWithContextCalls gets all the calls that were made to BacktrackDBClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.BacktrackDBClusterWithContextCalls())
func (mock *rdsClientMock) BacktrackDBClusterWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.BacktrackDBClusterInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.BacktrackDBClusterInput
		In3 []request.Option
	}
	lockrdsClientMockBacktrackDBClusterWithContext.RLock()
	calls = mock.calls.BacktrackDBClusterWithContext
	lockrdsClientMockBacktrackDBClusterWithContext.RUnlock()
	return calls
}

// CancelExportTask calls CancelExportTaskFunc.
func (mock *rdsClientMock) CancelExportTask(in1 *rds.CancelExportTaskInput) (*rds.CancelExportTaskOutput, error) {
	if mock.CancelExportTaskFunc == nil {
		panic("rdsClientMock.CancelExportTaskFunc: method is nil but rdsClient.CancelExportTask was just called")
	}
	callInfo := struct {
		In1 *rds.CancelExportTaskInput
	}{
		In1: in1,
	}
	lockrdsClientMockCancelExportTask.Lock()
	mock.calls.CancelExportTask = append(mock.calls.CancelExportTask, callInfo)
	lockrdsClientMockCancelExportTask.Unlock()
	return mock.CancelExportTaskFunc(in1)
}

// CancelExportTaskCalls gets all the calls that were made to CancelExportTask.
// Check the length with:
//     len(mockedrdsClient.CancelExportTaskCalls())
func (mock *rdsClientMock) CancelExportTaskCalls() []struct {
	In1 *rds.CancelExportTaskInput
} {
	var calls []struct {
		In1 *rds.CancelExportTaskInput
	}
	lockrdsClientMockCancelExportTask.RLock()
	calls = mock.calls.CancelExportTask
	lockrdsClientMockCancelExportTask.RUnlock()
	return calls
}

// CancelExportTaskRequest calls CancelExportTaskRequestFunc.
func (mock *rdsClientMock) CancelExportTaskRequest(in1 *rds.CancelExportTaskInput) (*request.Request, *rds.CancelExportTaskOutput) {
	if mock.CancelExportTaskRequestFunc == nil {
		panic("rdsClientMock.CancelExportTaskRequestFunc: method is nil but rdsClient.CancelExportTaskRequest was just called")
	}
	callInfo := struct {
		In1 *rds.CancelExportTaskInput
	}{
		In1: in1,
	}
	lockrdsClientMockCancelExportTaskRequest.Lock()
	mock.calls.CancelExportTaskRequest = append(mock.calls.CancelExportTaskRequest, callInfo)
	lockrdsClientMockCancelExportTaskRequest.Unlock()
	return mock.CancelExportTaskRequestFunc(in1)
}

// CancelExportTaskRequestCalls gets all the calls that were made to CancelExportTaskRequest.
// Check the length with:
//     len(mockedrdsClient.CancelExportTaskRequestCalls())
func (mock *rdsClientMock) CancelExportTaskRequestCalls() []struct {
	In1 *rds.CancelExportTaskInput
} {
	var calls []struct {
		In1 *rds.CancelExportTaskInput
	}
	lockrdsClientMockCancelExportTaskRequest.RLock()
	calls = mock.calls.CancelExportTaskRequest
	lockrdsClientMockCancelExportTaskRequest.RUnlock()
	return calls
}

// CancelExportTaskWithContext calls CancelExportTaskWithContextFunc.
func (mock *rdsClientMock) CancelExportTaskWithContext(in1 context.Context, in2 *rds.CancelExportTaskInput, in3 ...request.Option) (*rds.CancelExportTaskOutput, error) {
	if mock.CancelExportTaskWithContextFunc == nil {
		panic("rdsClientMock.CancelExportTaskWithContextFunc: method is nil but rdsClient.CancelExportTaskWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.CancelExportTaskInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockCancelExportTaskWithContext.Lock()
	mock.calls.CancelExportTaskWithContext = append(mock.calls.CancelExportTaskWithContext, callInfo)
	lockrdsClientMockCancelExportTaskWithContext.Unlock()
	return mock.CancelExportTaskWithContextFunc(in1, in2, in3...)
}

// CancelExportTaskWithContextCalls gets all the calls that were made to CancelExportTaskWithContext.
// Check the length with:
//     len(mockedrdsClient.CancelExportTaskWithContextCalls())
func (mock *rdsClientMock) CancelExportTaskWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.CancelExportTaskInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.CancelExportTaskInput
		In3 []request.Option
	}
	lockrdsClientMockCancelExportTaskWithContext.RLock()
	calls = mock.calls.CancelExportTaskWithContext
	lockrdsClientMockCancelExportTaskWithContext.RUnlock()
	return calls
}

// CopyDBClusterParameterGroup calls CopyDBClusterParameterGroupFunc.
func (mock *rdsClientMock) CopyDBClusterParameterGroup(in1 *rds.CopyDBClusterParameterGroupInput) (*rds.CopyDBClusterParameterGroupOutput, error) {
	if mock.CopyDBClusterParameterGroupFunc == nil {
		panic("rdsClientMock.CopyDBClusterParameterGroupFunc: method is nil but rdsClient.CopyDBClusterParameterGroup was just called")
	}
	callInfo := struct {
		In1 *rds.CopyDBClusterParameterGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockCopyDBClusterParameterGroup.Lock()
	mock.calls.CopyDBClusterParameterGroup = append(mock.calls.CopyDBClusterParameterGroup, callInfo)
	lockrdsClientMockCopyDBClusterParameterGroup.Unlock()
	return mock.CopyDBClusterParameterGroupFunc(in1)
}

// CopyDBClusterParameterGroupCalls gets all the calls that were made to CopyDBClusterParameterGroup.
// Check the length with:
//     len(mockedrdsClient.CopyDBClusterParameterGroupCalls())
func (mock *rdsClientMock) CopyDBClusterParameterGroupCalls() []struct {
	In1 *rds.CopyDBClusterParameterGroupInput
} {
	var calls []struct {
		In1 *rds.CopyDBClusterParameterGroupInput
	}
	lockrdsClientMockCopyDBClusterParameterGroup.RLock()
	calls = mock.calls.CopyDBClusterParameterGroup
	lockrdsClientMockCopyDBClusterParameterGroup.RUnlock()
	return calls
}

// CopyDBClusterParameterGroupRequest calls CopyDBClusterParameterGroupRequestFunc.
func (mock *rdsClientMock) CopyDBClusterParameterGroupRequest(in1 *rds.CopyDBClusterParameterGroupInput) (*request.Request, *rds.CopyDBClusterParameterGroupOutput) {
	if mock.CopyDBClusterParameterGroupRequestFunc == nil {
		panic("rdsClientMock.CopyDBClusterParameterGroupRequestFunc: method is nil but rdsClient.CopyDBClusterParameterGroupRequest was just called")
	}
	callInfo := struct {
		In1 *rds.CopyDBClusterParameterGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockCopyDBClusterParameterGroupRequest.Lock()
	mock.calls.CopyDBClusterParameterGroupRequest = append(mock.calls.CopyDBClusterParameterGroupRequest, callInfo)
	lockrdsClientMockCopyDBClusterParameterGroupRequest.Unlock()
	return mock.CopyDBClusterParameterGroupRequestFunc(in1)
}

// CopyDBClusterParameterGroupRequestCalls gets all the calls that were made to CopyDBClusterParameterGroupRequest.
// Check the length with:
//     len(mockedrdsClient.CopyDBClusterParameterGroupRequestCalls())
func (mock *rdsClientMock) CopyDBClusterParameterGroupRequestCalls() []struct {
	In1 *rds.CopyDBClusterParameterGroupInput
} {
	var calls []struct {
		In1 *rds.CopyDBClusterParameterGroupInput
	}
	lockrdsClientMockCopyDBClusterParameterGroupRequest.RLock()
	calls = mock.calls.CopyDBClusterParameterGroupRequest
	lockrdsClientMockCopyDBClusterParameterGroupRequest.RUnlock()
	return calls
}

// CopyDBClusterParameterGroupWithContext calls CopyDBClusterParameterGroupWithContextFunc.
func (mock *rdsClientMock) CopyDBClusterParameterGroupWithContext(in1 context.Context, in2 *rds.CopyDBClusterParameterGroupInput, in3 ...request.Option) (*rds.CopyDBClusterParameterGroupOutput, error) {
	if mock.CopyDBClusterParameterGroupWithContextFunc == nil {
		panic("rdsClientMock.CopyDBClusterParameterGroupWithContextFunc: method is nil but rdsClient.CopyDBClusterParameterGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.CopyDBClusterParameterGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockCopyDBClusterParameterGroupWithContext.Lock()
	mock.calls.CopyDBClusterParameterGroupWithContext = append(mock.calls.CopyDBClusterParameterGroupWithContext, callInfo)
	lockrdsClientMockCopyDBClusterParameterGroupWithContext.Unlock()
	return mock.CopyDBClusterParameterGroupWithContextFunc(in1, in2, in3...)
}

// CopyDBClusterParameterGroupWithContextCalls gets all the calls that were made to CopyDBClusterParameterGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.CopyDBClusterParameterGroupWithContextCalls())
func (mock *rdsClientMock) CopyDBClusterParameterGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.CopyDBClusterParameterGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.CopyDBClusterParameterGroupInput
		In3 []request.Option
	}
	lockrdsClientMockCopyDBClusterParameterGroupWithContext.RLock()
	calls = mock.calls.CopyDBClusterParameterGroupWithContext
	lockrdsClientMockCopyDBClusterParameterGroupWithContext.RUnlock()
	return calls
}

// CopyDBClusterSnapshot calls CopyDBClusterSnapshotFunc.
func (mock *rdsClientMock) CopyDBClusterSnapshot(in1 *rds.CopyDBClusterSnapshotInput) (*rds.CopyDBClusterSnapshotOutput, error) {
	if mock.CopyDBClusterSnapshotFunc == nil {
		panic("rdsClientMock.CopyDBClusterSnapshotFunc: method is nil but rdsClient.CopyDBClusterSnapshot was just called")
	}
	callInfo := struct {
		In1 *rds.CopyDBClusterSnapshotInput
	}{
		In1: in1,
	}
	lockrdsClientMockCopyDBClusterSnapshot.Lock()
	mock.calls.CopyDBClusterSnapshot = append(mock.calls.CopyDBClusterSnapshot, callInfo)
	lockrdsClientMockCopyDBClusterSnapshot.Unlock()
	return mock.CopyDBClusterSnapshotFunc(in1)
}

// CopyDBClusterSnapshotCalls gets all the calls that were made to CopyDBClusterSnapshot.
// Check the length with:
//     len(mockedrdsClient.CopyDBClusterSnapshotCalls())
func (mock *rdsClientMock) CopyDBClusterSnapshotCalls() []struct {
	In1 *rds.CopyDBClusterSnapshotInput
} {
	var calls []struct {
		In1 *rds.CopyDBClusterSnapshotInput
	}
	lockrdsClientMockCopyDBClusterSnapshot.RLock()
	calls = mock.calls.CopyDBClusterSnapshot
	lockrdsClientMockCopyDBClusterSnapshot.RUnlock()
	return calls
}

// CopyDBClusterSnapshotRequest calls CopyDBClusterSnapshotRequestFunc.
func (mock *rdsClientMock) CopyDBClusterSnapshotRequest(in1 *rds.CopyDBClusterSnapshotInput) (*request.Request, *rds.CopyDBClusterSnapshotOutput) {
	if mock.CopyDBClusterSnapshotRequestFunc == nil {
		panic("rdsClientMock.CopyDBClusterSnapshotRequestFunc: method is nil but rdsClient.CopyDBClusterSnapshotRequest was just called")
	}
	callInfo := struct {
		In1 *rds.CopyDBClusterSnapshotInput
	}{
		In1: in1,
	}
	lockrdsClientMockCopyDBClusterSnapshotRequest.Lock()
	mock.calls.CopyDBClusterSnapshotRequest = append(mock.calls.CopyDBClusterSnapshotRequest, callInfo)
	lockrdsClientMockCopyDBClusterSnapshotRequest.Unlock()
	return mock.CopyDBClusterSnapshotRequestFunc(in1)
}

// CopyDBClusterSnapshotRequestCalls gets all the calls that were made to CopyDBClusterSnapshotRequest.
// Check the length with:
//     len(mockedrdsClient.CopyDBClusterSnapshotRequestCalls())
func (mock *rdsClientMock) CopyDBClusterSnapshotRequestCalls() []struct {
	In1 *rds.CopyDBClusterSnapshotInput
} {
	var calls []struct {
		In1 *rds.CopyDBClusterSnapshotInput
	}
	lockrdsClientMockCopyDBClusterSnapshotRequest.RLock()
	calls = mock.calls.CopyDBClusterSnapshotRequest
	lockrdsClientMockCopyDBClusterSnapshotRequest.RUnlock()
	return calls
}

// CopyDBClusterSnapshotWithContext calls CopyDBClusterSnapshotWithContextFunc.
func (mock *rdsClientMock) CopyDBClusterSnapshotWithContext(in1 context.Context, in2 *rds.CopyDBClusterSnapshotInput, in3 ...request.Option) (*rds.CopyDBClusterSnapshotOutput, error) {
	if mock.CopyDBClusterSnapshotWithContextFunc == nil {
		panic("rdsClientMock.CopyDBClusterSnapshotWithContextFunc: method is nil but rdsClient.CopyDBClusterSnapshotWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.CopyDBClusterSnapshotInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockCopyDBClusterSnapshotWithContext.Lock()
	mock.calls.CopyDBClusterSnapshotWithContext = append(mock.calls.CopyDBClusterSnapshotWithContext, callInfo)
	lockrdsClientMockCopyDBClusterSnapshotWithContext.Unlock()
	return mock.CopyDBClusterSnapshotWithContextFunc(in1, in2, in3...)
}

// CopyDBClusterSnapshotWithContextCalls gets all the calls that were made to CopyDBClusterSnapshotWithContext.
// Check the length with:
//     len(mockedrdsClient.CopyDBClusterSnapshotWithContextCalls())
func (mock *rdsClientMock) CopyDBClusterSnapshotWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.CopyDBClusterSnapshotInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.CopyDBClusterSnapshotInput
		In3 []request.Option
	}
	lockrdsClientMockCopyDBClusterSnapshotWithContext.RLock()
	calls = mock.calls.CopyDBClusterSnapshotWithContext
	lockrdsClientMockCopyDBClusterSnapshotWithContext.RUnlock()
	return calls
}

// CopyDBParameterGroup calls CopyDBParameterGroupFunc.
func (mock *rdsClientMock) CopyDBParameterGroup(in1 *rds.CopyDBParameterGroupInput) (*rds.CopyDBParameterGroupOutput, error) {
	if mock.CopyDBParameterGroupFunc == nil {
		panic("rdsClientMock.CopyDBParameterGroupFunc: method is nil but rdsClient.CopyDBParameterGroup was just called")
	}
	callInfo := struct {
		In1 *rds.CopyDBParameterGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockCopyDBParameterGroup.Lock()
	mock.calls.CopyDBParameterGroup = append(mock.calls.CopyDBParameterGroup, callInfo)
	lockrdsClientMockCopyDBParameterGroup.Unlock()
	return mock.CopyDBParameterGroupFunc(in1)
}

// CopyDBParameterGroupCalls gets all the calls that were made to CopyDBParameterGroup.
// Check the length with:
//     len(mockedrdsClient.CopyDBParameterGroupCalls())
func (mock *rdsClientMock) CopyDBParameterGroupCalls() []struct {
	In1 *rds.CopyDBParameterGroupInput
} {
	var calls []struct {
		In1 *rds.CopyDBParameterGroupInput
	}
	lockrdsClientMockCopyDBParameterGroup.RLock()
	calls = mock.calls.CopyDBParameterGroup
	lockrdsClientMockCopyDBParameterGroup.RUnlock()
	return calls
}

// CopyDBParameterGroupRequest calls CopyDBParameterGroupRequestFunc.
func (mock *rdsClientMock) CopyDBParameterGroupRequest(in1 *rds.CopyDBParameterGroupInput) (*request.Request, *rds.CopyDBParameterGroupOutput) {
	if mock.CopyDBParameterGroupRequestFunc == nil {
		panic("rdsClientMock.CopyDBParameterGroupRequestFunc: method is nil but rdsClient.CopyDBParameterGroupRequest was just called")
	}
	callInfo := struct {
		In1 *rds.CopyDBParameterGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockCopyDBParameterGroupRequest.Lock()
	mock.calls.CopyDBParameterGroupRequest = append(mock.calls.CopyDBParameterGroupRequest, callInfo)
	lockrdsClientMockCopyDBParameterGroupRequest.Unlock()
	return mock.CopyDBParameterGroupRequestFunc(in1)
}

// CopyDBParameterGroupRequestCalls gets all the calls that were made to CopyDBParameterGroupRequest.
// Check the length with:
//     len(mockedrdsClient.CopyDBParameterGroupRequestCalls())
func (mock *rdsClientMock) CopyDBParameterGroupRequestCalls() []struct {
	In1 *rds.CopyDBParameterGroupInput
} {
	var calls []struct {
		In1 *rds.CopyDBParameterGroupInput
	}
	lockrdsClientMockCopyDBParameterGroupRequest.RLock()
	calls = mock.calls.CopyDBParameterGroupRequest
	lockrdsClientMockCopyDBParameterGroupRequest.RUnlock()
	return calls
}

// CopyDBParameterGroupWithContext calls CopyDBParameterGroupWithContextFunc.
func (mock *rdsClientMock) CopyDBParameterGroupWithContext(in1 context.Context, in2 *rds.CopyDBParameterGroupInput, in3 ...request.Option) (*rds.CopyDBParameterGroupOutput, error) {
	if mock.CopyDBParameterGroupWithContextFunc == nil {
		panic("rdsClientMock.CopyDBParameterGroupWithContextFunc: method is nil but rdsClient.CopyDBParameterGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.CopyDBParameterGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockCopyDBParameterGroupWithContext.Lock()
	mock.calls.CopyDBParameterGroupWithContext = append(mock.calls.CopyDBParameterGroupWithContext, callInfo)
	lockrdsClientMockCopyDBParameterGroupWithContext.Unlock()
	return mock.CopyDBParameterGroupWithContextFunc(in1, in2, in3...)
}

// CopyDBParameterGroupWithContextCalls gets all the calls that were made to CopyDBParameterGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.CopyDBParameterGroupWithContextCalls())
func (mock *rdsClientMock) CopyDBParameterGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.CopyDBParameterGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.CopyDBParameterGroupInput
		In3 []request.Option
	}
	lockrdsClientMockCopyDBParameterGroupWithContext.RLock()
	calls = mock.calls.CopyDBParameterGroupWithContext
	lockrdsClientMockCopyDBParameterGroupWithContext.RUnlock()
	return calls
}

// CopyDBSnapshot calls CopyDBSnapshotFunc.
func (mock *rdsClientMock) CopyDBSnapshot(in1 *rds.CopyDBSnapshotInput) (*rds.CopyDBSnapshotOutput, error) {
	if mock.CopyDBSnapshotFunc == nil {
		panic("rdsClientMock.CopyDBSnapshotFunc: method is nil but rdsClient.CopyDBSnapshot was just called")
	}
	callInfo := struct {
		In1 *rds.CopyDBSnapshotInput
	}{
		In1: in1,
	}
	lockrdsClientMockCopyDBSnapshot.Lock()
	mock.calls.CopyDBSnapshot = append(mock.calls.CopyDBSnapshot, callInfo)
	lockrdsClientMockCopyDBSnapshot.Unlock()
	return mock.CopyDBSnapshotFunc(in1)
}

// CopyDBSnapshotCalls gets all the calls that were made to CopyDBSnapshot.
// Check the length with:
//     len(mockedrdsClient.CopyDBSnapshotCalls())
func (mock *rdsClientMock) CopyDBSnapshotCalls() []struct {
	In1 *rds.CopyDBSnapshotInput
} {
	var calls []struct {
		In1 *rds.CopyDBSnapshotInput
	}
	lockrdsClientMockCopyDBSnapshot.RLock()
	calls = mock.calls.CopyDBSnapshot
	lockrdsClientMockCopyDBSnapshot.RUnlock()
	return calls
}

// CopyDBSnapshotRequest calls CopyDBSnapshotRequestFunc.
func (mock *rdsClientMock) CopyDBSnapshotRequest(in1 *rds.CopyDBSnapshotInput) (*request.Request, *rds.CopyDBSnapshotOutput) {
	if mock.CopyDBSnapshotRequestFunc == nil {
		panic("rdsClientMock.CopyDBSnapshotRequestFunc: method is nil but rdsClient.CopyDBSnapshotRequest was just called")
	}
	callInfo := struct {
		In1 *rds.CopyDBSnapshotInput
	}{
		In1: in1,
	}
	lockrdsClientMockCopyDBSnapshotRequest.Lock()
	mock.calls.CopyDBSnapshotRequest = append(mock.calls.CopyDBSnapshotRequest, callInfo)
	lockrdsClientMockCopyDBSnapshotRequest.Unlock()
	return mock.CopyDBSnapshotRequestFunc(in1)
}

// CopyDBSnapshotRequestCalls gets all the calls that were made to CopyDBSnapshotRequest.
// Check the length with:
//     len(mockedrdsClient.CopyDBSnapshotRequestCalls())
func (mock *rdsClientMock) CopyDBSnapshotRequestCalls() []struct {
	In1 *rds.CopyDBSnapshotInput
} {
	var calls []struct {
		In1 *rds.CopyDBSnapshotInput
	}
	lockrdsClientMockCopyDBSnapshotRequest.RLock()
	calls = mock.calls.CopyDBSnapshotRequest
	lockrdsClientMockCopyDBSnapshotRequest.RUnlock()
	return calls
}

// CopyDBSnapshotWithContext calls CopyDBSnapshotWithContextFunc.
func (mock *rdsClientMock) CopyDBSnapshotWithContext(in1 context.Context, in2 *rds.CopyDBSnapshotInput, in3 ...request.Option) (*rds.CopyDBSnapshotOutput, error) {
	if mock.CopyDBSnapshotWithContextFunc == nil {
		panic("rdsClientMock.CopyDBSnapshotWithContextFunc: method is nil but rdsClient.CopyDBSnapshotWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.CopyDBSnapshotInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockCopyDBSnapshotWithContext.Lock()
	mock.calls.CopyDBSnapshotWithContext = append(mock.calls.CopyDBSnapshotWithContext, callInfo)
	lockrdsClientMockCopyDBSnapshotWithContext.Unlock()
	return mock.CopyDBSnapshotWithContextFunc(in1, in2, in3...)
}

// CopyDBSnapshotWithContextCalls gets all the calls that were made to CopyDBSnapshotWithContext.
// Check the length with:
//     len(mockedrdsClient.CopyDBSnapshotWithContextCalls())
func (mock *rdsClientMock) CopyDBSnapshotWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.CopyDBSnapshotInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.CopyDBSnapshotInput
		In3 []request.Option
	}
	lockrdsClientMockCopyDBSnapshotWithContext.RLock()
	calls = mock.calls.CopyDBSnapshotWithContext
	lockrdsClientMockCopyDBSnapshotWithContext.RUnlock()
	return calls
}

// CopyOptionGroup calls CopyOptionGroupFunc.
func (mock *rdsClientMock) CopyOptionGroup(in1 *rds.CopyOptionGroupInput) (*rds.CopyOptionGroupOutput, error) {
	if mock.CopyOptionGroupFunc == nil {
		panic("rdsClientMock.CopyOptionGroupFunc: method is nil but rdsClient.CopyOptionGroup was just called")
	}
	callInfo := struct {
		In1 *rds.CopyOptionGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockCopyOptionGroup.Lock()
	mock.calls.CopyOptionGroup = append(mock.calls.CopyOptionGroup, callInfo)
	lockrdsClientMockCopyOptionGroup.Unlock()
	return mock.CopyOptionGroupFunc(in1)
}

// CopyOptionGroupCalls gets all the calls that were made to CopyOptionGroup.
// Check the length with:
//     len(mockedrdsClient.CopyOptionGroupCalls())
func (mock *rdsClientMock) CopyOptionGroupCalls() []struct {
	In1 *rds.CopyOptionGroupInput
} {
	var calls []struct {
		In1 *rds.CopyOptionGroupInput
	}
	lockrdsClientMockCopyOptionGroup.RLock()
	calls = mock.calls.CopyOptionGroup
	lockrdsClientMockCopyOptionGroup.RUnlock()
	return calls
}

// CopyOptionGroupRequest calls CopyOptionGroupRequestFunc.
func (mock *rdsClientMock) CopyOptionGroupRequest(in1 *rds.CopyOptionGroupInput) (*request.Request, *rds.CopyOptionGroupOutput) {
	if mock.CopyOptionGroupRequestFunc == nil {
		panic("rdsClientMock.CopyOptionGroupRequestFunc: method is nil but rdsClient.CopyOptionGroupRequest was just called")
	}
	callInfo := struct {
		In1 *rds.CopyOptionGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockCopyOptionGroupRequest.Lock()
	mock.calls.CopyOptionGroupRequest = append(mock.calls.CopyOptionGroupRequest, callInfo)
	lockrdsClientMockCopyOptionGroupRequest.Unlock()
	return mock.CopyOptionGroupRequestFunc(in1)
}

// CopyOptionGroupRequestCalls gets all the calls that were made to CopyOptionGroupRequest.
// Check the length with:
//     len(mockedrdsClient.CopyOptionGroupRequestCalls())
func (mock *rdsClientMock) CopyOptionGroupRequestCalls() []struct {
	In1 *rds.CopyOptionGroupInput
} {
	var calls []struct {
		In1 *rds.CopyOptionGroupInput
	}
	lockrdsClientMockCopyOptionGroupRequest.RLock()
	calls = mock.calls.CopyOptionGroupRequest
	lockrdsClientMockCopyOptionGroupRequest.RUnlock()
	return calls
}

// CopyOptionGroupWithContext calls CopyOptionGroupWithContextFunc.
func (mock *rdsClientMock) CopyOptionGroupWithContext(in1 context.Context, in2 *rds.CopyOptionGroupInput, in3 ...request.Option) (*rds.CopyOptionGroupOutput, error) {
	if mock.CopyOptionGroupWithContextFunc == nil {
		panic("rdsClientMock.CopyOptionGroupWithContextFunc: method is nil but rdsClient.CopyOptionGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.CopyOptionGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockCopyOptionGroupWithContext.Lock()
	mock.calls.CopyOptionGroupWithContext = append(mock.calls.CopyOptionGroupWithContext, callInfo)
	lockrdsClientMockCopyOptionGroupWithContext.Unlock()
	return mock.CopyOptionGroupWithContextFunc(in1, in2, in3...)
}

// CopyOptionGroupWithContextCalls gets all the calls that were made to CopyOptionGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.CopyOptionGroupWithContextCalls())
func (mock *rdsClientMock) CopyOptionGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.CopyOptionGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.CopyOptionGroupInput
		In3 []request.Option
	}
	lockrdsClientMockCopyOptionGroupWithContext.RLock()
	calls = mock.calls.CopyOptionGroupWithContext
	lockrdsClientMockCopyOptionGroupWithContext.RUnlock()
	return calls
}

// CreateCustomAvailabilityZone calls CreateCustomAvailabilityZoneFunc.
func (mock *rdsClientMock) CreateCustomAvailabilityZone(in1 *rds.CreateCustomAvailabilityZoneInput) (*rds.CreateCustomAvailabilityZoneOutput, error) {
	if mock.CreateCustomAvailabilityZoneFunc == nil {
		panic("rdsClientMock.CreateCustomAvailabilityZoneFunc: method is nil but rdsClient.CreateCustomAvailabilityZone was just called")
	}
	callInfo := struct {
		In1 *rds.CreateCustomAvailabilityZoneInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateCustomAvailabilityZone.Lock()
	mock.calls.CreateCustomAvailabilityZone = append(mock.calls.CreateCustomAvailabilityZone, callInfo)
	lockrdsClientMockCreateCustomAvailabilityZone.Unlock()
	return mock.CreateCustomAvailabilityZoneFunc(in1)
}

// CreateCustomAvailabilityZoneCalls gets all the calls that were made to CreateCustomAvailabilityZone.
// Check the length with:
//     len(mockedrdsClient.CreateCustomAvailabilityZoneCalls())
func (mock *rdsClientMock) CreateCustomAvailabilityZoneCalls() []struct {
	In1 *rds.CreateCustomAvailabilityZoneInput
} {
	var calls []struct {
		In1 *rds.CreateCustomAvailabilityZoneInput
	}
	lockrdsClientMockCreateCustomAvailabilityZone.RLock()
	calls = mock.calls.CreateCustomAvailabilityZone
	lockrdsClientMockCreateCustomAvailabilityZone.RUnlock()
	return calls
}

// CreateCustomAvailabilityZoneRequest calls CreateCustomAvailabilityZoneRequestFunc.
func (mock *rdsClientMock) CreateCustomAvailabilityZoneRequest(in1 *rds.CreateCustomAvailabilityZoneInput) (*request.Request, *rds.CreateCustomAvailabilityZoneOutput) {
	if mock.CreateCustomAvailabilityZoneRequestFunc == nil {
		panic("rdsClientMock.CreateCustomAvailabilityZoneRequestFunc: method is nil but rdsClient.CreateCustomAvailabilityZoneRequest was just called")
	}
	callInfo := struct {
		In1 *rds.CreateCustomAvailabilityZoneInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateCustomAvailabilityZoneRequest.Lock()
	mock.calls.CreateCustomAvailabilityZoneRequest = append(mock.calls.CreateCustomAvailabilityZoneRequest, callInfo)
	lockrdsClientMockCreateCustomAvailabilityZoneRequest.Unlock()
	return mock.CreateCustomAvailabilityZoneRequestFunc(in1)
}

// CreateCustomAvailabilityZoneRequestCalls gets all the calls that were made to CreateCustomAvailabilityZoneRequest.
// Check the length with:
//     len(mockedrdsClient.CreateCustomAvailabilityZoneRequestCalls())
func (mock *rdsClientMock) CreateCustomAvailabilityZoneRequestCalls() []struct {
	In1 *rds.CreateCustomAvailabilityZoneInput
} {
	var calls []struct {
		In1 *rds.CreateCustomAvailabilityZoneInput
	}
	lockrdsClientMockCreateCustomAvailabilityZoneRequest.RLock()
	calls = mock.calls.CreateCustomAvailabilityZoneRequest
	lockrdsClientMockCreateCustomAvailabilityZoneRequest.RUnlock()
	return calls
}

// CreateCustomAvailabilityZoneWithContext calls CreateCustomAvailabilityZoneWithContextFunc.
func (mock *rdsClientMock) CreateCustomAvailabilityZoneWithContext(in1 context.Context, in2 *rds.CreateCustomAvailabilityZoneInput, in3 ...request.Option) (*rds.CreateCustomAvailabilityZoneOutput, error) {
	if mock.CreateCustomAvailabilityZoneWithContextFunc == nil {
		panic("rdsClientMock.CreateCustomAvailabilityZoneWithContextFunc: method is nil but rdsClient.CreateCustomAvailabilityZoneWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.CreateCustomAvailabilityZoneInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockCreateCustomAvailabilityZoneWithContext.Lock()
	mock.calls.CreateCustomAvailabilityZoneWithContext = append(mock.calls.CreateCustomAvailabilityZoneWithContext, callInfo)
	lockrdsClientMockCreateCustomAvailabilityZoneWithContext.Unlock()
	return mock.CreateCustomAvailabilityZoneWithContextFunc(in1, in2, in3...)
}

// CreateCustomAvailabilityZoneWithContextCalls gets all the calls that were made to CreateCustomAvailabilityZoneWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateCustomAvailabilityZoneWithContextCalls())
func (mock *rdsClientMock) CreateCustomAvailabilityZoneWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.CreateCustomAvailabilityZoneInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.CreateCustomAvailabilityZoneInput
		In3 []request.Option
	}
	lockrdsClientMockCreateCustomAvailabilityZoneWithContext.RLock()
	calls = mock.calls.CreateCustomAvailabilityZoneWithContext
	lockrdsClientMockCreateCustomAvailabilityZoneWithContext.RUnlock()
	return calls
}

// CreateDBCluster calls CreateDBClusterFunc.
func (mock *rdsClientMock) CreateDBCluster(in1 *rds.CreateDBClusterInput) (*rds.CreateDBClusterOutput, error) {
	if mock.CreateDBClusterFunc == nil {
		panic("rdsClientMock.CreateDBClusterFunc: method is nil but rdsClient.CreateDBCluster was just called")
	}
	callInfo := struct {
		In1 *rds.CreateDBClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateDBCluster.Lock()
	mock.calls.CreateDBCluster = append(mock.calls.CreateDBCluster, callInfo)
	lockrdsClientMockCreateDBCluster.Unlock()
	return mock.CreateDBClusterFunc(in1)
}

// CreateDBClusterCalls gets all the calls that were made to CreateDBCluster.
// Check the length with:
//     len(mockedrdsClient.CreateDBClusterCalls())
func (mock *rdsClientMock) CreateDBClusterCalls() []struct {
	In1 *rds.CreateDBClusterInput
} {
	var calls []struct {
		In1 *rds.CreateDBClusterInput
	}
	lockrdsClientMockCreateDBCluster.RLock()
	calls = mock.calls.CreateDBCluster
	lockrdsClientMockCreateDBCluster.RUnlock()
	return calls
}

// CreateDBClusterEndpoint calls CreateDBClusterEndpointFunc.
func (mock *rdsClientMock) CreateDBClusterEndpoint(in1 *rds.CreateDBClusterEndpointInput) (*rds.CreateDBClusterEndpointOutput, error) {
	if mock.CreateDBClusterEndpointFunc == nil {
		panic("rdsClientMock.CreateDBClusterEndpointFunc: method is nil but rdsClient.CreateDBClusterEndpoint was just called")
	}
	callInfo := struct {
		In1 *rds.CreateDBClusterEndpointInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateDBClusterEndpoint.Lock()
	mock.calls.CreateDBClusterEndpoint = append(mock.calls.CreateDBClusterEndpoint, callInfo)
	lockrdsClientMockCreateDBClusterEndpoint.Unlock()
	return mock.CreateDBClusterEndpointFunc(in1)
}

// CreateDBClusterEndpointCalls gets all the calls that were made to CreateDBClusterEndpoint.
// Check the length with:
//     len(mockedrdsClient.CreateDBClusterEndpointCalls())
func (mock *rdsClientMock) CreateDBClusterEndpointCalls() []struct {
	In1 *rds.CreateDBClusterEndpointInput
} {
	var calls []struct {
		In1 *rds.CreateDBClusterEndpointInput
	}
	lockrdsClientMockCreateDBClusterEndpoint.RLock()
	calls = mock.calls.CreateDBClusterEndpoint
	lockrdsClientMockCreateDBClusterEndpoint.RUnlock()
	return calls
}

// CreateDBClusterEndpointRequest calls CreateDBClusterEndpointRequestFunc.
func (mock *rdsClientMock) CreateDBClusterEndpointRequest(in1 *rds.CreateDBClusterEndpointInput) (*request.Request, *rds.CreateDBClusterEndpointOutput) {
	if mock.CreateDBClusterEndpointRequestFunc == nil {
		panic("rdsClientMock.CreateDBClusterEndpointRequestFunc: method is nil but rdsClient.CreateDBClusterEndpointRequest was just called")
	}
	callInfo := struct {
		In1 *rds.CreateDBClusterEndpointInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateDBClusterEndpointRequest.Lock()
	mock.calls.CreateDBClusterEndpointRequest = append(mock.calls.CreateDBClusterEndpointRequest, callInfo)
	lockrdsClientMockCreateDBClusterEndpointRequest.Unlock()
	return mock.CreateDBClusterEndpointRequestFunc(in1)
}

// CreateDBClusterEndpointRequestCalls gets all the calls that were made to CreateDBClusterEndpointRequest.
// Check the length with:
//     len(mockedrdsClient.CreateDBClusterEndpointRequestCalls())
func (mock *rdsClientMock) CreateDBClusterEndpointRequestCalls() []struct {
	In1 *rds.CreateDBClusterEndpointInput
} {
	var calls []struct {
		In1 *rds.CreateDBClusterEndpointInput
	}
	lockrdsClientMockCreateDBClusterEndpointRequest.RLock()
	calls = mock.calls.CreateDBClusterEndpointRequest
	lockrdsClientMockCreateDBClusterEndpointRequest.RUnlock()
	return calls
}

// CreateDBClusterEndpointWithContext calls CreateDBClusterEndpointWithContextFunc.
func (mock *rdsClientMock) CreateDBClusterEndpointWithContext(in1 context.Context, in2 *rds.CreateDBClusterEndpointInput, in3 ...request.Option) (*rds.CreateDBClusterEndpointOutput, error) {
	if mock.CreateDBClusterEndpointWithContextFunc == nil {
		panic("rdsClientMock.CreateDBClusterEndpointWithContextFunc: method is nil but rdsClient.CreateDBClusterEndpointWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.CreateDBClusterEndpointInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockCreateDBClusterEndpointWithContext.Lock()
	mock.calls.CreateDBClusterEndpointWithContext = append(mock.calls.CreateDBClusterEndpointWithContext, callInfo)
	lockrdsClientMockCreateDBClusterEndpointWithContext.Unlock()
	return mock.CreateDBClusterEndpointWithContextFunc(in1, in2, in3...)
}

// CreateDBClusterEndpointWithContextCalls gets all the calls that were made to CreateDBClusterEndpointWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateDBClusterEndpointWithContextCalls())
func (mock *rdsClientMock) CreateDBClusterEndpointWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.CreateDBClusterEndpointInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.CreateDBClusterEndpointInput
		In3 []request.Option
	}
	lockrdsClientMockCreateDBClusterEndpointWithContext.RLock()
	calls = mock.calls.CreateDBClusterEndpointWithContext
	lockrdsClientMockCreateDBClusterEndpointWithContext.RUnlock()
	return calls
}

// CreateDBClusterParameterGroup calls CreateDBClusterParameterGroupFunc.
func (mock *rdsClientMock) CreateDBClusterParameterGroup(in1 *rds.CreateDBClusterParameterGroupInput) (*rds.CreateDBClusterParameterGroupOutput, error) {
	if mock.CreateDBClusterParameterGroupFunc == nil {
		panic("rdsClientMock.CreateDBClusterParameterGroupFunc: method is nil but rdsClient.CreateDBClusterParameterGroup was just called")
	}
	callInfo := struct {
		In1 *rds.CreateDBClusterParameterGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateDBClusterParameterGroup.Lock()
	mock.calls.CreateDBClusterParameterGroup = append(mock.calls.CreateDBClusterParameterGroup, callInfo)
	lockrdsClientMockCreateDBClusterParameterGroup.Unlock()
	return mock.CreateDBClusterParameterGroupFunc(in1)
}

// CreateDBClusterParameterGroupCalls gets all the calls that were made to CreateDBClusterParameterGroup.
// Check the length with:
//     len(mockedrdsClient.CreateDBClusterParameterGroupCalls())
func (mock *rdsClientMock) CreateDBClusterParameterGroupCalls() []struct {
	In1 *rds.CreateDBClusterParameterGroupInput
} {
	var calls []struct {
		In1 *rds.CreateDBClusterParameterGroupInput
	}
	lockrdsClientMockCreateDBClusterParameterGroup.RLock()
	calls = mock.calls.CreateDBClusterParameterGroup
	lockrdsClientMockCreateDBClusterParameterGroup.RUnlock()
	return calls
}

// CreateDBClusterParameterGroupRequest calls CreateDBClusterParameterGroupRequestFunc.
func (mock *rdsClientMock) CreateDBClusterParameterGroupRequest(in1 *rds.CreateDBClusterParameterGroupInput) (*request.Request, *rds.CreateDBClusterParameterGroupOutput) {
	if mock.CreateDBClusterParameterGroupRequestFunc == nil {
		panic("rdsClientMock.CreateDBClusterParameterGroupRequestFunc: method is nil but rdsClient.CreateDBClusterParameterGroupRequest was just called")
	}
	callInfo := struct {
		In1 *rds.CreateDBClusterParameterGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateDBClusterParameterGroupRequest.Lock()
	mock.calls.CreateDBClusterParameterGroupRequest = append(mock.calls.CreateDBClusterParameterGroupRequest, callInfo)
	lockrdsClientMockCreateDBClusterParameterGroupRequest.Unlock()
	return mock.CreateDBClusterParameterGroupRequestFunc(in1)
}

// CreateDBClusterParameterGroupRequestCalls gets all the calls that were made to CreateDBClusterParameterGroupRequest.
// Check the length with:
//     len(mockedrdsClient.CreateDBClusterParameterGroupRequestCalls())
func (mock *rdsClientMock) CreateDBClusterParameterGroupRequestCalls() []struct {
	In1 *rds.CreateDBClusterParameterGroupInput
} {
	var calls []struct {
		In1 *rds.CreateDBClusterParameterGroupInput
	}
	lockrdsClientMockCreateDBClusterParameterGroupRequest.RLock()
	calls = mock.calls.CreateDBClusterParameterGroupRequest
	lockrdsClientMockCreateDBClusterParameterGroupRequest.RUnlock()
	return calls
}

// CreateDBClusterParameterGroupWithContext calls CreateDBClusterParameterGroupWithContextFunc.
func (mock *rdsClientMock) CreateDBClusterParameterGroupWithContext(in1 context.Context, in2 *rds.CreateDBClusterParameterGroupInput, in3 ...request.Option) (*rds.CreateDBClusterParameterGroupOutput, error) {
	if mock.CreateDBClusterParameterGroupWithContextFunc == nil {
		panic("rdsClientMock.CreateDBClusterParameterGroupWithContextFunc: method is nil but rdsClient.CreateDBClusterParameterGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.CreateDBClusterParameterGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockCreateDBClusterParameterGroupWithContext.Lock()
	mock.calls.CreateDBClusterParameterGroupWithContext = append(mock.calls.CreateDBClusterParameterGroupWithContext, callInfo)
	lockrdsClientMockCreateDBClusterParameterGroupWithContext.Unlock()
	return mock.CreateDBClusterParameterGroupWithContextFunc(in1, in2, in3...)
}

// CreateDBClusterParameterGroupWithContextCalls gets all the calls that were made to CreateDBClusterParameterGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateDBClusterParameterGroupWithContextCalls())
func (mock *rdsClientMock) CreateDBClusterParameterGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.CreateDBClusterParameterGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.CreateDBClusterParameterGroupInput
		In3 []request.Option
	}
	lockrdsClientMockCreateDBClusterParameterGroupWithContext.RLock()
	calls = mock.calls.CreateDBClusterParameterGroupWithContext
	lockrdsClientMockCreateDBClusterParameterGroupWithContext.RUnlock()
	return calls
}

// CreateDBClusterRequest calls CreateDBClusterRequestFunc.
func (mock *rdsClientMock) CreateDBClusterRequest(in1 *rds.CreateDBClusterInput) (*request.Request, *rds.CreateDBClusterOutput) {
	if mock.CreateDBClusterRequestFunc == nil {
		panic("rdsClientMock.CreateDBClusterRequestFunc: method is nil but rdsClient.CreateDBClusterRequest was just called")
	}
	callInfo := struct {
		In1 *rds.CreateDBClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateDBClusterRequest.Lock()
	mock.calls.CreateDBClusterRequest = append(mock.calls.CreateDBClusterRequest, callInfo)
	lockrdsClientMockCreateDBClusterRequest.Unlock()
	return mock.CreateDBClusterRequestFunc(in1)
}

// CreateDBClusterRequestCalls gets all the calls that were made to CreateDBClusterRequest.
// Check the length with:
//     len(mockedrdsClient.CreateDBClusterRequestCalls())
func (mock *rdsClientMock) CreateDBClusterRequestCalls() []struct {
	In1 *rds.CreateDBClusterInput
} {
	var calls []struct {
		In1 *rds.CreateDBClusterInput
	}
	lockrdsClientMockCreateDBClusterRequest.RLock()
	calls = mock.calls.CreateDBClusterRequest
	lockrdsClientMockCreateDBClusterRequest.RUnlock()
	return calls
}

// CreateDBClusterSnapshot calls CreateDBClusterSnapshotFunc.
func (mock *rdsClientMock) CreateDBClusterSnapshot(in1 *rds.CreateDBClusterSnapshotInput) (*rds.CreateDBClusterSnapshotOutput, error) {
	if mock.CreateDBClusterSnapshotFunc == nil {
		panic("rdsClientMock.CreateDBClusterSnapshotFunc: method is nil but rdsClient.CreateDBClusterSnapshot was just called")
	}
	callInfo := struct {
		In1 *rds.CreateDBClusterSnapshotInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateDBClusterSnapshot.Lock()
	mock.calls.CreateDBClusterSnapshot = append(mock.calls.CreateDBClusterSnapshot, callInfo)
	lockrdsClientMockCreateDBClusterSnapshot.Unlock()
	return mock.CreateDBClusterSnapshotFunc(in1)
}

// CreateDBClusterSnapshotCalls gets all the calls that were made to CreateDBClusterSnapshot.
// Check the length with:
//     len(mockedrdsClient.CreateDBClusterSnapshotCalls())
func (mock *rdsClientMock) CreateDBClusterSnapshotCalls() []struct {
	In1 *rds.CreateDBClusterSnapshotInput
} {
	var calls []struct {
		In1 *rds.CreateDBClusterSnapshotInput
	}
	lockrdsClientMockCreateDBClusterSnapshot.RLock()
	calls = mock.calls.CreateDBClusterSnapshot
	lockrdsClientMockCreateDBClusterSnapshot.RUnlock()
	return calls
}

// CreateDBClusterSnapshotRequest calls CreateDBClusterSnapshotRequestFunc.
func (mock *rdsClientMock) CreateDBClusterSnapshotRequest(in1 *rds.CreateDBClusterSnapshotInput) (*request.Request, *rds.CreateDBClusterSnapshotOutput) {
	if mock.CreateDBClusterSnapshotRequestFunc == nil {
		panic("rdsClientMock.CreateDBClusterSnapshotRequestFunc: method is nil but rdsClient.CreateDBClusterSnapshotRequest was just called")
	}
	callInfo := struct {
		In1 *rds.CreateDBClusterSnapshotInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateDBClusterSnapshotRequest.Lock()
	mock.calls.CreateDBClusterSnapshotRequest = append(mock.calls.CreateDBClusterSnapshotRequest, callInfo)
	lockrdsClientMockCreateDBClusterSnapshotRequest.Unlock()
	return mock.CreateDBClusterSnapshotRequestFunc(in1)
}

// CreateDBClusterSnapshotRequestCalls gets all the calls that were made to CreateDBClusterSnapshotRequest.
// Check the length with:
//     len(mockedrdsClient.CreateDBClusterSnapshotRequestCalls())
func (mock *rdsClientMock) CreateDBClusterSnapshotRequestCalls() []struct {
	In1 *rds.CreateDBClusterSnapshotInput
} {
	var calls []struct {
		In1 *rds.CreateDBClusterSnapshotInput
	}
	lockrdsClientMockCreateDBClusterSnapshotRequest.RLock()
	calls = mock.calls.CreateDBClusterSnapshotRequest
	lockrdsClientMockCreateDBClusterSnapshotRequest.RUnlock()
	return calls
}

// CreateDBClusterSnapshotWithContext calls CreateDBClusterSnapshotWithContextFunc.
func (mock *rdsClientMock) CreateDBClusterSnapshotWithContext(in1 context.Context, in2 *rds.CreateDBClusterSnapshotInput, in3 ...request.Option) (*rds.CreateDBClusterSnapshotOutput, error) {
	if mock.CreateDBClusterSnapshotWithContextFunc == nil {
		panic("rdsClientMock.CreateDBClusterSnapshotWithContextFunc: method is nil but rdsClient.CreateDBClusterSnapshotWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.CreateDBClusterSnapshotInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockCreateDBClusterSnapshotWithContext.Lock()
	mock.calls.CreateDBClusterSnapshotWithContext = append(mock.calls.CreateDBClusterSnapshotWithContext, callInfo)
	lockrdsClientMockCreateDBClusterSnapshotWithContext.Unlock()
	return mock.CreateDBClusterSnapshotWithContextFunc(in1, in2, in3...)
}

// CreateDBClusterSnapshotWithContextCalls gets all the calls that were made to CreateDBClusterSnapshotWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateDBClusterSnapshotWithContextCalls())
func (mock *rdsClientMock) CreateDBClusterSnapshotWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.CreateDBClusterSnapshotInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.CreateDBClusterSnapshotInput
		In3 []request.Option
	}
	lockrdsClientMockCreateDBClusterSnapshotWithContext.RLock()
	calls = mock.calls.CreateDBClusterSnapshotWithContext
	lockrdsClientMockCreateDBClusterSnapshotWithContext.RUnlock()
	return calls
}

// CreateDBClusterWithContext calls CreateDBClusterWithContextFunc.
func (mock *rdsClientMock) CreateDBClusterWithContext(in1 context.Context, in2 *rds.CreateDBClusterInput, in3 ...request.Option) (*rds.CreateDBClusterOutput, error) {
	if mock.CreateDBClusterWithContextFunc == nil {
		panic("rdsClientMock.CreateDBClusterWithContextFunc: method is nil but rdsClient.CreateDBClusterWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.CreateDBClusterInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockCreateDBClusterWithContext.Lock()
	mock.calls.CreateDBClusterWithContext = append(mock.calls.CreateDBClusterWithContext, callInfo)
	lockrdsClientMockCreateDBClusterWithContext.Unlock()
	return mock.CreateDBClusterWithContextFunc(in1, in2, in3...)
}

// CreateDBClusterWithContextCalls gets all the calls that were made to CreateDBClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateDBClusterWithContextCalls())
func (mock *rdsClientMock) CreateDBClusterWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.CreateDBClusterInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.CreateDBClusterInput
		In3 []request.Option
	}
	lockrdsClientMockCreateDBClusterWithContext.RLock()
	calls = mock.calls.CreateDBClusterWithContext
	lockrdsClientMockCreateDBClusterWithContext.RUnlock()
	return calls
}

// CreateDBInstance calls CreateDBInstanceFunc.
func (mock *rdsClientMock) CreateDBInstance(in1 *rds.CreateDBInstanceInput) (*rds.CreateDBInstanceOutput, error) {
	if mock.CreateDBInstanceFunc == nil {
		panic("rdsClientMock.CreateDBInstanceFunc: method is nil but rdsClient.CreateDBInstance was just called")
	}
	callInfo := struct {
		In1 *rds.CreateDBInstanceInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateDBInstance.Lock()
	mock.calls.CreateDBInstance = append(mock.calls.CreateDBInstance, callInfo)
	lockrdsClientMockCreateDBInstance.Unlock()
	return mock.CreateDBInstanceFunc(in1)
}

// CreateDBInstanceCalls gets all the calls that were made to CreateDBInstance.
// Check the length with:
//     len(mockedrdsClient.CreateDBInstanceCalls())
func (mock *rdsClientMock) CreateDBInstanceCalls() []struct {
	In1 *rds.CreateDBInstanceInput
} {
	var calls []struct {
		In1 *rds.CreateDBInstanceInput
	}
	lockrdsClientMockCreateDBInstance.RLock()
	calls = mock.calls.CreateDBInstance
	lockrdsClientMockCreateDBInstance.RUnlock()
	return calls
}

// CreateDBInstanceReadReplica calls CreateDBInstanceReadReplicaFunc.
func (mock *rdsClientMock) CreateDBInstanceReadReplica(in1 *rds.CreateDBInstanceReadReplicaInput) (*rds.CreateDBInstanceReadReplicaOutput, error) {
	if mock.CreateDBInstanceReadReplicaFunc == nil {
		panic("rdsClientMock.CreateDBInstanceReadReplicaFunc: method is nil but rdsClient.CreateDBInstanceReadReplica was just called")
	}
	callInfo := struct {
		In1 *rds.CreateDBInstanceReadReplicaInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateDBInstanceReadReplica.Lock()
	mock.calls.CreateDBInstanceReadReplica = append(mock.calls.CreateDBInstanceReadReplica, callInfo)
	lockrdsClientMockCreateDBInstanceReadReplica.Unlock()
	return mock.CreateDBInstanceReadReplicaFunc(in1)
}

// CreateDBInstanceReadReplicaCalls gets all the calls that were made to CreateDBInstanceReadReplica.
// Check the length with:
//     len(mockedrdsClient.CreateDBInstanceReadReplicaCalls())
func (mock *rdsClientMock) CreateDBInstanceReadReplicaCalls() []struct {
	In1 *rds.CreateDBInstanceReadReplicaInput
} {
	var calls []struct {
		In1 *rds.CreateDBInstanceReadReplicaInput
	}
	lockrdsClientMockCreateDBInstanceReadReplica.RLock()
	calls = mock.calls.CreateDBInstanceReadReplica
	lockrdsClientMockCreateDBInstanceReadReplica.RUnlock()
	return calls
}

// CreateDBInstanceReadReplicaRequest calls CreateDBInstanceReadReplicaRequestFunc.
func (mock *rdsClientMock) CreateDBInstanceReadReplicaRequest(in1 *rds.CreateDBInstanceReadReplicaInput) (*request.Request, *rds.CreateDBInstanceReadReplicaOutput) {
	if mock.CreateDBInstanceReadReplicaRequestFunc == nil {
		panic("rdsClientMock.CreateDBInstanceReadReplicaRequestFunc: method is nil but rdsClient.CreateDBInstanceReadReplicaRequest was just called")
	}
	callInfo := struct {
		In1 *rds.CreateDBInstanceReadReplicaInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateDBInstanceReadReplicaRequest.Lock()
	mock.calls.CreateDBInstanceReadReplicaRequest = append(mock.calls.CreateDBInstanceReadReplicaRequest, callInfo)
	lockrdsClientMockCreateDBInstanceReadReplicaRequest.Unlock()
	return mock.CreateDBInstanceReadReplicaRequestFunc(in1)
}

// CreateDBInstanceReadReplicaRequestCalls gets all the calls that were made to CreateDBInstanceReadReplicaRequest.
// Check the length with:
//     len(mockedrdsClient.CreateDBInstanceReadReplicaRequestCalls())
func (mock *rdsClientMock) CreateDBInstanceReadReplicaRequestCalls() []struct {
	In1 *rds.CreateDBInstanceReadReplicaInput
} {
	var calls []struct {
		In1 *rds.CreateDBInstanceReadReplicaInput
	}
	lockrdsClientMockCreateDBInstanceReadReplicaRequest.RLock()
	calls = mock.calls.CreateDBInstanceReadReplicaRequest
	lockrdsClientMockCreateDBInstanceReadReplicaRequest.RUnlock()
	return calls
}

// CreateDBInstanceReadReplicaWithContext calls CreateDBInstanceReadReplicaWithContextFunc.
func (mock *rdsClientMock) CreateDBInstanceReadReplicaWithContext(in1 context.Context, in2 *rds.CreateDBInstanceReadReplicaInput, in3 ...request.Option) (*rds.CreateDBInstanceReadReplicaOutput, error) {
	if mock.CreateDBInstanceReadReplicaWithContextFunc == nil {
		panic("rdsClientMock.CreateDBInstanceReadReplicaWithContextFunc: method is nil but rdsClient.CreateDBInstanceReadReplicaWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.CreateDBInstanceReadReplicaInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockCreateDBInstanceReadReplicaWithContext.Lock()
	mock.calls.CreateDBInstanceReadReplicaWithContext = append(mock.calls.CreateDBInstanceReadReplicaWithContext, callInfo)
	lockrdsClientMockCreateDBInstanceReadReplicaWithContext.Unlock()
	return mock.CreateDBInstanceReadReplicaWithContextFunc(in1, in2, in3...)
}

// CreateDBInstanceReadReplicaWithContextCalls gets all the calls that were made to CreateDBInstanceReadReplicaWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateDBInstanceReadReplicaWithContextCalls())
func (mock *rdsClientMock) CreateDBInstanceReadReplicaWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.CreateDBInstanceReadReplicaInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.CreateDBInstanceReadReplicaInput
		In3 []request.Option
	}
	lockrdsClientMockCreateDBInstanceReadReplicaWithContext.RLock()
	calls = mock.calls.CreateDBInstanceReadReplicaWithContext
	lockrdsClientMockCreateDBInstanceReadReplicaWithContext.RUnlock()
	return calls
}

// CreateDBInstanceRequest calls CreateDBInstanceRequestFunc.
func (mock *rdsClientMock) CreateDBInstanceRequest(in1 *rds.CreateDBInstanceInput) (*request.Request, *rds.CreateDBInstanceOutput) {
	if mock.CreateDBInstanceRequestFunc == nil {
		panic("rdsClientMock.CreateDBInstanceRequestFunc: method is nil but rdsClient.CreateDBInstanceRequest was just called")
	}
	callInfo := struct {
		In1 *rds.CreateDBInstanceInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateDBInstanceRequest.Lock()
	mock.calls.CreateDBInstanceRequest = append(mock.calls.CreateDBInstanceRequest, callInfo)
	lockrdsClientMockCreateDBInstanceRequest.Unlock()
	return mock.CreateDBInstanceRequestFunc(in1)
}

// CreateDBInstanceRequestCalls gets all the calls that were made to CreateDBInstanceRequest.
// Check the length with:
//     len(mockedrdsClient.CreateDBInstanceRequestCalls())
func (mock *rdsClientMock) CreateDBInstanceRequestCalls() []struct {
	In1 *rds.CreateDBInstanceInput
} {
	var calls []struct {
		In1 *rds.CreateDBInstanceInput
	}
	lockrdsClientMockCreateDBInstanceRequest.RLock()
	calls = mock.calls.CreateDBInstanceRequest
	lockrdsClientMockCreateDBInstanceRequest.RUnlock()
	return calls
}

// CreateDBInstanceWithContext calls CreateDBInstanceWithContextFunc.
func (mock *rdsClientMock) CreateDBInstanceWithContext(in1 context.Context, in2 *rds.CreateDBInstanceInput, in3 ...request.Option) (*rds.CreateDBInstanceOutput, error) {
	if mock.CreateDBInstanceWithContextFunc == nil {
		panic("rdsClientMock.CreateDBInstanceWithContextFunc: method is nil but rdsClient.CreateDBInstanceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.CreateDBInstanceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockCreateDBInstanceWithContext.Lock()
	mock.calls.CreateDBInstanceWithContext = append(mock.calls.CreateDBInstanceWithContext, callInfo)
	lockrdsClientMockCreateDBInstanceWithContext.Unlock()
	return mock.CreateDBInstanceWithContextFunc(in1, in2, in3...)
}

// CreateDBInstanceWithContextCalls gets all the calls that were made to CreateDBInstanceWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateDBInstanceWithContextCalls())
func (mock *rdsClientMock) CreateDBInstanceWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.CreateDBInstanceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.CreateDBInstanceInput
		In3 []request.Option
	}
	lockrdsClientMockCreateDBInstanceWithContext.RLock()
	calls = mock.calls.CreateDBInstanceWithContext
	lockrdsClientMockCreateDBInstanceWithContext.RUnlock()
	return calls
}

// CreateDBParameterGroup calls CreateDBParameterGroupFunc.
func (mock *rdsClientMock) CreateDBParameterGroup(in1 *rds.CreateDBParameterGroupInput) (*rds.CreateDBParameterGroupOutput, error) {
	if mock.CreateDBParameterGroupFunc == nil {
		panic("rdsClientMock.CreateDBParameterGroupFunc: method is nil but rdsClient.CreateDBParameterGroup was just called")
	}
	callInfo := struct {
		In1 *rds.CreateDBParameterGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateDBParameterGroup.Lock()
	mock.calls.CreateDBParameterGroup = append(mock.calls.CreateDBParameterGroup, callInfo)
	lockrdsClientMockCreateDBParameterGroup.Unlock()
	return mock.CreateDBParameterGroupFunc(in1)
}

// CreateDBParameterGroupCalls gets all the calls that were made to CreateDBParameterGroup.
// Check the length with:
//     len(mockedrdsClient.CreateDBParameterGroupCalls())
func (mock *rdsClientMock) CreateDBParameterGroupCalls() []struct {
	In1 *rds.CreateDBParameterGroupInput
} {
	var calls []struct {
		In1 *rds.CreateDBParameterGroupInput
	}
	lockrdsClientMockCreateDBParameterGroup.RLock()
	calls = mock.calls.CreateDBParameterGroup
	lockrdsClientMockCreateDBParameterGroup.RUnlock()
	return calls
}

// CreateDBParameterGroupRequest calls CreateDBParameterGroupRequestFunc.
func (mock *rdsClientMock) CreateDBParameterGroupRequest(in1 *rds.CreateDBParameterGroupInput) (*request.Request, *rds.CreateDBParameterGroupOutput) {
	if mock.CreateDBParameterGroupRequestFunc == nil {
		panic("rdsClientMock.CreateDBParameterGroupRequestFunc: method is nil but rdsClient.CreateDBParameterGroupRequest was just called")
	}
	callInfo := struct {
		In1 *rds.CreateDBParameterGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateDBParameterGroupRequest.Lock()
	mock.calls.CreateDBParameterGroupRequest = append(mock.calls.CreateDBParameterGroupRequest, callInfo)
	lockrdsClientMockCreateDBParameterGroupRequest.Unlock()
	return mock.CreateDBParameterGroupRequestFunc(in1)
}

// CreateDBParameterGroupRequestCalls gets all the calls that were made to CreateDBParameterGroupRequest.
// Check the length with:
//     len(mockedrdsClient.CreateDBParameterGroupRequestCalls())
func (mock *rdsClientMock) CreateDBParameterGroupRequestCalls() []struct {
	In1 *rds.CreateDBParameterGroupInput
} {
	var calls []struct {
		In1 *rds.CreateDBParameterGroupInput
	}
	lockrdsClientMockCreateDBParameterGroupRequest.RLock()
	calls = mock.calls.CreateDBParameterGroupRequest
	lockrdsClientMockCreateDBParameterGroupRequest.RUnlock()
	return calls
}

// CreateDBParameterGroupWithContext calls CreateDBParameterGroupWithContextFunc.
func (mock *rdsClientMock) CreateDBParameterGroupWithContext(in1 context.Context, in2 *rds.CreateDBParameterGroupInput, in3 ...request.Option) (*rds.CreateDBParameterGroupOutput, error) {
	if mock.CreateDBParameterGroupWithContextFunc == nil {
		panic("rdsClientMock.CreateDBParameterGroupWithContextFunc: method is nil but rdsClient.CreateDBParameterGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.CreateDBParameterGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockCreateDBParameterGroupWithContext.Lock()
	mock.calls.CreateDBParameterGroupWithContext = append(mock.calls.CreateDBParameterGroupWithContext, callInfo)
	lockrdsClientMockCreateDBParameterGroupWithContext.Unlock()
	return mock.CreateDBParameterGroupWithContextFunc(in1, in2, in3...)
}

// CreateDBParameterGroupWithContextCalls gets all the calls that were made to CreateDBParameterGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateDBParameterGroupWithContextCalls())
func (mock *rdsClientMock) CreateDBParameterGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.CreateDBParameterGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.CreateDBParameterGroupInput
		In3 []request.Option
	}
	lockrdsClientMockCreateDBParameterGroupWithContext.RLock()
	calls = mock.calls.CreateDBParameterGroupWithContext
	lockrdsClientMockCreateDBParameterGroupWithContext.RUnlock()
	return calls
}

// CreateDBProxy calls CreateDBProxyFunc.
func (mock *rdsClientMock) CreateDBProxy(in1 *rds.CreateDBProxyInput) (*rds.CreateDBProxyOutput, error) {
	if mock.CreateDBProxyFunc == nil {
		panic("rdsClientMock.CreateDBProxyFunc: method is nil but rdsClient.CreateDBProxy was just called")
	}
	callInfo := struct {
		In1 *rds.CreateDBProxyInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateDBProxy.Lock()
	mock.calls.CreateDBProxy = append(mock.calls.CreateDBProxy, callInfo)
	lockrdsClientMockCreateDBProxy.Unlock()
	return mock.CreateDBProxyFunc(in1)
}

// CreateDBProxyCalls gets all the calls that were made to CreateDBProxy.
// Check the length with:
//     len(mockedrdsClient.CreateDBProxyCalls())
func (mock *rdsClientMock) CreateDBProxyCalls() []struct {
	In1 *rds.CreateDBProxyInput
} {
	var calls []struct {
		In1 *rds.CreateDBProxyInput
	}
	lockrdsClientMockCreateDBProxy.RLock()
	calls = mock.calls.CreateDBProxy
	lockrdsClientMockCreateDBProxy.RUnlock()
	return calls
}

// CreateDBProxyRequest calls CreateDBProxyRequestFunc.
func (mock *rdsClientMock) CreateDBProxyRequest(in1 *rds.CreateDBProxyInput) (*request.Request, *rds.CreateDBProxyOutput) {
	if mock.CreateDBProxyRequestFunc == nil {
		panic("rdsClientMock.CreateDBProxyRequestFunc: method is nil but rdsClient.CreateDBProxyRequest was just called")
	}
	callInfo := struct {
		In1 *rds.CreateDBProxyInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateDBProxyRequest.Lock()
	mock.calls.CreateDBProxyRequest = append(mock.calls.CreateDBProxyRequest, callInfo)
	lockrdsClientMockCreateDBProxyRequest.Unlock()
	return mock.CreateDBProxyRequestFunc(in1)
}

// CreateDBProxyRequestCalls gets all the calls that were made to CreateDBProxyRequest.
// Check the length with:
//     len(mockedrdsClient.CreateDBProxyRequestCalls())
func (mock *rdsClientMock) CreateDBProxyRequestCalls() []struct {
	In1 *rds.CreateDBProxyInput
} {
	var calls []struct {
		In1 *rds.CreateDBProxyInput
	}
	lockrdsClientMockCreateDBProxyRequest.RLock()
	calls = mock.calls.CreateDBProxyRequest
	lockrdsClientMockCreateDBProxyRequest.RUnlock()
	return calls
}

// CreateDBProxyWithContext calls CreateDBProxyWithContextFunc.
func (mock *rdsClientMock) CreateDBProxyWithContext(in1 context.Context, in2 *rds.CreateDBProxyInput, in3 ...request.Option) (*rds.CreateDBProxyOutput, error) {
	if mock.CreateDBProxyWithContextFunc == nil {
		panic("rdsClientMock.CreateDBProxyWithContextFunc: method is nil but rdsClient.CreateDBProxyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.CreateDBProxyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockCreateDBProxyWithContext.Lock()
	mock.calls.CreateDBProxyWithContext = append(mock.calls.CreateDBProxyWithContext, callInfo)
	lockrdsClientMockCreateDBProxyWithContext.Unlock()
	return mock.CreateDBProxyWithContextFunc(in1, in2, in3...)
}

// CreateDBProxyWithContextCalls gets all the calls that were made to CreateDBProxyWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateDBProxyWithContextCalls())
func (mock *rdsClientMock) CreateDBProxyWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.CreateDBProxyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.CreateDBProxyInput
		In3 []request.Option
	}
	lockrdsClientMockCreateDBProxyWithContext.RLock()
	calls = mock.calls.CreateDBProxyWithContext
	lockrdsClientMockCreateDBProxyWithContext.RUnlock()
	return calls
}

// CreateDBSecurityGroup calls CreateDBSecurityGroupFunc.
func (mock *rdsClientMock) CreateDBSecurityGroup(in1 *rds.CreateDBSecurityGroupInput) (*rds.CreateDBSecurityGroupOutput, error) {
	if mock.CreateDBSecurityGroupFunc == nil {
		panic("rdsClientMock.CreateDBSecurityGroupFunc: method is nil but rdsClient.CreateDBSecurityGroup was just called")
	}
	callInfo := struct {
		In1 *rds.CreateDBSecurityGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateDBSecurityGroup.Lock()
	mock.calls.CreateDBSecurityGroup = append(mock.calls.CreateDBSecurityGroup, callInfo)
	lockrdsClientMockCreateDBSecurityGroup.Unlock()
	return mock.CreateDBSecurityGroupFunc(in1)
}

// CreateDBSecurityGroupCalls gets all the calls that were made to CreateDBSecurityGroup.
// Check the length with:
//     len(mockedrdsClient.CreateDBSecurityGroupCalls())
func (mock *rdsClientMock) CreateDBSecurityGroupCalls() []struct {
	In1 *rds.CreateDBSecurityGroupInput
} {
	var calls []struct {
		In1 *rds.CreateDBSecurityGroupInput
	}
	lockrdsClientMockCreateDBSecurityGroup.RLock()
	calls = mock.calls.CreateDBSecurityGroup
	lockrdsClientMockCreateDBSecurityGroup.RUnlock()
	return calls
}

// CreateDBSecurityGroupRequest calls CreateDBSecurityGroupRequestFunc.
func (mock *rdsClientMock) CreateDBSecurityGroupRequest(in1 *rds.CreateDBSecurityGroupInput) (*request.Request, *rds.CreateDBSecurityGroupOutput) {
	if mock.CreateDBSecurityGroupRequestFunc == nil {
		panic("rdsClientMock.CreateDBSecurityGroupRequestFunc: method is nil but rdsClient.CreateDBSecurityGroupRequest was just called")
	}
	callInfo := struct {
		In1 *rds.CreateDBSecurityGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateDBSecurityGroupRequest.Lock()
	mock.calls.CreateDBSecurityGroupRequest = append(mock.calls.CreateDBSecurityGroupRequest, callInfo)
	lockrdsClientMockCreateDBSecurityGroupRequest.Unlock()
	return mock.CreateDBSecurityGroupRequestFunc(in1)
}

// CreateDBSecurityGroupRequestCalls gets all the calls that were made to CreateDBSecurityGroupRequest.
// Check the length with:
//     len(mockedrdsClient.CreateDBSecurityGroupRequestCalls())
func (mock *rdsClientMock) CreateDBSecurityGroupRequestCalls() []struct {
	In1 *rds.CreateDBSecurityGroupInput
} {
	var calls []struct {
		In1 *rds.CreateDBSecurityGroupInput
	}
	lockrdsClientMockCreateDBSecurityGroupRequest.RLock()
	calls = mock.calls.CreateDBSecurityGroupRequest
	lockrdsClientMockCreateDBSecurityGroupRequest.RUnlock()
	return calls
}

// CreateDBSecurityGroupWithContext calls CreateDBSecurityGroupWithContextFunc.
func (mock *rdsClientMock) CreateDBSecurityGroupWithContext(in1 context.Context, in2 *rds.CreateDBSecurityGroupInput, in3 ...request.Option) (*rds.CreateDBSecurityGroupOutput, error) {
	if mock.CreateDBSecurityGroupWithContextFunc == nil {
		panic("rdsClientMock.CreateDBSecurityGroupWithContextFunc: method is nil but rdsClient.CreateDBSecurityGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.CreateDBSecurityGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockCreateDBSecurityGroupWithContext.Lock()
	mock.calls.CreateDBSecurityGroupWithContext = append(mock.calls.CreateDBSecurityGroupWithContext, callInfo)
	lockrdsClientMockCreateDBSecurityGroupWithContext.Unlock()
	return mock.CreateDBSecurityGroupWithContextFunc(in1, in2, in3...)
}

// CreateDBSecurityGroupWithContextCalls gets all the calls that were made to CreateDBSecurityGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateDBSecurityGroupWithContextCalls())
func (mock *rdsClientMock) CreateDBSecurityGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.CreateDBSecurityGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.CreateDBSecurityGroupInput
		In3 []request.Option
	}
	lockrdsClientMockCreateDBSecurityGroupWithContext.RLock()
	calls = mock.calls.CreateDBSecurityGroupWithContext
	lockrdsClientMockCreateDBSecurityGroupWithContext.RUnlock()
	return calls
}

// CreateDBSnapshot calls CreateDBSnapshotFunc.
func (mock *rdsClientMock) CreateDBSnapshot(in1 *rds.CreateDBSnapshotInput) (*rds.CreateDBSnapshotOutput, error) {
	if mock.CreateDBSnapshotFunc == nil {
		panic("rdsClientMock.CreateDBSnapshotFunc: method is nil but rdsClient.CreateDBSnapshot was just called")
	}
	callInfo := struct {
		In1 *rds.CreateDBSnapshotInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateDBSnapshot.Lock()
	mock.calls.CreateDBSnapshot = append(mock.calls.CreateDBSnapshot, callInfo)
	lockrdsClientMockCreateDBSnapshot.Unlock()
	return mock.CreateDBSnapshotFunc(in1)
}

// CreateDBSnapshotCalls gets all the calls that were made to CreateDBSnapshot.
// Check the length with:
//     len(mockedrdsClient.CreateDBSnapshotCalls())
func (mock *rdsClientMock) CreateDBSnapshotCalls() []struct {
	In1 *rds.CreateDBSnapshotInput
} {
	var calls []struct {
		In1 *rds.CreateDBSnapshotInput
	}
	lockrdsClientMockCreateDBSnapshot.RLock()
	calls = mock.calls.CreateDBSnapshot
	lockrdsClientMockCreateDBSnapshot.RUnlock()
	return calls
}

// CreateDBSnapshotRequest calls CreateDBSnapshotRequestFunc.
func (mock *rdsClientMock) CreateDBSnapshotRequest(in1 *rds.CreateDBSnapshotInput) (*request.Request, *rds.CreateDBSnapshotOutput) {
	if mock.CreateDBSnapshotRequestFunc == nil {
		panic("rdsClientMock.CreateDBSnapshotRequestFunc: method is nil but rdsClient.CreateDBSnapshotRequest was just called")
	}
	callInfo := struct {
		In1 *rds.CreateDBSnapshotInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateDBSnapshotRequest.Lock()
	mock.calls.CreateDBSnapshotRequest = append(mock.calls.CreateDBSnapshotRequest, callInfo)
	lockrdsClientMockCreateDBSnapshotRequest.Unlock()
	return mock.CreateDBSnapshotRequestFunc(in1)
}

// CreateDBSnapshotRequestCalls gets all the calls that were made to CreateDBSnapshotRequest.
// Check the length with:
//     len(mockedrdsClient.CreateDBSnapshotRequestCalls())
func (mock *rdsClientMock) CreateDBSnapshotRequestCalls() []struct {
	In1 *rds.CreateDBSnapshotInput
} {
	var calls []struct {
		In1 *rds.CreateDBSnapshotInput
	}
	lockrdsClientMockCreateDBSnapshotRequest.RLock()
	calls = mock.calls.CreateDBSnapshotRequest
	lockrdsClientMockCreateDBSnapshotRequest.RUnlock()
	return calls
}

// CreateDBSnapshotWithContext calls CreateDBSnapshotWithContextFunc.
func (mock *rdsClientMock) CreateDBSnapshotWithContext(in1 context.Context, in2 *rds.CreateDBSnapshotInput, in3 ...request.Option) (*rds.CreateDBSnapshotOutput, error) {
	if mock.CreateDBSnapshotWithContextFunc == nil {
		panic("rdsClientMock.CreateDBSnapshotWithContextFunc: method is nil but rdsClient.CreateDBSnapshotWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.CreateDBSnapshotInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockCreateDBSnapshotWithContext.Lock()
	mock.calls.CreateDBSnapshotWithContext = append(mock.calls.CreateDBSnapshotWithContext, callInfo)
	lockrdsClientMockCreateDBSnapshotWithContext.Unlock()
	return mock.CreateDBSnapshotWithContextFunc(in1, in2, in3...)
}

// CreateDBSnapshotWithContextCalls gets all the calls that were made to CreateDBSnapshotWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateDBSnapshotWithContextCalls())
func (mock *rdsClientMock) CreateDBSnapshotWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.CreateDBSnapshotInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.CreateDBSnapshotInput
		In3 []request.Option
	}
	lockrdsClientMockCreateDBSnapshotWithContext.RLock()
	calls = mock.calls.CreateDBSnapshotWithContext
	lockrdsClientMockCreateDBSnapshotWithContext.RUnlock()
	return calls
}

// CreateDBSubnetGroup calls CreateDBSubnetGroupFunc.
func (mock *rdsClientMock) CreateDBSubnetGroup(in1 *rds.CreateDBSubnetGroupInput) (*rds.CreateDBSubnetGroupOutput, error) {
	if mock.CreateDBSubnetGroupFunc == nil {
		panic("rdsClientMock.CreateDBSubnetGroupFunc: method is nil but rdsClient.CreateDBSubnetGroup was just called")
	}
	callInfo := struct {
		In1 *rds.CreateDBSubnetGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateDBSubnetGroup.Lock()
	mock.calls.CreateDBSubnetGroup = append(mock.calls.CreateDBSubnetGroup, callInfo)
	lockrdsClientMockCreateDBSubnetGroup.Unlock()
	return mock.CreateDBSubnetGroupFunc(in1)
}

// CreateDBSubnetGroupCalls gets all the calls that were made to CreateDBSubnetGroup.
// Check the length with:
//     len(mockedrdsClient.CreateDBSubnetGroupCalls())
func (mock *rdsClientMock) CreateDBSubnetGroupCalls() []struct {
	In1 *rds.CreateDBSubnetGroupInput
} {
	var calls []struct {
		In1 *rds.CreateDBSubnetGroupInput
	}
	lockrdsClientMockCreateDBSubnetGroup.RLock()
	calls = mock.calls.CreateDBSubnetGroup
	lockrdsClientMockCreateDBSubnetGroup.RUnlock()
	return calls
}

// CreateDBSubnetGroupRequest calls CreateDBSubnetGroupRequestFunc.
func (mock *rdsClientMock) CreateDBSubnetGroupRequest(in1 *rds.CreateDBSubnetGroupInput) (*request.Request, *rds.CreateDBSubnetGroupOutput) {
	if mock.CreateDBSubnetGroupRequestFunc == nil {
		panic("rdsClientMock.CreateDBSubnetGroupRequestFunc: method is nil but rdsClient.CreateDBSubnetGroupRequest was just called")
	}
	callInfo := struct {
		In1 *rds.CreateDBSubnetGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateDBSubnetGroupRequest.Lock()
	mock.calls.CreateDBSubnetGroupRequest = append(mock.calls.CreateDBSubnetGroupRequest, callInfo)
	lockrdsClientMockCreateDBSubnetGroupRequest.Unlock()
	return mock.CreateDBSubnetGroupRequestFunc(in1)
}

// CreateDBSubnetGroupRequestCalls gets all the calls that were made to CreateDBSubnetGroupRequest.
// Check the length with:
//     len(mockedrdsClient.CreateDBSubnetGroupRequestCalls())
func (mock *rdsClientMock) CreateDBSubnetGroupRequestCalls() []struct {
	In1 *rds.CreateDBSubnetGroupInput
} {
	var calls []struct {
		In1 *rds.CreateDBSubnetGroupInput
	}
	lockrdsClientMockCreateDBSubnetGroupRequest.RLock()
	calls = mock.calls.CreateDBSubnetGroupRequest
	lockrdsClientMockCreateDBSubnetGroupRequest.RUnlock()
	return calls
}

// CreateDBSubnetGroupWithContext calls CreateDBSubnetGroupWithContextFunc.
func (mock *rdsClientMock) CreateDBSubnetGroupWithContext(in1 context.Context, in2 *rds.CreateDBSubnetGroupInput, in3 ...request.Option) (*rds.CreateDBSubnetGroupOutput, error) {
	if mock.CreateDBSubnetGroupWithContextFunc == nil {
		panic("rdsClientMock.CreateDBSubnetGroupWithContextFunc: method is nil but rdsClient.CreateDBSubnetGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.CreateDBSubnetGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockCreateDBSubnetGroupWithContext.Lock()
	mock.calls.CreateDBSubnetGroupWithContext = append(mock.calls.CreateDBSubnetGroupWithContext, callInfo)
	lockrdsClientMockCreateDBSubnetGroupWithContext.Unlock()
	return mock.CreateDBSubnetGroupWithContextFunc(in1, in2, in3...)
}

// CreateDBSubnetGroupWithContextCalls gets all the calls that were made to CreateDBSubnetGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateDBSubnetGroupWithContextCalls())
func (mock *rdsClientMock) CreateDBSubnetGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.CreateDBSubnetGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.CreateDBSubnetGroupInput
		In3 []request.Option
	}
	lockrdsClientMockCreateDBSubnetGroupWithContext.RLock()
	calls = mock.calls.CreateDBSubnetGroupWithContext
	lockrdsClientMockCreateDBSubnetGroupWithContext.RUnlock()
	return calls
}

// CreateEventSubscription calls CreateEventSubscriptionFunc.
func (mock *rdsClientMock) CreateEventSubscription(in1 *rds.CreateEventSubscriptionInput) (*rds.CreateEventSubscriptionOutput, error) {
	if mock.CreateEventSubscriptionFunc == nil {
		panic("rdsClientMock.CreateEventSubscriptionFunc: method is nil but rdsClient.CreateEventSubscription was just called")
	}
	callInfo := struct {
		In1 *rds.CreateEventSubscriptionInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateEventSubscription.Lock()
	mock.calls.CreateEventSubscription = append(mock.calls.CreateEventSubscription, callInfo)
	lockrdsClientMockCreateEventSubscription.Unlock()
	return mock.CreateEventSubscriptionFunc(in1)
}

// CreateEventSubscriptionCalls gets all the calls that were made to CreateEventSubscription.
// Check the length with:
//     len(mockedrdsClient.CreateEventSubscriptionCalls())
func (mock *rdsClientMock) CreateEventSubscriptionCalls() []struct {
	In1 *rds.CreateEventSubscriptionInput
} {
	var calls []struct {
		In1 *rds.CreateEventSubscriptionInput
	}
	lockrdsClientMockCreateEventSubscription.RLock()
	calls = mock.calls.CreateEventSubscription
	lockrdsClientMockCreateEventSubscription.RUnlock()
	return calls
}

// CreateEventSubscriptionRequest calls CreateEventSubscriptionRequestFunc.
func (mock *rdsClientMock) CreateEventSubscriptionRequest(in1 *rds.CreateEventSubscriptionInput) (*request.Request, *rds.CreateEventSubscriptionOutput) {
	if mock.CreateEventSubscriptionRequestFunc == nil {
		panic("rdsClientMock.CreateEventSubscriptionRequestFunc: method is nil but rdsClient.CreateEventSubscriptionRequest was just called")
	}
	callInfo := struct {
		In1 *rds.CreateEventSubscriptionInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateEventSubscriptionRequest.Lock()
	mock.calls.CreateEventSubscriptionRequest = append(mock.calls.CreateEventSubscriptionRequest, callInfo)
	lockrdsClientMockCreateEventSubscriptionRequest.Unlock()
	return mock.CreateEventSubscriptionRequestFunc(in1)
}

// CreateEventSubscriptionRequestCalls gets all the calls that were made to CreateEventSubscriptionRequest.
// Check the length with:
//     len(mockedrdsClient.CreateEventSubscriptionRequestCalls())
func (mock *rdsClientMock) CreateEventSubscriptionRequestCalls() []struct {
	In1 *rds.CreateEventSubscriptionInput
} {
	var calls []struct {
		In1 *rds.CreateEventSubscriptionInput
	}
	lockrdsClientMockCreateEventSubscriptionRequest.RLock()
	calls = mock.calls.CreateEventSubscriptionRequest
	lockrdsClientMockCreateEventSubscriptionRequest.RUnlock()
	return calls
}

// CreateEventSubscriptionWithContext calls CreateEventSubscriptionWithContextFunc.
func (mock *rdsClientMock) CreateEventSubscriptionWithContext(in1 context.Context, in2 *rds.CreateEventSubscriptionInput, in3 ...request.Option) (*rds.CreateEventSubscriptionOutput, error) {
	if mock.CreateEventSubscriptionWithContextFunc == nil {
		panic("rdsClientMock.CreateEventSubscriptionWithContextFunc: method is nil but rdsClient.CreateEventSubscriptionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.CreateEventSubscriptionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockCreateEventSubscriptionWithContext.Lock()
	mock.calls.CreateEventSubscriptionWithContext = append(mock.calls.CreateEventSubscriptionWithContext, callInfo)
	lockrdsClientMockCreateEventSubscriptionWithContext.Unlock()
	return mock.CreateEventSubscriptionWithContextFunc(in1, in2, in3...)
}

// CreateEventSubscriptionWithContextCalls gets all the calls that were made to CreateEventSubscriptionWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateEventSubscriptionWithContextCalls())
func (mock *rdsClientMock) CreateEventSubscriptionWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.CreateEventSubscriptionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.CreateEventSubscriptionInput
		In3 []request.Option
	}
	lockrdsClientMockCreateEventSubscriptionWithContext.RLock()
	calls = mock.calls.CreateEventSubscriptionWithContext
	lockrdsClientMockCreateEventSubscriptionWithContext.RUnlock()
	return calls
}

// CreateGlobalCluster calls CreateGlobalClusterFunc.
func (mock *rdsClientMock) CreateGlobalCluster(in1 *rds.CreateGlobalClusterInput) (*rds.CreateGlobalClusterOutput, error) {
	if mock.CreateGlobalClusterFunc == nil {
		panic("rdsClientMock.CreateGlobalClusterFunc: method is nil but rdsClient.CreateGlobalCluster was just called")
	}
	callInfo := struct {
		In1 *rds.CreateGlobalClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateGlobalCluster.Lock()
	mock.calls.CreateGlobalCluster = append(mock.calls.CreateGlobalCluster, callInfo)
	lockrdsClientMockCreateGlobalCluster.Unlock()
	return mock.CreateGlobalClusterFunc(in1)
}

// CreateGlobalClusterCalls gets all the calls that were made to CreateGlobalCluster.
// Check the length with:
//     len(mockedrdsClient.CreateGlobalClusterCalls())
func (mock *rdsClientMock) CreateGlobalClusterCalls() []struct {
	In1 *rds.CreateGlobalClusterInput
} {
	var calls []struct {
		In1 *rds.CreateGlobalClusterInput
	}
	lockrdsClientMockCreateGlobalCluster.RLock()
	calls = mock.calls.CreateGlobalCluster
	lockrdsClientMockCreateGlobalCluster.RUnlock()
	return calls
}

// CreateGlobalClusterRequest calls CreateGlobalClusterRequestFunc.
func (mock *rdsClientMock) CreateGlobalClusterRequest(in1 *rds.CreateGlobalClusterInput) (*request.Request, *rds.CreateGlobalClusterOutput) {
	if mock.CreateGlobalClusterRequestFunc == nil {
		panic("rdsClientMock.CreateGlobalClusterRequestFunc: method is nil but rdsClient.CreateGlobalClusterRequest was just called")
	}
	callInfo := struct {
		In1 *rds.CreateGlobalClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateGlobalClusterRequest.Lock()
	mock.calls.CreateGlobalClusterRequest = append(mock.calls.CreateGlobalClusterRequest, callInfo)
	lockrdsClientMockCreateGlobalClusterRequest.Unlock()
	return mock.CreateGlobalClusterRequestFunc(in1)
}

// CreateGlobalClusterRequestCalls gets all the calls that were made to CreateGlobalClusterRequest.
// Check the length with:
//     len(mockedrdsClient.CreateGlobalClusterRequestCalls())
func (mock *rdsClientMock) CreateGlobalClusterRequestCalls() []struct {
	In1 *rds.CreateGlobalClusterInput
} {
	var calls []struct {
		In1 *rds.CreateGlobalClusterInput
	}
	lockrdsClientMockCreateGlobalClusterRequest.RLock()
	calls = mock.calls.CreateGlobalClusterRequest
	lockrdsClientMockCreateGlobalClusterRequest.RUnlock()
	return calls
}

// CreateGlobalClusterWithContext calls CreateGlobalClusterWithContextFunc.
func (mock *rdsClientMock) CreateGlobalClusterWithContext(in1 context.Context, in2 *rds.CreateGlobalClusterInput, in3 ...request.Option) (*rds.CreateGlobalClusterOutput, error) {
	if mock.CreateGlobalClusterWithContextFunc == nil {
		panic("rdsClientMock.CreateGlobalClusterWithContextFunc: method is nil but rdsClient.CreateGlobalClusterWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.CreateGlobalClusterInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockCreateGlobalClusterWithContext.Lock()
	mock.calls.CreateGlobalClusterWithContext = append(mock.calls.CreateGlobalClusterWithContext, callInfo)
	lockrdsClientMockCreateGlobalClusterWithContext.Unlock()
	return mock.CreateGlobalClusterWithContextFunc(in1, in2, in3...)
}

// CreateGlobalClusterWithContextCalls gets all the calls that were made to CreateGlobalClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateGlobalClusterWithContextCalls())
func (mock *rdsClientMock) CreateGlobalClusterWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.CreateGlobalClusterInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.CreateGlobalClusterInput
		In3 []request.Option
	}
	lockrdsClientMockCreateGlobalClusterWithContext.RLock()
	calls = mock.calls.CreateGlobalClusterWithContext
	lockrdsClientMockCreateGlobalClusterWithContext.RUnlock()
	return calls
}

// CreateOptionGroup calls CreateOptionGroupFunc.
func (mock *rdsClientMock) CreateOptionGroup(in1 *rds.CreateOptionGroupInput) (*rds.CreateOptionGroupOutput, error) {
	if mock.CreateOptionGroupFunc == nil {
		panic("rdsClientMock.CreateOptionGroupFunc: method is nil but rdsClient.CreateOptionGroup was just called")
	}
	callInfo := struct {
		In1 *rds.CreateOptionGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateOptionGroup.Lock()
	mock.calls.CreateOptionGroup = append(mock.calls.CreateOptionGroup, callInfo)
	lockrdsClientMockCreateOptionGroup.Unlock()
	return mock.CreateOptionGroupFunc(in1)
}

// CreateOptionGroupCalls gets all the calls that were made to CreateOptionGroup.
// Check the length with:
//     len(mockedrdsClient.CreateOptionGroupCalls())
func (mock *rdsClientMock) CreateOptionGroupCalls() []struct {
	In1 *rds.CreateOptionGroupInput
} {
	var calls []struct {
		In1 *rds.CreateOptionGroupInput
	}
	lockrdsClientMockCreateOptionGroup.RLock()
	calls = mock.calls.CreateOptionGroup
	lockrdsClientMockCreateOptionGroup.RUnlock()
	return calls
}

// CreateOptionGroupRequest calls CreateOptionGroupRequestFunc.
func (mock *rdsClientMock) CreateOptionGroupRequest(in1 *rds.CreateOptionGroupInput) (*request.Request, *rds.CreateOptionGroupOutput) {
	if mock.CreateOptionGroupRequestFunc == nil {
		panic("rdsClientMock.CreateOptionGroupRequestFunc: method is nil but rdsClient.CreateOptionGroupRequest was just called")
	}
	callInfo := struct {
		In1 *rds.CreateOptionGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockCreateOptionGroupRequest.Lock()
	mock.calls.CreateOptionGroupRequest = append(mock.calls.CreateOptionGroupRequest, callInfo)
	lockrdsClientMockCreateOptionGroupRequest.Unlock()
	return mock.CreateOptionGroupRequestFunc(in1)
}

// CreateOptionGroupRequestCalls gets all the calls that were made to CreateOptionGroupRequest.
// Check the length with:
//     len(mockedrdsClient.CreateOptionGroupRequestCalls())
func (mock *rdsClientMock) CreateOptionGroupRequestCalls() []struct {
	In1 *rds.CreateOptionGroupInput
} {
	var calls []struct {
		In1 *rds.CreateOptionGroupInput
	}
	lockrdsClientMockCreateOptionGroupRequest.RLock()
	calls = mock.calls.CreateOptionGroupRequest
	lockrdsClientMockCreateOptionGroupRequest.RUnlock()
	return calls
}

// CreateOptionGroupWithContext calls CreateOptionGroupWithContextFunc.
func (mock *rdsClientMock) CreateOptionGroupWithContext(in1 context.Context, in2 *rds.CreateOptionGroupInput, in3 ...request.Option) (*rds.CreateOptionGroupOutput, error) {
	if mock.CreateOptionGroupWithContextFunc == nil {
		panic("rdsClientMock.CreateOptionGroupWithContextFunc: method is nil but rdsClient.CreateOptionGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.CreateOptionGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockCreateOptionGroupWithContext.Lock()
	mock.calls.CreateOptionGroupWithContext = append(mock.calls.CreateOptionGroupWithContext, callInfo)
	lockrdsClientMockCreateOptionGroupWithContext.Unlock()
	return mock.CreateOptionGroupWithContextFunc(in1, in2, in3...)
}

// CreateOptionGroupWithContextCalls gets all the calls that were made to CreateOptionGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateOptionGroupWithContextCalls())
func (mock *rdsClientMock) CreateOptionGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.CreateOptionGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.CreateOptionGroupInput
		In3 []request.Option
	}
	lockrdsClientMockCreateOptionGroupWithContext.RLock()
	calls = mock.calls.CreateOptionGroupWithContext
	lockrdsClientMockCreateOptionGroupWithContext.RUnlock()
	return calls
}

// DeleteCustomAvailabilityZone calls DeleteCustomAvailabilityZoneFunc.
func (mock *rdsClientMock) DeleteCustomAvailabilityZone(in1 *rds.DeleteCustomAvailabilityZoneInput) (*rds.DeleteCustomAvailabilityZoneOutput, error) {
	if mock.DeleteCustomAvailabilityZoneFunc == nil {
		panic("rdsClientMock.DeleteCustomAvailabilityZoneFunc: method is nil but rdsClient.DeleteCustomAvailabilityZone was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteCustomAvailabilityZoneInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteCustomAvailabilityZone.Lock()
	mock.calls.DeleteCustomAvailabilityZone = append(mock.calls.DeleteCustomAvailabilityZone, callInfo)
	lockrdsClientMockDeleteCustomAvailabilityZone.Unlock()
	return mock.DeleteCustomAvailabilityZoneFunc(in1)
}

// DeleteCustomAvailabilityZoneCalls gets all the calls that were made to DeleteCustomAvailabilityZone.
// Check the length with:
//     len(mockedrdsClient.DeleteCustomAvailabilityZoneCalls())
func (mock *rdsClientMock) DeleteCustomAvailabilityZoneCalls() []struct {
	In1 *rds.DeleteCustomAvailabilityZoneInput
} {
	var calls []struct {
		In1 *rds.DeleteCustomAvailabilityZoneInput
	}
	lockrdsClientMockDeleteCustomAvailabilityZone.RLock()
	calls = mock.calls.DeleteCustomAvailabilityZone
	lockrdsClientMockDeleteCustomAvailabilityZone.RUnlock()
	return calls
}

// DeleteCustomAvailabilityZoneRequest calls DeleteCustomAvailabilityZoneRequestFunc.
func (mock *rdsClientMock) DeleteCustomAvailabilityZoneRequest(in1 *rds.DeleteCustomAvailabilityZoneInput) (*request.Request, *rds.DeleteCustomAvailabilityZoneOutput) {
	if mock.DeleteCustomAvailabilityZoneRequestFunc == nil {
		panic("rdsClientMock.DeleteCustomAvailabilityZoneRequestFunc: method is nil but rdsClient.DeleteCustomAvailabilityZoneRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteCustomAvailabilityZoneInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteCustomAvailabilityZoneRequest.Lock()
	mock.calls.DeleteCustomAvailabilityZoneRequest = append(mock.calls.DeleteCustomAvailabilityZoneRequest, callInfo)
	lockrdsClientMockDeleteCustomAvailabilityZoneRequest.Unlock()
	return mock.DeleteCustomAvailabilityZoneRequestFunc(in1)
}

// DeleteCustomAvailabilityZoneRequestCalls gets all the calls that were made to DeleteCustomAvailabilityZoneRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteCustomAvailabilityZoneRequestCalls())
func (mock *rdsClientMock) DeleteCustomAvailabilityZoneRequestCalls() []struct {
	In1 *rds.DeleteCustomAvailabilityZoneInput
} {
	var calls []struct {
		In1 *rds.DeleteCustomAvailabilityZoneInput
	}
	lockrdsClientMockDeleteCustomAvailabilityZoneRequest.RLock()
	calls = mock.calls.DeleteCustomAvailabilityZoneRequest
	lockrdsClientMockDeleteCustomAvailabilityZoneRequest.RUnlock()
	return calls
}

// DeleteCustomAvailabilityZoneWithContext calls DeleteCustomAvailabilityZoneWithContextFunc.
func (mock *rdsClientMock) DeleteCustomAvailabilityZoneWithContext(in1 context.Context, in2 *rds.DeleteCustomAvailabilityZoneInput, in3 ...request.Option) (*rds.DeleteCustomAvailabilityZoneOutput, error) {
	if mock.DeleteCustomAvailabilityZoneWithContextFunc == nil {
		panic("rdsClientMock.DeleteCustomAvailabilityZoneWithContextFunc: method is nil but rdsClient.DeleteCustomAvailabilityZoneWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DeleteCustomAvailabilityZoneInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDeleteCustomAvailabilityZoneWithContext.Lock()
	mock.calls.DeleteCustomAvailabilityZoneWithContext = append(mock.calls.DeleteCustomAvailabilityZoneWithContext, callInfo)
	lockrdsClientMockDeleteCustomAvailabilityZoneWithContext.Unlock()
	return mock.DeleteCustomAvailabilityZoneWithContextFunc(in1, in2, in3...)
}

// DeleteCustomAvailabilityZoneWithContextCalls gets all the calls that were made to DeleteCustomAvailabilityZoneWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteCustomAvailabilityZoneWithContextCalls())
func (mock *rdsClientMock) DeleteCustomAvailabilityZoneWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DeleteCustomAvailabilityZoneInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DeleteCustomAvailabilityZoneInput
		In3 []request.Option
	}
	lockrdsClientMockDeleteCustomAvailabilityZoneWithContext.RLock()
	calls = mock.calls.DeleteCustomAvailabilityZoneWithContext
	lockrdsClientMockDeleteCustomAvailabilityZoneWithContext.RUnlock()
	return calls
}

// DeleteDBCluster calls DeleteDBClusterFunc.
func (mock *rdsClientMock) DeleteDBCluster(in1 *rds.DeleteDBClusterInput) (*rds.DeleteDBClusterOutput, error) {
	if mock.DeleteDBClusterFunc == nil {
		panic("rdsClientMock.DeleteDBClusterFunc: method is nil but rdsClient.DeleteDBCluster was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteDBClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteDBCluster.Lock()
	mock.calls.DeleteDBCluster = append(mock.calls.DeleteDBCluster, callInfo)
	lockrdsClientMockDeleteDBCluster.Unlock()
	return mock.DeleteDBClusterFunc(in1)
}

// DeleteDBClusterCalls gets all the calls that were made to DeleteDBCluster.
// Check the length with:
//     len(mockedrdsClient.DeleteDBClusterCalls())
func (mock *rdsClientMock) DeleteDBClusterCalls() []struct {
	In1 *rds.DeleteDBClusterInput
} {
	var calls []struct {
		In1 *rds.DeleteDBClusterInput
	}
	lockrdsClientMockDeleteDBCluster.RLock()
	calls = mock.calls.DeleteDBCluster
	lockrdsClientMockDeleteDBCluster.RUnlock()
	return calls
}

// DeleteDBClusterEndpoint calls DeleteDBClusterEndpointFunc.
func (mock *rdsClientMock) DeleteDBClusterEndpoint(in1 *rds.DeleteDBClusterEndpointInput) (*rds.DeleteDBClusterEndpointOutput, error) {
	if mock.DeleteDBClusterEndpointFunc == nil {
		panic("rdsClientMock.DeleteDBClusterEndpointFunc: method is nil but rdsClient.DeleteDBClusterEndpoint was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteDBClusterEndpointInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteDBClusterEndpoint.Lock()
	mock.calls.DeleteDBClusterEndpoint = append(mock.calls.DeleteDBClusterEndpoint, callInfo)
	lockrdsClientMockDeleteDBClusterEndpoint.Unlock()
	return mock.DeleteDBClusterEndpointFunc(in1)
}

// DeleteDBClusterEndpointCalls gets all the calls that were made to DeleteDBClusterEndpoint.
// Check the length with:
//     len(mockedrdsClient.DeleteDBClusterEndpointCalls())
func (mock *rdsClientMock) DeleteDBClusterEndpointCalls() []struct {
	In1 *rds.DeleteDBClusterEndpointInput
} {
	var calls []struct {
		In1 *rds.DeleteDBClusterEndpointInput
	}
	lockrdsClientMockDeleteDBClusterEndpoint.RLock()
	calls = mock.calls.DeleteDBClusterEndpoint
	lockrdsClientMockDeleteDBClusterEndpoint.RUnlock()
	return calls
}

// DeleteDBClusterEndpointRequest calls DeleteDBClusterEndpointRequestFunc.
func (mock *rdsClientMock) DeleteDBClusterEndpointRequest(in1 *rds.DeleteDBClusterEndpointInput) (*request.Request, *rds.DeleteDBClusterEndpointOutput) {
	if mock.DeleteDBClusterEndpointRequestFunc == nil {
		panic("rdsClientMock.DeleteDBClusterEndpointRequestFunc: method is nil but rdsClient.DeleteDBClusterEndpointRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteDBClusterEndpointInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteDBClusterEndpointRequest.Lock()
	mock.calls.DeleteDBClusterEndpointRequest = append(mock.calls.DeleteDBClusterEndpointRequest, callInfo)
	lockrdsClientMockDeleteDBClusterEndpointRequest.Unlock()
	return mock.DeleteDBClusterEndpointRequestFunc(in1)
}

// DeleteDBClusterEndpointRequestCalls gets all the calls that were made to DeleteDBClusterEndpointRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteDBClusterEndpointRequestCalls())
func (mock *rdsClientMock) DeleteDBClusterEndpointRequestCalls() []struct {
	In1 *rds.DeleteDBClusterEndpointInput
} {
	var calls []struct {
		In1 *rds.DeleteDBClusterEndpointInput
	}
	lockrdsClientMockDeleteDBClusterEndpointRequest.RLock()
	calls = mock.calls.DeleteDBClusterEndpointRequest
	lockrdsClientMockDeleteDBClusterEndpointRequest.RUnlock()
	return calls
}

// DeleteDBClusterEndpointWithContext calls DeleteDBClusterEndpointWithContextFunc.
func (mock *rdsClientMock) DeleteDBClusterEndpointWithContext(in1 context.Context, in2 *rds.DeleteDBClusterEndpointInput, in3 ...request.Option) (*rds.DeleteDBClusterEndpointOutput, error) {
	if mock.DeleteDBClusterEndpointWithContextFunc == nil {
		panic("rdsClientMock.DeleteDBClusterEndpointWithContextFunc: method is nil but rdsClient.DeleteDBClusterEndpointWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DeleteDBClusterEndpointInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDeleteDBClusterEndpointWithContext.Lock()
	mock.calls.DeleteDBClusterEndpointWithContext = append(mock.calls.DeleteDBClusterEndpointWithContext, callInfo)
	lockrdsClientMockDeleteDBClusterEndpointWithContext.Unlock()
	return mock.DeleteDBClusterEndpointWithContextFunc(in1, in2, in3...)
}

// DeleteDBClusterEndpointWithContextCalls gets all the calls that were made to DeleteDBClusterEndpointWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteDBClusterEndpointWithContextCalls())
func (mock *rdsClientMock) DeleteDBClusterEndpointWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DeleteDBClusterEndpointInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DeleteDBClusterEndpointInput
		In3 []request.Option
	}
	lockrdsClientMockDeleteDBClusterEndpointWithContext.RLock()
	calls = mock.calls.DeleteDBClusterEndpointWithContext
	lockrdsClientMockDeleteDBClusterEndpointWithContext.RUnlock()
	return calls
}

// DeleteDBClusterParameterGroup calls DeleteDBClusterParameterGroupFunc.
func (mock *rdsClientMock) DeleteDBClusterParameterGroup(in1 *rds.DeleteDBClusterParameterGroupInput) (*rds.DeleteDBClusterParameterGroupOutput, error) {
	if mock.DeleteDBClusterParameterGroupFunc == nil {
		panic("rdsClientMock.DeleteDBClusterParameterGroupFunc: method is nil but rdsClient.DeleteDBClusterParameterGroup was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteDBClusterParameterGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteDBClusterParameterGroup.Lock()
	mock.calls.DeleteDBClusterParameterGroup = append(mock.calls.DeleteDBClusterParameterGroup, callInfo)
	lockrdsClientMockDeleteDBClusterParameterGroup.Unlock()
	return mock.DeleteDBClusterParameterGroupFunc(in1)
}

// DeleteDBClusterParameterGroupCalls gets all the calls that were made to DeleteDBClusterParameterGroup.
// Check the length with:
//     len(mockedrdsClient.DeleteDBClusterParameterGroupCalls())
func (mock *rdsClientMock) DeleteDBClusterParameterGroupCalls() []struct {
	In1 *rds.DeleteDBClusterParameterGroupInput
} {
	var calls []struct {
		In1 *rds.DeleteDBClusterParameterGroupInput
	}
	lockrdsClientMockDeleteDBClusterParameterGroup.RLock()
	calls = mock.calls.DeleteDBClusterParameterGroup
	lockrdsClientMockDeleteDBClusterParameterGroup.RUnlock()
	return calls
}

// DeleteDBClusterParameterGroupRequest calls DeleteDBClusterParameterGroupRequestFunc.
func (mock *rdsClientMock) DeleteDBClusterParameterGroupRequest(in1 *rds.DeleteDBClusterParameterGroupInput) (*request.Request, *rds.DeleteDBClusterParameterGroupOutput) {
	if mock.DeleteDBClusterParameterGroupRequestFunc == nil {
		panic("rdsClientMock.DeleteDBClusterParameterGroupRequestFunc: method is nil but rdsClient.DeleteDBClusterParameterGroupRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteDBClusterParameterGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteDBClusterParameterGroupRequest.Lock()
	mock.calls.DeleteDBClusterParameterGroupRequest = append(mock.calls.DeleteDBClusterParameterGroupRequest, callInfo)
	lockrdsClientMockDeleteDBClusterParameterGroupRequest.Unlock()
	return mock.DeleteDBClusterParameterGroupRequestFunc(in1)
}

// DeleteDBClusterParameterGroupRequestCalls gets all the calls that were made to DeleteDBClusterParameterGroupRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteDBClusterParameterGroupRequestCalls())
func (mock *rdsClientMock) DeleteDBClusterParameterGroupRequestCalls() []struct {
	In1 *rds.DeleteDBClusterParameterGroupInput
} {
	var calls []struct {
		In1 *rds.DeleteDBClusterParameterGroupInput
	}
	lockrdsClientMockDeleteDBClusterParameterGroupRequest.RLock()
	calls = mock.calls.DeleteDBClusterParameterGroupRequest
	lockrdsClientMockDeleteDBClusterParameterGroupRequest.RUnlock()
	return calls
}

// DeleteDBClusterParameterGroupWithContext calls DeleteDBClusterParameterGroupWithContextFunc.
func (mock *rdsClientMock) DeleteDBClusterParameterGroupWithContext(in1 context.Context, in2 *rds.DeleteDBClusterParameterGroupInput, in3 ...request.Option) (*rds.DeleteDBClusterParameterGroupOutput, error) {
	if mock.DeleteDBClusterParameterGroupWithContextFunc == nil {
		panic("rdsClientMock.DeleteDBClusterParameterGroupWithContextFunc: method is nil but rdsClient.DeleteDBClusterParameterGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DeleteDBClusterParameterGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDeleteDBClusterParameterGroupWithContext.Lock()
	mock.calls.DeleteDBClusterParameterGroupWithContext = append(mock.calls.DeleteDBClusterParameterGroupWithContext, callInfo)
	lockrdsClientMockDeleteDBClusterParameterGroupWithContext.Unlock()
	return mock.DeleteDBClusterParameterGroupWithContextFunc(in1, in2, in3...)
}

// DeleteDBClusterParameterGroupWithContextCalls gets all the calls that were made to DeleteDBClusterParameterGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteDBClusterParameterGroupWithContextCalls())
func (mock *rdsClientMock) DeleteDBClusterParameterGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DeleteDBClusterParameterGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DeleteDBClusterParameterGroupInput
		In3 []request.Option
	}
	lockrdsClientMockDeleteDBClusterParameterGroupWithContext.RLock()
	calls = mock.calls.DeleteDBClusterParameterGroupWithContext
	lockrdsClientMockDeleteDBClusterParameterGroupWithContext.RUnlock()
	return calls
}

// DeleteDBClusterRequest calls DeleteDBClusterRequestFunc.
func (mock *rdsClientMock) DeleteDBClusterRequest(in1 *rds.DeleteDBClusterInput) (*request.Request, *rds.DeleteDBClusterOutput) {
	if mock.DeleteDBClusterRequestFunc == nil {
		panic("rdsClientMock.DeleteDBClusterRequestFunc: method is nil but rdsClient.DeleteDBClusterRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteDBClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteDBClusterRequest.Lock()
	mock.calls.DeleteDBClusterRequest = append(mock.calls.DeleteDBClusterRequest, callInfo)
	lockrdsClientMockDeleteDBClusterRequest.Unlock()
	return mock.DeleteDBClusterRequestFunc(in1)
}

// DeleteDBClusterRequestCalls gets all the calls that were made to DeleteDBClusterRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteDBClusterRequestCalls())
func (mock *rdsClientMock) DeleteDBClusterRequestCalls() []struct {
	In1 *rds.DeleteDBClusterInput
} {
	var calls []struct {
		In1 *rds.DeleteDBClusterInput
	}
	lockrdsClientMockDeleteDBClusterRequest.RLock()
	calls = mock.calls.DeleteDBClusterRequest
	lockrdsClientMockDeleteDBClusterRequest.RUnlock()
	return calls
}

// DeleteDBClusterSnapshot calls DeleteDBClusterSnapshotFunc.
func (mock *rdsClientMock) DeleteDBClusterSnapshot(in1 *rds.DeleteDBClusterSnapshotInput) (*rds.DeleteDBClusterSnapshotOutput, error) {
	if mock.DeleteDBClusterSnapshotFunc == nil {
		panic("rdsClientMock.DeleteDBClusterSnapshotFunc: method is nil but rdsClient.DeleteDBClusterSnapshot was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteDBClusterSnapshotInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteDBClusterSnapshot.Lock()
	mock.calls.DeleteDBClusterSnapshot = append(mock.calls.DeleteDBClusterSnapshot, callInfo)
	lockrdsClientMockDeleteDBClusterSnapshot.Unlock()
	return mock.DeleteDBClusterSnapshotFunc(in1)
}

// DeleteDBClusterSnapshotCalls gets all the calls that were made to DeleteDBClusterSnapshot.
// Check the length with:
//     len(mockedrdsClient.DeleteDBClusterSnapshotCalls())
func (mock *rdsClientMock) DeleteDBClusterSnapshotCalls() []struct {
	In1 *rds.DeleteDBClusterSnapshotInput
} {
	var calls []struct {
		In1 *rds.DeleteDBClusterSnapshotInput
	}
	lockrdsClientMockDeleteDBClusterSnapshot.RLock()
	calls = mock.calls.DeleteDBClusterSnapshot
	lockrdsClientMockDeleteDBClusterSnapshot.RUnlock()
	return calls
}

// DeleteDBClusterSnapshotRequest calls DeleteDBClusterSnapshotRequestFunc.
func (mock *rdsClientMock) DeleteDBClusterSnapshotRequest(in1 *rds.DeleteDBClusterSnapshotInput) (*request.Request, *rds.DeleteDBClusterSnapshotOutput) {
	if mock.DeleteDBClusterSnapshotRequestFunc == nil {
		panic("rdsClientMock.DeleteDBClusterSnapshotRequestFunc: method is nil but rdsClient.DeleteDBClusterSnapshotRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteDBClusterSnapshotInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteDBClusterSnapshotRequest.Lock()
	mock.calls.DeleteDBClusterSnapshotRequest = append(mock.calls.DeleteDBClusterSnapshotRequest, callInfo)
	lockrdsClientMockDeleteDBClusterSnapshotRequest.Unlock()
	return mock.DeleteDBClusterSnapshotRequestFunc(in1)
}

// DeleteDBClusterSnapshotRequestCalls gets all the calls that were made to DeleteDBClusterSnapshotRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteDBClusterSnapshotRequestCalls())
func (mock *rdsClientMock) DeleteDBClusterSnapshotRequestCalls() []struct {
	In1 *rds.DeleteDBClusterSnapshotInput
} {
	var calls []struct {
		In1 *rds.DeleteDBClusterSnapshotInput
	}
	lockrdsClientMockDeleteDBClusterSnapshotRequest.RLock()
	calls = mock.calls.DeleteDBClusterSnapshotRequest
	lockrdsClientMockDeleteDBClusterSnapshotRequest.RUnlock()
	return calls
}

// DeleteDBClusterSnapshotWithContext calls DeleteDBClusterSnapshotWithContextFunc.
func (mock *rdsClientMock) DeleteDBClusterSnapshotWithContext(in1 context.Context, in2 *rds.DeleteDBClusterSnapshotInput, in3 ...request.Option) (*rds.DeleteDBClusterSnapshotOutput, error) {
	if mock.DeleteDBClusterSnapshotWithContextFunc == nil {
		panic("rdsClientMock.DeleteDBClusterSnapshotWithContextFunc: method is nil but rdsClient.DeleteDBClusterSnapshotWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DeleteDBClusterSnapshotInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDeleteDBClusterSnapshotWithContext.Lock()
	mock.calls.DeleteDBClusterSnapshotWithContext = append(mock.calls.DeleteDBClusterSnapshotWithContext, callInfo)
	lockrdsClientMockDeleteDBClusterSnapshotWithContext.Unlock()
	return mock.DeleteDBClusterSnapshotWithContextFunc(in1, in2, in3...)
}

// DeleteDBClusterSnapshotWithContextCalls gets all the calls that were made to DeleteDBClusterSnapshotWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteDBClusterSnapshotWithContextCalls())
func (mock *rdsClientMock) DeleteDBClusterSnapshotWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DeleteDBClusterSnapshotInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DeleteDBClusterSnapshotInput
		In3 []request.Option
	}
	lockrdsClientMockDeleteDBClusterSnapshotWithContext.RLock()
	calls = mock.calls.DeleteDBClusterSnapshotWithContext
	lockrdsClientMockDeleteDBClusterSnapshotWithContext.RUnlock()
	return calls
}

// DeleteDBClusterWithContext calls DeleteDBClusterWithContextFunc.
func (mock *rdsClientMock) DeleteDBClusterWithContext(in1 context.Context, in2 *rds.DeleteDBClusterInput, in3 ...request.Option) (*rds.DeleteDBClusterOutput, error) {
	if mock.DeleteDBClusterWithContextFunc == nil {
		panic("rdsClientMock.DeleteDBClusterWithContextFunc: method is nil but rdsClient.DeleteDBClusterWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DeleteDBClusterInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDeleteDBClusterWithContext.Lock()
	mock.calls.DeleteDBClusterWithContext = append(mock.calls.DeleteDBClusterWithContext, callInfo)
	lockrdsClientMockDeleteDBClusterWithContext.Unlock()
	return mock.DeleteDBClusterWithContextFunc(in1, in2, in3...)
}

// DeleteDBClusterWithContextCalls gets all the calls that were made to DeleteDBClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteDBClusterWithContextCalls())
func (mock *rdsClientMock) DeleteDBClusterWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DeleteDBClusterInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DeleteDBClusterInput
		In3 []request.Option
	}
	lockrdsClientMockDeleteDBClusterWithContext.RLock()
	calls = mock.calls.DeleteDBClusterWithContext
	lockrdsClientMockDeleteDBClusterWithContext.RUnlock()
	return calls
}

// DeleteDBInstance calls DeleteDBInstanceFunc.
func (mock *rdsClientMock) DeleteDBInstance(in1 *rds.DeleteDBInstanceInput) (*rds.DeleteDBInstanceOutput, error) {
	if mock.DeleteDBInstanceFunc == nil {
		panic("rdsClientMock.DeleteDBInstanceFunc: method is nil but rdsClient.DeleteDBInstance was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteDBInstanceInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteDBInstance.Lock()
	mock.calls.DeleteDBInstance = append(mock.calls.DeleteDBInstance, callInfo)
	lockrdsClientMockDeleteDBInstance.Unlock()
	return mock.DeleteDBInstanceFunc(in1)
}

// DeleteDBInstanceCalls gets all the calls that were made to DeleteDBInstance.
// Check the length with:
//     len(mockedrdsClient.DeleteDBInstanceCalls())
func (mock *rdsClientMock) DeleteDBInstanceCalls() []struct {
	In1 *rds.DeleteDBInstanceInput
} {
	var calls []struct {
		In1 *rds.DeleteDBInstanceInput
	}
	lockrdsClientMockDeleteDBInstance.RLock()
	calls = mock.calls.DeleteDBInstance
	lockrdsClientMockDeleteDBInstance.RUnlock()
	return calls
}

// DeleteDBInstanceAutomatedBackup calls DeleteDBInstanceAutomatedBackupFunc.
func (mock *rdsClientMock) DeleteDBInstanceAutomatedBackup(in1 *rds.DeleteDBInstanceAutomatedBackupInput) (*rds.DeleteDBInstanceAutomatedBackupOutput, error) {
	if mock.DeleteDBInstanceAutomatedBackupFunc == nil {
		panic("rdsClientMock.DeleteDBInstanceAutomatedBackupFunc: method is nil but rdsClient.DeleteDBInstanceAutomatedBackup was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteDBInstanceAutomatedBackupInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteDBInstanceAutomatedBackup.Lock()
	mock.calls.DeleteDBInstanceAutomatedBackup = append(mock.calls.DeleteDBInstanceAutomatedBackup, callInfo)
	lockrdsClientMockDeleteDBInstanceAutomatedBackup.Unlock()
	return mock.DeleteDBInstanceAutomatedBackupFunc(in1)
}

// DeleteDBInstanceAutomatedBackupCalls gets all the calls that were made to DeleteDBInstanceAutomatedBackup.
// Check the length with:
//     len(mockedrdsClient.DeleteDBInstanceAutomatedBackupCalls())
func (mock *rdsClientMock) DeleteDBInstanceAutomatedBackupCalls() []struct {
	In1 *rds.DeleteDBInstanceAutomatedBackupInput
} {
	var calls []struct {
		In1 *rds.DeleteDBInstanceAutomatedBackupInput
	}
	lockrdsClientMockDeleteDBInstanceAutomatedBackup.RLock()
	calls = mock.calls.DeleteDBInstanceAutomatedBackup
	lockrdsClientMockDeleteDBInstanceAutomatedBackup.RUnlock()
	return calls
}

// DeleteDBInstanceAutomatedBackupRequest calls DeleteDBInstanceAutomatedBackupRequestFunc.
func (mock *rdsClientMock) DeleteDBInstanceAutomatedBackupRequest(in1 *rds.DeleteDBInstanceAutomatedBackupInput) (*request.Request, *rds.DeleteDBInstanceAutomatedBackupOutput) {
	if mock.DeleteDBInstanceAutomatedBackupRequestFunc == nil {
		panic("rdsClientMock.DeleteDBInstanceAutomatedBackupRequestFunc: method is nil but rdsClient.DeleteDBInstanceAutomatedBackupRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteDBInstanceAutomatedBackupInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteDBInstanceAutomatedBackupRequest.Lock()
	mock.calls.DeleteDBInstanceAutomatedBackupRequest = append(mock.calls.DeleteDBInstanceAutomatedBackupRequest, callInfo)
	lockrdsClientMockDeleteDBInstanceAutomatedBackupRequest.Unlock()
	return mock.DeleteDBInstanceAutomatedBackupRequestFunc(in1)
}

// DeleteDBInstanceAutomatedBackupRequestCalls gets all the calls that were made to DeleteDBInstanceAutomatedBackupRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteDBInstanceAutomatedBackupRequestCalls())
func (mock *rdsClientMock) DeleteDBInstanceAutomatedBackupRequestCalls() []struct {
	In1 *rds.DeleteDBInstanceAutomatedBackupInput
} {
	var calls []struct {
		In1 *rds.DeleteDBInstanceAutomatedBackupInput
	}
	lockrdsClientMockDeleteDBInstanceAutomatedBackupRequest.RLock()
	calls = mock.calls.DeleteDBInstanceAutomatedBackupRequest
	lockrdsClientMockDeleteDBInstanceAutomatedBackupRequest.RUnlock()
	return calls
}

// DeleteDBInstanceAutomatedBackupWithContext calls DeleteDBInstanceAutomatedBackupWithContextFunc.
func (mock *rdsClientMock) DeleteDBInstanceAutomatedBackupWithContext(in1 context.Context, in2 *rds.DeleteDBInstanceAutomatedBackupInput, in3 ...request.Option) (*rds.DeleteDBInstanceAutomatedBackupOutput, error) {
	if mock.DeleteDBInstanceAutomatedBackupWithContextFunc == nil {
		panic("rdsClientMock.DeleteDBInstanceAutomatedBackupWithContextFunc: method is nil but rdsClient.DeleteDBInstanceAutomatedBackupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DeleteDBInstanceAutomatedBackupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDeleteDBInstanceAutomatedBackupWithContext.Lock()
	mock.calls.DeleteDBInstanceAutomatedBackupWithContext = append(mock.calls.DeleteDBInstanceAutomatedBackupWithContext, callInfo)
	lockrdsClientMockDeleteDBInstanceAutomatedBackupWithContext.Unlock()
	return mock.DeleteDBInstanceAutomatedBackupWithContextFunc(in1, in2, in3...)
}

// DeleteDBInstanceAutomatedBackupWithContextCalls gets all the calls that were made to DeleteDBInstanceAutomatedBackupWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteDBInstanceAutomatedBackupWithContextCalls())
func (mock *rdsClientMock) DeleteDBInstanceAutomatedBackupWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DeleteDBInstanceAutomatedBackupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DeleteDBInstanceAutomatedBackupInput
		In3 []request.Option
	}
	lockrdsClientMockDeleteDBInstanceAutomatedBackupWithContext.RLock()
	calls = mock.calls.DeleteDBInstanceAutomatedBackupWithContext
	lockrdsClientMockDeleteDBInstanceAutomatedBackupWithContext.RUnlock()
	return calls
}

// DeleteDBInstanceRequest calls DeleteDBInstanceRequestFunc.
func (mock *rdsClientMock) DeleteDBInstanceRequest(in1 *rds.DeleteDBInstanceInput) (*request.Request, *rds.DeleteDBInstanceOutput) {
	if mock.DeleteDBInstanceRequestFunc == nil {
		panic("rdsClientMock.DeleteDBInstanceRequestFunc: method is nil but rdsClient.DeleteDBInstanceRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteDBInstanceInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteDBInstanceRequest.Lock()
	mock.calls.DeleteDBInstanceRequest = append(mock.calls.DeleteDBInstanceRequest, callInfo)
	lockrdsClientMockDeleteDBInstanceRequest.Unlock()
	return mock.DeleteDBInstanceRequestFunc(in1)
}

// DeleteDBInstanceRequestCalls gets all the calls that were made to DeleteDBInstanceRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteDBInstanceRequestCalls())
func (mock *rdsClientMock) DeleteDBInstanceRequestCalls() []struct {
	In1 *rds.DeleteDBInstanceInput
} {
	var calls []struct {
		In1 *rds.DeleteDBInstanceInput
	}
	lockrdsClientMockDeleteDBInstanceRequest.RLock()
	calls = mock.calls.DeleteDBInstanceRequest
	lockrdsClientMockDeleteDBInstanceRequest.RUnlock()
	return calls
}

// DeleteDBInstanceWithContext calls DeleteDBInstanceWithContextFunc.
func (mock *rdsClientMock) DeleteDBInstanceWithContext(in1 context.Context, in2 *rds.DeleteDBInstanceInput, in3 ...request.Option) (*rds.DeleteDBInstanceOutput, error) {
	if mock.DeleteDBInstanceWithContextFunc == nil {
		panic("rdsClientMock.DeleteDBInstanceWithContextFunc: method is nil but rdsClient.DeleteDBInstanceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DeleteDBInstanceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDeleteDBInstanceWithContext.Lock()
	mock.calls.DeleteDBInstanceWithContext = append(mock.calls.DeleteDBInstanceWithContext, callInfo)
	lockrdsClientMockDeleteDBInstanceWithContext.Unlock()
	return mock.DeleteDBInstanceWithContextFunc(in1, in2, in3...)
}

// DeleteDBInstanceWithContextCalls gets all the calls that were made to DeleteDBInstanceWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteDBInstanceWithContextCalls())
func (mock *rdsClientMock) DeleteDBInstanceWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DeleteDBInstanceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DeleteDBInstanceInput
		In3 []request.Option
	}
	lockrdsClientMockDeleteDBInstanceWithContext.RLock()
	calls = mock.calls.DeleteDBInstanceWithContext
	lockrdsClientMockDeleteDBInstanceWithContext.RUnlock()
	return calls
}

// DeleteDBParameterGroup calls DeleteDBParameterGroupFunc.
func (mock *rdsClientMock) DeleteDBParameterGroup(in1 *rds.DeleteDBParameterGroupInput) (*rds.DeleteDBParameterGroupOutput, error) {
	if mock.DeleteDBParameterGroupFunc == nil {
		panic("rdsClientMock.DeleteDBParameterGroupFunc: method is nil but rdsClient.DeleteDBParameterGroup was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteDBParameterGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteDBParameterGroup.Lock()
	mock.calls.DeleteDBParameterGroup = append(mock.calls.DeleteDBParameterGroup, callInfo)
	lockrdsClientMockDeleteDBParameterGroup.Unlock()
	return mock.DeleteDBParameterGroupFunc(in1)
}

// DeleteDBParameterGroupCalls gets all the calls that were made to DeleteDBParameterGroup.
// Check the length with:
//     len(mockedrdsClient.DeleteDBParameterGroupCalls())
func (mock *rdsClientMock) DeleteDBParameterGroupCalls() []struct {
	In1 *rds.DeleteDBParameterGroupInput
} {
	var calls []struct {
		In1 *rds.DeleteDBParameterGroupInput
	}
	lockrdsClientMockDeleteDBParameterGroup.RLock()
	calls = mock.calls.DeleteDBParameterGroup
	lockrdsClientMockDeleteDBParameterGroup.RUnlock()
	return calls
}

// DeleteDBParameterGroupRequest calls DeleteDBParameterGroupRequestFunc.
func (mock *rdsClientMock) DeleteDBParameterGroupRequest(in1 *rds.DeleteDBParameterGroupInput) (*request.Request, *rds.DeleteDBParameterGroupOutput) {
	if mock.DeleteDBParameterGroupRequestFunc == nil {
		panic("rdsClientMock.DeleteDBParameterGroupRequestFunc: method is nil but rdsClient.DeleteDBParameterGroupRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteDBParameterGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteDBParameterGroupRequest.Lock()
	mock.calls.DeleteDBParameterGroupRequest = append(mock.calls.DeleteDBParameterGroupRequest, callInfo)
	lockrdsClientMockDeleteDBParameterGroupRequest.Unlock()
	return mock.DeleteDBParameterGroupRequestFunc(in1)
}

// DeleteDBParameterGroupRequestCalls gets all the calls that were made to DeleteDBParameterGroupRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteDBParameterGroupRequestCalls())
func (mock *rdsClientMock) DeleteDBParameterGroupRequestCalls() []struct {
	In1 *rds.DeleteDBParameterGroupInput
} {
	var calls []struct {
		In1 *rds.DeleteDBParameterGroupInput
	}
	lockrdsClientMockDeleteDBParameterGroupRequest.RLock()
	calls = mock.calls.DeleteDBParameterGroupRequest
	lockrdsClientMockDeleteDBParameterGroupRequest.RUnlock()
	return calls
}

// DeleteDBParameterGroupWithContext calls DeleteDBParameterGroupWithContextFunc.
func (mock *rdsClientMock) DeleteDBParameterGroupWithContext(in1 context.Context, in2 *rds.DeleteDBParameterGroupInput, in3 ...request.Option) (*rds.DeleteDBParameterGroupOutput, error) {
	if mock.DeleteDBParameterGroupWithContextFunc == nil {
		panic("rdsClientMock.DeleteDBParameterGroupWithContextFunc: method is nil but rdsClient.DeleteDBParameterGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DeleteDBParameterGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDeleteDBParameterGroupWithContext.Lock()
	mock.calls.DeleteDBParameterGroupWithContext = append(mock.calls.DeleteDBParameterGroupWithContext, callInfo)
	lockrdsClientMockDeleteDBParameterGroupWithContext.Unlock()
	return mock.DeleteDBParameterGroupWithContextFunc(in1, in2, in3...)
}

// DeleteDBParameterGroupWithContextCalls gets all the calls that were made to DeleteDBParameterGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteDBParameterGroupWithContextCalls())
func (mock *rdsClientMock) DeleteDBParameterGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DeleteDBParameterGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DeleteDBParameterGroupInput
		In3 []request.Option
	}
	lockrdsClientMockDeleteDBParameterGroupWithContext.RLock()
	calls = mock.calls.DeleteDBParameterGroupWithContext
	lockrdsClientMockDeleteDBParameterGroupWithContext.RUnlock()
	return calls
}

// DeleteDBProxy calls DeleteDBProxyFunc.
func (mock *rdsClientMock) DeleteDBProxy(in1 *rds.DeleteDBProxyInput) (*rds.DeleteDBProxyOutput, error) {
	if mock.DeleteDBProxyFunc == nil {
		panic("rdsClientMock.DeleteDBProxyFunc: method is nil but rdsClient.DeleteDBProxy was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteDBProxyInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteDBProxy.Lock()
	mock.calls.DeleteDBProxy = append(mock.calls.DeleteDBProxy, callInfo)
	lockrdsClientMockDeleteDBProxy.Unlock()
	return mock.DeleteDBProxyFunc(in1)
}

// DeleteDBProxyCalls gets all the calls that were made to DeleteDBProxy.
// Check the length with:
//     len(mockedrdsClient.DeleteDBProxyCalls())
func (mock *rdsClientMock) DeleteDBProxyCalls() []struct {
	In1 *rds.DeleteDBProxyInput
} {
	var calls []struct {
		In1 *rds.DeleteDBProxyInput
	}
	lockrdsClientMockDeleteDBProxy.RLock()
	calls = mock.calls.DeleteDBProxy
	lockrdsClientMockDeleteDBProxy.RUnlock()
	return calls
}

// DeleteDBProxyRequest calls DeleteDBProxyRequestFunc.
func (mock *rdsClientMock) DeleteDBProxyRequest(in1 *rds.DeleteDBProxyInput) (*request.Request, *rds.DeleteDBProxyOutput) {
	if mock.DeleteDBProxyRequestFunc == nil {
		panic("rdsClientMock.DeleteDBProxyRequestFunc: method is nil but rdsClient.DeleteDBProxyRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteDBProxyInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteDBProxyRequest.Lock()
	mock.calls.DeleteDBProxyRequest = append(mock.calls.DeleteDBProxyRequest, callInfo)
	lockrdsClientMockDeleteDBProxyRequest.Unlock()
	return mock.DeleteDBProxyRequestFunc(in1)
}

// DeleteDBProxyRequestCalls gets all the calls that were made to DeleteDBProxyRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteDBProxyRequestCalls())
func (mock *rdsClientMock) DeleteDBProxyRequestCalls() []struct {
	In1 *rds.DeleteDBProxyInput
} {
	var calls []struct {
		In1 *rds.DeleteDBProxyInput
	}
	lockrdsClientMockDeleteDBProxyRequest.RLock()
	calls = mock.calls.DeleteDBProxyRequest
	lockrdsClientMockDeleteDBProxyRequest.RUnlock()
	return calls
}

// DeleteDBProxyWithContext calls DeleteDBProxyWithContextFunc.
func (mock *rdsClientMock) DeleteDBProxyWithContext(in1 context.Context, in2 *rds.DeleteDBProxyInput, in3 ...request.Option) (*rds.DeleteDBProxyOutput, error) {
	if mock.DeleteDBProxyWithContextFunc == nil {
		panic("rdsClientMock.DeleteDBProxyWithContextFunc: method is nil but rdsClient.DeleteDBProxyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DeleteDBProxyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDeleteDBProxyWithContext.Lock()
	mock.calls.DeleteDBProxyWithContext = append(mock.calls.DeleteDBProxyWithContext, callInfo)
	lockrdsClientMockDeleteDBProxyWithContext.Unlock()
	return mock.DeleteDBProxyWithContextFunc(in1, in2, in3...)
}

// DeleteDBProxyWithContextCalls gets all the calls that were made to DeleteDBProxyWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteDBProxyWithContextCalls())
func (mock *rdsClientMock) DeleteDBProxyWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DeleteDBProxyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DeleteDBProxyInput
		In3 []request.Option
	}
	lockrdsClientMockDeleteDBProxyWithContext.RLock()
	calls = mock.calls.DeleteDBProxyWithContext
	lockrdsClientMockDeleteDBProxyWithContext.RUnlock()
	return calls
}

// DeleteDBSecurityGroup calls DeleteDBSecurityGroupFunc.
func (mock *rdsClientMock) DeleteDBSecurityGroup(in1 *rds.DeleteDBSecurityGroupInput) (*rds.DeleteDBSecurityGroupOutput, error) {
	if mock.DeleteDBSecurityGroupFunc == nil {
		panic("rdsClientMock.DeleteDBSecurityGroupFunc: method is nil but rdsClient.DeleteDBSecurityGroup was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteDBSecurityGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteDBSecurityGroup.Lock()
	mock.calls.DeleteDBSecurityGroup = append(mock.calls.DeleteDBSecurityGroup, callInfo)
	lockrdsClientMockDeleteDBSecurityGroup.Unlock()
	return mock.DeleteDBSecurityGroupFunc(in1)
}

// DeleteDBSecurityGroupCalls gets all the calls that were made to DeleteDBSecurityGroup.
// Check the length with:
//     len(mockedrdsClient.DeleteDBSecurityGroupCalls())
func (mock *rdsClientMock) DeleteDBSecurityGroupCalls() []struct {
	In1 *rds.DeleteDBSecurityGroupInput
} {
	var calls []struct {
		In1 *rds.DeleteDBSecurityGroupInput
	}
	lockrdsClientMockDeleteDBSecurityGroup.RLock()
	calls = mock.calls.DeleteDBSecurityGroup
	lockrdsClientMockDeleteDBSecurityGroup.RUnlock()
	return calls
}

// DeleteDBSecurityGroupRequest calls DeleteDBSecurityGroupRequestFunc.
func (mock *rdsClientMock) DeleteDBSecurityGroupRequest(in1 *rds.DeleteDBSecurityGroupInput) (*request.Request, *rds.DeleteDBSecurityGroupOutput) {
	if mock.DeleteDBSecurityGroupRequestFunc == nil {
		panic("rdsClientMock.DeleteDBSecurityGroupRequestFunc: method is nil but rdsClient.DeleteDBSecurityGroupRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteDBSecurityGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteDBSecurityGroupRequest.Lock()
	mock.calls.DeleteDBSecurityGroupRequest = append(mock.calls.DeleteDBSecurityGroupRequest, callInfo)
	lockrdsClientMockDeleteDBSecurityGroupRequest.Unlock()
	return mock.DeleteDBSecurityGroupRequestFunc(in1)
}

// DeleteDBSecurityGroupRequestCalls gets all the calls that were made to DeleteDBSecurityGroupRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteDBSecurityGroupRequestCalls())
func (mock *rdsClientMock) DeleteDBSecurityGroupRequestCalls() []struct {
	In1 *rds.DeleteDBSecurityGroupInput
} {
	var calls []struct {
		In1 *rds.DeleteDBSecurityGroupInput
	}
	lockrdsClientMockDeleteDBSecurityGroupRequest.RLock()
	calls = mock.calls.DeleteDBSecurityGroupRequest
	lockrdsClientMockDeleteDBSecurityGroupRequest.RUnlock()
	return calls
}

// DeleteDBSecurityGroupWithContext calls DeleteDBSecurityGroupWithContextFunc.
func (mock *rdsClientMock) DeleteDBSecurityGroupWithContext(in1 context.Context, in2 *rds.DeleteDBSecurityGroupInput, in3 ...request.Option) (*rds.DeleteDBSecurityGroupOutput, error) {
	if mock.DeleteDBSecurityGroupWithContextFunc == nil {
		panic("rdsClientMock.DeleteDBSecurityGroupWithContextFunc: method is nil but rdsClient.DeleteDBSecurityGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DeleteDBSecurityGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDeleteDBSecurityGroupWithContext.Lock()
	mock.calls.DeleteDBSecurityGroupWithContext = append(mock.calls.DeleteDBSecurityGroupWithContext, callInfo)
	lockrdsClientMockDeleteDBSecurityGroupWithContext.Unlock()
	return mock.DeleteDBSecurityGroupWithContextFunc(in1, in2, in3...)
}

// DeleteDBSecurityGroupWithContextCalls gets all the calls that were made to DeleteDBSecurityGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteDBSecurityGroupWithContextCalls())
func (mock *rdsClientMock) DeleteDBSecurityGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DeleteDBSecurityGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DeleteDBSecurityGroupInput
		In3 []request.Option
	}
	lockrdsClientMockDeleteDBSecurityGroupWithContext.RLock()
	calls = mock.calls.DeleteDBSecurityGroupWithContext
	lockrdsClientMockDeleteDBSecurityGroupWithContext.RUnlock()
	return calls
}

// DeleteDBSnapshot calls DeleteDBSnapshotFunc.
func (mock *rdsClientMock) DeleteDBSnapshot(in1 *rds.DeleteDBSnapshotInput) (*rds.DeleteDBSnapshotOutput, error) {
	if mock.DeleteDBSnapshotFunc == nil {
		panic("rdsClientMock.DeleteDBSnapshotFunc: method is nil but rdsClient.DeleteDBSnapshot was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteDBSnapshotInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteDBSnapshot.Lock()
	mock.calls.DeleteDBSnapshot = append(mock.calls.DeleteDBSnapshot, callInfo)
	lockrdsClientMockDeleteDBSnapshot.Unlock()
	return mock.DeleteDBSnapshotFunc(in1)
}

// DeleteDBSnapshotCalls gets all the calls that were made to DeleteDBSnapshot.
// Check the length with:
//     len(mockedrdsClient.DeleteDBSnapshotCalls())
func (mock *rdsClientMock) DeleteDBSnapshotCalls() []struct {
	In1 *rds.DeleteDBSnapshotInput
} {
	var calls []struct {
		In1 *rds.DeleteDBSnapshotInput
	}
	lockrdsClientMockDeleteDBSnapshot.RLock()
	calls = mock.calls.DeleteDBSnapshot
	lockrdsClientMockDeleteDBSnapshot.RUnlock()
	return calls
}

// DeleteDBSnapshotRequest calls DeleteDBSnapshotRequestFunc.
func (mock *rdsClientMock) DeleteDBSnapshotRequest(in1 *rds.DeleteDBSnapshotInput) (*request.Request, *rds.DeleteDBSnapshotOutput) {
	if mock.DeleteDBSnapshotRequestFunc == nil {
		panic("rdsClientMock.DeleteDBSnapshotRequestFunc: method is nil but rdsClient.DeleteDBSnapshotRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteDBSnapshotInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteDBSnapshotRequest.Lock()
	mock.calls.DeleteDBSnapshotRequest = append(mock.calls.DeleteDBSnapshotRequest, callInfo)
	lockrdsClientMockDeleteDBSnapshotRequest.Unlock()
	return mock.DeleteDBSnapshotRequestFunc(in1)
}

// DeleteDBSnapshotRequestCalls gets all the calls that were made to DeleteDBSnapshotRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteDBSnapshotRequestCalls())
func (mock *rdsClientMock) DeleteDBSnapshotRequestCalls() []struct {
	In1 *rds.DeleteDBSnapshotInput
} {
	var calls []struct {
		In1 *rds.DeleteDBSnapshotInput
	}
	lockrdsClientMockDeleteDBSnapshotRequest.RLock()
	calls = mock.calls.DeleteDBSnapshotRequest
	lockrdsClientMockDeleteDBSnapshotRequest.RUnlock()
	return calls
}

// DeleteDBSnapshotWithContext calls DeleteDBSnapshotWithContextFunc.
func (mock *rdsClientMock) DeleteDBSnapshotWithContext(in1 context.Context, in2 *rds.DeleteDBSnapshotInput, in3 ...request.Option) (*rds.DeleteDBSnapshotOutput, error) {
	if mock.DeleteDBSnapshotWithContextFunc == nil {
		panic("rdsClientMock.DeleteDBSnapshotWithContextFunc: method is nil but rdsClient.DeleteDBSnapshotWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DeleteDBSnapshotInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDeleteDBSnapshotWithContext.Lock()
	mock.calls.DeleteDBSnapshotWithContext = append(mock.calls.DeleteDBSnapshotWithContext, callInfo)
	lockrdsClientMockDeleteDBSnapshotWithContext.Unlock()
	return mock.DeleteDBSnapshotWithContextFunc(in1, in2, in3...)
}

// DeleteDBSnapshotWithContextCalls gets all the calls that were made to DeleteDBSnapshotWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteDBSnapshotWithContextCalls())
func (mock *rdsClientMock) DeleteDBSnapshotWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DeleteDBSnapshotInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DeleteDBSnapshotInput
		In3 []request.Option
	}
	lockrdsClientMockDeleteDBSnapshotWithContext.RLock()
	calls = mock.calls.DeleteDBSnapshotWithContext
	lockrdsClientMockDeleteDBSnapshotWithContext.RUnlock()
	return calls
}

// DeleteDBSubnetGroup calls DeleteDBSubnetGroupFunc.
func (mock *rdsClientMock) DeleteDBSubnetGroup(in1 *rds.DeleteDBSubnetGroupInput) (*rds.DeleteDBSubnetGroupOutput, error) {
	if mock.DeleteDBSubnetGroupFunc == nil {
		panic("rdsClientMock.DeleteDBSubnetGroupFunc: method is nil but rdsClient.DeleteDBSubnetGroup was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteDBSubnetGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteDBSubnetGroup.Lock()
	mock.calls.DeleteDBSubnetGroup = append(mock.calls.DeleteDBSubnetGroup, callInfo)
	lockrdsClientMockDeleteDBSubnetGroup.Unlock()
	return mock.DeleteDBSubnetGroupFunc(in1)
}

// DeleteDBSubnetGroupCalls gets all the calls that were made to DeleteDBSubnetGroup.
// Check the length with:
//     len(mockedrdsClient.DeleteDBSubnetGroupCalls())
func (mock *rdsClientMock) DeleteDBSubnetGroupCalls() []struct {
	In1 *rds.DeleteDBSubnetGroupInput
} {
	var calls []struct {
		In1 *rds.DeleteDBSubnetGroupInput
	}
	lockrdsClientMockDeleteDBSubnetGroup.RLock()
	calls = mock.calls.DeleteDBSubnetGroup
	lockrdsClientMockDeleteDBSubnetGroup.RUnlock()
	return calls
}

// DeleteDBSubnetGroupRequest calls DeleteDBSubnetGroupRequestFunc.
func (mock *rdsClientMock) DeleteDBSubnetGroupRequest(in1 *rds.DeleteDBSubnetGroupInput) (*request.Request, *rds.DeleteDBSubnetGroupOutput) {
	if mock.DeleteDBSubnetGroupRequestFunc == nil {
		panic("rdsClientMock.DeleteDBSubnetGroupRequestFunc: method is nil but rdsClient.DeleteDBSubnetGroupRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteDBSubnetGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteDBSubnetGroupRequest.Lock()
	mock.calls.DeleteDBSubnetGroupRequest = append(mock.calls.DeleteDBSubnetGroupRequest, callInfo)
	lockrdsClientMockDeleteDBSubnetGroupRequest.Unlock()
	return mock.DeleteDBSubnetGroupRequestFunc(in1)
}

// DeleteDBSubnetGroupRequestCalls gets all the calls that were made to DeleteDBSubnetGroupRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteDBSubnetGroupRequestCalls())
func (mock *rdsClientMock) DeleteDBSubnetGroupRequestCalls() []struct {
	In1 *rds.DeleteDBSubnetGroupInput
} {
	var calls []struct {
		In1 *rds.DeleteDBSubnetGroupInput
	}
	lockrdsClientMockDeleteDBSubnetGroupRequest.RLock()
	calls = mock.calls.DeleteDBSubnetGroupRequest
	lockrdsClientMockDeleteDBSubnetGroupRequest.RUnlock()
	return calls
}

// DeleteDBSubnetGroupWithContext calls DeleteDBSubnetGroupWithContextFunc.
func (mock *rdsClientMock) DeleteDBSubnetGroupWithContext(in1 context.Context, in2 *rds.DeleteDBSubnetGroupInput, in3 ...request.Option) (*rds.DeleteDBSubnetGroupOutput, error) {
	if mock.DeleteDBSubnetGroupWithContextFunc == nil {
		panic("rdsClientMock.DeleteDBSubnetGroupWithContextFunc: method is nil but rdsClient.DeleteDBSubnetGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DeleteDBSubnetGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDeleteDBSubnetGroupWithContext.Lock()
	mock.calls.DeleteDBSubnetGroupWithContext = append(mock.calls.DeleteDBSubnetGroupWithContext, callInfo)
	lockrdsClientMockDeleteDBSubnetGroupWithContext.Unlock()
	return mock.DeleteDBSubnetGroupWithContextFunc(in1, in2, in3...)
}

// DeleteDBSubnetGroupWithContextCalls gets all the calls that were made to DeleteDBSubnetGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteDBSubnetGroupWithContextCalls())
func (mock *rdsClientMock) DeleteDBSubnetGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DeleteDBSubnetGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DeleteDBSubnetGroupInput
		In3 []request.Option
	}
	lockrdsClientMockDeleteDBSubnetGroupWithContext.RLock()
	calls = mock.calls.DeleteDBSubnetGroupWithContext
	lockrdsClientMockDeleteDBSubnetGroupWithContext.RUnlock()
	return calls
}

// DeleteEventSubscription calls DeleteEventSubscriptionFunc.
func (mock *rdsClientMock) DeleteEventSubscription(in1 *rds.DeleteEventSubscriptionInput) (*rds.DeleteEventSubscriptionOutput, error) {
	if mock.DeleteEventSubscriptionFunc == nil {
		panic("rdsClientMock.DeleteEventSubscriptionFunc: method is nil but rdsClient.DeleteEventSubscription was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteEventSubscriptionInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteEventSubscription.Lock()
	mock.calls.DeleteEventSubscription = append(mock.calls.DeleteEventSubscription, callInfo)
	lockrdsClientMockDeleteEventSubscription.Unlock()
	return mock.DeleteEventSubscriptionFunc(in1)
}

// DeleteEventSubscriptionCalls gets all the calls that were made to DeleteEventSubscription.
// Check the length with:
//     len(mockedrdsClient.DeleteEventSubscriptionCalls())
func (mock *rdsClientMock) DeleteEventSubscriptionCalls() []struct {
	In1 *rds.DeleteEventSubscriptionInput
} {
	var calls []struct {
		In1 *rds.DeleteEventSubscriptionInput
	}
	lockrdsClientMockDeleteEventSubscription.RLock()
	calls = mock.calls.DeleteEventSubscription
	lockrdsClientMockDeleteEventSubscription.RUnlock()
	return calls
}

// DeleteEventSubscriptionRequest calls DeleteEventSubscriptionRequestFunc.
func (mock *rdsClientMock) DeleteEventSubscriptionRequest(in1 *rds.DeleteEventSubscriptionInput) (*request.Request, *rds.DeleteEventSubscriptionOutput) {
	if mock.DeleteEventSubscriptionRequestFunc == nil {
		panic("rdsClientMock.DeleteEventSubscriptionRequestFunc: method is nil but rdsClient.DeleteEventSubscriptionRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteEventSubscriptionInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteEventSubscriptionRequest.Lock()
	mock.calls.DeleteEventSubscriptionRequest = append(mock.calls.DeleteEventSubscriptionRequest, callInfo)
	lockrdsClientMockDeleteEventSubscriptionRequest.Unlock()
	return mock.DeleteEventSubscriptionRequestFunc(in1)
}

// DeleteEventSubscriptionRequestCalls gets all the calls that were made to DeleteEventSubscriptionRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteEventSubscriptionRequestCalls())
func (mock *rdsClientMock) DeleteEventSubscriptionRequestCalls() []struct {
	In1 *rds.DeleteEventSubscriptionInput
} {
	var calls []struct {
		In1 *rds.DeleteEventSubscriptionInput
	}
	lockrdsClientMockDeleteEventSubscriptionRequest.RLock()
	calls = mock.calls.DeleteEventSubscriptionRequest
	lockrdsClientMockDeleteEventSubscriptionRequest.RUnlock()
	return calls
}

// DeleteEventSubscriptionWithContext calls DeleteEventSubscriptionWithContextFunc.
func (mock *rdsClientMock) DeleteEventSubscriptionWithContext(in1 context.Context, in2 *rds.DeleteEventSubscriptionInput, in3 ...request.Option) (*rds.DeleteEventSubscriptionOutput, error) {
	if mock.DeleteEventSubscriptionWithContextFunc == nil {
		panic("rdsClientMock.DeleteEventSubscriptionWithContextFunc: method is nil but rdsClient.DeleteEventSubscriptionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DeleteEventSubscriptionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDeleteEventSubscriptionWithContext.Lock()
	mock.calls.DeleteEventSubscriptionWithContext = append(mock.calls.DeleteEventSubscriptionWithContext, callInfo)
	lockrdsClientMockDeleteEventSubscriptionWithContext.Unlock()
	return mock.DeleteEventSubscriptionWithContextFunc(in1, in2, in3...)
}

// DeleteEventSubscriptionWithContextCalls gets all the calls that were made to DeleteEventSubscriptionWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteEventSubscriptionWithContextCalls())
func (mock *rdsClientMock) DeleteEventSubscriptionWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DeleteEventSubscriptionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DeleteEventSubscriptionInput
		In3 []request.Option
	}
	lockrdsClientMockDeleteEventSubscriptionWithContext.RLock()
	calls = mock.calls.DeleteEventSubscriptionWithContext
	lockrdsClientMockDeleteEventSubscriptionWithContext.RUnlock()
	return calls
}

// DeleteGlobalCluster calls DeleteGlobalClusterFunc.
func (mock *rdsClientMock) DeleteGlobalCluster(in1 *rds.DeleteGlobalClusterInput) (*rds.DeleteGlobalClusterOutput, error) {
	if mock.DeleteGlobalClusterFunc == nil {
		panic("rdsClientMock.DeleteGlobalClusterFunc: method is nil but rdsClient.DeleteGlobalCluster was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteGlobalClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteGlobalCluster.Lock()
	mock.calls.DeleteGlobalCluster = append(mock.calls.DeleteGlobalCluster, callInfo)
	lockrdsClientMockDeleteGlobalCluster.Unlock()
	return mock.DeleteGlobalClusterFunc(in1)
}

// DeleteGlobalClusterCalls gets all the calls that were made to DeleteGlobalCluster.
// Check the length with:
//     len(mockedrdsClient.DeleteGlobalClusterCalls())
func (mock *rdsClientMock) DeleteGlobalClusterCalls() []struct {
	In1 *rds.DeleteGlobalClusterInput
} {
	var calls []struct {
		In1 *rds.DeleteGlobalClusterInput
	}
	lockrdsClientMockDeleteGlobalCluster.RLock()
	calls = mock.calls.DeleteGlobalCluster
	lockrdsClientMockDeleteGlobalCluster.RUnlock()
	return calls
}

// DeleteGlobalClusterRequest calls DeleteGlobalClusterRequestFunc.
func (mock *rdsClientMock) DeleteGlobalClusterRequest(in1 *rds.DeleteGlobalClusterInput) (*request.Request, *rds.DeleteGlobalClusterOutput) {
	if mock.DeleteGlobalClusterRequestFunc == nil {
		panic("rdsClientMock.DeleteGlobalClusterRequestFunc: method is nil but rdsClient.DeleteGlobalClusterRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteGlobalClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteGlobalClusterRequest.Lock()
	mock.calls.DeleteGlobalClusterRequest = append(mock.calls.DeleteGlobalClusterRequest, callInfo)
	lockrdsClientMockDeleteGlobalClusterRequest.Unlock()
	return mock.DeleteGlobalClusterRequestFunc(in1)
}

// DeleteGlobalClusterRequestCalls gets all the calls that were made to DeleteGlobalClusterRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteGlobalClusterRequestCalls())
func (mock *rdsClientMock) DeleteGlobalClusterRequestCalls() []struct {
	In1 *rds.DeleteGlobalClusterInput
} {
	var calls []struct {
		In1 *rds.DeleteGlobalClusterInput
	}
	lockrdsClientMockDeleteGlobalClusterRequest.RLock()
	calls = mock.calls.DeleteGlobalClusterRequest
	lockrdsClientMockDeleteGlobalClusterRequest.RUnlock()
	return calls
}

// DeleteGlobalClusterWithContext calls DeleteGlobalClusterWithContextFunc.
func (mock *rdsClientMock) DeleteGlobalClusterWithContext(in1 context.Context, in2 *rds.DeleteGlobalClusterInput, in3 ...request.Option) (*rds.DeleteGlobalClusterOutput, error) {
	if mock.DeleteGlobalClusterWithContextFunc == nil {
		panic("rdsClientMock.DeleteGlobalClusterWithContextFunc: method is nil but rdsClient.DeleteGlobalClusterWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DeleteGlobalClusterInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDeleteGlobalClusterWithContext.Lock()
	mock.calls.DeleteGlobalClusterWithContext = append(mock.calls.DeleteGlobalClusterWithContext, callInfo)
	lockrdsClientMockDeleteGlobalClusterWithContext.Unlock()
	return mock.DeleteGlobalClusterWithContextFunc(in1, in2, in3...)
}

// DeleteGlobalClusterWithContextCalls gets all the calls that were made to DeleteGlobalClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteGlobalClusterWithContextCalls())
func (mock *rdsClientMock) DeleteGlobalClusterWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DeleteGlobalClusterInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DeleteGlobalClusterInput
		In3 []request.Option
	}
	lockrdsClientMockDeleteGlobalClusterWithContext.RLock()
	calls = mock.calls.DeleteGlobalClusterWithContext
	lockrdsClientMockDeleteGlobalClusterWithContext.RUnlock()
	return calls
}

// DeleteInstallationMedia calls DeleteInstallationMediaFunc.
func (mock *rdsClientMock) DeleteInstallationMedia(in1 *rds.DeleteInstallationMediaInput) (*rds.DeleteInstallationMediaOutput, error) {
	if mock.DeleteInstallationMediaFunc == nil {
		panic("rdsClientMock.DeleteInstallationMediaFunc: method is nil but rdsClient.DeleteInstallationMedia was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteInstallationMediaInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteInstallationMedia.Lock()
	mock.calls.DeleteInstallationMedia = append(mock.calls.DeleteInstallationMedia, callInfo)
	lockrdsClientMockDeleteInstallationMedia.Unlock()
	return mock.DeleteInstallationMediaFunc(in1)
}

// DeleteInstallationMediaCalls gets all the calls that were made to DeleteInstallationMedia.
// Check the length with:
//     len(mockedrdsClient.DeleteInstallationMediaCalls())
func (mock *rdsClientMock) DeleteInstallationMediaCalls() []struct {
	In1 *rds.DeleteInstallationMediaInput
} {
	var calls []struct {
		In1 *rds.DeleteInstallationMediaInput
	}
	lockrdsClientMockDeleteInstallationMedia.RLock()
	calls = mock.calls.DeleteInstallationMedia
	lockrdsClientMockDeleteInstallationMedia.RUnlock()
	return calls
}

// DeleteInstallationMediaRequest calls DeleteInstallationMediaRequestFunc.
func (mock *rdsClientMock) DeleteInstallationMediaRequest(in1 *rds.DeleteInstallationMediaInput) (*request.Request, *rds.DeleteInstallationMediaOutput) {
	if mock.DeleteInstallationMediaRequestFunc == nil {
		panic("rdsClientMock.DeleteInstallationMediaRequestFunc: method is nil but rdsClient.DeleteInstallationMediaRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteInstallationMediaInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteInstallationMediaRequest.Lock()
	mock.calls.DeleteInstallationMediaRequest = append(mock.calls.DeleteInstallationMediaRequest, callInfo)
	lockrdsClientMockDeleteInstallationMediaRequest.Unlock()
	return mock.DeleteInstallationMediaRequestFunc(in1)
}

// DeleteInstallationMediaRequestCalls gets all the calls that were made to DeleteInstallationMediaRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteInstallationMediaRequestCalls())
func (mock *rdsClientMock) DeleteInstallationMediaRequestCalls() []struct {
	In1 *rds.DeleteInstallationMediaInput
} {
	var calls []struct {
		In1 *rds.DeleteInstallationMediaInput
	}
	lockrdsClientMockDeleteInstallationMediaRequest.RLock()
	calls = mock.calls.DeleteInstallationMediaRequest
	lockrdsClientMockDeleteInstallationMediaRequest.RUnlock()
	return calls
}

// DeleteInstallationMediaWithContext calls DeleteInstallationMediaWithContextFunc.
func (mock *rdsClientMock) DeleteInstallationMediaWithContext(in1 context.Context, in2 *rds.DeleteInstallationMediaInput, in3 ...request.Option) (*rds.DeleteInstallationMediaOutput, error) {
	if mock.DeleteInstallationMediaWithContextFunc == nil {
		panic("rdsClientMock.DeleteInstallationMediaWithContextFunc: method is nil but rdsClient.DeleteInstallationMediaWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DeleteInstallationMediaInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDeleteInstallationMediaWithContext.Lock()
	mock.calls.DeleteInstallationMediaWithContext = append(mock.calls.DeleteInstallationMediaWithContext, callInfo)
	lockrdsClientMockDeleteInstallationMediaWithContext.Unlock()
	return mock.DeleteInstallationMediaWithContextFunc(in1, in2, in3...)
}

// DeleteInstallationMediaWithContextCalls gets all the calls that were made to DeleteInstallationMediaWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteInstallationMediaWithContextCalls())
func (mock *rdsClientMock) DeleteInstallationMediaWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DeleteInstallationMediaInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DeleteInstallationMediaInput
		In3 []request.Option
	}
	lockrdsClientMockDeleteInstallationMediaWithContext.RLock()
	calls = mock.calls.DeleteInstallationMediaWithContext
	lockrdsClientMockDeleteInstallationMediaWithContext.RUnlock()
	return calls
}

// DeleteOptionGroup calls DeleteOptionGroupFunc.
func (mock *rdsClientMock) DeleteOptionGroup(in1 *rds.DeleteOptionGroupInput) (*rds.DeleteOptionGroupOutput, error) {
	if mock.DeleteOptionGroupFunc == nil {
		panic("rdsClientMock.DeleteOptionGroupFunc: method is nil but rdsClient.DeleteOptionGroup was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteOptionGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteOptionGroup.Lock()
	mock.calls.DeleteOptionGroup = append(mock.calls.DeleteOptionGroup, callInfo)
	lockrdsClientMockDeleteOptionGroup.Unlock()
	return mock.DeleteOptionGroupFunc(in1)
}

// DeleteOptionGroupCalls gets all the calls that were made to DeleteOptionGroup.
// Check the length with:
//     len(mockedrdsClient.DeleteOptionGroupCalls())
func (mock *rdsClientMock) DeleteOptionGroupCalls() []struct {
	In1 *rds.DeleteOptionGroupInput
} {
	var calls []struct {
		In1 *rds.DeleteOptionGroupInput
	}
	lockrdsClientMockDeleteOptionGroup.RLock()
	calls = mock.calls.DeleteOptionGroup
	lockrdsClientMockDeleteOptionGroup.RUnlock()
	return calls
}

// DeleteOptionGroupRequest calls DeleteOptionGroupRequestFunc.
func (mock *rdsClientMock) DeleteOptionGroupRequest(in1 *rds.DeleteOptionGroupInput) (*request.Request, *rds.DeleteOptionGroupOutput) {
	if mock.DeleteOptionGroupRequestFunc == nil {
		panic("rdsClientMock.DeleteOptionGroupRequestFunc: method is nil but rdsClient.DeleteOptionGroupRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DeleteOptionGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeleteOptionGroupRequest.Lock()
	mock.calls.DeleteOptionGroupRequest = append(mock.calls.DeleteOptionGroupRequest, callInfo)
	lockrdsClientMockDeleteOptionGroupRequest.Unlock()
	return mock.DeleteOptionGroupRequestFunc(in1)
}

// DeleteOptionGroupRequestCalls gets all the calls that were made to DeleteOptionGroupRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteOptionGroupRequestCalls())
func (mock *rdsClientMock) DeleteOptionGroupRequestCalls() []struct {
	In1 *rds.DeleteOptionGroupInput
} {
	var calls []struct {
		In1 *rds.DeleteOptionGroupInput
	}
	lockrdsClientMockDeleteOptionGroupRequest.RLock()
	calls = mock.calls.DeleteOptionGroupRequest
	lockrdsClientMockDeleteOptionGroupRequest.RUnlock()
	return calls
}

// DeleteOptionGroupWithContext calls DeleteOptionGroupWithContextFunc.
func (mock *rdsClientMock) DeleteOptionGroupWithContext(in1 context.Context, in2 *rds.DeleteOptionGroupInput, in3 ...request.Option) (*rds.DeleteOptionGroupOutput, error) {
	if mock.DeleteOptionGroupWithContextFunc == nil {
		panic("rdsClientMock.DeleteOptionGroupWithContextFunc: method is nil but rdsClient.DeleteOptionGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DeleteOptionGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDeleteOptionGroupWithContext.Lock()
	mock.calls.DeleteOptionGroupWithContext = append(mock.calls.DeleteOptionGroupWithContext, callInfo)
	lockrdsClientMockDeleteOptionGroupWithContext.Unlock()
	return mock.DeleteOptionGroupWithContextFunc(in1, in2, in3...)
}

// DeleteOptionGroupWithContextCalls gets all the calls that were made to DeleteOptionGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteOptionGroupWithContextCalls())
func (mock *rdsClientMock) DeleteOptionGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DeleteOptionGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DeleteOptionGroupInput
		In3 []request.Option
	}
	lockrdsClientMockDeleteOptionGroupWithContext.RLock()
	calls = mock.calls.DeleteOptionGroupWithContext
	lockrdsClientMockDeleteOptionGroupWithContext.RUnlock()
	return calls
}

// DeregisterDBProxyTargets calls DeregisterDBProxyTargetsFunc.
func (mock *rdsClientMock) DeregisterDBProxyTargets(in1 *rds.DeregisterDBProxyTargetsInput) (*rds.DeregisterDBProxyTargetsOutput, error) {
	if mock.DeregisterDBProxyTargetsFunc == nil {
		panic("rdsClientMock.DeregisterDBProxyTargetsFunc: method is nil but rdsClient.DeregisterDBProxyTargets was just called")
	}
	callInfo := struct {
		In1 *rds.DeregisterDBProxyTargetsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeregisterDBProxyTargets.Lock()
	mock.calls.DeregisterDBProxyTargets = append(mock.calls.DeregisterDBProxyTargets, callInfo)
	lockrdsClientMockDeregisterDBProxyTargets.Unlock()
	return mock.DeregisterDBProxyTargetsFunc(in1)
}

// DeregisterDBProxyTargetsCalls gets all the calls that were made to DeregisterDBProxyTargets.
// Check the length with:
//     len(mockedrdsClient.DeregisterDBProxyTargetsCalls())
func (mock *rdsClientMock) DeregisterDBProxyTargetsCalls() []struct {
	In1 *rds.DeregisterDBProxyTargetsInput
} {
	var calls []struct {
		In1 *rds.DeregisterDBProxyTargetsInput
	}
	lockrdsClientMockDeregisterDBProxyTargets.RLock()
	calls = mock.calls.DeregisterDBProxyTargets
	lockrdsClientMockDeregisterDBProxyTargets.RUnlock()
	return calls
}

// DeregisterDBProxyTargetsRequest calls DeregisterDBProxyTargetsRequestFunc.
func (mock *rdsClientMock) DeregisterDBProxyTargetsRequest(in1 *rds.DeregisterDBProxyTargetsInput) (*request.Request, *rds.DeregisterDBProxyTargetsOutput) {
	if mock.DeregisterDBProxyTargetsRequestFunc == nil {
		panic("rdsClientMock.DeregisterDBProxyTargetsRequestFunc: method is nil but rdsClient.DeregisterDBProxyTargetsRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DeregisterDBProxyTargetsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDeregisterDBProxyTargetsRequest.Lock()
	mock.calls.DeregisterDBProxyTargetsRequest = append(mock.calls.DeregisterDBProxyTargetsRequest, callInfo)
	lockrdsClientMockDeregisterDBProxyTargetsRequest.Unlock()
	return mock.DeregisterDBProxyTargetsRequestFunc(in1)
}

// DeregisterDBProxyTargetsRequestCalls gets all the calls that were made to DeregisterDBProxyTargetsRequest.
// Check the length with:
//     len(mockedrdsClient.DeregisterDBProxyTargetsRequestCalls())
func (mock *rdsClientMock) DeregisterDBProxyTargetsRequestCalls() []struct {
	In1 *rds.DeregisterDBProxyTargetsInput
} {
	var calls []struct {
		In1 *rds.DeregisterDBProxyTargetsInput
	}
	lockrdsClientMockDeregisterDBProxyTargetsRequest.RLock()
	calls = mock.calls.DeregisterDBProxyTargetsRequest
	lockrdsClientMockDeregisterDBProxyTargetsRequest.RUnlock()
	return calls
}

// DeregisterDBProxyTargetsWithContext calls DeregisterDBProxyTargetsWithContextFunc.
func (mock *rdsClientMock) DeregisterDBProxyTargetsWithContext(in1 context.Context, in2 *rds.DeregisterDBProxyTargetsInput, in3 ...request.Option) (*rds.DeregisterDBProxyTargetsOutput, error) {
	if mock.DeregisterDBProxyTargetsWithContextFunc == nil {
		panic("rdsClientMock.DeregisterDBProxyTargetsWithContextFunc: method is nil but rdsClient.DeregisterDBProxyTargetsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DeregisterDBProxyTargetsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDeregisterDBProxyTargetsWithContext.Lock()
	mock.calls.DeregisterDBProxyTargetsWithContext = append(mock.calls.DeregisterDBProxyTargetsWithContext, callInfo)
	lockrdsClientMockDeregisterDBProxyTargetsWithContext.Unlock()
	return mock.DeregisterDBProxyTargetsWithContextFunc(in1, in2, in3...)
}

// DeregisterDBProxyTargetsWithContextCalls gets all the calls that were made to DeregisterDBProxyTargetsWithContext.
// Check the length with:
//     len(mockedrdsClient.DeregisterDBProxyTargetsWithContextCalls())
func (mock *rdsClientMock) DeregisterDBProxyTargetsWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DeregisterDBProxyTargetsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DeregisterDBProxyTargetsInput
		In3 []request.Option
	}
	lockrdsClientMockDeregisterDBProxyTargetsWithContext.RLock()
	calls = mock.calls.DeregisterDBProxyTargetsWithContext
	lockrdsClientMockDeregisterDBProxyTargetsWithContext.RUnlock()
	return calls
}

// DescribeAccountAttributes calls DescribeAccountAttributesFunc.
func (mock *rdsClientMock) DescribeAccountAttributes(in1 *rds.DescribeAccountAttributesInput) (*rds.DescribeAccountAttributesOutput, error) {
	if mock.DescribeAccountAttributesFunc == nil {
		panic("rdsClientMock.DescribeAccountAttributesFunc: method is nil but rdsClient.DescribeAccountAttributes was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeAccountAttributesInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeAccountAttributes.Lock()
	mock.calls.DescribeAccountAttributes = append(mock.calls.DescribeAccountAttributes, callInfo)
	lockrdsClientMockDescribeAccountAttributes.Unlock()
	return mock.DescribeAccountAttributesFunc(in1)
}

// DescribeAccountAttributesCalls gets all the calls that were made to DescribeAccountAttributes.
// Check the length with:
//     len(mockedrdsClient.DescribeAccountAttributesCalls())
func (mock *rdsClientMock) DescribeAccountAttributesCalls() []struct {
	In1 *rds.DescribeAccountAttributesInput
} {
	var calls []struct {
		In1 *rds.DescribeAccountAttributesInput
	}
	lockrdsClientMockDescribeAccountAttributes.RLock()
	calls = mock.calls.DescribeAccountAttributes
	lockrdsClientMockDescribeAccountAttributes.RUnlock()
	return calls
}

// DescribeAccountAttributesRequest calls DescribeAccountAttributesRequestFunc.
func (mock *rdsClientMock) DescribeAccountAttributesRequest(in1 *rds.DescribeAccountAttributesInput) (*request.Request, *rds.DescribeAccountAttributesOutput) {
	if mock.DescribeAccountAttributesRequestFunc == nil {
		panic("rdsClientMock.DescribeAccountAttributesRequestFunc: method is nil but rdsClient.DescribeAccountAttributesRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeAccountAttributesInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeAccountAttributesRequest.Lock()
	mock.calls.DescribeAccountAttributesRequest = append(mock.calls.DescribeAccountAttributesRequest, callInfo)
	lockrdsClientMockDescribeAccountAttributesRequest.Unlock()
	return mock.DescribeAccountAttributesRequestFunc(in1)
}

// DescribeAccountAttributesRequestCalls gets all the calls that were made to DescribeAccountAttributesRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeAccountAttributesRequestCalls())
func (mock *rdsClientMock) DescribeAccountAttributesRequestCalls() []struct {
	In1 *rds.DescribeAccountAttributesInput
} {
	var calls []struct {
		In1 *rds.DescribeAccountAttributesInput
	}
	lockrdsClientMockDescribeAccountAttributesRequest.RLock()
	calls = mock.calls.DescribeAccountAttributesRequest
	lockrdsClientMockDescribeAccountAttributesRequest.RUnlock()
	return calls
}

// DescribeAccountAttributesWithContext calls DescribeAccountAttributesWithContextFunc.
func (mock *rdsClientMock) DescribeAccountAttributesWithContext(in1 context.Context, in2 *rds.DescribeAccountAttributesInput, in3 ...request.Option) (*rds.DescribeAccountAttributesOutput, error) {
	if mock.DescribeAccountAttributesWithContextFunc == nil {
		panic("rdsClientMock.DescribeAccountAttributesWithContextFunc: method is nil but rdsClient.DescribeAccountAttributesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeAccountAttributesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeAccountAttributesWithContext.Lock()
	mock.calls.DescribeAccountAttributesWithContext = append(mock.calls.DescribeAccountAttributesWithContext, callInfo)
	lockrdsClientMockDescribeAccountAttributesWithContext.Unlock()
	return mock.DescribeAccountAttributesWithContextFunc(in1, in2, in3...)
}

// DescribeAccountAttributesWithContextCalls gets all the calls that were made to DescribeAccountAttributesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeAccountAttributesWithContextCalls())
func (mock *rdsClientMock) DescribeAccountAttributesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeAccountAttributesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeAccountAttributesInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeAccountAttributesWithContext.RLock()
	calls = mock.calls.DescribeAccountAttributesWithContext
	lockrdsClientMockDescribeAccountAttributesWithContext.RUnlock()
	return calls
}

// DescribeCertificates calls DescribeCertificatesFunc.
func (mock *rdsClientMock) DescribeCertificates(in1 *rds.DescribeCertificatesInput) (*rds.DescribeCertificatesOutput, error) {
	if mock.DescribeCertificatesFunc == nil {
		panic("rdsClientMock.DescribeCertificatesFunc: method is nil but rdsClient.DescribeCertificates was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeCertificatesInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeCertificates.Lock()
	mock.calls.DescribeCertificates = append(mock.calls.DescribeCertificates, callInfo)
	lockrdsClientMockDescribeCertificates.Unlock()
	return mock.DescribeCertificatesFunc(in1)
}

// DescribeCertificatesCalls gets all the calls that were made to DescribeCertificates.
// Check the length with:
//     len(mockedrdsClient.DescribeCertificatesCalls())
func (mock *rdsClientMock) DescribeCertificatesCalls() []struct {
	In1 *rds.DescribeCertificatesInput
} {
	var calls []struct {
		In1 *rds.DescribeCertificatesInput
	}
	lockrdsClientMockDescribeCertificates.RLock()
	calls = mock.calls.DescribeCertificates
	lockrdsClientMockDescribeCertificates.RUnlock()
	return calls
}

// DescribeCertificatesRequest calls DescribeCertificatesRequestFunc.
func (mock *rdsClientMock) DescribeCertificatesRequest(in1 *rds.DescribeCertificatesInput) (*request.Request, *rds.DescribeCertificatesOutput) {
	if mock.DescribeCertificatesRequestFunc == nil {
		panic("rdsClientMock.DescribeCertificatesRequestFunc: method is nil but rdsClient.DescribeCertificatesRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeCertificatesInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeCertificatesRequest.Lock()
	mock.calls.DescribeCertificatesRequest = append(mock.calls.DescribeCertificatesRequest, callInfo)
	lockrdsClientMockDescribeCertificatesRequest.Unlock()
	return mock.DescribeCertificatesRequestFunc(in1)
}

// DescribeCertificatesRequestCalls gets all the calls that were made to DescribeCertificatesRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeCertificatesRequestCalls())
func (mock *rdsClientMock) DescribeCertificatesRequestCalls() []struct {
	In1 *rds.DescribeCertificatesInput
} {
	var calls []struct {
		In1 *rds.DescribeCertificatesInput
	}
	lockrdsClientMockDescribeCertificatesRequest.RLock()
	calls = mock.calls.DescribeCertificatesRequest
	lockrdsClientMockDescribeCertificatesRequest.RUnlock()
	return calls
}

// DescribeCertificatesWithContext calls DescribeCertificatesWithContextFunc.
func (mock *rdsClientMock) DescribeCertificatesWithContext(in1 context.Context, in2 *rds.DescribeCertificatesInput, in3 ...request.Option) (*rds.DescribeCertificatesOutput, error) {
	if mock.DescribeCertificatesWithContextFunc == nil {
		panic("rdsClientMock.DescribeCertificatesWithContextFunc: method is nil but rdsClient.DescribeCertificatesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeCertificatesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeCertificatesWithContext.Lock()
	mock.calls.DescribeCertificatesWithContext = append(mock.calls.DescribeCertificatesWithContext, callInfo)
	lockrdsClientMockDescribeCertificatesWithContext.Unlock()
	return mock.DescribeCertificatesWithContextFunc(in1, in2, in3...)
}

// DescribeCertificatesWithContextCalls gets all the calls that were made to DescribeCertificatesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeCertificatesWithContextCalls())
func (mock *rdsClientMock) DescribeCertificatesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeCertificatesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeCertificatesInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeCertificatesWithContext.RLock()
	calls = mock.calls.DescribeCertificatesWithContext
	lockrdsClientMockDescribeCertificatesWithContext.RUnlock()
	return calls
}

// DescribeCustomAvailabilityZones calls DescribeCustomAvailabilityZonesFunc.
func (mock *rdsClientMock) DescribeCustomAvailabilityZones(in1 *rds.DescribeCustomAvailabilityZonesInput) (*rds.DescribeCustomAvailabilityZonesOutput, error) {
	if mock.DescribeCustomAvailabilityZonesFunc == nil {
		panic("rdsClientMock.DescribeCustomAvailabilityZonesFunc: method is nil but rdsClient.DescribeCustomAvailabilityZones was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeCustomAvailabilityZonesInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeCustomAvailabilityZones.Lock()
	mock.calls.DescribeCustomAvailabilityZones = append(mock.calls.DescribeCustomAvailabilityZones, callInfo)
	lockrdsClientMockDescribeCustomAvailabilityZones.Unlock()
	return mock.DescribeCustomAvailabilityZonesFunc(in1)
}

// DescribeCustomAvailabilityZonesCalls gets all the calls that were made to DescribeCustomAvailabilityZones.
// Check the length with:
//     len(mockedrdsClient.DescribeCustomAvailabilityZonesCalls())
func (mock *rdsClientMock) DescribeCustomAvailabilityZonesCalls() []struct {
	In1 *rds.DescribeCustomAvailabilityZonesInput
} {
	var calls []struct {
		In1 *rds.DescribeCustomAvailabilityZonesInput
	}
	lockrdsClientMockDescribeCustomAvailabilityZones.RLock()
	calls = mock.calls.DescribeCustomAvailabilityZones
	lockrdsClientMockDescribeCustomAvailabilityZones.RUnlock()
	return calls
}

// DescribeCustomAvailabilityZonesPages calls DescribeCustomAvailabilityZonesPagesFunc.
func (mock *rdsClientMock) DescribeCustomAvailabilityZonesPages(in1 *rds.DescribeCustomAvailabilityZonesInput, in2 func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool) error {
	if mock.DescribeCustomAvailabilityZonesPagesFunc == nil {
		panic("rdsClientMock.DescribeCustomAvailabilityZonesPagesFunc: method is nil but rdsClient.DescribeCustomAvailabilityZonesPages was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeCustomAvailabilityZonesInput
		In2 func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockrdsClientMockDescribeCustomAvailabilityZonesPages.Lock()
	mock.calls.DescribeCustomAvailabilityZonesPages = append(mock.calls.DescribeCustomAvailabilityZonesPages, callInfo)
	lockrdsClientMockDescribeCustomAvailabilityZonesPages.Unlock()
	return mock.DescribeCustomAvailabilityZonesPagesFunc(in1, in2)
}

// DescribeCustomAvailabilityZonesPagesCalls gets all the calls that were made to DescribeCustomAvailabilityZonesPages.
// Check the length with:
//     len(mockedrdsClient.DescribeCustomAvailabilityZonesPagesCalls())
func (mock *rdsClientMock) DescribeCustomAvailabilityZonesPagesCalls() []struct {
	In1 *rds.DescribeCustomAvailabilityZonesInput
	In2 func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool
} {
	var calls []struct {
		In1 *rds.DescribeCustomAvailabilityZonesInput
		In2 func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool
	}
	lockrdsClientMockDescribeCustomAvailabilityZonesPages.RLock()
	calls = mock.calls.DescribeCustomAvailabilityZonesPages
	lockrdsClientMockDescribeCustomAvailabilityZonesPages.RUnlock()
	return calls
}

// DescribeCustomAvailabilityZonesPagesWithContext calls DescribeCustomAvailabilityZonesPagesWithContextFunc.
func (mock *rdsClientMock) DescribeCustomAvailabilityZonesPagesWithContext(in1 context.Context, in2 *rds.DescribeCustomAvailabilityZonesInput, in3 func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeCustomAvailabilityZonesPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeCustomAvailabilityZonesPagesWithContextFunc: method is nil but rdsClient.DescribeCustomAvailabilityZonesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeCustomAvailabilityZonesInput
		In3 func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockrdsClientMockDescribeCustomAvailabilityZonesPagesWithContext.Lock()
	mock.calls.DescribeCustomAvailabilityZonesPagesWithContext = append(mock.calls.DescribeCustomAvailabilityZonesPagesWithContext, callInfo)
	lockrdsClientMockDescribeCustomAvailabilityZonesPagesWithContext.Unlock()
	return mock.DescribeCustomAvailabilityZonesPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeCustomAvailabilityZonesPagesWithContextCalls gets all the calls that were made to DescribeCustomAvailabilityZonesPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeCustomAvailabilityZonesPagesWithContextCalls())
func (mock *rdsClientMock) DescribeCustomAvailabilityZonesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeCustomAvailabilityZonesInput
	In3 func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeCustomAvailabilityZonesInput
		In3 func(*rds.DescribeCustomAvailabilityZonesOutput, bool) bool
		In4 []request.Option
	}
	lockrdsClientMockDescribeCustomAvailabilityZonesPagesWithContext.RLock()
	calls = mock.calls.DescribeCustomAvailabilityZonesPagesWithContext
	lockrdsClientMockDescribeCustomAvailabilityZonesPagesWithContext.RUnlock()
	return calls
}

// DescribeCustomAvailabilityZonesRequest calls DescribeCustomAvailabilityZonesRequestFunc.
func (mock *rdsClientMock) DescribeCustomAvailabilityZonesRequest(in1 *rds.DescribeCustomAvailabilityZonesInput) (*request.Request, *rds.DescribeCustomAvailabilityZonesOutput) {
	if mock.DescribeCustomAvailabilityZonesRequestFunc == nil {
		panic("rdsClientMock.DescribeCustomAvailabilityZonesRequestFunc: method is nil but rdsClient.DescribeCustomAvailabilityZonesRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeCustomAvailabilityZonesInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeCustomAvailabilityZonesRequest.Lock()
	mock.calls.DescribeCustomAvailabilityZonesRequest = append(mock.calls.DescribeCustomAvailabilityZonesRequest, callInfo)
	lockrdsClientMockDescribeCustomAvailabilityZonesRequest.Unlock()
	return mock.DescribeCustomAvailabilityZonesRequestFunc(in1)
}

// DescribeCustomAvailabilityZonesRequestCalls gets all the calls that were made to DescribeCustomAvailabilityZonesRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeCustomAvailabilityZonesRequestCalls())
func (mock *rdsClientMock) DescribeCustomAvailabilityZonesRequestCalls() []struct {
	In1 *rds.DescribeCustomAvailabilityZonesInput
} {
	var calls []struct {
		In1 *rds.DescribeCustomAvailabilityZonesInput
	}
	lockrdsClientMockDescribeCustomAvailabilityZonesRequest.RLock()
	calls = mock.calls.DescribeCustomAvailabilityZonesRequest
	lockrdsClientMockDescribeCustomAvailabilityZonesRequest.RUnlock()
	return calls
}

// DescribeCustomAvailabilityZonesWithContext calls DescribeCustomAvailabilityZonesWithContextFunc.
func (mock *rdsClientMock) DescribeCustomAvailabilityZonesWithContext(in1 context.Context, in2 *rds.DescribeCustomAvailabilityZonesInput, in3 ...request.Option) (*rds.DescribeCustomAvailabilityZonesOutput, error) {
	if mock.DescribeCustomAvailabilityZonesWithContextFunc == nil {
		panic("rdsClientMock.DescribeCustomAvailabilityZonesWithContextFunc: method is nil but rdsClient.DescribeCustomAvailabilityZonesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeCustomAvailabilityZonesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeCustomAvailabilityZonesWithContext.Lock()
	mock.calls.DescribeCustomAvailabilityZonesWithContext = append(mock.calls.DescribeCustomAvailabilityZonesWithContext, callInfo)
	lockrdsClientMockDescribeCustomAvailabilityZonesWithContext.Unlock()
	return mock.DescribeCustomAvailabilityZonesWithContextFunc(in1, in2, in3...)
}

// DescribeCustomAvailabilityZonesWithContextCalls gets all the calls that were made to DescribeCustomAvailabilityZonesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeCustomAvailabilityZonesWithContextCalls())
func (mock *rdsClientMock) DescribeCustomAvailabilityZonesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeCustomAvailabilityZonesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeCustomAvailabilityZonesInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeCustomAvailabilityZonesWithContext.RLock()
	calls = mock.calls.DescribeCustomAvailabilityZonesWithContext
	lockrdsClientMockDescribeCustomAvailabilityZonesWithContext.RUnlock()
	return calls
}

// DescribeDBClusterBacktracks calls DescribeDBClusterBacktracksFunc.
func (mock *rdsClientMock) DescribeDBClusterBacktracks(in1 *rds.DescribeDBClusterBacktracksInput) (*rds.DescribeDBClusterBacktracksOutput, error) {
	if mock.DescribeDBClusterBacktracksFunc == nil {
		panic("rdsClientMock.DescribeDBClusterBacktracksFunc: method is nil but rdsClient.DescribeDBClusterBacktracks was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBClusterBacktracksInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBClusterBacktracks.Lock()
	mock.calls.DescribeDBClusterBacktracks = append(mock.calls.DescribeDBClusterBacktracks, callInfo)
	lockrdsClientMockDescribeDBClusterBacktracks.Unlock()
	return mock.DescribeDBClusterBacktracksFunc(in1)
}

// DescribeDBClusterBacktracksCalls gets all the calls that were made to DescribeDBClusterBacktracks.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterBacktracksCalls())
func (mock *rdsClientMock) DescribeDBClusterBacktracksCalls() []struct {
	In1 *rds.DescribeDBClusterBacktracksInput
} {
	var calls []struct {
		In1 *rds.DescribeDBClusterBacktracksInput
	}
	lockrdsClientMockDescribeDBClusterBacktracks.RLock()
	calls = mock.calls.DescribeDBClusterBacktracks
	lockrdsClientMockDescribeDBClusterBacktracks.RUnlock()
	return calls
}

// DescribeDBClusterBacktracksRequest calls DescribeDBClusterBacktracksRequestFunc.
func (mock *rdsClientMock) DescribeDBClusterBacktracksRequest(in1 *rds.DescribeDBClusterBacktracksInput) (*request.Request, *rds.DescribeDBClusterBacktracksOutput) {
	if mock.DescribeDBClusterBacktracksRequestFunc == nil {
		panic("rdsClientMock.DescribeDBClusterBacktracksRequestFunc: method is nil but rdsClient.DescribeDBClusterBacktracksRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBClusterBacktracksInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBClusterBacktracksRequest.Lock()
	mock.calls.DescribeDBClusterBacktracksRequest = append(mock.calls.DescribeDBClusterBacktracksRequest, callInfo)
	lockrdsClientMockDescribeDBClusterBacktracksRequest.Unlock()
	return mock.DescribeDBClusterBacktracksRequestFunc(in1)
}

// DescribeDBClusterBacktracksRequestCalls gets all the calls that were made to DescribeDBClusterBacktracksRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterBacktracksRequestCalls())
func (mock *rdsClientMock) DescribeDBClusterBacktracksRequestCalls() []struct {
	In1 *rds.DescribeDBClusterBacktracksInput
} {
	var calls []struct {
		In1 *rds.DescribeDBClusterBacktracksInput
	}
	lockrdsClientMockDescribeDBClusterBacktracksRequest.RLock()
	calls = mock.calls.DescribeDBClusterBacktracksRequest
	lockrdsClientMockDescribeDBClusterBacktracksRequest.RUnlock()
	return calls
}

// DescribeDBClusterBacktracksWithContext calls DescribeDBClusterBacktracksWithContextFunc.
func (mock *rdsClientMock) DescribeDBClusterBacktracksWithContext(in1 context.Context, in2 *rds.DescribeDBClusterBacktracksInput, in3 ...request.Option) (*rds.DescribeDBClusterBacktracksOutput, error) {
	if mock.DescribeDBClusterBacktracksWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBClusterBacktracksWithContextFunc: method is nil but rdsClient.DescribeDBClusterBacktracksWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBClusterBacktracksInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeDBClusterBacktracksWithContext.Lock()
	mock.calls.DescribeDBClusterBacktracksWithContext = append(mock.calls.DescribeDBClusterBacktracksWithContext, callInfo)
	lockrdsClientMockDescribeDBClusterBacktracksWithContext.Unlock()
	return mock.DescribeDBClusterBacktracksWithContextFunc(in1, in2, in3...)
}

// DescribeDBClusterBacktracksWithContextCalls gets all the calls that were made to DescribeDBClusterBacktracksWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterBacktracksWithContextCalls())
func (mock *rdsClientMock) DescribeDBClusterBacktracksWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBClusterBacktracksInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBClusterBacktracksInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeDBClusterBacktracksWithContext.RLock()
	calls = mock.calls.DescribeDBClusterBacktracksWithContext
	lockrdsClientMockDescribeDBClusterBacktracksWithContext.RUnlock()
	return calls
}

// DescribeDBClusterEndpoints calls DescribeDBClusterEndpointsFunc.
func (mock *rdsClientMock) DescribeDBClusterEndpoints(in1 *rds.DescribeDBClusterEndpointsInput) (*rds.DescribeDBClusterEndpointsOutput, error) {
	if mock.DescribeDBClusterEndpointsFunc == nil {
		panic("rdsClientMock.DescribeDBClusterEndpointsFunc: method is nil but rdsClient.DescribeDBClusterEndpoints was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBClusterEndpointsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBClusterEndpoints.Lock()
	mock.calls.DescribeDBClusterEndpoints = append(mock.calls.DescribeDBClusterEndpoints, callInfo)
	lockrdsClientMockDescribeDBClusterEndpoints.Unlock()
	return mock.DescribeDBClusterEndpointsFunc(in1)
}

// DescribeDBClusterEndpointsCalls gets all the calls that were made to DescribeDBClusterEndpoints.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterEndpointsCalls())
func (mock *rdsClientMock) DescribeDBClusterEndpointsCalls() []struct {
	In1 *rds.DescribeDBClusterEndpointsInput
} {
	var calls []struct {
		In1 *rds.DescribeDBClusterEndpointsInput
	}
	lockrdsClientMockDescribeDBClusterEndpoints.RLock()
	calls = mock.calls.DescribeDBClusterEndpoints
	lockrdsClientMockDescribeDBClusterEndpoints.RUnlock()
	return calls
}

// DescribeDBClusterEndpointsRequest calls DescribeDBClusterEndpointsRequestFunc.
func (mock *rdsClientMock) DescribeDBClusterEndpointsRequest(in1 *rds.DescribeDBClusterEndpointsInput) (*request.Request, *rds.DescribeDBClusterEndpointsOutput) {
	if mock.DescribeDBClusterEndpointsRequestFunc == nil {
		panic("rdsClientMock.DescribeDBClusterEndpointsRequestFunc: method is nil but rdsClient.DescribeDBClusterEndpointsRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBClusterEndpointsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBClusterEndpointsRequest.Lock()
	mock.calls.DescribeDBClusterEndpointsRequest = append(mock.calls.DescribeDBClusterEndpointsRequest, callInfo)
	lockrdsClientMockDescribeDBClusterEndpointsRequest.Unlock()
	return mock.DescribeDBClusterEndpointsRequestFunc(in1)
}

// DescribeDBClusterEndpointsRequestCalls gets all the calls that were made to DescribeDBClusterEndpointsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterEndpointsRequestCalls())
func (mock *rdsClientMock) DescribeDBClusterEndpointsRequestCalls() []struct {
	In1 *rds.DescribeDBClusterEndpointsInput
} {
	var calls []struct {
		In1 *rds.DescribeDBClusterEndpointsInput
	}
	lockrdsClientMockDescribeDBClusterEndpointsRequest.RLock()
	calls = mock.calls.DescribeDBClusterEndpointsRequest
	lockrdsClientMockDescribeDBClusterEndpointsRequest.RUnlock()
	return calls
}

// DescribeDBClusterEndpointsWithContext calls DescribeDBClusterEndpointsWithContextFunc.
func (mock *rdsClientMock) DescribeDBClusterEndpointsWithContext(in1 context.Context, in2 *rds.DescribeDBClusterEndpointsInput, in3 ...request.Option) (*rds.DescribeDBClusterEndpointsOutput, error) {
	if mock.DescribeDBClusterEndpointsWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBClusterEndpointsWithContextFunc: method is nil but rdsClient.DescribeDBClusterEndpointsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBClusterEndpointsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeDBClusterEndpointsWithContext.Lock()
	mock.calls.DescribeDBClusterEndpointsWithContext = append(mock.calls.DescribeDBClusterEndpointsWithContext, callInfo)
	lockrdsClientMockDescribeDBClusterEndpointsWithContext.Unlock()
	return mock.DescribeDBClusterEndpointsWithContextFunc(in1, in2, in3...)
}

// DescribeDBClusterEndpointsWithContextCalls gets all the calls that were made to DescribeDBClusterEndpointsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterEndpointsWithContextCalls())
func (mock *rdsClientMock) DescribeDBClusterEndpointsWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBClusterEndpointsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBClusterEndpointsInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeDBClusterEndpointsWithContext.RLock()
	calls = mock.calls.DescribeDBClusterEndpointsWithContext
	lockrdsClientMockDescribeDBClusterEndpointsWithContext.RUnlock()
	return calls
}

// DescribeDBClusterParameterGroups calls DescribeDBClusterParameterGroupsFunc.
func (mock *rdsClientMock) DescribeDBClusterParameterGroups(in1 *rds.DescribeDBClusterParameterGroupsInput) (*rds.DescribeDBClusterParameterGroupsOutput, error) {
	if mock.DescribeDBClusterParameterGroupsFunc == nil {
		panic("rdsClientMock.DescribeDBClusterParameterGroupsFunc: method is nil but rdsClient.DescribeDBClusterParameterGroups was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBClusterParameterGroupsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBClusterParameterGroups.Lock()
	mock.calls.DescribeDBClusterParameterGroups = append(mock.calls.DescribeDBClusterParameterGroups, callInfo)
	lockrdsClientMockDescribeDBClusterParameterGroups.Unlock()
	return mock.DescribeDBClusterParameterGroupsFunc(in1)
}

// DescribeDBClusterParameterGroupsCalls gets all the calls that were made to DescribeDBClusterParameterGroups.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterParameterGroupsCalls())
func (mock *rdsClientMock) DescribeDBClusterParameterGroupsCalls() []struct {
	In1 *rds.DescribeDBClusterParameterGroupsInput
} {
	var calls []struct {
		In1 *rds.DescribeDBClusterParameterGroupsInput
	}
	lockrdsClientMockDescribeDBClusterParameterGroups.RLock()
	calls = mock.calls.DescribeDBClusterParameterGroups
	lockrdsClientMockDescribeDBClusterParameterGroups.RUnlock()
	return calls
}

// DescribeDBClusterParameterGroupsRequest calls DescribeDBClusterParameterGroupsRequestFunc.
func (mock *rdsClientMock) DescribeDBClusterParameterGroupsRequest(in1 *rds.DescribeDBClusterParameterGroupsInput) (*request.Request, *rds.DescribeDBClusterParameterGroupsOutput) {
	if mock.DescribeDBClusterParameterGroupsRequestFunc == nil {
		panic("rdsClientMock.DescribeDBClusterParameterGroupsRequestFunc: method is nil but rdsClient.DescribeDBClusterParameterGroupsRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBClusterParameterGroupsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBClusterParameterGroupsRequest.Lock()
	mock.calls.DescribeDBClusterParameterGroupsRequest = append(mock.calls.DescribeDBClusterParameterGroupsRequest, callInfo)
	lockrdsClientMockDescribeDBClusterParameterGroupsRequest.Unlock()
	return mock.DescribeDBClusterParameterGroupsRequestFunc(in1)
}

// DescribeDBClusterParameterGroupsRequestCalls gets all the calls that were made to DescribeDBClusterParameterGroupsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterParameterGroupsRequestCalls())
func (mock *rdsClientMock) DescribeDBClusterParameterGroupsRequestCalls() []struct {
	In1 *rds.DescribeDBClusterParameterGroupsInput
} {
	var calls []struct {
		In1 *rds.DescribeDBClusterParameterGroupsInput
	}
	lockrdsClientMockDescribeDBClusterParameterGroupsRequest.RLock()
	calls = mock.calls.DescribeDBClusterParameterGroupsRequest
	lockrdsClientMockDescribeDBClusterParameterGroupsRequest.RUnlock()
	return calls
}

// DescribeDBClusterParameterGroupsWithContext calls DescribeDBClusterParameterGroupsWithContextFunc.
func (mock *rdsClientMock) DescribeDBClusterParameterGroupsWithContext(in1 context.Context, in2 *rds.DescribeDBClusterParameterGroupsInput, in3 ...request.Option) (*rds.DescribeDBClusterParameterGroupsOutput, error) {
	if mock.DescribeDBClusterParameterGroupsWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBClusterParameterGroupsWithContextFunc: method is nil but rdsClient.DescribeDBClusterParameterGroupsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBClusterParameterGroupsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeDBClusterParameterGroupsWithContext.Lock()
	mock.calls.DescribeDBClusterParameterGroupsWithContext = append(mock.calls.DescribeDBClusterParameterGroupsWithContext, callInfo)
	lockrdsClientMockDescribeDBClusterParameterGroupsWithContext.Unlock()
	return mock.DescribeDBClusterParameterGroupsWithContextFunc(in1, in2, in3...)
}

// DescribeDBClusterParameterGroupsWithContextCalls gets all the calls that were made to DescribeDBClusterParameterGroupsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterParameterGroupsWithContextCalls())
func (mock *rdsClientMock) DescribeDBClusterParameterGroupsWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBClusterParameterGroupsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBClusterParameterGroupsInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeDBClusterParameterGroupsWithContext.RLock()
	calls = mock.calls.DescribeDBClusterParameterGroupsWithContext
	lockrdsClientMockDescribeDBClusterParameterGroupsWithContext.RUnlock()
	return calls
}

// DescribeDBClusterParameters calls DescribeDBClusterParametersFunc.
func (mock *rdsClientMock) DescribeDBClusterParameters(in1 *rds.DescribeDBClusterParametersInput) (*rds.DescribeDBClusterParametersOutput, error) {
	if mock.DescribeDBClusterParametersFunc == nil {
		panic("rdsClientMock.DescribeDBClusterParametersFunc: method is nil but rdsClient.DescribeDBClusterParameters was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBClusterParametersInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBClusterParameters.Lock()
	mock.calls.DescribeDBClusterParameters = append(mock.calls.DescribeDBClusterParameters, callInfo)
	lockrdsClientMockDescribeDBClusterParameters.Unlock()
	return mock.DescribeDBClusterParametersFunc(in1)
}

// DescribeDBClusterParametersCalls gets all the calls that were made to DescribeDBClusterParameters.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterParametersCalls())
func (mock *rdsClientMock) DescribeDBClusterParametersCalls() []struct {
	In1 *rds.DescribeDBClusterParametersInput
} {
	var calls []struct {
		In1 *rds.DescribeDBClusterParametersInput
	}
	lockrdsClientMockDescribeDBClusterParameters.RLock()
	calls = mock.calls.DescribeDBClusterParameters
	lockrdsClientMockDescribeDBClusterParameters.RUnlock()
	return calls
}

// DescribeDBClusterParametersRequest calls DescribeDBClusterParametersRequestFunc.
func (mock *rdsClientMock) DescribeDBClusterParametersRequest(in1 *rds.DescribeDBClusterParametersInput) (*request.Request, *rds.DescribeDBClusterParametersOutput) {
	if mock.DescribeDBClusterParametersRequestFunc == nil {
		panic("rdsClientMock.DescribeDBClusterParametersRequestFunc: method is nil but rdsClient.DescribeDBClusterParametersRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBClusterParametersInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBClusterParametersRequest.Lock()
	mock.calls.DescribeDBClusterParametersRequest = append(mock.calls.DescribeDBClusterParametersRequest, callInfo)
	lockrdsClientMockDescribeDBClusterParametersRequest.Unlock()
	return mock.DescribeDBClusterParametersRequestFunc(in1)
}

// DescribeDBClusterParametersRequestCalls gets all the calls that were made to DescribeDBClusterParametersRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterParametersRequestCalls())
func (mock *rdsClientMock) DescribeDBClusterParametersRequestCalls() []struct {
	In1 *rds.DescribeDBClusterParametersInput
} {
	var calls []struct {
		In1 *rds.DescribeDBClusterParametersInput
	}
	lockrdsClientMockDescribeDBClusterParametersRequest.RLock()
	calls = mock.calls.DescribeDBClusterParametersRequest
	lockrdsClientMockDescribeDBClusterParametersRequest.RUnlock()
	return calls
}

// DescribeDBClusterParametersWithContext calls DescribeDBClusterParametersWithContextFunc.
func (mock *rdsClientMock) DescribeDBClusterParametersWithContext(in1 context.Context, in2 *rds.DescribeDBClusterParametersInput, in3 ...request.Option) (*rds.DescribeDBClusterParametersOutput, error) {
	if mock.DescribeDBClusterParametersWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBClusterParametersWithContextFunc: method is nil but rdsClient.DescribeDBClusterParametersWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBClusterParametersInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeDBClusterParametersWithContext.Lock()
	mock.calls.DescribeDBClusterParametersWithContext = append(mock.calls.DescribeDBClusterParametersWithContext, callInfo)
	lockrdsClientMockDescribeDBClusterParametersWithContext.Unlock()
	return mock.DescribeDBClusterParametersWithContextFunc(in1, in2, in3...)
}

// DescribeDBClusterParametersWithContextCalls gets all the calls that were made to DescribeDBClusterParametersWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterParametersWithContextCalls())
func (mock *rdsClientMock) DescribeDBClusterParametersWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBClusterParametersInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBClusterParametersInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeDBClusterParametersWithContext.RLock()
	calls = mock.calls.DescribeDBClusterParametersWithContext
	lockrdsClientMockDescribeDBClusterParametersWithContext.RUnlock()
	return calls
}

// DescribeDBClusterSnapshotAttributes calls DescribeDBClusterSnapshotAttributesFunc.
func (mock *rdsClientMock) DescribeDBClusterSnapshotAttributes(in1 *rds.DescribeDBClusterSnapshotAttributesInput) (*rds.DescribeDBClusterSnapshotAttributesOutput, error) {
	if mock.DescribeDBClusterSnapshotAttributesFunc == nil {
		panic("rdsClientMock.DescribeDBClusterSnapshotAttributesFunc: method is nil but rdsClient.DescribeDBClusterSnapshotAttributes was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBClusterSnapshotAttributesInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBClusterSnapshotAttributes.Lock()
	mock.calls.DescribeDBClusterSnapshotAttributes = append(mock.calls.DescribeDBClusterSnapshotAttributes, callInfo)
	lockrdsClientMockDescribeDBClusterSnapshotAttributes.Unlock()
	return mock.DescribeDBClusterSnapshotAttributesFunc(in1)
}

// DescribeDBClusterSnapshotAttributesCalls gets all the calls that were made to DescribeDBClusterSnapshotAttributes.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterSnapshotAttributesCalls())
func (mock *rdsClientMock) DescribeDBClusterSnapshotAttributesCalls() []struct {
	In1 *rds.DescribeDBClusterSnapshotAttributesInput
} {
	var calls []struct {
		In1 *rds.DescribeDBClusterSnapshotAttributesInput
	}
	lockrdsClientMockDescribeDBClusterSnapshotAttributes.RLock()
	calls = mock.calls.DescribeDBClusterSnapshotAttributes
	lockrdsClientMockDescribeDBClusterSnapshotAttributes.RUnlock()
	return calls
}

// DescribeDBClusterSnapshotAttributesRequest calls DescribeDBClusterSnapshotAttributesRequestFunc.
func (mock *rdsClientMock) DescribeDBClusterSnapshotAttributesRequest(in1 *rds.DescribeDBClusterSnapshotAttributesInput) (*request.Request, *rds.DescribeDBClusterSnapshotAttributesOutput) {
	if mock.DescribeDBClusterSnapshotAttributesRequestFunc == nil {
		panic("rdsClientMock.DescribeDBClusterSnapshotAttributesRequestFunc: method is nil but rdsClient.DescribeDBClusterSnapshotAttributesRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBClusterSnapshotAttributesInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBClusterSnapshotAttributesRequest.Lock()
	mock.calls.DescribeDBClusterSnapshotAttributesRequest = append(mock.calls.DescribeDBClusterSnapshotAttributesRequest, callInfo)
	lockrdsClientMockDescribeDBClusterSnapshotAttributesRequest.Unlock()
	return mock.DescribeDBClusterSnapshotAttributesRequestFunc(in1)
}

// DescribeDBClusterSnapshotAttributesRequestCalls gets all the calls that were made to DescribeDBClusterSnapshotAttributesRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterSnapshotAttributesRequestCalls())
func (mock *rdsClientMock) DescribeDBClusterSnapshotAttributesRequestCalls() []struct {
	In1 *rds.DescribeDBClusterSnapshotAttributesInput
} {
	var calls []struct {
		In1 *rds.DescribeDBClusterSnapshotAttributesInput
	}
	lockrdsClientMockDescribeDBClusterSnapshotAttributesRequest.RLock()
	calls = mock.calls.DescribeDBClusterSnapshotAttributesRequest
	lockrdsClientMockDescribeDBClusterSnapshotAttributesRequest.RUnlock()
	return calls
}

// DescribeDBClusterSnapshotAttributesWithContext calls DescribeDBClusterSnapshotAttributesWithContextFunc.
func (mock *rdsClientMock) DescribeDBClusterSnapshotAttributesWithContext(in1 context.Context, in2 *rds.DescribeDBClusterSnapshotAttributesInput, in3 ...request.Option) (*rds.DescribeDBClusterSnapshotAttributesOutput, error) {
	if mock.DescribeDBClusterSnapshotAttributesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBClusterSnapshotAttributesWithContextFunc: method is nil but rdsClient.DescribeDBClusterSnapshotAttributesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBClusterSnapshotAttributesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeDBClusterSnapshotAttributesWithContext.Lock()
	mock.calls.DescribeDBClusterSnapshotAttributesWithContext = append(mock.calls.DescribeDBClusterSnapshotAttributesWithContext, callInfo)
	lockrdsClientMockDescribeDBClusterSnapshotAttributesWithContext.Unlock()
	return mock.DescribeDBClusterSnapshotAttributesWithContextFunc(in1, in2, in3...)
}

// DescribeDBClusterSnapshotAttributesWithContextCalls gets all the calls that were made to DescribeDBClusterSnapshotAttributesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterSnapshotAttributesWithContextCalls())
func (mock *rdsClientMock) DescribeDBClusterSnapshotAttributesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBClusterSnapshotAttributesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBClusterSnapshotAttributesInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeDBClusterSnapshotAttributesWithContext.RLock()
	calls = mock.calls.DescribeDBClusterSnapshotAttributesWithContext
	lockrdsClientMockDescribeDBClusterSnapshotAttributesWithContext.RUnlock()
	return calls
}

// DescribeDBClusterSnapshots calls DescribeDBClusterSnapshotsFunc.
func (mock *rdsClientMock) DescribeDBClusterSnapshots(in1 *rds.DescribeDBClusterSnapshotsInput) (*rds.DescribeDBClusterSnapshotsOutput, error) {
	if mock.DescribeDBClusterSnapshotsFunc == nil {
		panic("rdsClientMock.DescribeDBClusterSnapshotsFunc: method is nil but rdsClient.DescribeDBClusterSnapshots was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBClusterSnapshotsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBClusterSnapshots.Lock()
	mock.calls.DescribeDBClusterSnapshots = append(mock.calls.DescribeDBClusterSnapshots, callInfo)
	lockrdsClientMockDescribeDBClusterSnapshots.Unlock()
	return mock.DescribeDBClusterSnapshotsFunc(in1)
}

// DescribeDBClusterSnapshotsCalls gets all the calls that were made to DescribeDBClusterSnapshots.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterSnapshotsCalls())
func (mock *rdsClientMock) DescribeDBClusterSnapshotsCalls() []struct {
	In1 *rds.DescribeDBClusterSnapshotsInput
} {
	var calls []struct {
		In1 *rds.DescribeDBClusterSnapshotsInput
	}
	lockrdsClientMockDescribeDBClusterSnapshots.RLock()
	calls = mock.calls.DescribeDBClusterSnapshots
	lockrdsClientMockDescribeDBClusterSnapshots.RUnlock()
	return calls
}

// DescribeDBClusterSnapshotsRequest calls DescribeDBClusterSnapshotsRequestFunc.
func (mock *rdsClientMock) DescribeDBClusterSnapshotsRequest(in1 *rds.DescribeDBClusterSnapshotsInput) (*request.Request, *rds.DescribeDBClusterSnapshotsOutput) {
	if mock.DescribeDBClusterSnapshotsRequestFunc == nil {
		panic("rdsClientMock.DescribeDBClusterSnapshotsRequestFunc: method is nil but rdsClient.DescribeDBClusterSnapshotsRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBClusterSnapshotsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBClusterSnapshotsRequest.Lock()
	mock.calls.DescribeDBClusterSnapshotsRequest = append(mock.calls.DescribeDBClusterSnapshotsRequest, callInfo)
	lockrdsClientMockDescribeDBClusterSnapshotsRequest.Unlock()
	return mock.DescribeDBClusterSnapshotsRequestFunc(in1)
}

// DescribeDBClusterSnapshotsRequestCalls gets all the calls that were made to DescribeDBClusterSnapshotsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterSnapshotsRequestCalls())
func (mock *rdsClientMock) DescribeDBClusterSnapshotsRequestCalls() []struct {
	In1 *rds.DescribeDBClusterSnapshotsInput
} {
	var calls []struct {
		In1 *rds.DescribeDBClusterSnapshotsInput
	}
	lockrdsClientMockDescribeDBClusterSnapshotsRequest.RLock()
	calls = mock.calls.DescribeDBClusterSnapshotsRequest
	lockrdsClientMockDescribeDBClusterSnapshotsRequest.RUnlock()
	return calls
}

// DescribeDBClusterSnapshotsWithContext calls DescribeDBClusterSnapshotsWithContextFunc.
func (mock *rdsClientMock) DescribeDBClusterSnapshotsWithContext(in1 context.Context, in2 *rds.DescribeDBClusterSnapshotsInput, in3 ...request.Option) (*rds.DescribeDBClusterSnapshotsOutput, error) {
	if mock.DescribeDBClusterSnapshotsWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBClusterSnapshotsWithContextFunc: method is nil but rdsClient.DescribeDBClusterSnapshotsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBClusterSnapshotsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeDBClusterSnapshotsWithContext.Lock()
	mock.calls.DescribeDBClusterSnapshotsWithContext = append(mock.calls.DescribeDBClusterSnapshotsWithContext, callInfo)
	lockrdsClientMockDescribeDBClusterSnapshotsWithContext.Unlock()
	return mock.DescribeDBClusterSnapshotsWithContextFunc(in1, in2, in3...)
}

// DescribeDBClusterSnapshotsWithContextCalls gets all the calls that were made to DescribeDBClusterSnapshotsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterSnapshotsWithContextCalls())
func (mock *rdsClientMock) DescribeDBClusterSnapshotsWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBClusterSnapshotsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBClusterSnapshotsInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeDBClusterSnapshotsWithContext.RLock()
	calls = mock.calls.DescribeDBClusterSnapshotsWithContext
	lockrdsClientMockDescribeDBClusterSnapshotsWithContext.RUnlock()
	return calls
}

// DescribeDBClusters calls DescribeDBClustersFunc.
func (mock *rdsClientMock) DescribeDBClusters(in1 *rds.DescribeDBClustersInput) (*rds.DescribeDBClustersOutput, error) {
	if mock.DescribeDBClustersFunc == nil {
		panic("rdsClientMock.DescribeDBClustersFunc: method is nil but rdsClient.DescribeDBClusters was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBClustersInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBClusters.Lock()
	mock.calls.DescribeDBClusters = append(mock.calls.DescribeDBClusters, callInfo)
	lockrdsClientMockDescribeDBClusters.Unlock()
	return mock.DescribeDBClustersFunc(in1)
}

// DescribeDBClustersCalls gets all the calls that were made to DescribeDBClusters.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClustersCalls())
func (mock *rdsClientMock) DescribeDBClustersCalls() []struct {
	In1 *rds.DescribeDBClustersInput
} {
	var calls []struct {
		In1 *rds.DescribeDBClustersInput
	}
	lockrdsClientMockDescribeDBClusters.RLock()
	calls = mock.calls.DescribeDBClusters
	lockrdsClientMockDescribeDBClusters.RUnlock()
	return calls
}

// DescribeDBClustersPages calls DescribeDBClustersPagesFunc.
func (mock *rdsClientMock) DescribeDBClustersPages(in1 *rds.DescribeDBClustersInput, in2 func(*rds.DescribeDBClustersOutput, bool) bool) error {
	if mock.DescribeDBClustersPagesFunc == nil {
		panic("rdsClientMock.DescribeDBClustersPagesFunc: method is nil but rdsClient.DescribeDBClustersPages was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBClustersInput
		In2 func(*rds.DescribeDBClustersOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockrdsClientMockDescribeDBClustersPages.Lock()
	mock.calls.DescribeDBClustersPages = append(mock.calls.DescribeDBClustersPages, callInfo)
	lockrdsClientMockDescribeDBClustersPages.Unlock()
	return mock.DescribeDBClustersPagesFunc(in1, in2)
}

// DescribeDBClustersPagesCalls gets all the calls that were made to DescribeDBClustersPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClustersPagesCalls())
func (mock *rdsClientMock) DescribeDBClustersPagesCalls() []struct {
	In1 *rds.DescribeDBClustersInput
	In2 func(*rds.DescribeDBClustersOutput, bool) bool
} {
	var calls []struct {
		In1 *rds.DescribeDBClustersInput
		In2 func(*rds.DescribeDBClustersOutput, bool) bool
	}
	lockrdsClientMockDescribeDBClustersPages.RLock()
	calls = mock.calls.DescribeDBClustersPages
	lockrdsClientMockDescribeDBClustersPages.RUnlock()
	return calls
}

// DescribeDBClustersPagesWithContext calls DescribeDBClustersPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBClustersPagesWithContext(in1 context.Context, in2 *rds.DescribeDBClustersInput, in3 func(*rds.DescribeDBClustersOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeDBClustersPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBClustersPagesWithContextFunc: method is nil but rdsClient.DescribeDBClustersPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBClustersInput
		In3 func(*rds.DescribeDBClustersOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockrdsClientMockDescribeDBClustersPagesWithContext.Lock()
	mock.calls.DescribeDBClustersPagesWithContext = append(mock.calls.DescribeDBClustersPagesWithContext, callInfo)
	lockrdsClientMockDescribeDBClustersPagesWithContext.Unlock()
	return mock.DescribeDBClustersPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeDBClustersPagesWithContextCalls gets all the calls that were made to DescribeDBClustersPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClustersPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBClustersPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBClustersInput
	In3 func(*rds.DescribeDBClustersOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBClustersInput
		In3 func(*rds.DescribeDBClustersOutput, bool) bool
		In4 []request.Option
	}
	lockrdsClientMockDescribeDBClustersPagesWithContext.RLock()
	calls = mock.calls.DescribeDBClustersPagesWithContext
	lockrdsClientMockDescribeDBClustersPagesWithContext.RUnlock()
	return calls
}

// DescribeDBClustersRequest calls DescribeDBClustersRequestFunc.
func (mock *rdsClientMock) DescribeDBClustersRequest(in1 *rds.DescribeDBClustersInput) (*request.Request, *rds.DescribeDBClustersOutput) {
	if mock.DescribeDBClustersRequestFunc == nil {
		panic("rdsClientMock.DescribeDBClustersRequestFunc: method is nil but rdsClient.DescribeDBClustersRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBClustersInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBClustersRequest.Lock()
	mock.calls.DescribeDBClustersRequest = append(mock.calls.DescribeDBClustersRequest, callInfo)
	lockrdsClientMockDescribeDBClustersRequest.Unlock()
	return mock.DescribeDBClustersRequestFunc(in1)
}

// DescribeDBClustersRequestCalls gets all the calls that were made to DescribeDBClustersRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClustersRequestCalls())
func (mock *rdsClientMock) DescribeDBClustersRequestCalls() []struct {
	In1 *rds.DescribeDBClustersInput
} {
	var calls []struct {
		In1 *rds.DescribeDBClustersInput
	}
	lockrdsClientMockDescribeDBClustersRequest.RLock()
	calls = mock.calls.DescribeDBClustersRequest
	lockrdsClientMockDescribeDBClustersRequest.RUnlock()
	return calls
}

// DescribeDBClustersWithContext calls DescribeDBClustersWithContextFunc.
func (mock *rdsClientMock) DescribeDBClustersWithContext(in1 context.Context, in2 *rds.DescribeDBClustersInput, in3 ...request.Option) (*rds.DescribeDBClustersOutput, error) {
	if mock.DescribeDBClustersWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBClustersWithContextFunc: method is nil but rdsClient.DescribeDBClustersWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBClustersInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeDBClustersWithContext.Lock()
	mock.calls.DescribeDBClustersWithContext = append(mock.calls.DescribeDBClustersWithContext, callInfo)
	lockrdsClientMockDescribeDBClustersWithContext.Unlock()
	return mock.DescribeDBClustersWithContextFunc(in1, in2, in3...)
}

// DescribeDBClustersWithContextCalls gets all the calls that were made to DescribeDBClustersWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClustersWithContextCalls())
func (mock *rdsClientMock) DescribeDBClustersWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBClustersInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBClustersInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeDBClustersWithContext.RLock()
	calls = mock.calls.DescribeDBClustersWithContext
	lockrdsClientMockDescribeDBClustersWithContext.RUnlock()
	return calls
}

// DescribeDBEngineVersions calls DescribeDBEngineVersionsFunc.
func (mock *rdsClientMock) DescribeDBEngineVersions(in1 *rds.DescribeDBEngineVersionsInput) (*rds.DescribeDBEngineVersionsOutput, error) {
	if mock.DescribeDBEngineVersionsFunc == nil {
		panic("rdsClientMock.DescribeDBEngineVersionsFunc: method is nil but rdsClient.DescribeDBEngineVersions was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBEngineVersionsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBEngineVersions.Lock()
	mock.calls.DescribeDBEngineVersions = append(mock.calls.DescribeDBEngineVersions, callInfo)
	lockrdsClientMockDescribeDBEngineVersions.Unlock()
	return mock.DescribeDBEngineVersionsFunc(in1)
}

// DescribeDBEngineVersionsCalls gets all the calls that were made to DescribeDBEngineVersions.
// Check the length with:
//     len(mockedrdsClient.DescribeDBEngineVersionsCalls())
func (mock *rdsClientMock) DescribeDBEngineVersionsCalls() []struct {
	In1 *rds.DescribeDBEngineVersionsInput
} {
	var calls []struct {
		In1 *rds.DescribeDBEngineVersionsInput
	}
	lockrdsClientMockDescribeDBEngineVersions.RLock()
	calls = mock.calls.DescribeDBEngineVersions
	lockrdsClientMockDescribeDBEngineVersions.RUnlock()
	return calls
}

// DescribeDBEngineVersionsPages calls DescribeDBEngineVersionsPagesFunc.
func (mock *rdsClientMock) DescribeDBEngineVersionsPages(in1 *rds.DescribeDBEngineVersionsInput, in2 func(*rds.DescribeDBEngineVersionsOutput, bool) bool) error {
	if mock.DescribeDBEngineVersionsPagesFunc == nil {
		panic("rdsClientMock.DescribeDBEngineVersionsPagesFunc: method is nil but rdsClient.DescribeDBEngineVersionsPages was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBEngineVersionsInput
		In2 func(*rds.DescribeDBEngineVersionsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockrdsClientMockDescribeDBEngineVersionsPages.Lock()
	mock.calls.DescribeDBEngineVersionsPages = append(mock.calls.DescribeDBEngineVersionsPages, callInfo)
	lockrdsClientMockDescribeDBEngineVersionsPages.Unlock()
	return mock.DescribeDBEngineVersionsPagesFunc(in1, in2)
}

// DescribeDBEngineVersionsPagesCalls gets all the calls that were made to DescribeDBEngineVersionsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBEngineVersionsPagesCalls())
func (mock *rdsClientMock) DescribeDBEngineVersionsPagesCalls() []struct {
	In1 *rds.DescribeDBEngineVersionsInput
	In2 func(*rds.DescribeDBEngineVersionsOutput, bool) bool
} {
	var calls []struct {
		In1 *rds.DescribeDBEngineVersionsInput
		In2 func(*rds.DescribeDBEngineVersionsOutput, bool) bool
	}
	lockrdsClientMockDescribeDBEngineVersionsPages.RLock()
	calls = mock.calls.DescribeDBEngineVersionsPages
	lockrdsClientMockDescribeDBEngineVersionsPages.RUnlock()
	return calls
}

// DescribeDBEngineVersionsPagesWithContext calls DescribeDBEngineVersionsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBEngineVersionsPagesWithContext(in1 context.Context, in2 *rds.DescribeDBEngineVersionsInput, in3 func(*rds.DescribeDBEngineVersionsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeDBEngineVersionsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBEngineVersionsPagesWithContextFunc: method is nil but rdsClient.DescribeDBEngineVersionsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBEngineVersionsInput
		In3 func(*rds.DescribeDBEngineVersionsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockrdsClientMockDescribeDBEngineVersionsPagesWithContext.Lock()
	mock.calls.DescribeDBEngineVersionsPagesWithContext = append(mock.calls.DescribeDBEngineVersionsPagesWithContext, callInfo)
	lockrdsClientMockDescribeDBEngineVersionsPagesWithContext.Unlock()
	return mock.DescribeDBEngineVersionsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeDBEngineVersionsPagesWithContextCalls gets all the calls that were made to DescribeDBEngineVersionsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBEngineVersionsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBEngineVersionsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBEngineVersionsInput
	In3 func(*rds.DescribeDBEngineVersionsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBEngineVersionsInput
		In3 func(*rds.DescribeDBEngineVersionsOutput, bool) bool
		In4 []request.Option
	}
	lockrdsClientMockDescribeDBEngineVersionsPagesWithContext.RLock()
	calls = mock.calls.DescribeDBEngineVersionsPagesWithContext
	lockrdsClientMockDescribeDBEngineVersionsPagesWithContext.RUnlock()
	return calls
}

// DescribeDBEngineVersionsRequest calls DescribeDBEngineVersionsRequestFunc.
func (mock *rdsClientMock) DescribeDBEngineVersionsRequest(in1 *rds.DescribeDBEngineVersionsInput) (*request.Request, *rds.DescribeDBEngineVersionsOutput) {
	if mock.DescribeDBEngineVersionsRequestFunc == nil {
		panic("rdsClientMock.DescribeDBEngineVersionsRequestFunc: method is nil but rdsClient.DescribeDBEngineVersionsRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBEngineVersionsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBEngineVersionsRequest.Lock()
	mock.calls.DescribeDBEngineVersionsRequest = append(mock.calls.DescribeDBEngineVersionsRequest, callInfo)
	lockrdsClientMockDescribeDBEngineVersionsRequest.Unlock()
	return mock.DescribeDBEngineVersionsRequestFunc(in1)
}

// DescribeDBEngineVersionsRequestCalls gets all the calls that were made to DescribeDBEngineVersionsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBEngineVersionsRequestCalls())
func (mock *rdsClientMock) DescribeDBEngineVersionsRequestCalls() []struct {
	In1 *rds.DescribeDBEngineVersionsInput
} {
	var calls []struct {
		In1 *rds.DescribeDBEngineVersionsInput
	}
	lockrdsClientMockDescribeDBEngineVersionsRequest.RLock()
	calls = mock.calls.DescribeDBEngineVersionsRequest
	lockrdsClientMockDescribeDBEngineVersionsRequest.RUnlock()
	return calls
}

// DescribeDBEngineVersionsWithContext calls DescribeDBEngineVersionsWithContextFunc.
func (mock *rdsClientMock) DescribeDBEngineVersionsWithContext(in1 context.Context, in2 *rds.DescribeDBEngineVersionsInput, in3 ...request.Option) (*rds.DescribeDBEngineVersionsOutput, error) {
	if mock.DescribeDBEngineVersionsWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBEngineVersionsWithContextFunc: method is nil but rdsClient.DescribeDBEngineVersionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBEngineVersionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeDBEngineVersionsWithContext.Lock()
	mock.calls.DescribeDBEngineVersionsWithContext = append(mock.calls.DescribeDBEngineVersionsWithContext, callInfo)
	lockrdsClientMockDescribeDBEngineVersionsWithContext.Unlock()
	return mock.DescribeDBEngineVersionsWithContextFunc(in1, in2, in3...)
}

// DescribeDBEngineVersionsWithContextCalls gets all the calls that were made to DescribeDBEngineVersionsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBEngineVersionsWithContextCalls())
func (mock *rdsClientMock) DescribeDBEngineVersionsWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBEngineVersionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBEngineVersionsInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeDBEngineVersionsWithContext.RLock()
	calls = mock.calls.DescribeDBEngineVersionsWithContext
	lockrdsClientMockDescribeDBEngineVersionsWithContext.RUnlock()
	return calls
}

// DescribeDBInstanceAutomatedBackups calls DescribeDBInstanceAutomatedBackupsFunc.
func (mock *rdsClientMock) DescribeDBInstanceAutomatedBackups(in1 *rds.DescribeDBInstanceAutomatedBackupsInput) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error) {
	if mock.DescribeDBInstanceAutomatedBackupsFunc == nil {
		panic("rdsClientMock.DescribeDBInstanceAutomatedBackupsFunc: method is nil but rdsClient.DescribeDBInstanceAutomatedBackups was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBInstanceAutomatedBackupsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBInstanceAutomatedBackups.Lock()
	mock.calls.DescribeDBInstanceAutomatedBackups = append(mock.calls.DescribeDBInstanceAutomatedBackups, callInfo)
	lockrdsClientMockDescribeDBInstanceAutomatedBackups.Unlock()
	return mock.DescribeDBInstanceAutomatedBackupsFunc(in1)
}

// DescribeDBInstanceAutomatedBackupsCalls gets all the calls that were made to DescribeDBInstanceAutomatedBackups.
// Check the length with:
//     len(mockedrdsClient.DescribeDBInstanceAutomatedBackupsCalls())
func (mock *rdsClientMock) DescribeDBInstanceAutomatedBackupsCalls() []struct {
	In1 *rds.DescribeDBInstanceAutomatedBackupsInput
} {
	var calls []struct {
		In1 *rds.DescribeDBInstanceAutomatedBackupsInput
	}
	lockrdsClientMockDescribeDBInstanceAutomatedBackups.RLock()
	calls = mock.calls.DescribeDBInstanceAutomatedBackups
	lockrdsClientMockDescribeDBInstanceAutomatedBackups.RUnlock()
	return calls
}

// DescribeDBInstanceAutomatedBackupsPages calls DescribeDBInstanceAutomatedBackupsPagesFunc.
func (mock *rdsClientMock) DescribeDBInstanceAutomatedBackupsPages(in1 *rds.DescribeDBInstanceAutomatedBackupsInput, in2 func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool) error {
	if mock.DescribeDBInstanceAutomatedBackupsPagesFunc == nil {
		panic("rdsClientMock.DescribeDBInstanceAutomatedBackupsPagesFunc: method is nil but rdsClient.DescribeDBInstanceAutomatedBackupsPages was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBInstanceAutomatedBackupsInput
		In2 func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockrdsClientMockDescribeDBInstanceAutomatedBackupsPages.Lock()
	mock.calls.DescribeDBInstanceAutomatedBackupsPages = append(mock.calls.DescribeDBInstanceAutomatedBackupsPages, callInfo)
	lockrdsClientMockDescribeDBInstanceAutomatedBackupsPages.Unlock()
	return mock.DescribeDBInstanceAutomatedBackupsPagesFunc(in1, in2)
}

// DescribeDBInstanceAutomatedBackupsPagesCalls gets all the calls that were made to DescribeDBInstanceAutomatedBackupsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBInstanceAutomatedBackupsPagesCalls())
func (mock *rdsClientMock) DescribeDBInstanceAutomatedBackupsPagesCalls() []struct {
	In1 *rds.DescribeDBInstanceAutomatedBackupsInput
	In2 func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool
} {
	var calls []struct {
		In1 *rds.DescribeDBInstanceAutomatedBackupsInput
		In2 func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool
	}
	lockrdsClientMockDescribeDBInstanceAutomatedBackupsPages.RLock()
	calls = mock.calls.DescribeDBInstanceAutomatedBackupsPages
	lockrdsClientMockDescribeDBInstanceAutomatedBackupsPages.RUnlock()
	return calls
}

// DescribeDBInstanceAutomatedBackupsPagesWithContext calls DescribeDBInstanceAutomatedBackupsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBInstanceAutomatedBackupsPagesWithContext(in1 context.Context, in2 *rds.DescribeDBInstanceAutomatedBackupsInput, in3 func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeDBInstanceAutomatedBackupsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBInstanceAutomatedBackupsPagesWithContextFunc: method is nil but rdsClient.DescribeDBInstanceAutomatedBackupsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBInstanceAutomatedBackupsInput
		In3 func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockrdsClientMockDescribeDBInstanceAutomatedBackupsPagesWithContext.Lock()
	mock.calls.DescribeDBInstanceAutomatedBackupsPagesWithContext = append(mock.calls.DescribeDBInstanceAutomatedBackupsPagesWithContext, callInfo)
	lockrdsClientMockDescribeDBInstanceAutomatedBackupsPagesWithContext.Unlock()
	return mock.DescribeDBInstanceAutomatedBackupsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeDBInstanceAutomatedBackupsPagesWithContextCalls gets all the calls that were made to DescribeDBInstanceAutomatedBackupsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBInstanceAutomatedBackupsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBInstanceAutomatedBackupsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBInstanceAutomatedBackupsInput
	In3 func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBInstanceAutomatedBackupsInput
		In3 func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool
		In4 []request.Option
	}
	lockrdsClientMockDescribeDBInstanceAutomatedBackupsPagesWithContext.RLock()
	calls = mock.calls.DescribeDBInstanceAutomatedBackupsPagesWithContext
	lockrdsClientMockDescribeDBInstanceAutomatedBackupsPagesWithContext.RUnlock()
	return calls
}

// DescribeDBInstanceAutomatedBackupsRequest calls DescribeDBInstanceAutomatedBackupsRequestFunc.
func (mock *rdsClientMock) DescribeDBInstanceAutomatedBackupsRequest(in1 *rds.DescribeDBInstanceAutomatedBackupsInput) (*request.Request, *rds.DescribeDBInstanceAutomatedBackupsOutput) {
	if mock.DescribeDBInstanceAutomatedBackupsRequestFunc == nil {
		panic("rdsClientMock.DescribeDBInstanceAutomatedBackupsRequestFunc: method is nil but rdsClient.DescribeDBInstanceAutomatedBackupsRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBInstanceAutomatedBackupsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBInstanceAutomatedBackupsRequest.Lock()
	mock.calls.DescribeDBInstanceAutomatedBackupsRequest = append(mock.calls.DescribeDBInstanceAutomatedBackupsRequest, callInfo)
	lockrdsClientMockDescribeDBInstanceAutomatedBackupsRequest.Unlock()
	return mock.DescribeDBInstanceAutomatedBackupsRequestFunc(in1)
}

// DescribeDBInstanceAutomatedBackupsRequestCalls gets all the calls that were made to DescribeDBInstanceAutomatedBackupsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBInstanceAutomatedBackupsRequestCalls())
func (mock *rdsClientMock) DescribeDBInstanceAutomatedBackupsRequestCalls() []struct {
	In1 *rds.DescribeDBInstanceAutomatedBackupsInput
} {
	var calls []struct {
		In1 *rds.DescribeDBInstanceAutomatedBackupsInput
	}
	lockrdsClientMockDescribeDBInstanceAutomatedBackupsRequest.RLock()
	calls = mock.calls.DescribeDBInstanceAutomatedBackupsRequest
	lockrdsClientMockDescribeDBInstanceAutomatedBackupsRequest.RUnlock()
	return calls
}

// DescribeDBInstanceAutomatedBackupsWithContext calls DescribeDBInstanceAutomatedBackupsWithContextFunc.
func (mock *rdsClientMock) DescribeDBInstanceAutomatedBackupsWithContext(in1 context.Context, in2 *rds.DescribeDBInstanceAutomatedBackupsInput, in3 ...request.Option) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error) {
	if mock.DescribeDBInstanceAutomatedBackupsWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBInstanceAutomatedBackupsWithContextFunc: method is nil but rdsClient.DescribeDBInstanceAutomatedBackupsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBInstanceAutomatedBackupsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeDBInstanceAutomatedBackupsWithContext.Lock()
	mock.calls.DescribeDBInstanceAutomatedBackupsWithContext = append(mock.calls.DescribeDBInstanceAutomatedBackupsWithContext, callInfo)
	lockrdsClientMockDescribeDBInstanceAutomatedBackupsWithContext.Unlock()
	return mock.DescribeDBInstanceAutomatedBackupsWithContextFunc(in1, in2, in3...)
}

// DescribeDBInstanceAutomatedBackupsWithContextCalls gets all the calls that were made to DescribeDBInstanceAutomatedBackupsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBInstanceAutomatedBackupsWithContextCalls())
func (mock *rdsClientMock) DescribeDBInstanceAutomatedBackupsWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBInstanceAutomatedBackupsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBInstanceAutomatedBackupsInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeDBInstanceAutomatedBackupsWithContext.RLock()
	calls = mock.calls.DescribeDBInstanceAutomatedBackupsWithContext
	lockrdsClientMockDescribeDBInstanceAutomatedBackupsWithContext.RUnlock()
	return calls
}

// DescribeDBInstances calls DescribeDBInstancesFunc.
func (mock *rdsClientMock) DescribeDBInstances(in1 *rds.DescribeDBInstancesInput) (*rds.DescribeDBInstancesOutput, error) {
	if mock.DescribeDBInstancesFunc == nil {
		panic("rdsClientMock.DescribeDBInstancesFunc: method is nil but rdsClient.DescribeDBInstances was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBInstancesInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBInstances.Lock()
	mock.calls.DescribeDBInstances = append(mock.calls.DescribeDBInstances, callInfo)
	lockrdsClientMockDescribeDBInstances.Unlock()
	return mock.DescribeDBInstancesFunc(in1)
}

// DescribeDBInstancesCalls gets all the calls that were made to DescribeDBInstances.
// Check the length with:
//     len(mockedrdsClient.DescribeDBInstancesCalls())
func (mock *rdsClientMock) DescribeDBInstancesCalls() []struct {
	In1 *rds.DescribeDBInstancesInput
} {
	var calls []struct {
		In1 *rds.DescribeDBInstancesInput
	}
	lockrdsClientMockDescribeDBInstances.RLock()
	calls = mock.calls.DescribeDBInstances
	lockrdsClientMockDescribeDBInstances.RUnlock()
	return calls
}

// DescribeDBInstancesPages calls DescribeDBInstancesPagesFunc.
func (mock *rdsClientMock) DescribeDBInstancesPages(in1 *rds.DescribeDBInstancesInput, in2 func(*rds.DescribeDBInstancesOutput, bool) bool) error {
	if mock.DescribeDBInstancesPagesFunc == nil {
		panic("rdsClientMock.DescribeDBInstancesPagesFunc: method is nil but rdsClient.DescribeDBInstancesPages was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBInstancesInput
		In2 func(*rds.DescribeDBInstancesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockrdsClientMockDescribeDBInstancesPages.Lock()
	mock.calls.DescribeDBInstancesPages = append(mock.calls.DescribeDBInstancesPages, callInfo)
	lockrdsClientMockDescribeDBInstancesPages.Unlock()
	return mock.DescribeDBInstancesPagesFunc(in1, in2)
}

// DescribeDBInstancesPagesCalls gets all the calls that were made to DescribeDBInstancesPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBInstancesPagesCalls())
func (mock *rdsClientMock) DescribeDBInstancesPagesCalls() []struct {
	In1 *rds.DescribeDBInstancesInput
	In2 func(*rds.DescribeDBInstancesOutput, bool) bool
} {
	var calls []struct {
		In1 *rds.DescribeDBInstancesInput
		In2 func(*rds.DescribeDBInstancesOutput, bool) bool
	}
	lockrdsClientMockDescribeDBInstancesPages.RLock()
	calls = mock.calls.DescribeDBInstancesPages
	lockrdsClientMockDescribeDBInstancesPages.RUnlock()
	return calls
}

// DescribeDBInstancesPagesWithContext calls DescribeDBInstancesPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBInstancesPagesWithContext(in1 context.Context, in2 *rds.DescribeDBInstancesInput, in3 func(*rds.DescribeDBInstancesOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeDBInstancesPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBInstancesPagesWithContextFunc: method is nil but rdsClient.DescribeDBInstancesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBInstancesInput
		In3 func(*rds.DescribeDBInstancesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockrdsClientMockDescribeDBInstancesPagesWithContext.Lock()
	mock.calls.DescribeDBInstancesPagesWithContext = append(mock.calls.DescribeDBInstancesPagesWithContext, callInfo)
	lockrdsClientMockDescribeDBInstancesPagesWithContext.Unlock()
	return mock.DescribeDBInstancesPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeDBInstancesPagesWithContextCalls gets all the calls that were made to DescribeDBInstancesPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBInstancesPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBInstancesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBInstancesInput
	In3 func(*rds.DescribeDBInstancesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBInstancesInput
		In3 func(*rds.DescribeDBInstancesOutput, bool) bool
		In4 []request.Option
	}
	lockrdsClientMockDescribeDBInstancesPagesWithContext.RLock()
	calls = mock.calls.DescribeDBInstancesPagesWithContext
	lockrdsClientMockDescribeDBInstancesPagesWithContext.RUnlock()
	return calls
}

// DescribeDBInstancesRequest calls DescribeDBInstancesRequestFunc.
func (mock *rdsClientMock) DescribeDBInstancesRequest(in1 *rds.DescribeDBInstancesInput) (*request.Request, *rds.DescribeDBInstancesOutput) {
	if mock.DescribeDBInstancesRequestFunc == nil {
		panic("rdsClientMock.DescribeDBInstancesRequestFunc: method is nil but rdsClient.DescribeDBInstancesRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBInstancesInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBInstancesRequest.Lock()
	mock.calls.DescribeDBInstancesRequest = append(mock.calls.DescribeDBInstancesRequest, callInfo)
	lockrdsClientMockDescribeDBInstancesRequest.Unlock()
	return mock.DescribeDBInstancesRequestFunc(in1)
}

// DescribeDBInstancesRequestCalls gets all the calls that were made to DescribeDBInstancesRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBInstancesRequestCalls())
func (mock *rdsClientMock) DescribeDBInstancesRequestCalls() []struct {
	In1 *rds.DescribeDBInstancesInput
} {
	var calls []struct {
		In1 *rds.DescribeDBInstancesInput
	}
	lockrdsClientMockDescribeDBInstancesRequest.RLock()
	calls = mock.calls.DescribeDBInstancesRequest
	lockrdsClientMockDescribeDBInstancesRequest.RUnlock()
	return calls
}

// DescribeDBInstancesWithContext calls DescribeDBInstancesWithContextFunc.
func (mock *rdsClientMock) DescribeDBInstancesWithContext(in1 context.Context, in2 *rds.DescribeDBInstancesInput, in3 ...request.Option) (*rds.DescribeDBInstancesOutput, error) {
	if mock.DescribeDBInstancesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBInstancesWithContextFunc: method is nil but rdsClient.DescribeDBInstancesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBInstancesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeDBInstancesWithContext.Lock()
	mock.calls.DescribeDBInstancesWithContext = append(mock.calls.DescribeDBInstancesWithContext, callInfo)
	lockrdsClientMockDescribeDBInstancesWithContext.Unlock()
	return mock.DescribeDBInstancesWithContextFunc(in1, in2, in3...)
}

// DescribeDBInstancesWithContextCalls gets all the calls that were made to DescribeDBInstancesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBInstancesWithContextCalls())
func (mock *rdsClientMock) DescribeDBInstancesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBInstancesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBInstancesInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeDBInstancesWithContext.RLock()
	calls = mock.calls.DescribeDBInstancesWithContext
	lockrdsClientMockDescribeDBInstancesWithContext.RUnlock()
	return calls
}

// DescribeDBLogFiles calls DescribeDBLogFilesFunc.
func (mock *rdsClientMock) DescribeDBLogFiles(in1 *rds.DescribeDBLogFilesInput) (*rds.DescribeDBLogFilesOutput, error) {
	if mock.DescribeDBLogFilesFunc == nil {
		panic("rdsClientMock.DescribeDBLogFilesFunc: method is nil but rdsClient.DescribeDBLogFiles was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBLogFilesInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBLogFiles.Lock()
	mock.calls.DescribeDBLogFiles = append(mock.calls.DescribeDBLogFiles, callInfo)
	lockrdsClientMockDescribeDBLogFiles.Unlock()
	return mock.DescribeDBLogFilesFunc(in1)
}

// DescribeDBLogFilesCalls gets all the calls that were made to DescribeDBLogFiles.
// Check the length with:
//     len(mockedrdsClient.DescribeDBLogFilesCalls())
func (mock *rdsClientMock) DescribeDBLogFilesCalls() []struct {
	In1 *rds.DescribeDBLogFilesInput
} {
	var calls []struct {
		In1 *rds.DescribeDBLogFilesInput
	}
	lockrdsClientMockDescribeDBLogFiles.RLock()
	calls = mock.calls.DescribeDBLogFiles
	lockrdsClientMockDescribeDBLogFiles.RUnlock()
	return calls
}

// DescribeDBLogFilesPages calls DescribeDBLogFilesPagesFunc.
func (mock *rdsClientMock) DescribeDBLogFilesPages(in1 *rds.DescribeDBLogFilesInput, in2 func(*rds.DescribeDBLogFilesOutput, bool) bool) error {
	if mock.DescribeDBLogFilesPagesFunc == nil {
		panic("rdsClientMock.DescribeDBLogFilesPagesFunc: method is nil but rdsClient.DescribeDBLogFilesPages was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBLogFilesInput
		In2 func(*rds.DescribeDBLogFilesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockrdsClientMockDescribeDBLogFilesPages.Lock()
	mock.calls.DescribeDBLogFilesPages = append(mock.calls.DescribeDBLogFilesPages, callInfo)
	lockrdsClientMockDescribeDBLogFilesPages.Unlock()
	return mock.DescribeDBLogFilesPagesFunc(in1, in2)
}

// DescribeDBLogFilesPagesCalls gets all the calls that were made to DescribeDBLogFilesPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBLogFilesPagesCalls())
func (mock *rdsClientMock) DescribeDBLogFilesPagesCalls() []struct {
	In1 *rds.DescribeDBLogFilesInput
	In2 func(*rds.DescribeDBLogFilesOutput, bool) bool
} {
	var calls []struct {
		In1 *rds.DescribeDBLogFilesInput
		In2 func(*rds.DescribeDBLogFilesOutput, bool) bool
	}
	lockrdsClientMockDescribeDBLogFilesPages.RLock()
	calls = mock.calls.DescribeDBLogFilesPages
	lockrdsClientMockDescribeDBLogFilesPages.RUnlock()
	return calls
}

// DescribeDBLogFilesPagesWithContext calls DescribeDBLogFilesPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBLogFilesPagesWithContext(in1 context.Context, in2 *rds.DescribeDBLogFilesInput, in3 func(*rds.DescribeDBLogFilesOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeDBLogFilesPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBLogFilesPagesWithContextFunc: method is nil but rdsClient.DescribeDBLogFilesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBLogFilesInput
		In3 func(*rds.DescribeDBLogFilesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockrdsClientMockDescribeDBLogFilesPagesWithContext.Lock()
	mock.calls.DescribeDBLogFilesPagesWithContext = append(mock.calls.DescribeDBLogFilesPagesWithContext, callInfo)
	lockrdsClientMockDescribeDBLogFilesPagesWithContext.Unlock()
	return mock.DescribeDBLogFilesPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeDBLogFilesPagesWithContextCalls gets all the calls that were made to DescribeDBLogFilesPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBLogFilesPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBLogFilesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBLogFilesInput
	In3 func(*rds.DescribeDBLogFilesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBLogFilesInput
		In3 func(*rds.DescribeDBLogFilesOutput, bool) bool
		In4 []request.Option
	}
	lockrdsClientMockDescribeDBLogFilesPagesWithContext.RLock()
	calls = mock.calls.DescribeDBLogFilesPagesWithContext
	lockrdsClientMockDescribeDBLogFilesPagesWithContext.RUnlock()
	return calls
}

// DescribeDBLogFilesRequest calls DescribeDBLogFilesRequestFunc.
func (mock *rdsClientMock) DescribeDBLogFilesRequest(in1 *rds.DescribeDBLogFilesInput) (*request.Request, *rds.DescribeDBLogFilesOutput) {
	if mock.DescribeDBLogFilesRequestFunc == nil {
		panic("rdsClientMock.DescribeDBLogFilesRequestFunc: method is nil but rdsClient.DescribeDBLogFilesRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBLogFilesInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBLogFilesRequest.Lock()
	mock.calls.DescribeDBLogFilesRequest = append(mock.calls.DescribeDBLogFilesRequest, callInfo)
	lockrdsClientMockDescribeDBLogFilesRequest.Unlock()
	return mock.DescribeDBLogFilesRequestFunc(in1)
}

// DescribeDBLogFilesRequestCalls gets all the calls that were made to DescribeDBLogFilesRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBLogFilesRequestCalls())
func (mock *rdsClientMock) DescribeDBLogFilesRequestCalls() []struct {
	In1 *rds.DescribeDBLogFilesInput
} {
	var calls []struct {
		In1 *rds.DescribeDBLogFilesInput
	}
	lockrdsClientMockDescribeDBLogFilesRequest.RLock()
	calls = mock.calls.DescribeDBLogFilesRequest
	lockrdsClientMockDescribeDBLogFilesRequest.RUnlock()
	return calls
}

// DescribeDBLogFilesWithContext calls DescribeDBLogFilesWithContextFunc.
func (mock *rdsClientMock) DescribeDBLogFilesWithContext(in1 context.Context, in2 *rds.DescribeDBLogFilesInput, in3 ...request.Option) (*rds.DescribeDBLogFilesOutput, error) {
	if mock.DescribeDBLogFilesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBLogFilesWithContextFunc: method is nil but rdsClient.DescribeDBLogFilesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBLogFilesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeDBLogFilesWithContext.Lock()
	mock.calls.DescribeDBLogFilesWithContext = append(mock.calls.DescribeDBLogFilesWithContext, callInfo)
	lockrdsClientMockDescribeDBLogFilesWithContext.Unlock()
	return mock.DescribeDBLogFilesWithContextFunc(in1, in2, in3...)
}

// DescribeDBLogFilesWithContextCalls gets all the calls that were made to DescribeDBLogFilesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBLogFilesWithContextCalls())
func (mock *rdsClientMock) DescribeDBLogFilesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBLogFilesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBLogFilesInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeDBLogFilesWithContext.RLock()
	calls = mock.calls.DescribeDBLogFilesWithContext
	lockrdsClientMockDescribeDBLogFilesWithContext.RUnlock()
	return calls
}

// DescribeDBParameterGroups calls DescribeDBParameterGroupsFunc.
func (mock *rdsClientMock) DescribeDBParameterGroups(in1 *rds.DescribeDBParameterGroupsInput) (*rds.DescribeDBParameterGroupsOutput, error) {
	if mock.DescribeDBParameterGroupsFunc == nil {
		panic("rdsClientMock.DescribeDBParameterGroupsFunc: method is nil but rdsClient.DescribeDBParameterGroups was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBParameterGroupsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBParameterGroups.Lock()
	mock.calls.DescribeDBParameterGroups = append(mock.calls.DescribeDBParameterGroups, callInfo)
	lockrdsClientMockDescribeDBParameterGroups.Unlock()
	return mock.DescribeDBParameterGroupsFunc(in1)
}

// DescribeDBParameterGroupsCalls gets all the calls that were made to DescribeDBParameterGroups.
// Check the length with:
//     len(mockedrdsClient.DescribeDBParameterGroupsCalls())
func (mock *rdsClientMock) DescribeDBParameterGroupsCalls() []struct {
	In1 *rds.DescribeDBParameterGroupsInput
} {
	var calls []struct {
		In1 *rds.DescribeDBParameterGroupsInput
	}
	lockrdsClientMockDescribeDBParameterGroups.RLock()
	calls = mock.calls.DescribeDBParameterGroups
	lockrdsClientMockDescribeDBParameterGroups.RUnlock()
	return calls
}

// DescribeDBParameterGroupsPages calls DescribeDBParameterGroupsPagesFunc.
func (mock *rdsClientMock) DescribeDBParameterGroupsPages(in1 *rds.DescribeDBParameterGroupsInput, in2 func(*rds.DescribeDBParameterGroupsOutput, bool) bool) error {
	if mock.DescribeDBParameterGroupsPagesFunc == nil {
		panic("rdsClientMock.DescribeDBParameterGroupsPagesFunc: method is nil but rdsClient.DescribeDBParameterGroupsPages was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBParameterGroupsInput
		In2 func(*rds.DescribeDBParameterGroupsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockrdsClientMockDescribeDBParameterGroupsPages.Lock()
	mock.calls.DescribeDBParameterGroupsPages = append(mock.calls.DescribeDBParameterGroupsPages, callInfo)
	lockrdsClientMockDescribeDBParameterGroupsPages.Unlock()
	return mock.DescribeDBParameterGroupsPagesFunc(in1, in2)
}

// DescribeDBParameterGroupsPagesCalls gets all the calls that were made to DescribeDBParameterGroupsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBParameterGroupsPagesCalls())
func (mock *rdsClientMock) DescribeDBParameterGroupsPagesCalls() []struct {
	In1 *rds.DescribeDBParameterGroupsInput
	In2 func(*rds.DescribeDBParameterGroupsOutput, bool) bool
} {
	var calls []struct {
		In1 *rds.DescribeDBParameterGroupsInput
		In2 func(*rds.DescribeDBParameterGroupsOutput, bool) bool
	}
	lockrdsClientMockDescribeDBParameterGroupsPages.RLock()
	calls = mock.calls.DescribeDBParameterGroupsPages
	lockrdsClientMockDescribeDBParameterGroupsPages.RUnlock()
	return calls
}

// DescribeDBParameterGroupsPagesWithContext calls DescribeDBParameterGroupsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBParameterGroupsPagesWithContext(in1 context.Context, in2 *rds.DescribeDBParameterGroupsInput, in3 func(*rds.DescribeDBParameterGroupsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeDBParameterGroupsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBParameterGroupsPagesWithContextFunc: method is nil but rdsClient.DescribeDBParameterGroupsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBParameterGroupsInput
		In3 func(*rds.DescribeDBParameterGroupsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockrdsClientMockDescribeDBParameterGroupsPagesWithContext.Lock()
	mock.calls.DescribeDBParameterGroupsPagesWithContext = append(mock.calls.DescribeDBParameterGroupsPagesWithContext, callInfo)
	lockrdsClientMockDescribeDBParameterGroupsPagesWithContext.Unlock()
	return mock.DescribeDBParameterGroupsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeDBParameterGroupsPagesWithContextCalls gets all the calls that were made to DescribeDBParameterGroupsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBParameterGroupsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBParameterGroupsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBParameterGroupsInput
	In3 func(*rds.DescribeDBParameterGroupsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBParameterGroupsInput
		In3 func(*rds.DescribeDBParameterGroupsOutput, bool) bool
		In4 []request.Option
	}
	lockrdsClientMockDescribeDBParameterGroupsPagesWithContext.RLock()
	calls = mock.calls.DescribeDBParameterGroupsPagesWithContext
	lockrdsClientMockDescribeDBParameterGroupsPagesWithContext.RUnlock()
	return calls
}

// DescribeDBParameterGroupsRequest calls DescribeDBParameterGroupsRequestFunc.
func (mock *rdsClientMock) DescribeDBParameterGroupsRequest(in1 *rds.DescribeDBParameterGroupsInput) (*request.Request, *rds.DescribeDBParameterGroupsOutput) {
	if mock.DescribeDBParameterGroupsRequestFunc == nil {
		panic("rdsClientMock.DescribeDBParameterGroupsRequestFunc: method is nil but rdsClient.DescribeDBParameterGroupsRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBParameterGroupsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBParameterGroupsRequest.Lock()
	mock.calls.DescribeDBParameterGroupsRequest = append(mock.calls.DescribeDBParameterGroupsRequest, callInfo)
	lockrdsClientMockDescribeDBParameterGroupsRequest.Unlock()
	return mock.DescribeDBParameterGroupsRequestFunc(in1)
}

// DescribeDBParameterGroupsRequestCalls gets all the calls that were made to DescribeDBParameterGroupsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBParameterGroupsRequestCalls())
func (mock *rdsClientMock) DescribeDBParameterGroupsRequestCalls() []struct {
	In1 *rds.DescribeDBParameterGroupsInput
} {
	var calls []struct {
		In1 *rds.DescribeDBParameterGroupsInput
	}
	lockrdsClientMockDescribeDBParameterGroupsRequest.RLock()
	calls = mock.calls.DescribeDBParameterGroupsRequest
	lockrdsClientMockDescribeDBParameterGroupsRequest.RUnlock()
	return calls
}

// DescribeDBParameterGroupsWithContext calls DescribeDBParameterGroupsWithContextFunc.
func (mock *rdsClientMock) DescribeDBParameterGroupsWithContext(in1 context.Context, in2 *rds.DescribeDBParameterGroupsInput, in3 ...request.Option) (*rds.DescribeDBParameterGroupsOutput, error) {
	if mock.DescribeDBParameterGroupsWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBParameterGroupsWithContextFunc: method is nil but rdsClient.DescribeDBParameterGroupsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBParameterGroupsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeDBParameterGroupsWithContext.Lock()
	mock.calls.DescribeDBParameterGroupsWithContext = append(mock.calls.DescribeDBParameterGroupsWithContext, callInfo)
	lockrdsClientMockDescribeDBParameterGroupsWithContext.Unlock()
	return mock.DescribeDBParameterGroupsWithContextFunc(in1, in2, in3...)
}

// DescribeDBParameterGroupsWithContextCalls gets all the calls that were made to DescribeDBParameterGroupsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBParameterGroupsWithContextCalls())
func (mock *rdsClientMock) DescribeDBParameterGroupsWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBParameterGroupsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBParameterGroupsInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeDBParameterGroupsWithContext.RLock()
	calls = mock.calls.DescribeDBParameterGroupsWithContext
	lockrdsClientMockDescribeDBParameterGroupsWithContext.RUnlock()
	return calls
}

// DescribeDBParameters calls DescribeDBParametersFunc.
func (mock *rdsClientMock) DescribeDBParameters(in1 *rds.DescribeDBParametersInput) (*rds.DescribeDBParametersOutput, error) {
	if mock.DescribeDBParametersFunc == nil {
		panic("rdsClientMock.DescribeDBParametersFunc: method is nil but rdsClient.DescribeDBParameters was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBParametersInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBParameters.Lock()
	mock.calls.DescribeDBParameters = append(mock.calls.DescribeDBParameters, callInfo)
	lockrdsClientMockDescribeDBParameters.Unlock()
	return mock.DescribeDBParametersFunc(in1)
}

// DescribeDBParametersCalls gets all the calls that were made to DescribeDBParameters.
// Check the length with:
//     len(mockedrdsClient.DescribeDBParametersCalls())
func (mock *rdsClientMock) DescribeDBParametersCalls() []struct {
	In1 *rds.DescribeDBParametersInput
} {
	var calls []struct {
		In1 *rds.DescribeDBParametersInput
	}
	lockrdsClientMockDescribeDBParameters.RLock()
	calls = mock.calls.DescribeDBParameters
	lockrdsClientMockDescribeDBParameters.RUnlock()
	return calls
}

// DescribeDBParametersPages calls DescribeDBParametersPagesFunc.
func (mock *rdsClientMock) DescribeDBParametersPages(in1 *rds.DescribeDBParametersInput, in2 func(*rds.DescribeDBParametersOutput, bool) bool) error {
	if mock.DescribeDBParametersPagesFunc == nil {
		panic("rdsClientMock.DescribeDBParametersPagesFunc: method is nil but rdsClient.DescribeDBParametersPages was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBParametersInput
		In2 func(*rds.DescribeDBParametersOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockrdsClientMockDescribeDBParametersPages.Lock()
	mock.calls.DescribeDBParametersPages = append(mock.calls.DescribeDBParametersPages, callInfo)
	lockrdsClientMockDescribeDBParametersPages.Unlock()
	return mock.DescribeDBParametersPagesFunc(in1, in2)
}

// DescribeDBParametersPagesCalls gets all the calls that were made to DescribeDBParametersPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBParametersPagesCalls())
func (mock *rdsClientMock) DescribeDBParametersPagesCalls() []struct {
	In1 *rds.DescribeDBParametersInput
	In2 func(*rds.DescribeDBParametersOutput, bool) bool
} {
	var calls []struct {
		In1 *rds.DescribeDBParametersInput
		In2 func(*rds.DescribeDBParametersOutput, bool) bool
	}
	lockrdsClientMockDescribeDBParametersPages.RLock()
	calls = mock.calls.DescribeDBParametersPages
	lockrdsClientMockDescribeDBParametersPages.RUnlock()
	return calls
}

// DescribeDBParametersPagesWithContext calls DescribeDBParametersPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBParametersPagesWithContext(in1 context.Context, in2 *rds.DescribeDBParametersInput, in3 func(*rds.DescribeDBParametersOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeDBParametersPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBParametersPagesWithContextFunc: method is nil but rdsClient.DescribeDBParametersPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBParametersInput
		In3 func(*rds.DescribeDBParametersOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockrdsClientMockDescribeDBParametersPagesWithContext.Lock()
	mock.calls.DescribeDBParametersPagesWithContext = append(mock.calls.DescribeDBParametersPagesWithContext, callInfo)
	lockrdsClientMockDescribeDBParametersPagesWithContext.Unlock()
	return mock.DescribeDBParametersPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeDBParametersPagesWithContextCalls gets all the calls that were made to DescribeDBParametersPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBParametersPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBParametersPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBParametersInput
	In3 func(*rds.DescribeDBParametersOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBParametersInput
		In3 func(*rds.DescribeDBParametersOutput, bool) bool
		In4 []request.Option
	}
	lockrdsClientMockDescribeDBParametersPagesWithContext.RLock()
	calls = mock.calls.DescribeDBParametersPagesWithContext
	lockrdsClientMockDescribeDBParametersPagesWithContext.RUnlock()
	return calls
}

// DescribeDBParametersRequest calls DescribeDBParametersRequestFunc.
func (mock *rdsClientMock) DescribeDBParametersRequest(in1 *rds.DescribeDBParametersInput) (*request.Request, *rds.DescribeDBParametersOutput) {
	if mock.DescribeDBParametersRequestFunc == nil {
		panic("rdsClientMock.DescribeDBParametersRequestFunc: method is nil but rdsClient.DescribeDBParametersRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBParametersInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBParametersRequest.Lock()
	mock.calls.DescribeDBParametersRequest = append(mock.calls.DescribeDBParametersRequest, callInfo)
	lockrdsClientMockDescribeDBParametersRequest.Unlock()
	return mock.DescribeDBParametersRequestFunc(in1)
}

// DescribeDBParametersRequestCalls gets all the calls that were made to DescribeDBParametersRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBParametersRequestCalls())
func (mock *rdsClientMock) DescribeDBParametersRequestCalls() []struct {
	In1 *rds.DescribeDBParametersInput
} {
	var calls []struct {
		In1 *rds.DescribeDBParametersInput
	}
	lockrdsClientMockDescribeDBParametersRequest.RLock()
	calls = mock.calls.DescribeDBParametersRequest
	lockrdsClientMockDescribeDBParametersRequest.RUnlock()
	return calls
}

// DescribeDBParametersWithContext calls DescribeDBParametersWithContextFunc.
func (mock *rdsClientMock) DescribeDBParametersWithContext(in1 context.Context, in2 *rds.DescribeDBParametersInput, in3 ...request.Option) (*rds.DescribeDBParametersOutput, error) {
	if mock.DescribeDBParametersWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBParametersWithContextFunc: method is nil but rdsClient.DescribeDBParametersWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBParametersInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeDBParametersWithContext.Lock()
	mock.calls.DescribeDBParametersWithContext = append(mock.calls.DescribeDBParametersWithContext, callInfo)
	lockrdsClientMockDescribeDBParametersWithContext.Unlock()
	return mock.DescribeDBParametersWithContextFunc(in1, in2, in3...)
}

// DescribeDBParametersWithContextCalls gets all the calls that were made to DescribeDBParametersWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBParametersWithContextCalls())
func (mock *rdsClientMock) DescribeDBParametersWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBParametersInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBParametersInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeDBParametersWithContext.RLock()
	calls = mock.calls.DescribeDBParametersWithContext
	lockrdsClientMockDescribeDBParametersWithContext.RUnlock()
	return calls
}

// DescribeDBProxies calls DescribeDBProxiesFunc.
func (mock *rdsClientMock) DescribeDBProxies(in1 *rds.DescribeDBProxiesInput) (*rds.DescribeDBProxiesOutput, error) {
	if mock.DescribeDBProxiesFunc == nil {
		panic("rdsClientMock.DescribeDBProxiesFunc: method is nil but rdsClient.DescribeDBProxies was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBProxiesInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBProxies.Lock()
	mock.calls.DescribeDBProxies = append(mock.calls.DescribeDBProxies, callInfo)
	lockrdsClientMockDescribeDBProxies.Unlock()
	return mock.DescribeDBProxiesFunc(in1)
}

// DescribeDBProxiesCalls gets all the calls that were made to DescribeDBProxies.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxiesCalls())
func (mock *rdsClientMock) DescribeDBProxiesCalls() []struct {
	In1 *rds.DescribeDBProxiesInput
} {
	var calls []struct {
		In1 *rds.DescribeDBProxiesInput
	}
	lockrdsClientMockDescribeDBProxies.RLock()
	calls = mock.calls.DescribeDBProxies
	lockrdsClientMockDescribeDBProxies.RUnlock()
	return calls
}

// DescribeDBProxiesPages calls DescribeDBProxiesPagesFunc.
func (mock *rdsClientMock) DescribeDBProxiesPages(in1 *rds.DescribeDBProxiesInput, in2 func(*rds.DescribeDBProxiesOutput, bool) bool) error {
	if mock.DescribeDBProxiesPagesFunc == nil {
		panic("rdsClientMock.DescribeDBProxiesPagesFunc: method is nil but rdsClient.DescribeDBProxiesPages was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBProxiesInput
		In2 func(*rds.DescribeDBProxiesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockrdsClientMockDescribeDBProxiesPages.Lock()
	mock.calls.DescribeDBProxiesPages = append(mock.calls.DescribeDBProxiesPages, callInfo)
	lockrdsClientMockDescribeDBProxiesPages.Unlock()
	return mock.DescribeDBProxiesPagesFunc(in1, in2)
}

// DescribeDBProxiesPagesCalls gets all the calls that were made to DescribeDBProxiesPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxiesPagesCalls())
func (mock *rdsClientMock) DescribeDBProxiesPagesCalls() []struct {
	In1 *rds.DescribeDBProxiesInput
	In2 func(*rds.DescribeDBProxiesOutput, bool) bool
} {
	var calls []struct {
		In1 *rds.DescribeDBProxiesInput
		In2 func(*rds.DescribeDBProxiesOutput, bool) bool
	}
	lockrdsClientMockDescribeDBProxiesPages.RLock()
	calls = mock.calls.DescribeDBProxiesPages
	lockrdsClientMockDescribeDBProxiesPages.RUnlock()
	return calls
}

// DescribeDBProxiesPagesWithContext calls DescribeDBProxiesPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBProxiesPagesWithContext(in1 context.Context, in2 *rds.DescribeDBProxiesInput, in3 func(*rds.DescribeDBProxiesOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeDBProxiesPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBProxiesPagesWithContextFunc: method is nil but rdsClient.DescribeDBProxiesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBProxiesInput
		In3 func(*rds.DescribeDBProxiesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockrdsClientMockDescribeDBProxiesPagesWithContext.Lock()
	mock.calls.DescribeDBProxiesPagesWithContext = append(mock.calls.DescribeDBProxiesPagesWithContext, callInfo)
	lockrdsClientMockDescribeDBProxiesPagesWithContext.Unlock()
	return mock.DescribeDBProxiesPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeDBProxiesPagesWithContextCalls gets all the calls that were made to DescribeDBProxiesPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxiesPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBProxiesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBProxiesInput
	In3 func(*rds.DescribeDBProxiesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBProxiesInput
		In3 func(*rds.DescribeDBProxiesOutput, bool) bool
		In4 []request.Option
	}
	lockrdsClientMockDescribeDBProxiesPagesWithContext.RLock()
	calls = mock.calls.DescribeDBProxiesPagesWithContext
	lockrdsClientMockDescribeDBProxiesPagesWithContext.RUnlock()
	return calls
}

// DescribeDBProxiesRequest calls DescribeDBProxiesRequestFunc.
func (mock *rdsClientMock) DescribeDBProxiesRequest(in1 *rds.DescribeDBProxiesInput) (*request.Request, *rds.DescribeDBProxiesOutput) {
	if mock.DescribeDBProxiesRequestFunc == nil {
		panic("rdsClientMock.DescribeDBProxiesRequestFunc: method is nil but rdsClient.DescribeDBProxiesRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBProxiesInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBProxiesRequest.Lock()
	mock.calls.DescribeDBProxiesRequest = append(mock.calls.DescribeDBProxiesRequest, callInfo)
	lockrdsClientMockDescribeDBProxiesRequest.Unlock()
	return mock.DescribeDBProxiesRequestFunc(in1)
}

// DescribeDBProxiesRequestCalls gets all the calls that were made to DescribeDBProxiesRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxiesRequestCalls())
func (mock *rdsClientMock) DescribeDBProxiesRequestCalls() []struct {
	In1 *rds.DescribeDBProxiesInput
} {
	var calls []struct {
		In1 *rds.DescribeDBProxiesInput
	}
	lockrdsClientMockDescribeDBProxiesRequest.RLock()
	calls = mock.calls.DescribeDBProxiesRequest
	lockrdsClientMockDescribeDBProxiesRequest.RUnlock()
	return calls
}

// DescribeDBProxiesWithContext calls DescribeDBProxiesWithContextFunc.
func (mock *rdsClientMock) DescribeDBProxiesWithContext(in1 context.Context, in2 *rds.DescribeDBProxiesInput, in3 ...request.Option) (*rds.DescribeDBProxiesOutput, error) {
	if mock.DescribeDBProxiesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBProxiesWithContextFunc: method is nil but rdsClient.DescribeDBProxiesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBProxiesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeDBProxiesWithContext.Lock()
	mock.calls.DescribeDBProxiesWithContext = append(mock.calls.DescribeDBProxiesWithContext, callInfo)
	lockrdsClientMockDescribeDBProxiesWithContext.Unlock()
	return mock.DescribeDBProxiesWithContextFunc(in1, in2, in3...)
}

// DescribeDBProxiesWithContextCalls gets all the calls that were made to DescribeDBProxiesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxiesWithContextCalls())
func (mock *rdsClientMock) DescribeDBProxiesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBProxiesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBProxiesInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeDBProxiesWithContext.RLock()
	calls = mock.calls.DescribeDBProxiesWithContext
	lockrdsClientMockDescribeDBProxiesWithContext.RUnlock()
	return calls
}

// DescribeDBProxyTargetGroups calls DescribeDBProxyTargetGroupsFunc.
func (mock *rdsClientMock) DescribeDBProxyTargetGroups(in1 *rds.DescribeDBProxyTargetGroupsInput) (*rds.DescribeDBProxyTargetGroupsOutput, error) {
	if mock.DescribeDBProxyTargetGroupsFunc == nil {
		panic("rdsClientMock.DescribeDBProxyTargetGroupsFunc: method is nil but rdsClient.DescribeDBProxyTargetGroups was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBProxyTargetGroupsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBProxyTargetGroups.Lock()
	mock.calls.DescribeDBProxyTargetGroups = append(mock.calls.DescribeDBProxyTargetGroups, callInfo)
	lockrdsClientMockDescribeDBProxyTargetGroups.Unlock()
	return mock.DescribeDBProxyTargetGroupsFunc(in1)
}

// DescribeDBProxyTargetGroupsCalls gets all the calls that were made to DescribeDBProxyTargetGroups.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxyTargetGroupsCalls())
func (mock *rdsClientMock) DescribeDBProxyTargetGroupsCalls() []struct {
	In1 *rds.DescribeDBProxyTargetGroupsInput
} {
	var calls []struct {
		In1 *rds.DescribeDBProxyTargetGroupsInput
	}
	lockrdsClientMockDescribeDBProxyTargetGroups.RLock()
	calls = mock.calls.DescribeDBProxyTargetGroups
	lockrdsClientMockDescribeDBProxyTargetGroups.RUnlock()
	return calls
}

// DescribeDBProxyTargetGroupsPages calls DescribeDBProxyTargetGroupsPagesFunc.
func (mock *rdsClientMock) DescribeDBProxyTargetGroupsPages(in1 *rds.DescribeDBProxyTargetGroupsInput, in2 func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool) error {
	if mock.DescribeDBProxyTargetGroupsPagesFunc == nil {
		panic("rdsClientMock.DescribeDBProxyTargetGroupsPagesFunc: method is nil but rdsClient.DescribeDBProxyTargetGroupsPages was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBProxyTargetGroupsInput
		In2 func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockrdsClientMockDescribeDBProxyTargetGroupsPages.Lock()
	mock.calls.DescribeDBProxyTargetGroupsPages = append(mock.calls.DescribeDBProxyTargetGroupsPages, callInfo)
	lockrdsClientMockDescribeDBProxyTargetGroupsPages.Unlock()
	return mock.DescribeDBProxyTargetGroupsPagesFunc(in1, in2)
}

// DescribeDBProxyTargetGroupsPagesCalls gets all the calls that were made to DescribeDBProxyTargetGroupsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxyTargetGroupsPagesCalls())
func (mock *rdsClientMock) DescribeDBProxyTargetGroupsPagesCalls() []struct {
	In1 *rds.DescribeDBProxyTargetGroupsInput
	In2 func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool
} {
	var calls []struct {
		In1 *rds.DescribeDBProxyTargetGroupsInput
		In2 func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool
	}
	lockrdsClientMockDescribeDBProxyTargetGroupsPages.RLock()
	calls = mock.calls.DescribeDBProxyTargetGroupsPages
	lockrdsClientMockDescribeDBProxyTargetGroupsPages.RUnlock()
	return calls
}

// DescribeDBProxyTargetGroupsPagesWithContext calls DescribeDBProxyTargetGroupsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBProxyTargetGroupsPagesWithContext(in1 context.Context, in2 *rds.DescribeDBProxyTargetGroupsInput, in3 func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeDBProxyTargetGroupsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBProxyTargetGroupsPagesWithContextFunc: method is nil but rdsClient.DescribeDBProxyTargetGroupsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBProxyTargetGroupsInput
		In3 func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockrdsClientMockDescribeDBProxyTargetGroupsPagesWithContext.Lock()
	mock.calls.DescribeDBProxyTargetGroupsPagesWithContext = append(mock.calls.DescribeDBProxyTargetGroupsPagesWithContext, callInfo)
	lockrdsClientMockDescribeDBProxyTargetGroupsPagesWithContext.Unlock()
	return mock.DescribeDBProxyTargetGroupsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeDBProxyTargetGroupsPagesWithContextCalls gets all the calls that were made to DescribeDBProxyTargetGroupsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxyTargetGroupsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBProxyTargetGroupsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBProxyTargetGroupsInput
	In3 func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBProxyTargetGroupsInput
		In3 func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool
		In4 []request.Option
	}
	lockrdsClientMockDescribeDBProxyTargetGroupsPagesWithContext.RLock()
	calls = mock.calls.DescribeDBProxyTargetGroupsPagesWithContext
	lockrdsClientMockDescribeDBProxyTargetGroupsPagesWithContext.RUnlock()
	return calls
}

// DescribeDBProxyTargetGroupsRequest calls DescribeDBProxyTargetGroupsRequestFunc.
func (mock *rdsClientMock) DescribeDBProxyTargetGroupsRequest(in1 *rds.DescribeDBProxyTargetGroupsInput) (*request.Request, *rds.DescribeDBProxyTargetGroupsOutput) {
	if mock.DescribeDBProxyTargetGroupsRequestFunc == nil {
		panic("rdsClientMock.DescribeDBProxyTargetGroupsRequestFunc: method is nil but rdsClient.DescribeDBProxyTargetGroupsRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBProxyTargetGroupsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBProxyTargetGroupsRequest.Lock()
	mock.calls.DescribeDBProxyTargetGroupsRequest = append(mock.calls.DescribeDBProxyTargetGroupsRequest, callInfo)
	lockrdsClientMockDescribeDBProxyTargetGroupsRequest.Unlock()
	return mock.DescribeDBProxyTargetGroupsRequestFunc(in1)
}

// DescribeDBProxyTargetGroupsRequestCalls gets all the calls that were made to DescribeDBProxyTargetGroupsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxyTargetGroupsRequestCalls())
func (mock *rdsClientMock) DescribeDBProxyTargetGroupsRequestCalls() []struct {
	In1 *rds.DescribeDBProxyTargetGroupsInput
} {
	var calls []struct {
		In1 *rds.DescribeDBProxyTargetGroupsInput
	}
	lockrdsClientMockDescribeDBProxyTargetGroupsRequest.RLock()
	calls = mock.calls.DescribeDBProxyTargetGroupsRequest
	lockrdsClientMockDescribeDBProxyTargetGroupsRequest.RUnlock()
	return calls
}

// DescribeDBProxyTargetGroupsWithContext calls DescribeDBProxyTargetGroupsWithContextFunc.
func (mock *rdsClientMock) DescribeDBProxyTargetGroupsWithContext(in1 context.Context, in2 *rds.DescribeDBProxyTargetGroupsInput, in3 ...request.Option) (*rds.DescribeDBProxyTargetGroupsOutput, error) {
	if mock.DescribeDBProxyTargetGroupsWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBProxyTargetGroupsWithContextFunc: method is nil but rdsClient.DescribeDBProxyTargetGroupsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBProxyTargetGroupsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeDBProxyTargetGroupsWithContext.Lock()
	mock.calls.DescribeDBProxyTargetGroupsWithContext = append(mock.calls.DescribeDBProxyTargetGroupsWithContext, callInfo)
	lockrdsClientMockDescribeDBProxyTargetGroupsWithContext.Unlock()
	return mock.DescribeDBProxyTargetGroupsWithContextFunc(in1, in2, in3...)
}

// DescribeDBProxyTargetGroupsWithContextCalls gets all the calls that were made to DescribeDBProxyTargetGroupsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxyTargetGroupsWithContextCalls())
func (mock *rdsClientMock) DescribeDBProxyTargetGroupsWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBProxyTargetGroupsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBProxyTargetGroupsInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeDBProxyTargetGroupsWithContext.RLock()
	calls = mock.calls.DescribeDBProxyTargetGroupsWithContext
	lockrdsClientMockDescribeDBProxyTargetGroupsWithContext.RUnlock()
	return calls
}

// DescribeDBProxyTargets calls DescribeDBProxyTargetsFunc.
func (mock *rdsClientMock) DescribeDBProxyTargets(in1 *rds.DescribeDBProxyTargetsInput) (*rds.DescribeDBProxyTargetsOutput, error) {
	if mock.DescribeDBProxyTargetsFunc == nil {
		panic("rdsClientMock.DescribeDBProxyTargetsFunc: method is nil but rdsClient.DescribeDBProxyTargets was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBProxyTargetsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBProxyTargets.Lock()
	mock.calls.DescribeDBProxyTargets = append(mock.calls.DescribeDBProxyTargets, callInfo)
	lockrdsClientMockDescribeDBProxyTargets.Unlock()
	return mock.DescribeDBProxyTargetsFunc(in1)
}

// DescribeDBProxyTargetsCalls gets all the calls that were made to DescribeDBProxyTargets.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxyTargetsCalls())
func (mock *rdsClientMock) DescribeDBProxyTargetsCalls() []struct {
	In1 *rds.DescribeDBProxyTargetsInput
} {
	var calls []struct {
		In1 *rds.DescribeDBProxyTargetsInput
	}
	lockrdsClientMockDescribeDBProxyTargets.RLock()
	calls = mock.calls.DescribeDBProxyTargets
	lockrdsClientMockDescribeDBProxyTargets.RUnlock()
	return calls
}

// DescribeDBProxyTargetsPages calls DescribeDBProxyTargetsPagesFunc.
func (mock *rdsClientMock) DescribeDBProxyTargetsPages(in1 *rds.DescribeDBProxyTargetsInput, in2 func(*rds.DescribeDBProxyTargetsOutput, bool) bool) error {
	if mock.DescribeDBProxyTargetsPagesFunc == nil {
		panic("rdsClientMock.DescribeDBProxyTargetsPagesFunc: method is nil but rdsClient.DescribeDBProxyTargetsPages was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBProxyTargetsInput
		In2 func(*rds.DescribeDBProxyTargetsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockrdsClientMockDescribeDBProxyTargetsPages.Lock()
	mock.calls.DescribeDBProxyTargetsPages = append(mock.calls.DescribeDBProxyTargetsPages, callInfo)
	lockrdsClientMockDescribeDBProxyTargetsPages.Unlock()
	return mock.DescribeDBProxyTargetsPagesFunc(in1, in2)
}

// DescribeDBProxyTargetsPagesCalls gets all the calls that were made to DescribeDBProxyTargetsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxyTargetsPagesCalls())
func (mock *rdsClientMock) DescribeDBProxyTargetsPagesCalls() []struct {
	In1 *rds.DescribeDBProxyTargetsInput
	In2 func(*rds.DescribeDBProxyTargetsOutput, bool) bool
} {
	var calls []struct {
		In1 *rds.DescribeDBProxyTargetsInput
		In2 func(*rds.DescribeDBProxyTargetsOutput, bool) bool
	}
	lockrdsClientMockDescribeDBProxyTargetsPages.RLock()
	calls = mock.calls.DescribeDBProxyTargetsPages
	lockrdsClientMockDescribeDBProxyTargetsPages.RUnlock()
	return calls
}

// DescribeDBProxyTargetsPagesWithContext calls DescribeDBProxyTargetsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBProxyTargetsPagesWithContext(in1 context.Context, in2 *rds.DescribeDBProxyTargetsInput, in3 func(*rds.DescribeDBProxyTargetsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeDBProxyTargetsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBProxyTargetsPagesWithContextFunc: method is nil but rdsClient.DescribeDBProxyTargetsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBProxyTargetsInput
		In3 func(*rds.DescribeDBProxyTargetsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockrdsClientMockDescribeDBProxyTargetsPagesWithContext.Lock()
	mock.calls.DescribeDBProxyTargetsPagesWithContext = append(mock.calls.DescribeDBProxyTargetsPagesWithContext, callInfo)
	lockrdsClientMockDescribeDBProxyTargetsPagesWithContext.Unlock()
	return mock.DescribeDBProxyTargetsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeDBProxyTargetsPagesWithContextCalls gets all the calls that were made to DescribeDBProxyTargetsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxyTargetsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBProxyTargetsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBProxyTargetsInput
	In3 func(*rds.DescribeDBProxyTargetsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBProxyTargetsInput
		In3 func(*rds.DescribeDBProxyTargetsOutput, bool) bool
		In4 []request.Option
	}
	lockrdsClientMockDescribeDBProxyTargetsPagesWithContext.RLock()
	calls = mock.calls.DescribeDBProxyTargetsPagesWithContext
	lockrdsClientMockDescribeDBProxyTargetsPagesWithContext.RUnlock()
	return calls
}

// DescribeDBProxyTargetsRequest calls DescribeDBProxyTargetsRequestFunc.
func (mock *rdsClientMock) DescribeDBProxyTargetsRequest(in1 *rds.DescribeDBProxyTargetsInput) (*request.Request, *rds.DescribeDBProxyTargetsOutput) {
	if mock.DescribeDBProxyTargetsRequestFunc == nil {
		panic("rdsClientMock.DescribeDBProxyTargetsRequestFunc: method is nil but rdsClient.DescribeDBProxyTargetsRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBProxyTargetsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBProxyTargetsRequest.Lock()
	mock.calls.DescribeDBProxyTargetsRequest = append(mock.calls.DescribeDBProxyTargetsRequest, callInfo)
	lockrdsClientMockDescribeDBProxyTargetsRequest.Unlock()
	return mock.DescribeDBProxyTargetsRequestFunc(in1)
}

// DescribeDBProxyTargetsRequestCalls gets all the calls that were made to DescribeDBProxyTargetsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxyTargetsRequestCalls())
func (mock *rdsClientMock) DescribeDBProxyTargetsRequestCalls() []struct {
	In1 *rds.DescribeDBProxyTargetsInput
} {
	var calls []struct {
		In1 *rds.DescribeDBProxyTargetsInput
	}
	lockrdsClientMockDescribeDBProxyTargetsRequest.RLock()
	calls = mock.calls.DescribeDBProxyTargetsRequest
	lockrdsClientMockDescribeDBProxyTargetsRequest.RUnlock()
	return calls
}

// DescribeDBProxyTargetsWithContext calls DescribeDBProxyTargetsWithContextFunc.
func (mock *rdsClientMock) DescribeDBProxyTargetsWithContext(in1 context.Context, in2 *rds.DescribeDBProxyTargetsInput, in3 ...request.Option) (*rds.DescribeDBProxyTargetsOutput, error) {
	if mock.DescribeDBProxyTargetsWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBProxyTargetsWithContextFunc: method is nil but rdsClient.DescribeDBProxyTargetsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBProxyTargetsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeDBProxyTargetsWithContext.Lock()
	mock.calls.DescribeDBProxyTargetsWithContext = append(mock.calls.DescribeDBProxyTargetsWithContext, callInfo)
	lockrdsClientMockDescribeDBProxyTargetsWithContext.Unlock()
	return mock.DescribeDBProxyTargetsWithContextFunc(in1, in2, in3...)
}

// DescribeDBProxyTargetsWithContextCalls gets all the calls that were made to DescribeDBProxyTargetsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxyTargetsWithContextCalls())
func (mock *rdsClientMock) DescribeDBProxyTargetsWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBProxyTargetsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBProxyTargetsInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeDBProxyTargetsWithContext.RLock()
	calls = mock.calls.DescribeDBProxyTargetsWithContext
	lockrdsClientMockDescribeDBProxyTargetsWithContext.RUnlock()
	return calls
}

// DescribeDBSecurityGroups calls DescribeDBSecurityGroupsFunc.
func (mock *rdsClientMock) DescribeDBSecurityGroups(in1 *rds.DescribeDBSecurityGroupsInput) (*rds.DescribeDBSecurityGroupsOutput, error) {
	if mock.DescribeDBSecurityGroupsFunc == nil {
		panic("rdsClientMock.DescribeDBSecurityGroupsFunc: method is nil but rdsClient.DescribeDBSecurityGroups was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBSecurityGroupsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBSecurityGroups.Lock()
	mock.calls.DescribeDBSecurityGroups = append(mock.calls.DescribeDBSecurityGroups, callInfo)
	lockrdsClientMockDescribeDBSecurityGroups.Unlock()
	return mock.DescribeDBSecurityGroupsFunc(in1)
}

// DescribeDBSecurityGroupsCalls gets all the calls that were made to DescribeDBSecurityGroups.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSecurityGroupsCalls())
func (mock *rdsClientMock) DescribeDBSecurityGroupsCalls() []struct {
	In1 *rds.DescribeDBSecurityGroupsInput
} {
	var calls []struct {
		In1 *rds.DescribeDBSecurityGroupsInput
	}
	lockrdsClientMockDescribeDBSecurityGroups.RLock()
	calls = mock.calls.DescribeDBSecurityGroups
	lockrdsClientMockDescribeDBSecurityGroups.RUnlock()
	return calls
}

// DescribeDBSecurityGroupsPages calls DescribeDBSecurityGroupsPagesFunc.
func (mock *rdsClientMock) DescribeDBSecurityGroupsPages(in1 *rds.DescribeDBSecurityGroupsInput, in2 func(*rds.DescribeDBSecurityGroupsOutput, bool) bool) error {
	if mock.DescribeDBSecurityGroupsPagesFunc == nil {
		panic("rdsClientMock.DescribeDBSecurityGroupsPagesFunc: method is nil but rdsClient.DescribeDBSecurityGroupsPages was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBSecurityGroupsInput
		In2 func(*rds.DescribeDBSecurityGroupsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockrdsClientMockDescribeDBSecurityGroupsPages.Lock()
	mock.calls.DescribeDBSecurityGroupsPages = append(mock.calls.DescribeDBSecurityGroupsPages, callInfo)
	lockrdsClientMockDescribeDBSecurityGroupsPages.Unlock()
	return mock.DescribeDBSecurityGroupsPagesFunc(in1, in2)
}

// DescribeDBSecurityGroupsPagesCalls gets all the calls that were made to DescribeDBSecurityGroupsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSecurityGroupsPagesCalls())
func (mock *rdsClientMock) DescribeDBSecurityGroupsPagesCalls() []struct {
	In1 *rds.DescribeDBSecurityGroupsInput
	In2 func(*rds.DescribeDBSecurityGroupsOutput, bool) bool
} {
	var calls []struct {
		In1 *rds.DescribeDBSecurityGroupsInput
		In2 func(*rds.DescribeDBSecurityGroupsOutput, bool) bool
	}
	lockrdsClientMockDescribeDBSecurityGroupsPages.RLock()
	calls = mock.calls.DescribeDBSecurityGroupsPages
	lockrdsClientMockDescribeDBSecurityGroupsPages.RUnlock()
	return calls
}

// DescribeDBSecurityGroupsPagesWithContext calls DescribeDBSecurityGroupsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBSecurityGroupsPagesWithContext(in1 context.Context, in2 *rds.DescribeDBSecurityGroupsInput, in3 func(*rds.DescribeDBSecurityGroupsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeDBSecurityGroupsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBSecurityGroupsPagesWithContextFunc: method is nil but rdsClient.DescribeDBSecurityGroupsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBSecurityGroupsInput
		In3 func(*rds.DescribeDBSecurityGroupsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockrdsClientMockDescribeDBSecurityGroupsPagesWithContext.Lock()
	mock.calls.DescribeDBSecurityGroupsPagesWithContext = append(mock.calls.DescribeDBSecurityGroupsPagesWithContext, callInfo)
	lockrdsClientMockDescribeDBSecurityGroupsPagesWithContext.Unlock()
	return mock.DescribeDBSecurityGroupsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeDBSecurityGroupsPagesWithContextCalls gets all the calls that were made to DescribeDBSecurityGroupsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSecurityGroupsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBSecurityGroupsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBSecurityGroupsInput
	In3 func(*rds.DescribeDBSecurityGroupsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBSecurityGroupsInput
		In3 func(*rds.DescribeDBSecurityGroupsOutput, bool) bool
		In4 []request.Option
	}
	lockrdsClientMockDescribeDBSecurityGroupsPagesWithContext.RLock()
	calls = mock.calls.DescribeDBSecurityGroupsPagesWithContext
	lockrdsClientMockDescribeDBSecurityGroupsPagesWithContext.RUnlock()
	return calls
}

// DescribeDBSecurityGroupsRequest calls DescribeDBSecurityGroupsRequestFunc.
func (mock *rdsClientMock) DescribeDBSecurityGroupsRequest(in1 *rds.DescribeDBSecurityGroupsInput) (*request.Request, *rds.DescribeDBSecurityGroupsOutput) {
	if mock.DescribeDBSecurityGroupsRequestFunc == nil {
		panic("rdsClientMock.DescribeDBSecurityGroupsRequestFunc: method is nil but rdsClient.DescribeDBSecurityGroupsRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBSecurityGroupsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBSecurityGroupsRequest.Lock()
	mock.calls.DescribeDBSecurityGroupsRequest = append(mock.calls.DescribeDBSecurityGroupsRequest, callInfo)
	lockrdsClientMockDescribeDBSecurityGroupsRequest.Unlock()
	return mock.DescribeDBSecurityGroupsRequestFunc(in1)
}

// DescribeDBSecurityGroupsRequestCalls gets all the calls that were made to DescribeDBSecurityGroupsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSecurityGroupsRequestCalls())
func (mock *rdsClientMock) DescribeDBSecurityGroupsRequestCalls() []struct {
	In1 *rds.DescribeDBSecurityGroupsInput
} {
	var calls []struct {
		In1 *rds.DescribeDBSecurityGroupsInput
	}
	lockrdsClientMockDescribeDBSecurityGroupsRequest.RLock()
	calls = mock.calls.DescribeDBSecurityGroupsRequest
	lockrdsClientMockDescribeDBSecurityGroupsRequest.RUnlock()
	return calls
}

// DescribeDBSecurityGroupsWithContext calls DescribeDBSecurityGroupsWithContextFunc.
func (mock *rdsClientMock) DescribeDBSecurityGroupsWithContext(in1 context.Context, in2 *rds.DescribeDBSecurityGroupsInput, in3 ...request.Option) (*rds.DescribeDBSecurityGroupsOutput, error) {
	if mock.DescribeDBSecurityGroupsWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBSecurityGroupsWithContextFunc: method is nil but rdsClient.DescribeDBSecurityGroupsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBSecurityGroupsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeDBSecurityGroupsWithContext.Lock()
	mock.calls.DescribeDBSecurityGroupsWithContext = append(mock.calls.DescribeDBSecurityGroupsWithContext, callInfo)
	lockrdsClientMockDescribeDBSecurityGroupsWithContext.Unlock()
	return mock.DescribeDBSecurityGroupsWithContextFunc(in1, in2, in3...)
}

// DescribeDBSecurityGroupsWithContextCalls gets all the calls that were made to DescribeDBSecurityGroupsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSecurityGroupsWithContextCalls())
func (mock *rdsClientMock) DescribeDBSecurityGroupsWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBSecurityGroupsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBSecurityGroupsInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeDBSecurityGroupsWithContext.RLock()
	calls = mock.calls.DescribeDBSecurityGroupsWithContext
	lockrdsClientMockDescribeDBSecurityGroupsWithContext.RUnlock()
	return calls
}

// DescribeDBSnapshotAttributes calls DescribeDBSnapshotAttributesFunc.
func (mock *rdsClientMock) DescribeDBSnapshotAttributes(in1 *rds.DescribeDBSnapshotAttributesInput) (*rds.DescribeDBSnapshotAttributesOutput, error) {
	if mock.DescribeDBSnapshotAttributesFunc == nil {
		panic("rdsClientMock.DescribeDBSnapshotAttributesFunc: method is nil but rdsClient.DescribeDBSnapshotAttributes was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBSnapshotAttributesInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBSnapshotAttributes.Lock()
	mock.calls.DescribeDBSnapshotAttributes = append(mock.calls.DescribeDBSnapshotAttributes, callInfo)
	lockrdsClientMockDescribeDBSnapshotAttributes.Unlock()
	return mock.DescribeDBSnapshotAttributesFunc(in1)
}

// DescribeDBSnapshotAttributesCalls gets all the calls that were made to DescribeDBSnapshotAttributes.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSnapshotAttributesCalls())
func (mock *rdsClientMock) DescribeDBSnapshotAttributesCalls() []struct {
	In1 *rds.DescribeDBSnapshotAttributesInput
} {
	var calls []struct {
		In1 *rds.DescribeDBSnapshotAttributesInput
	}
	lockrdsClientMockDescribeDBSnapshotAttributes.RLock()
	calls = mock.calls.DescribeDBSnapshotAttributes
	lockrdsClientMockDescribeDBSnapshotAttributes.RUnlock()
	return calls
}

// DescribeDBSnapshotAttributesRequest calls DescribeDBSnapshotAttributesRequestFunc.
func (mock *rdsClientMock) DescribeDBSnapshotAttributesRequest(in1 *rds.DescribeDBSnapshotAttributesInput) (*request.Request, *rds.DescribeDBSnapshotAttributesOutput) {
	if mock.DescribeDBSnapshotAttributesRequestFunc == nil {
		panic("rdsClientMock.DescribeDBSnapshotAttributesRequestFunc: method is nil but rdsClient.DescribeDBSnapshotAttributesRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBSnapshotAttributesInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBSnapshotAttributesRequest.Lock()
	mock.calls.DescribeDBSnapshotAttributesRequest = append(mock.calls.DescribeDBSnapshotAttributesRequest, callInfo)
	lockrdsClientMockDescribeDBSnapshotAttributesRequest.Unlock()
	return mock.DescribeDBSnapshotAttributesRequestFunc(in1)
}

// DescribeDBSnapshotAttributesRequestCalls gets all the calls that were made to DescribeDBSnapshotAttributesRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSnapshotAttributesRequestCalls())
func (mock *rdsClientMock) DescribeDBSnapshotAttributesRequestCalls() []struct {
	In1 *rds.DescribeDBSnapshotAttributesInput
} {
	var calls []struct {
		In1 *rds.DescribeDBSnapshotAttributesInput
	}
	lockrdsClientMockDescribeDBSnapshotAttributesRequest.RLock()
	calls = mock.calls.DescribeDBSnapshotAttributesRequest
	lockrdsClientMockDescribeDBSnapshotAttributesRequest.RUnlock()
	return calls
}

// DescribeDBSnapshotAttributesWithContext calls DescribeDBSnapshotAttributesWithContextFunc.
func (mock *rdsClientMock) DescribeDBSnapshotAttributesWithContext(in1 context.Context, in2 *rds.DescribeDBSnapshotAttributesInput, in3 ...request.Option) (*rds.DescribeDBSnapshotAttributesOutput, error) {
	if mock.DescribeDBSnapshotAttributesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBSnapshotAttributesWithContextFunc: method is nil but rdsClient.DescribeDBSnapshotAttributesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBSnapshotAttributesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeDBSnapshotAttributesWithContext.Lock()
	mock.calls.DescribeDBSnapshotAttributesWithContext = append(mock.calls.DescribeDBSnapshotAttributesWithContext, callInfo)
	lockrdsClientMockDescribeDBSnapshotAttributesWithContext.Unlock()
	return mock.DescribeDBSnapshotAttributesWithContextFunc(in1, in2, in3...)
}

// DescribeDBSnapshotAttributesWithContextCalls gets all the calls that were made to DescribeDBSnapshotAttributesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSnapshotAttributesWithContextCalls())
func (mock *rdsClientMock) DescribeDBSnapshotAttributesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBSnapshotAttributesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBSnapshotAttributesInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeDBSnapshotAttributesWithContext.RLock()
	calls = mock.calls.DescribeDBSnapshotAttributesWithContext
	lockrdsClientMockDescribeDBSnapshotAttributesWithContext.RUnlock()
	return calls
}

// DescribeDBSnapshots calls DescribeDBSnapshotsFunc.
func (mock *rdsClientMock) DescribeDBSnapshots(in1 *rds.DescribeDBSnapshotsInput) (*rds.DescribeDBSnapshotsOutput, error) {
	if mock.DescribeDBSnapshotsFunc == nil {
		panic("rdsClientMock.DescribeDBSnapshotsFunc: method is nil but rdsClient.DescribeDBSnapshots was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBSnapshotsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBSnapshots.Lock()
	mock.calls.DescribeDBSnapshots = append(mock.calls.DescribeDBSnapshots, callInfo)
	lockrdsClientMockDescribeDBSnapshots.Unlock()
	return mock.DescribeDBSnapshotsFunc(in1)
}

// DescribeDBSnapshotsCalls gets all the calls that were made to DescribeDBSnapshots.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSnapshotsCalls())
func (mock *rdsClientMock) DescribeDBSnapshotsCalls() []struct {
	In1 *rds.DescribeDBSnapshotsInput
} {
	var calls []struct {
		In1 *rds.DescribeDBSnapshotsInput
	}
	lockrdsClientMockDescribeDBSnapshots.RLock()
	calls = mock.calls.DescribeDBSnapshots
	lockrdsClientMockDescribeDBSnapshots.RUnlock()
	return calls
}

// DescribeDBSnapshotsPages calls DescribeDBSnapshotsPagesFunc.
func (mock *rdsClientMock) DescribeDBSnapshotsPages(in1 *rds.DescribeDBSnapshotsInput, in2 func(*rds.DescribeDBSnapshotsOutput, bool) bool) error {
	if mock.DescribeDBSnapshotsPagesFunc == nil {
		panic("rdsClientMock.DescribeDBSnapshotsPagesFunc: method is nil but rdsClient.DescribeDBSnapshotsPages was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBSnapshotsInput
		In2 func(*rds.DescribeDBSnapshotsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockrdsClientMockDescribeDBSnapshotsPages.Lock()
	mock.calls.DescribeDBSnapshotsPages = append(mock.calls.DescribeDBSnapshotsPages, callInfo)
	lockrdsClientMockDescribeDBSnapshotsPages.Unlock()
	return mock.DescribeDBSnapshotsPagesFunc(in1, in2)
}

// DescribeDBSnapshotsPagesCalls gets all the calls that were made to DescribeDBSnapshotsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSnapshotsPagesCalls())
func (mock *rdsClientMock) DescribeDBSnapshotsPagesCalls() []struct {
	In1 *rds.DescribeDBSnapshotsInput
	In2 func(*rds.DescribeDBSnapshotsOutput, bool) bool
} {
	var calls []struct {
		In1 *rds.DescribeDBSnapshotsInput
		In2 func(*rds.DescribeDBSnapshotsOutput, bool) bool
	}
	lockrdsClientMockDescribeDBSnapshotsPages.RLock()
	calls = mock.calls.DescribeDBSnapshotsPages
	lockrdsClientMockDescribeDBSnapshotsPages.RUnlock()
	return calls
}

// DescribeDBSnapshotsPagesWithContext calls DescribeDBSnapshotsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBSnapshotsPagesWithContext(in1 context.Context, in2 *rds.DescribeDBSnapshotsInput, in3 func(*rds.DescribeDBSnapshotsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeDBSnapshotsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBSnapshotsPagesWithContextFunc: method is nil but rdsClient.DescribeDBSnapshotsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBSnapshotsInput
		In3 func(*rds.DescribeDBSnapshotsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockrdsClientMockDescribeDBSnapshotsPagesWithContext.Lock()
	mock.calls.DescribeDBSnapshotsPagesWithContext = append(mock.calls.DescribeDBSnapshotsPagesWithContext, callInfo)
	lockrdsClientMockDescribeDBSnapshotsPagesWithContext.Unlock()
	return mock.DescribeDBSnapshotsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeDBSnapshotsPagesWithContextCalls gets all the calls that were made to DescribeDBSnapshotsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSnapshotsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBSnapshotsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBSnapshotsInput
	In3 func(*rds.DescribeDBSnapshotsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBSnapshotsInput
		In3 func(*rds.DescribeDBSnapshotsOutput, bool) bool
		In4 []request.Option
	}
	lockrdsClientMockDescribeDBSnapshotsPagesWithContext.RLock()
	calls = mock.calls.DescribeDBSnapshotsPagesWithContext
	lockrdsClientMockDescribeDBSnapshotsPagesWithContext.RUnlock()
	return calls
}

// DescribeDBSnapshotsRequest calls DescribeDBSnapshotsRequestFunc.
func (mock *rdsClientMock) DescribeDBSnapshotsRequest(in1 *rds.DescribeDBSnapshotsInput) (*request.Request, *rds.DescribeDBSnapshotsOutput) {
	if mock.DescribeDBSnapshotsRequestFunc == nil {
		panic("rdsClientMock.DescribeDBSnapshotsRequestFunc: method is nil but rdsClient.DescribeDBSnapshotsRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBSnapshotsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBSnapshotsRequest.Lock()
	mock.calls.DescribeDBSnapshotsRequest = append(mock.calls.DescribeDBSnapshotsRequest, callInfo)
	lockrdsClientMockDescribeDBSnapshotsRequest.Unlock()
	return mock.DescribeDBSnapshotsRequestFunc(in1)
}

// DescribeDBSnapshotsRequestCalls gets all the calls that were made to DescribeDBSnapshotsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSnapshotsRequestCalls())
func (mock *rdsClientMock) DescribeDBSnapshotsRequestCalls() []struct {
	In1 *rds.DescribeDBSnapshotsInput
} {
	var calls []struct {
		In1 *rds.DescribeDBSnapshotsInput
	}
	lockrdsClientMockDescribeDBSnapshotsRequest.RLock()
	calls = mock.calls.DescribeDBSnapshotsRequest
	lockrdsClientMockDescribeDBSnapshotsRequest.RUnlock()
	return calls
}

// DescribeDBSnapshotsWithContext calls DescribeDBSnapshotsWithContextFunc.
func (mock *rdsClientMock) DescribeDBSnapshotsWithContext(in1 context.Context, in2 *rds.DescribeDBSnapshotsInput, in3 ...request.Option) (*rds.DescribeDBSnapshotsOutput, error) {
	if mock.DescribeDBSnapshotsWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBSnapshotsWithContextFunc: method is nil but rdsClient.DescribeDBSnapshotsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBSnapshotsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeDBSnapshotsWithContext.Lock()
	mock.calls.DescribeDBSnapshotsWithContext = append(mock.calls.DescribeDBSnapshotsWithContext, callInfo)
	lockrdsClientMockDescribeDBSnapshotsWithContext.Unlock()
	return mock.DescribeDBSnapshotsWithContextFunc(in1, in2, in3...)
}

// DescribeDBSnapshotsWithContextCalls gets all the calls that were made to DescribeDBSnapshotsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSnapshotsWithContextCalls())
func (mock *rdsClientMock) DescribeDBSnapshotsWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBSnapshotsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBSnapshotsInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeDBSnapshotsWithContext.RLock()
	calls = mock.calls.DescribeDBSnapshotsWithContext
	lockrdsClientMockDescribeDBSnapshotsWithContext.RUnlock()
	return calls
}

// DescribeDBSubnetGroups calls DescribeDBSubnetGroupsFunc.
func (mock *rdsClientMock) DescribeDBSubnetGroups(in1 *rds.DescribeDBSubnetGroupsInput) (*rds.DescribeDBSubnetGroupsOutput, error) {
	if mock.DescribeDBSubnetGroupsFunc == nil {
		panic("rdsClientMock.DescribeDBSubnetGroupsFunc: method is nil but rdsClient.DescribeDBSubnetGroups was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBSubnetGroupsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBSubnetGroups.Lock()
	mock.calls.DescribeDBSubnetGroups = append(mock.calls.DescribeDBSubnetGroups, callInfo)
	lockrdsClientMockDescribeDBSubnetGroups.Unlock()
	return mock.DescribeDBSubnetGroupsFunc(in1)
}

// DescribeDBSubnetGroupsCalls gets all the calls that were made to DescribeDBSubnetGroups.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSubnetGroupsCalls())
func (mock *rdsClientMock) DescribeDBSubnetGroupsCalls() []struct {
	In1 *rds.DescribeDBSubnetGroupsInput
} {
	var calls []struct {
		In1 *rds.DescribeDBSubnetGroupsInput
	}
	lockrdsClientMockDescribeDBSubnetGroups.RLock()
	calls = mock.calls.DescribeDBSubnetGroups
	lockrdsClientMockDescribeDBSubnetGroups.RUnlock()
	return calls
}

// DescribeDBSubnetGroupsPages calls DescribeDBSubnetGroupsPagesFunc.
func (mock *rdsClientMock) DescribeDBSubnetGroupsPages(in1 *rds.DescribeDBSubnetGroupsInput, in2 func(*rds.DescribeDBSubnetGroupsOutput, bool) bool) error {
	if mock.DescribeDBSubnetGroupsPagesFunc == nil {
		panic("rdsClientMock.DescribeDBSubnetGroupsPagesFunc: method is nil but rdsClient.DescribeDBSubnetGroupsPages was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBSubnetGroupsInput
		In2 func(*rds.DescribeDBSubnetGroupsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockrdsClientMockDescribeDBSubnetGroupsPages.Lock()
	mock.calls.DescribeDBSubnetGroupsPages = append(mock.calls.DescribeDBSubnetGroupsPages, callInfo)
	lockrdsClientMockDescribeDBSubnetGroupsPages.Unlock()
	return mock.DescribeDBSubnetGroupsPagesFunc(in1, in2)
}

// DescribeDBSubnetGroupsPagesCalls gets all the calls that were made to DescribeDBSubnetGroupsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSubnetGroupsPagesCalls())
func (mock *rdsClientMock) DescribeDBSubnetGroupsPagesCalls() []struct {
	In1 *rds.DescribeDBSubnetGroupsInput
	In2 func(*rds.DescribeDBSubnetGroupsOutput, bool) bool
} {
	var calls []struct {
		In1 *rds.DescribeDBSubnetGroupsInput
		In2 func(*rds.DescribeDBSubnetGroupsOutput, bool) bool
	}
	lockrdsClientMockDescribeDBSubnetGroupsPages.RLock()
	calls = mock.calls.DescribeDBSubnetGroupsPages
	lockrdsClientMockDescribeDBSubnetGroupsPages.RUnlock()
	return calls
}

// DescribeDBSubnetGroupsPagesWithContext calls DescribeDBSubnetGroupsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBSubnetGroupsPagesWithContext(in1 context.Context, in2 *rds.DescribeDBSubnetGroupsInput, in3 func(*rds.DescribeDBSubnetGroupsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeDBSubnetGroupsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBSubnetGroupsPagesWithContextFunc: method is nil but rdsClient.DescribeDBSubnetGroupsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBSubnetGroupsInput
		In3 func(*rds.DescribeDBSubnetGroupsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockrdsClientMockDescribeDBSubnetGroupsPagesWithContext.Lock()
	mock.calls.DescribeDBSubnetGroupsPagesWithContext = append(mock.calls.DescribeDBSubnetGroupsPagesWithContext, callInfo)
	lockrdsClientMockDescribeDBSubnetGroupsPagesWithContext.Unlock()
	return mock.DescribeDBSubnetGroupsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeDBSubnetGroupsPagesWithContextCalls gets all the calls that were made to DescribeDBSubnetGroupsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSubnetGroupsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBSubnetGroupsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBSubnetGroupsInput
	In3 func(*rds.DescribeDBSubnetGroupsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBSubnetGroupsInput
		In3 func(*rds.DescribeDBSubnetGroupsOutput, bool) bool
		In4 []request.Option
	}
	lockrdsClientMockDescribeDBSubnetGroupsPagesWithContext.RLock()
	calls = mock.calls.DescribeDBSubnetGroupsPagesWithContext
	lockrdsClientMockDescribeDBSubnetGroupsPagesWithContext.RUnlock()
	return calls
}

// DescribeDBSubnetGroupsRequest calls DescribeDBSubnetGroupsRequestFunc.
func (mock *rdsClientMock) DescribeDBSubnetGroupsRequest(in1 *rds.DescribeDBSubnetGroupsInput) (*request.Request, *rds.DescribeDBSubnetGroupsOutput) {
	if mock.DescribeDBSubnetGroupsRequestFunc == nil {
		panic("rdsClientMock.DescribeDBSubnetGroupsRequestFunc: method is nil but rdsClient.DescribeDBSubnetGroupsRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBSubnetGroupsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeDBSubnetGroupsRequest.Lock()
	mock.calls.DescribeDBSubnetGroupsRequest = append(mock.calls.DescribeDBSubnetGroupsRequest, callInfo)
	lockrdsClientMockDescribeDBSubnetGroupsRequest.Unlock()
	return mock.DescribeDBSubnetGroupsRequestFunc(in1)
}

// DescribeDBSubnetGroupsRequestCalls gets all the calls that were made to DescribeDBSubnetGroupsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSubnetGroupsRequestCalls())
func (mock *rdsClientMock) DescribeDBSubnetGroupsRequestCalls() []struct {
	In1 *rds.DescribeDBSubnetGroupsInput
} {
	var calls []struct {
		In1 *rds.DescribeDBSubnetGroupsInput
	}
	lockrdsClientMockDescribeDBSubnetGroupsRequest.RLock()
	calls = mock.calls.DescribeDBSubnetGroupsRequest
	lockrdsClientMockDescribeDBSubnetGroupsRequest.RUnlock()
	return calls
}

// DescribeDBSubnetGroupsWithContext calls DescribeDBSubnetGroupsWithContextFunc.
func (mock *rdsClientMock) DescribeDBSubnetGroupsWithContext(in1 context.Context, in2 *rds.DescribeDBSubnetGroupsInput, in3 ...request.Option) (*rds.DescribeDBSubnetGroupsOutput, error) {
	if mock.DescribeDBSubnetGroupsWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBSubnetGroupsWithContextFunc: method is nil but rdsClient.DescribeDBSubnetGroupsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBSubnetGroupsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeDBSubnetGroupsWithContext.Lock()
	mock.calls.DescribeDBSubnetGroupsWithContext = append(mock.calls.DescribeDBSubnetGroupsWithContext, callInfo)
	lockrdsClientMockDescribeDBSubnetGroupsWithContext.Unlock()
	return mock.DescribeDBSubnetGroupsWithContextFunc(in1, in2, in3...)
}

// DescribeDBSubnetGroupsWithContextCalls gets all the calls that were made to DescribeDBSubnetGroupsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSubnetGroupsWithContextCalls())
func (mock *rdsClientMock) DescribeDBSubnetGroupsWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBSubnetGroupsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBSubnetGroupsInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeDBSubnetGroupsWithContext.RLock()
	calls = mock.calls.DescribeDBSubnetGroupsWithContext
	lockrdsClientMockDescribeDBSubnetGroupsWithContext.RUnlock()
	return calls
}

// DescribeEngineDefaultClusterParameters calls DescribeEngineDefaultClusterParametersFunc.
func (mock *rdsClientMock) DescribeEngineDefaultClusterParameters(in1 *rds.DescribeEngineDefaultClusterParametersInput) (*rds.DescribeEngineDefaultClusterParametersOutput, error) {
	if mock.DescribeEngineDefaultClusterParametersFunc == nil {
		panic("rdsClientMock.DescribeEngineDefaultClusterParametersFunc: method is nil but rdsClient.DescribeEngineDefaultClusterParameters was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeEngineDefaultClusterParametersInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeEngineDefaultClusterParameters.Lock()
	mock.calls.DescribeEngineDefaultClusterParameters = append(mock.calls.DescribeEngineDefaultClusterParameters, callInfo)
	lockrdsClientMockDescribeEngineDefaultClusterParameters.Unlock()
	return mock.DescribeEngineDefaultClusterParametersFunc(in1)
}

// DescribeEngineDefaultClusterParametersCalls gets all the calls that were made to DescribeEngineDefaultClusterParameters.
// Check the length with:
//     len(mockedrdsClient.DescribeEngineDefaultClusterParametersCalls())
func (mock *rdsClientMock) DescribeEngineDefaultClusterParametersCalls() []struct {
	In1 *rds.DescribeEngineDefaultClusterParametersInput
} {
	var calls []struct {
		In1 *rds.DescribeEngineDefaultClusterParametersInput
	}
	lockrdsClientMockDescribeEngineDefaultClusterParameters.RLock()
	calls = mock.calls.DescribeEngineDefaultClusterParameters
	lockrdsClientMockDescribeEngineDefaultClusterParameters.RUnlock()
	return calls
}

// DescribeEngineDefaultClusterParametersRequest calls DescribeEngineDefaultClusterParametersRequestFunc.
func (mock *rdsClientMock) DescribeEngineDefaultClusterParametersRequest(in1 *rds.DescribeEngineDefaultClusterParametersInput) (*request.Request, *rds.DescribeEngineDefaultClusterParametersOutput) {
	if mock.DescribeEngineDefaultClusterParametersRequestFunc == nil {
		panic("rdsClientMock.DescribeEngineDefaultClusterParametersRequestFunc: method is nil but rdsClient.DescribeEngineDefaultClusterParametersRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeEngineDefaultClusterParametersInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeEngineDefaultClusterParametersRequest.Lock()
	mock.calls.DescribeEngineDefaultClusterParametersRequest = append(mock.calls.DescribeEngineDefaultClusterParametersRequest, callInfo)
	lockrdsClientMockDescribeEngineDefaultClusterParametersRequest.Unlock()
	return mock.DescribeEngineDefaultClusterParametersRequestFunc(in1)
}

// DescribeEngineDefaultClusterParametersRequestCalls gets all the calls that were made to DescribeEngineDefaultClusterParametersRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeEngineDefaultClusterParametersRequestCalls())
func (mock *rdsClientMock) DescribeEngineDefaultClusterParametersRequestCalls() []struct {
	In1 *rds.DescribeEngineDefaultClusterParametersInput
} {
	var calls []struct {
		In1 *rds.DescribeEngineDefaultClusterParametersInput
	}
	lockrdsClientMockDescribeEngineDefaultClusterParametersRequest.RLock()
	calls = mock.calls.DescribeEngineDefaultClusterParametersRequest
	lockrdsClientMockDescribeEngineDefaultClusterParametersRequest.RUnlock()
	return calls
}

// DescribeEngineDefaultClusterParametersWithContext calls DescribeEngineDefaultClusterParametersWithContextFunc.
func (mock *rdsClientMock) DescribeEngineDefaultClusterParametersWithContext(in1 context.Context, in2 *rds.DescribeEngineDefaultClusterParametersInput, in3 ...request.Option) (*rds.DescribeEngineDefaultClusterParametersOutput, error) {
	if mock.DescribeEngineDefaultClusterParametersWithContextFunc == nil {
		panic("rdsClientMock.DescribeEngineDefaultClusterParametersWithContextFunc: method is nil but rdsClient.DescribeEngineDefaultClusterParametersWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeEngineDefaultClusterParametersInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeEngineDefaultClusterParametersWithContext.Lock()
	mock.calls.DescribeEngineDefaultClusterParametersWithContext = append(mock.calls.DescribeEngineDefaultClusterParametersWithContext, callInfo)
	lockrdsClientMockDescribeEngineDefaultClusterParametersWithContext.Unlock()
	return mock.DescribeEngineDefaultClusterParametersWithContextFunc(in1, in2, in3...)
}

// DescribeEngineDefaultClusterParametersWithContextCalls gets all the calls that were made to DescribeEngineDefaultClusterParametersWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeEngineDefaultClusterParametersWithContextCalls())
func (mock *rdsClientMock) DescribeEngineDefaultClusterParametersWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeEngineDefaultClusterParametersInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeEngineDefaultClusterParametersInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeEngineDefaultClusterParametersWithContext.RLock()
	calls = mock.calls.DescribeEngineDefaultClusterParametersWithContext
	lockrdsClientMockDescribeEngineDefaultClusterParametersWithContext.RUnlock()
	return calls
}

// DescribeEngineDefaultParameters calls DescribeEngineDefaultParametersFunc.
func (mock *rdsClientMock) DescribeEngineDefaultParameters(in1 *rds.DescribeEngineDefaultParametersInput) (*rds.DescribeEngineDefaultParametersOutput, error) {
	if mock.DescribeEngineDefaultParametersFunc == nil {
		panic("rdsClientMock.DescribeEngineDefaultParametersFunc: method is nil but rdsClient.DescribeEngineDefaultParameters was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeEngineDefaultParametersInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeEngineDefaultParameters.Lock()
	mock.calls.DescribeEngineDefaultParameters = append(mock.calls.DescribeEngineDefaultParameters, callInfo)
	lockrdsClientMockDescribeEngineDefaultParameters.Unlock()
	return mock.DescribeEngineDefaultParametersFunc(in1)
}

// DescribeEngineDefaultParametersCalls gets all the calls that were made to DescribeEngineDefaultParameters.
// Check the length with:
//     len(mockedrdsClient.DescribeEngineDefaultParametersCalls())
func (mock *rdsClientMock) DescribeEngineDefaultParametersCalls() []struct {
	In1 *rds.DescribeEngineDefaultParametersInput
} {
	var calls []struct {
		In1 *rds.DescribeEngineDefaultParametersInput
	}
	lockrdsClientMockDescribeEngineDefaultParameters.RLock()
	calls = mock.calls.DescribeEngineDefaultParameters
	lockrdsClientMockDescribeEngineDefaultParameters.RUnlock()
	return calls
}

// DescribeEngineDefaultParametersPages calls DescribeEngineDefaultParametersPagesFunc.
func (mock *rdsClientMock) DescribeEngineDefaultParametersPages(in1 *rds.DescribeEngineDefaultParametersInput, in2 func(*rds.DescribeEngineDefaultParametersOutput, bool) bool) error {
	if mock.DescribeEngineDefaultParametersPagesFunc == nil {
		panic("rdsClientMock.DescribeEngineDefaultParametersPagesFunc: method is nil but rdsClient.DescribeEngineDefaultParametersPages was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeEngineDefaultParametersInput
		In2 func(*rds.DescribeEngineDefaultParametersOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockrdsClientMockDescribeEngineDefaultParametersPages.Lock()
	mock.calls.DescribeEngineDefaultParametersPages = append(mock.calls.DescribeEngineDefaultParametersPages, callInfo)
	lockrdsClientMockDescribeEngineDefaultParametersPages.Unlock()
	return mock.DescribeEngineDefaultParametersPagesFunc(in1, in2)
}

// DescribeEngineDefaultParametersPagesCalls gets all the calls that were made to DescribeEngineDefaultParametersPages.
// Check the length with:
//     len(mockedrdsClient.DescribeEngineDefaultParametersPagesCalls())
func (mock *rdsClientMock) DescribeEngineDefaultParametersPagesCalls() []struct {
	In1 *rds.DescribeEngineDefaultParametersInput
	In2 func(*rds.DescribeEngineDefaultParametersOutput, bool) bool
} {
	var calls []struct {
		In1 *rds.DescribeEngineDefaultParametersInput
		In2 func(*rds.DescribeEngineDefaultParametersOutput, bool) bool
	}
	lockrdsClientMockDescribeEngineDefaultParametersPages.RLock()
	calls = mock.calls.DescribeEngineDefaultParametersPages
	lockrdsClientMockDescribeEngineDefaultParametersPages.RUnlock()
	return calls
}

// DescribeEngineDefaultParametersPagesWithContext calls DescribeEngineDefaultParametersPagesWithContextFunc.
func (mock *rdsClientMock) DescribeEngineDefaultParametersPagesWithContext(in1 context.Context, in2 *rds.DescribeEngineDefaultParametersInput, in3 func(*rds.DescribeEngineDefaultParametersOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeEngineDefaultParametersPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeEngineDefaultParametersPagesWithContextFunc: method is nil but rdsClient.DescribeEngineDefaultParametersPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeEngineDefaultParametersInput
		In3 func(*rds.DescribeEngineDefaultParametersOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockrdsClientMockDescribeEngineDefaultParametersPagesWithContext.Lock()
	mock.calls.DescribeEngineDefaultParametersPagesWithContext = append(mock.calls.DescribeEngineDefaultParametersPagesWithContext, callInfo)
	lockrdsClientMockDescribeEngineDefaultParametersPagesWithContext.Unlock()
	return mock.DescribeEngineDefaultParametersPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeEngineDefaultParametersPagesWithContextCalls gets all the calls that were made to DescribeEngineDefaultParametersPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeEngineDefaultParametersPagesWithContextCalls())
func (mock *rdsClientMock) DescribeEngineDefaultParametersPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeEngineDefaultParametersInput
	In3 func(*rds.DescribeEngineDefaultParametersOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeEngineDefaultParametersInput
		In3 func(*rds.DescribeEngineDefaultParametersOutput, bool) bool
		In4 []request.Option
	}
	lockrdsClientMockDescribeEngineDefaultParametersPagesWithContext.RLock()
	calls = mock.calls.DescribeEngineDefaultParametersPagesWithContext
	lockrdsClientMockDescribeEngineDefaultParametersPagesWithContext.RUnlock()
	return calls
}

// DescribeEngineDefaultParametersRequest calls DescribeEngineDefaultParametersRequestFunc.
func (mock *rdsClientMock) DescribeEngineDefaultParametersRequest(in1 *rds.DescribeEngineDefaultParametersInput) (*request.Request, *rds.DescribeEngineDefaultParametersOutput) {
	if mock.DescribeEngineDefaultParametersRequestFunc == nil {
		panic("rdsClientMock.DescribeEngineDefaultParametersRequestFunc: method is nil but rdsClient.DescribeEngineDefaultParametersRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeEngineDefaultParametersInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeEngineDefaultParametersRequest.Lock()
	mock.calls.DescribeEngineDefaultParametersRequest = append(mock.calls.DescribeEngineDefaultParametersRequest, callInfo)
	lockrdsClientMockDescribeEngineDefaultParametersRequest.Unlock()
	return mock.DescribeEngineDefaultParametersRequestFunc(in1)
}

// DescribeEngineDefaultParametersRequestCalls gets all the calls that were made to DescribeEngineDefaultParametersRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeEngineDefaultParametersRequestCalls())
func (mock *rdsClientMock) DescribeEngineDefaultParametersRequestCalls() []struct {
	In1 *rds.DescribeEngineDefaultParametersInput
} {
	var calls []struct {
		In1 *rds.DescribeEngineDefaultParametersInput
	}
	lockrdsClientMockDescribeEngineDefaultParametersRequest.RLock()
	calls = mock.calls.DescribeEngineDefaultParametersRequest
	lockrdsClientMockDescribeEngineDefaultParametersRequest.RUnlock()
	return calls
}

// DescribeEngineDefaultParametersWithContext calls DescribeEngineDefaultParametersWithContextFunc.
func (mock *rdsClientMock) DescribeEngineDefaultParametersWithContext(in1 context.Context, in2 *rds.DescribeEngineDefaultParametersInput, in3 ...request.Option) (*rds.DescribeEngineDefaultParametersOutput, error) {
	if mock.DescribeEngineDefaultParametersWithContextFunc == nil {
		panic("rdsClientMock.DescribeEngineDefaultParametersWithContextFunc: method is nil but rdsClient.DescribeEngineDefaultParametersWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeEngineDefaultParametersInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeEngineDefaultParametersWithContext.Lock()
	mock.calls.DescribeEngineDefaultParametersWithContext = append(mock.calls.DescribeEngineDefaultParametersWithContext, callInfo)
	lockrdsClientMockDescribeEngineDefaultParametersWithContext.Unlock()
	return mock.DescribeEngineDefaultParametersWithContextFunc(in1, in2, in3...)
}

// DescribeEngineDefaultParametersWithContextCalls gets all the calls that were made to DescribeEngineDefaultParametersWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeEngineDefaultParametersWithContextCalls())
func (mock *rdsClientMock) DescribeEngineDefaultParametersWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeEngineDefaultParametersInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeEngineDefaultParametersInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeEngineDefaultParametersWithContext.RLock()
	calls = mock.calls.DescribeEngineDefaultParametersWithContext
	lockrdsClientMockDescribeEngineDefaultParametersWithContext.RUnlock()
	return calls
}

// DescribeEventCategories calls DescribeEventCategoriesFunc.
func (mock *rdsClientMock) DescribeEventCategories(in1 *rds.DescribeEventCategoriesInput) (*rds.DescribeEventCategoriesOutput, error) {
	if mock.DescribeEventCategoriesFunc == nil {
		panic("rdsClientMock.DescribeEventCategoriesFunc: method is nil but rdsClient.DescribeEventCategories was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeEventCategoriesInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeEventCategories.Lock()
	mock.calls.DescribeEventCategories = append(mock.calls.DescribeEventCategories, callInfo)
	lockrdsClientMockDescribeEventCategories.Unlock()
	return mock.DescribeEventCategoriesFunc(in1)
}

// DescribeEventCategoriesCalls gets all the calls that were made to DescribeEventCategories.
// Check the length with:
//     len(mockedrdsClient.DescribeEventCategoriesCalls())
func (mock *rdsClientMock) DescribeEventCategoriesCalls() []struct {
	In1 *rds.DescribeEventCategoriesInput
} {
	var calls []struct {
		In1 *rds.DescribeEventCategoriesInput
	}
	lockrdsClientMockDescribeEventCategories.RLock()
	calls = mock.calls.DescribeEventCategories
	lockrdsClientMockDescribeEventCategories.RUnlock()
	return calls
}

// DescribeEventCategoriesRequest calls DescribeEventCategoriesRequestFunc.
func (mock *rdsClientMock) DescribeEventCategoriesRequest(in1 *rds.DescribeEventCategoriesInput) (*request.Request, *rds.DescribeEventCategoriesOutput) {
	if mock.DescribeEventCategoriesRequestFunc == nil {
		panic("rdsClientMock.DescribeEventCategoriesRequestFunc: method is nil but rdsClient.DescribeEventCategoriesRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeEventCategoriesInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeEventCategoriesRequest.Lock()
	mock.calls.DescribeEventCategoriesRequest = append(mock.calls.DescribeEventCategoriesRequest, callInfo)
	lockrdsClientMockDescribeEventCategoriesRequest.Unlock()
	return mock.DescribeEventCategoriesRequestFunc(in1)
}

// DescribeEventCategoriesRequestCalls gets all the calls that were made to DescribeEventCategoriesRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeEventCategoriesRequestCalls())
func (mock *rdsClientMock) DescribeEventCategoriesRequestCalls() []struct {
	In1 *rds.DescribeEventCategoriesInput
} {
	var calls []struct {
		In1 *rds.DescribeEventCategoriesInput
	}
	lockrdsClientMockDescribeEventCategoriesRequest.RLock()
	calls = mock.calls.DescribeEventCategoriesRequest
	lockrdsClientMockDescribeEventCategoriesRequest.RUnlock()
	return calls
}

// DescribeEventCategoriesWithContext calls DescribeEventCategoriesWithContextFunc.
func (mock *rdsClientMock) DescribeEventCategoriesWithContext(in1 context.Context, in2 *rds.DescribeEventCategoriesInput, in3 ...request.Option) (*rds.DescribeEventCategoriesOutput, error) {
	if mock.DescribeEventCategoriesWithContextFunc == nil {
		panic("rdsClientMock.DescribeEventCategoriesWithContextFunc: method is nil but rdsClient.DescribeEventCategoriesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeEventCategoriesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeEventCategoriesWithContext.Lock()
	mock.calls.DescribeEventCategoriesWithContext = append(mock.calls.DescribeEventCategoriesWithContext, callInfo)
	lockrdsClientMockDescribeEventCategoriesWithContext.Unlock()
	return mock.DescribeEventCategoriesWithContextFunc(in1, in2, in3...)
}

// DescribeEventCategoriesWithContextCalls gets all the calls that were made to DescribeEventCategoriesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeEventCategoriesWithContextCalls())
func (mock *rdsClientMock) DescribeEventCategoriesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeEventCategoriesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeEventCategoriesInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeEventCategoriesWithContext.RLock()
	calls = mock.calls.DescribeEventCategoriesWithContext
	lockrdsClientMockDescribeEventCategoriesWithContext.RUnlock()
	return calls
}

// DescribeEventSubscriptions calls DescribeEventSubscriptionsFunc.
func (mock *rdsClientMock) DescribeEventSubscriptions(in1 *rds.DescribeEventSubscriptionsInput) (*rds.DescribeEventSubscriptionsOutput, error) {
	if mock.DescribeEventSubscriptionsFunc == nil {
		panic("rdsClientMock.DescribeEventSubscriptionsFunc: method is nil but rdsClient.DescribeEventSubscriptions was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeEventSubscriptionsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeEventSubscriptions.Lock()
	mock.calls.DescribeEventSubscriptions = append(mock.calls.DescribeEventSubscriptions, callInfo)
	lockrdsClientMockDescribeEventSubscriptions.Unlock()
	return mock.DescribeEventSubscriptionsFunc(in1)
}

// DescribeEventSubscriptionsCalls gets all the calls that were made to DescribeEventSubscriptions.
// Check the length with:
//     len(mockedrdsClient.DescribeEventSubscriptionsCalls())
func (mock *rdsClientMock) DescribeEventSubscriptionsCalls() []struct {
	In1 *rds.DescribeEventSubscriptionsInput
} {
	var calls []struct {
		In1 *rds.DescribeEventSubscriptionsInput
	}
	lockrdsClientMockDescribeEventSubscriptions.RLock()
	calls = mock.calls.DescribeEventSubscriptions
	lockrdsClientMockDescribeEventSubscriptions.RUnlock()
	return calls
}

// DescribeEventSubscriptionsPages calls DescribeEventSubscriptionsPagesFunc.
func (mock *rdsClientMock) DescribeEventSubscriptionsPages(in1 *rds.DescribeEventSubscriptionsInput, in2 func(*rds.DescribeEventSubscriptionsOutput, bool) bool) error {
	if mock.DescribeEventSubscriptionsPagesFunc == nil {
		panic("rdsClientMock.DescribeEventSubscriptionsPagesFunc: method is nil but rdsClient.DescribeEventSubscriptionsPages was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeEventSubscriptionsInput
		In2 func(*rds.DescribeEventSubscriptionsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockrdsClientMockDescribeEventSubscriptionsPages.Lock()
	mock.calls.DescribeEventSubscriptionsPages = append(mock.calls.DescribeEventSubscriptionsPages, callInfo)
	lockrdsClientMockDescribeEventSubscriptionsPages.Unlock()
	return mock.DescribeEventSubscriptionsPagesFunc(in1, in2)
}

// DescribeEventSubscriptionsPagesCalls gets all the calls that were made to DescribeEventSubscriptionsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeEventSubscriptionsPagesCalls())
func (mock *rdsClientMock) DescribeEventSubscriptionsPagesCalls() []struct {
	In1 *rds.DescribeEventSubscriptionsInput
	In2 func(*rds.DescribeEventSubscriptionsOutput, bool) bool
} {
	var calls []struct {
		In1 *rds.DescribeEventSubscriptionsInput
		In2 func(*rds.DescribeEventSubscriptionsOutput, bool) bool
	}
	lockrdsClientMockDescribeEventSubscriptionsPages.RLock()
	calls = mock.calls.DescribeEventSubscriptionsPages
	lockrdsClientMockDescribeEventSubscriptionsPages.RUnlock()
	return calls
}

// DescribeEventSubscriptionsPagesWithContext calls DescribeEventSubscriptionsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeEventSubscriptionsPagesWithContext(in1 context.Context, in2 *rds.DescribeEventSubscriptionsInput, in3 func(*rds.DescribeEventSubscriptionsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeEventSubscriptionsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeEventSubscriptionsPagesWithContextFunc: method is nil but rdsClient.DescribeEventSubscriptionsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeEventSubscriptionsInput
		In3 func(*rds.DescribeEventSubscriptionsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockrdsClientMockDescribeEventSubscriptionsPagesWithContext.Lock()
	mock.calls.DescribeEventSubscriptionsPagesWithContext = append(mock.calls.DescribeEventSubscriptionsPagesWithContext, callInfo)
	lockrdsClientMockDescribeEventSubscriptionsPagesWithContext.Unlock()
	return mock.DescribeEventSubscriptionsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeEventSubscriptionsPagesWithContextCalls gets all the calls that were made to DescribeEventSubscriptionsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeEventSubscriptionsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeEventSubscriptionsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeEventSubscriptionsInput
	In3 func(*rds.DescribeEventSubscriptionsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeEventSubscriptionsInput
		In3 func(*rds.DescribeEventSubscriptionsOutput, bool) bool
		In4 []request.Option
	}
	lockrdsClientMockDescribeEventSubscriptionsPagesWithContext.RLock()
	calls = mock.calls.DescribeEventSubscriptionsPagesWithContext
	lockrdsClientMockDescribeEventSubscriptionsPagesWithContext.RUnlock()
	return calls
}

// DescribeEventSubscriptionsRequest calls DescribeEventSubscriptionsRequestFunc.
func (mock *rdsClientMock) DescribeEventSubscriptionsRequest(in1 *rds.DescribeEventSubscriptionsInput) (*request.Request, *rds.DescribeEventSubscriptionsOutput) {
	if mock.DescribeEventSubscriptionsRequestFunc == nil {
		panic("rdsClientMock.DescribeEventSubscriptionsRequestFunc: method is nil but rdsClient.DescribeEventSubscriptionsRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeEventSubscriptionsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeEventSubscriptionsRequest.Lock()
	mock.calls.DescribeEventSubscriptionsRequest = append(mock.calls.DescribeEventSubscriptionsRequest, callInfo)
	lockrdsClientMockDescribeEventSubscriptionsRequest.Unlock()
	return mock.DescribeEventSubscriptionsRequestFunc(in1)
}

// DescribeEventSubscriptionsRequestCalls gets all the calls that were made to DescribeEventSubscriptionsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeEventSubscriptionsRequestCalls())
func (mock *rdsClientMock) DescribeEventSubscriptionsRequestCalls() []struct {
	In1 *rds.DescribeEventSubscriptionsInput
} {
	var calls []struct {
		In1 *rds.DescribeEventSubscriptionsInput
	}
	lockrdsClientMockDescribeEventSubscriptionsRequest.RLock()
	calls = mock.calls.DescribeEventSubscriptionsRequest
	lockrdsClientMockDescribeEventSubscriptionsRequest.RUnlock()
	return calls
}

// DescribeEventSubscriptionsWithContext calls DescribeEventSubscriptionsWithContextFunc.
func (mock *rdsClientMock) DescribeEventSubscriptionsWithContext(in1 context.Context, in2 *rds.DescribeEventSubscriptionsInput, in3 ...request.Option) (*rds.DescribeEventSubscriptionsOutput, error) {
	if mock.DescribeEventSubscriptionsWithContextFunc == nil {
		panic("rdsClientMock.DescribeEventSubscriptionsWithContextFunc: method is nil but rdsClient.DescribeEventSubscriptionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeEventSubscriptionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeEventSubscriptionsWithContext.Lock()
	mock.calls.DescribeEventSubscriptionsWithContext = append(mock.calls.DescribeEventSubscriptionsWithContext, callInfo)
	lockrdsClientMockDescribeEventSubscriptionsWithContext.Unlock()
	return mock.DescribeEventSubscriptionsWithContextFunc(in1, in2, in3...)
}

// DescribeEventSubscriptionsWithContextCalls gets all the calls that were made to DescribeEventSubscriptionsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeEventSubscriptionsWithContextCalls())
func (mock *rdsClientMock) DescribeEventSubscriptionsWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeEventSubscriptionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeEventSubscriptionsInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeEventSubscriptionsWithContext.RLock()
	calls = mock.calls.DescribeEventSubscriptionsWithContext
	lockrdsClientMockDescribeEventSubscriptionsWithContext.RUnlock()
	return calls
}

// DescribeEvents calls DescribeEventsFunc.
func (mock *rdsClientMock) DescribeEvents(in1 *rds.DescribeEventsInput) (*rds.DescribeEventsOutput, error) {
	if mock.DescribeEventsFunc == nil {
		panic("rdsClientMock.DescribeEventsFunc: method is nil but rdsClient.DescribeEvents was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeEventsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeEvents.Lock()
	mock.calls.DescribeEvents = append(mock.calls.DescribeEvents, callInfo)
	lockrdsClientMockDescribeEvents.Unlock()
	return mock.DescribeEventsFunc(in1)
}

// DescribeEventsCalls gets all the calls that were made to DescribeEvents.
// Check the length with:
//     len(mockedrdsClient.DescribeEventsCalls())
func (mock *rdsClientMock) DescribeEventsCalls() []struct {
	In1 *rds.DescribeEventsInput
} {
	var calls []struct {
		In1 *rds.DescribeEventsInput
	}
	lockrdsClientMockDescribeEvents.RLock()
	calls = mock.calls.DescribeEvents
	lockrdsClientMockDescribeEvents.RUnlock()
	return calls
}

// DescribeEventsPages calls DescribeEventsPagesFunc.
func (mock *rdsClientMock) DescribeEventsPages(in1 *rds.DescribeEventsInput, in2 func(*rds.DescribeEventsOutput, bool) bool) error {
	if mock.DescribeEventsPagesFunc == nil {
		panic("rdsClientMock.DescribeEventsPagesFunc: method is nil but rdsClient.DescribeEventsPages was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeEventsInput
		In2 func(*rds.DescribeEventsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockrdsClientMockDescribeEventsPages.Lock()
	mock.calls.DescribeEventsPages = append(mock.calls.DescribeEventsPages, callInfo)
	lockrdsClientMockDescribeEventsPages.Unlock()
	return mock.DescribeEventsPagesFunc(in1, in2)
}

// DescribeEventsPagesCalls gets all the calls that were made to DescribeEventsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeEventsPagesCalls())
func (mock *rdsClientMock) DescribeEventsPagesCalls() []struct {
	In1 *rds.DescribeEventsInput
	In2 func(*rds.DescribeEventsOutput, bool) bool
} {
	var calls []struct {
		In1 *rds.DescribeEventsInput
		In2 func(*rds.DescribeEventsOutput, bool) bool
	}
	lockrdsClientMockDescribeEventsPages.RLock()
	calls = mock.calls.DescribeEventsPages
	lockrdsClientMockDescribeEventsPages.RUnlock()
	return calls
}

// DescribeEventsPagesWithContext calls DescribeEventsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeEventsPagesWithContext(in1 context.Context, in2 *rds.DescribeEventsInput, in3 func(*rds.DescribeEventsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeEventsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeEventsPagesWithContextFunc: method is nil but rdsClient.DescribeEventsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeEventsInput
		In3 func(*rds.DescribeEventsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockrdsClientMockDescribeEventsPagesWithContext.Lock()
	mock.calls.DescribeEventsPagesWithContext = append(mock.calls.DescribeEventsPagesWithContext, callInfo)
	lockrdsClientMockDescribeEventsPagesWithContext.Unlock()
	return mock.DescribeEventsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeEventsPagesWithContextCalls gets all the calls that were made to DescribeEventsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeEventsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeEventsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeEventsInput
	In3 func(*rds.DescribeEventsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeEventsInput
		In3 func(*rds.DescribeEventsOutput, bool) bool
		In4 []request.Option
	}
	lockrdsClientMockDescribeEventsPagesWithContext.RLock()
	calls = mock.calls.DescribeEventsPagesWithContext
	lockrdsClientMockDescribeEventsPagesWithContext.RUnlock()
	return calls
}

// DescribeEventsRequest calls DescribeEventsRequestFunc.
func (mock *rdsClientMock) DescribeEventsRequest(in1 *rds.DescribeEventsInput) (*request.Request, *rds.DescribeEventsOutput) {
	if mock.DescribeEventsRequestFunc == nil {
		panic("rdsClientMock.DescribeEventsRequestFunc: method is nil but rdsClient.DescribeEventsRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeEventsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeEventsRequest.Lock()
	mock.calls.DescribeEventsRequest = append(mock.calls.DescribeEventsRequest, callInfo)
	lockrdsClientMockDescribeEventsRequest.Unlock()
	return mock.DescribeEventsRequestFunc(in1)
}

// DescribeEventsRequestCalls gets all the calls that were made to DescribeEventsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeEventsRequestCalls())
func (mock *rdsClientMock) DescribeEventsRequestCalls() []struct {
	In1 *rds.DescribeEventsInput
} {
	var calls []struct {
		In1 *rds.DescribeEventsInput
	}
	lockrdsClientMockDescribeEventsRequest.RLock()
	calls = mock.calls.DescribeEventsRequest
	lockrdsClientMockDescribeEventsRequest.RUnlock()
	return calls
}

// DescribeEventsWithContext calls DescribeEventsWithContextFunc.
func (mock *rdsClientMock) DescribeEventsWithContext(in1 context.Context, in2 *rds.DescribeEventsInput, in3 ...request.Option) (*rds.DescribeEventsOutput, error) {
	if mock.DescribeEventsWithContextFunc == nil {
		panic("rdsClientMock.DescribeEventsWithContextFunc: method is nil but rdsClient.DescribeEventsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeEventsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeEventsWithContext.Lock()
	mock.calls.DescribeEventsWithContext = append(mock.calls.DescribeEventsWithContext, callInfo)
	lockrdsClientMockDescribeEventsWithContext.Unlock()
	return mock.DescribeEventsWithContextFunc(in1, in2, in3...)
}

// DescribeEventsWithContextCalls gets all the calls that were made to DescribeEventsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeEventsWithContextCalls())
func (mock *rdsClientMock) DescribeEventsWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeEventsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeEventsInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeEventsWithContext.RLock()
	calls = mock.calls.DescribeEventsWithContext
	lockrdsClientMockDescribeEventsWithContext.RUnlock()
	return calls
}

// DescribeExportTasks calls DescribeExportTasksFunc.
func (mock *rdsClientMock) DescribeExportTasks(in1 *rds.DescribeExportTasksInput) (*rds.DescribeExportTasksOutput, error) {
	if mock.DescribeExportTasksFunc == nil {
		panic("rdsClientMock.DescribeExportTasksFunc: method is nil but rdsClient.DescribeExportTasks was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeExportTasksInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeExportTasks.Lock()
	mock.calls.DescribeExportTasks = append(mock.calls.DescribeExportTasks, callInfo)
	lockrdsClientMockDescribeExportTasks.Unlock()
	return mock.DescribeExportTasksFunc(in1)
}

// DescribeExportTasksCalls gets all the calls that were made to DescribeExportTasks.
// Check the length with:
//     len(mockedrdsClient.DescribeExportTasksCalls())
func (mock *rdsClientMock) DescribeExportTasksCalls() []struct {
	In1 *rds.DescribeExportTasksInput
} {
	var calls []struct {
		In1 *rds.DescribeExportTasksInput
	}
	lockrdsClientMockDescribeExportTasks.RLock()
	calls = mock.calls.DescribeExportTasks
	lockrdsClientMockDescribeExportTasks.RUnlock()
	return calls
}

// DescribeExportTasksPages calls DescribeExportTasksPagesFunc.
func (mock *rdsClientMock) DescribeExportTasksPages(in1 *rds.DescribeExportTasksInput, in2 func(*rds.DescribeExportTasksOutput, bool) bool) error {
	if mock.DescribeExportTasksPagesFunc == nil {
		panic("rdsClientMock.DescribeExportTasksPagesFunc: method is nil but rdsClient.DescribeExportTasksPages was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeExportTasksInput
		In2 func(*rds.DescribeExportTasksOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockrdsClientMockDescribeExportTasksPages.Lock()
	mock.calls.DescribeExportTasksPages = append(mock.calls.DescribeExportTasksPages, callInfo)
	lockrdsClientMockDescribeExportTasksPages.Unlock()
	return mock.DescribeExportTasksPagesFunc(in1, in2)
}

// DescribeExportTasksPagesCalls gets all the calls that were made to DescribeExportTasksPages.
// Check the length with:
//     len(mockedrdsClient.DescribeExportTasksPagesCalls())
func (mock *rdsClientMock) DescribeExportTasksPagesCalls() []struct {
	In1 *rds.DescribeExportTasksInput
	In2 func(*rds.DescribeExportTasksOutput, bool) bool
} {
	var calls []struct {
		In1 *rds.DescribeExportTasksInput
		In2 func(*rds.DescribeExportTasksOutput, bool) bool
	}
	lockrdsClientMockDescribeExportTasksPages.RLock()
	calls = mock.calls.DescribeExportTasksPages
	lockrdsClientMockDescribeExportTasksPages.RUnlock()
	return calls
}

// DescribeExportTasksPagesWithContext calls DescribeExportTasksPagesWithContextFunc.
func (mock *rdsClientMock) DescribeExportTasksPagesWithContext(in1 context.Context, in2 *rds.DescribeExportTasksInput, in3 func(*rds.DescribeExportTasksOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeExportTasksPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeExportTasksPagesWithContextFunc: method is nil but rdsClient.DescribeExportTasksPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeExportTasksInput
		In3 func(*rds.DescribeExportTasksOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockrdsClientMockDescribeExportTasksPagesWithContext.Lock()
	mock.calls.DescribeExportTasksPagesWithContext = append(mock.calls.DescribeExportTasksPagesWithContext, callInfo)
	lockrdsClientMockDescribeExportTasksPagesWithContext.Unlock()
	return mock.DescribeExportTasksPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeExportTasksPagesWithContextCalls gets all the calls that were made to DescribeExportTasksPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeExportTasksPagesWithContextCalls())
func (mock *rdsClientMock) DescribeExportTasksPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeExportTasksInput
	In3 func(*rds.DescribeExportTasksOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeExportTasksInput
		In3 func(*rds.DescribeExportTasksOutput, bool) bool
		In4 []request.Option
	}
	lockrdsClientMockDescribeExportTasksPagesWithContext.RLock()
	calls = mock.calls.DescribeExportTasksPagesWithContext
	lockrdsClientMockDescribeExportTasksPagesWithContext.RUnlock()
	return calls
}

// DescribeExportTasksRequest calls DescribeExportTasksRequestFunc.
func (mock *rdsClientMock) DescribeExportTasksRequest(in1 *rds.DescribeExportTasksInput) (*request.Request, *rds.DescribeExportTasksOutput) {
	if mock.DescribeExportTasksRequestFunc == nil {
		panic("rdsClientMock.DescribeExportTasksRequestFunc: method is nil but rdsClient.DescribeExportTasksRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeExportTasksInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeExportTasksRequest.Lock()
	mock.calls.DescribeExportTasksRequest = append(mock.calls.DescribeExportTasksRequest, callInfo)
	lockrdsClientMockDescribeExportTasksRequest.Unlock()
	return mock.DescribeExportTasksRequestFunc(in1)
}

// DescribeExportTasksRequestCalls gets all the calls that were made to DescribeExportTasksRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeExportTasksRequestCalls())
func (mock *rdsClientMock) DescribeExportTasksRequestCalls() []struct {
	In1 *rds.DescribeExportTasksInput
} {
	var calls []struct {
		In1 *rds.DescribeExportTasksInput
	}
	lockrdsClientMockDescribeExportTasksRequest.RLock()
	calls = mock.calls.DescribeExportTasksRequest
	lockrdsClientMockDescribeExportTasksRequest.RUnlock()
	return calls
}

// DescribeExportTasksWithContext calls DescribeExportTasksWithContextFunc.
func (mock *rdsClientMock) DescribeExportTasksWithContext(in1 context.Context, in2 *rds.DescribeExportTasksInput, in3 ...request.Option) (*rds.DescribeExportTasksOutput, error) {
	if mock.DescribeExportTasksWithContextFunc == nil {
		panic("rdsClientMock.DescribeExportTasksWithContextFunc: method is nil but rdsClient.DescribeExportTasksWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeExportTasksInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeExportTasksWithContext.Lock()
	mock.calls.DescribeExportTasksWithContext = append(mock.calls.DescribeExportTasksWithContext, callInfo)
	lockrdsClientMockDescribeExportTasksWithContext.Unlock()
	return mock.DescribeExportTasksWithContextFunc(in1, in2, in3...)
}

// DescribeExportTasksWithContextCalls gets all the calls that were made to DescribeExportTasksWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeExportTasksWithContextCalls())
func (mock *rdsClientMock) DescribeExportTasksWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeExportTasksInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeExportTasksInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeExportTasksWithContext.RLock()
	calls = mock.calls.DescribeExportTasksWithContext
	lockrdsClientMockDescribeExportTasksWithContext.RUnlock()
	return calls
}

// DescribeGlobalClusters calls DescribeGlobalClustersFunc.
func (mock *rdsClientMock) DescribeGlobalClusters(in1 *rds.DescribeGlobalClustersInput) (*rds.DescribeGlobalClustersOutput, error) {
	if mock.DescribeGlobalClustersFunc == nil {
		panic("rdsClientMock.DescribeGlobalClustersFunc: method is nil but rdsClient.DescribeGlobalClusters was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeGlobalClustersInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeGlobalClusters.Lock()
	mock.calls.DescribeGlobalClusters = append(mock.calls.DescribeGlobalClusters, callInfo)
	lockrdsClientMockDescribeGlobalClusters.Unlock()
	return mock.DescribeGlobalClustersFunc(in1)
}

// DescribeGlobalClustersCalls gets all the calls that were made to DescribeGlobalClusters.
// Check the length with:
//     len(mockedrdsClient.DescribeGlobalClustersCalls())
func (mock *rdsClientMock) DescribeGlobalClustersCalls() []struct {
	In1 *rds.DescribeGlobalClustersInput
} {
	var calls []struct {
		In1 *rds.DescribeGlobalClustersInput
	}
	lockrdsClientMockDescribeGlobalClusters.RLock()
	calls = mock.calls.DescribeGlobalClusters
	lockrdsClientMockDescribeGlobalClusters.RUnlock()
	return calls
}

// DescribeGlobalClustersPages calls DescribeGlobalClustersPagesFunc.
func (mock *rdsClientMock) DescribeGlobalClustersPages(in1 *rds.DescribeGlobalClustersInput, in2 func(*rds.DescribeGlobalClustersOutput, bool) bool) error {
	if mock.DescribeGlobalClustersPagesFunc == nil {
		panic("rdsClientMock.DescribeGlobalClustersPagesFunc: method is nil but rdsClient.DescribeGlobalClustersPages was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeGlobalClustersInput
		In2 func(*rds.DescribeGlobalClustersOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockrdsClientMockDescribeGlobalClustersPages.Lock()
	mock.calls.DescribeGlobalClustersPages = append(mock.calls.DescribeGlobalClustersPages, callInfo)
	lockrdsClientMockDescribeGlobalClustersPages.Unlock()
	return mock.DescribeGlobalClustersPagesFunc(in1, in2)
}

// DescribeGlobalClustersPagesCalls gets all the calls that were made to DescribeGlobalClustersPages.
// Check the length with:
//     len(mockedrdsClient.DescribeGlobalClustersPagesCalls())
func (mock *rdsClientMock) DescribeGlobalClustersPagesCalls() []struct {
	In1 *rds.DescribeGlobalClustersInput
	In2 func(*rds.DescribeGlobalClustersOutput, bool) bool
} {
	var calls []struct {
		In1 *rds.DescribeGlobalClustersInput
		In2 func(*rds.DescribeGlobalClustersOutput, bool) bool
	}
	lockrdsClientMockDescribeGlobalClustersPages.RLock()
	calls = mock.calls.DescribeGlobalClustersPages
	lockrdsClientMockDescribeGlobalClustersPages.RUnlock()
	return calls
}

// DescribeGlobalClustersPagesWithContext calls DescribeGlobalClustersPagesWithContextFunc.
func (mock *rdsClientMock) DescribeGlobalClustersPagesWithContext(in1 context.Context, in2 *rds.DescribeGlobalClustersInput, in3 func(*rds.DescribeGlobalClustersOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeGlobalClustersPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeGlobalClustersPagesWithContextFunc: method is nil but rdsClient.DescribeGlobalClustersPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeGlobalClustersInput
		In3 func(*rds.DescribeGlobalClustersOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockrdsClientMockDescribeGlobalClustersPagesWithContext.Lock()
	mock.calls.DescribeGlobalClustersPagesWithContext = append(mock.calls.DescribeGlobalClustersPagesWithContext, callInfo)
	lockrdsClientMockDescribeGlobalClustersPagesWithContext.Unlock()
	return mock.DescribeGlobalClustersPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeGlobalClustersPagesWithContextCalls gets all the calls that were made to DescribeGlobalClustersPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeGlobalClustersPagesWithContextCalls())
func (mock *rdsClientMock) DescribeGlobalClustersPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeGlobalClustersInput
	In3 func(*rds.DescribeGlobalClustersOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeGlobalClustersInput
		In3 func(*rds.DescribeGlobalClustersOutput, bool) bool
		In4 []request.Option
	}
	lockrdsClientMockDescribeGlobalClustersPagesWithContext.RLock()
	calls = mock.calls.DescribeGlobalClustersPagesWithContext
	lockrdsClientMockDescribeGlobalClustersPagesWithContext.RUnlock()
	return calls
}

// DescribeGlobalClustersRequest calls DescribeGlobalClustersRequestFunc.
func (mock *rdsClientMock) DescribeGlobalClustersRequest(in1 *rds.DescribeGlobalClustersInput) (*request.Request, *rds.DescribeGlobalClustersOutput) {
	if mock.DescribeGlobalClustersRequestFunc == nil {
		panic("rdsClientMock.DescribeGlobalClustersRequestFunc: method is nil but rdsClient.DescribeGlobalClustersRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeGlobalClustersInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeGlobalClustersRequest.Lock()
	mock.calls.DescribeGlobalClustersRequest = append(mock.calls.DescribeGlobalClustersRequest, callInfo)
	lockrdsClientMockDescribeGlobalClustersRequest.Unlock()
	return mock.DescribeGlobalClustersRequestFunc(in1)
}

// DescribeGlobalClustersRequestCalls gets all the calls that were made to DescribeGlobalClustersRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeGlobalClustersRequestCalls())
func (mock *rdsClientMock) DescribeGlobalClustersRequestCalls() []struct {
	In1 *rds.DescribeGlobalClustersInput
} {
	var calls []struct {
		In1 *rds.DescribeGlobalClustersInput
	}
	lockrdsClientMockDescribeGlobalClustersRequest.RLock()
	calls = mock.calls.DescribeGlobalClustersRequest
	lockrdsClientMockDescribeGlobalClustersRequest.RUnlock()
	return calls
}

// DescribeGlobalClustersWithContext calls DescribeGlobalClustersWithContextFunc.
func (mock *rdsClientMock) DescribeGlobalClustersWithContext(in1 context.Context, in2 *rds.DescribeGlobalClustersInput, in3 ...request.Option) (*rds.DescribeGlobalClustersOutput, error) {
	if mock.DescribeGlobalClustersWithContextFunc == nil {
		panic("rdsClientMock.DescribeGlobalClustersWithContextFunc: method is nil but rdsClient.DescribeGlobalClustersWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeGlobalClustersInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeGlobalClustersWithContext.Lock()
	mock.calls.DescribeGlobalClustersWithContext = append(mock.calls.DescribeGlobalClustersWithContext, callInfo)
	lockrdsClientMockDescribeGlobalClustersWithContext.Unlock()
	return mock.DescribeGlobalClustersWithContextFunc(in1, in2, in3...)
}

// DescribeGlobalClustersWithContextCalls gets all the calls that were made to DescribeGlobalClustersWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeGlobalClustersWithContextCalls())
func (mock *rdsClientMock) DescribeGlobalClustersWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeGlobalClustersInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeGlobalClustersInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeGlobalClustersWithContext.RLock()
	calls = mock.calls.DescribeGlobalClustersWithContext
	lockrdsClientMockDescribeGlobalClustersWithContext.RUnlock()
	return calls
}

// DescribeInstallationMedia calls DescribeInstallationMediaFunc.
func (mock *rdsClientMock) DescribeInstallationMedia(in1 *rds.DescribeInstallationMediaInput) (*rds.DescribeInstallationMediaOutput, error) {
	if mock.DescribeInstallationMediaFunc == nil {
		panic("rdsClientMock.DescribeInstallationMediaFunc: method is nil but rdsClient.DescribeInstallationMedia was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeInstallationMediaInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeInstallationMedia.Lock()
	mock.calls.DescribeInstallationMedia = append(mock.calls.DescribeInstallationMedia, callInfo)
	lockrdsClientMockDescribeInstallationMedia.Unlock()
	return mock.DescribeInstallationMediaFunc(in1)
}

// DescribeInstallationMediaCalls gets all the calls that were made to DescribeInstallationMedia.
// Check the length with:
//     len(mockedrdsClient.DescribeInstallationMediaCalls())
func (mock *rdsClientMock) DescribeInstallationMediaCalls() []struct {
	In1 *rds.DescribeInstallationMediaInput
} {
	var calls []struct {
		In1 *rds.DescribeInstallationMediaInput
	}
	lockrdsClientMockDescribeInstallationMedia.RLock()
	calls = mock.calls.DescribeInstallationMedia
	lockrdsClientMockDescribeInstallationMedia.RUnlock()
	return calls
}

// DescribeInstallationMediaPages calls DescribeInstallationMediaPagesFunc.
func (mock *rdsClientMock) DescribeInstallationMediaPages(in1 *rds.DescribeInstallationMediaInput, in2 func(*rds.DescribeInstallationMediaOutput, bool) bool) error {
	if mock.DescribeInstallationMediaPagesFunc == nil {
		panic("rdsClientMock.DescribeInstallationMediaPagesFunc: method is nil but rdsClient.DescribeInstallationMediaPages was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeInstallationMediaInput
		In2 func(*rds.DescribeInstallationMediaOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockrdsClientMockDescribeInstallationMediaPages.Lock()
	mock.calls.DescribeInstallationMediaPages = append(mock.calls.DescribeInstallationMediaPages, callInfo)
	lockrdsClientMockDescribeInstallationMediaPages.Unlock()
	return mock.DescribeInstallationMediaPagesFunc(in1, in2)
}

// DescribeInstallationMediaPagesCalls gets all the calls that were made to DescribeInstallationMediaPages.
// Check the length with:
//     len(mockedrdsClient.DescribeInstallationMediaPagesCalls())
func (mock *rdsClientMock) DescribeInstallationMediaPagesCalls() []struct {
	In1 *rds.DescribeInstallationMediaInput
	In2 func(*rds.DescribeInstallationMediaOutput, bool) bool
} {
	var calls []struct {
		In1 *rds.DescribeInstallationMediaInput
		In2 func(*rds.DescribeInstallationMediaOutput, bool) bool
	}
	lockrdsClientMockDescribeInstallationMediaPages.RLock()
	calls = mock.calls.DescribeInstallationMediaPages
	lockrdsClientMockDescribeInstallationMediaPages.RUnlock()
	return calls
}

// DescribeInstallationMediaPagesWithContext calls DescribeInstallationMediaPagesWithContextFunc.
func (mock *rdsClientMock) DescribeInstallationMediaPagesWithContext(in1 context.Context, in2 *rds.DescribeInstallationMediaInput, in3 func(*rds.DescribeInstallationMediaOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeInstallationMediaPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeInstallationMediaPagesWithContextFunc: method is nil but rdsClient.DescribeInstallationMediaPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeInstallationMediaInput
		In3 func(*rds.DescribeInstallationMediaOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockrdsClientMockDescribeInstallationMediaPagesWithContext.Lock()
	mock.calls.DescribeInstallationMediaPagesWithContext = append(mock.calls.DescribeInstallationMediaPagesWithContext, callInfo)
	lockrdsClientMockDescribeInstallationMediaPagesWithContext.Unlock()
	return mock.DescribeInstallationMediaPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeInstallationMediaPagesWithContextCalls gets all the calls that were made to DescribeInstallationMediaPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeInstallationMediaPagesWithContextCalls())
func (mock *rdsClientMock) DescribeInstallationMediaPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeInstallationMediaInput
	In3 func(*rds.DescribeInstallationMediaOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeInstallationMediaInput
		In3 func(*rds.DescribeInstallationMediaOutput, bool) bool
		In4 []request.Option
	}
	lockrdsClientMockDescribeInstallationMediaPagesWithContext.RLock()
	calls = mock.calls.DescribeInstallationMediaPagesWithContext
	lockrdsClientMockDescribeInstallationMediaPagesWithContext.RUnlock()
	return calls
}

// DescribeInstallationMediaRequest calls DescribeInstallationMediaRequestFunc.
func (mock *rdsClientMock) DescribeInstallationMediaRequest(in1 *rds.DescribeInstallationMediaInput) (*request.Request, *rds.DescribeInstallationMediaOutput) {
	if mock.DescribeInstallationMediaRequestFunc == nil {
		panic("rdsClientMock.DescribeInstallationMediaRequestFunc: method is nil but rdsClient.DescribeInstallationMediaRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeInstallationMediaInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeInstallationMediaRequest.Lock()
	mock.calls.DescribeInstallationMediaRequest = append(mock.calls.DescribeInstallationMediaRequest, callInfo)
	lockrdsClientMockDescribeInstallationMediaRequest.Unlock()
	return mock.DescribeInstallationMediaRequestFunc(in1)
}

// DescribeInstallationMediaRequestCalls gets all the calls that were made to DescribeInstallationMediaRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeInstallationMediaRequestCalls())
func (mock *rdsClientMock) DescribeInstallationMediaRequestCalls() []struct {
	In1 *rds.DescribeInstallationMediaInput
} {
	var calls []struct {
		In1 *rds.DescribeInstallationMediaInput
	}
	lockrdsClientMockDescribeInstallationMediaRequest.RLock()
	calls = mock.calls.DescribeInstallationMediaRequest
	lockrdsClientMockDescribeInstallationMediaRequest.RUnlock()
	return calls
}

// DescribeInstallationMediaWithContext calls DescribeInstallationMediaWithContextFunc.
func (mock *rdsClientMock) DescribeInstallationMediaWithContext(in1 context.Context, in2 *rds.DescribeInstallationMediaInput, in3 ...request.Option) (*rds.DescribeInstallationMediaOutput, error) {
	if mock.DescribeInstallationMediaWithContextFunc == nil {
		panic("rdsClientMock.DescribeInstallationMediaWithContextFunc: method is nil but rdsClient.DescribeInstallationMediaWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeInstallationMediaInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeInstallationMediaWithContext.Lock()
	mock.calls.DescribeInstallationMediaWithContext = append(mock.calls.DescribeInstallationMediaWithContext, callInfo)
	lockrdsClientMockDescribeInstallationMediaWithContext.Unlock()
	return mock.DescribeInstallationMediaWithContextFunc(in1, in2, in3...)
}

// DescribeInstallationMediaWithContextCalls gets all the calls that were made to DescribeInstallationMediaWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeInstallationMediaWithContextCalls())
func (mock *rdsClientMock) DescribeInstallationMediaWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeInstallationMediaInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeInstallationMediaInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeInstallationMediaWithContext.RLock()
	calls = mock.calls.DescribeInstallationMediaWithContext
	lockrdsClientMockDescribeInstallationMediaWithContext.RUnlock()
	return calls
}

// DescribeOptionGroupOptions calls DescribeOptionGroupOptionsFunc.
func (mock *rdsClientMock) DescribeOptionGroupOptions(in1 *rds.DescribeOptionGroupOptionsInput) (*rds.DescribeOptionGroupOptionsOutput, error) {
	if mock.DescribeOptionGroupOptionsFunc == nil {
		panic("rdsClientMock.DescribeOptionGroupOptionsFunc: method is nil but rdsClient.DescribeOptionGroupOptions was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeOptionGroupOptionsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeOptionGroupOptions.Lock()
	mock.calls.DescribeOptionGroupOptions = append(mock.calls.DescribeOptionGroupOptions, callInfo)
	lockrdsClientMockDescribeOptionGroupOptions.Unlock()
	return mock.DescribeOptionGroupOptionsFunc(in1)
}

// DescribeOptionGroupOptionsCalls gets all the calls that were made to DescribeOptionGroupOptions.
// Check the length with:
//     len(mockedrdsClient.DescribeOptionGroupOptionsCalls())
func (mock *rdsClientMock) DescribeOptionGroupOptionsCalls() []struct {
	In1 *rds.DescribeOptionGroupOptionsInput
} {
	var calls []struct {
		In1 *rds.DescribeOptionGroupOptionsInput
	}
	lockrdsClientMockDescribeOptionGroupOptions.RLock()
	calls = mock.calls.DescribeOptionGroupOptions
	lockrdsClientMockDescribeOptionGroupOptions.RUnlock()
	return calls
}

// DescribeOptionGroupOptionsPages calls DescribeOptionGroupOptionsPagesFunc.
func (mock *rdsClientMock) DescribeOptionGroupOptionsPages(in1 *rds.DescribeOptionGroupOptionsInput, in2 func(*rds.DescribeOptionGroupOptionsOutput, bool) bool) error {
	if mock.DescribeOptionGroupOptionsPagesFunc == nil {
		panic("rdsClientMock.DescribeOptionGroupOptionsPagesFunc: method is nil but rdsClient.DescribeOptionGroupOptionsPages was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeOptionGroupOptionsInput
		In2 func(*rds.DescribeOptionGroupOptionsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockrdsClientMockDescribeOptionGroupOptionsPages.Lock()
	mock.calls.DescribeOptionGroupOptionsPages = append(mock.calls.DescribeOptionGroupOptionsPages, callInfo)
	lockrdsClientMockDescribeOptionGroupOptionsPages.Unlock()
	return mock.DescribeOptionGroupOptionsPagesFunc(in1, in2)
}

// DescribeOptionGroupOptionsPagesCalls gets all the calls that were made to DescribeOptionGroupOptionsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeOptionGroupOptionsPagesCalls())
func (mock *rdsClientMock) DescribeOptionGroupOptionsPagesCalls() []struct {
	In1 *rds.DescribeOptionGroupOptionsInput
	In2 func(*rds.DescribeOptionGroupOptionsOutput, bool) bool
} {
	var calls []struct {
		In1 *rds.DescribeOptionGroupOptionsInput
		In2 func(*rds.DescribeOptionGroupOptionsOutput, bool) bool
	}
	lockrdsClientMockDescribeOptionGroupOptionsPages.RLock()
	calls = mock.calls.DescribeOptionGroupOptionsPages
	lockrdsClientMockDescribeOptionGroupOptionsPages.RUnlock()
	return calls
}

// DescribeOptionGroupOptionsPagesWithContext calls DescribeOptionGroupOptionsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeOptionGroupOptionsPagesWithContext(in1 context.Context, in2 *rds.DescribeOptionGroupOptionsInput, in3 func(*rds.DescribeOptionGroupOptionsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeOptionGroupOptionsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeOptionGroupOptionsPagesWithContextFunc: method is nil but rdsClient.DescribeOptionGroupOptionsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeOptionGroupOptionsInput
		In3 func(*rds.DescribeOptionGroupOptionsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockrdsClientMockDescribeOptionGroupOptionsPagesWithContext.Lock()
	mock.calls.DescribeOptionGroupOptionsPagesWithContext = append(mock.calls.DescribeOptionGroupOptionsPagesWithContext, callInfo)
	lockrdsClientMockDescribeOptionGroupOptionsPagesWithContext.Unlock()
	return mock.DescribeOptionGroupOptionsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeOptionGroupOptionsPagesWithContextCalls gets all the calls that were made to DescribeOptionGroupOptionsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeOptionGroupOptionsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeOptionGroupOptionsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeOptionGroupOptionsInput
	In3 func(*rds.DescribeOptionGroupOptionsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeOptionGroupOptionsInput
		In3 func(*rds.DescribeOptionGroupOptionsOutput, bool) bool
		In4 []request.Option
	}
	lockrdsClientMockDescribeOptionGroupOptionsPagesWithContext.RLock()
	calls = mock.calls.DescribeOptionGroupOptionsPagesWithContext
	lockrdsClientMockDescribeOptionGroupOptionsPagesWithContext.RUnlock()
	return calls
}

// DescribeOptionGroupOptionsRequest calls DescribeOptionGroupOptionsRequestFunc.
func (mock *rdsClientMock) DescribeOptionGroupOptionsRequest(in1 *rds.DescribeOptionGroupOptionsInput) (*request.Request, *rds.DescribeOptionGroupOptionsOutput) {
	if mock.DescribeOptionGroupOptionsRequestFunc == nil {
		panic("rdsClientMock.DescribeOptionGroupOptionsRequestFunc: method is nil but rdsClient.DescribeOptionGroupOptionsRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeOptionGroupOptionsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeOptionGroupOptionsRequest.Lock()
	mock.calls.DescribeOptionGroupOptionsRequest = append(mock.calls.DescribeOptionGroupOptionsRequest, callInfo)
	lockrdsClientMockDescribeOptionGroupOptionsRequest.Unlock()
	return mock.DescribeOptionGroupOptionsRequestFunc(in1)
}

// DescribeOptionGroupOptionsRequestCalls gets all the calls that were made to DescribeOptionGroupOptionsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeOptionGroupOptionsRequestCalls())
func (mock *rdsClientMock) DescribeOptionGroupOptionsRequestCalls() []struct {
	In1 *rds.DescribeOptionGroupOptionsInput
} {
	var calls []struct {
		In1 *rds.DescribeOptionGroupOptionsInput
	}
	lockrdsClientMockDescribeOptionGroupOptionsRequest.RLock()
	calls = mock.calls.DescribeOptionGroupOptionsRequest
	lockrdsClientMockDescribeOptionGroupOptionsRequest.RUnlock()
	return calls
}

// DescribeOptionGroupOptionsWithContext calls DescribeOptionGroupOptionsWithContextFunc.
func (mock *rdsClientMock) DescribeOptionGroupOptionsWithContext(in1 context.Context, in2 *rds.DescribeOptionGroupOptionsInput, in3 ...request.Option) (*rds.DescribeOptionGroupOptionsOutput, error) {
	if mock.DescribeOptionGroupOptionsWithContextFunc == nil {
		panic("rdsClientMock.DescribeOptionGroupOptionsWithContextFunc: method is nil but rdsClient.DescribeOptionGroupOptionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeOptionGroupOptionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeOptionGroupOptionsWithContext.Lock()
	mock.calls.DescribeOptionGroupOptionsWithContext = append(mock.calls.DescribeOptionGroupOptionsWithContext, callInfo)
	lockrdsClientMockDescribeOptionGroupOptionsWithContext.Unlock()
	return mock.DescribeOptionGroupOptionsWithContextFunc(in1, in2, in3...)
}

// DescribeOptionGroupOptionsWithContextCalls gets all the calls that were made to DescribeOptionGroupOptionsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeOptionGroupOptionsWithContextCalls())
func (mock *rdsClientMock) DescribeOptionGroupOptionsWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeOptionGroupOptionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeOptionGroupOptionsInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeOptionGroupOptionsWithContext.RLock()
	calls = mock.calls.DescribeOptionGroupOptionsWithContext
	lockrdsClientMockDescribeOptionGroupOptionsWithContext.RUnlock()
	return calls
}

// DescribeOptionGroups calls DescribeOptionGroupsFunc.
func (mock *rdsClientMock) DescribeOptionGroups(in1 *rds.DescribeOptionGroupsInput) (*rds.DescribeOptionGroupsOutput, error) {
	if mock.DescribeOptionGroupsFunc == nil {
		panic("rdsClientMock.DescribeOptionGroupsFunc: method is nil but rdsClient.DescribeOptionGroups was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeOptionGroupsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeOptionGroups.Lock()
	mock.calls.DescribeOptionGroups = append(mock.calls.DescribeOptionGroups, callInfo)
	lockrdsClientMockDescribeOptionGroups.Unlock()
	return mock.DescribeOptionGroupsFunc(in1)
}

// DescribeOptionGroupsCalls gets all the calls that were made to DescribeOptionGroups.
// Check the length with:
//     len(mockedrdsClient.DescribeOptionGroupsCalls())
func (mock *rdsClientMock) DescribeOptionGroupsCalls() []struct {
	In1 *rds.DescribeOptionGroupsInput
} {
	var calls []struct {
		In1 *rds.DescribeOptionGroupsInput
	}
	lockrdsClientMockDescribeOptionGroups.RLock()
	calls = mock.calls.DescribeOptionGroups
	lockrdsClientMockDescribeOptionGroups.RUnlock()
	return calls
}

// DescribeOptionGroupsPages calls DescribeOptionGroupsPagesFunc.
func (mock *rdsClientMock) DescribeOptionGroupsPages(in1 *rds.DescribeOptionGroupsInput, in2 func(*rds.DescribeOptionGroupsOutput, bool) bool) error {
	if mock.DescribeOptionGroupsPagesFunc == nil {
		panic("rdsClientMock.DescribeOptionGroupsPagesFunc: method is nil but rdsClient.DescribeOptionGroupsPages was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeOptionGroupsInput
		In2 func(*rds.DescribeOptionGroupsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockrdsClientMockDescribeOptionGroupsPages.Lock()
	mock.calls.DescribeOptionGroupsPages = append(mock.calls.DescribeOptionGroupsPages, callInfo)
	lockrdsClientMockDescribeOptionGroupsPages.Unlock()
	return mock.DescribeOptionGroupsPagesFunc(in1, in2)
}

// DescribeOptionGroupsPagesCalls gets all the calls that were made to DescribeOptionGroupsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeOptionGroupsPagesCalls())
func (mock *rdsClientMock) DescribeOptionGroupsPagesCalls() []struct {
	In1 *rds.DescribeOptionGroupsInput
	In2 func(*rds.DescribeOptionGroupsOutput, bool) bool
} {
	var calls []struct {
		In1 *rds.DescribeOptionGroupsInput
		In2 func(*rds.DescribeOptionGroupsOutput, bool) bool
	}
	lockrdsClientMockDescribeOptionGroupsPages.RLock()
	calls = mock.calls.DescribeOptionGroupsPages
	lockrdsClientMockDescribeOptionGroupsPages.RUnlock()
	return calls
}

// DescribeOptionGroupsPagesWithContext calls DescribeOptionGroupsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeOptionGroupsPagesWithContext(in1 context.Context, in2 *rds.DescribeOptionGroupsInput, in3 func(*rds.DescribeOptionGroupsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeOptionGroupsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeOptionGroupsPagesWithContextFunc: method is nil but rdsClient.DescribeOptionGroupsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeOptionGroupsInput
		In3 func(*rds.DescribeOptionGroupsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockrdsClientMockDescribeOptionGroupsPagesWithContext.Lock()
	mock.calls.DescribeOptionGroupsPagesWithContext = append(mock.calls.DescribeOptionGroupsPagesWithContext, callInfo)
	lockrdsClientMockDescribeOptionGroupsPagesWithContext.Unlock()
	return mock.DescribeOptionGroupsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeOptionGroupsPagesWithContextCalls gets all the calls that were made to DescribeOptionGroupsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeOptionGroupsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeOptionGroupsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeOptionGroupsInput
	In3 func(*rds.DescribeOptionGroupsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeOptionGroupsInput
		In3 func(*rds.DescribeOptionGroupsOutput, bool) bool
		In4 []request.Option
	}
	lockrdsClientMockDescribeOptionGroupsPagesWithContext.RLock()
	calls = mock.calls.DescribeOptionGroupsPagesWithContext
	lockrdsClientMockDescribeOptionGroupsPagesWithContext.RUnlock()
	return calls
}

// DescribeOptionGroupsRequest calls DescribeOptionGroupsRequestFunc.
func (mock *rdsClientMock) DescribeOptionGroupsRequest(in1 *rds.DescribeOptionGroupsInput) (*request.Request, *rds.DescribeOptionGroupsOutput) {
	if mock.DescribeOptionGroupsRequestFunc == nil {
		panic("rdsClientMock.DescribeOptionGroupsRequestFunc: method is nil but rdsClient.DescribeOptionGroupsRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeOptionGroupsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeOptionGroupsRequest.Lock()
	mock.calls.DescribeOptionGroupsRequest = append(mock.calls.DescribeOptionGroupsRequest, callInfo)
	lockrdsClientMockDescribeOptionGroupsRequest.Unlock()
	return mock.DescribeOptionGroupsRequestFunc(in1)
}

// DescribeOptionGroupsRequestCalls gets all the calls that were made to DescribeOptionGroupsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeOptionGroupsRequestCalls())
func (mock *rdsClientMock) DescribeOptionGroupsRequestCalls() []struct {
	In1 *rds.DescribeOptionGroupsInput
} {
	var calls []struct {
		In1 *rds.DescribeOptionGroupsInput
	}
	lockrdsClientMockDescribeOptionGroupsRequest.RLock()
	calls = mock.calls.DescribeOptionGroupsRequest
	lockrdsClientMockDescribeOptionGroupsRequest.RUnlock()
	return calls
}

// DescribeOptionGroupsWithContext calls DescribeOptionGroupsWithContextFunc.
func (mock *rdsClientMock) DescribeOptionGroupsWithContext(in1 context.Context, in2 *rds.DescribeOptionGroupsInput, in3 ...request.Option) (*rds.DescribeOptionGroupsOutput, error) {
	if mock.DescribeOptionGroupsWithContextFunc == nil {
		panic("rdsClientMock.DescribeOptionGroupsWithContextFunc: method is nil but rdsClient.DescribeOptionGroupsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeOptionGroupsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeOptionGroupsWithContext.Lock()
	mock.calls.DescribeOptionGroupsWithContext = append(mock.calls.DescribeOptionGroupsWithContext, callInfo)
	lockrdsClientMockDescribeOptionGroupsWithContext.Unlock()
	return mock.DescribeOptionGroupsWithContextFunc(in1, in2, in3...)
}

// DescribeOptionGroupsWithContextCalls gets all the calls that were made to DescribeOptionGroupsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeOptionGroupsWithContextCalls())
func (mock *rdsClientMock) DescribeOptionGroupsWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeOptionGroupsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeOptionGroupsInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeOptionGroupsWithContext.RLock()
	calls = mock.calls.DescribeOptionGroupsWithContext
	lockrdsClientMockDescribeOptionGroupsWithContext.RUnlock()
	return calls
}

// DescribeOrderableDBInstanceOptions calls DescribeOrderableDBInstanceOptionsFunc.
func (mock *rdsClientMock) DescribeOrderableDBInstanceOptions(in1 *rds.DescribeOrderableDBInstanceOptionsInput) (*rds.DescribeOrderableDBInstanceOptionsOutput, error) {
	if mock.DescribeOrderableDBInstanceOptionsFunc == nil {
		panic("rdsClientMock.DescribeOrderableDBInstanceOptionsFunc: method is nil but rdsClient.DescribeOrderableDBInstanceOptions was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeOrderableDBInstanceOptionsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeOrderableDBInstanceOptions.Lock()
	mock.calls.DescribeOrderableDBInstanceOptions = append(mock.calls.DescribeOrderableDBInstanceOptions, callInfo)
	lockrdsClientMockDescribeOrderableDBInstanceOptions.Unlock()
	return mock.DescribeOrderableDBInstanceOptionsFunc(in1)
}

// DescribeOrderableDBInstanceOptionsCalls gets all the calls that were made to DescribeOrderableDBInstanceOptions.
// Check the length with:
//     len(mockedrdsClient.DescribeOrderableDBInstanceOptionsCalls())
func (mock *rdsClientMock) DescribeOrderableDBInstanceOptionsCalls() []struct {
	In1 *rds.DescribeOrderableDBInstanceOptionsInput
} {
	var calls []struct {
		In1 *rds.DescribeOrderableDBInstanceOptionsInput
	}
	lockrdsClientMockDescribeOrderableDBInstanceOptions.RLock()
	calls = mock.calls.DescribeOrderableDBInstanceOptions
	lockrdsClientMockDescribeOrderableDBInstanceOptions.RUnlock()
	return calls
}

// DescribeOrderableDBInstanceOptionsPages calls DescribeOrderableDBInstanceOptionsPagesFunc.
func (mock *rdsClientMock) DescribeOrderableDBInstanceOptionsPages(in1 *rds.DescribeOrderableDBInstanceOptionsInput, in2 func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool) error {
	if mock.DescribeOrderableDBInstanceOptionsPagesFunc == nil {
		panic("rdsClientMock.DescribeOrderableDBInstanceOptionsPagesFunc: method is nil but rdsClient.DescribeOrderableDBInstanceOptionsPages was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeOrderableDBInstanceOptionsInput
		In2 func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockrdsClientMockDescribeOrderableDBInstanceOptionsPages.Lock()
	mock.calls.DescribeOrderableDBInstanceOptionsPages = append(mock.calls.DescribeOrderableDBInstanceOptionsPages, callInfo)
	lockrdsClientMockDescribeOrderableDBInstanceOptionsPages.Unlock()
	return mock.DescribeOrderableDBInstanceOptionsPagesFunc(in1, in2)
}

// DescribeOrderableDBInstanceOptionsPagesCalls gets all the calls that were made to DescribeOrderableDBInstanceOptionsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeOrderableDBInstanceOptionsPagesCalls())
func (mock *rdsClientMock) DescribeOrderableDBInstanceOptionsPagesCalls() []struct {
	In1 *rds.DescribeOrderableDBInstanceOptionsInput
	In2 func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool
} {
	var calls []struct {
		In1 *rds.DescribeOrderableDBInstanceOptionsInput
		In2 func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool
	}
	lockrdsClientMockDescribeOrderableDBInstanceOptionsPages.RLock()
	calls = mock.calls.DescribeOrderableDBInstanceOptionsPages
	lockrdsClientMockDescribeOrderableDBInstanceOptionsPages.RUnlock()
	return calls
}

// DescribeOrderableDBInstanceOptionsPagesWithContext calls DescribeOrderableDBInstanceOptionsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeOrderableDBInstanceOptionsPagesWithContext(in1 context.Context, in2 *rds.DescribeOrderableDBInstanceOptionsInput, in3 func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeOrderableDBInstanceOptionsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeOrderableDBInstanceOptionsPagesWithContextFunc: method is nil but rdsClient.DescribeOrderableDBInstanceOptionsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeOrderableDBInstanceOptionsInput
		In3 func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockrdsClientMockDescribeOrderableDBInstanceOptionsPagesWithContext.Lock()
	mock.calls.DescribeOrderableDBInstanceOptionsPagesWithContext = append(mock.calls.DescribeOrderableDBInstanceOptionsPagesWithContext, callInfo)
	lockrdsClientMockDescribeOrderableDBInstanceOptionsPagesWithContext.Unlock()
	return mock.DescribeOrderableDBInstanceOptionsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeOrderableDBInstanceOptionsPagesWithContextCalls gets all the calls that were made to DescribeOrderableDBInstanceOptionsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeOrderableDBInstanceOptionsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeOrderableDBInstanceOptionsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeOrderableDBInstanceOptionsInput
	In3 func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeOrderableDBInstanceOptionsInput
		In3 func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool
		In4 []request.Option
	}
	lockrdsClientMockDescribeOrderableDBInstanceOptionsPagesWithContext.RLock()
	calls = mock.calls.DescribeOrderableDBInstanceOptionsPagesWithContext
	lockrdsClientMockDescribeOrderableDBInstanceOptionsPagesWithContext.RUnlock()
	return calls
}

// DescribeOrderableDBInstanceOptionsRequest calls DescribeOrderableDBInstanceOptionsRequestFunc.
func (mock *rdsClientMock) DescribeOrderableDBInstanceOptionsRequest(in1 *rds.DescribeOrderableDBInstanceOptionsInput) (*request.Request, *rds.DescribeOrderableDBInstanceOptionsOutput) {
	if mock.DescribeOrderableDBInstanceOptionsRequestFunc == nil {
		panic("rdsClientMock.DescribeOrderableDBInstanceOptionsRequestFunc: method is nil but rdsClient.DescribeOrderableDBInstanceOptionsRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeOrderableDBInstanceOptionsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeOrderableDBInstanceOptionsRequest.Lock()
	mock.calls.DescribeOrderableDBInstanceOptionsRequest = append(mock.calls.DescribeOrderableDBInstanceOptionsRequest, callInfo)
	lockrdsClientMockDescribeOrderableDBInstanceOptionsRequest.Unlock()
	return mock.DescribeOrderableDBInstanceOptionsRequestFunc(in1)
}

// DescribeOrderableDBInstanceOptionsRequestCalls gets all the calls that were made to DescribeOrderableDBInstanceOptionsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeOrderableDBInstanceOptionsRequestCalls())
func (mock *rdsClientMock) DescribeOrderableDBInstanceOptionsRequestCalls() []struct {
	In1 *rds.DescribeOrderableDBInstanceOptionsInput
} {
	var calls []struct {
		In1 *rds.DescribeOrderableDBInstanceOptionsInput
	}
	lockrdsClientMockDescribeOrderableDBInstanceOptionsRequest.RLock()
	calls = mock.calls.DescribeOrderableDBInstanceOptionsRequest
	lockrdsClientMockDescribeOrderableDBInstanceOptionsRequest.RUnlock()
	return calls
}

// DescribeOrderableDBInstanceOptionsWithContext calls DescribeOrderableDBInstanceOptionsWithContextFunc.
func (mock *rdsClientMock) DescribeOrderableDBInstanceOptionsWithContext(in1 context.Context, in2 *rds.DescribeOrderableDBInstanceOptionsInput, in3 ...request.Option) (*rds.DescribeOrderableDBInstanceOptionsOutput, error) {
	if mock.DescribeOrderableDBInstanceOptionsWithContextFunc == nil {
		panic("rdsClientMock.DescribeOrderableDBInstanceOptionsWithContextFunc: method is nil but rdsClient.DescribeOrderableDBInstanceOptionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeOrderableDBInstanceOptionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeOrderableDBInstanceOptionsWithContext.Lock()
	mock.calls.DescribeOrderableDBInstanceOptionsWithContext = append(mock.calls.DescribeOrderableDBInstanceOptionsWithContext, callInfo)
	lockrdsClientMockDescribeOrderableDBInstanceOptionsWithContext.Unlock()
	return mock.DescribeOrderableDBInstanceOptionsWithContextFunc(in1, in2, in3...)
}

// DescribeOrderableDBInstanceOptionsWithContextCalls gets all the calls that were made to DescribeOrderableDBInstanceOptionsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeOrderableDBInstanceOptionsWithContextCalls())
func (mock *rdsClientMock) DescribeOrderableDBInstanceOptionsWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeOrderableDBInstanceOptionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeOrderableDBInstanceOptionsInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeOrderableDBInstanceOptionsWithContext.RLock()
	calls = mock.calls.DescribeOrderableDBInstanceOptionsWithContext
	lockrdsClientMockDescribeOrderableDBInstanceOptionsWithContext.RUnlock()
	return calls
}

// DescribePendingMaintenanceActions calls DescribePendingMaintenanceActionsFunc.
func (mock *rdsClientMock) DescribePendingMaintenanceActions(in1 *rds.DescribePendingMaintenanceActionsInput) (*rds.DescribePendingMaintenanceActionsOutput, error) {
	if mock.DescribePendingMaintenanceActionsFunc == nil {
		panic("rdsClientMock.DescribePendingMaintenanceActionsFunc: method is nil but rdsClient.DescribePendingMaintenanceActions was just called")
	}
	callInfo := struct {
		In1 *rds.DescribePendingMaintenanceActionsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribePendingMaintenanceActions.Lock()
	mock.calls.DescribePendingMaintenanceActions = append(mock.calls.DescribePendingMaintenanceActions, callInfo)
	lockrdsClientMockDescribePendingMaintenanceActions.Unlock()
	return mock.DescribePendingMaintenanceActionsFunc(in1)
}

// DescribePendingMaintenanceActionsCalls gets all the calls that were made to DescribePendingMaintenanceActions.
// Check the length with:
//     len(mockedrdsClient.DescribePendingMaintenanceActionsCalls())
func (mock *rdsClientMock) DescribePendingMaintenanceActionsCalls() []struct {
	In1 *rds.DescribePendingMaintenanceActionsInput
} {
	var calls []struct {
		In1 *rds.DescribePendingMaintenanceActionsInput
	}
	lockrdsClientMockDescribePendingMaintenanceActions.RLock()
	calls = mock.calls.DescribePendingMaintenanceActions
	lockrdsClientMockDescribePendingMaintenanceActions.RUnlock()
	return calls
}

// DescribePendingMaintenanceActionsRequest calls DescribePendingMaintenanceActionsRequestFunc.
func (mock *rdsClientMock) DescribePendingMaintenanceActionsRequest(in1 *rds.DescribePendingMaintenanceActionsInput) (*request.Request, *rds.DescribePendingMaintenanceActionsOutput) {
	if mock.DescribePendingMaintenanceActionsRequestFunc == nil {
		panic("rdsClientMock.DescribePendingMaintenanceActionsRequestFunc: method is nil but rdsClient.DescribePendingMaintenanceActionsRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribePendingMaintenanceActionsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribePendingMaintenanceActionsRequest.Lock()
	mock.calls.DescribePendingMaintenanceActionsRequest = append(mock.calls.DescribePendingMaintenanceActionsRequest, callInfo)
	lockrdsClientMockDescribePendingMaintenanceActionsRequest.Unlock()
	return mock.DescribePendingMaintenanceActionsRequestFunc(in1)
}

// DescribePendingMaintenanceActionsRequestCalls gets all the calls that were made to DescribePendingMaintenanceActionsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribePendingMaintenanceActionsRequestCalls())
func (mock *rdsClientMock) DescribePendingMaintenanceActionsRequestCalls() []struct {
	In1 *rds.DescribePendingMaintenanceActionsInput
} {
	var calls []struct {
		In1 *rds.DescribePendingMaintenanceActionsInput
	}
	lockrdsClientMockDescribePendingMaintenanceActionsRequest.RLock()
	calls = mock.calls.DescribePendingMaintenanceActionsRequest
	lockrdsClientMockDescribePendingMaintenanceActionsRequest.RUnlock()
	return calls
}

// DescribePendingMaintenanceActionsWithContext calls DescribePendingMaintenanceActionsWithContextFunc.
func (mock *rdsClientMock) DescribePendingMaintenanceActionsWithContext(in1 context.Context, in2 *rds.DescribePendingMaintenanceActionsInput, in3 ...request.Option) (*rds.DescribePendingMaintenanceActionsOutput, error) {
	if mock.DescribePendingMaintenanceActionsWithContextFunc == nil {
		panic("rdsClientMock.DescribePendingMaintenanceActionsWithContextFunc: method is nil but rdsClient.DescribePendingMaintenanceActionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribePendingMaintenanceActionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribePendingMaintenanceActionsWithContext.Lock()
	mock.calls.DescribePendingMaintenanceActionsWithContext = append(mock.calls.DescribePendingMaintenanceActionsWithContext, callInfo)
	lockrdsClientMockDescribePendingMaintenanceActionsWithContext.Unlock()
	return mock.DescribePendingMaintenanceActionsWithContextFunc(in1, in2, in3...)
}

// DescribePendingMaintenanceActionsWithContextCalls gets all the calls that were made to DescribePendingMaintenanceActionsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribePendingMaintenanceActionsWithContextCalls())
func (mock *rdsClientMock) DescribePendingMaintenanceActionsWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribePendingMaintenanceActionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribePendingMaintenanceActionsInput
		In3 []request.Option
	}
	lockrdsClientMockDescribePendingMaintenanceActionsWithContext.RLock()
	calls = mock.calls.DescribePendingMaintenanceActionsWithContext
	lockrdsClientMockDescribePendingMaintenanceActionsWithContext.RUnlock()
	return calls
}

// DescribeReservedDBInstances calls DescribeReservedDBInstancesFunc.
func (mock *rdsClientMock) DescribeReservedDBInstances(in1 *rds.DescribeReservedDBInstancesInput) (*rds.DescribeReservedDBInstancesOutput, error) {
	if mock.DescribeReservedDBInstancesFunc == nil {
		panic("rdsClientMock.DescribeReservedDBInstancesFunc: method is nil but rdsClient.DescribeReservedDBInstances was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeReservedDBInstancesInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeReservedDBInstances.Lock()
	mock.calls.DescribeReservedDBInstances = append(mock.calls.DescribeReservedDBInstances, callInfo)
	lockrdsClientMockDescribeReservedDBInstances.Unlock()
	return mock.DescribeReservedDBInstancesFunc(in1)
}

// DescribeReservedDBInstancesCalls gets all the calls that were made to DescribeReservedDBInstances.
// Check the length with:
//     len(mockedrdsClient.DescribeReservedDBInstancesCalls())
func (mock *rdsClientMock) DescribeReservedDBInstancesCalls() []struct {
	In1 *rds.DescribeReservedDBInstancesInput
} {
	var calls []struct {
		In1 *rds.DescribeReservedDBInstancesInput
	}
	lockrdsClientMockDescribeReservedDBInstances.RLock()
	calls = mock.calls.DescribeReservedDBInstances
	lockrdsClientMockDescribeReservedDBInstances.RUnlock()
	return calls
}

// DescribeReservedDBInstancesOfferings calls DescribeReservedDBInstancesOfferingsFunc.
func (mock *rdsClientMock) DescribeReservedDBInstancesOfferings(in1 *rds.DescribeReservedDBInstancesOfferingsInput) (*rds.DescribeReservedDBInstancesOfferingsOutput, error) {
	if mock.DescribeReservedDBInstancesOfferingsFunc == nil {
		panic("rdsClientMock.DescribeReservedDBInstancesOfferingsFunc: method is nil but rdsClient.DescribeReservedDBInstancesOfferings was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeReservedDBInstancesOfferingsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeReservedDBInstancesOfferings.Lock()
	mock.calls.DescribeReservedDBInstancesOfferings = append(mock.calls.DescribeReservedDBInstancesOfferings, callInfo)
	lockrdsClientMockDescribeReservedDBInstancesOfferings.Unlock()
	return mock.DescribeReservedDBInstancesOfferingsFunc(in1)
}

// DescribeReservedDBInstancesOfferingsCalls gets all the calls that were made to DescribeReservedDBInstancesOfferings.
// Check the length with:
//     len(mockedrdsClient.DescribeReservedDBInstancesOfferingsCalls())
func (mock *rdsClientMock) DescribeReservedDBInstancesOfferingsCalls() []struct {
	In1 *rds.DescribeReservedDBInstancesOfferingsInput
} {
	var calls []struct {
		In1 *rds.DescribeReservedDBInstancesOfferingsInput
	}
	lockrdsClientMockDescribeReservedDBInstancesOfferings.RLock()
	calls = mock.calls.DescribeReservedDBInstancesOfferings
	lockrdsClientMockDescribeReservedDBInstancesOfferings.RUnlock()
	return calls
}

// DescribeReservedDBInstancesOfferingsPages calls DescribeReservedDBInstancesOfferingsPagesFunc.
func (mock *rdsClientMock) DescribeReservedDBInstancesOfferingsPages(in1 *rds.DescribeReservedDBInstancesOfferingsInput, in2 func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool) error {
	if mock.DescribeReservedDBInstancesOfferingsPagesFunc == nil {
		panic("rdsClientMock.DescribeReservedDBInstancesOfferingsPagesFunc: method is nil but rdsClient.DescribeReservedDBInstancesOfferingsPages was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeReservedDBInstancesOfferingsInput
		In2 func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockrdsClientMockDescribeReservedDBInstancesOfferingsPages.Lock()
	mock.calls.DescribeReservedDBInstancesOfferingsPages = append(mock.calls.DescribeReservedDBInstancesOfferingsPages, callInfo)
	lockrdsClientMockDescribeReservedDBInstancesOfferingsPages.Unlock()
	return mock.DescribeReservedDBInstancesOfferingsPagesFunc(in1, in2)
}

// DescribeReservedDBInstancesOfferingsPagesCalls gets all the calls that were made to DescribeReservedDBInstancesOfferingsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeReservedDBInstancesOfferingsPagesCalls())
func (mock *rdsClientMock) DescribeReservedDBInstancesOfferingsPagesCalls() []struct {
	In1 *rds.DescribeReservedDBInstancesOfferingsInput
	In2 func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool
} {
	var calls []struct {
		In1 *rds.DescribeReservedDBInstancesOfferingsInput
		In2 func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool
	}
	lockrdsClientMockDescribeReservedDBInstancesOfferingsPages.RLock()
	calls = mock.calls.DescribeReservedDBInstancesOfferingsPages
	lockrdsClientMockDescribeReservedDBInstancesOfferingsPages.RUnlock()
	return calls
}

// DescribeReservedDBInstancesOfferingsPagesWithContext calls DescribeReservedDBInstancesOfferingsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeReservedDBInstancesOfferingsPagesWithContext(in1 context.Context, in2 *rds.DescribeReservedDBInstancesOfferingsInput, in3 func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeReservedDBInstancesOfferingsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeReservedDBInstancesOfferingsPagesWithContextFunc: method is nil but rdsClient.DescribeReservedDBInstancesOfferingsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeReservedDBInstancesOfferingsInput
		In3 func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockrdsClientMockDescribeReservedDBInstancesOfferingsPagesWithContext.Lock()
	mock.calls.DescribeReservedDBInstancesOfferingsPagesWithContext = append(mock.calls.DescribeReservedDBInstancesOfferingsPagesWithContext, callInfo)
	lockrdsClientMockDescribeReservedDBInstancesOfferingsPagesWithContext.Unlock()
	return mock.DescribeReservedDBInstancesOfferingsPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeReservedDBInstancesOfferingsPagesWithContextCalls gets all the calls that were made to DescribeReservedDBInstancesOfferingsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeReservedDBInstancesOfferingsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeReservedDBInstancesOfferingsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeReservedDBInstancesOfferingsInput
	In3 func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeReservedDBInstancesOfferingsInput
		In3 func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool
		In4 []request.Option
	}
	lockrdsClientMockDescribeReservedDBInstancesOfferingsPagesWithContext.RLock()
	calls = mock.calls.DescribeReservedDBInstancesOfferingsPagesWithContext
	lockrdsClientMockDescribeReservedDBInstancesOfferingsPagesWithContext.RUnlock()
	return calls
}

// DescribeReservedDBInstancesOfferingsRequest calls DescribeReservedDBInstancesOfferingsRequestFunc.
func (mock *rdsClientMock) DescribeReservedDBInstancesOfferingsRequest(in1 *rds.DescribeReservedDBInstancesOfferingsInput) (*request.Request, *rds.DescribeReservedDBInstancesOfferingsOutput) {
	if mock.DescribeReservedDBInstancesOfferingsRequestFunc == nil {
		panic("rdsClientMock.DescribeReservedDBInstancesOfferingsRequestFunc: method is nil but rdsClient.DescribeReservedDBInstancesOfferingsRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeReservedDBInstancesOfferingsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeReservedDBInstancesOfferingsRequest.Lock()
	mock.calls.DescribeReservedDBInstancesOfferingsRequest = append(mock.calls.DescribeReservedDBInstancesOfferingsRequest, callInfo)
	lockrdsClientMockDescribeReservedDBInstancesOfferingsRequest.Unlock()
	return mock.DescribeReservedDBInstancesOfferingsRequestFunc(in1)
}

// DescribeReservedDBInstancesOfferingsRequestCalls gets all the calls that were made to DescribeReservedDBInstancesOfferingsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeReservedDBInstancesOfferingsRequestCalls())
func (mock *rdsClientMock) DescribeReservedDBInstancesOfferingsRequestCalls() []struct {
	In1 *rds.DescribeReservedDBInstancesOfferingsInput
} {
	var calls []struct {
		In1 *rds.DescribeReservedDBInstancesOfferingsInput
	}
	lockrdsClientMockDescribeReservedDBInstancesOfferingsRequest.RLock()
	calls = mock.calls.DescribeReservedDBInstancesOfferingsRequest
	lockrdsClientMockDescribeReservedDBInstancesOfferingsRequest.RUnlock()
	return calls
}

// DescribeReservedDBInstancesOfferingsWithContext calls DescribeReservedDBInstancesOfferingsWithContextFunc.
func (mock *rdsClientMock) DescribeReservedDBInstancesOfferingsWithContext(in1 context.Context, in2 *rds.DescribeReservedDBInstancesOfferingsInput, in3 ...request.Option) (*rds.DescribeReservedDBInstancesOfferingsOutput, error) {
	if mock.DescribeReservedDBInstancesOfferingsWithContextFunc == nil {
		panic("rdsClientMock.DescribeReservedDBInstancesOfferingsWithContextFunc: method is nil but rdsClient.DescribeReservedDBInstancesOfferingsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeReservedDBInstancesOfferingsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeReservedDBInstancesOfferingsWithContext.Lock()
	mock.calls.DescribeReservedDBInstancesOfferingsWithContext = append(mock.calls.DescribeReservedDBInstancesOfferingsWithContext, callInfo)
	lockrdsClientMockDescribeReservedDBInstancesOfferingsWithContext.Unlock()
	return mock.DescribeReservedDBInstancesOfferingsWithContextFunc(in1, in2, in3...)
}

// DescribeReservedDBInstancesOfferingsWithContextCalls gets all the calls that were made to DescribeReservedDBInstancesOfferingsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeReservedDBInstancesOfferingsWithContextCalls())
func (mock *rdsClientMock) DescribeReservedDBInstancesOfferingsWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeReservedDBInstancesOfferingsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeReservedDBInstancesOfferingsInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeReservedDBInstancesOfferingsWithContext.RLock()
	calls = mock.calls.DescribeReservedDBInstancesOfferingsWithContext
	lockrdsClientMockDescribeReservedDBInstancesOfferingsWithContext.RUnlock()
	return calls
}

// DescribeReservedDBInstancesPages calls DescribeReservedDBInstancesPagesFunc.
func (mock *rdsClientMock) DescribeReservedDBInstancesPages(in1 *rds.DescribeReservedDBInstancesInput, in2 func(*rds.DescribeReservedDBInstancesOutput, bool) bool) error {
	if mock.DescribeReservedDBInstancesPagesFunc == nil {
		panic("rdsClientMock.DescribeReservedDBInstancesPagesFunc: method is nil but rdsClient.DescribeReservedDBInstancesPages was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeReservedDBInstancesInput
		In2 func(*rds.DescribeReservedDBInstancesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockrdsClientMockDescribeReservedDBInstancesPages.Lock()
	mock.calls.DescribeReservedDBInstancesPages = append(mock.calls.DescribeReservedDBInstancesPages, callInfo)
	lockrdsClientMockDescribeReservedDBInstancesPages.Unlock()
	return mock.DescribeReservedDBInstancesPagesFunc(in1, in2)
}

// DescribeReservedDBInstancesPagesCalls gets all the calls that were made to DescribeReservedDBInstancesPages.
// Check the length with:
//     len(mockedrdsClient.DescribeReservedDBInstancesPagesCalls())
func (mock *rdsClientMock) DescribeReservedDBInstancesPagesCalls() []struct {
	In1 *rds.DescribeReservedDBInstancesInput
	In2 func(*rds.DescribeReservedDBInstancesOutput, bool) bool
} {
	var calls []struct {
		In1 *rds.DescribeReservedDBInstancesInput
		In2 func(*rds.DescribeReservedDBInstancesOutput, bool) bool
	}
	lockrdsClientMockDescribeReservedDBInstancesPages.RLock()
	calls = mock.calls.DescribeReservedDBInstancesPages
	lockrdsClientMockDescribeReservedDBInstancesPages.RUnlock()
	return calls
}

// DescribeReservedDBInstancesPagesWithContext calls DescribeReservedDBInstancesPagesWithContextFunc.
func (mock *rdsClientMock) DescribeReservedDBInstancesPagesWithContext(in1 context.Context, in2 *rds.DescribeReservedDBInstancesInput, in3 func(*rds.DescribeReservedDBInstancesOutput, bool) bool, in4 ...request.Option) error {
	if mock.DescribeReservedDBInstancesPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeReservedDBInstancesPagesWithContextFunc: method is nil but rdsClient.DescribeReservedDBInstancesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeReservedDBInstancesInput
		In3 func(*rds.DescribeReservedDBInstancesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockrdsClientMockDescribeReservedDBInstancesPagesWithContext.Lock()
	mock.calls.DescribeReservedDBInstancesPagesWithContext = append(mock.calls.DescribeReservedDBInstancesPagesWithContext, callInfo)
	lockrdsClientMockDescribeReservedDBInstancesPagesWithContext.Unlock()
	return mock.DescribeReservedDBInstancesPagesWithContextFunc(in1, in2, in3, in4...)
}

// DescribeReservedDBInstancesPagesWithContextCalls gets all the calls that were made to DescribeReservedDBInstancesPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeReservedDBInstancesPagesWithContextCalls())
func (mock *rdsClientMock) DescribeReservedDBInstancesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeReservedDBInstancesInput
	In3 func(*rds.DescribeReservedDBInstancesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeReservedDBInstancesInput
		In3 func(*rds.DescribeReservedDBInstancesOutput, bool) bool
		In4 []request.Option
	}
	lockrdsClientMockDescribeReservedDBInstancesPagesWithContext.RLock()
	calls = mock.calls.DescribeReservedDBInstancesPagesWithContext
	lockrdsClientMockDescribeReservedDBInstancesPagesWithContext.RUnlock()
	return calls
}

// DescribeReservedDBInstancesRequest calls DescribeReservedDBInstancesRequestFunc.
func (mock *rdsClientMock) DescribeReservedDBInstancesRequest(in1 *rds.DescribeReservedDBInstancesInput) (*request.Request, *rds.DescribeReservedDBInstancesOutput) {
	if mock.DescribeReservedDBInstancesRequestFunc == nil {
		panic("rdsClientMock.DescribeReservedDBInstancesRequestFunc: method is nil but rdsClient.DescribeReservedDBInstancesRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeReservedDBInstancesInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeReservedDBInstancesRequest.Lock()
	mock.calls.DescribeReservedDBInstancesRequest = append(mock.calls.DescribeReservedDBInstancesRequest, callInfo)
	lockrdsClientMockDescribeReservedDBInstancesRequest.Unlock()
	return mock.DescribeReservedDBInstancesRequestFunc(in1)
}

// DescribeReservedDBInstancesRequestCalls gets all the calls that were made to DescribeReservedDBInstancesRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeReservedDBInstancesRequestCalls())
func (mock *rdsClientMock) DescribeReservedDBInstancesRequestCalls() []struct {
	In1 *rds.DescribeReservedDBInstancesInput
} {
	var calls []struct {
		In1 *rds.DescribeReservedDBInstancesInput
	}
	lockrdsClientMockDescribeReservedDBInstancesRequest.RLock()
	calls = mock.calls.DescribeReservedDBInstancesRequest
	lockrdsClientMockDescribeReservedDBInstancesRequest.RUnlock()
	return calls
}

// DescribeReservedDBInstancesWithContext calls DescribeReservedDBInstancesWithContextFunc.
func (mock *rdsClientMock) DescribeReservedDBInstancesWithContext(in1 context.Context, in2 *rds.DescribeReservedDBInstancesInput, in3 ...request.Option) (*rds.DescribeReservedDBInstancesOutput, error) {
	if mock.DescribeReservedDBInstancesWithContextFunc == nil {
		panic("rdsClientMock.DescribeReservedDBInstancesWithContextFunc: method is nil but rdsClient.DescribeReservedDBInstancesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeReservedDBInstancesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeReservedDBInstancesWithContext.Lock()
	mock.calls.DescribeReservedDBInstancesWithContext = append(mock.calls.DescribeReservedDBInstancesWithContext, callInfo)
	lockrdsClientMockDescribeReservedDBInstancesWithContext.Unlock()
	return mock.DescribeReservedDBInstancesWithContextFunc(in1, in2, in3...)
}

// DescribeReservedDBInstancesWithContextCalls gets all the calls that were made to DescribeReservedDBInstancesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeReservedDBInstancesWithContextCalls())
func (mock *rdsClientMock) DescribeReservedDBInstancesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeReservedDBInstancesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeReservedDBInstancesInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeReservedDBInstancesWithContext.RLock()
	calls = mock.calls.DescribeReservedDBInstancesWithContext
	lockrdsClientMockDescribeReservedDBInstancesWithContext.RUnlock()
	return calls
}

// DescribeSourceRegions calls DescribeSourceRegionsFunc.
func (mock *rdsClientMock) DescribeSourceRegions(in1 *rds.DescribeSourceRegionsInput) (*rds.DescribeSourceRegionsOutput, error) {
	if mock.DescribeSourceRegionsFunc == nil {
		panic("rdsClientMock.DescribeSourceRegionsFunc: method is nil but rdsClient.DescribeSourceRegions was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeSourceRegionsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeSourceRegions.Lock()
	mock.calls.DescribeSourceRegions = append(mock.calls.DescribeSourceRegions, callInfo)
	lockrdsClientMockDescribeSourceRegions.Unlock()
	return mock.DescribeSourceRegionsFunc(in1)
}

// DescribeSourceRegionsCalls gets all the calls that were made to DescribeSourceRegions.
// Check the length with:
//     len(mockedrdsClient.DescribeSourceRegionsCalls())
func (mock *rdsClientMock) DescribeSourceRegionsCalls() []struct {
	In1 *rds.DescribeSourceRegionsInput
} {
	var calls []struct {
		In1 *rds.DescribeSourceRegionsInput
	}
	lockrdsClientMockDescribeSourceRegions.RLock()
	calls = mock.calls.DescribeSourceRegions
	lockrdsClientMockDescribeSourceRegions.RUnlock()
	return calls
}

// DescribeSourceRegionsRequest calls DescribeSourceRegionsRequestFunc.
func (mock *rdsClientMock) DescribeSourceRegionsRequest(in1 *rds.DescribeSourceRegionsInput) (*request.Request, *rds.DescribeSourceRegionsOutput) {
	if mock.DescribeSourceRegionsRequestFunc == nil {
		panic("rdsClientMock.DescribeSourceRegionsRequestFunc: method is nil but rdsClient.DescribeSourceRegionsRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeSourceRegionsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeSourceRegionsRequest.Lock()
	mock.calls.DescribeSourceRegionsRequest = append(mock.calls.DescribeSourceRegionsRequest, callInfo)
	lockrdsClientMockDescribeSourceRegionsRequest.Unlock()
	return mock.DescribeSourceRegionsRequestFunc(in1)
}

// DescribeSourceRegionsRequestCalls gets all the calls that were made to DescribeSourceRegionsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeSourceRegionsRequestCalls())
func (mock *rdsClientMock) DescribeSourceRegionsRequestCalls() []struct {
	In1 *rds.DescribeSourceRegionsInput
} {
	var calls []struct {
		In1 *rds.DescribeSourceRegionsInput
	}
	lockrdsClientMockDescribeSourceRegionsRequest.RLock()
	calls = mock.calls.DescribeSourceRegionsRequest
	lockrdsClientMockDescribeSourceRegionsRequest.RUnlock()
	return calls
}

// DescribeSourceRegionsWithContext calls DescribeSourceRegionsWithContextFunc.
func (mock *rdsClientMock) DescribeSourceRegionsWithContext(in1 context.Context, in2 *rds.DescribeSourceRegionsInput, in3 ...request.Option) (*rds.DescribeSourceRegionsOutput, error) {
	if mock.DescribeSourceRegionsWithContextFunc == nil {
		panic("rdsClientMock.DescribeSourceRegionsWithContextFunc: method is nil but rdsClient.DescribeSourceRegionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeSourceRegionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeSourceRegionsWithContext.Lock()
	mock.calls.DescribeSourceRegionsWithContext = append(mock.calls.DescribeSourceRegionsWithContext, callInfo)
	lockrdsClientMockDescribeSourceRegionsWithContext.Unlock()
	return mock.DescribeSourceRegionsWithContextFunc(in1, in2, in3...)
}

// DescribeSourceRegionsWithContextCalls gets all the calls that were made to DescribeSourceRegionsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeSourceRegionsWithContextCalls())
func (mock *rdsClientMock) DescribeSourceRegionsWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeSourceRegionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeSourceRegionsInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeSourceRegionsWithContext.RLock()
	calls = mock.calls.DescribeSourceRegionsWithContext
	lockrdsClientMockDescribeSourceRegionsWithContext.RUnlock()
	return calls
}

// DescribeValidDBInstanceModifications calls DescribeValidDBInstanceModificationsFunc.
func (mock *rdsClientMock) DescribeValidDBInstanceModifications(in1 *rds.DescribeValidDBInstanceModificationsInput) (*rds.DescribeValidDBInstanceModificationsOutput, error) {
	if mock.DescribeValidDBInstanceModificationsFunc == nil {
		panic("rdsClientMock.DescribeValidDBInstanceModificationsFunc: method is nil but rdsClient.DescribeValidDBInstanceModifications was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeValidDBInstanceModificationsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeValidDBInstanceModifications.Lock()
	mock.calls.DescribeValidDBInstanceModifications = append(mock.calls.DescribeValidDBInstanceModifications, callInfo)
	lockrdsClientMockDescribeValidDBInstanceModifications.Unlock()
	return mock.DescribeValidDBInstanceModificationsFunc(in1)
}

// DescribeValidDBInstanceModificationsCalls gets all the calls that were made to DescribeValidDBInstanceModifications.
// Check the length with:
//     len(mockedrdsClient.DescribeValidDBInstanceModificationsCalls())
func (mock *rdsClientMock) DescribeValidDBInstanceModificationsCalls() []struct {
	In1 *rds.DescribeValidDBInstanceModificationsInput
} {
	var calls []struct {
		In1 *rds.DescribeValidDBInstanceModificationsInput
	}
	lockrdsClientMockDescribeValidDBInstanceModifications.RLock()
	calls = mock.calls.DescribeValidDBInstanceModifications
	lockrdsClientMockDescribeValidDBInstanceModifications.RUnlock()
	return calls
}

// DescribeValidDBInstanceModificationsRequest calls DescribeValidDBInstanceModificationsRequestFunc.
func (mock *rdsClientMock) DescribeValidDBInstanceModificationsRequest(in1 *rds.DescribeValidDBInstanceModificationsInput) (*request.Request, *rds.DescribeValidDBInstanceModificationsOutput) {
	if mock.DescribeValidDBInstanceModificationsRequestFunc == nil {
		panic("rdsClientMock.DescribeValidDBInstanceModificationsRequestFunc: method is nil but rdsClient.DescribeValidDBInstanceModificationsRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeValidDBInstanceModificationsInput
	}{
		In1: in1,
	}
	lockrdsClientMockDescribeValidDBInstanceModificationsRequest.Lock()
	mock.calls.DescribeValidDBInstanceModificationsRequest = append(mock.calls.DescribeValidDBInstanceModificationsRequest, callInfo)
	lockrdsClientMockDescribeValidDBInstanceModificationsRequest.Unlock()
	return mock.DescribeValidDBInstanceModificationsRequestFunc(in1)
}

// DescribeValidDBInstanceModificationsRequestCalls gets all the calls that were made to DescribeValidDBInstanceModificationsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeValidDBInstanceModificationsRequestCalls())
func (mock *rdsClientMock) DescribeValidDBInstanceModificationsRequestCalls() []struct {
	In1 *rds.DescribeValidDBInstanceModificationsInput
} {
	var calls []struct {
		In1 *rds.DescribeValidDBInstanceModificationsInput
	}
	lockrdsClientMockDescribeValidDBInstanceModificationsRequest.RLock()
	calls = mock.calls.DescribeValidDBInstanceModificationsRequest
	lockrdsClientMockDescribeValidDBInstanceModificationsRequest.RUnlock()
	return calls
}

// DescribeValidDBInstanceModificationsWithContext calls DescribeValidDBInstanceModificationsWithContextFunc.
func (mock *rdsClientMock) DescribeValidDBInstanceModificationsWithContext(in1 context.Context, in2 *rds.DescribeValidDBInstanceModificationsInput, in3 ...request.Option) (*rds.DescribeValidDBInstanceModificationsOutput, error) {
	if mock.DescribeValidDBInstanceModificationsWithContextFunc == nil {
		panic("rdsClientMock.DescribeValidDBInstanceModificationsWithContextFunc: method is nil but rdsClient.DescribeValidDBInstanceModificationsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeValidDBInstanceModificationsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDescribeValidDBInstanceModificationsWithContext.Lock()
	mock.calls.DescribeValidDBInstanceModificationsWithContext = append(mock.calls.DescribeValidDBInstanceModificationsWithContext, callInfo)
	lockrdsClientMockDescribeValidDBInstanceModificationsWithContext.Unlock()
	return mock.DescribeValidDBInstanceModificationsWithContextFunc(in1, in2, in3...)
}

// DescribeValidDBInstanceModificationsWithContextCalls gets all the calls that were made to DescribeValidDBInstanceModificationsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeValidDBInstanceModificationsWithContextCalls())
func (mock *rdsClientMock) DescribeValidDBInstanceModificationsWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeValidDBInstanceModificationsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeValidDBInstanceModificationsInput
		In3 []request.Option
	}
	lockrdsClientMockDescribeValidDBInstanceModificationsWithContext.RLock()
	calls = mock.calls.DescribeValidDBInstanceModificationsWithContext
	lockrdsClientMockDescribeValidDBInstanceModificationsWithContext.RUnlock()
	return calls
}

// DownloadDBLogFilePortion calls DownloadDBLogFilePortionFunc.
func (mock *rdsClientMock) DownloadDBLogFilePortion(in1 *rds.DownloadDBLogFilePortionInput) (*rds.DownloadDBLogFilePortionOutput, error) {
	if mock.DownloadDBLogFilePortionFunc == nil {
		panic("rdsClientMock.DownloadDBLogFilePortionFunc: method is nil but rdsClient.DownloadDBLogFilePortion was just called")
	}
	callInfo := struct {
		In1 *rds.DownloadDBLogFilePortionInput
	}{
		In1: in1,
	}
	lockrdsClientMockDownloadDBLogFilePortion.Lock()
	mock.calls.DownloadDBLogFilePortion = append(mock.calls.DownloadDBLogFilePortion, callInfo)
	lockrdsClientMockDownloadDBLogFilePortion.Unlock()
	return mock.DownloadDBLogFilePortionFunc(in1)
}

// DownloadDBLogFilePortionCalls gets all the calls that were made to DownloadDBLogFilePortion.
// Check the length with:
//     len(mockedrdsClient.DownloadDBLogFilePortionCalls())
func (mock *rdsClientMock) DownloadDBLogFilePortionCalls() []struct {
	In1 *rds.DownloadDBLogFilePortionInput
} {
	var calls []struct {
		In1 *rds.DownloadDBLogFilePortionInput
	}
	lockrdsClientMockDownloadDBLogFilePortion.RLock()
	calls = mock.calls.DownloadDBLogFilePortion
	lockrdsClientMockDownloadDBLogFilePortion.RUnlock()
	return calls
}

// DownloadDBLogFilePortionPages calls DownloadDBLogFilePortionPagesFunc.
func (mock *rdsClientMock) DownloadDBLogFilePortionPages(in1 *rds.DownloadDBLogFilePortionInput, in2 func(*rds.DownloadDBLogFilePortionOutput, bool) bool) error {
	if mock.DownloadDBLogFilePortionPagesFunc == nil {
		panic("rdsClientMock.DownloadDBLogFilePortionPagesFunc: method is nil but rdsClient.DownloadDBLogFilePortionPages was just called")
	}
	callInfo := struct {
		In1 *rds.DownloadDBLogFilePortionInput
		In2 func(*rds.DownloadDBLogFilePortionOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	lockrdsClientMockDownloadDBLogFilePortionPages.Lock()
	mock.calls.DownloadDBLogFilePortionPages = append(mock.calls.DownloadDBLogFilePortionPages, callInfo)
	lockrdsClientMockDownloadDBLogFilePortionPages.Unlock()
	return mock.DownloadDBLogFilePortionPagesFunc(in1, in2)
}

// DownloadDBLogFilePortionPagesCalls gets all the calls that were made to DownloadDBLogFilePortionPages.
// Check the length with:
//     len(mockedrdsClient.DownloadDBLogFilePortionPagesCalls())
func (mock *rdsClientMock) DownloadDBLogFilePortionPagesCalls() []struct {
	In1 *rds.DownloadDBLogFilePortionInput
	In2 func(*rds.DownloadDBLogFilePortionOutput, bool) bool
} {
	var calls []struct {
		In1 *rds.DownloadDBLogFilePortionInput
		In2 func(*rds.DownloadDBLogFilePortionOutput, bool) bool
	}
	lockrdsClientMockDownloadDBLogFilePortionPages.RLock()
	calls = mock.calls.DownloadDBLogFilePortionPages
	lockrdsClientMockDownloadDBLogFilePortionPages.RUnlock()
	return calls
}

// DownloadDBLogFilePortionPagesWithContext calls DownloadDBLogFilePortionPagesWithContextFunc.
func (mock *rdsClientMock) DownloadDBLogFilePortionPagesWithContext(in1 context.Context, in2 *rds.DownloadDBLogFilePortionInput, in3 func(*rds.DownloadDBLogFilePortionOutput, bool) bool, in4 ...request.Option) error {
	if mock.DownloadDBLogFilePortionPagesWithContextFunc == nil {
		panic("rdsClientMock.DownloadDBLogFilePortionPagesWithContextFunc: method is nil but rdsClient.DownloadDBLogFilePortionPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DownloadDBLogFilePortionInput
		In3 func(*rds.DownloadDBLogFilePortionOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockrdsClientMockDownloadDBLogFilePortionPagesWithContext.Lock()
	mock.calls.DownloadDBLogFilePortionPagesWithContext = append(mock.calls.DownloadDBLogFilePortionPagesWithContext, callInfo)
	lockrdsClientMockDownloadDBLogFilePortionPagesWithContext.Unlock()
	return mock.DownloadDBLogFilePortionPagesWithContextFunc(in1, in2, in3, in4...)
}

// DownloadDBLogFilePortionPagesWithContextCalls gets all the calls that were made to DownloadDBLogFilePortionPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DownloadDBLogFilePortionPagesWithContextCalls())
func (mock *rdsClientMock) DownloadDBLogFilePortionPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DownloadDBLogFilePortionInput
	In3 func(*rds.DownloadDBLogFilePortionOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DownloadDBLogFilePortionInput
		In3 func(*rds.DownloadDBLogFilePortionOutput, bool) bool
		In4 []request.Option
	}
	lockrdsClientMockDownloadDBLogFilePortionPagesWithContext.RLock()
	calls = mock.calls.DownloadDBLogFilePortionPagesWithContext
	lockrdsClientMockDownloadDBLogFilePortionPagesWithContext.RUnlock()
	return calls
}

// DownloadDBLogFilePortionRequest calls DownloadDBLogFilePortionRequestFunc.
func (mock *rdsClientMock) DownloadDBLogFilePortionRequest(in1 *rds.DownloadDBLogFilePortionInput) (*request.Request, *rds.DownloadDBLogFilePortionOutput) {
	if mock.DownloadDBLogFilePortionRequestFunc == nil {
		panic("rdsClientMock.DownloadDBLogFilePortionRequestFunc: method is nil but rdsClient.DownloadDBLogFilePortionRequest was just called")
	}
	callInfo := struct {
		In1 *rds.DownloadDBLogFilePortionInput
	}{
		In1: in1,
	}
	lockrdsClientMockDownloadDBLogFilePortionRequest.Lock()
	mock.calls.DownloadDBLogFilePortionRequest = append(mock.calls.DownloadDBLogFilePortionRequest, callInfo)
	lockrdsClientMockDownloadDBLogFilePortionRequest.Unlock()
	return mock.DownloadDBLogFilePortionRequestFunc(in1)
}

// DownloadDBLogFilePortionRequestCalls gets all the calls that were made to DownloadDBLogFilePortionRequest.
// Check the length with:
//     len(mockedrdsClient.DownloadDBLogFilePortionRequestCalls())
func (mock *rdsClientMock) DownloadDBLogFilePortionRequestCalls() []struct {
	In1 *rds.DownloadDBLogFilePortionInput
} {
	var calls []struct {
		In1 *rds.DownloadDBLogFilePortionInput
	}
	lockrdsClientMockDownloadDBLogFilePortionRequest.RLock()
	calls = mock.calls.DownloadDBLogFilePortionRequest
	lockrdsClientMockDownloadDBLogFilePortionRequest.RUnlock()
	return calls
}

// DownloadDBLogFilePortionWithContext calls DownloadDBLogFilePortionWithContextFunc.
func (mock *rdsClientMock) DownloadDBLogFilePortionWithContext(in1 context.Context, in2 *rds.DownloadDBLogFilePortionInput, in3 ...request.Option) (*rds.DownloadDBLogFilePortionOutput, error) {
	if mock.DownloadDBLogFilePortionWithContextFunc == nil {
		panic("rdsClientMock.DownloadDBLogFilePortionWithContextFunc: method is nil but rdsClient.DownloadDBLogFilePortionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DownloadDBLogFilePortionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockDownloadDBLogFilePortionWithContext.Lock()
	mock.calls.DownloadDBLogFilePortionWithContext = append(mock.calls.DownloadDBLogFilePortionWithContext, callInfo)
	lockrdsClientMockDownloadDBLogFilePortionWithContext.Unlock()
	return mock.DownloadDBLogFilePortionWithContextFunc(in1, in2, in3...)
}

// DownloadDBLogFilePortionWithContextCalls gets all the calls that were made to DownloadDBLogFilePortionWithContext.
// Check the length with:
//     len(mockedrdsClient.DownloadDBLogFilePortionWithContextCalls())
func (mock *rdsClientMock) DownloadDBLogFilePortionWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DownloadDBLogFilePortionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DownloadDBLogFilePortionInput
		In3 []request.Option
	}
	lockrdsClientMockDownloadDBLogFilePortionWithContext.RLock()
	calls = mock.calls.DownloadDBLogFilePortionWithContext
	lockrdsClientMockDownloadDBLogFilePortionWithContext.RUnlock()
	return calls
}

// FailoverDBCluster calls FailoverDBClusterFunc.
func (mock *rdsClientMock) FailoverDBCluster(in1 *rds.FailoverDBClusterInput) (*rds.FailoverDBClusterOutput, error) {
	if mock.FailoverDBClusterFunc == nil {
		panic("rdsClientMock.FailoverDBClusterFunc: method is nil but rdsClient.FailoverDBCluster was just called")
	}
	callInfo := struct {
		In1 *rds.FailoverDBClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockFailoverDBCluster.Lock()
	mock.calls.FailoverDBCluster = append(mock.calls.FailoverDBCluster, callInfo)
	lockrdsClientMockFailoverDBCluster.Unlock()
	return mock.FailoverDBClusterFunc(in1)
}

// FailoverDBClusterCalls gets all the calls that were made to FailoverDBCluster.
// Check the length with:
//     len(mockedrdsClient.FailoverDBClusterCalls())
func (mock *rdsClientMock) FailoverDBClusterCalls() []struct {
	In1 *rds.FailoverDBClusterInput
} {
	var calls []struct {
		In1 *rds.FailoverDBClusterInput
	}
	lockrdsClientMockFailoverDBCluster.RLock()
	calls = mock.calls.FailoverDBCluster
	lockrdsClientMockFailoverDBCluster.RUnlock()
	return calls
}

// FailoverDBClusterRequest calls FailoverDBClusterRequestFunc.
func (mock *rdsClientMock) FailoverDBClusterRequest(in1 *rds.FailoverDBClusterInput) (*request.Request, *rds.FailoverDBClusterOutput) {
	if mock.FailoverDBClusterRequestFunc == nil {
		panic("rdsClientMock.FailoverDBClusterRequestFunc: method is nil but rdsClient.FailoverDBClusterRequest was just called")
	}
	callInfo := struct {
		In1 *rds.FailoverDBClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockFailoverDBClusterRequest.Lock()
	mock.calls.FailoverDBClusterRequest = append(mock.calls.FailoverDBClusterRequest, callInfo)
	lockrdsClientMockFailoverDBClusterRequest.Unlock()
	return mock.FailoverDBClusterRequestFunc(in1)
}

// FailoverDBClusterRequestCalls gets all the calls that were made to FailoverDBClusterRequest.
// Check the length with:
//     len(mockedrdsClient.FailoverDBClusterRequestCalls())
func (mock *rdsClientMock) FailoverDBClusterRequestCalls() []struct {
	In1 *rds.FailoverDBClusterInput
} {
	var calls []struct {
		In1 *rds.FailoverDBClusterInput
	}
	lockrdsClientMockFailoverDBClusterRequest.RLock()
	calls = mock.calls.FailoverDBClusterRequest
	lockrdsClientMockFailoverDBClusterRequest.RUnlock()
	return calls
}

// FailoverDBClusterWithContext calls FailoverDBClusterWithContextFunc.
func (mock *rdsClientMock) FailoverDBClusterWithContext(in1 context.Context, in2 *rds.FailoverDBClusterInput, in3 ...request.Option) (*rds.FailoverDBClusterOutput, error) {
	if mock.FailoverDBClusterWithContextFunc == nil {
		panic("rdsClientMock.FailoverDBClusterWithContextFunc: method is nil but rdsClient.FailoverDBClusterWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.FailoverDBClusterInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockFailoverDBClusterWithContext.Lock()
	mock.calls.FailoverDBClusterWithContext = append(mock.calls.FailoverDBClusterWithContext, callInfo)
	lockrdsClientMockFailoverDBClusterWithContext.Unlock()
	return mock.FailoverDBClusterWithContextFunc(in1, in2, in3...)
}

// FailoverDBClusterWithContextCalls gets all the calls that were made to FailoverDBClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.FailoverDBClusterWithContextCalls())
func (mock *rdsClientMock) FailoverDBClusterWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.FailoverDBClusterInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.FailoverDBClusterInput
		In3 []request.Option
	}
	lockrdsClientMockFailoverDBClusterWithContext.RLock()
	calls = mock.calls.FailoverDBClusterWithContext
	lockrdsClientMockFailoverDBClusterWithContext.RUnlock()
	return calls
}

// ImportInstallationMedia calls ImportInstallationMediaFunc.
func (mock *rdsClientMock) ImportInstallationMedia(in1 *rds.ImportInstallationMediaInput) (*rds.ImportInstallationMediaOutput, error) {
	if mock.ImportInstallationMediaFunc == nil {
		panic("rdsClientMock.ImportInstallationMediaFunc: method is nil but rdsClient.ImportInstallationMedia was just called")
	}
	callInfo := struct {
		In1 *rds.ImportInstallationMediaInput
	}{
		In1: in1,
	}
	lockrdsClientMockImportInstallationMedia.Lock()
	mock.calls.ImportInstallationMedia = append(mock.calls.ImportInstallationMedia, callInfo)
	lockrdsClientMockImportInstallationMedia.Unlock()
	return mock.ImportInstallationMediaFunc(in1)
}

// ImportInstallationMediaCalls gets all the calls that were made to ImportInstallationMedia.
// Check the length with:
//     len(mockedrdsClient.ImportInstallationMediaCalls())
func (mock *rdsClientMock) ImportInstallationMediaCalls() []struct {
	In1 *rds.ImportInstallationMediaInput
} {
	var calls []struct {
		In1 *rds.ImportInstallationMediaInput
	}
	lockrdsClientMockImportInstallationMedia.RLock()
	calls = mock.calls.ImportInstallationMedia
	lockrdsClientMockImportInstallationMedia.RUnlock()
	return calls
}

// ImportInstallationMediaRequest calls ImportInstallationMediaRequestFunc.
func (mock *rdsClientMock) ImportInstallationMediaRequest(in1 *rds.ImportInstallationMediaInput) (*request.Request, *rds.ImportInstallationMediaOutput) {
	if mock.ImportInstallationMediaRequestFunc == nil {
		panic("rdsClientMock.ImportInstallationMediaRequestFunc: method is nil but rdsClient.ImportInstallationMediaRequest was just called")
	}
	callInfo := struct {
		In1 *rds.ImportInstallationMediaInput
	}{
		In1: in1,
	}
	lockrdsClientMockImportInstallationMediaRequest.Lock()
	mock.calls.ImportInstallationMediaRequest = append(mock.calls.ImportInstallationMediaRequest, callInfo)
	lockrdsClientMockImportInstallationMediaRequest.Unlock()
	return mock.ImportInstallationMediaRequestFunc(in1)
}

// ImportInstallationMediaRequestCalls gets all the calls that were made to ImportInstallationMediaRequest.
// Check the length with:
//     len(mockedrdsClient.ImportInstallationMediaRequestCalls())
func (mock *rdsClientMock) ImportInstallationMediaRequestCalls() []struct {
	In1 *rds.ImportInstallationMediaInput
} {
	var calls []struct {
		In1 *rds.ImportInstallationMediaInput
	}
	lockrdsClientMockImportInstallationMediaRequest.RLock()
	calls = mock.calls.ImportInstallationMediaRequest
	lockrdsClientMockImportInstallationMediaRequest.RUnlock()
	return calls
}

// ImportInstallationMediaWithContext calls ImportInstallationMediaWithContextFunc.
func (mock *rdsClientMock) ImportInstallationMediaWithContext(in1 context.Context, in2 *rds.ImportInstallationMediaInput, in3 ...request.Option) (*rds.ImportInstallationMediaOutput, error) {
	if mock.ImportInstallationMediaWithContextFunc == nil {
		panic("rdsClientMock.ImportInstallationMediaWithContextFunc: method is nil but rdsClient.ImportInstallationMediaWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.ImportInstallationMediaInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockImportInstallationMediaWithContext.Lock()
	mock.calls.ImportInstallationMediaWithContext = append(mock.calls.ImportInstallationMediaWithContext, callInfo)
	lockrdsClientMockImportInstallationMediaWithContext.Unlock()
	return mock.ImportInstallationMediaWithContextFunc(in1, in2, in3...)
}

// ImportInstallationMediaWithContextCalls gets all the calls that were made to ImportInstallationMediaWithContext.
// Check the length with:
//     len(mockedrdsClient.ImportInstallationMediaWithContextCalls())
func (mock *rdsClientMock) ImportInstallationMediaWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.ImportInstallationMediaInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.ImportInstallationMediaInput
		In3 []request.Option
	}
	lockrdsClientMockImportInstallationMediaWithContext.RLock()
	calls = mock.calls.ImportInstallationMediaWithContext
	lockrdsClientMockImportInstallationMediaWithContext.RUnlock()
	return calls
}

// ListTagsForResource calls ListTagsForResourceFunc.
func (mock *rdsClientMock) ListTagsForResource(in1 *rds.ListTagsForResourceInput) (*rds.ListTagsForResourceOutput, error) {
	if mock.ListTagsForResourceFunc == nil {
		panic("rdsClientMock.ListTagsForResourceFunc: method is nil but rdsClient.ListTagsForResource was just called")
	}
	callInfo := struct {
		In1 *rds.ListTagsForResourceInput
	}{
		In1: in1,
	}
	lockrdsClientMockListTagsForResource.Lock()
	mock.calls.ListTagsForResource = append(mock.calls.ListTagsForResource, callInfo)
	lockrdsClientMockListTagsForResource.Unlock()
	return mock.ListTagsForResourceFunc(in1)
}

// ListTagsForResourceCalls gets all the calls that were made to ListTagsForResource.
// Check the length with:
//     len(mockedrdsClient.ListTagsForResourceCalls())
func (mock *rdsClientMock) ListTagsForResourceCalls() []struct {
	In1 *rds.ListTagsForResourceInput
} {
	var calls []struct {
		In1 *rds.ListTagsForResourceInput
	}
	lockrdsClientMockListTagsForResource.RLock()
	calls = mock.calls.ListTagsForResource
	lockrdsClientMockListTagsForResource.RUnlock()
	return calls
}

// ListTagsForResourceRequest calls ListTagsForResourceRequestFunc.
func (mock *rdsClientMock) ListTagsForResourceRequest(in1 *rds.ListTagsForResourceInput) (*request.Request, *rds.ListTagsForResourceOutput) {
	if mock.ListTagsForResourceRequestFunc == nil {
		panic("rdsClientMock.ListTagsForResourceRequestFunc: method is nil but rdsClient.ListTagsForResourceRequest was just called")
	}
	callInfo := struct {
		In1 *rds.ListTagsForResourceInput
	}{
		In1: in1,
	}
	lockrdsClientMockListTagsForResourceRequest.Lock()
	mock.calls.ListTagsForResourceRequest = append(mock.calls.ListTagsForResourceRequest, callInfo)
	lockrdsClientMockListTagsForResourceRequest.Unlock()
	return mock.ListTagsForResourceRequestFunc(in1)
}

// ListTagsForResourceRequestCalls gets all the calls that were made to ListTagsForResourceRequest.
// Check the length with:
//     len(mockedrdsClient.ListTagsForResourceRequestCalls())
func (mock *rdsClientMock) ListTagsForResourceRequestCalls() []struct {
	In1 *rds.ListTagsForResourceInput
} {
	var calls []struct {
		In1 *rds.ListTagsForResourceInput
	}
	lockrdsClientMockListTagsForResourceRequest.RLock()
	calls = mock.calls.ListTagsForResourceRequest
	lockrdsClientMockListTagsForResourceRequest.RUnlock()
	return calls
}

// ListTagsForResourceWithContext calls ListTagsForResourceWithContextFunc.
func (mock *rdsClientMock) ListTagsForResourceWithContext(in1 context.Context, in2 *rds.ListTagsForResourceInput, in3 ...request.Option) (*rds.ListTagsForResourceOutput, error) {
	if mock.ListTagsForResourceWithContextFunc == nil {
		panic("rdsClientMock.ListTagsForResourceWithContextFunc: method is nil but rdsClient.ListTagsForResourceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.ListTagsForResourceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockListTagsForResourceWithContext.Lock()
	mock.calls.ListTagsForResourceWithContext = append(mock.calls.ListTagsForResourceWithContext, callInfo)
	lockrdsClientMockListTagsForResourceWithContext.Unlock()
	return mock.ListTagsForResourceWithContextFunc(in1, in2, in3...)
}

// ListTagsForResourceWithContextCalls gets all the calls that were made to ListTagsForResourceWithContext.
// Check the length with:
//     len(mockedrdsClient.ListTagsForResourceWithContextCalls())
func (mock *rdsClientMock) ListTagsForResourceWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.ListTagsForResourceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.ListTagsForResourceInput
		In3 []request.Option
	}
	lockrdsClientMockListTagsForResourceWithContext.RLock()
	calls = mock.calls.ListTagsForResourceWithContext
	lockrdsClientMockListTagsForResourceWithContext.RUnlock()
	return calls
}

// ModifyCertificates calls ModifyCertificatesFunc.
func (mock *rdsClientMock) ModifyCertificates(in1 *rds.ModifyCertificatesInput) (*rds.ModifyCertificatesOutput, error) {
	if mock.ModifyCertificatesFunc == nil {
		panic("rdsClientMock.ModifyCertificatesFunc: method is nil but rdsClient.ModifyCertificates was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyCertificatesInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyCertificates.Lock()
	mock.calls.ModifyCertificates = append(mock.calls.ModifyCertificates, callInfo)
	lockrdsClientMockModifyCertificates.Unlock()
	return mock.ModifyCertificatesFunc(in1)
}

// ModifyCertificatesCalls gets all the calls that were made to ModifyCertificates.
// Check the length with:
//     len(mockedrdsClient.ModifyCertificatesCalls())
func (mock *rdsClientMock) ModifyCertificatesCalls() []struct {
	In1 *rds.ModifyCertificatesInput
} {
	var calls []struct {
		In1 *rds.ModifyCertificatesInput
	}
	lockrdsClientMockModifyCertificates.RLock()
	calls = mock.calls.ModifyCertificates
	lockrdsClientMockModifyCertificates.RUnlock()
	return calls
}

// ModifyCertificatesRequest calls ModifyCertificatesRequestFunc.
func (mock *rdsClientMock) ModifyCertificatesRequest(in1 *rds.ModifyCertificatesInput) (*request.Request, *rds.ModifyCertificatesOutput) {
	if mock.ModifyCertificatesRequestFunc == nil {
		panic("rdsClientMock.ModifyCertificatesRequestFunc: method is nil but rdsClient.ModifyCertificatesRequest was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyCertificatesInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyCertificatesRequest.Lock()
	mock.calls.ModifyCertificatesRequest = append(mock.calls.ModifyCertificatesRequest, callInfo)
	lockrdsClientMockModifyCertificatesRequest.Unlock()
	return mock.ModifyCertificatesRequestFunc(in1)
}

// ModifyCertificatesRequestCalls gets all the calls that were made to ModifyCertificatesRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyCertificatesRequestCalls())
func (mock *rdsClientMock) ModifyCertificatesRequestCalls() []struct {
	In1 *rds.ModifyCertificatesInput
} {
	var calls []struct {
		In1 *rds.ModifyCertificatesInput
	}
	lockrdsClientMockModifyCertificatesRequest.RLock()
	calls = mock.calls.ModifyCertificatesRequest
	lockrdsClientMockModifyCertificatesRequest.RUnlock()
	return calls
}

// ModifyCertificatesWithContext calls ModifyCertificatesWithContextFunc.
func (mock *rdsClientMock) ModifyCertificatesWithContext(in1 context.Context, in2 *rds.ModifyCertificatesInput, in3 ...request.Option) (*rds.ModifyCertificatesOutput, error) {
	if mock.ModifyCertificatesWithContextFunc == nil {
		panic("rdsClientMock.ModifyCertificatesWithContextFunc: method is nil but rdsClient.ModifyCertificatesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.ModifyCertificatesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockModifyCertificatesWithContext.Lock()
	mock.calls.ModifyCertificatesWithContext = append(mock.calls.ModifyCertificatesWithContext, callInfo)
	lockrdsClientMockModifyCertificatesWithContext.Unlock()
	return mock.ModifyCertificatesWithContextFunc(in1, in2, in3...)
}

// ModifyCertificatesWithContextCalls gets all the calls that were made to ModifyCertificatesWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyCertificatesWithContextCalls())
func (mock *rdsClientMock) ModifyCertificatesWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.ModifyCertificatesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.ModifyCertificatesInput
		In3 []request.Option
	}
	lockrdsClientMockModifyCertificatesWithContext.RLock()
	calls = mock.calls.ModifyCertificatesWithContext
	lockrdsClientMockModifyCertificatesWithContext.RUnlock()
	return calls
}

// ModifyCurrentDBClusterCapacity calls ModifyCurrentDBClusterCapacityFunc.
func (mock *rdsClientMock) ModifyCurrentDBClusterCapacity(in1 *rds.ModifyCurrentDBClusterCapacityInput) (*rds.ModifyCurrentDBClusterCapacityOutput, error) {
	if mock.ModifyCurrentDBClusterCapacityFunc == nil {
		panic("rdsClientMock.ModifyCurrentDBClusterCapacityFunc: method is nil but rdsClient.ModifyCurrentDBClusterCapacity was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyCurrentDBClusterCapacityInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyCurrentDBClusterCapacity.Lock()
	mock.calls.ModifyCurrentDBClusterCapacity = append(mock.calls.ModifyCurrentDBClusterCapacity, callInfo)
	lockrdsClientMockModifyCurrentDBClusterCapacity.Unlock()
	return mock.ModifyCurrentDBClusterCapacityFunc(in1)
}

// ModifyCurrentDBClusterCapacityCalls gets all the calls that were made to ModifyCurrentDBClusterCapacity.
// Check the length with:
//     len(mockedrdsClient.ModifyCurrentDBClusterCapacityCalls())
func (mock *rdsClientMock) ModifyCurrentDBClusterCapacityCalls() []struct {
	In1 *rds.ModifyCurrentDBClusterCapacityInput
} {
	var calls []struct {
		In1 *rds.ModifyCurrentDBClusterCapacityInput
	}
	lockrdsClientMockModifyCurrentDBClusterCapacity.RLock()
	calls = mock.calls.ModifyCurrentDBClusterCapacity
	lockrdsClientMockModifyCurrentDBClusterCapacity.RUnlock()
	return calls
}

// ModifyCurrentDBClusterCapacityRequest calls ModifyCurrentDBClusterCapacityRequestFunc.
func (mock *rdsClientMock) ModifyCurrentDBClusterCapacityRequest(in1 *rds.ModifyCurrentDBClusterCapacityInput) (*request.Request, *rds.ModifyCurrentDBClusterCapacityOutput) {
	if mock.ModifyCurrentDBClusterCapacityRequestFunc == nil {
		panic("rdsClientMock.ModifyCurrentDBClusterCapacityRequestFunc: method is nil but rdsClient.ModifyCurrentDBClusterCapacityRequest was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyCurrentDBClusterCapacityInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyCurrentDBClusterCapacityRequest.Lock()
	mock.calls.ModifyCurrentDBClusterCapacityRequest = append(mock.calls.ModifyCurrentDBClusterCapacityRequest, callInfo)
	lockrdsClientMockModifyCurrentDBClusterCapacityRequest.Unlock()
	return mock.ModifyCurrentDBClusterCapacityRequestFunc(in1)
}

// ModifyCurrentDBClusterCapacityRequestCalls gets all the calls that were made to ModifyCurrentDBClusterCapacityRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyCurrentDBClusterCapacityRequestCalls())
func (mock *rdsClientMock) ModifyCurrentDBClusterCapacityRequestCalls() []struct {
	In1 *rds.ModifyCurrentDBClusterCapacityInput
} {
	var calls []struct {
		In1 *rds.ModifyCurrentDBClusterCapacityInput
	}
	lockrdsClientMockModifyCurrentDBClusterCapacityRequest.RLock()
	calls = mock.calls.ModifyCurrentDBClusterCapacityRequest
	lockrdsClientMockModifyCurrentDBClusterCapacityRequest.RUnlock()
	return calls
}

// ModifyCurrentDBClusterCapacityWithContext calls ModifyCurrentDBClusterCapacityWithContextFunc.
func (mock *rdsClientMock) ModifyCurrentDBClusterCapacityWithContext(in1 context.Context, in2 *rds.ModifyCurrentDBClusterCapacityInput, in3 ...request.Option) (*rds.ModifyCurrentDBClusterCapacityOutput, error) {
	if mock.ModifyCurrentDBClusterCapacityWithContextFunc == nil {
		panic("rdsClientMock.ModifyCurrentDBClusterCapacityWithContextFunc: method is nil but rdsClient.ModifyCurrentDBClusterCapacityWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.ModifyCurrentDBClusterCapacityInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockModifyCurrentDBClusterCapacityWithContext.Lock()
	mock.calls.ModifyCurrentDBClusterCapacityWithContext = append(mock.calls.ModifyCurrentDBClusterCapacityWithContext, callInfo)
	lockrdsClientMockModifyCurrentDBClusterCapacityWithContext.Unlock()
	return mock.ModifyCurrentDBClusterCapacityWithContextFunc(in1, in2, in3...)
}

// ModifyCurrentDBClusterCapacityWithContextCalls gets all the calls that were made to ModifyCurrentDBClusterCapacityWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyCurrentDBClusterCapacityWithContextCalls())
func (mock *rdsClientMock) ModifyCurrentDBClusterCapacityWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.ModifyCurrentDBClusterCapacityInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.ModifyCurrentDBClusterCapacityInput
		In3 []request.Option
	}
	lockrdsClientMockModifyCurrentDBClusterCapacityWithContext.RLock()
	calls = mock.calls.ModifyCurrentDBClusterCapacityWithContext
	lockrdsClientMockModifyCurrentDBClusterCapacityWithContext.RUnlock()
	return calls
}

// ModifyDBCluster calls ModifyDBClusterFunc.
func (mock *rdsClientMock) ModifyDBCluster(in1 *rds.ModifyDBClusterInput) (*rds.ModifyDBClusterOutput, error) {
	if mock.ModifyDBClusterFunc == nil {
		panic("rdsClientMock.ModifyDBClusterFunc: method is nil but rdsClient.ModifyDBCluster was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyDBClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyDBCluster.Lock()
	mock.calls.ModifyDBCluster = append(mock.calls.ModifyDBCluster, callInfo)
	lockrdsClientMockModifyDBCluster.Unlock()
	return mock.ModifyDBClusterFunc(in1)
}

// ModifyDBClusterCalls gets all the calls that were made to ModifyDBCluster.
// Check the length with:
//     len(mockedrdsClient.ModifyDBClusterCalls())
func (mock *rdsClientMock) ModifyDBClusterCalls() []struct {
	In1 *rds.ModifyDBClusterInput
} {
	var calls []struct {
		In1 *rds.ModifyDBClusterInput
	}
	lockrdsClientMockModifyDBCluster.RLock()
	calls = mock.calls.ModifyDBCluster
	lockrdsClientMockModifyDBCluster.RUnlock()
	return calls
}

// ModifyDBClusterEndpoint calls ModifyDBClusterEndpointFunc.
func (mock *rdsClientMock) ModifyDBClusterEndpoint(in1 *rds.ModifyDBClusterEndpointInput) (*rds.ModifyDBClusterEndpointOutput, error) {
	if mock.ModifyDBClusterEndpointFunc == nil {
		panic("rdsClientMock.ModifyDBClusterEndpointFunc: method is nil but rdsClient.ModifyDBClusterEndpoint was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyDBClusterEndpointInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyDBClusterEndpoint.Lock()
	mock.calls.ModifyDBClusterEndpoint = append(mock.calls.ModifyDBClusterEndpoint, callInfo)
	lockrdsClientMockModifyDBClusterEndpoint.Unlock()
	return mock.ModifyDBClusterEndpointFunc(in1)
}

// ModifyDBClusterEndpointCalls gets all the calls that were made to ModifyDBClusterEndpoint.
// Check the length with:
//     len(mockedrdsClient.ModifyDBClusterEndpointCalls())
func (mock *rdsClientMock) ModifyDBClusterEndpointCalls() []struct {
	In1 *rds.ModifyDBClusterEndpointInput
} {
	var calls []struct {
		In1 *rds.ModifyDBClusterEndpointInput
	}
	lockrdsClientMockModifyDBClusterEndpoint.RLock()
	calls = mock.calls.ModifyDBClusterEndpoint
	lockrdsClientMockModifyDBClusterEndpoint.RUnlock()
	return calls
}

// ModifyDBClusterEndpointRequest calls ModifyDBClusterEndpointRequestFunc.
func (mock *rdsClientMock) ModifyDBClusterEndpointRequest(in1 *rds.ModifyDBClusterEndpointInput) (*request.Request, *rds.ModifyDBClusterEndpointOutput) {
	if mock.ModifyDBClusterEndpointRequestFunc == nil {
		panic("rdsClientMock.ModifyDBClusterEndpointRequestFunc: method is nil but rdsClient.ModifyDBClusterEndpointRequest was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyDBClusterEndpointInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyDBClusterEndpointRequest.Lock()
	mock.calls.ModifyDBClusterEndpointRequest = append(mock.calls.ModifyDBClusterEndpointRequest, callInfo)
	lockrdsClientMockModifyDBClusterEndpointRequest.Unlock()
	return mock.ModifyDBClusterEndpointRequestFunc(in1)
}

// ModifyDBClusterEndpointRequestCalls gets all the calls that were made to ModifyDBClusterEndpointRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyDBClusterEndpointRequestCalls())
func (mock *rdsClientMock) ModifyDBClusterEndpointRequestCalls() []struct {
	In1 *rds.ModifyDBClusterEndpointInput
} {
	var calls []struct {
		In1 *rds.ModifyDBClusterEndpointInput
	}
	lockrdsClientMockModifyDBClusterEndpointRequest.RLock()
	calls = mock.calls.ModifyDBClusterEndpointRequest
	lockrdsClientMockModifyDBClusterEndpointRequest.RUnlock()
	return calls
}

// ModifyDBClusterEndpointWithContext calls ModifyDBClusterEndpointWithContextFunc.
func (mock *rdsClientMock) ModifyDBClusterEndpointWithContext(in1 context.Context, in2 *rds.ModifyDBClusterEndpointInput, in3 ...request.Option) (*rds.ModifyDBClusterEndpointOutput, error) {
	if mock.ModifyDBClusterEndpointWithContextFunc == nil {
		panic("rdsClientMock.ModifyDBClusterEndpointWithContextFunc: method is nil but rdsClient.ModifyDBClusterEndpointWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.ModifyDBClusterEndpointInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockModifyDBClusterEndpointWithContext.Lock()
	mock.calls.ModifyDBClusterEndpointWithContext = append(mock.calls.ModifyDBClusterEndpointWithContext, callInfo)
	lockrdsClientMockModifyDBClusterEndpointWithContext.Unlock()
	return mock.ModifyDBClusterEndpointWithContextFunc(in1, in2, in3...)
}

// ModifyDBClusterEndpointWithContextCalls gets all the calls that were made to ModifyDBClusterEndpointWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyDBClusterEndpointWithContextCalls())
func (mock *rdsClientMock) ModifyDBClusterEndpointWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.ModifyDBClusterEndpointInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.ModifyDBClusterEndpointInput
		In3 []request.Option
	}
	lockrdsClientMockModifyDBClusterEndpointWithContext.RLock()
	calls = mock.calls.ModifyDBClusterEndpointWithContext
	lockrdsClientMockModifyDBClusterEndpointWithContext.RUnlock()
	return calls
}

// ModifyDBClusterParameterGroup calls ModifyDBClusterParameterGroupFunc.
func (mock *rdsClientMock) ModifyDBClusterParameterGroup(in1 *rds.ModifyDBClusterParameterGroupInput) (*rds.DBClusterParameterGroupNameMessage, error) {
	if mock.ModifyDBClusterParameterGroupFunc == nil {
		panic("rdsClientMock.ModifyDBClusterParameterGroupFunc: method is nil but rdsClient.ModifyDBClusterParameterGroup was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyDBClusterParameterGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyDBClusterParameterGroup.Lock()
	mock.calls.ModifyDBClusterParameterGroup = append(mock.calls.ModifyDBClusterParameterGroup, callInfo)
	lockrdsClientMockModifyDBClusterParameterGroup.Unlock()
	return mock.ModifyDBClusterParameterGroupFunc(in1)
}

// ModifyDBClusterParameterGroupCalls gets all the calls that were made to ModifyDBClusterParameterGroup.
// Check the length with:
//     len(mockedrdsClient.ModifyDBClusterParameterGroupCalls())
func (mock *rdsClientMock) ModifyDBClusterParameterGroupCalls() []struct {
	In1 *rds.ModifyDBClusterParameterGroupInput
} {
	var calls []struct {
		In1 *rds.ModifyDBClusterParameterGroupInput
	}
	lockrdsClientMockModifyDBClusterParameterGroup.RLock()
	calls = mock.calls.ModifyDBClusterParameterGroup
	lockrdsClientMockModifyDBClusterParameterGroup.RUnlock()
	return calls
}

// ModifyDBClusterParameterGroupRequest calls ModifyDBClusterParameterGroupRequestFunc.
func (mock *rdsClientMock) ModifyDBClusterParameterGroupRequest(in1 *rds.ModifyDBClusterParameterGroupInput) (*request.Request, *rds.DBClusterParameterGroupNameMessage) {
	if mock.ModifyDBClusterParameterGroupRequestFunc == nil {
		panic("rdsClientMock.ModifyDBClusterParameterGroupRequestFunc: method is nil but rdsClient.ModifyDBClusterParameterGroupRequest was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyDBClusterParameterGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyDBClusterParameterGroupRequest.Lock()
	mock.calls.ModifyDBClusterParameterGroupRequest = append(mock.calls.ModifyDBClusterParameterGroupRequest, callInfo)
	lockrdsClientMockModifyDBClusterParameterGroupRequest.Unlock()
	return mock.ModifyDBClusterParameterGroupRequestFunc(in1)
}

// ModifyDBClusterParameterGroupRequestCalls gets all the calls that were made to ModifyDBClusterParameterGroupRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyDBClusterParameterGroupRequestCalls())
func (mock *rdsClientMock) ModifyDBClusterParameterGroupRequestCalls() []struct {
	In1 *rds.ModifyDBClusterParameterGroupInput
} {
	var calls []struct {
		In1 *rds.ModifyDBClusterParameterGroupInput
	}
	lockrdsClientMockModifyDBClusterParameterGroupRequest.RLock()
	calls = mock.calls.ModifyDBClusterParameterGroupRequest
	lockrdsClientMockModifyDBClusterParameterGroupRequest.RUnlock()
	return calls
}

// ModifyDBClusterParameterGroupWithContext calls ModifyDBClusterParameterGroupWithContextFunc.
func (mock *rdsClientMock) ModifyDBClusterParameterGroupWithContext(in1 context.Context, in2 *rds.ModifyDBClusterParameterGroupInput, in3 ...request.Option) (*rds.DBClusterParameterGroupNameMessage, error) {
	if mock.ModifyDBClusterParameterGroupWithContextFunc == nil {
		panic("rdsClientMock.ModifyDBClusterParameterGroupWithContextFunc: method is nil but rdsClient.ModifyDBClusterParameterGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.ModifyDBClusterParameterGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockModifyDBClusterParameterGroupWithContext.Lock()
	mock.calls.ModifyDBClusterParameterGroupWithContext = append(mock.calls.ModifyDBClusterParameterGroupWithContext, callInfo)
	lockrdsClientMockModifyDBClusterParameterGroupWithContext.Unlock()
	return mock.ModifyDBClusterParameterGroupWithContextFunc(in1, in2, in3...)
}

// ModifyDBClusterParameterGroupWithContextCalls gets all the calls that were made to ModifyDBClusterParameterGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyDBClusterParameterGroupWithContextCalls())
func (mock *rdsClientMock) ModifyDBClusterParameterGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.ModifyDBClusterParameterGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.ModifyDBClusterParameterGroupInput
		In3 []request.Option
	}
	lockrdsClientMockModifyDBClusterParameterGroupWithContext.RLock()
	calls = mock.calls.ModifyDBClusterParameterGroupWithContext
	lockrdsClientMockModifyDBClusterParameterGroupWithContext.RUnlock()
	return calls
}

// ModifyDBClusterRequest calls ModifyDBClusterRequestFunc.
func (mock *rdsClientMock) ModifyDBClusterRequest(in1 *rds.ModifyDBClusterInput) (*request.Request, *rds.ModifyDBClusterOutput) {
	if mock.ModifyDBClusterRequestFunc == nil {
		panic("rdsClientMock.ModifyDBClusterRequestFunc: method is nil but rdsClient.ModifyDBClusterRequest was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyDBClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyDBClusterRequest.Lock()
	mock.calls.ModifyDBClusterRequest = append(mock.calls.ModifyDBClusterRequest, callInfo)
	lockrdsClientMockModifyDBClusterRequest.Unlock()
	return mock.ModifyDBClusterRequestFunc(in1)
}

// ModifyDBClusterRequestCalls gets all the calls that were made to ModifyDBClusterRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyDBClusterRequestCalls())
func (mock *rdsClientMock) ModifyDBClusterRequestCalls() []struct {
	In1 *rds.ModifyDBClusterInput
} {
	var calls []struct {
		In1 *rds.ModifyDBClusterInput
	}
	lockrdsClientMockModifyDBClusterRequest.RLock()
	calls = mock.calls.ModifyDBClusterRequest
	lockrdsClientMockModifyDBClusterRequest.RUnlock()
	return calls
}

// ModifyDBClusterSnapshotAttribute calls ModifyDBClusterSnapshotAttributeFunc.
func (mock *rdsClientMock) ModifyDBClusterSnapshotAttribute(in1 *rds.ModifyDBClusterSnapshotAttributeInput) (*rds.ModifyDBClusterSnapshotAttributeOutput, error) {
	if mock.ModifyDBClusterSnapshotAttributeFunc == nil {
		panic("rdsClientMock.ModifyDBClusterSnapshotAttributeFunc: method is nil but rdsClient.ModifyDBClusterSnapshotAttribute was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyDBClusterSnapshotAttributeInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyDBClusterSnapshotAttribute.Lock()
	mock.calls.ModifyDBClusterSnapshotAttribute = append(mock.calls.ModifyDBClusterSnapshotAttribute, callInfo)
	lockrdsClientMockModifyDBClusterSnapshotAttribute.Unlock()
	return mock.ModifyDBClusterSnapshotAttributeFunc(in1)
}

// ModifyDBClusterSnapshotAttributeCalls gets all the calls that were made to ModifyDBClusterSnapshotAttribute.
// Check the length with:
//     len(mockedrdsClient.ModifyDBClusterSnapshotAttributeCalls())
func (mock *rdsClientMock) ModifyDBClusterSnapshotAttributeCalls() []struct {
	In1 *rds.ModifyDBClusterSnapshotAttributeInput
} {
	var calls []struct {
		In1 *rds.ModifyDBClusterSnapshotAttributeInput
	}
	lockrdsClientMockModifyDBClusterSnapshotAttribute.RLock()
	calls = mock.calls.ModifyDBClusterSnapshotAttribute
	lockrdsClientMockModifyDBClusterSnapshotAttribute.RUnlock()
	return calls
}

// ModifyDBClusterSnapshotAttributeRequest calls ModifyDBClusterSnapshotAttributeRequestFunc.
func (mock *rdsClientMock) ModifyDBClusterSnapshotAttributeRequest(in1 *rds.ModifyDBClusterSnapshotAttributeInput) (*request.Request, *rds.ModifyDBClusterSnapshotAttributeOutput) {
	if mock.ModifyDBClusterSnapshotAttributeRequestFunc == nil {
		panic("rdsClientMock.ModifyDBClusterSnapshotAttributeRequestFunc: method is nil but rdsClient.ModifyDBClusterSnapshotAttributeRequest was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyDBClusterSnapshotAttributeInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyDBClusterSnapshotAttributeRequest.Lock()
	mock.calls.ModifyDBClusterSnapshotAttributeRequest = append(mock.calls.ModifyDBClusterSnapshotAttributeRequest, callInfo)
	lockrdsClientMockModifyDBClusterSnapshotAttributeRequest.Unlock()
	return mock.ModifyDBClusterSnapshotAttributeRequestFunc(in1)
}

// ModifyDBClusterSnapshotAttributeRequestCalls gets all the calls that were made to ModifyDBClusterSnapshotAttributeRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyDBClusterSnapshotAttributeRequestCalls())
func (mock *rdsClientMock) ModifyDBClusterSnapshotAttributeRequestCalls() []struct {
	In1 *rds.ModifyDBClusterSnapshotAttributeInput
} {
	var calls []struct {
		In1 *rds.ModifyDBClusterSnapshotAttributeInput
	}
	lockrdsClientMockModifyDBClusterSnapshotAttributeRequest.RLock()
	calls = mock.calls.ModifyDBClusterSnapshotAttributeRequest
	lockrdsClientMockModifyDBClusterSnapshotAttributeRequest.RUnlock()
	return calls
}

// ModifyDBClusterSnapshotAttributeWithContext calls ModifyDBClusterSnapshotAttributeWithContextFunc.
func (mock *rdsClientMock) ModifyDBClusterSnapshotAttributeWithContext(in1 context.Context, in2 *rds.ModifyDBClusterSnapshotAttributeInput, in3 ...request.Option) (*rds.ModifyDBClusterSnapshotAttributeOutput, error) {
	if mock.ModifyDBClusterSnapshotAttributeWithContextFunc == nil {
		panic("rdsClientMock.ModifyDBClusterSnapshotAttributeWithContextFunc: method is nil but rdsClient.ModifyDBClusterSnapshotAttributeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.ModifyDBClusterSnapshotAttributeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockModifyDBClusterSnapshotAttributeWithContext.Lock()
	mock.calls.ModifyDBClusterSnapshotAttributeWithContext = append(mock.calls.ModifyDBClusterSnapshotAttributeWithContext, callInfo)
	lockrdsClientMockModifyDBClusterSnapshotAttributeWithContext.Unlock()
	return mock.ModifyDBClusterSnapshotAttributeWithContextFunc(in1, in2, in3...)
}

// ModifyDBClusterSnapshotAttributeWithContextCalls gets all the calls that were made to ModifyDBClusterSnapshotAttributeWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyDBClusterSnapshotAttributeWithContextCalls())
func (mock *rdsClientMock) ModifyDBClusterSnapshotAttributeWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.ModifyDBClusterSnapshotAttributeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.ModifyDBClusterSnapshotAttributeInput
		In3 []request.Option
	}
	lockrdsClientMockModifyDBClusterSnapshotAttributeWithContext.RLock()
	calls = mock.calls.ModifyDBClusterSnapshotAttributeWithContext
	lockrdsClientMockModifyDBClusterSnapshotAttributeWithContext.RUnlock()
	return calls
}

// ModifyDBClusterWithContext calls ModifyDBClusterWithContextFunc.
func (mock *rdsClientMock) ModifyDBClusterWithContext(in1 context.Context, in2 *rds.ModifyDBClusterInput, in3 ...request.Option) (*rds.ModifyDBClusterOutput, error) {
	if mock.ModifyDBClusterWithContextFunc == nil {
		panic("rdsClientMock.ModifyDBClusterWithContextFunc: method is nil but rdsClient.ModifyDBClusterWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.ModifyDBClusterInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockModifyDBClusterWithContext.Lock()
	mock.calls.ModifyDBClusterWithContext = append(mock.calls.ModifyDBClusterWithContext, callInfo)
	lockrdsClientMockModifyDBClusterWithContext.Unlock()
	return mock.ModifyDBClusterWithContextFunc(in1, in2, in3...)
}

// ModifyDBClusterWithContextCalls gets all the calls that were made to ModifyDBClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyDBClusterWithContextCalls())
func (mock *rdsClientMock) ModifyDBClusterWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.ModifyDBClusterInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.ModifyDBClusterInput
		In3 []request.Option
	}
	lockrdsClientMockModifyDBClusterWithContext.RLock()
	calls = mock.calls.ModifyDBClusterWithContext
	lockrdsClientMockModifyDBClusterWithContext.RUnlock()
	return calls
}

// ModifyDBInstance calls ModifyDBInstanceFunc.
func (mock *rdsClientMock) ModifyDBInstance(in1 *rds.ModifyDBInstanceInput) (*rds.ModifyDBInstanceOutput, error) {
	if mock.ModifyDBInstanceFunc == nil {
		panic("rdsClientMock.ModifyDBInstanceFunc: method is nil but rdsClient.ModifyDBInstance was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyDBInstanceInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyDBInstance.Lock()
	mock.calls.ModifyDBInstance = append(mock.calls.ModifyDBInstance, callInfo)
	lockrdsClientMockModifyDBInstance.Unlock()
	return mock.ModifyDBInstanceFunc(in1)
}

// ModifyDBInstanceCalls gets all the calls that were made to ModifyDBInstance.
// Check the length with:
//     len(mockedrdsClient.ModifyDBInstanceCalls())
func (mock *rdsClientMock) ModifyDBInstanceCalls() []struct {
	In1 *rds.ModifyDBInstanceInput
} {
	var calls []struct {
		In1 *rds.ModifyDBInstanceInput
	}
	lockrdsClientMockModifyDBInstance.RLock()
	calls = mock.calls.ModifyDBInstance
	lockrdsClientMockModifyDBInstance.RUnlock()
	return calls
}

// ModifyDBInstanceRequest calls ModifyDBInstanceRequestFunc.
func (mock *rdsClientMock) ModifyDBInstanceRequest(in1 *rds.ModifyDBInstanceInput) (*request.Request, *rds.ModifyDBInstanceOutput) {
	if mock.ModifyDBInstanceRequestFunc == nil {
		panic("rdsClientMock.ModifyDBInstanceRequestFunc: method is nil but rdsClient.ModifyDBInstanceRequest was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyDBInstanceInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyDBInstanceRequest.Lock()
	mock.calls.ModifyDBInstanceRequest = append(mock.calls.ModifyDBInstanceRequest, callInfo)
	lockrdsClientMockModifyDBInstanceRequest.Unlock()
	return mock.ModifyDBInstanceRequestFunc(in1)
}

// ModifyDBInstanceRequestCalls gets all the calls that were made to ModifyDBInstanceRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyDBInstanceRequestCalls())
func (mock *rdsClientMock) ModifyDBInstanceRequestCalls() []struct {
	In1 *rds.ModifyDBInstanceInput
} {
	var calls []struct {
		In1 *rds.ModifyDBInstanceInput
	}
	lockrdsClientMockModifyDBInstanceRequest.RLock()
	calls = mock.calls.ModifyDBInstanceRequest
	lockrdsClientMockModifyDBInstanceRequest.RUnlock()
	return calls
}

// ModifyDBInstanceWithContext calls ModifyDBInstanceWithContextFunc.
func (mock *rdsClientMock) ModifyDBInstanceWithContext(in1 context.Context, in2 *rds.ModifyDBInstanceInput, in3 ...request.Option) (*rds.ModifyDBInstanceOutput, error) {
	if mock.ModifyDBInstanceWithContextFunc == nil {
		panic("rdsClientMock.ModifyDBInstanceWithContextFunc: method is nil but rdsClient.ModifyDBInstanceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.ModifyDBInstanceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockModifyDBInstanceWithContext.Lock()
	mock.calls.ModifyDBInstanceWithContext = append(mock.calls.ModifyDBInstanceWithContext, callInfo)
	lockrdsClientMockModifyDBInstanceWithContext.Unlock()
	return mock.ModifyDBInstanceWithContextFunc(in1, in2, in3...)
}

// ModifyDBInstanceWithContextCalls gets all the calls that were made to ModifyDBInstanceWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyDBInstanceWithContextCalls())
func (mock *rdsClientMock) ModifyDBInstanceWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.ModifyDBInstanceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.ModifyDBInstanceInput
		In3 []request.Option
	}
	lockrdsClientMockModifyDBInstanceWithContext.RLock()
	calls = mock.calls.ModifyDBInstanceWithContext
	lockrdsClientMockModifyDBInstanceWithContext.RUnlock()
	return calls
}

// ModifyDBParameterGroup calls ModifyDBParameterGroupFunc.
func (mock *rdsClientMock) ModifyDBParameterGroup(in1 *rds.ModifyDBParameterGroupInput) (*rds.DBParameterGroupNameMessage, error) {
	if mock.ModifyDBParameterGroupFunc == nil {
		panic("rdsClientMock.ModifyDBParameterGroupFunc: method is nil but rdsClient.ModifyDBParameterGroup was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyDBParameterGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyDBParameterGroup.Lock()
	mock.calls.ModifyDBParameterGroup = append(mock.calls.ModifyDBParameterGroup, callInfo)
	lockrdsClientMockModifyDBParameterGroup.Unlock()
	return mock.ModifyDBParameterGroupFunc(in1)
}

// ModifyDBParameterGroupCalls gets all the calls that were made to ModifyDBParameterGroup.
// Check the length with:
//     len(mockedrdsClient.ModifyDBParameterGroupCalls())
func (mock *rdsClientMock) ModifyDBParameterGroupCalls() []struct {
	In1 *rds.ModifyDBParameterGroupInput
} {
	var calls []struct {
		In1 *rds.ModifyDBParameterGroupInput
	}
	lockrdsClientMockModifyDBParameterGroup.RLock()
	calls = mock.calls.ModifyDBParameterGroup
	lockrdsClientMockModifyDBParameterGroup.RUnlock()
	return calls
}

// ModifyDBParameterGroupRequest calls ModifyDBParameterGroupRequestFunc.
func (mock *rdsClientMock) ModifyDBParameterGroupRequest(in1 *rds.ModifyDBParameterGroupInput) (*request.Request, *rds.DBParameterGroupNameMessage) {
	if mock.ModifyDBParameterGroupRequestFunc == nil {
		panic("rdsClientMock.ModifyDBParameterGroupRequestFunc: method is nil but rdsClient.ModifyDBParameterGroupRequest was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyDBParameterGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyDBParameterGroupRequest.Lock()
	mock.calls.ModifyDBParameterGroupRequest = append(mock.calls.ModifyDBParameterGroupRequest, callInfo)
	lockrdsClientMockModifyDBParameterGroupRequest.Unlock()
	return mock.ModifyDBParameterGroupRequestFunc(in1)
}

// ModifyDBParameterGroupRequestCalls gets all the calls that were made to ModifyDBParameterGroupRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyDBParameterGroupRequestCalls())
func (mock *rdsClientMock) ModifyDBParameterGroupRequestCalls() []struct {
	In1 *rds.ModifyDBParameterGroupInput
} {
	var calls []struct {
		In1 *rds.ModifyDBParameterGroupInput
	}
	lockrdsClientMockModifyDBParameterGroupRequest.RLock()
	calls = mock.calls.ModifyDBParameterGroupRequest
	lockrdsClientMockModifyDBParameterGroupRequest.RUnlock()
	return calls
}

// ModifyDBParameterGroupWithContext calls ModifyDBParameterGroupWithContextFunc.
func (mock *rdsClientMock) ModifyDBParameterGroupWithContext(in1 context.Context, in2 *rds.ModifyDBParameterGroupInput, in3 ...request.Option) (*rds.DBParameterGroupNameMessage, error) {
	if mock.ModifyDBParameterGroupWithContextFunc == nil {
		panic("rdsClientMock.ModifyDBParameterGroupWithContextFunc: method is nil but rdsClient.ModifyDBParameterGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.ModifyDBParameterGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockModifyDBParameterGroupWithContext.Lock()
	mock.calls.ModifyDBParameterGroupWithContext = append(mock.calls.ModifyDBParameterGroupWithContext, callInfo)
	lockrdsClientMockModifyDBParameterGroupWithContext.Unlock()
	return mock.ModifyDBParameterGroupWithContextFunc(in1, in2, in3...)
}

// ModifyDBParameterGroupWithContextCalls gets all the calls that were made to ModifyDBParameterGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyDBParameterGroupWithContextCalls())
func (mock *rdsClientMock) ModifyDBParameterGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.ModifyDBParameterGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.ModifyDBParameterGroupInput
		In3 []request.Option
	}
	lockrdsClientMockModifyDBParameterGroupWithContext.RLock()
	calls = mock.calls.ModifyDBParameterGroupWithContext
	lockrdsClientMockModifyDBParameterGroupWithContext.RUnlock()
	return calls
}

// ModifyDBProxy calls ModifyDBProxyFunc.
func (mock *rdsClientMock) ModifyDBProxy(in1 *rds.ModifyDBProxyInput) (*rds.ModifyDBProxyOutput, error) {
	if mock.ModifyDBProxyFunc == nil {
		panic("rdsClientMock.ModifyDBProxyFunc: method is nil but rdsClient.ModifyDBProxy was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyDBProxyInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyDBProxy.Lock()
	mock.calls.ModifyDBProxy = append(mock.calls.ModifyDBProxy, callInfo)
	lockrdsClientMockModifyDBProxy.Unlock()
	return mock.ModifyDBProxyFunc(in1)
}

// ModifyDBProxyCalls gets all the calls that were made to ModifyDBProxy.
// Check the length with:
//     len(mockedrdsClient.ModifyDBProxyCalls())
func (mock *rdsClientMock) ModifyDBProxyCalls() []struct {
	In1 *rds.ModifyDBProxyInput
} {
	var calls []struct {
		In1 *rds.ModifyDBProxyInput
	}
	lockrdsClientMockModifyDBProxy.RLock()
	calls = mock.calls.ModifyDBProxy
	lockrdsClientMockModifyDBProxy.RUnlock()
	return calls
}

// ModifyDBProxyRequest calls ModifyDBProxyRequestFunc.
func (mock *rdsClientMock) ModifyDBProxyRequest(in1 *rds.ModifyDBProxyInput) (*request.Request, *rds.ModifyDBProxyOutput) {
	if mock.ModifyDBProxyRequestFunc == nil {
		panic("rdsClientMock.ModifyDBProxyRequestFunc: method is nil but rdsClient.ModifyDBProxyRequest was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyDBProxyInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyDBProxyRequest.Lock()
	mock.calls.ModifyDBProxyRequest = append(mock.calls.ModifyDBProxyRequest, callInfo)
	lockrdsClientMockModifyDBProxyRequest.Unlock()
	return mock.ModifyDBProxyRequestFunc(in1)
}

// ModifyDBProxyRequestCalls gets all the calls that were made to ModifyDBProxyRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyDBProxyRequestCalls())
func (mock *rdsClientMock) ModifyDBProxyRequestCalls() []struct {
	In1 *rds.ModifyDBProxyInput
} {
	var calls []struct {
		In1 *rds.ModifyDBProxyInput
	}
	lockrdsClientMockModifyDBProxyRequest.RLock()
	calls = mock.calls.ModifyDBProxyRequest
	lockrdsClientMockModifyDBProxyRequest.RUnlock()
	return calls
}

// ModifyDBProxyTargetGroup calls ModifyDBProxyTargetGroupFunc.
func (mock *rdsClientMock) ModifyDBProxyTargetGroup(in1 *rds.ModifyDBProxyTargetGroupInput) (*rds.ModifyDBProxyTargetGroupOutput, error) {
	if mock.ModifyDBProxyTargetGroupFunc == nil {
		panic("rdsClientMock.ModifyDBProxyTargetGroupFunc: method is nil but rdsClient.ModifyDBProxyTargetGroup was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyDBProxyTargetGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyDBProxyTargetGroup.Lock()
	mock.calls.ModifyDBProxyTargetGroup = append(mock.calls.ModifyDBProxyTargetGroup, callInfo)
	lockrdsClientMockModifyDBProxyTargetGroup.Unlock()
	return mock.ModifyDBProxyTargetGroupFunc(in1)
}

// ModifyDBProxyTargetGroupCalls gets all the calls that were made to ModifyDBProxyTargetGroup.
// Check the length with:
//     len(mockedrdsClient.ModifyDBProxyTargetGroupCalls())
func (mock *rdsClientMock) ModifyDBProxyTargetGroupCalls() []struct {
	In1 *rds.ModifyDBProxyTargetGroupInput
} {
	var calls []struct {
		In1 *rds.ModifyDBProxyTargetGroupInput
	}
	lockrdsClientMockModifyDBProxyTargetGroup.RLock()
	calls = mock.calls.ModifyDBProxyTargetGroup
	lockrdsClientMockModifyDBProxyTargetGroup.RUnlock()
	return calls
}

// ModifyDBProxyTargetGroupRequest calls ModifyDBProxyTargetGroupRequestFunc.
func (mock *rdsClientMock) ModifyDBProxyTargetGroupRequest(in1 *rds.ModifyDBProxyTargetGroupInput) (*request.Request, *rds.ModifyDBProxyTargetGroupOutput) {
	if mock.ModifyDBProxyTargetGroupRequestFunc == nil {
		panic("rdsClientMock.ModifyDBProxyTargetGroupRequestFunc: method is nil but rdsClient.ModifyDBProxyTargetGroupRequest was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyDBProxyTargetGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyDBProxyTargetGroupRequest.Lock()
	mock.calls.ModifyDBProxyTargetGroupRequest = append(mock.calls.ModifyDBProxyTargetGroupRequest, callInfo)
	lockrdsClientMockModifyDBProxyTargetGroupRequest.Unlock()
	return mock.ModifyDBProxyTargetGroupRequestFunc(in1)
}

// ModifyDBProxyTargetGroupRequestCalls gets all the calls that were made to ModifyDBProxyTargetGroupRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyDBProxyTargetGroupRequestCalls())
func (mock *rdsClientMock) ModifyDBProxyTargetGroupRequestCalls() []struct {
	In1 *rds.ModifyDBProxyTargetGroupInput
} {
	var calls []struct {
		In1 *rds.ModifyDBProxyTargetGroupInput
	}
	lockrdsClientMockModifyDBProxyTargetGroupRequest.RLock()
	calls = mock.calls.ModifyDBProxyTargetGroupRequest
	lockrdsClientMockModifyDBProxyTargetGroupRequest.RUnlock()
	return calls
}

// ModifyDBProxyTargetGroupWithContext calls ModifyDBProxyTargetGroupWithContextFunc.
func (mock *rdsClientMock) ModifyDBProxyTargetGroupWithContext(in1 context.Context, in2 *rds.ModifyDBProxyTargetGroupInput, in3 ...request.Option) (*rds.ModifyDBProxyTargetGroupOutput, error) {
	if mock.ModifyDBProxyTargetGroupWithContextFunc == nil {
		panic("rdsClientMock.ModifyDBProxyTargetGroupWithContextFunc: method is nil but rdsClient.ModifyDBProxyTargetGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.ModifyDBProxyTargetGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockModifyDBProxyTargetGroupWithContext.Lock()
	mock.calls.ModifyDBProxyTargetGroupWithContext = append(mock.calls.ModifyDBProxyTargetGroupWithContext, callInfo)
	lockrdsClientMockModifyDBProxyTargetGroupWithContext.Unlock()
	return mock.ModifyDBProxyTargetGroupWithContextFunc(in1, in2, in3...)
}

// ModifyDBProxyTargetGroupWithContextCalls gets all the calls that were made to ModifyDBProxyTargetGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyDBProxyTargetGroupWithContextCalls())
func (mock *rdsClientMock) ModifyDBProxyTargetGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.ModifyDBProxyTargetGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.ModifyDBProxyTargetGroupInput
		In3 []request.Option
	}
	lockrdsClientMockModifyDBProxyTargetGroupWithContext.RLock()
	calls = mock.calls.ModifyDBProxyTargetGroupWithContext
	lockrdsClientMockModifyDBProxyTargetGroupWithContext.RUnlock()
	return calls
}

// ModifyDBProxyWithContext calls ModifyDBProxyWithContextFunc.
func (mock *rdsClientMock) ModifyDBProxyWithContext(in1 context.Context, in2 *rds.ModifyDBProxyInput, in3 ...request.Option) (*rds.ModifyDBProxyOutput, error) {
	if mock.ModifyDBProxyWithContextFunc == nil {
		panic("rdsClientMock.ModifyDBProxyWithContextFunc: method is nil but rdsClient.ModifyDBProxyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.ModifyDBProxyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockModifyDBProxyWithContext.Lock()
	mock.calls.ModifyDBProxyWithContext = append(mock.calls.ModifyDBProxyWithContext, callInfo)
	lockrdsClientMockModifyDBProxyWithContext.Unlock()
	return mock.ModifyDBProxyWithContextFunc(in1, in2, in3...)
}

// ModifyDBProxyWithContextCalls gets all the calls that were made to ModifyDBProxyWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyDBProxyWithContextCalls())
func (mock *rdsClientMock) ModifyDBProxyWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.ModifyDBProxyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.ModifyDBProxyInput
		In3 []request.Option
	}
	lockrdsClientMockModifyDBProxyWithContext.RLock()
	calls = mock.calls.ModifyDBProxyWithContext
	lockrdsClientMockModifyDBProxyWithContext.RUnlock()
	return calls
}

// ModifyDBSnapshot calls ModifyDBSnapshotFunc.
func (mock *rdsClientMock) ModifyDBSnapshot(in1 *rds.ModifyDBSnapshotInput) (*rds.ModifyDBSnapshotOutput, error) {
	if mock.ModifyDBSnapshotFunc == nil {
		panic("rdsClientMock.ModifyDBSnapshotFunc: method is nil but rdsClient.ModifyDBSnapshot was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyDBSnapshotInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyDBSnapshot.Lock()
	mock.calls.ModifyDBSnapshot = append(mock.calls.ModifyDBSnapshot, callInfo)
	lockrdsClientMockModifyDBSnapshot.Unlock()
	return mock.ModifyDBSnapshotFunc(in1)
}

// ModifyDBSnapshotCalls gets all the calls that were made to ModifyDBSnapshot.
// Check the length with:
//     len(mockedrdsClient.ModifyDBSnapshotCalls())
func (mock *rdsClientMock) ModifyDBSnapshotCalls() []struct {
	In1 *rds.ModifyDBSnapshotInput
} {
	var calls []struct {
		In1 *rds.ModifyDBSnapshotInput
	}
	lockrdsClientMockModifyDBSnapshot.RLock()
	calls = mock.calls.ModifyDBSnapshot
	lockrdsClientMockModifyDBSnapshot.RUnlock()
	return calls
}

// ModifyDBSnapshotAttribute calls ModifyDBSnapshotAttributeFunc.
func (mock *rdsClientMock) ModifyDBSnapshotAttribute(in1 *rds.ModifyDBSnapshotAttributeInput) (*rds.ModifyDBSnapshotAttributeOutput, error) {
	if mock.ModifyDBSnapshotAttributeFunc == nil {
		panic("rdsClientMock.ModifyDBSnapshotAttributeFunc: method is nil but rdsClient.ModifyDBSnapshotAttribute was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyDBSnapshotAttributeInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyDBSnapshotAttribute.Lock()
	mock.calls.ModifyDBSnapshotAttribute = append(mock.calls.ModifyDBSnapshotAttribute, callInfo)
	lockrdsClientMockModifyDBSnapshotAttribute.Unlock()
	return mock.ModifyDBSnapshotAttributeFunc(in1)
}

// ModifyDBSnapshotAttributeCalls gets all the calls that were made to ModifyDBSnapshotAttribute.
// Check the length with:
//     len(mockedrdsClient.ModifyDBSnapshotAttributeCalls())
func (mock *rdsClientMock) ModifyDBSnapshotAttributeCalls() []struct {
	In1 *rds.ModifyDBSnapshotAttributeInput
} {
	var calls []struct {
		In1 *rds.ModifyDBSnapshotAttributeInput
	}
	lockrdsClientMockModifyDBSnapshotAttribute.RLock()
	calls = mock.calls.ModifyDBSnapshotAttribute
	lockrdsClientMockModifyDBSnapshotAttribute.RUnlock()
	return calls
}

// ModifyDBSnapshotAttributeRequest calls ModifyDBSnapshotAttributeRequestFunc.
func (mock *rdsClientMock) ModifyDBSnapshotAttributeRequest(in1 *rds.ModifyDBSnapshotAttributeInput) (*request.Request, *rds.ModifyDBSnapshotAttributeOutput) {
	if mock.ModifyDBSnapshotAttributeRequestFunc == nil {
		panic("rdsClientMock.ModifyDBSnapshotAttributeRequestFunc: method is nil but rdsClient.ModifyDBSnapshotAttributeRequest was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyDBSnapshotAttributeInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyDBSnapshotAttributeRequest.Lock()
	mock.calls.ModifyDBSnapshotAttributeRequest = append(mock.calls.ModifyDBSnapshotAttributeRequest, callInfo)
	lockrdsClientMockModifyDBSnapshotAttributeRequest.Unlock()
	return mock.ModifyDBSnapshotAttributeRequestFunc(in1)
}

// ModifyDBSnapshotAttributeRequestCalls gets all the calls that were made to ModifyDBSnapshotAttributeRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyDBSnapshotAttributeRequestCalls())
func (mock *rdsClientMock) ModifyDBSnapshotAttributeRequestCalls() []struct {
	In1 *rds.ModifyDBSnapshotAttributeInput
} {
	var calls []struct {
		In1 *rds.ModifyDBSnapshotAttributeInput
	}
	lockrdsClientMockModifyDBSnapshotAttributeRequest.RLock()
	calls = mock.calls.ModifyDBSnapshotAttributeRequest
	lockrdsClientMockModifyDBSnapshotAttributeRequest.RUnlock()
	return calls
}

// ModifyDBSnapshotAttributeWithContext calls ModifyDBSnapshotAttributeWithContextFunc.
func (mock *rdsClientMock) ModifyDBSnapshotAttributeWithContext(in1 context.Context, in2 *rds.ModifyDBSnapshotAttributeInput, in3 ...request.Option) (*rds.ModifyDBSnapshotAttributeOutput, error) {
	if mock.ModifyDBSnapshotAttributeWithContextFunc == nil {
		panic("rdsClientMock.ModifyDBSnapshotAttributeWithContextFunc: method is nil but rdsClient.ModifyDBSnapshotAttributeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.ModifyDBSnapshotAttributeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockModifyDBSnapshotAttributeWithContext.Lock()
	mock.calls.ModifyDBSnapshotAttributeWithContext = append(mock.calls.ModifyDBSnapshotAttributeWithContext, callInfo)
	lockrdsClientMockModifyDBSnapshotAttributeWithContext.Unlock()
	return mock.ModifyDBSnapshotAttributeWithContextFunc(in1, in2, in3...)
}

// ModifyDBSnapshotAttributeWithContextCalls gets all the calls that were made to ModifyDBSnapshotAttributeWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyDBSnapshotAttributeWithContextCalls())
func (mock *rdsClientMock) ModifyDBSnapshotAttributeWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.ModifyDBSnapshotAttributeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.ModifyDBSnapshotAttributeInput
		In3 []request.Option
	}
	lockrdsClientMockModifyDBSnapshotAttributeWithContext.RLock()
	calls = mock.calls.ModifyDBSnapshotAttributeWithContext
	lockrdsClientMockModifyDBSnapshotAttributeWithContext.RUnlock()
	return calls
}

// ModifyDBSnapshotRequest calls ModifyDBSnapshotRequestFunc.
func (mock *rdsClientMock) ModifyDBSnapshotRequest(in1 *rds.ModifyDBSnapshotInput) (*request.Request, *rds.ModifyDBSnapshotOutput) {
	if mock.ModifyDBSnapshotRequestFunc == nil {
		panic("rdsClientMock.ModifyDBSnapshotRequestFunc: method is nil but rdsClient.ModifyDBSnapshotRequest was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyDBSnapshotInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyDBSnapshotRequest.Lock()
	mock.calls.ModifyDBSnapshotRequest = append(mock.calls.ModifyDBSnapshotRequest, callInfo)
	lockrdsClientMockModifyDBSnapshotRequest.Unlock()
	return mock.ModifyDBSnapshotRequestFunc(in1)
}

// ModifyDBSnapshotRequestCalls gets all the calls that were made to ModifyDBSnapshotRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyDBSnapshotRequestCalls())
func (mock *rdsClientMock) ModifyDBSnapshotRequestCalls() []struct {
	In1 *rds.ModifyDBSnapshotInput
} {
	var calls []struct {
		In1 *rds.ModifyDBSnapshotInput
	}
	lockrdsClientMockModifyDBSnapshotRequest.RLock()
	calls = mock.calls.ModifyDBSnapshotRequest
	lockrdsClientMockModifyDBSnapshotRequest.RUnlock()
	return calls
}

// ModifyDBSnapshotWithContext calls ModifyDBSnapshotWithContextFunc.
func (mock *rdsClientMock) ModifyDBSnapshotWithContext(in1 context.Context, in2 *rds.ModifyDBSnapshotInput, in3 ...request.Option) (*rds.ModifyDBSnapshotOutput, error) {
	if mock.ModifyDBSnapshotWithContextFunc == nil {
		panic("rdsClientMock.ModifyDBSnapshotWithContextFunc: method is nil but rdsClient.ModifyDBSnapshotWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.ModifyDBSnapshotInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockModifyDBSnapshotWithContext.Lock()
	mock.calls.ModifyDBSnapshotWithContext = append(mock.calls.ModifyDBSnapshotWithContext, callInfo)
	lockrdsClientMockModifyDBSnapshotWithContext.Unlock()
	return mock.ModifyDBSnapshotWithContextFunc(in1, in2, in3...)
}

// ModifyDBSnapshotWithContextCalls gets all the calls that were made to ModifyDBSnapshotWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyDBSnapshotWithContextCalls())
func (mock *rdsClientMock) ModifyDBSnapshotWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.ModifyDBSnapshotInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.ModifyDBSnapshotInput
		In3 []request.Option
	}
	lockrdsClientMockModifyDBSnapshotWithContext.RLock()
	calls = mock.calls.ModifyDBSnapshotWithContext
	lockrdsClientMockModifyDBSnapshotWithContext.RUnlock()
	return calls
}

// ModifyDBSubnetGroup calls ModifyDBSubnetGroupFunc.
func (mock *rdsClientMock) ModifyDBSubnetGroup(in1 *rds.ModifyDBSubnetGroupInput) (*rds.ModifyDBSubnetGroupOutput, error) {
	if mock.ModifyDBSubnetGroupFunc == nil {
		panic("rdsClientMock.ModifyDBSubnetGroupFunc: method is nil but rdsClient.ModifyDBSubnetGroup was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyDBSubnetGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyDBSubnetGroup.Lock()
	mock.calls.ModifyDBSubnetGroup = append(mock.calls.ModifyDBSubnetGroup, callInfo)
	lockrdsClientMockModifyDBSubnetGroup.Unlock()
	return mock.ModifyDBSubnetGroupFunc(in1)
}

// ModifyDBSubnetGroupCalls gets all the calls that were made to ModifyDBSubnetGroup.
// Check the length with:
//     len(mockedrdsClient.ModifyDBSubnetGroupCalls())
func (mock *rdsClientMock) ModifyDBSubnetGroupCalls() []struct {
	In1 *rds.ModifyDBSubnetGroupInput
} {
	var calls []struct {
		In1 *rds.ModifyDBSubnetGroupInput
	}
	lockrdsClientMockModifyDBSubnetGroup.RLock()
	calls = mock.calls.ModifyDBSubnetGroup
	lockrdsClientMockModifyDBSubnetGroup.RUnlock()
	return calls
}

// ModifyDBSubnetGroupRequest calls ModifyDBSubnetGroupRequestFunc.
func (mock *rdsClientMock) ModifyDBSubnetGroupRequest(in1 *rds.ModifyDBSubnetGroupInput) (*request.Request, *rds.ModifyDBSubnetGroupOutput) {
	if mock.ModifyDBSubnetGroupRequestFunc == nil {
		panic("rdsClientMock.ModifyDBSubnetGroupRequestFunc: method is nil but rdsClient.ModifyDBSubnetGroupRequest was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyDBSubnetGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyDBSubnetGroupRequest.Lock()
	mock.calls.ModifyDBSubnetGroupRequest = append(mock.calls.ModifyDBSubnetGroupRequest, callInfo)
	lockrdsClientMockModifyDBSubnetGroupRequest.Unlock()
	return mock.ModifyDBSubnetGroupRequestFunc(in1)
}

// ModifyDBSubnetGroupRequestCalls gets all the calls that were made to ModifyDBSubnetGroupRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyDBSubnetGroupRequestCalls())
func (mock *rdsClientMock) ModifyDBSubnetGroupRequestCalls() []struct {
	In1 *rds.ModifyDBSubnetGroupInput
} {
	var calls []struct {
		In1 *rds.ModifyDBSubnetGroupInput
	}
	lockrdsClientMockModifyDBSubnetGroupRequest.RLock()
	calls = mock.calls.ModifyDBSubnetGroupRequest
	lockrdsClientMockModifyDBSubnetGroupRequest.RUnlock()
	return calls
}

// ModifyDBSubnetGroupWithContext calls ModifyDBSubnetGroupWithContextFunc.
func (mock *rdsClientMock) ModifyDBSubnetGroupWithContext(in1 context.Context, in2 *rds.ModifyDBSubnetGroupInput, in3 ...request.Option) (*rds.ModifyDBSubnetGroupOutput, error) {
	if mock.ModifyDBSubnetGroupWithContextFunc == nil {
		panic("rdsClientMock.ModifyDBSubnetGroupWithContextFunc: method is nil but rdsClient.ModifyDBSubnetGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.ModifyDBSubnetGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockModifyDBSubnetGroupWithContext.Lock()
	mock.calls.ModifyDBSubnetGroupWithContext = append(mock.calls.ModifyDBSubnetGroupWithContext, callInfo)
	lockrdsClientMockModifyDBSubnetGroupWithContext.Unlock()
	return mock.ModifyDBSubnetGroupWithContextFunc(in1, in2, in3...)
}

// ModifyDBSubnetGroupWithContextCalls gets all the calls that were made to ModifyDBSubnetGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyDBSubnetGroupWithContextCalls())
func (mock *rdsClientMock) ModifyDBSubnetGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.ModifyDBSubnetGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.ModifyDBSubnetGroupInput
		In3 []request.Option
	}
	lockrdsClientMockModifyDBSubnetGroupWithContext.RLock()
	calls = mock.calls.ModifyDBSubnetGroupWithContext
	lockrdsClientMockModifyDBSubnetGroupWithContext.RUnlock()
	return calls
}

// ModifyEventSubscription calls ModifyEventSubscriptionFunc.
func (mock *rdsClientMock) ModifyEventSubscription(in1 *rds.ModifyEventSubscriptionInput) (*rds.ModifyEventSubscriptionOutput, error) {
	if mock.ModifyEventSubscriptionFunc == nil {
		panic("rdsClientMock.ModifyEventSubscriptionFunc: method is nil but rdsClient.ModifyEventSubscription was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyEventSubscriptionInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyEventSubscription.Lock()
	mock.calls.ModifyEventSubscription = append(mock.calls.ModifyEventSubscription, callInfo)
	lockrdsClientMockModifyEventSubscription.Unlock()
	return mock.ModifyEventSubscriptionFunc(in1)
}

// ModifyEventSubscriptionCalls gets all the calls that were made to ModifyEventSubscription.
// Check the length with:
//     len(mockedrdsClient.ModifyEventSubscriptionCalls())
func (mock *rdsClientMock) ModifyEventSubscriptionCalls() []struct {
	In1 *rds.ModifyEventSubscriptionInput
} {
	var calls []struct {
		In1 *rds.ModifyEventSubscriptionInput
	}
	lockrdsClientMockModifyEventSubscription.RLock()
	calls = mock.calls.ModifyEventSubscription
	lockrdsClientMockModifyEventSubscription.RUnlock()
	return calls
}

// ModifyEventSubscriptionRequest calls ModifyEventSubscriptionRequestFunc.
func (mock *rdsClientMock) ModifyEventSubscriptionRequest(in1 *rds.ModifyEventSubscriptionInput) (*request.Request, *rds.ModifyEventSubscriptionOutput) {
	if mock.ModifyEventSubscriptionRequestFunc == nil {
		panic("rdsClientMock.ModifyEventSubscriptionRequestFunc: method is nil but rdsClient.ModifyEventSubscriptionRequest was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyEventSubscriptionInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyEventSubscriptionRequest.Lock()
	mock.calls.ModifyEventSubscriptionRequest = append(mock.calls.ModifyEventSubscriptionRequest, callInfo)
	lockrdsClientMockModifyEventSubscriptionRequest.Unlock()
	return mock.ModifyEventSubscriptionRequestFunc(in1)
}

// ModifyEventSubscriptionRequestCalls gets all the calls that were made to ModifyEventSubscriptionRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyEventSubscriptionRequestCalls())
func (mock *rdsClientMock) ModifyEventSubscriptionRequestCalls() []struct {
	In1 *rds.ModifyEventSubscriptionInput
} {
	var calls []struct {
		In1 *rds.ModifyEventSubscriptionInput
	}
	lockrdsClientMockModifyEventSubscriptionRequest.RLock()
	calls = mock.calls.ModifyEventSubscriptionRequest
	lockrdsClientMockModifyEventSubscriptionRequest.RUnlock()
	return calls
}

// ModifyEventSubscriptionWithContext calls ModifyEventSubscriptionWithContextFunc.
func (mock *rdsClientMock) ModifyEventSubscriptionWithContext(in1 context.Context, in2 *rds.ModifyEventSubscriptionInput, in3 ...request.Option) (*rds.ModifyEventSubscriptionOutput, error) {
	if mock.ModifyEventSubscriptionWithContextFunc == nil {
		panic("rdsClientMock.ModifyEventSubscriptionWithContextFunc: method is nil but rdsClient.ModifyEventSubscriptionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.ModifyEventSubscriptionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockModifyEventSubscriptionWithContext.Lock()
	mock.calls.ModifyEventSubscriptionWithContext = append(mock.calls.ModifyEventSubscriptionWithContext, callInfo)
	lockrdsClientMockModifyEventSubscriptionWithContext.Unlock()
	return mock.ModifyEventSubscriptionWithContextFunc(in1, in2, in3...)
}

// ModifyEventSubscriptionWithContextCalls gets all the calls that were made to ModifyEventSubscriptionWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyEventSubscriptionWithContextCalls())
func (mock *rdsClientMock) ModifyEventSubscriptionWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.ModifyEventSubscriptionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.ModifyEventSubscriptionInput
		In3 []request.Option
	}
	lockrdsClientMockModifyEventSubscriptionWithContext.RLock()
	calls = mock.calls.ModifyEventSubscriptionWithContext
	lockrdsClientMockModifyEventSubscriptionWithContext.RUnlock()
	return calls
}

// ModifyGlobalCluster calls ModifyGlobalClusterFunc.
func (mock *rdsClientMock) ModifyGlobalCluster(in1 *rds.ModifyGlobalClusterInput) (*rds.ModifyGlobalClusterOutput, error) {
	if mock.ModifyGlobalClusterFunc == nil {
		panic("rdsClientMock.ModifyGlobalClusterFunc: method is nil but rdsClient.ModifyGlobalCluster was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyGlobalClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyGlobalCluster.Lock()
	mock.calls.ModifyGlobalCluster = append(mock.calls.ModifyGlobalCluster, callInfo)
	lockrdsClientMockModifyGlobalCluster.Unlock()
	return mock.ModifyGlobalClusterFunc(in1)
}

// ModifyGlobalClusterCalls gets all the calls that were made to ModifyGlobalCluster.
// Check the length with:
//     len(mockedrdsClient.ModifyGlobalClusterCalls())
func (mock *rdsClientMock) ModifyGlobalClusterCalls() []struct {
	In1 *rds.ModifyGlobalClusterInput
} {
	var calls []struct {
		In1 *rds.ModifyGlobalClusterInput
	}
	lockrdsClientMockModifyGlobalCluster.RLock()
	calls = mock.calls.ModifyGlobalCluster
	lockrdsClientMockModifyGlobalCluster.RUnlock()
	return calls
}

// ModifyGlobalClusterRequest calls ModifyGlobalClusterRequestFunc.
func (mock *rdsClientMock) ModifyGlobalClusterRequest(in1 *rds.ModifyGlobalClusterInput) (*request.Request, *rds.ModifyGlobalClusterOutput) {
	if mock.ModifyGlobalClusterRequestFunc == nil {
		panic("rdsClientMock.ModifyGlobalClusterRequestFunc: method is nil but rdsClient.ModifyGlobalClusterRequest was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyGlobalClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyGlobalClusterRequest.Lock()
	mock.calls.ModifyGlobalClusterRequest = append(mock.calls.ModifyGlobalClusterRequest, callInfo)
	lockrdsClientMockModifyGlobalClusterRequest.Unlock()
	return mock.ModifyGlobalClusterRequestFunc(in1)
}

// ModifyGlobalClusterRequestCalls gets all the calls that were made to ModifyGlobalClusterRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyGlobalClusterRequestCalls())
func (mock *rdsClientMock) ModifyGlobalClusterRequestCalls() []struct {
	In1 *rds.ModifyGlobalClusterInput
} {
	var calls []struct {
		In1 *rds.ModifyGlobalClusterInput
	}
	lockrdsClientMockModifyGlobalClusterRequest.RLock()
	calls = mock.calls.ModifyGlobalClusterRequest
	lockrdsClientMockModifyGlobalClusterRequest.RUnlock()
	return calls
}

// ModifyGlobalClusterWithContext calls ModifyGlobalClusterWithContextFunc.
func (mock *rdsClientMock) ModifyGlobalClusterWithContext(in1 context.Context, in2 *rds.ModifyGlobalClusterInput, in3 ...request.Option) (*rds.ModifyGlobalClusterOutput, error) {
	if mock.ModifyGlobalClusterWithContextFunc == nil {
		panic("rdsClientMock.ModifyGlobalClusterWithContextFunc: method is nil but rdsClient.ModifyGlobalClusterWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.ModifyGlobalClusterInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockModifyGlobalClusterWithContext.Lock()
	mock.calls.ModifyGlobalClusterWithContext = append(mock.calls.ModifyGlobalClusterWithContext, callInfo)
	lockrdsClientMockModifyGlobalClusterWithContext.Unlock()
	return mock.ModifyGlobalClusterWithContextFunc(in1, in2, in3...)
}

// ModifyGlobalClusterWithContextCalls gets all the calls that were made to ModifyGlobalClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyGlobalClusterWithContextCalls())
func (mock *rdsClientMock) ModifyGlobalClusterWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.ModifyGlobalClusterInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.ModifyGlobalClusterInput
		In3 []request.Option
	}
	lockrdsClientMockModifyGlobalClusterWithContext.RLock()
	calls = mock.calls.ModifyGlobalClusterWithContext
	lockrdsClientMockModifyGlobalClusterWithContext.RUnlock()
	return calls
}

// ModifyOptionGroup calls ModifyOptionGroupFunc.
func (mock *rdsClientMock) ModifyOptionGroup(in1 *rds.ModifyOptionGroupInput) (*rds.ModifyOptionGroupOutput, error) {
	if mock.ModifyOptionGroupFunc == nil {
		panic("rdsClientMock.ModifyOptionGroupFunc: method is nil but rdsClient.ModifyOptionGroup was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyOptionGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyOptionGroup.Lock()
	mock.calls.ModifyOptionGroup = append(mock.calls.ModifyOptionGroup, callInfo)
	lockrdsClientMockModifyOptionGroup.Unlock()
	return mock.ModifyOptionGroupFunc(in1)
}

// ModifyOptionGroupCalls gets all the calls that were made to ModifyOptionGroup.
// Check the length with:
//     len(mockedrdsClient.ModifyOptionGroupCalls())
func (mock *rdsClientMock) ModifyOptionGroupCalls() []struct {
	In1 *rds.ModifyOptionGroupInput
} {
	var calls []struct {
		In1 *rds.ModifyOptionGroupInput
	}
	lockrdsClientMockModifyOptionGroup.RLock()
	calls = mock.calls.ModifyOptionGroup
	lockrdsClientMockModifyOptionGroup.RUnlock()
	return calls
}

// ModifyOptionGroupRequest calls ModifyOptionGroupRequestFunc.
func (mock *rdsClientMock) ModifyOptionGroupRequest(in1 *rds.ModifyOptionGroupInput) (*request.Request, *rds.ModifyOptionGroupOutput) {
	if mock.ModifyOptionGroupRequestFunc == nil {
		panic("rdsClientMock.ModifyOptionGroupRequestFunc: method is nil but rdsClient.ModifyOptionGroupRequest was just called")
	}
	callInfo := struct {
		In1 *rds.ModifyOptionGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockModifyOptionGroupRequest.Lock()
	mock.calls.ModifyOptionGroupRequest = append(mock.calls.ModifyOptionGroupRequest, callInfo)
	lockrdsClientMockModifyOptionGroupRequest.Unlock()
	return mock.ModifyOptionGroupRequestFunc(in1)
}

// ModifyOptionGroupRequestCalls gets all the calls that were made to ModifyOptionGroupRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyOptionGroupRequestCalls())
func (mock *rdsClientMock) ModifyOptionGroupRequestCalls() []struct {
	In1 *rds.ModifyOptionGroupInput
} {
	var calls []struct {
		In1 *rds.ModifyOptionGroupInput
	}
	lockrdsClientMockModifyOptionGroupRequest.RLock()
	calls = mock.calls.ModifyOptionGroupRequest
	lockrdsClientMockModifyOptionGroupRequest.RUnlock()
	return calls
}

// ModifyOptionGroupWithContext calls ModifyOptionGroupWithContextFunc.
func (mock *rdsClientMock) ModifyOptionGroupWithContext(in1 context.Context, in2 *rds.ModifyOptionGroupInput, in3 ...request.Option) (*rds.ModifyOptionGroupOutput, error) {
	if mock.ModifyOptionGroupWithContextFunc == nil {
		panic("rdsClientMock.ModifyOptionGroupWithContextFunc: method is nil but rdsClient.ModifyOptionGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.ModifyOptionGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockModifyOptionGroupWithContext.Lock()
	mock.calls.ModifyOptionGroupWithContext = append(mock.calls.ModifyOptionGroupWithContext, callInfo)
	lockrdsClientMockModifyOptionGroupWithContext.Unlock()
	return mock.ModifyOptionGroupWithContextFunc(in1, in2, in3...)
}

// ModifyOptionGroupWithContextCalls gets all the calls that were made to ModifyOptionGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyOptionGroupWithContextCalls())
func (mock *rdsClientMock) ModifyOptionGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.ModifyOptionGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.ModifyOptionGroupInput
		In3 []request.Option
	}
	lockrdsClientMockModifyOptionGroupWithContext.RLock()
	calls = mock.calls.ModifyOptionGroupWithContext
	lockrdsClientMockModifyOptionGroupWithContext.RUnlock()
	return calls
}

// PromoteReadReplica calls PromoteReadReplicaFunc.
func (mock *rdsClientMock) PromoteReadReplica(in1 *rds.PromoteReadReplicaInput) (*rds.PromoteReadReplicaOutput, error) {
	if mock.PromoteReadReplicaFunc == nil {
		panic("rdsClientMock.PromoteReadReplicaFunc: method is nil but rdsClient.PromoteReadReplica was just called")
	}
	callInfo := struct {
		In1 *rds.PromoteReadReplicaInput
	}{
		In1: in1,
	}
	lockrdsClientMockPromoteReadReplica.Lock()
	mock.calls.PromoteReadReplica = append(mock.calls.PromoteReadReplica, callInfo)
	lockrdsClientMockPromoteReadReplica.Unlock()
	return mock.PromoteReadReplicaFunc(in1)
}

// PromoteReadReplicaCalls gets all the calls that were made to PromoteReadReplica.
// Check the length with:
//     len(mockedrdsClient.PromoteReadReplicaCalls())
func (mock *rdsClientMock) PromoteReadReplicaCalls() []struct {
	In1 *rds.PromoteReadReplicaInput
} {
	var calls []struct {
		In1 *rds.PromoteReadReplicaInput
	}
	lockrdsClientMockPromoteReadReplica.RLock()
	calls = mock.calls.PromoteReadReplica
	lockrdsClientMockPromoteReadReplica.RUnlock()
	return calls
}

// PromoteReadReplicaDBCluster calls PromoteReadReplicaDBClusterFunc.
func (mock *rdsClientMock) PromoteReadReplicaDBCluster(in1 *rds.PromoteReadReplicaDBClusterInput) (*rds.PromoteReadReplicaDBClusterOutput, error) {
	if mock.PromoteReadReplicaDBClusterFunc == nil {
		panic("rdsClientMock.PromoteReadReplicaDBClusterFunc: method is nil but rdsClient.PromoteReadReplicaDBCluster was just called")
	}
	callInfo := struct {
		In1 *rds.PromoteReadReplicaDBClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockPromoteReadReplicaDBCluster.Lock()
	mock.calls.PromoteReadReplicaDBCluster = append(mock.calls.PromoteReadReplicaDBCluster, callInfo)
	lockrdsClientMockPromoteReadReplicaDBCluster.Unlock()
	return mock.PromoteReadReplicaDBClusterFunc(in1)
}

// PromoteReadReplicaDBClusterCalls gets all the calls that were made to PromoteReadReplicaDBCluster.
// Check the length with:
//     len(mockedrdsClient.PromoteReadReplicaDBClusterCalls())
func (mock *rdsClientMock) PromoteReadReplicaDBClusterCalls() []struct {
	In1 *rds.PromoteReadReplicaDBClusterInput
} {
	var calls []struct {
		In1 *rds.PromoteReadReplicaDBClusterInput
	}
	lockrdsClientMockPromoteReadReplicaDBCluster.RLock()
	calls = mock.calls.PromoteReadReplicaDBCluster
	lockrdsClientMockPromoteReadReplicaDBCluster.RUnlock()
	return calls
}

// PromoteReadReplicaDBClusterRequest calls PromoteReadReplicaDBClusterRequestFunc.
func (mock *rdsClientMock) PromoteReadReplicaDBClusterRequest(in1 *rds.PromoteReadReplicaDBClusterInput) (*request.Request, *rds.PromoteReadReplicaDBClusterOutput) {
	if mock.PromoteReadReplicaDBClusterRequestFunc == nil {
		panic("rdsClientMock.PromoteReadReplicaDBClusterRequestFunc: method is nil but rdsClient.PromoteReadReplicaDBClusterRequest was just called")
	}
	callInfo := struct {
		In1 *rds.PromoteReadReplicaDBClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockPromoteReadReplicaDBClusterRequest.Lock()
	mock.calls.PromoteReadReplicaDBClusterRequest = append(mock.calls.PromoteReadReplicaDBClusterRequest, callInfo)
	lockrdsClientMockPromoteReadReplicaDBClusterRequest.Unlock()
	return mock.PromoteReadReplicaDBClusterRequestFunc(in1)
}

// PromoteReadReplicaDBClusterRequestCalls gets all the calls that were made to PromoteReadReplicaDBClusterRequest.
// Check the length with:
//     len(mockedrdsClient.PromoteReadReplicaDBClusterRequestCalls())
func (mock *rdsClientMock) PromoteReadReplicaDBClusterRequestCalls() []struct {
	In1 *rds.PromoteReadReplicaDBClusterInput
} {
	var calls []struct {
		In1 *rds.PromoteReadReplicaDBClusterInput
	}
	lockrdsClientMockPromoteReadReplicaDBClusterRequest.RLock()
	calls = mock.calls.PromoteReadReplicaDBClusterRequest
	lockrdsClientMockPromoteReadReplicaDBClusterRequest.RUnlock()
	return calls
}

// PromoteReadReplicaDBClusterWithContext calls PromoteReadReplicaDBClusterWithContextFunc.
func (mock *rdsClientMock) PromoteReadReplicaDBClusterWithContext(in1 context.Context, in2 *rds.PromoteReadReplicaDBClusterInput, in3 ...request.Option) (*rds.PromoteReadReplicaDBClusterOutput, error) {
	if mock.PromoteReadReplicaDBClusterWithContextFunc == nil {
		panic("rdsClientMock.PromoteReadReplicaDBClusterWithContextFunc: method is nil but rdsClient.PromoteReadReplicaDBClusterWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.PromoteReadReplicaDBClusterInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockPromoteReadReplicaDBClusterWithContext.Lock()
	mock.calls.PromoteReadReplicaDBClusterWithContext = append(mock.calls.PromoteReadReplicaDBClusterWithContext, callInfo)
	lockrdsClientMockPromoteReadReplicaDBClusterWithContext.Unlock()
	return mock.PromoteReadReplicaDBClusterWithContextFunc(in1, in2, in3...)
}

// PromoteReadReplicaDBClusterWithContextCalls gets all the calls that were made to PromoteReadReplicaDBClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.PromoteReadReplicaDBClusterWithContextCalls())
func (mock *rdsClientMock) PromoteReadReplicaDBClusterWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.PromoteReadReplicaDBClusterInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.PromoteReadReplicaDBClusterInput
		In3 []request.Option
	}
	lockrdsClientMockPromoteReadReplicaDBClusterWithContext.RLock()
	calls = mock.calls.PromoteReadReplicaDBClusterWithContext
	lockrdsClientMockPromoteReadReplicaDBClusterWithContext.RUnlock()
	return calls
}

// PromoteReadReplicaRequest calls PromoteReadReplicaRequestFunc.
func (mock *rdsClientMock) PromoteReadReplicaRequest(in1 *rds.PromoteReadReplicaInput) (*request.Request, *rds.PromoteReadReplicaOutput) {
	if mock.PromoteReadReplicaRequestFunc == nil {
		panic("rdsClientMock.PromoteReadReplicaRequestFunc: method is nil but rdsClient.PromoteReadReplicaRequest was just called")
	}
	callInfo := struct {
		In1 *rds.PromoteReadReplicaInput
	}{
		In1: in1,
	}
	lockrdsClientMockPromoteReadReplicaRequest.Lock()
	mock.calls.PromoteReadReplicaRequest = append(mock.calls.PromoteReadReplicaRequest, callInfo)
	lockrdsClientMockPromoteReadReplicaRequest.Unlock()
	return mock.PromoteReadReplicaRequestFunc(in1)
}

// PromoteReadReplicaRequestCalls gets all the calls that were made to PromoteReadReplicaRequest.
// Check the length with:
//     len(mockedrdsClient.PromoteReadReplicaRequestCalls())
func (mock *rdsClientMock) PromoteReadReplicaRequestCalls() []struct {
	In1 *rds.PromoteReadReplicaInput
} {
	var calls []struct {
		In1 *rds.PromoteReadReplicaInput
	}
	lockrdsClientMockPromoteReadReplicaRequest.RLock()
	calls = mock.calls.PromoteReadReplicaRequest
	lockrdsClientMockPromoteReadReplicaRequest.RUnlock()
	return calls
}

// PromoteReadReplicaWithContext calls PromoteReadReplicaWithContextFunc.
func (mock *rdsClientMock) PromoteReadReplicaWithContext(in1 context.Context, in2 *rds.PromoteReadReplicaInput, in3 ...request.Option) (*rds.PromoteReadReplicaOutput, error) {
	if mock.PromoteReadReplicaWithContextFunc == nil {
		panic("rdsClientMock.PromoteReadReplicaWithContextFunc: method is nil but rdsClient.PromoteReadReplicaWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.PromoteReadReplicaInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockPromoteReadReplicaWithContext.Lock()
	mock.calls.PromoteReadReplicaWithContext = append(mock.calls.PromoteReadReplicaWithContext, callInfo)
	lockrdsClientMockPromoteReadReplicaWithContext.Unlock()
	return mock.PromoteReadReplicaWithContextFunc(in1, in2, in3...)
}

// PromoteReadReplicaWithContextCalls gets all the calls that were made to PromoteReadReplicaWithContext.
// Check the length with:
//     len(mockedrdsClient.PromoteReadReplicaWithContextCalls())
func (mock *rdsClientMock) PromoteReadReplicaWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.PromoteReadReplicaInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.PromoteReadReplicaInput
		In3 []request.Option
	}
	lockrdsClientMockPromoteReadReplicaWithContext.RLock()
	calls = mock.calls.PromoteReadReplicaWithContext
	lockrdsClientMockPromoteReadReplicaWithContext.RUnlock()
	return calls
}

// PurchaseReservedDBInstancesOffering calls PurchaseReservedDBInstancesOfferingFunc.
func (mock *rdsClientMock) PurchaseReservedDBInstancesOffering(in1 *rds.PurchaseReservedDBInstancesOfferingInput) (*rds.PurchaseReservedDBInstancesOfferingOutput, error) {
	if mock.PurchaseReservedDBInstancesOfferingFunc == nil {
		panic("rdsClientMock.PurchaseReservedDBInstancesOfferingFunc: method is nil but rdsClient.PurchaseReservedDBInstancesOffering was just called")
	}
	callInfo := struct {
		In1 *rds.PurchaseReservedDBInstancesOfferingInput
	}{
		In1: in1,
	}
	lockrdsClientMockPurchaseReservedDBInstancesOffering.Lock()
	mock.calls.PurchaseReservedDBInstancesOffering = append(mock.calls.PurchaseReservedDBInstancesOffering, callInfo)
	lockrdsClientMockPurchaseReservedDBInstancesOffering.Unlock()
	return mock.PurchaseReservedDBInstancesOfferingFunc(in1)
}

// PurchaseReservedDBInstancesOfferingCalls gets all the calls that were made to PurchaseReservedDBInstancesOffering.
// Check the length with:
//     len(mockedrdsClient.PurchaseReservedDBInstancesOfferingCalls())
func (mock *rdsClientMock) PurchaseReservedDBInstancesOfferingCalls() []struct {
	In1 *rds.PurchaseReservedDBInstancesOfferingInput
} {
	var calls []struct {
		In1 *rds.PurchaseReservedDBInstancesOfferingInput
	}
	lockrdsClientMockPurchaseReservedDBInstancesOffering.RLock()
	calls = mock.calls.PurchaseReservedDBInstancesOffering
	lockrdsClientMockPurchaseReservedDBInstancesOffering.RUnlock()
	return calls
}

// PurchaseReservedDBInstancesOfferingRequest calls PurchaseReservedDBInstancesOfferingRequestFunc.
func (mock *rdsClientMock) PurchaseReservedDBInstancesOfferingRequest(in1 *rds.PurchaseReservedDBInstancesOfferingInput) (*request.Request, *rds.PurchaseReservedDBInstancesOfferingOutput) {
	if mock.PurchaseReservedDBInstancesOfferingRequestFunc == nil {
		panic("rdsClientMock.PurchaseReservedDBInstancesOfferingRequestFunc: method is nil but rdsClient.PurchaseReservedDBInstancesOfferingRequest was just called")
	}
	callInfo := struct {
		In1 *rds.PurchaseReservedDBInstancesOfferingInput
	}{
		In1: in1,
	}
	lockrdsClientMockPurchaseReservedDBInstancesOfferingRequest.Lock()
	mock.calls.PurchaseReservedDBInstancesOfferingRequest = append(mock.calls.PurchaseReservedDBInstancesOfferingRequest, callInfo)
	lockrdsClientMockPurchaseReservedDBInstancesOfferingRequest.Unlock()
	return mock.PurchaseReservedDBInstancesOfferingRequestFunc(in1)
}

// PurchaseReservedDBInstancesOfferingRequestCalls gets all the calls that were made to PurchaseReservedDBInstancesOfferingRequest.
// Check the length with:
//     len(mockedrdsClient.PurchaseReservedDBInstancesOfferingRequestCalls())
func (mock *rdsClientMock) PurchaseReservedDBInstancesOfferingRequestCalls() []struct {
	In1 *rds.PurchaseReservedDBInstancesOfferingInput
} {
	var calls []struct {
		In1 *rds.PurchaseReservedDBInstancesOfferingInput
	}
	lockrdsClientMockPurchaseReservedDBInstancesOfferingRequest.RLock()
	calls = mock.calls.PurchaseReservedDBInstancesOfferingRequest
	lockrdsClientMockPurchaseReservedDBInstancesOfferingRequest.RUnlock()
	return calls
}

// PurchaseReservedDBInstancesOfferingWithContext calls PurchaseReservedDBInstancesOfferingWithContextFunc.
func (mock *rdsClientMock) PurchaseReservedDBInstancesOfferingWithContext(in1 context.Context, in2 *rds.PurchaseReservedDBInstancesOfferingInput, in3 ...request.Option) (*rds.PurchaseReservedDBInstancesOfferingOutput, error) {
	if mock.PurchaseReservedDBInstancesOfferingWithContextFunc == nil {
		panic("rdsClientMock.PurchaseReservedDBInstancesOfferingWithContextFunc: method is nil but rdsClient.PurchaseReservedDBInstancesOfferingWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.PurchaseReservedDBInstancesOfferingInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockPurchaseReservedDBInstancesOfferingWithContext.Lock()
	mock.calls.PurchaseReservedDBInstancesOfferingWithContext = append(mock.calls.PurchaseReservedDBInstancesOfferingWithContext, callInfo)
	lockrdsClientMockPurchaseReservedDBInstancesOfferingWithContext.Unlock()
	return mock.PurchaseReservedDBInstancesOfferingWithContextFunc(in1, in2, in3...)
}

// PurchaseReservedDBInstancesOfferingWithContextCalls gets all the calls that were made to PurchaseReservedDBInstancesOfferingWithContext.
// Check the length with:
//     len(mockedrdsClient.PurchaseReservedDBInstancesOfferingWithContextCalls())
func (mock *rdsClientMock) PurchaseReservedDBInstancesOfferingWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.PurchaseReservedDBInstancesOfferingInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.PurchaseReservedDBInstancesOfferingInput
		In3 []request.Option
	}
	lockrdsClientMockPurchaseReservedDBInstancesOfferingWithContext.RLock()
	calls = mock.calls.PurchaseReservedDBInstancesOfferingWithContext
	lockrdsClientMockPurchaseReservedDBInstancesOfferingWithContext.RUnlock()
	return calls
}

// RebootDBInstance calls RebootDBInstanceFunc.
func (mock *rdsClientMock) RebootDBInstance(in1 *rds.RebootDBInstanceInput) (*rds.RebootDBInstanceOutput, error) {
	if mock.RebootDBInstanceFunc == nil {
		panic("rdsClientMock.RebootDBInstanceFunc: method is nil but rdsClient.RebootDBInstance was just called")
	}
	callInfo := struct {
		In1 *rds.RebootDBInstanceInput
	}{
		In1: in1,
	}
	lockrdsClientMockRebootDBInstance.Lock()
	mock.calls.RebootDBInstance = append(mock.calls.RebootDBInstance, callInfo)
	lockrdsClientMockRebootDBInstance.Unlock()
	return mock.RebootDBInstanceFunc(in1)
}

// RebootDBInstanceCalls gets all the calls that were made to RebootDBInstance.
// Check the length with:
//     len(mockedrdsClient.RebootDBInstanceCalls())
func (mock *rdsClientMock) RebootDBInstanceCalls() []struct {
	In1 *rds.RebootDBInstanceInput
} {
	var calls []struct {
		In1 *rds.RebootDBInstanceInput
	}
	lockrdsClientMockRebootDBInstance.RLock()
	calls = mock.calls.RebootDBInstance
	lockrdsClientMockRebootDBInstance.RUnlock()
	return calls
}

// RebootDBInstanceRequest calls RebootDBInstanceRequestFunc.
func (mock *rdsClientMock) RebootDBInstanceRequest(in1 *rds.RebootDBInstanceInput) (*request.Request, *rds.RebootDBInstanceOutput) {
	if mock.RebootDBInstanceRequestFunc == nil {
		panic("rdsClientMock.RebootDBInstanceRequestFunc: method is nil but rdsClient.RebootDBInstanceRequest was just called")
	}
	callInfo := struct {
		In1 *rds.RebootDBInstanceInput
	}{
		In1: in1,
	}
	lockrdsClientMockRebootDBInstanceRequest.Lock()
	mock.calls.RebootDBInstanceRequest = append(mock.calls.RebootDBInstanceRequest, callInfo)
	lockrdsClientMockRebootDBInstanceRequest.Unlock()
	return mock.RebootDBInstanceRequestFunc(in1)
}

// RebootDBInstanceRequestCalls gets all the calls that were made to RebootDBInstanceRequest.
// Check the length with:
//     len(mockedrdsClient.RebootDBInstanceRequestCalls())
func (mock *rdsClientMock) RebootDBInstanceRequestCalls() []struct {
	In1 *rds.RebootDBInstanceInput
} {
	var calls []struct {
		In1 *rds.RebootDBInstanceInput
	}
	lockrdsClientMockRebootDBInstanceRequest.RLock()
	calls = mock.calls.RebootDBInstanceRequest
	lockrdsClientMockRebootDBInstanceRequest.RUnlock()
	return calls
}

// RebootDBInstanceWithContext calls RebootDBInstanceWithContextFunc.
func (mock *rdsClientMock) RebootDBInstanceWithContext(in1 context.Context, in2 *rds.RebootDBInstanceInput, in3 ...request.Option) (*rds.RebootDBInstanceOutput, error) {
	if mock.RebootDBInstanceWithContextFunc == nil {
		panic("rdsClientMock.RebootDBInstanceWithContextFunc: method is nil but rdsClient.RebootDBInstanceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.RebootDBInstanceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockRebootDBInstanceWithContext.Lock()
	mock.calls.RebootDBInstanceWithContext = append(mock.calls.RebootDBInstanceWithContext, callInfo)
	lockrdsClientMockRebootDBInstanceWithContext.Unlock()
	return mock.RebootDBInstanceWithContextFunc(in1, in2, in3...)
}

// RebootDBInstanceWithContextCalls gets all the calls that were made to RebootDBInstanceWithContext.
// Check the length with:
//     len(mockedrdsClient.RebootDBInstanceWithContextCalls())
func (mock *rdsClientMock) RebootDBInstanceWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.RebootDBInstanceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.RebootDBInstanceInput
		In3 []request.Option
	}
	lockrdsClientMockRebootDBInstanceWithContext.RLock()
	calls = mock.calls.RebootDBInstanceWithContext
	lockrdsClientMockRebootDBInstanceWithContext.RUnlock()
	return calls
}

// RegisterDBProxyTargets calls RegisterDBProxyTargetsFunc.
func (mock *rdsClientMock) RegisterDBProxyTargets(in1 *rds.RegisterDBProxyTargetsInput) (*rds.RegisterDBProxyTargetsOutput, error) {
	if mock.RegisterDBProxyTargetsFunc == nil {
		panic("rdsClientMock.RegisterDBProxyTargetsFunc: method is nil but rdsClient.RegisterDBProxyTargets was just called")
	}
	callInfo := struct {
		In1 *rds.RegisterDBProxyTargetsInput
	}{
		In1: in1,
	}
	lockrdsClientMockRegisterDBProxyTargets.Lock()
	mock.calls.RegisterDBProxyTargets = append(mock.calls.RegisterDBProxyTargets, callInfo)
	lockrdsClientMockRegisterDBProxyTargets.Unlock()
	return mock.RegisterDBProxyTargetsFunc(in1)
}

// RegisterDBProxyTargetsCalls gets all the calls that were made to RegisterDBProxyTargets.
// Check the length with:
//     len(mockedrdsClient.RegisterDBProxyTargetsCalls())
func (mock *rdsClientMock) RegisterDBProxyTargetsCalls() []struct {
	In1 *rds.RegisterDBProxyTargetsInput
} {
	var calls []struct {
		In1 *rds.RegisterDBProxyTargetsInput
	}
	lockrdsClientMockRegisterDBProxyTargets.RLock()
	calls = mock.calls.RegisterDBProxyTargets
	lockrdsClientMockRegisterDBProxyTargets.RUnlock()
	return calls
}

// RegisterDBProxyTargetsRequest calls RegisterDBProxyTargetsRequestFunc.
func (mock *rdsClientMock) RegisterDBProxyTargetsRequest(in1 *rds.RegisterDBProxyTargetsInput) (*request.Request, *rds.RegisterDBProxyTargetsOutput) {
	if mock.RegisterDBProxyTargetsRequestFunc == nil {
		panic("rdsClientMock.RegisterDBProxyTargetsRequestFunc: method is nil but rdsClient.RegisterDBProxyTargetsRequest was just called")
	}
	callInfo := struct {
		In1 *rds.RegisterDBProxyTargetsInput
	}{
		In1: in1,
	}
	lockrdsClientMockRegisterDBProxyTargetsRequest.Lock()
	mock.calls.RegisterDBProxyTargetsRequest = append(mock.calls.RegisterDBProxyTargetsRequest, callInfo)
	lockrdsClientMockRegisterDBProxyTargetsRequest.Unlock()
	return mock.RegisterDBProxyTargetsRequestFunc(in1)
}

// RegisterDBProxyTargetsRequestCalls gets all the calls that were made to RegisterDBProxyTargetsRequest.
// Check the length with:
//     len(mockedrdsClient.RegisterDBProxyTargetsRequestCalls())
func (mock *rdsClientMock) RegisterDBProxyTargetsRequestCalls() []struct {
	In1 *rds.RegisterDBProxyTargetsInput
} {
	var calls []struct {
		In1 *rds.RegisterDBProxyTargetsInput
	}
	lockrdsClientMockRegisterDBProxyTargetsRequest.RLock()
	calls = mock.calls.RegisterDBProxyTargetsRequest
	lockrdsClientMockRegisterDBProxyTargetsRequest.RUnlock()
	return calls
}

// RegisterDBProxyTargetsWithContext calls RegisterDBProxyTargetsWithContextFunc.
func (mock *rdsClientMock) RegisterDBProxyTargetsWithContext(in1 context.Context, in2 *rds.RegisterDBProxyTargetsInput, in3 ...request.Option) (*rds.RegisterDBProxyTargetsOutput, error) {
	if mock.RegisterDBProxyTargetsWithContextFunc == nil {
		panic("rdsClientMock.RegisterDBProxyTargetsWithContextFunc: method is nil but rdsClient.RegisterDBProxyTargetsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.RegisterDBProxyTargetsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockRegisterDBProxyTargetsWithContext.Lock()
	mock.calls.RegisterDBProxyTargetsWithContext = append(mock.calls.RegisterDBProxyTargetsWithContext, callInfo)
	lockrdsClientMockRegisterDBProxyTargetsWithContext.Unlock()
	return mock.RegisterDBProxyTargetsWithContextFunc(in1, in2, in3...)
}

// RegisterDBProxyTargetsWithContextCalls gets all the calls that were made to RegisterDBProxyTargetsWithContext.
// Check the length with:
//     len(mockedrdsClient.RegisterDBProxyTargetsWithContextCalls())
func (mock *rdsClientMock) RegisterDBProxyTargetsWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.RegisterDBProxyTargetsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.RegisterDBProxyTargetsInput
		In3 []request.Option
	}
	lockrdsClientMockRegisterDBProxyTargetsWithContext.RLock()
	calls = mock.calls.RegisterDBProxyTargetsWithContext
	lockrdsClientMockRegisterDBProxyTargetsWithContext.RUnlock()
	return calls
}

// RemoveFromGlobalCluster calls RemoveFromGlobalClusterFunc.
func (mock *rdsClientMock) RemoveFromGlobalCluster(in1 *rds.RemoveFromGlobalClusterInput) (*rds.RemoveFromGlobalClusterOutput, error) {
	if mock.RemoveFromGlobalClusterFunc == nil {
		panic("rdsClientMock.RemoveFromGlobalClusterFunc: method is nil but rdsClient.RemoveFromGlobalCluster was just called")
	}
	callInfo := struct {
		In1 *rds.RemoveFromGlobalClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockRemoveFromGlobalCluster.Lock()
	mock.calls.RemoveFromGlobalCluster = append(mock.calls.RemoveFromGlobalCluster, callInfo)
	lockrdsClientMockRemoveFromGlobalCluster.Unlock()
	return mock.RemoveFromGlobalClusterFunc(in1)
}

// RemoveFromGlobalClusterCalls gets all the calls that were made to RemoveFromGlobalCluster.
// Check the length with:
//     len(mockedrdsClient.RemoveFromGlobalClusterCalls())
func (mock *rdsClientMock) RemoveFromGlobalClusterCalls() []struct {
	In1 *rds.RemoveFromGlobalClusterInput
} {
	var calls []struct {
		In1 *rds.RemoveFromGlobalClusterInput
	}
	lockrdsClientMockRemoveFromGlobalCluster.RLock()
	calls = mock.calls.RemoveFromGlobalCluster
	lockrdsClientMockRemoveFromGlobalCluster.RUnlock()
	return calls
}

// RemoveFromGlobalClusterRequest calls RemoveFromGlobalClusterRequestFunc.
func (mock *rdsClientMock) RemoveFromGlobalClusterRequest(in1 *rds.RemoveFromGlobalClusterInput) (*request.Request, *rds.RemoveFromGlobalClusterOutput) {
	if mock.RemoveFromGlobalClusterRequestFunc == nil {
		panic("rdsClientMock.RemoveFromGlobalClusterRequestFunc: method is nil but rdsClient.RemoveFromGlobalClusterRequest was just called")
	}
	callInfo := struct {
		In1 *rds.RemoveFromGlobalClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockRemoveFromGlobalClusterRequest.Lock()
	mock.calls.RemoveFromGlobalClusterRequest = append(mock.calls.RemoveFromGlobalClusterRequest, callInfo)
	lockrdsClientMockRemoveFromGlobalClusterRequest.Unlock()
	return mock.RemoveFromGlobalClusterRequestFunc(in1)
}

// RemoveFromGlobalClusterRequestCalls gets all the calls that were made to RemoveFromGlobalClusterRequest.
// Check the length with:
//     len(mockedrdsClient.RemoveFromGlobalClusterRequestCalls())
func (mock *rdsClientMock) RemoveFromGlobalClusterRequestCalls() []struct {
	In1 *rds.RemoveFromGlobalClusterInput
} {
	var calls []struct {
		In1 *rds.RemoveFromGlobalClusterInput
	}
	lockrdsClientMockRemoveFromGlobalClusterRequest.RLock()
	calls = mock.calls.RemoveFromGlobalClusterRequest
	lockrdsClientMockRemoveFromGlobalClusterRequest.RUnlock()
	return calls
}

// RemoveFromGlobalClusterWithContext calls RemoveFromGlobalClusterWithContextFunc.
func (mock *rdsClientMock) RemoveFromGlobalClusterWithContext(in1 context.Context, in2 *rds.RemoveFromGlobalClusterInput, in3 ...request.Option) (*rds.RemoveFromGlobalClusterOutput, error) {
	if mock.RemoveFromGlobalClusterWithContextFunc == nil {
		panic("rdsClientMock.RemoveFromGlobalClusterWithContextFunc: method is nil but rdsClient.RemoveFromGlobalClusterWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.RemoveFromGlobalClusterInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockRemoveFromGlobalClusterWithContext.Lock()
	mock.calls.RemoveFromGlobalClusterWithContext = append(mock.calls.RemoveFromGlobalClusterWithContext, callInfo)
	lockrdsClientMockRemoveFromGlobalClusterWithContext.Unlock()
	return mock.RemoveFromGlobalClusterWithContextFunc(in1, in2, in3...)
}

// RemoveFromGlobalClusterWithContextCalls gets all the calls that were made to RemoveFromGlobalClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.RemoveFromGlobalClusterWithContextCalls())
func (mock *rdsClientMock) RemoveFromGlobalClusterWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.RemoveFromGlobalClusterInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.RemoveFromGlobalClusterInput
		In3 []request.Option
	}
	lockrdsClientMockRemoveFromGlobalClusterWithContext.RLock()
	calls = mock.calls.RemoveFromGlobalClusterWithContext
	lockrdsClientMockRemoveFromGlobalClusterWithContext.RUnlock()
	return calls
}

// RemoveRoleFromDBCluster calls RemoveRoleFromDBClusterFunc.
func (mock *rdsClientMock) RemoveRoleFromDBCluster(in1 *rds.RemoveRoleFromDBClusterInput) (*rds.RemoveRoleFromDBClusterOutput, error) {
	if mock.RemoveRoleFromDBClusterFunc == nil {
		panic("rdsClientMock.RemoveRoleFromDBClusterFunc: method is nil but rdsClient.RemoveRoleFromDBCluster was just called")
	}
	callInfo := struct {
		In1 *rds.RemoveRoleFromDBClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockRemoveRoleFromDBCluster.Lock()
	mock.calls.RemoveRoleFromDBCluster = append(mock.calls.RemoveRoleFromDBCluster, callInfo)
	lockrdsClientMockRemoveRoleFromDBCluster.Unlock()
	return mock.RemoveRoleFromDBClusterFunc(in1)
}

// RemoveRoleFromDBClusterCalls gets all the calls that were made to RemoveRoleFromDBCluster.
// Check the length with:
//     len(mockedrdsClient.RemoveRoleFromDBClusterCalls())
func (mock *rdsClientMock) RemoveRoleFromDBClusterCalls() []struct {
	In1 *rds.RemoveRoleFromDBClusterInput
} {
	var calls []struct {
		In1 *rds.RemoveRoleFromDBClusterInput
	}
	lockrdsClientMockRemoveRoleFromDBCluster.RLock()
	calls = mock.calls.RemoveRoleFromDBCluster
	lockrdsClientMockRemoveRoleFromDBCluster.RUnlock()
	return calls
}

// RemoveRoleFromDBClusterRequest calls RemoveRoleFromDBClusterRequestFunc.
func (mock *rdsClientMock) RemoveRoleFromDBClusterRequest(in1 *rds.RemoveRoleFromDBClusterInput) (*request.Request, *rds.RemoveRoleFromDBClusterOutput) {
	if mock.RemoveRoleFromDBClusterRequestFunc == nil {
		panic("rdsClientMock.RemoveRoleFromDBClusterRequestFunc: method is nil but rdsClient.RemoveRoleFromDBClusterRequest was just called")
	}
	callInfo := struct {
		In1 *rds.RemoveRoleFromDBClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockRemoveRoleFromDBClusterRequest.Lock()
	mock.calls.RemoveRoleFromDBClusterRequest = append(mock.calls.RemoveRoleFromDBClusterRequest, callInfo)
	lockrdsClientMockRemoveRoleFromDBClusterRequest.Unlock()
	return mock.RemoveRoleFromDBClusterRequestFunc(in1)
}

// RemoveRoleFromDBClusterRequestCalls gets all the calls that were made to RemoveRoleFromDBClusterRequest.
// Check the length with:
//     len(mockedrdsClient.RemoveRoleFromDBClusterRequestCalls())
func (mock *rdsClientMock) RemoveRoleFromDBClusterRequestCalls() []struct {
	In1 *rds.RemoveRoleFromDBClusterInput
} {
	var calls []struct {
		In1 *rds.RemoveRoleFromDBClusterInput
	}
	lockrdsClientMockRemoveRoleFromDBClusterRequest.RLock()
	calls = mock.calls.RemoveRoleFromDBClusterRequest
	lockrdsClientMockRemoveRoleFromDBClusterRequest.RUnlock()
	return calls
}

// RemoveRoleFromDBClusterWithContext calls RemoveRoleFromDBClusterWithContextFunc.
func (mock *rdsClientMock) RemoveRoleFromDBClusterWithContext(in1 context.Context, in2 *rds.RemoveRoleFromDBClusterInput, in3 ...request.Option) (*rds.RemoveRoleFromDBClusterOutput, error) {
	if mock.RemoveRoleFromDBClusterWithContextFunc == nil {
		panic("rdsClientMock.RemoveRoleFromDBClusterWithContextFunc: method is nil but rdsClient.RemoveRoleFromDBClusterWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.RemoveRoleFromDBClusterInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockRemoveRoleFromDBClusterWithContext.Lock()
	mock.calls.RemoveRoleFromDBClusterWithContext = append(mock.calls.RemoveRoleFromDBClusterWithContext, callInfo)
	lockrdsClientMockRemoveRoleFromDBClusterWithContext.Unlock()
	return mock.RemoveRoleFromDBClusterWithContextFunc(in1, in2, in3...)
}

// RemoveRoleFromDBClusterWithContextCalls gets all the calls that were made to RemoveRoleFromDBClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.RemoveRoleFromDBClusterWithContextCalls())
func (mock *rdsClientMock) RemoveRoleFromDBClusterWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.RemoveRoleFromDBClusterInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.RemoveRoleFromDBClusterInput
		In3 []request.Option
	}
	lockrdsClientMockRemoveRoleFromDBClusterWithContext.RLock()
	calls = mock.calls.RemoveRoleFromDBClusterWithContext
	lockrdsClientMockRemoveRoleFromDBClusterWithContext.RUnlock()
	return calls
}

// RemoveRoleFromDBInstance calls RemoveRoleFromDBInstanceFunc.
func (mock *rdsClientMock) RemoveRoleFromDBInstance(in1 *rds.RemoveRoleFromDBInstanceInput) (*rds.RemoveRoleFromDBInstanceOutput, error) {
	if mock.RemoveRoleFromDBInstanceFunc == nil {
		panic("rdsClientMock.RemoveRoleFromDBInstanceFunc: method is nil but rdsClient.RemoveRoleFromDBInstance was just called")
	}
	callInfo := struct {
		In1 *rds.RemoveRoleFromDBInstanceInput
	}{
		In1: in1,
	}
	lockrdsClientMockRemoveRoleFromDBInstance.Lock()
	mock.calls.RemoveRoleFromDBInstance = append(mock.calls.RemoveRoleFromDBInstance, callInfo)
	lockrdsClientMockRemoveRoleFromDBInstance.Unlock()
	return mock.RemoveRoleFromDBInstanceFunc(in1)
}

// RemoveRoleFromDBInstanceCalls gets all the calls that were made to RemoveRoleFromDBInstance.
// Check the length with:
//     len(mockedrdsClient.RemoveRoleFromDBInstanceCalls())
func (mock *rdsClientMock) RemoveRoleFromDBInstanceCalls() []struct {
	In1 *rds.RemoveRoleFromDBInstanceInput
} {
	var calls []struct {
		In1 *rds.RemoveRoleFromDBInstanceInput
	}
	lockrdsClientMockRemoveRoleFromDBInstance.RLock()
	calls = mock.calls.RemoveRoleFromDBInstance
	lockrdsClientMockRemoveRoleFromDBInstance.RUnlock()
	return calls
}

// RemoveRoleFromDBInstanceRequest calls RemoveRoleFromDBInstanceRequestFunc.
func (mock *rdsClientMock) RemoveRoleFromDBInstanceRequest(in1 *rds.RemoveRoleFromDBInstanceInput) (*request.Request, *rds.RemoveRoleFromDBInstanceOutput) {
	if mock.RemoveRoleFromDBInstanceRequestFunc == nil {
		panic("rdsClientMock.RemoveRoleFromDBInstanceRequestFunc: method is nil but rdsClient.RemoveRoleFromDBInstanceRequest was just called")
	}
	callInfo := struct {
		In1 *rds.RemoveRoleFromDBInstanceInput
	}{
		In1: in1,
	}
	lockrdsClientMockRemoveRoleFromDBInstanceRequest.Lock()
	mock.calls.RemoveRoleFromDBInstanceRequest = append(mock.calls.RemoveRoleFromDBInstanceRequest, callInfo)
	lockrdsClientMockRemoveRoleFromDBInstanceRequest.Unlock()
	return mock.RemoveRoleFromDBInstanceRequestFunc(in1)
}

// RemoveRoleFromDBInstanceRequestCalls gets all the calls that were made to RemoveRoleFromDBInstanceRequest.
// Check the length with:
//     len(mockedrdsClient.RemoveRoleFromDBInstanceRequestCalls())
func (mock *rdsClientMock) RemoveRoleFromDBInstanceRequestCalls() []struct {
	In1 *rds.RemoveRoleFromDBInstanceInput
} {
	var calls []struct {
		In1 *rds.RemoveRoleFromDBInstanceInput
	}
	lockrdsClientMockRemoveRoleFromDBInstanceRequest.RLock()
	calls = mock.calls.RemoveRoleFromDBInstanceRequest
	lockrdsClientMockRemoveRoleFromDBInstanceRequest.RUnlock()
	return calls
}

// RemoveRoleFromDBInstanceWithContext calls RemoveRoleFromDBInstanceWithContextFunc.
func (mock *rdsClientMock) RemoveRoleFromDBInstanceWithContext(in1 context.Context, in2 *rds.RemoveRoleFromDBInstanceInput, in3 ...request.Option) (*rds.RemoveRoleFromDBInstanceOutput, error) {
	if mock.RemoveRoleFromDBInstanceWithContextFunc == nil {
		panic("rdsClientMock.RemoveRoleFromDBInstanceWithContextFunc: method is nil but rdsClient.RemoveRoleFromDBInstanceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.RemoveRoleFromDBInstanceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockRemoveRoleFromDBInstanceWithContext.Lock()
	mock.calls.RemoveRoleFromDBInstanceWithContext = append(mock.calls.RemoveRoleFromDBInstanceWithContext, callInfo)
	lockrdsClientMockRemoveRoleFromDBInstanceWithContext.Unlock()
	return mock.RemoveRoleFromDBInstanceWithContextFunc(in1, in2, in3...)
}

// RemoveRoleFromDBInstanceWithContextCalls gets all the calls that were made to RemoveRoleFromDBInstanceWithContext.
// Check the length with:
//     len(mockedrdsClient.RemoveRoleFromDBInstanceWithContextCalls())
func (mock *rdsClientMock) RemoveRoleFromDBInstanceWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.RemoveRoleFromDBInstanceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.RemoveRoleFromDBInstanceInput
		In3 []request.Option
	}
	lockrdsClientMockRemoveRoleFromDBInstanceWithContext.RLock()
	calls = mock.calls.RemoveRoleFromDBInstanceWithContext
	lockrdsClientMockRemoveRoleFromDBInstanceWithContext.RUnlock()
	return calls
}

// RemoveSourceIdentifierFromSubscription calls RemoveSourceIdentifierFromSubscriptionFunc.
func (mock *rdsClientMock) RemoveSourceIdentifierFromSubscription(in1 *rds.RemoveSourceIdentifierFromSubscriptionInput) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error) {
	if mock.RemoveSourceIdentifierFromSubscriptionFunc == nil {
		panic("rdsClientMock.RemoveSourceIdentifierFromSubscriptionFunc: method is nil but rdsClient.RemoveSourceIdentifierFromSubscription was just called")
	}
	callInfo := struct {
		In1 *rds.RemoveSourceIdentifierFromSubscriptionInput
	}{
		In1: in1,
	}
	lockrdsClientMockRemoveSourceIdentifierFromSubscription.Lock()
	mock.calls.RemoveSourceIdentifierFromSubscription = append(mock.calls.RemoveSourceIdentifierFromSubscription, callInfo)
	lockrdsClientMockRemoveSourceIdentifierFromSubscription.Unlock()
	return mock.RemoveSourceIdentifierFromSubscriptionFunc(in1)
}

// RemoveSourceIdentifierFromSubscriptionCalls gets all the calls that were made to RemoveSourceIdentifierFromSubscription.
// Check the length with:
//     len(mockedrdsClient.RemoveSourceIdentifierFromSubscriptionCalls())
func (mock *rdsClientMock) RemoveSourceIdentifierFromSubscriptionCalls() []struct {
	In1 *rds.RemoveSourceIdentifierFromSubscriptionInput
} {
	var calls []struct {
		In1 *rds.RemoveSourceIdentifierFromSubscriptionInput
	}
	lockrdsClientMockRemoveSourceIdentifierFromSubscription.RLock()
	calls = mock.calls.RemoveSourceIdentifierFromSubscription
	lockrdsClientMockRemoveSourceIdentifierFromSubscription.RUnlock()
	return calls
}

// RemoveSourceIdentifierFromSubscriptionRequest calls RemoveSourceIdentifierFromSubscriptionRequestFunc.
func (mock *rdsClientMock) RemoveSourceIdentifierFromSubscriptionRequest(in1 *rds.RemoveSourceIdentifierFromSubscriptionInput) (*request.Request, *rds.RemoveSourceIdentifierFromSubscriptionOutput) {
	if mock.RemoveSourceIdentifierFromSubscriptionRequestFunc == nil {
		panic("rdsClientMock.RemoveSourceIdentifierFromSubscriptionRequestFunc: method is nil but rdsClient.RemoveSourceIdentifierFromSubscriptionRequest was just called")
	}
	callInfo := struct {
		In1 *rds.RemoveSourceIdentifierFromSubscriptionInput
	}{
		In1: in1,
	}
	lockrdsClientMockRemoveSourceIdentifierFromSubscriptionRequest.Lock()
	mock.calls.RemoveSourceIdentifierFromSubscriptionRequest = append(mock.calls.RemoveSourceIdentifierFromSubscriptionRequest, callInfo)
	lockrdsClientMockRemoveSourceIdentifierFromSubscriptionRequest.Unlock()
	return mock.RemoveSourceIdentifierFromSubscriptionRequestFunc(in1)
}

// RemoveSourceIdentifierFromSubscriptionRequestCalls gets all the calls that were made to RemoveSourceIdentifierFromSubscriptionRequest.
// Check the length with:
//     len(mockedrdsClient.RemoveSourceIdentifierFromSubscriptionRequestCalls())
func (mock *rdsClientMock) RemoveSourceIdentifierFromSubscriptionRequestCalls() []struct {
	In1 *rds.RemoveSourceIdentifierFromSubscriptionInput
} {
	var calls []struct {
		In1 *rds.RemoveSourceIdentifierFromSubscriptionInput
	}
	lockrdsClientMockRemoveSourceIdentifierFromSubscriptionRequest.RLock()
	calls = mock.calls.RemoveSourceIdentifierFromSubscriptionRequest
	lockrdsClientMockRemoveSourceIdentifierFromSubscriptionRequest.RUnlock()
	return calls
}

// RemoveSourceIdentifierFromSubscriptionWithContext calls RemoveSourceIdentifierFromSubscriptionWithContextFunc.
func (mock *rdsClientMock) RemoveSourceIdentifierFromSubscriptionWithContext(in1 context.Context, in2 *rds.RemoveSourceIdentifierFromSubscriptionInput, in3 ...request.Option) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error) {
	if mock.RemoveSourceIdentifierFromSubscriptionWithContextFunc == nil {
		panic("rdsClientMock.RemoveSourceIdentifierFromSubscriptionWithContextFunc: method is nil but rdsClient.RemoveSourceIdentifierFromSubscriptionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.RemoveSourceIdentifierFromSubscriptionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockRemoveSourceIdentifierFromSubscriptionWithContext.Lock()
	mock.calls.RemoveSourceIdentifierFromSubscriptionWithContext = append(mock.calls.RemoveSourceIdentifierFromSubscriptionWithContext, callInfo)
	lockrdsClientMockRemoveSourceIdentifierFromSubscriptionWithContext.Unlock()
	return mock.RemoveSourceIdentifierFromSubscriptionWithContextFunc(in1, in2, in3...)
}

// RemoveSourceIdentifierFromSubscriptionWithContextCalls gets all the calls that were made to RemoveSourceIdentifierFromSubscriptionWithContext.
// Check the length with:
//     len(mockedrdsClient.RemoveSourceIdentifierFromSubscriptionWithContextCalls())
func (mock *rdsClientMock) RemoveSourceIdentifierFromSubscriptionWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.RemoveSourceIdentifierFromSubscriptionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.RemoveSourceIdentifierFromSubscriptionInput
		In3 []request.Option
	}
	lockrdsClientMockRemoveSourceIdentifierFromSubscriptionWithContext.RLock()
	calls = mock.calls.RemoveSourceIdentifierFromSubscriptionWithContext
	lockrdsClientMockRemoveSourceIdentifierFromSubscriptionWithContext.RUnlock()
	return calls
}

// RemoveTagsFromResource calls RemoveTagsFromResourceFunc.
func (mock *rdsClientMock) RemoveTagsFromResource(in1 *rds.RemoveTagsFromResourceInput) (*rds.RemoveTagsFromResourceOutput, error) {
	if mock.RemoveTagsFromResourceFunc == nil {
		panic("rdsClientMock.RemoveTagsFromResourceFunc: method is nil but rdsClient.RemoveTagsFromResource was just called")
	}
	callInfo := struct {
		In1 *rds.RemoveTagsFromResourceInput
	}{
		In1: in1,
	}
	lockrdsClientMockRemoveTagsFromResource.Lock()
	mock.calls.RemoveTagsFromResource = append(mock.calls.RemoveTagsFromResource, callInfo)
	lockrdsClientMockRemoveTagsFromResource.Unlock()
	return mock.RemoveTagsFromResourceFunc(in1)
}

// RemoveTagsFromResourceCalls gets all the calls that were made to RemoveTagsFromResource.
// Check the length with:
//     len(mockedrdsClient.RemoveTagsFromResourceCalls())
func (mock *rdsClientMock) RemoveTagsFromResourceCalls() []struct {
	In1 *rds.RemoveTagsFromResourceInput
} {
	var calls []struct {
		In1 *rds.RemoveTagsFromResourceInput
	}
	lockrdsClientMockRemoveTagsFromResource.RLock()
	calls = mock.calls.RemoveTagsFromResource
	lockrdsClientMockRemoveTagsFromResource.RUnlock()
	return calls
}

// RemoveTagsFromResourceRequest calls RemoveTagsFromResourceRequestFunc.
func (mock *rdsClientMock) RemoveTagsFromResourceRequest(in1 *rds.RemoveTagsFromResourceInput) (*request.Request, *rds.RemoveTagsFromResourceOutput) {
	if mock.RemoveTagsFromResourceRequestFunc == nil {
		panic("rdsClientMock.RemoveTagsFromResourceRequestFunc: method is nil but rdsClient.RemoveTagsFromResourceRequest was just called")
	}
	callInfo := struct {
		In1 *rds.RemoveTagsFromResourceInput
	}{
		In1: in1,
	}
	lockrdsClientMockRemoveTagsFromResourceRequest.Lock()
	mock.calls.RemoveTagsFromResourceRequest = append(mock.calls.RemoveTagsFromResourceRequest, callInfo)
	lockrdsClientMockRemoveTagsFromResourceRequest.Unlock()
	return mock.RemoveTagsFromResourceRequestFunc(in1)
}

// RemoveTagsFromResourceRequestCalls gets all the calls that were made to RemoveTagsFromResourceRequest.
// Check the length with:
//     len(mockedrdsClient.RemoveTagsFromResourceRequestCalls())
func (mock *rdsClientMock) RemoveTagsFromResourceRequestCalls() []struct {
	In1 *rds.RemoveTagsFromResourceInput
} {
	var calls []struct {
		In1 *rds.RemoveTagsFromResourceInput
	}
	lockrdsClientMockRemoveTagsFromResourceRequest.RLock()
	calls = mock.calls.RemoveTagsFromResourceRequest
	lockrdsClientMockRemoveTagsFromResourceRequest.RUnlock()
	return calls
}

// RemoveTagsFromResourceWithContext calls RemoveTagsFromResourceWithContextFunc.
func (mock *rdsClientMock) RemoveTagsFromResourceWithContext(in1 context.Context, in2 *rds.RemoveTagsFromResourceInput, in3 ...request.Option) (*rds.RemoveTagsFromResourceOutput, error) {
	if mock.RemoveTagsFromResourceWithContextFunc == nil {
		panic("rdsClientMock.RemoveTagsFromResourceWithContextFunc: method is nil but rdsClient.RemoveTagsFromResourceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.RemoveTagsFromResourceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockRemoveTagsFromResourceWithContext.Lock()
	mock.calls.RemoveTagsFromResourceWithContext = append(mock.calls.RemoveTagsFromResourceWithContext, callInfo)
	lockrdsClientMockRemoveTagsFromResourceWithContext.Unlock()
	return mock.RemoveTagsFromResourceWithContextFunc(in1, in2, in3...)
}

// RemoveTagsFromResourceWithContextCalls gets all the calls that were made to RemoveTagsFromResourceWithContext.
// Check the length with:
//     len(mockedrdsClient.RemoveTagsFromResourceWithContextCalls())
func (mock *rdsClientMock) RemoveTagsFromResourceWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.RemoveTagsFromResourceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.RemoveTagsFromResourceInput
		In3 []request.Option
	}
	lockrdsClientMockRemoveTagsFromResourceWithContext.RLock()
	calls = mock.calls.RemoveTagsFromResourceWithContext
	lockrdsClientMockRemoveTagsFromResourceWithContext.RUnlock()
	return calls
}

// ResetDBClusterParameterGroup calls ResetDBClusterParameterGroupFunc.
func (mock *rdsClientMock) ResetDBClusterParameterGroup(in1 *rds.ResetDBClusterParameterGroupInput) (*rds.DBClusterParameterGroupNameMessage, error) {
	if mock.ResetDBClusterParameterGroupFunc == nil {
		panic("rdsClientMock.ResetDBClusterParameterGroupFunc: method is nil but rdsClient.ResetDBClusterParameterGroup was just called")
	}
	callInfo := struct {
		In1 *rds.ResetDBClusterParameterGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockResetDBClusterParameterGroup.Lock()
	mock.calls.ResetDBClusterParameterGroup = append(mock.calls.ResetDBClusterParameterGroup, callInfo)
	lockrdsClientMockResetDBClusterParameterGroup.Unlock()
	return mock.ResetDBClusterParameterGroupFunc(in1)
}

// ResetDBClusterParameterGroupCalls gets all the calls that were made to ResetDBClusterParameterGroup.
// Check the length with:
//     len(mockedrdsClient.ResetDBClusterParameterGroupCalls())
func (mock *rdsClientMock) ResetDBClusterParameterGroupCalls() []struct {
	In1 *rds.ResetDBClusterParameterGroupInput
} {
	var calls []struct {
		In1 *rds.ResetDBClusterParameterGroupInput
	}
	lockrdsClientMockResetDBClusterParameterGroup.RLock()
	calls = mock.calls.ResetDBClusterParameterGroup
	lockrdsClientMockResetDBClusterParameterGroup.RUnlock()
	return calls
}

// ResetDBClusterParameterGroupRequest calls ResetDBClusterParameterGroupRequestFunc.
func (mock *rdsClientMock) ResetDBClusterParameterGroupRequest(in1 *rds.ResetDBClusterParameterGroupInput) (*request.Request, *rds.DBClusterParameterGroupNameMessage) {
	if mock.ResetDBClusterParameterGroupRequestFunc == nil {
		panic("rdsClientMock.ResetDBClusterParameterGroupRequestFunc: method is nil but rdsClient.ResetDBClusterParameterGroupRequest was just called")
	}
	callInfo := struct {
		In1 *rds.ResetDBClusterParameterGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockResetDBClusterParameterGroupRequest.Lock()
	mock.calls.ResetDBClusterParameterGroupRequest = append(mock.calls.ResetDBClusterParameterGroupRequest, callInfo)
	lockrdsClientMockResetDBClusterParameterGroupRequest.Unlock()
	return mock.ResetDBClusterParameterGroupRequestFunc(in1)
}

// ResetDBClusterParameterGroupRequestCalls gets all the calls that were made to ResetDBClusterParameterGroupRequest.
// Check the length with:
//     len(mockedrdsClient.ResetDBClusterParameterGroupRequestCalls())
func (mock *rdsClientMock) ResetDBClusterParameterGroupRequestCalls() []struct {
	In1 *rds.ResetDBClusterParameterGroupInput
} {
	var calls []struct {
		In1 *rds.ResetDBClusterParameterGroupInput
	}
	lockrdsClientMockResetDBClusterParameterGroupRequest.RLock()
	calls = mock.calls.ResetDBClusterParameterGroupRequest
	lockrdsClientMockResetDBClusterParameterGroupRequest.RUnlock()
	return calls
}

// ResetDBClusterParameterGroupWithContext calls ResetDBClusterParameterGroupWithContextFunc.
func (mock *rdsClientMock) ResetDBClusterParameterGroupWithContext(in1 context.Context, in2 *rds.ResetDBClusterParameterGroupInput, in3 ...request.Option) (*rds.DBClusterParameterGroupNameMessage, error) {
	if mock.ResetDBClusterParameterGroupWithContextFunc == nil {
		panic("rdsClientMock.ResetDBClusterParameterGroupWithContextFunc: method is nil but rdsClient.ResetDBClusterParameterGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.ResetDBClusterParameterGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockResetDBClusterParameterGroupWithContext.Lock()
	mock.calls.ResetDBClusterParameterGroupWithContext = append(mock.calls.ResetDBClusterParameterGroupWithContext, callInfo)
	lockrdsClientMockResetDBClusterParameterGroupWithContext.Unlock()
	return mock.ResetDBClusterParameterGroupWithContextFunc(in1, in2, in3...)
}

// ResetDBClusterParameterGroupWithContextCalls gets all the calls that were made to ResetDBClusterParameterGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.ResetDBClusterParameterGroupWithContextCalls())
func (mock *rdsClientMock) ResetDBClusterParameterGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.ResetDBClusterParameterGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.ResetDBClusterParameterGroupInput
		In3 []request.Option
	}
	lockrdsClientMockResetDBClusterParameterGroupWithContext.RLock()
	calls = mock.calls.ResetDBClusterParameterGroupWithContext
	lockrdsClientMockResetDBClusterParameterGroupWithContext.RUnlock()
	return calls
}

// ResetDBParameterGroup calls ResetDBParameterGroupFunc.
func (mock *rdsClientMock) ResetDBParameterGroup(in1 *rds.ResetDBParameterGroupInput) (*rds.DBParameterGroupNameMessage, error) {
	if mock.ResetDBParameterGroupFunc == nil {
		panic("rdsClientMock.ResetDBParameterGroupFunc: method is nil but rdsClient.ResetDBParameterGroup was just called")
	}
	callInfo := struct {
		In1 *rds.ResetDBParameterGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockResetDBParameterGroup.Lock()
	mock.calls.ResetDBParameterGroup = append(mock.calls.ResetDBParameterGroup, callInfo)
	lockrdsClientMockResetDBParameterGroup.Unlock()
	return mock.ResetDBParameterGroupFunc(in1)
}

// ResetDBParameterGroupCalls gets all the calls that were made to ResetDBParameterGroup.
// Check the length with:
//     len(mockedrdsClient.ResetDBParameterGroupCalls())
func (mock *rdsClientMock) ResetDBParameterGroupCalls() []struct {
	In1 *rds.ResetDBParameterGroupInput
} {
	var calls []struct {
		In1 *rds.ResetDBParameterGroupInput
	}
	lockrdsClientMockResetDBParameterGroup.RLock()
	calls = mock.calls.ResetDBParameterGroup
	lockrdsClientMockResetDBParameterGroup.RUnlock()
	return calls
}

// ResetDBParameterGroupRequest calls ResetDBParameterGroupRequestFunc.
func (mock *rdsClientMock) ResetDBParameterGroupRequest(in1 *rds.ResetDBParameterGroupInput) (*request.Request, *rds.DBParameterGroupNameMessage) {
	if mock.ResetDBParameterGroupRequestFunc == nil {
		panic("rdsClientMock.ResetDBParameterGroupRequestFunc: method is nil but rdsClient.ResetDBParameterGroupRequest was just called")
	}
	callInfo := struct {
		In1 *rds.ResetDBParameterGroupInput
	}{
		In1: in1,
	}
	lockrdsClientMockResetDBParameterGroupRequest.Lock()
	mock.calls.ResetDBParameterGroupRequest = append(mock.calls.ResetDBParameterGroupRequest, callInfo)
	lockrdsClientMockResetDBParameterGroupRequest.Unlock()
	return mock.ResetDBParameterGroupRequestFunc(in1)
}

// ResetDBParameterGroupRequestCalls gets all the calls that were made to ResetDBParameterGroupRequest.
// Check the length with:
//     len(mockedrdsClient.ResetDBParameterGroupRequestCalls())
func (mock *rdsClientMock) ResetDBParameterGroupRequestCalls() []struct {
	In1 *rds.ResetDBParameterGroupInput
} {
	var calls []struct {
		In1 *rds.ResetDBParameterGroupInput
	}
	lockrdsClientMockResetDBParameterGroupRequest.RLock()
	calls = mock.calls.ResetDBParameterGroupRequest
	lockrdsClientMockResetDBParameterGroupRequest.RUnlock()
	return calls
}

// ResetDBParameterGroupWithContext calls ResetDBParameterGroupWithContextFunc.
func (mock *rdsClientMock) ResetDBParameterGroupWithContext(in1 context.Context, in2 *rds.ResetDBParameterGroupInput, in3 ...request.Option) (*rds.DBParameterGroupNameMessage, error) {
	if mock.ResetDBParameterGroupWithContextFunc == nil {
		panic("rdsClientMock.ResetDBParameterGroupWithContextFunc: method is nil but rdsClient.ResetDBParameterGroupWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.ResetDBParameterGroupInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockResetDBParameterGroupWithContext.Lock()
	mock.calls.ResetDBParameterGroupWithContext = append(mock.calls.ResetDBParameterGroupWithContext, callInfo)
	lockrdsClientMockResetDBParameterGroupWithContext.Unlock()
	return mock.ResetDBParameterGroupWithContextFunc(in1, in2, in3...)
}

// ResetDBParameterGroupWithContextCalls gets all the calls that were made to ResetDBParameterGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.ResetDBParameterGroupWithContextCalls())
func (mock *rdsClientMock) ResetDBParameterGroupWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.ResetDBParameterGroupInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.ResetDBParameterGroupInput
		In3 []request.Option
	}
	lockrdsClientMockResetDBParameterGroupWithContext.RLock()
	calls = mock.calls.ResetDBParameterGroupWithContext
	lockrdsClientMockResetDBParameterGroupWithContext.RUnlock()
	return calls
}

// RestoreDBClusterFromS3 calls RestoreDBClusterFromS3Func.
func (mock *rdsClientMock) RestoreDBClusterFromS3(in1 *rds.RestoreDBClusterFromS3Input) (*rds.RestoreDBClusterFromS3Output, error) {
	if mock.RestoreDBClusterFromS3Func == nil {
		panic("rdsClientMock.RestoreDBClusterFromS3Func: method is nil but rdsClient.RestoreDBClusterFromS3 was just called")
	}
	callInfo := struct {
		In1 *rds.RestoreDBClusterFromS3Input
	}{
		In1: in1,
	}
	lockrdsClientMockRestoreDBClusterFromS3.Lock()
	mock.calls.RestoreDBClusterFromS3 = append(mock.calls.RestoreDBClusterFromS3, callInfo)
	lockrdsClientMockRestoreDBClusterFromS3.Unlock()
	return mock.RestoreDBClusterFromS3Func(in1)
}

// RestoreDBClusterFromS3Calls gets all the calls that were made to RestoreDBClusterFromS3.
// Check the length with:
//     len(mockedrdsClient.RestoreDBClusterFromS3Calls())
func (mock *rdsClientMock) RestoreDBClusterFromS3Calls() []struct {
	In1 *rds.RestoreDBClusterFromS3Input
} {
	var calls []struct {
		In1 *rds.RestoreDBClusterFromS3Input
	}
	lockrdsClientMockRestoreDBClusterFromS3.RLock()
	calls = mock.calls.RestoreDBClusterFromS3
	lockrdsClientMockRestoreDBClusterFromS3.RUnlock()
	return calls
}

// RestoreDBClusterFromS3Request calls RestoreDBClusterFromS3RequestFunc.
func (mock *rdsClientMock) RestoreDBClusterFromS3Request(in1 *rds.RestoreDBClusterFromS3Input) (*request.Request, *rds.RestoreDBClusterFromS3Output) {
	if mock.RestoreDBClusterFromS3RequestFunc == nil {
		panic("rdsClientMock.RestoreDBClusterFromS3RequestFunc: method is nil but rdsClient.RestoreDBClusterFromS3Request was just called")
	}
	callInfo := struct {
		In1 *rds.RestoreDBClusterFromS3Input
	}{
		In1: in1,
	}
	lockrdsClientMockRestoreDBClusterFromS3Request.Lock()
	mock.calls.RestoreDBClusterFromS3Request = append(mock.calls.RestoreDBClusterFromS3Request, callInfo)
	lockrdsClientMockRestoreDBClusterFromS3Request.Unlock()
	return mock.RestoreDBClusterFromS3RequestFunc(in1)
}

// RestoreDBClusterFromS3RequestCalls gets all the calls that were made to RestoreDBClusterFromS3Request.
// Check the length with:
//     len(mockedrdsClient.RestoreDBClusterFromS3RequestCalls())
func (mock *rdsClientMock) RestoreDBClusterFromS3RequestCalls() []struct {
	In1 *rds.RestoreDBClusterFromS3Input
} {
	var calls []struct {
		In1 *rds.RestoreDBClusterFromS3Input
	}
	lockrdsClientMockRestoreDBClusterFromS3Request.RLock()
	calls = mock.calls.RestoreDBClusterFromS3Request
	lockrdsClientMockRestoreDBClusterFromS3Request.RUnlock()
	return calls
}

// RestoreDBClusterFromS3WithContext calls RestoreDBClusterFromS3WithContextFunc.
func (mock *rdsClientMock) RestoreDBClusterFromS3WithContext(in1 context.Context, in2 *rds.RestoreDBClusterFromS3Input, in3 ...request.Option) (*rds.RestoreDBClusterFromS3Output, error) {
	if mock.RestoreDBClusterFromS3WithContextFunc == nil {
		panic("rdsClientMock.RestoreDBClusterFromS3WithContextFunc: method is nil but rdsClient.RestoreDBClusterFromS3WithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.RestoreDBClusterFromS3Input
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockRestoreDBClusterFromS3WithContext.Lock()
	mock.calls.RestoreDBClusterFromS3WithContext = append(mock.calls.RestoreDBClusterFromS3WithContext, callInfo)
	lockrdsClientMockRestoreDBClusterFromS3WithContext.Unlock()
	return mock.RestoreDBClusterFromS3WithContextFunc(in1, in2, in3...)
}

// RestoreDBClusterFromS3WithContextCalls gets all the calls that were made to RestoreDBClusterFromS3WithContext.
// Check the length with:
//     len(mockedrdsClient.RestoreDBClusterFromS3WithContextCalls())
func (mock *rdsClientMock) RestoreDBClusterFromS3WithContextCalls() []struct {
	In1 context.Context
	In2 *rds.RestoreDBClusterFromS3Input
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.RestoreDBClusterFromS3Input
		In3 []request.Option
	}
	lockrdsClientMockRestoreDBClusterFromS3WithContext.RLock()
	calls = mock.calls.RestoreDBClusterFromS3WithContext
	lockrdsClientMockRestoreDBClusterFromS3WithContext.RUnlock()
	return calls
}

// RestoreDBClusterFromSnapshot calls RestoreDBClusterFromSnapshotFunc.
func (mock *rdsClientMock) RestoreDBClusterFromSnapshot(in1 *rds.RestoreDBClusterFromSnapshotInput) (*rds.RestoreDBClusterFromSnapshotOutput, error) {
	if mock.RestoreDBClusterFromSnapshotFunc == nil {
		panic("rdsClientMock.RestoreDBClusterFromSnapshotFunc: method is nil but rdsClient.RestoreDBClusterFromSnapshot was just called")
	}
	callInfo := struct {
		In1 *rds.RestoreDBClusterFromSnapshotInput
	}{
		In1: in1,
	}
	lockrdsClientMockRestoreDBClusterFromSnapshot.Lock()
	mock.calls.RestoreDBClusterFromSnapshot = append(mock.calls.RestoreDBClusterFromSnapshot, callInfo)
	lockrdsClientMockRestoreDBClusterFromSnapshot.Unlock()
	return mock.RestoreDBClusterFromSnapshotFunc(in1)
}

// RestoreDBClusterFromSnapshotCalls gets all the calls that were made to RestoreDBClusterFromSnapshot.
// Check the length with:
//     len(mockedrdsClient.RestoreDBClusterFromSnapshotCalls())
func (mock *rdsClientMock) RestoreDBClusterFromSnapshotCalls() []struct {
	In1 *rds.RestoreDBClusterFromSnapshotInput
} {
	var calls []struct {
		In1 *rds.RestoreDBClusterFromSnapshotInput
	}
	lockrdsClientMockRestoreDBClusterFromSnapshot.RLock()
	calls = mock.calls.RestoreDBClusterFromSnapshot
	lockrdsClientMockRestoreDBClusterFromSnapshot.RUnlock()
	return calls
}

// RestoreDBClusterFromSnapshotRequest calls RestoreDBClusterFromSnapshotRequestFunc.
func (mock *rdsClientMock) RestoreDBClusterFromSnapshotRequest(in1 *rds.RestoreDBClusterFromSnapshotInput) (*request.Request, *rds.RestoreDBClusterFromSnapshotOutput) {
	if mock.RestoreDBClusterFromSnapshotRequestFunc == nil {
		panic("rdsClientMock.RestoreDBClusterFromSnapshotRequestFunc: method is nil but rdsClient.RestoreDBClusterFromSnapshotRequest was just called")
	}
	callInfo := struct {
		In1 *rds.RestoreDBClusterFromSnapshotInput
	}{
		In1: in1,
	}
	lockrdsClientMockRestoreDBClusterFromSnapshotRequest.Lock()
	mock.calls.RestoreDBClusterFromSnapshotRequest = append(mock.calls.RestoreDBClusterFromSnapshotRequest, callInfo)
	lockrdsClientMockRestoreDBClusterFromSnapshotRequest.Unlock()
	return mock.RestoreDBClusterFromSnapshotRequestFunc(in1)
}

// RestoreDBClusterFromSnapshotRequestCalls gets all the calls that were made to RestoreDBClusterFromSnapshotRequest.
// Check the length with:
//     len(mockedrdsClient.RestoreDBClusterFromSnapshotRequestCalls())
func (mock *rdsClientMock) RestoreDBClusterFromSnapshotRequestCalls() []struct {
	In1 *rds.RestoreDBClusterFromSnapshotInput
} {
	var calls []struct {
		In1 *rds.RestoreDBClusterFromSnapshotInput
	}
	lockrdsClientMockRestoreDBClusterFromSnapshotRequest.RLock()
	calls = mock.calls.RestoreDBClusterFromSnapshotRequest
	lockrdsClientMockRestoreDBClusterFromSnapshotRequest.RUnlock()
	return calls
}

// RestoreDBClusterFromSnapshotWithContext calls RestoreDBClusterFromSnapshotWithContextFunc.
func (mock *rdsClientMock) RestoreDBClusterFromSnapshotWithContext(in1 context.Context, in2 *rds.RestoreDBClusterFromSnapshotInput, in3 ...request.Option) (*rds.RestoreDBClusterFromSnapshotOutput, error) {
	if mock.RestoreDBClusterFromSnapshotWithContextFunc == nil {
		panic("rdsClientMock.RestoreDBClusterFromSnapshotWithContextFunc: method is nil but rdsClient.RestoreDBClusterFromSnapshotWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.RestoreDBClusterFromSnapshotInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockRestoreDBClusterFromSnapshotWithContext.Lock()
	mock.calls.RestoreDBClusterFromSnapshotWithContext = append(mock.calls.RestoreDBClusterFromSnapshotWithContext, callInfo)
	lockrdsClientMockRestoreDBClusterFromSnapshotWithContext.Unlock()
	return mock.RestoreDBClusterFromSnapshotWithContextFunc(in1, in2, in3...)
}

// RestoreDBClusterFromSnapshotWithContextCalls gets all the calls that were made to RestoreDBClusterFromSnapshotWithContext.
// Check the length with:
//     len(mockedrdsClient.RestoreDBClusterFromSnapshotWithContextCalls())
func (mock *rdsClientMock) RestoreDBClusterFromSnapshotWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.RestoreDBClusterFromSnapshotInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.RestoreDBClusterFromSnapshotInput
		In3 []request.Option
	}
	lockrdsClientMockRestoreDBClusterFromSnapshotWithContext.RLock()
	calls = mock.calls.RestoreDBClusterFromSnapshotWithContext
	lockrdsClientMockRestoreDBClusterFromSnapshotWithContext.RUnlock()
	return calls
}

// RestoreDBClusterToPointInTime calls RestoreDBClusterToPointInTimeFunc.
func (mock *rdsClientMock) RestoreDBClusterToPointInTime(in1 *rds.RestoreDBClusterToPointInTimeInput) (*rds.RestoreDBClusterToPointInTimeOutput, error) {
	if mock.RestoreDBClusterToPointInTimeFunc == nil {
		panic("rdsClientMock.RestoreDBClusterToPointInTimeFunc: method is nil but rdsClient.RestoreDBClusterToPointInTime was just called")
	}
	callInfo := struct {
		In1 *rds.RestoreDBClusterToPointInTimeInput
	}{
		In1: in1,
	}
	lockrdsClientMockRestoreDBClusterToPointInTime.Lock()
	mock.calls.RestoreDBClusterToPointInTime = append(mock.calls.RestoreDBClusterToPointInTime, callInfo)
	lockrdsClientMockRestoreDBClusterToPointInTime.Unlock()
	return mock.RestoreDBClusterToPointInTimeFunc(in1)
}

// RestoreDBClusterToPointInTimeCalls gets all the calls that were made to RestoreDBClusterToPointInTime.
// Check the length with:
//     len(mockedrdsClient.RestoreDBClusterToPointInTimeCalls())
func (mock *rdsClientMock) RestoreDBClusterToPointInTimeCalls() []struct {
	In1 *rds.RestoreDBClusterToPointInTimeInput
} {
	var calls []struct {
		In1 *rds.RestoreDBClusterToPointInTimeInput
	}
	lockrdsClientMockRestoreDBClusterToPointInTime.RLock()
	calls = mock.calls.RestoreDBClusterToPointInTime
	lockrdsClientMockRestoreDBClusterToPointInTime.RUnlock()
	return calls
}

// RestoreDBClusterToPointInTimeRequest calls RestoreDBClusterToPointInTimeRequestFunc.
func (mock *rdsClientMock) RestoreDBClusterToPointInTimeRequest(in1 *rds.RestoreDBClusterToPointInTimeInput) (*request.Request, *rds.RestoreDBClusterToPointInTimeOutput) {
	if mock.RestoreDBClusterToPointInTimeRequestFunc == nil {
		panic("rdsClientMock.RestoreDBClusterToPointInTimeRequestFunc: method is nil but rdsClient.RestoreDBClusterToPointInTimeRequest was just called")
	}
	callInfo := struct {
		In1 *rds.RestoreDBClusterToPointInTimeInput
	}{
		In1: in1,
	}
	lockrdsClientMockRestoreDBClusterToPointInTimeRequest.Lock()
	mock.calls.RestoreDBClusterToPointInTimeRequest = append(mock.calls.RestoreDBClusterToPointInTimeRequest, callInfo)
	lockrdsClientMockRestoreDBClusterToPointInTimeRequest.Unlock()
	return mock.RestoreDBClusterToPointInTimeRequestFunc(in1)
}

// RestoreDBClusterToPointInTimeRequestCalls gets all the calls that were made to RestoreDBClusterToPointInTimeRequest.
// Check the length with:
//     len(mockedrdsClient.RestoreDBClusterToPointInTimeRequestCalls())
func (mock *rdsClientMock) RestoreDBClusterToPointInTimeRequestCalls() []struct {
	In1 *rds.RestoreDBClusterToPointInTimeInput
} {
	var calls []struct {
		In1 *rds.RestoreDBClusterToPointInTimeInput
	}
	lockrdsClientMockRestoreDBClusterToPointInTimeRequest.RLock()
	calls = mock.calls.RestoreDBClusterToPointInTimeRequest
	lockrdsClientMockRestoreDBClusterToPointInTimeRequest.RUnlock()
	return calls
}

// RestoreDBClusterToPointInTimeWithContext calls RestoreDBClusterToPointInTimeWithContextFunc.
func (mock *rdsClientMock) RestoreDBClusterToPointInTimeWithContext(in1 context.Context, in2 *rds.RestoreDBClusterToPointInTimeInput, in3 ...request.Option) (*rds.RestoreDBClusterToPointInTimeOutput, error) {
	if mock.RestoreDBClusterToPointInTimeWithContextFunc == nil {
		panic("rdsClientMock.RestoreDBClusterToPointInTimeWithContextFunc: method is nil but rdsClient.RestoreDBClusterToPointInTimeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.RestoreDBClusterToPointInTimeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockRestoreDBClusterToPointInTimeWithContext.Lock()
	mock.calls.RestoreDBClusterToPointInTimeWithContext = append(mock.calls.RestoreDBClusterToPointInTimeWithContext, callInfo)
	lockrdsClientMockRestoreDBClusterToPointInTimeWithContext.Unlock()
	return mock.RestoreDBClusterToPointInTimeWithContextFunc(in1, in2, in3...)
}

// RestoreDBClusterToPointInTimeWithContextCalls gets all the calls that were made to RestoreDBClusterToPointInTimeWithContext.
// Check the length with:
//     len(mockedrdsClient.RestoreDBClusterToPointInTimeWithContextCalls())
func (mock *rdsClientMock) RestoreDBClusterToPointInTimeWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.RestoreDBClusterToPointInTimeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.RestoreDBClusterToPointInTimeInput
		In3 []request.Option
	}
	lockrdsClientMockRestoreDBClusterToPointInTimeWithContext.RLock()
	calls = mock.calls.RestoreDBClusterToPointInTimeWithContext
	lockrdsClientMockRestoreDBClusterToPointInTimeWithContext.RUnlock()
	return calls
}

// RestoreDBInstanceFromDBSnapshot calls RestoreDBInstanceFromDBSnapshotFunc.
func (mock *rdsClientMock) RestoreDBInstanceFromDBSnapshot(in1 *rds.RestoreDBInstanceFromDBSnapshotInput) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error) {
	if mock.RestoreDBInstanceFromDBSnapshotFunc == nil {
		panic("rdsClientMock.RestoreDBInstanceFromDBSnapshotFunc: method is nil but rdsClient.RestoreDBInstanceFromDBSnapshot was just called")
	}
	callInfo := struct {
		In1 *rds.RestoreDBInstanceFromDBSnapshotInput
	}{
		In1: in1,
	}
	lockrdsClientMockRestoreDBInstanceFromDBSnapshot.Lock()
	mock.calls.RestoreDBInstanceFromDBSnapshot = append(mock.calls.RestoreDBInstanceFromDBSnapshot, callInfo)
	lockrdsClientMockRestoreDBInstanceFromDBSnapshot.Unlock()
	return mock.RestoreDBInstanceFromDBSnapshotFunc(in1)
}

// RestoreDBInstanceFromDBSnapshotCalls gets all the calls that were made to RestoreDBInstanceFromDBSnapshot.
// Check the length with:
//     len(mockedrdsClient.RestoreDBInstanceFromDBSnapshotCalls())
func (mock *rdsClientMock) RestoreDBInstanceFromDBSnapshotCalls() []struct {
	In1 *rds.RestoreDBInstanceFromDBSnapshotInput
} {
	var calls []struct {
		In1 *rds.RestoreDBInstanceFromDBSnapshotInput
	}
	lockrdsClientMockRestoreDBInstanceFromDBSnapshot.RLock()
	calls = mock.calls.RestoreDBInstanceFromDBSnapshot
	lockrdsClientMockRestoreDBInstanceFromDBSnapshot.RUnlock()
	return calls
}

// RestoreDBInstanceFromDBSnapshotRequest calls RestoreDBInstanceFromDBSnapshotRequestFunc.
func (mock *rdsClientMock) RestoreDBInstanceFromDBSnapshotRequest(in1 *rds.RestoreDBInstanceFromDBSnapshotInput) (*request.Request, *rds.RestoreDBInstanceFromDBSnapshotOutput) {
	if mock.RestoreDBInstanceFromDBSnapshotRequestFunc == nil {
		panic("rdsClientMock.RestoreDBInstanceFromDBSnapshotRequestFunc: method is nil but rdsClient.RestoreDBInstanceFromDBSnapshotRequest was just called")
	}
	callInfo := struct {
		In1 *rds.RestoreDBInstanceFromDBSnapshotInput
	}{
		In1: in1,
	}
	lockrdsClientMockRestoreDBInstanceFromDBSnapshotRequest.Lock()
	mock.calls.RestoreDBInstanceFromDBSnapshotRequest = append(mock.calls.RestoreDBInstanceFromDBSnapshotRequest, callInfo)
	lockrdsClientMockRestoreDBInstanceFromDBSnapshotRequest.Unlock()
	return mock.RestoreDBInstanceFromDBSnapshotRequestFunc(in1)
}

// RestoreDBInstanceFromDBSnapshotRequestCalls gets all the calls that were made to RestoreDBInstanceFromDBSnapshotRequest.
// Check the length with:
//     len(mockedrdsClient.RestoreDBInstanceFromDBSnapshotRequestCalls())
func (mock *rdsClientMock) RestoreDBInstanceFromDBSnapshotRequestCalls() []struct {
	In1 *rds.RestoreDBInstanceFromDBSnapshotInput
} {
	var calls []struct {
		In1 *rds.RestoreDBInstanceFromDBSnapshotInput
	}
	lockrdsClientMockRestoreDBInstanceFromDBSnapshotRequest.RLock()
	calls = mock.calls.RestoreDBInstanceFromDBSnapshotRequest
	lockrdsClientMockRestoreDBInstanceFromDBSnapshotRequest.RUnlock()
	return calls
}

// RestoreDBInstanceFromDBSnapshotWithContext calls RestoreDBInstanceFromDBSnapshotWithContextFunc.
func (mock *rdsClientMock) RestoreDBInstanceFromDBSnapshotWithContext(in1 context.Context, in2 *rds.RestoreDBInstanceFromDBSnapshotInput, in3 ...request.Option) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error) {
	if mock.RestoreDBInstanceFromDBSnapshotWithContextFunc == nil {
		panic("rdsClientMock.RestoreDBInstanceFromDBSnapshotWithContextFunc: method is nil but rdsClient.RestoreDBInstanceFromDBSnapshotWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.RestoreDBInstanceFromDBSnapshotInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockRestoreDBInstanceFromDBSnapshotWithContext.Lock()
	mock.calls.RestoreDBInstanceFromDBSnapshotWithContext = append(mock.calls.RestoreDBInstanceFromDBSnapshotWithContext, callInfo)
	lockrdsClientMockRestoreDBInstanceFromDBSnapshotWithContext.Unlock()
	return mock.RestoreDBInstanceFromDBSnapshotWithContextFunc(in1, in2, in3...)
}

// RestoreDBInstanceFromDBSnapshotWithContextCalls gets all the calls that were made to RestoreDBInstanceFromDBSnapshotWithContext.
// Check the length with:
//     len(mockedrdsClient.RestoreDBInstanceFromDBSnapshotWithContextCalls())
func (mock *rdsClientMock) RestoreDBInstanceFromDBSnapshotWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.RestoreDBInstanceFromDBSnapshotInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.RestoreDBInstanceFromDBSnapshotInput
		In3 []request.Option
	}
	lockrdsClientMockRestoreDBInstanceFromDBSnapshotWithContext.RLock()
	calls = mock.calls.RestoreDBInstanceFromDBSnapshotWithContext
	lockrdsClientMockRestoreDBInstanceFromDBSnapshotWithContext.RUnlock()
	return calls
}

// RestoreDBInstanceFromS3 calls RestoreDBInstanceFromS3Func.
func (mock *rdsClientMock) RestoreDBInstanceFromS3(in1 *rds.RestoreDBInstanceFromS3Input) (*rds.RestoreDBInstanceFromS3Output, error) {
	if mock.RestoreDBInstanceFromS3Func == nil {
		panic("rdsClientMock.RestoreDBInstanceFromS3Func: method is nil but rdsClient.RestoreDBInstanceFromS3 was just called")
	}
	callInfo := struct {
		In1 *rds.RestoreDBInstanceFromS3Input
	}{
		In1: in1,
	}
	lockrdsClientMockRestoreDBInstanceFromS3.Lock()
	mock.calls.RestoreDBInstanceFromS3 = append(mock.calls.RestoreDBInstanceFromS3, callInfo)
	lockrdsClientMockRestoreDBInstanceFromS3.Unlock()
	return mock.RestoreDBInstanceFromS3Func(in1)
}

// RestoreDBInstanceFromS3Calls gets all the calls that were made to RestoreDBInstanceFromS3.
// Check the length with:
//     len(mockedrdsClient.RestoreDBInstanceFromS3Calls())
func (mock *rdsClientMock) RestoreDBInstanceFromS3Calls() []struct {
	In1 *rds.RestoreDBInstanceFromS3Input
} {
	var calls []struct {
		In1 *rds.RestoreDBInstanceFromS3Input
	}
	lockrdsClientMockRestoreDBInstanceFromS3.RLock()
	calls = mock.calls.RestoreDBInstanceFromS3
	lockrdsClientMockRestoreDBInstanceFromS3.RUnlock()
	return calls
}

// RestoreDBInstanceFromS3Request calls RestoreDBInstanceFromS3RequestFunc.
func (mock *rdsClientMock) RestoreDBInstanceFromS3Request(in1 *rds.RestoreDBInstanceFromS3Input) (*request.Request, *rds.RestoreDBInstanceFromS3Output) {
	if mock.RestoreDBInstanceFromS3RequestFunc == nil {
		panic("rdsClientMock.RestoreDBInstanceFromS3RequestFunc: method is nil but rdsClient.RestoreDBInstanceFromS3Request was just called")
	}
	callInfo := struct {
		In1 *rds.RestoreDBInstanceFromS3Input
	}{
		In1: in1,
	}
	lockrdsClientMockRestoreDBInstanceFromS3Request.Lock()
	mock.calls.RestoreDBInstanceFromS3Request = append(mock.calls.RestoreDBInstanceFromS3Request, callInfo)
	lockrdsClientMockRestoreDBInstanceFromS3Request.Unlock()
	return mock.RestoreDBInstanceFromS3RequestFunc(in1)
}

// RestoreDBInstanceFromS3RequestCalls gets all the calls that were made to RestoreDBInstanceFromS3Request.
// Check the length with:
//     len(mockedrdsClient.RestoreDBInstanceFromS3RequestCalls())
func (mock *rdsClientMock) RestoreDBInstanceFromS3RequestCalls() []struct {
	In1 *rds.RestoreDBInstanceFromS3Input
} {
	var calls []struct {
		In1 *rds.RestoreDBInstanceFromS3Input
	}
	lockrdsClientMockRestoreDBInstanceFromS3Request.RLock()
	calls = mock.calls.RestoreDBInstanceFromS3Request
	lockrdsClientMockRestoreDBInstanceFromS3Request.RUnlock()
	return calls
}

// RestoreDBInstanceFromS3WithContext calls RestoreDBInstanceFromS3WithContextFunc.
func (mock *rdsClientMock) RestoreDBInstanceFromS3WithContext(in1 context.Context, in2 *rds.RestoreDBInstanceFromS3Input, in3 ...request.Option) (*rds.RestoreDBInstanceFromS3Output, error) {
	if mock.RestoreDBInstanceFromS3WithContextFunc == nil {
		panic("rdsClientMock.RestoreDBInstanceFromS3WithContextFunc: method is nil but rdsClient.RestoreDBInstanceFromS3WithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.RestoreDBInstanceFromS3Input
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockRestoreDBInstanceFromS3WithContext.Lock()
	mock.calls.RestoreDBInstanceFromS3WithContext = append(mock.calls.RestoreDBInstanceFromS3WithContext, callInfo)
	lockrdsClientMockRestoreDBInstanceFromS3WithContext.Unlock()
	return mock.RestoreDBInstanceFromS3WithContextFunc(in1, in2, in3...)
}

// RestoreDBInstanceFromS3WithContextCalls gets all the calls that were made to RestoreDBInstanceFromS3WithContext.
// Check the length with:
//     len(mockedrdsClient.RestoreDBInstanceFromS3WithContextCalls())
func (mock *rdsClientMock) RestoreDBInstanceFromS3WithContextCalls() []struct {
	In1 context.Context
	In2 *rds.RestoreDBInstanceFromS3Input
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.RestoreDBInstanceFromS3Input
		In3 []request.Option
	}
	lockrdsClientMockRestoreDBInstanceFromS3WithContext.RLock()
	calls = mock.calls.RestoreDBInstanceFromS3WithContext
	lockrdsClientMockRestoreDBInstanceFromS3WithContext.RUnlock()
	return calls
}

// RestoreDBInstanceToPointInTime calls RestoreDBInstanceToPointInTimeFunc.
func (mock *rdsClientMock) RestoreDBInstanceToPointInTime(in1 *rds.RestoreDBInstanceToPointInTimeInput) (*rds.RestoreDBInstanceToPointInTimeOutput, error) {
	if mock.RestoreDBInstanceToPointInTimeFunc == nil {
		panic("rdsClientMock.RestoreDBInstanceToPointInTimeFunc: method is nil but rdsClient.RestoreDBInstanceToPointInTime was just called")
	}
	callInfo := struct {
		In1 *rds.RestoreDBInstanceToPointInTimeInput
	}{
		In1: in1,
	}
	lockrdsClientMockRestoreDBInstanceToPointInTime.Lock()
	mock.calls.RestoreDBInstanceToPointInTime = append(mock.calls.RestoreDBInstanceToPointInTime, callInfo)
	lockrdsClientMockRestoreDBInstanceToPointInTime.Unlock()
	return mock.RestoreDBInstanceToPointInTimeFunc(in1)
}

// RestoreDBInstanceToPointInTimeCalls gets all the calls that were made to RestoreDBInstanceToPointInTime.
// Check the length with:
//     len(mockedrdsClient.RestoreDBInstanceToPointInTimeCalls())
func (mock *rdsClientMock) RestoreDBInstanceToPointInTimeCalls() []struct {
	In1 *rds.RestoreDBInstanceToPointInTimeInput
} {
	var calls []struct {
		In1 *rds.RestoreDBInstanceToPointInTimeInput
	}
	lockrdsClientMockRestoreDBInstanceToPointInTime.RLock()
	calls = mock.calls.RestoreDBInstanceToPointInTime
	lockrdsClientMockRestoreDBInstanceToPointInTime.RUnlock()
	return calls
}

// RestoreDBInstanceToPointInTimeRequest calls RestoreDBInstanceToPointInTimeRequestFunc.
func (mock *rdsClientMock) RestoreDBInstanceToPointInTimeRequest(in1 *rds.RestoreDBInstanceToPointInTimeInput) (*request.Request, *rds.RestoreDBInstanceToPointInTimeOutput) {
	if mock.RestoreDBInstanceToPointInTimeRequestFunc == nil {
		panic("rdsClientMock.RestoreDBInstanceToPointInTimeRequestFunc: method is nil but rdsClient.RestoreDBInstanceToPointInTimeRequest was just called")
	}
	callInfo := struct {
		In1 *rds.RestoreDBInstanceToPointInTimeInput
	}{
		In1: in1,
	}
	lockrdsClientMockRestoreDBInstanceToPointInTimeRequest.Lock()
	mock.calls.RestoreDBInstanceToPointInTimeRequest = append(mock.calls.RestoreDBInstanceToPointInTimeRequest, callInfo)
	lockrdsClientMockRestoreDBInstanceToPointInTimeRequest.Unlock()
	return mock.RestoreDBInstanceToPointInTimeRequestFunc(in1)
}

// RestoreDBInstanceToPointInTimeRequestCalls gets all the calls that were made to RestoreDBInstanceToPointInTimeRequest.
// Check the length with:
//     len(mockedrdsClient.RestoreDBInstanceToPointInTimeRequestCalls())
func (mock *rdsClientMock) RestoreDBInstanceToPointInTimeRequestCalls() []struct {
	In1 *rds.RestoreDBInstanceToPointInTimeInput
} {
	var calls []struct {
		In1 *rds.RestoreDBInstanceToPointInTimeInput
	}
	lockrdsClientMockRestoreDBInstanceToPointInTimeRequest.RLock()
	calls = mock.calls.RestoreDBInstanceToPointInTimeRequest
	lockrdsClientMockRestoreDBInstanceToPointInTimeRequest.RUnlock()
	return calls
}

// RestoreDBInstanceToPointInTimeWithContext calls RestoreDBInstanceToPointInTimeWithContextFunc.
func (mock *rdsClientMock) RestoreDBInstanceToPointInTimeWithContext(in1 context.Context, in2 *rds.RestoreDBInstanceToPointInTimeInput, in3 ...request.Option) (*rds.RestoreDBInstanceToPointInTimeOutput, error) {
	if mock.RestoreDBInstanceToPointInTimeWithContextFunc == nil {
		panic("rdsClientMock.RestoreDBInstanceToPointInTimeWithContextFunc: method is nil but rdsClient.RestoreDBInstanceToPointInTimeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.RestoreDBInstanceToPointInTimeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockRestoreDBInstanceToPointInTimeWithContext.Lock()
	mock.calls.RestoreDBInstanceToPointInTimeWithContext = append(mock.calls.RestoreDBInstanceToPointInTimeWithContext, callInfo)
	lockrdsClientMockRestoreDBInstanceToPointInTimeWithContext.Unlock()
	return mock.RestoreDBInstanceToPointInTimeWithContextFunc(in1, in2, in3...)
}

// RestoreDBInstanceToPointInTimeWithContextCalls gets all the calls that were made to RestoreDBInstanceToPointInTimeWithContext.
// Check the length with:
//     len(mockedrdsClient.RestoreDBInstanceToPointInTimeWithContextCalls())
func (mock *rdsClientMock) RestoreDBInstanceToPointInTimeWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.RestoreDBInstanceToPointInTimeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.RestoreDBInstanceToPointInTimeInput
		In3 []request.Option
	}
	lockrdsClientMockRestoreDBInstanceToPointInTimeWithContext.RLock()
	calls = mock.calls.RestoreDBInstanceToPointInTimeWithContext
	lockrdsClientMockRestoreDBInstanceToPointInTimeWithContext.RUnlock()
	return calls
}

// RevokeDBSecurityGroupIngress calls RevokeDBSecurityGroupIngressFunc.
func (mock *rdsClientMock) RevokeDBSecurityGroupIngress(in1 *rds.RevokeDBSecurityGroupIngressInput) (*rds.RevokeDBSecurityGroupIngressOutput, error) {
	if mock.RevokeDBSecurityGroupIngressFunc == nil {
		panic("rdsClientMock.RevokeDBSecurityGroupIngressFunc: method is nil but rdsClient.RevokeDBSecurityGroupIngress was just called")
	}
	callInfo := struct {
		In1 *rds.RevokeDBSecurityGroupIngressInput
	}{
		In1: in1,
	}
	lockrdsClientMockRevokeDBSecurityGroupIngress.Lock()
	mock.calls.RevokeDBSecurityGroupIngress = append(mock.calls.RevokeDBSecurityGroupIngress, callInfo)
	lockrdsClientMockRevokeDBSecurityGroupIngress.Unlock()
	return mock.RevokeDBSecurityGroupIngressFunc(in1)
}

// RevokeDBSecurityGroupIngressCalls gets all the calls that were made to RevokeDBSecurityGroupIngress.
// Check the length with:
//     len(mockedrdsClient.RevokeDBSecurityGroupIngressCalls())
func (mock *rdsClientMock) RevokeDBSecurityGroupIngressCalls() []struct {
	In1 *rds.RevokeDBSecurityGroupIngressInput
} {
	var calls []struct {
		In1 *rds.RevokeDBSecurityGroupIngressInput
	}
	lockrdsClientMockRevokeDBSecurityGroupIngress.RLock()
	calls = mock.calls.RevokeDBSecurityGroupIngress
	lockrdsClientMockRevokeDBSecurityGroupIngress.RUnlock()
	return calls
}

// RevokeDBSecurityGroupIngressRequest calls RevokeDBSecurityGroupIngressRequestFunc.
func (mock *rdsClientMock) RevokeDBSecurityGroupIngressRequest(in1 *rds.RevokeDBSecurityGroupIngressInput) (*request.Request, *rds.RevokeDBSecurityGroupIngressOutput) {
	if mock.RevokeDBSecurityGroupIngressRequestFunc == nil {
		panic("rdsClientMock.RevokeDBSecurityGroupIngressRequestFunc: method is nil but rdsClient.RevokeDBSecurityGroupIngressRequest was just called")
	}
	callInfo := struct {
		In1 *rds.RevokeDBSecurityGroupIngressInput
	}{
		In1: in1,
	}
	lockrdsClientMockRevokeDBSecurityGroupIngressRequest.Lock()
	mock.calls.RevokeDBSecurityGroupIngressRequest = append(mock.calls.RevokeDBSecurityGroupIngressRequest, callInfo)
	lockrdsClientMockRevokeDBSecurityGroupIngressRequest.Unlock()
	return mock.RevokeDBSecurityGroupIngressRequestFunc(in1)
}

// RevokeDBSecurityGroupIngressRequestCalls gets all the calls that were made to RevokeDBSecurityGroupIngressRequest.
// Check the length with:
//     len(mockedrdsClient.RevokeDBSecurityGroupIngressRequestCalls())
func (mock *rdsClientMock) RevokeDBSecurityGroupIngressRequestCalls() []struct {
	In1 *rds.RevokeDBSecurityGroupIngressInput
} {
	var calls []struct {
		In1 *rds.RevokeDBSecurityGroupIngressInput
	}
	lockrdsClientMockRevokeDBSecurityGroupIngressRequest.RLock()
	calls = mock.calls.RevokeDBSecurityGroupIngressRequest
	lockrdsClientMockRevokeDBSecurityGroupIngressRequest.RUnlock()
	return calls
}

// RevokeDBSecurityGroupIngressWithContext calls RevokeDBSecurityGroupIngressWithContextFunc.
func (mock *rdsClientMock) RevokeDBSecurityGroupIngressWithContext(in1 context.Context, in2 *rds.RevokeDBSecurityGroupIngressInput, in3 ...request.Option) (*rds.RevokeDBSecurityGroupIngressOutput, error) {
	if mock.RevokeDBSecurityGroupIngressWithContextFunc == nil {
		panic("rdsClientMock.RevokeDBSecurityGroupIngressWithContextFunc: method is nil but rdsClient.RevokeDBSecurityGroupIngressWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.RevokeDBSecurityGroupIngressInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockRevokeDBSecurityGroupIngressWithContext.Lock()
	mock.calls.RevokeDBSecurityGroupIngressWithContext = append(mock.calls.RevokeDBSecurityGroupIngressWithContext, callInfo)
	lockrdsClientMockRevokeDBSecurityGroupIngressWithContext.Unlock()
	return mock.RevokeDBSecurityGroupIngressWithContextFunc(in1, in2, in3...)
}

// RevokeDBSecurityGroupIngressWithContextCalls gets all the calls that were made to RevokeDBSecurityGroupIngressWithContext.
// Check the length with:
//     len(mockedrdsClient.RevokeDBSecurityGroupIngressWithContextCalls())
func (mock *rdsClientMock) RevokeDBSecurityGroupIngressWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.RevokeDBSecurityGroupIngressInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.RevokeDBSecurityGroupIngressInput
		In3 []request.Option
	}
	lockrdsClientMockRevokeDBSecurityGroupIngressWithContext.RLock()
	calls = mock.calls.RevokeDBSecurityGroupIngressWithContext
	lockrdsClientMockRevokeDBSecurityGroupIngressWithContext.RUnlock()
	return calls
}

// StartActivityStream calls StartActivityStreamFunc.
func (mock *rdsClientMock) StartActivityStream(in1 *rds.StartActivityStreamInput) (*rds.StartActivityStreamOutput, error) {
	if mock.StartActivityStreamFunc == nil {
		panic("rdsClientMock.StartActivityStreamFunc: method is nil but rdsClient.StartActivityStream was just called")
	}
	callInfo := struct {
		In1 *rds.StartActivityStreamInput
	}{
		In1: in1,
	}
	lockrdsClientMockStartActivityStream.Lock()
	mock.calls.StartActivityStream = append(mock.calls.StartActivityStream, callInfo)
	lockrdsClientMockStartActivityStream.Unlock()
	return mock.StartActivityStreamFunc(in1)
}

// StartActivityStreamCalls gets all the calls that were made to StartActivityStream.
// Check the length with:
//     len(mockedrdsClient.StartActivityStreamCalls())
func (mock *rdsClientMock) StartActivityStreamCalls() []struct {
	In1 *rds.StartActivityStreamInput
} {
	var calls []struct {
		In1 *rds.StartActivityStreamInput
	}
	lockrdsClientMockStartActivityStream.RLock()
	calls = mock.calls.StartActivityStream
	lockrdsClientMockStartActivityStream.RUnlock()
	return calls
}

// StartActivityStreamRequest calls StartActivityStreamRequestFunc.
func (mock *rdsClientMock) StartActivityStreamRequest(in1 *rds.StartActivityStreamInput) (*request.Request, *rds.StartActivityStreamOutput) {
	if mock.StartActivityStreamRequestFunc == nil {
		panic("rdsClientMock.StartActivityStreamRequestFunc: method is nil but rdsClient.StartActivityStreamRequest was just called")
	}
	callInfo := struct {
		In1 *rds.StartActivityStreamInput
	}{
		In1: in1,
	}
	lockrdsClientMockStartActivityStreamRequest.Lock()
	mock.calls.StartActivityStreamRequest = append(mock.calls.StartActivityStreamRequest, callInfo)
	lockrdsClientMockStartActivityStreamRequest.Unlock()
	return mock.StartActivityStreamRequestFunc(in1)
}

// StartActivityStreamRequestCalls gets all the calls that were made to StartActivityStreamRequest.
// Check the length with:
//     len(mockedrdsClient.StartActivityStreamRequestCalls())
func (mock *rdsClientMock) StartActivityStreamRequestCalls() []struct {
	In1 *rds.StartActivityStreamInput
} {
	var calls []struct {
		In1 *rds.StartActivityStreamInput
	}
	lockrdsClientMockStartActivityStreamRequest.RLock()
	calls = mock.calls.StartActivityStreamRequest
	lockrdsClientMockStartActivityStreamRequest.RUnlock()
	return calls
}

// StartActivityStreamWithContext calls StartActivityStreamWithContextFunc.
func (mock *rdsClientMock) StartActivityStreamWithContext(in1 context.Context, in2 *rds.StartActivityStreamInput, in3 ...request.Option) (*rds.StartActivityStreamOutput, error) {
	if mock.StartActivityStreamWithContextFunc == nil {
		panic("rdsClientMock.StartActivityStreamWithContextFunc: method is nil but rdsClient.StartActivityStreamWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.StartActivityStreamInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockStartActivityStreamWithContext.Lock()
	mock.calls.StartActivityStreamWithContext = append(mock.calls.StartActivityStreamWithContext, callInfo)
	lockrdsClientMockStartActivityStreamWithContext.Unlock()
	return mock.StartActivityStreamWithContextFunc(in1, in2, in3...)
}

// StartActivityStreamWithContextCalls gets all the calls that were made to StartActivityStreamWithContext.
// Check the length with:
//     len(mockedrdsClient.StartActivityStreamWithContextCalls())
func (mock *rdsClientMock) StartActivityStreamWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.StartActivityStreamInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.StartActivityStreamInput
		In3 []request.Option
	}
	lockrdsClientMockStartActivityStreamWithContext.RLock()
	calls = mock.calls.StartActivityStreamWithContext
	lockrdsClientMockStartActivityStreamWithContext.RUnlock()
	return calls
}

// StartDBCluster calls StartDBClusterFunc.
func (mock *rdsClientMock) StartDBCluster(in1 *rds.StartDBClusterInput) (*rds.StartDBClusterOutput, error) {
	if mock.StartDBClusterFunc == nil {
		panic("rdsClientMock.StartDBClusterFunc: method is nil but rdsClient.StartDBCluster was just called")
	}
	callInfo := struct {
		In1 *rds.StartDBClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockStartDBCluster.Lock()
	mock.calls.StartDBCluster = append(mock.calls.StartDBCluster, callInfo)
	lockrdsClientMockStartDBCluster.Unlock()
	return mock.StartDBClusterFunc(in1)
}

// StartDBClusterCalls gets all the calls that were made to StartDBCluster.
// Check the length with:
//     len(mockedrdsClient.StartDBClusterCalls())
func (mock *rdsClientMock) StartDBClusterCalls() []struct {
	In1 *rds.StartDBClusterInput
} {
	var calls []struct {
		In1 *rds.StartDBClusterInput
	}
	lockrdsClientMockStartDBCluster.RLock()
	calls = mock.calls.StartDBCluster
	lockrdsClientMockStartDBCluster.RUnlock()
	return calls
}

// StartDBClusterRequest calls StartDBClusterRequestFunc.
func (mock *rdsClientMock) StartDBClusterRequest(in1 *rds.StartDBClusterInput) (*request.Request, *rds.StartDBClusterOutput) {
	if mock.StartDBClusterRequestFunc == nil {
		panic("rdsClientMock.StartDBClusterRequestFunc: method is nil but rdsClient.StartDBClusterRequest was just called")
	}
	callInfo := struct {
		In1 *rds.StartDBClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockStartDBClusterRequest.Lock()
	mock.calls.StartDBClusterRequest = append(mock.calls.StartDBClusterRequest, callInfo)
	lockrdsClientMockStartDBClusterRequest.Unlock()
	return mock.StartDBClusterRequestFunc(in1)
}

// StartDBClusterRequestCalls gets all the calls that were made to StartDBClusterRequest.
// Check the length with:
//     len(mockedrdsClient.StartDBClusterRequestCalls())
func (mock *rdsClientMock) StartDBClusterRequestCalls() []struct {
	In1 *rds.StartDBClusterInput
} {
	var calls []struct {
		In1 *rds.StartDBClusterInput
	}
	lockrdsClientMockStartDBClusterRequest.RLock()
	calls = mock.calls.StartDBClusterRequest
	lockrdsClientMockStartDBClusterRequest.RUnlock()
	return calls
}

// StartDBClusterWithContext calls StartDBClusterWithContextFunc.
func (mock *rdsClientMock) StartDBClusterWithContext(in1 context.Context, in2 *rds.StartDBClusterInput, in3 ...request.Option) (*rds.StartDBClusterOutput, error) {
	if mock.StartDBClusterWithContextFunc == nil {
		panic("rdsClientMock.StartDBClusterWithContextFunc: method is nil but rdsClient.StartDBClusterWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.StartDBClusterInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockStartDBClusterWithContext.Lock()
	mock.calls.StartDBClusterWithContext = append(mock.calls.StartDBClusterWithContext, callInfo)
	lockrdsClientMockStartDBClusterWithContext.Unlock()
	return mock.StartDBClusterWithContextFunc(in1, in2, in3...)
}

// StartDBClusterWithContextCalls gets all the calls that were made to StartDBClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.StartDBClusterWithContextCalls())
func (mock *rdsClientMock) StartDBClusterWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.StartDBClusterInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.StartDBClusterInput
		In3 []request.Option
	}
	lockrdsClientMockStartDBClusterWithContext.RLock()
	calls = mock.calls.StartDBClusterWithContext
	lockrdsClientMockStartDBClusterWithContext.RUnlock()
	return calls
}

// StartDBInstance calls StartDBInstanceFunc.
func (mock *rdsClientMock) StartDBInstance(in1 *rds.StartDBInstanceInput) (*rds.StartDBInstanceOutput, error) {
	if mock.StartDBInstanceFunc == nil {
		panic("rdsClientMock.StartDBInstanceFunc: method is nil but rdsClient.StartDBInstance was just called")
	}
	callInfo := struct {
		In1 *rds.StartDBInstanceInput
	}{
		In1: in1,
	}
	lockrdsClientMockStartDBInstance.Lock()
	mock.calls.StartDBInstance = append(mock.calls.StartDBInstance, callInfo)
	lockrdsClientMockStartDBInstance.Unlock()
	return mock.StartDBInstanceFunc(in1)
}

// StartDBInstanceCalls gets all the calls that were made to StartDBInstance.
// Check the length with:
//     len(mockedrdsClient.StartDBInstanceCalls())
func (mock *rdsClientMock) StartDBInstanceCalls() []struct {
	In1 *rds.StartDBInstanceInput
} {
	var calls []struct {
		In1 *rds.StartDBInstanceInput
	}
	lockrdsClientMockStartDBInstance.RLock()
	calls = mock.calls.StartDBInstance
	lockrdsClientMockStartDBInstance.RUnlock()
	return calls
}

// StartDBInstanceRequest calls StartDBInstanceRequestFunc.
func (mock *rdsClientMock) StartDBInstanceRequest(in1 *rds.StartDBInstanceInput) (*request.Request, *rds.StartDBInstanceOutput) {
	if mock.StartDBInstanceRequestFunc == nil {
		panic("rdsClientMock.StartDBInstanceRequestFunc: method is nil but rdsClient.StartDBInstanceRequest was just called")
	}
	callInfo := struct {
		In1 *rds.StartDBInstanceInput
	}{
		In1: in1,
	}
	lockrdsClientMockStartDBInstanceRequest.Lock()
	mock.calls.StartDBInstanceRequest = append(mock.calls.StartDBInstanceRequest, callInfo)
	lockrdsClientMockStartDBInstanceRequest.Unlock()
	return mock.StartDBInstanceRequestFunc(in1)
}

// StartDBInstanceRequestCalls gets all the calls that were made to StartDBInstanceRequest.
// Check the length with:
//     len(mockedrdsClient.StartDBInstanceRequestCalls())
func (mock *rdsClientMock) StartDBInstanceRequestCalls() []struct {
	In1 *rds.StartDBInstanceInput
} {
	var calls []struct {
		In1 *rds.StartDBInstanceInput
	}
	lockrdsClientMockStartDBInstanceRequest.RLock()
	calls = mock.calls.StartDBInstanceRequest
	lockrdsClientMockStartDBInstanceRequest.RUnlock()
	return calls
}

// StartDBInstanceWithContext calls StartDBInstanceWithContextFunc.
func (mock *rdsClientMock) StartDBInstanceWithContext(in1 context.Context, in2 *rds.StartDBInstanceInput, in3 ...request.Option) (*rds.StartDBInstanceOutput, error) {
	if mock.StartDBInstanceWithContextFunc == nil {
		panic("rdsClientMock.StartDBInstanceWithContextFunc: method is nil but rdsClient.StartDBInstanceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.StartDBInstanceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockStartDBInstanceWithContext.Lock()
	mock.calls.StartDBInstanceWithContext = append(mock.calls.StartDBInstanceWithContext, callInfo)
	lockrdsClientMockStartDBInstanceWithContext.Unlock()
	return mock.StartDBInstanceWithContextFunc(in1, in2, in3...)
}

// StartDBInstanceWithContextCalls gets all the calls that were made to StartDBInstanceWithContext.
// Check the length with:
//     len(mockedrdsClient.StartDBInstanceWithContextCalls())
func (mock *rdsClientMock) StartDBInstanceWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.StartDBInstanceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.StartDBInstanceInput
		In3 []request.Option
	}
	lockrdsClientMockStartDBInstanceWithContext.RLock()
	calls = mock.calls.StartDBInstanceWithContext
	lockrdsClientMockStartDBInstanceWithContext.RUnlock()
	return calls
}

// StartExportTask calls StartExportTaskFunc.
func (mock *rdsClientMock) StartExportTask(in1 *rds.StartExportTaskInput) (*rds.StartExportTaskOutput, error) {
	if mock.StartExportTaskFunc == nil {
		panic("rdsClientMock.StartExportTaskFunc: method is nil but rdsClient.StartExportTask was just called")
	}
	callInfo := struct {
		In1 *rds.StartExportTaskInput
	}{
		In1: in1,
	}
	lockrdsClientMockStartExportTask.Lock()
	mock.calls.StartExportTask = append(mock.calls.StartExportTask, callInfo)
	lockrdsClientMockStartExportTask.Unlock()
	return mock.StartExportTaskFunc(in1)
}

// StartExportTaskCalls gets all the calls that were made to StartExportTask.
// Check the length with:
//     len(mockedrdsClient.StartExportTaskCalls())
func (mock *rdsClientMock) StartExportTaskCalls() []struct {
	In1 *rds.StartExportTaskInput
} {
	var calls []struct {
		In1 *rds.StartExportTaskInput
	}
	lockrdsClientMockStartExportTask.RLock()
	calls = mock.calls.StartExportTask
	lockrdsClientMockStartExportTask.RUnlock()
	return calls
}

// StartExportTaskRequest calls StartExportTaskRequestFunc.
func (mock *rdsClientMock) StartExportTaskRequest(in1 *rds.StartExportTaskInput) (*request.Request, *rds.StartExportTaskOutput) {
	if mock.StartExportTaskRequestFunc == nil {
		panic("rdsClientMock.StartExportTaskRequestFunc: method is nil but rdsClient.StartExportTaskRequest was just called")
	}
	callInfo := struct {
		In1 *rds.StartExportTaskInput
	}{
		In1: in1,
	}
	lockrdsClientMockStartExportTaskRequest.Lock()
	mock.calls.StartExportTaskRequest = append(mock.calls.StartExportTaskRequest, callInfo)
	lockrdsClientMockStartExportTaskRequest.Unlock()
	return mock.StartExportTaskRequestFunc(in1)
}

// StartExportTaskRequestCalls gets all the calls that were made to StartExportTaskRequest.
// Check the length with:
//     len(mockedrdsClient.StartExportTaskRequestCalls())
func (mock *rdsClientMock) StartExportTaskRequestCalls() []struct {
	In1 *rds.StartExportTaskInput
} {
	var calls []struct {
		In1 *rds.StartExportTaskInput
	}
	lockrdsClientMockStartExportTaskRequest.RLock()
	calls = mock.calls.StartExportTaskRequest
	lockrdsClientMockStartExportTaskRequest.RUnlock()
	return calls
}

// StartExportTaskWithContext calls StartExportTaskWithContextFunc.
func (mock *rdsClientMock) StartExportTaskWithContext(in1 context.Context, in2 *rds.StartExportTaskInput, in3 ...request.Option) (*rds.StartExportTaskOutput, error) {
	if mock.StartExportTaskWithContextFunc == nil {
		panic("rdsClientMock.StartExportTaskWithContextFunc: method is nil but rdsClient.StartExportTaskWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.StartExportTaskInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockStartExportTaskWithContext.Lock()
	mock.calls.StartExportTaskWithContext = append(mock.calls.StartExportTaskWithContext, callInfo)
	lockrdsClientMockStartExportTaskWithContext.Unlock()
	return mock.StartExportTaskWithContextFunc(in1, in2, in3...)
}

// StartExportTaskWithContextCalls gets all the calls that were made to StartExportTaskWithContext.
// Check the length with:
//     len(mockedrdsClient.StartExportTaskWithContextCalls())
func (mock *rdsClientMock) StartExportTaskWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.StartExportTaskInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.StartExportTaskInput
		In3 []request.Option
	}
	lockrdsClientMockStartExportTaskWithContext.RLock()
	calls = mock.calls.StartExportTaskWithContext
	lockrdsClientMockStartExportTaskWithContext.RUnlock()
	return calls
}

// StopActivityStream calls StopActivityStreamFunc.
func (mock *rdsClientMock) StopActivityStream(in1 *rds.StopActivityStreamInput) (*rds.StopActivityStreamOutput, error) {
	if mock.StopActivityStreamFunc == nil {
		panic("rdsClientMock.StopActivityStreamFunc: method is nil but rdsClient.StopActivityStream was just called")
	}
	callInfo := struct {
		In1 *rds.StopActivityStreamInput
	}{
		In1: in1,
	}
	lockrdsClientMockStopActivityStream.Lock()
	mock.calls.StopActivityStream = append(mock.calls.StopActivityStream, callInfo)
	lockrdsClientMockStopActivityStream.Unlock()
	return mock.StopActivityStreamFunc(in1)
}

// StopActivityStreamCalls gets all the calls that were made to StopActivityStream.
// Check the length with:
//     len(mockedrdsClient.StopActivityStreamCalls())
func (mock *rdsClientMock) StopActivityStreamCalls() []struct {
	In1 *rds.StopActivityStreamInput
} {
	var calls []struct {
		In1 *rds.StopActivityStreamInput
	}
	lockrdsClientMockStopActivityStream.RLock()
	calls = mock.calls.StopActivityStream
	lockrdsClientMockStopActivityStream.RUnlock()
	return calls
}

// StopActivityStreamRequest calls StopActivityStreamRequestFunc.
func (mock *rdsClientMock) StopActivityStreamRequest(in1 *rds.StopActivityStreamInput) (*request.Request, *rds.StopActivityStreamOutput) {
	if mock.StopActivityStreamRequestFunc == nil {
		panic("rdsClientMock.StopActivityStreamRequestFunc: method is nil but rdsClient.StopActivityStreamRequest was just called")
	}
	callInfo := struct {
		In1 *rds.StopActivityStreamInput
	}{
		In1: in1,
	}
	lockrdsClientMockStopActivityStreamRequest.Lock()
	mock.calls.StopActivityStreamRequest = append(mock.calls.StopActivityStreamRequest, callInfo)
	lockrdsClientMockStopActivityStreamRequest.Unlock()
	return mock.StopActivityStreamRequestFunc(in1)
}

// StopActivityStreamRequestCalls gets all the calls that were made to StopActivityStreamRequest.
// Check the length with:
//     len(mockedrdsClient.StopActivityStreamRequestCalls())
func (mock *rdsClientMock) StopActivityStreamRequestCalls() []struct {
	In1 *rds.StopActivityStreamInput
} {
	var calls []struct {
		In1 *rds.StopActivityStreamInput
	}
	lockrdsClientMockStopActivityStreamRequest.RLock()
	calls = mock.calls.StopActivityStreamRequest
	lockrdsClientMockStopActivityStreamRequest.RUnlock()
	return calls
}

// StopActivityStreamWithContext calls StopActivityStreamWithContextFunc.
func (mock *rdsClientMock) StopActivityStreamWithContext(in1 context.Context, in2 *rds.StopActivityStreamInput, in3 ...request.Option) (*rds.StopActivityStreamOutput, error) {
	if mock.StopActivityStreamWithContextFunc == nil {
		panic("rdsClientMock.StopActivityStreamWithContextFunc: method is nil but rdsClient.StopActivityStreamWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.StopActivityStreamInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockStopActivityStreamWithContext.Lock()
	mock.calls.StopActivityStreamWithContext = append(mock.calls.StopActivityStreamWithContext, callInfo)
	lockrdsClientMockStopActivityStreamWithContext.Unlock()
	return mock.StopActivityStreamWithContextFunc(in1, in2, in3...)
}

// StopActivityStreamWithContextCalls gets all the calls that were made to StopActivityStreamWithContext.
// Check the length with:
//     len(mockedrdsClient.StopActivityStreamWithContextCalls())
func (mock *rdsClientMock) StopActivityStreamWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.StopActivityStreamInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.StopActivityStreamInput
		In3 []request.Option
	}
	lockrdsClientMockStopActivityStreamWithContext.RLock()
	calls = mock.calls.StopActivityStreamWithContext
	lockrdsClientMockStopActivityStreamWithContext.RUnlock()
	return calls
}

// StopDBCluster calls StopDBClusterFunc.
func (mock *rdsClientMock) StopDBCluster(in1 *rds.StopDBClusterInput) (*rds.StopDBClusterOutput, error) {
	if mock.StopDBClusterFunc == nil {
		panic("rdsClientMock.StopDBClusterFunc: method is nil but rdsClient.StopDBCluster was just called")
	}
	callInfo := struct {
		In1 *rds.StopDBClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockStopDBCluster.Lock()
	mock.calls.StopDBCluster = append(mock.calls.StopDBCluster, callInfo)
	lockrdsClientMockStopDBCluster.Unlock()
	return mock.StopDBClusterFunc(in1)
}

// StopDBClusterCalls gets all the calls that were made to StopDBCluster.
// Check the length with:
//     len(mockedrdsClient.StopDBClusterCalls())
func (mock *rdsClientMock) StopDBClusterCalls() []struct {
	In1 *rds.StopDBClusterInput
} {
	var calls []struct {
		In1 *rds.StopDBClusterInput
	}
	lockrdsClientMockStopDBCluster.RLock()
	calls = mock.calls.StopDBCluster
	lockrdsClientMockStopDBCluster.RUnlock()
	return calls
}

// StopDBClusterRequest calls StopDBClusterRequestFunc.
func (mock *rdsClientMock) StopDBClusterRequest(in1 *rds.StopDBClusterInput) (*request.Request, *rds.StopDBClusterOutput) {
	if mock.StopDBClusterRequestFunc == nil {
		panic("rdsClientMock.StopDBClusterRequestFunc: method is nil but rdsClient.StopDBClusterRequest was just called")
	}
	callInfo := struct {
		In1 *rds.StopDBClusterInput
	}{
		In1: in1,
	}
	lockrdsClientMockStopDBClusterRequest.Lock()
	mock.calls.StopDBClusterRequest = append(mock.calls.StopDBClusterRequest, callInfo)
	lockrdsClientMockStopDBClusterRequest.Unlock()
	return mock.StopDBClusterRequestFunc(in1)
}

// StopDBClusterRequestCalls gets all the calls that were made to StopDBClusterRequest.
// Check the length with:
//     len(mockedrdsClient.StopDBClusterRequestCalls())
func (mock *rdsClientMock) StopDBClusterRequestCalls() []struct {
	In1 *rds.StopDBClusterInput
} {
	var calls []struct {
		In1 *rds.StopDBClusterInput
	}
	lockrdsClientMockStopDBClusterRequest.RLock()
	calls = mock.calls.StopDBClusterRequest
	lockrdsClientMockStopDBClusterRequest.RUnlock()
	return calls
}

// StopDBClusterWithContext calls StopDBClusterWithContextFunc.
func (mock *rdsClientMock) StopDBClusterWithContext(in1 context.Context, in2 *rds.StopDBClusterInput, in3 ...request.Option) (*rds.StopDBClusterOutput, error) {
	if mock.StopDBClusterWithContextFunc == nil {
		panic("rdsClientMock.StopDBClusterWithContextFunc: method is nil but rdsClient.StopDBClusterWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.StopDBClusterInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockStopDBClusterWithContext.Lock()
	mock.calls.StopDBClusterWithContext = append(mock.calls.StopDBClusterWithContext, callInfo)
	lockrdsClientMockStopDBClusterWithContext.Unlock()
	return mock.StopDBClusterWithContextFunc(in1, in2, in3...)
}

// StopDBClusterWithContextCalls gets all the calls that were made to StopDBClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.StopDBClusterWithContextCalls())
func (mock *rdsClientMock) StopDBClusterWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.StopDBClusterInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.StopDBClusterInput
		In3 []request.Option
	}
	lockrdsClientMockStopDBClusterWithContext.RLock()
	calls = mock.calls.StopDBClusterWithContext
	lockrdsClientMockStopDBClusterWithContext.RUnlock()
	return calls
}

// StopDBInstance calls StopDBInstanceFunc.
func (mock *rdsClientMock) StopDBInstance(in1 *rds.StopDBInstanceInput) (*rds.StopDBInstanceOutput, error) {
	if mock.StopDBInstanceFunc == nil {
		panic("rdsClientMock.StopDBInstanceFunc: method is nil but rdsClient.StopDBInstance was just called")
	}
	callInfo := struct {
		In1 *rds.StopDBInstanceInput
	}{
		In1: in1,
	}
	lockrdsClientMockStopDBInstance.Lock()
	mock.calls.StopDBInstance = append(mock.calls.StopDBInstance, callInfo)
	lockrdsClientMockStopDBInstance.Unlock()
	return mock.StopDBInstanceFunc(in1)
}

// StopDBInstanceCalls gets all the calls that were made to StopDBInstance.
// Check the length with:
//     len(mockedrdsClient.StopDBInstanceCalls())
func (mock *rdsClientMock) StopDBInstanceCalls() []struct {
	In1 *rds.StopDBInstanceInput
} {
	var calls []struct {
		In1 *rds.StopDBInstanceInput
	}
	lockrdsClientMockStopDBInstance.RLock()
	calls = mock.calls.StopDBInstance
	lockrdsClientMockStopDBInstance.RUnlock()
	return calls
}

// StopDBInstanceRequest calls StopDBInstanceRequestFunc.
func (mock *rdsClientMock) StopDBInstanceRequest(in1 *rds.StopDBInstanceInput) (*request.Request, *rds.StopDBInstanceOutput) {
	if mock.StopDBInstanceRequestFunc == nil {
		panic("rdsClientMock.StopDBInstanceRequestFunc: method is nil but rdsClient.StopDBInstanceRequest was just called")
	}
	callInfo := struct {
		In1 *rds.StopDBInstanceInput
	}{
		In1: in1,
	}
	lockrdsClientMockStopDBInstanceRequest.Lock()
	mock.calls.StopDBInstanceRequest = append(mock.calls.StopDBInstanceRequest, callInfo)
	lockrdsClientMockStopDBInstanceRequest.Unlock()
	return mock.StopDBInstanceRequestFunc(in1)
}

// StopDBInstanceRequestCalls gets all the calls that were made to StopDBInstanceRequest.
// Check the length with:
//     len(mockedrdsClient.StopDBInstanceRequestCalls())
func (mock *rdsClientMock) StopDBInstanceRequestCalls() []struct {
	In1 *rds.StopDBInstanceInput
} {
	var calls []struct {
		In1 *rds.StopDBInstanceInput
	}
	lockrdsClientMockStopDBInstanceRequest.RLock()
	calls = mock.calls.StopDBInstanceRequest
	lockrdsClientMockStopDBInstanceRequest.RUnlock()
	return calls
}

// StopDBInstanceWithContext calls StopDBInstanceWithContextFunc.
func (mock *rdsClientMock) StopDBInstanceWithContext(in1 context.Context, in2 *rds.StopDBInstanceInput, in3 ...request.Option) (*rds.StopDBInstanceOutput, error) {
	if mock.StopDBInstanceWithContextFunc == nil {
		panic("rdsClientMock.StopDBInstanceWithContextFunc: method is nil but rdsClient.StopDBInstanceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.StopDBInstanceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockStopDBInstanceWithContext.Lock()
	mock.calls.StopDBInstanceWithContext = append(mock.calls.StopDBInstanceWithContext, callInfo)
	lockrdsClientMockStopDBInstanceWithContext.Unlock()
	return mock.StopDBInstanceWithContextFunc(in1, in2, in3...)
}

// StopDBInstanceWithContextCalls gets all the calls that were made to StopDBInstanceWithContext.
// Check the length with:
//     len(mockedrdsClient.StopDBInstanceWithContextCalls())
func (mock *rdsClientMock) StopDBInstanceWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.StopDBInstanceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.StopDBInstanceInput
		In3 []request.Option
	}
	lockrdsClientMockStopDBInstanceWithContext.RLock()
	calls = mock.calls.StopDBInstanceWithContext
	lockrdsClientMockStopDBInstanceWithContext.RUnlock()
	return calls
}

// WaitUntilDBClusterSnapshotAvailable calls WaitUntilDBClusterSnapshotAvailableFunc.
func (mock *rdsClientMock) WaitUntilDBClusterSnapshotAvailable(in1 *rds.DescribeDBClusterSnapshotsInput) error {
	if mock.WaitUntilDBClusterSnapshotAvailableFunc == nil {
		panic("rdsClientMock.WaitUntilDBClusterSnapshotAvailableFunc: method is nil but rdsClient.WaitUntilDBClusterSnapshotAvailable was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBClusterSnapshotsInput
	}{
		In1: in1,
	}
	lockrdsClientMockWaitUntilDBClusterSnapshotAvailable.Lock()
	mock.calls.WaitUntilDBClusterSnapshotAvailable = append(mock.calls.WaitUntilDBClusterSnapshotAvailable, callInfo)
	lockrdsClientMockWaitUntilDBClusterSnapshotAvailable.Unlock()
	return mock.WaitUntilDBClusterSnapshotAvailableFunc(in1)
}

// WaitUntilDBClusterSnapshotAvailableCalls gets all the calls that were made to WaitUntilDBClusterSnapshotAvailable.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBClusterSnapshotAvailableCalls())
func (mock *rdsClientMock) WaitUntilDBClusterSnapshotAvailableCalls() []struct {
	In1 *rds.DescribeDBClusterSnapshotsInput
} {
	var calls []struct {
		In1 *rds.DescribeDBClusterSnapshotsInput
	}
	lockrdsClientMockWaitUntilDBClusterSnapshotAvailable.RLock()
	calls = mock.calls.WaitUntilDBClusterSnapshotAvailable
	lockrdsClientMockWaitUntilDBClusterSnapshotAvailable.RUnlock()
	return calls
}

// WaitUntilDBClusterSnapshotAvailableWithContext calls WaitUntilDBClusterSnapshotAvailableWithContextFunc.
func (mock *rdsClientMock) WaitUntilDBClusterSnapshotAvailableWithContext(in1 context.Context, in2 *rds.DescribeDBClusterSnapshotsInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilDBClusterSnapshotAvailableWithContextFunc == nil {
		panic("rdsClientMock.WaitUntilDBClusterSnapshotAvailableWithContextFunc: method is nil but rdsClient.WaitUntilDBClusterSnapshotAvailableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBClusterSnapshotsInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockWaitUntilDBClusterSnapshotAvailableWithContext.Lock()
	mock.calls.WaitUntilDBClusterSnapshotAvailableWithContext = append(mock.calls.WaitUntilDBClusterSnapshotAvailableWithContext, callInfo)
	lockrdsClientMockWaitUntilDBClusterSnapshotAvailableWithContext.Unlock()
	return mock.WaitUntilDBClusterSnapshotAvailableWithContextFunc(in1, in2, in3...)
}

// WaitUntilDBClusterSnapshotAvailableWithContextCalls gets all the calls that were made to WaitUntilDBClusterSnapshotAvailableWithContext.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBClusterSnapshotAvailableWithContextCalls())
func (mock *rdsClientMock) WaitUntilDBClusterSnapshotAvailableWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBClusterSnapshotsInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBClusterSnapshotsInput
		In3 []request.WaiterOption
	}
	lockrdsClientMockWaitUntilDBClusterSnapshotAvailableWithContext.RLock()
	calls = mock.calls.WaitUntilDBClusterSnapshotAvailableWithContext
	lockrdsClientMockWaitUntilDBClusterSnapshotAvailableWithContext.RUnlock()
	return calls
}

// WaitUntilDBClusterSnapshotDeleted calls WaitUntilDBClusterSnapshotDeletedFunc.
func (mock *rdsClientMock) WaitUntilDBClusterSnapshotDeleted(in1 *rds.DescribeDBClusterSnapshotsInput) error {
	if mock.WaitUntilDBClusterSnapshotDeletedFunc == nil {
		panic("rdsClientMock.WaitUntilDBClusterSnapshotDeletedFunc: method is nil but rdsClient.WaitUntilDBClusterSnapshotDeleted was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBClusterSnapshotsInput
	}{
		In1: in1,
	}
	lockrdsClientMockWaitUntilDBClusterSnapshotDeleted.Lock()
	mock.calls.WaitUntilDBClusterSnapshotDeleted = append(mock.calls.WaitUntilDBClusterSnapshotDeleted, callInfo)
	lockrdsClientMockWaitUntilDBClusterSnapshotDeleted.Unlock()
	return mock.WaitUntilDBClusterSnapshotDeletedFunc(in1)
}

// WaitUntilDBClusterSnapshotDeletedCalls gets all the calls that were made to WaitUntilDBClusterSnapshotDeleted.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBClusterSnapshotDeletedCalls())
func (mock *rdsClientMock) WaitUntilDBClusterSnapshotDeletedCalls() []struct {
	In1 *rds.DescribeDBClusterSnapshotsInput
} {
	var calls []struct {
		In1 *rds.DescribeDBClusterSnapshotsInput
	}
	lockrdsClientMockWaitUntilDBClusterSnapshotDeleted.RLock()
	calls = mock.calls.WaitUntilDBClusterSnapshotDeleted
	lockrdsClientMockWaitUntilDBClusterSnapshotDeleted.RUnlock()
	return calls
}

// WaitUntilDBClusterSnapshotDeletedWithContext calls WaitUntilDBClusterSnapshotDeletedWithContextFunc.
func (mock *rdsClientMock) WaitUntilDBClusterSnapshotDeletedWithContext(in1 context.Context, in2 *rds.DescribeDBClusterSnapshotsInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilDBClusterSnapshotDeletedWithContextFunc == nil {
		panic("rdsClientMock.WaitUntilDBClusterSnapshotDeletedWithContextFunc: method is nil but rdsClient.WaitUntilDBClusterSnapshotDeletedWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBClusterSnapshotsInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockWaitUntilDBClusterSnapshotDeletedWithContext.Lock()
	mock.calls.WaitUntilDBClusterSnapshotDeletedWithContext = append(mock.calls.WaitUntilDBClusterSnapshotDeletedWithContext, callInfo)
	lockrdsClientMockWaitUntilDBClusterSnapshotDeletedWithContext.Unlock()
	return mock.WaitUntilDBClusterSnapshotDeletedWithContextFunc(in1, in2, in3...)
}

// WaitUntilDBClusterSnapshotDeletedWithContextCalls gets all the calls that were made to WaitUntilDBClusterSnapshotDeletedWithContext.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBClusterSnapshotDeletedWithContextCalls())
func (mock *rdsClientMock) WaitUntilDBClusterSnapshotDeletedWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBClusterSnapshotsInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBClusterSnapshotsInput
		In3 []request.WaiterOption
	}
	lockrdsClientMockWaitUntilDBClusterSnapshotDeletedWithContext.RLock()
	calls = mock.calls.WaitUntilDBClusterSnapshotDeletedWithContext
	lockrdsClientMockWaitUntilDBClusterSnapshotDeletedWithContext.RUnlock()
	return calls
}

// WaitUntilDBInstanceAvailable calls WaitUntilDBInstanceAvailableFunc.
func (mock *rdsClientMock) WaitUntilDBInstanceAvailable(in1 *rds.DescribeDBInstancesInput) error {
	if mock.WaitUntilDBInstanceAvailableFunc == nil {
		panic("rdsClientMock.WaitUntilDBInstanceAvailableFunc: method is nil but rdsClient.WaitUntilDBInstanceAvailable was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBInstancesInput
	}{
		In1: in1,
	}
	lockrdsClientMockWaitUntilDBInstanceAvailable.Lock()
	mock.calls.WaitUntilDBInstanceAvailable = append(mock.calls.WaitUntilDBInstanceAvailable, callInfo)
	lockrdsClientMockWaitUntilDBInstanceAvailable.Unlock()
	return mock.WaitUntilDBInstanceAvailableFunc(in1)
}

// WaitUntilDBInstanceAvailableCalls gets all the calls that were made to WaitUntilDBInstanceAvailable.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBInstanceAvailableCalls())
func (mock *rdsClientMock) WaitUntilDBInstanceAvailableCalls() []struct {
	In1 *rds.DescribeDBInstancesInput
} {
	var calls []struct {
		In1 *rds.DescribeDBInstancesInput
	}
	lockrdsClientMockWaitUntilDBInstanceAvailable.RLock()
	calls = mock.calls.WaitUntilDBInstanceAvailable
	lockrdsClientMockWaitUntilDBInstanceAvailable.RUnlock()
	return calls
}

// WaitUntilDBInstanceAvailableWithContext calls WaitUntilDBInstanceAvailableWithContextFunc.
func (mock *rdsClientMock) WaitUntilDBInstanceAvailableWithContext(in1 context.Context, in2 *rds.DescribeDBInstancesInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilDBInstanceAvailableWithContextFunc == nil {
		panic("rdsClientMock.WaitUntilDBInstanceAvailableWithContextFunc: method is nil but rdsClient.WaitUntilDBInstanceAvailableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBInstancesInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockWaitUntilDBInstanceAvailableWithContext.Lock()
	mock.calls.WaitUntilDBInstanceAvailableWithContext = append(mock.calls.WaitUntilDBInstanceAvailableWithContext, callInfo)
	lockrdsClientMockWaitUntilDBInstanceAvailableWithContext.Unlock()
	return mock.WaitUntilDBInstanceAvailableWithContextFunc(in1, in2, in3...)
}

// WaitUntilDBInstanceAvailableWithContextCalls gets all the calls that were made to WaitUntilDBInstanceAvailableWithContext.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBInstanceAvailableWithContextCalls())
func (mock *rdsClientMock) WaitUntilDBInstanceAvailableWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBInstancesInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBInstancesInput
		In3 []request.WaiterOption
	}
	lockrdsClientMockWaitUntilDBInstanceAvailableWithContext.RLock()
	calls = mock.calls.WaitUntilDBInstanceAvailableWithContext
	lockrdsClientMockWaitUntilDBInstanceAvailableWithContext.RUnlock()
	return calls
}

// WaitUntilDBInstanceDeleted calls WaitUntilDBInstanceDeletedFunc.
func (mock *rdsClientMock) WaitUntilDBInstanceDeleted(in1 *rds.DescribeDBInstancesInput) error {
	if mock.WaitUntilDBInstanceDeletedFunc == nil {
		panic("rdsClientMock.WaitUntilDBInstanceDeletedFunc: method is nil but rdsClient.WaitUntilDBInstanceDeleted was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBInstancesInput
	}{
		In1: in1,
	}
	lockrdsClientMockWaitUntilDBInstanceDeleted.Lock()
	mock.calls.WaitUntilDBInstanceDeleted = append(mock.calls.WaitUntilDBInstanceDeleted, callInfo)
	lockrdsClientMockWaitUntilDBInstanceDeleted.Unlock()
	return mock.WaitUntilDBInstanceDeletedFunc(in1)
}

// WaitUntilDBInstanceDeletedCalls gets all the calls that were made to WaitUntilDBInstanceDeleted.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBInstanceDeletedCalls())
func (mock *rdsClientMock) WaitUntilDBInstanceDeletedCalls() []struct {
	In1 *rds.DescribeDBInstancesInput
} {
	var calls []struct {
		In1 *rds.DescribeDBInstancesInput
	}
	lockrdsClientMockWaitUntilDBInstanceDeleted.RLock()
	calls = mock.calls.WaitUntilDBInstanceDeleted
	lockrdsClientMockWaitUntilDBInstanceDeleted.RUnlock()
	return calls
}

// WaitUntilDBInstanceDeletedWithContext calls WaitUntilDBInstanceDeletedWithContextFunc.
func (mock *rdsClientMock) WaitUntilDBInstanceDeletedWithContext(in1 context.Context, in2 *rds.DescribeDBInstancesInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilDBInstanceDeletedWithContextFunc == nil {
		panic("rdsClientMock.WaitUntilDBInstanceDeletedWithContextFunc: method is nil but rdsClient.WaitUntilDBInstanceDeletedWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBInstancesInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockWaitUntilDBInstanceDeletedWithContext.Lock()
	mock.calls.WaitUntilDBInstanceDeletedWithContext = append(mock.calls.WaitUntilDBInstanceDeletedWithContext, callInfo)
	lockrdsClientMockWaitUntilDBInstanceDeletedWithContext.Unlock()
	return mock.WaitUntilDBInstanceDeletedWithContextFunc(in1, in2, in3...)
}

// WaitUntilDBInstanceDeletedWithContextCalls gets all the calls that were made to WaitUntilDBInstanceDeletedWithContext.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBInstanceDeletedWithContextCalls())
func (mock *rdsClientMock) WaitUntilDBInstanceDeletedWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBInstancesInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBInstancesInput
		In3 []request.WaiterOption
	}
	lockrdsClientMockWaitUntilDBInstanceDeletedWithContext.RLock()
	calls = mock.calls.WaitUntilDBInstanceDeletedWithContext
	lockrdsClientMockWaitUntilDBInstanceDeletedWithContext.RUnlock()
	return calls
}

// WaitUntilDBSnapshotAvailable calls WaitUntilDBSnapshotAvailableFunc.
func (mock *rdsClientMock) WaitUntilDBSnapshotAvailable(in1 *rds.DescribeDBSnapshotsInput) error {
	if mock.WaitUntilDBSnapshotAvailableFunc == nil {
		panic("rdsClientMock.WaitUntilDBSnapshotAvailableFunc: method is nil but rdsClient.WaitUntilDBSnapshotAvailable was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBSnapshotsInput
	}{
		In1: in1,
	}
	lockrdsClientMockWaitUntilDBSnapshotAvailable.Lock()
	mock.calls.WaitUntilDBSnapshotAvailable = append(mock.calls.WaitUntilDBSnapshotAvailable, callInfo)
	lockrdsClientMockWaitUntilDBSnapshotAvailable.Unlock()
	return mock.WaitUntilDBSnapshotAvailableFunc(in1)
}

// WaitUntilDBSnapshotAvailableCalls gets all the calls that were made to WaitUntilDBSnapshotAvailable.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBSnapshotAvailableCalls())
func (mock *rdsClientMock) WaitUntilDBSnapshotAvailableCalls() []struct {
	In1 *rds.DescribeDBSnapshotsInput
} {
	var calls []struct {
		In1 *rds.DescribeDBSnapshotsInput
	}
	lockrdsClientMockWaitUntilDBSnapshotAvailable.RLock()
	calls = mock.calls.WaitUntilDBSnapshotAvailable
	lockrdsClientMockWaitUntilDBSnapshotAvailable.RUnlock()
	return calls
}

// WaitUntilDBSnapshotAvailableWithContext calls WaitUntilDBSnapshotAvailableWithContextFunc.
func (mock *rdsClientMock) WaitUntilDBSnapshotAvailableWithContext(in1 context.Context, in2 *rds.DescribeDBSnapshotsInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilDBSnapshotAvailableWithContextFunc == nil {
		panic("rdsClientMock.WaitUntilDBSnapshotAvailableWithContextFunc: method is nil but rdsClient.WaitUntilDBSnapshotAvailableWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBSnapshotsInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockWaitUntilDBSnapshotAvailableWithContext.Lock()
	mock.calls.WaitUntilDBSnapshotAvailableWithContext = append(mock.calls.WaitUntilDBSnapshotAvailableWithContext, callInfo)
	lockrdsClientMockWaitUntilDBSnapshotAvailableWithContext.Unlock()
	return mock.WaitUntilDBSnapshotAvailableWithContextFunc(in1, in2, in3...)
}

// WaitUntilDBSnapshotAvailableWithContextCalls gets all the calls that were made to WaitUntilDBSnapshotAvailableWithContext.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBSnapshotAvailableWithContextCalls())
func (mock *rdsClientMock) WaitUntilDBSnapshotAvailableWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBSnapshotsInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBSnapshotsInput
		In3 []request.WaiterOption
	}
	lockrdsClientMockWaitUntilDBSnapshotAvailableWithContext.RLock()
	calls = mock.calls.WaitUntilDBSnapshotAvailableWithContext
	lockrdsClientMockWaitUntilDBSnapshotAvailableWithContext.RUnlock()
	return calls
}

// WaitUntilDBSnapshotDeleted calls WaitUntilDBSnapshotDeletedFunc.
func (mock *rdsClientMock) WaitUntilDBSnapshotDeleted(in1 *rds.DescribeDBSnapshotsInput) error {
	if mock.WaitUntilDBSnapshotDeletedFunc == nil {
		panic("rdsClientMock.WaitUntilDBSnapshotDeletedFunc: method is nil but rdsClient.WaitUntilDBSnapshotDeleted was just called")
	}
	callInfo := struct {
		In1 *rds.DescribeDBSnapshotsInput
	}{
		In1: in1,
	}
	lockrdsClientMockWaitUntilDBSnapshotDeleted.Lock()
	mock.calls.WaitUntilDBSnapshotDeleted = append(mock.calls.WaitUntilDBSnapshotDeleted, callInfo)
	lockrdsClientMockWaitUntilDBSnapshotDeleted.Unlock()
	return mock.WaitUntilDBSnapshotDeletedFunc(in1)
}

// WaitUntilDBSnapshotDeletedCalls gets all the calls that were made to WaitUntilDBSnapshotDeleted.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBSnapshotDeletedCalls())
func (mock *rdsClientMock) WaitUntilDBSnapshotDeletedCalls() []struct {
	In1 *rds.DescribeDBSnapshotsInput
} {
	var calls []struct {
		In1 *rds.DescribeDBSnapshotsInput
	}
	lockrdsClientMockWaitUntilDBSnapshotDeleted.RLock()
	calls = mock.calls.WaitUntilDBSnapshotDeleted
	lockrdsClientMockWaitUntilDBSnapshotDeleted.RUnlock()
	return calls
}

// WaitUntilDBSnapshotDeletedWithContext calls WaitUntilDBSnapshotDeletedWithContextFunc.
func (mock *rdsClientMock) WaitUntilDBSnapshotDeletedWithContext(in1 context.Context, in2 *rds.DescribeDBSnapshotsInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilDBSnapshotDeletedWithContextFunc == nil {
		panic("rdsClientMock.WaitUntilDBSnapshotDeletedWithContextFunc: method is nil but rdsClient.WaitUntilDBSnapshotDeletedWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *rds.DescribeDBSnapshotsInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockrdsClientMockWaitUntilDBSnapshotDeletedWithContext.Lock()
	mock.calls.WaitUntilDBSnapshotDeletedWithContext = append(mock.calls.WaitUntilDBSnapshotDeletedWithContext, callInfo)
	lockrdsClientMockWaitUntilDBSnapshotDeletedWithContext.Unlock()
	return mock.WaitUntilDBSnapshotDeletedWithContextFunc(in1, in2, in3...)
}

// WaitUntilDBSnapshotDeletedWithContextCalls gets all the calls that were made to WaitUntilDBSnapshotDeletedWithContext.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBSnapshotDeletedWithContextCalls())
func (mock *rdsClientMock) WaitUntilDBSnapshotDeletedWithContextCalls() []struct {
	In1 context.Context
	In2 *rds.DescribeDBSnapshotsInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *rds.DescribeDBSnapshotsInput
		In3 []request.WaiterOption
	}
	lockrdsClientMockWaitUntilDBSnapshotDeletedWithContext.RLock()
	calls = mock.calls.WaitUntilDBSnapshotDeletedWithContext
	lockrdsClientMockWaitUntilDBSnapshotDeletedWithContext.RUnlock()
	return calls
}
